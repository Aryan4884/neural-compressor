Search.setIndex({"docnames": ["autoapi/644ec953a7dc_pruning_support/index", "autoapi/6ece06672ed3_v1_14/index", "autoapi/6f0d0f71d92e_v1_13/index", "autoapi/9e89549a08c8_v1_11/index", "autoapi/block_mask/index", "autoapi/env/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/compression/pruning/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/export/utils/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/index", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index", "autoapi/neural_compressor/ux/components/configuration_wizard/index", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index", "autoapi/neural_compressor/ux/components/db_manager/utils/index", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/factory/index", "autoapi/neural_compressor/ux/components/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index", "autoapi/neural_compressor/ux/components/file_browser/index", "autoapi/neural_compressor/ux/components/graph/attribute/index", "autoapi/neural_compressor/ux/components/graph/collapser/index", "autoapi/neural_compressor/ux/components/graph/edge/index", "autoapi/neural_compressor/ux/components/graph/graph/index", "autoapi/neural_compressor/ux/components/graph/graph_reader/index", "autoapi/neural_compressor/ux/components/graph/index", "autoapi/neural_compressor/ux/components/graph/node/index", "autoapi/neural_compressor/ux/components/graph/reader/index", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index", "autoapi/neural_compressor/ux/components/index", "autoapi/neural_compressor/ux/components/jobs_management/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index", "autoapi/neural_compressor/ux/components/jobs_management/request/index", "autoapi/neural_compressor/ux/components/manage_workspace/index", "autoapi/neural_compressor/ux/components/model/domain/index", "autoapi/neural_compressor/ux/components/model/index", "autoapi/neural_compressor/ux/components/model/model/index", "autoapi/neural_compressor/ux/components/model/model_type_getter/index", "autoapi/neural_compressor/ux/components/model/onnxrt/index", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index", "autoapi/neural_compressor/ux/components/model/pytorch/index", "autoapi/neural_compressor/ux/components/model/pytorch/model/index", "autoapi/neural_compressor/ux/components/model/repository/index", "autoapi/neural_compressor/ux/components/model/shape/index", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index", "autoapi/neural_compressor/ux/components/model/tensorflow/index", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index", "autoapi/neural_compressor/ux/components/model_zoo/index", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index", "autoapi/neural_compressor/ux/components/names_mapper/index", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index", "autoapi/neural_compressor/ux/components/optimization/factory/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/optimization/index", "autoapi/neural_compressor/ux/components/optimization/pruning/index", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index", "autoapi/neural_compressor/ux/components/optimization/tune/index", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index", "autoapi/neural_compressor/ux/components/profiling/factory/index", "autoapi/neural_compressor/ux/components/profiling/index", "autoapi/neural_compressor/ux/components/profiling/profile_model/index", "autoapi/neural_compressor/ux/components/profiling/profiler/index", "autoapi/neural_compressor/ux/components/profiling/profiling/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index", "autoapi/neural_compressor/ux/inc_bench/index", "autoapi/neural_compressor/ux/index", "autoapi/neural_compressor/ux/utils/consts/index", "autoapi/neural_compressor/ux/utils/environment/index", "autoapi/neural_compressor/ux/utils/exceptions/index", "autoapi/neural_compressor/ux/utils/executor/index", "autoapi/neural_compressor/ux/utils/expiring_dict/index", "autoapi/neural_compressor/ux/utils/github_info/index", "autoapi/neural_compressor/ux/utils/hw_info/index", "autoapi/neural_compressor/ux/utils/index", "autoapi/neural_compressor/ux/utils/json_serializer/index", "autoapi/neural_compressor/ux/utils/logger/index", "autoapi/neural_compressor/ux/utils/parser/index", "autoapi/neural_compressor/ux/utils/proc/index", "autoapi/neural_compressor/ux/utils/processes/index", "autoapi/neural_compressor/ux/utils/singleton/index", "autoapi/neural_compressor/ux/utils/status_updates/index", "autoapi/neural_compressor/ux/utils/templates/index", "autoapi/neural_compressor/ux/utils/templates/metric/index", "autoapi/neural_compressor/ux/utils/templates/workdir/index", "autoapi/neural_compressor/ux/utils/utils/index", "autoapi/neural_compressor/ux/utils/workload/config/index", "autoapi/neural_compressor/ux/utils/workload/dataloader/index", "autoapi/neural_compressor/ux/utils/workload/evaluation/index", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index", "autoapi/neural_compressor/ux/utils/workload/index", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index", "autoapi/neural_compressor/ux/utils/workload/model/index", "autoapi/neural_compressor/ux/utils/workload/pruning/index", "autoapi/neural_compressor/ux/utils/workload/quantization/index", "autoapi/neural_compressor/ux/utils/workload/tuning/index", "autoapi/neural_compressor/ux/utils/yaml_utils/index", "autoapi/neural_compressor/ux/web/communication/index", "autoapi/neural_compressor/ux/web/configuration/index", "autoapi/neural_compressor/ux/web/exceptions/index", "autoapi/neural_compressor/ux/web/index", "autoapi/neural_compressor/ux/web/router/index", "autoapi/neural_compressor/ux/web/server/index", "autoapi/neural_compressor/ux/web/service/benchmark/index", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index", "autoapi/neural_compressor/ux/web/service/index", "autoapi/neural_compressor/ux/web/service/model/index", "autoapi/neural_compressor/ux/web/service/optimization/index", "autoapi/neural_compressor/ux/web/service/profiling/index", "autoapi/neural_compressor/ux/web/service/request_data_processor/index", "autoapi/neural_compressor/ux/web/service/response_generator/index", "autoapi/neural_compressor/ux/web/service/workload/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/bench", "docs/source/benchmark", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/objective", "docs/source/orchestration", "docs/source/platform_configuration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/644ec953a7dc_pruning_support/index.rst", "autoapi/6ece06672ed3_v1_14/index.rst", "autoapi/6f0d0f71d92e_v1_13/index.rst", "autoapi/9e89549a08c8_v1_11/index.rst", "autoapi/block_mask/index.rst", "autoapi/env/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/compression/pruning/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/export/utils/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index.rst", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/index.rst", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index.rst", "autoapi/neural_compressor/ux/components/db_manager/utils/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/factory/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index.rst", "autoapi/neural_compressor/ux/components/file_browser/index.rst", "autoapi/neural_compressor/ux/components/graph/attribute/index.rst", "autoapi/neural_compressor/ux/components/graph/collapser/index.rst", "autoapi/neural_compressor/ux/components/graph/edge/index.rst", "autoapi/neural_compressor/ux/components/graph/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/graph_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/node/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index.rst", "autoapi/neural_compressor/ux/components/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/request/index.rst", "autoapi/neural_compressor/ux/components/manage_workspace/index.rst", "autoapi/neural_compressor/ux/components/model/domain/index.rst", "autoapi/neural_compressor/ux/components/model/index.rst", "autoapi/neural_compressor/ux/components/model/model/index.rst", "autoapi/neural_compressor/ux/components/model/model_type_getter/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/model/index.rst", "autoapi/neural_compressor/ux/components/model/repository/index.rst", "autoapi/neural_compressor/ux/components/model/shape/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/factory/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/profile_model/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/ux/inc_bench/index.rst", "autoapi/neural_compressor/ux/index.rst", "autoapi/neural_compressor/ux/utils/consts/index.rst", "autoapi/neural_compressor/ux/utils/environment/index.rst", "autoapi/neural_compressor/ux/utils/exceptions/index.rst", "autoapi/neural_compressor/ux/utils/executor/index.rst", "autoapi/neural_compressor/ux/utils/expiring_dict/index.rst", "autoapi/neural_compressor/ux/utils/github_info/index.rst", "autoapi/neural_compressor/ux/utils/hw_info/index.rst", "autoapi/neural_compressor/ux/utils/index.rst", "autoapi/neural_compressor/ux/utils/json_serializer/index.rst", "autoapi/neural_compressor/ux/utils/logger/index.rst", "autoapi/neural_compressor/ux/utils/parser/index.rst", "autoapi/neural_compressor/ux/utils/proc/index.rst", "autoapi/neural_compressor/ux/utils/processes/index.rst", "autoapi/neural_compressor/ux/utils/singleton/index.rst", "autoapi/neural_compressor/ux/utils/status_updates/index.rst", "autoapi/neural_compressor/ux/utils/templates/index.rst", "autoapi/neural_compressor/ux/utils/templates/metric/index.rst", "autoapi/neural_compressor/ux/utils/templates/workdir/index.rst", "autoapi/neural_compressor/ux/utils/utils/index.rst", "autoapi/neural_compressor/ux/utils/workload/config/index.rst", "autoapi/neural_compressor/ux/utils/workload/dataloader/index.rst", "autoapi/neural_compressor/ux/utils/workload/evaluation/index.rst", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index.rst", "autoapi/neural_compressor/ux/utils/workload/index.rst", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index.rst", "autoapi/neural_compressor/ux/utils/workload/model/index.rst", "autoapi/neural_compressor/ux/utils/workload/pruning/index.rst", "autoapi/neural_compressor/ux/utils/workload/quantization/index.rst", "autoapi/neural_compressor/ux/utils/workload/tuning/index.rst", "autoapi/neural_compressor/ux/utils/yaml_utils/index.rst", "autoapi/neural_compressor/ux/web/communication/index.rst", "autoapi/neural_compressor/ux/web/configuration/index.rst", "autoapi/neural_compressor/ux/web/exceptions/index.rst", "autoapi/neural_compressor/ux/web/index.rst", "autoapi/neural_compressor/ux/web/router/index.rst", "autoapi/neural_compressor/ux/web/server/index.rst", "autoapi/neural_compressor/ux/web/service/benchmark/index.rst", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index.rst", "autoapi/neural_compressor/ux/web/service/index.rst", "autoapi/neural_compressor/ux/web/service/model/index.rst", "autoapi/neural_compressor/ux/web/service/optimization/index.rst", "autoapi/neural_compressor/ux/web/service/profiling/index.rst", "autoapi/neural_compressor/ux/web/service/request_data_processor/index.rst", "autoapi/neural_compressor/ux/web/service/response_generator/index.rst", "autoapi/neural_compressor/ux/web/service/workload/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/bench.md", "docs/source/benchmark.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/platform_configuration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">644ec953a7dc_pruning_support</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6ece06672ed3_v1_14</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6f0d0f71d92e_v1_13</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">9e89549a08c8_v1_11</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">env</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.execute_benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.benchmark_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.graph_optimization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.mixed_precision_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.profiling_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.pruning_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.quantization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.configuration_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_boundary_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.params_feeder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.pruning_config_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain_flavour</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.framework</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.project</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.pruning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.examples_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.model_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.project_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.params_interfaces</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.attribute</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.collapser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.edge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.onnxrt_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.tensorflow_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_control_queue</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.request</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.manage_workspace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model_type_getter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.shape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.frozen_pb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.meta_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.saved_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.list_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.execute_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tune_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.execute_profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profile_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.inc_bench</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.consts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.environment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.executor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.expiring_dict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.github_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.hw_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.json_serializer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.proc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.processes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.status_updates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.workdir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.yaml_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.communication</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.server</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.history_snapshot_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.request_data_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.response_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Intel\u00ae Neural Compressor Bench", "Benchmarking", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Full Publications/Events (59)", "Pythonic Style Access for Configurations", "Quantization", "Turn OFF Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"pruning_support": 0, "revis": [0, 1, 2, 3], "id": [0, 1, 2, 3, 159, 210, 212, 252, 262, 264, 265, 266, 267, 315, 317, 318, 319, 320, 437, 587, 619, 623], "644ec953a7dc": 0, "6ece06672ed3": [0, 1], "creat": [0, 1, 2, 3, 5, 18, 21, 105, 178, 179, 184, 194, 196, 214, 228, 238, 240, 265, 275, 276, 311, 318, 350, 353, 358, 532, 549, 552, 555, 573, 590, 601, 603, 605, 606, 609, 616, 619, 621, 623], "date": [0, 1, 2, 3], "2022": [0, 1, 2, 3, 178, 179, 554, 586, 620], "12": [0, 570, 582, 585, 626], "09": [0, 626], "17": [0, 620, 626], "22": [0, 3, 585, 626], "310141": 0, "v1": [1, 2, 3, 146, 206, 207, 250, 266, 267, 269, 319, 320, 322, 331, 577, 582, 587, 590, 613, 618, 619, 626], "14": [1, 2, 179, 257, 258, 579, 585, 620, 626], "6f0d0f71d92e": [1, 2], "08": [1, 211, 253, 622, 626], "31": [1, 626], "07": [1, 2, 620, 625, 626], "16": [1, 572, 573, 620, 626], "24": [1, 613, 620, 623, 626], "229939": 1, "update_dataload": 1, "db_session": [1, 419], "sqlalchemi": [1, 406, 419, 580, 585], "orm": [1, 406, 419], "session": [1, 146, 193, 237, 331, 419, 588, 621], "sourc": [1, 5, 6, 8, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 250, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 287, 288, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 349, 350, 351, 352, 353, 355, 356, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 418, 419, 420, 421, 424, 425, 426, 428, 429, 431, 432, 433, 434, 435, 437, 439, 440, 446, 447, 449, 450, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 475, 476, 478, 479, 481, 482, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 551, 554, 586, 588, 601, 603, 605, 606, 608, 614], "updat": [1, 74, 153, 164, 170, 174, 258, 294, 322, 334, 368, 419, 489, 516, 570, 579, 580, 587, 588, 594, 599, 602, 612, 613, 620, 623, 624], "dataload": [1, 18, 20, 148, 151, 153, 159, 166, 168, 182, 183, 194, 205, 215, 226, 227, 238, 249, 254, 261, 284, 289, 298, 314, 334, 355, 358, 366, 393, 417, 419, 441, 482, 495, 501, 509, 520, 525, 551, 554, 555, 570, 575, 576, 577, 582, 583, 587, 588, 589, 611, 616, 617, 620, 621, 622, 625], "exist": [1, 53, 159, 176, 212, 331, 452, 520, 579, 587, 595, 623], "databas": [1, 196, 240, 384, 387, 389, 392, 393, 394, 397, 398, 403, 407, 408, 412, 417], "update_transform": 1, "transform": [1, 44, 50, 141, 143, 144, 145, 171, 194, 195, 196, 197, 198, 199, 201, 203, 205, 238, 239, 240, 241, 242, 243, 245, 247, 249, 261, 314, 393, 417, 419, 441, 520, 522, 551, 552, 572, 573, 575, 576, 577, 578, 582, 588, 591, 596, 597, 598, 599, 613, 614, 617, 620, 621, 625, 626], "13": [2, 3, 570, 585, 620], "9e89549a08c8": [2, 3], "29": [2, 620, 626], "41": [2, 620, 626], "291905": 2, "11": [3, 570, 585, 587, 589, 620, 623], "03": [3, 626], "34": [3, 626], "52": [3, 620, 626], "916541": 3, "block": [4, 164, 170, 171, 174, 292, 333, 353, 537, 584, 610, 613, 620], "mask": [4, 169, 170, 171, 194, 238, 265, 294, 318, 613, 626], "run_migrations_offlin": 5, "run": [5, 18, 146, 159, 171, 174, 178, 179, 182, 183, 193, 210, 212, 226, 227, 237, 252, 293, 294, 301, 323, 334, 338, 355, 467, 513, 535, 537, 550, 555, 570, 571, 577, 580, 581, 588, 589, 591, 593, 595, 596, 597, 599, 601, 602, 603, 605, 606, 608, 614, 616, 618, 619, 621, 623, 625], "migrat": [5, 620, 624], "offlin": [5, 365, 549, 588, 616, 620], "mode": [5, 43, 44, 45, 110, 151, 203, 247, 265, 311, 318, 331, 350, 365, 555, 570, 584, 585, 601, 605, 616, 617, 623], "thi": [5, 45, 86, 110, 132, 139, 141, 145, 148, 153, 158, 160, 166, 168, 170, 171, 172, 173, 178, 179, 182, 183, 193, 194, 195, 196, 197, 198, 199, 201, 211, 214, 220, 221, 226, 227, 237, 238, 239, 240, 241, 242, 243, 245, 253, 262, 265, 266, 267, 269, 278, 279, 281, 282, 283, 284, 289, 292, 294, 296, 297, 298, 301, 304, 315, 318, 319, 320, 322, 323, 333, 334, 338, 343, 353, 355, 364, 365, 549, 550, 551, 552, 555, 570, 572, 573, 575, 576, 577, 581, 584, 586, 587, 588, 589, 590, 591, 593, 594, 596, 597, 599, 601, 603, 605, 606, 607, 608, 609, 613, 616, 617, 618, 619, 620, 621, 622, 623, 624], "configur": [5, 16, 18, 19, 45, 118, 147, 153, 159, 174, 175, 178, 179, 182, 183, 185, 196, 199, 212, 217, 226, 227, 240, 243, 254, 258, 260, 271, 272, 273, 275, 284, 289, 293, 297, 298, 304, 314, 322, 323, 333, 334, 343, 355, 357, 358, 363, 364, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 471, 501, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 535, 537, 551, 552, 555, 570, 573, 587, 588, 595, 609, 610, 613, 616, 618, 622, 623, 626], "context": [5, 18, 365, 615], "just": [5, 97, 184, 209, 211, 214, 216, 217, 219, 228, 253, 333, 552, 588, 598, 602, 608, 611, 616, 620, 622, 623], "url": [5, 196, 240, 586], "an": [5, 18, 67, 68, 70, 105, 141, 148, 153, 158, 171, 178, 179, 187, 192, 196, 211, 215, 220, 231, 236, 240, 253, 261, 262, 266, 267, 275, 276, 298, 314, 315, 319, 320, 323, 334, 353, 355, 365, 429, 547, 549, 551, 552, 554, 555, 572, 573, 574, 579, 587, 588, 589, 591, 595, 596, 599, 608, 610, 613, 614, 616, 619, 620, 621, 622, 623], "engin": 5, "though": [5, 620], "i": [5, 18, 44, 45, 48, 49, 53, 54, 57, 60, 64, 70, 82, 85, 105, 132, 141, 146, 148, 152, 153, 158, 159, 160, 164, 168, 169, 171, 172, 174, 178, 179, 182, 183, 184, 192, 193, 194, 195, 196, 197, 198, 201, 203, 207, 211, 212, 214, 218, 220, 221, 226, 227, 228, 236, 237, 238, 239, 240, 241, 242, 245, 247, 250, 253, 262, 265, 267, 269, 271, 276, 284, 289, 293, 294, 298, 305, 315, 318, 320, 322, 323, 333, 334, 339, 344, 353, 355, 364, 365, 429, 468, 508, 512, 518, 520, 528, 535, 549, 550, 551, 552, 554, 555, 556, 558, 562, 565, 568, 570, 571, 572, 573, 575, 576, 577, 579, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 599, 601, 602, 603, 605, 606, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626], "accept": [5, 178, 179, 353, 549, 570, 571], "here": [5, 265, 318, 353, 570, 573, 577, 578, 579, 581, 582, 587, 596, 603, 606, 608, 616, 618, 619, 626], "well": [5, 182, 183, 226, 227, 323, 334, 355, 552, 554, 573, 613, 616, 618, 620, 625], "By": [5, 168, 178, 179, 262, 315, 554, 587, 590, 601, 602, 605, 614, 623], "skip": [5, 621, 623], "creation": [5, 381], "we": [5, 44, 67, 68, 70, 74, 86, 141, 151, 157, 158, 159, 168, 178, 179, 193, 212, 214, 237, 262, 265, 315, 318, 341, 549, 551, 555, 572, 577, 579, 581, 587, 588, 595, 596, 599, 603, 606, 608, 609, 610, 611, 613, 615, 616, 619, 620, 621, 623, 624], "don": [5, 141, 158, 170, 178, 179, 551, 570, 613, 623], "t": [5, 67, 68, 70, 141, 158, 170, 178, 179, 211, 214, 253, 267, 320, 551, 555, 570, 575, 577, 588, 609, 613, 616, 623, 625], "even": [5, 570, 620], "need": [5, 18, 44, 105, 109, 151, 159, 168, 179, 182, 183, 184, 192, 193, 196, 203, 211, 214, 216, 217, 226, 227, 228, 236, 237, 240, 247, 253, 298, 304, 322, 323, 333, 334, 343, 355, 364, 365, 551, 555, 570, 572, 573, 575, 577, 584, 588, 589, 591, 593, 594, 597, 601, 602, 603, 605, 606, 608, 609, 613, 615, 616, 617, 618, 620, 622, 623, 625], "dbapi": 5, "avail": [5, 178, 179, 327, 468, 556, 558, 562, 565, 568, 570, 578, 582, 584, 601, 605, 612, 613, 623, 626], "call": [5, 18, 151, 154, 168, 171, 265, 294, 318, 551, 552, 555, 570, 572, 583, 597, 599, 609, 616, 620, 621, 622], "execut": [5, 44, 53, 159, 171, 178, 179, 294, 298, 300, 334, 335, 337, 355, 358, 364, 365, 367, 368, 471, 475, 479, 483, 484, 487, 490, 502, 505, 513, 514, 536, 570, 575, 576, 588, 589, 593, 594, 601, 602, 605, 608, 609, 611, 613, 616, 619, 623, 626], "emit": 5, "given": [5, 18, 21, 67, 68, 70, 104, 105, 116, 146, 153, 211, 253, 265, 318, 334, 429, 506, 520, 552, 613, 620, 622], "string": [5, 44, 45, 116, 146, 159, 161, 168, 170, 171, 172, 173, 174, 175, 178, 179, 196, 213, 218, 240, 254, 258, 260, 262, 265, 271, 272, 273, 275, 276, 284, 289, 292, 293, 294, 295, 296, 297, 315, 318, 327, 331, 358, 365, 378, 520, 587, 620, 622], "script": [5, 168, 262, 263, 266, 267, 315, 316, 319, 320, 367, 368, 454, 471, 475, 479, 481, 484, 487, 493, 577, 584, 591, 595, 598, 599, 602, 614], "output": [5, 44, 53, 57, 59, 74, 98, 105, 110, 146, 153, 168, 169, 170, 176, 178, 179, 182, 183, 216, 220, 226, 227, 257, 258, 262, 292, 315, 322, 323, 331, 334, 355, 361, 362, 365, 475, 479, 551, 555, 570, 575, 576, 577, 579, 581, 583, 587, 588, 590, 599, 608, 609, 611, 613, 615, 616, 620, 621, 622, 623, 625], "run_migrations_onlin": 5, "onlin": [5, 549, 619], "In": [5, 160, 170, 171, 172, 179, 193, 221, 237, 265, 292, 294, 318, 333, 549, 551, 552, 554, 555, 570, 572, 573, 575, 576, 577, 587, 588, 598, 601, 602, 605, 610, 611, 613, 616, 617, 619, 620, 621, 622, 623], "scenario": [5, 382, 555, 570, 571, 575, 588, 613], "associ": [5, 265, 318, 407, 408], "connect": [5, 164, 294, 406, 407, 409, 410, 411, 413, 414, 415, 416, 570, 608, 612, 613, 619], "adaptor_registri": [6, 555], "cl": [6, 154, 161, 170, 171, 172, 173, 196, 203, 211, 213, 218, 240, 247, 253, 276, 283, 287, 292, 294, 296, 307, 322, 333, 346, 365], "The": [6, 8, 16, 19, 21, 38, 44, 53, 74, 113, 119, 121, 146, 153, 154, 159, 160, 161, 164, 168, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 194, 195, 196, 197, 198, 202, 203, 211, 213, 216, 218, 221, 223, 226, 227, 228, 238, 239, 240, 241, 242, 246, 247, 253, 254, 260, 262, 263, 264, 266, 267, 269, 271, 272, 273, 275, 276, 278, 279, 281, 282, 283, 284, 287, 289, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 311, 313, 315, 316, 317, 319, 320, 322, 323, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 350, 352, 353, 355, 356, 358, 360, 361, 364, 365, 385, 386, 388, 391, 395, 396, 399, 400, 402, 404, 405, 412, 417, 420, 422, 423, 424, 425, 426, 427, 428, 441, 448, 449, 501, 549, 551, 552, 555, 556, 558, 562, 565, 568, 570, 571, 572, 573, 575, 577, 579, 581, 583, 584, 585, 587, 588, 589, 590, 593, 594, 596, 599, 601, 602, 603, 605, 606, 608, 609, 610, 611, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626], "decor": [6, 21, 38, 67, 68, 70, 146, 154, 170, 171, 173, 211, 218, 253, 269, 276, 283, 287, 292, 294, 296, 307, 310, 322, 333, 346, 349, 365, 515, 551, 552, 555, 623], "us": [6, 18, 21, 38, 44, 48, 49, 70, 103, 105, 116, 148, 153, 159, 161, 164, 168, 169, 170, 171, 173, 176, 178, 179, 182, 183, 192, 193, 194, 195, 196, 197, 198, 201, 210, 211, 212, 213, 218, 226, 227, 236, 237, 238, 239, 240, 241, 242, 245, 252, 253, 257, 258, 260, 262, 263, 265, 269, 270, 271, 276, 283, 284, 287, 289, 292, 294, 295, 296, 297, 298, 301, 304, 307, 310, 311, 315, 316, 318, 322, 333, 334, 338, 341, 343, 346, 349, 350, 353, 356, 357, 358, 359, 365, 412, 417, 422, 423, 427, 429, 441, 448, 450, 475, 479, 520, 532, 549, 550, 551, 552, 555, 570, 571, 572, 573, 575, 576, 577, 579, 581, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 599, 601, 603, 605, 606, 608, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626], "regist": [6, 21, 38, 154, 161, 164, 170, 171, 172, 173, 196, 203, 211, 213, 218, 240, 247, 253, 269, 276, 283, 287, 292, 294, 296, 307, 310, 322, 333, 346, 349, 552, 555, 573, 577, 587, 588, 609, 610, 620, 623], "all": [6, 18, 21, 38, 45, 63, 97, 154, 156, 159, 160, 170, 171, 174, 178, 179, 184, 185, 192, 196, 203, 211, 212, 218, 221, 223, 228, 236, 240, 247, 253, 258, 262, 265, 267, 269, 276, 283, 287, 288, 292, 298, 307, 310, 315, 318, 320, 322, 324, 333, 346, 349, 358, 365, 369, 381, 393, 417, 422, 423, 436, 438, 441, 442, 448, 467, 474, 476, 480, 481, 483, 486, 492, 497, 501, 514, 537, 549, 554, 555, 570, 572, 573, 577, 581, 585, 588, 591, 599, 602, 603, 606, 607, 608, 609, 611, 612, 613, 614, 616, 617, 620, 622, 623], "subclass": [6, 21, 38, 154, 170, 171, 173, 189, 193, 196, 203, 211, 218, 233, 237, 240, 247, 253, 269, 276, 283, 287, 292, 294, 296, 307, 310, 322, 333, 346, 349, 555], "paramet": [6, 16, 18, 19, 21, 44, 45, 67, 68, 70, 86, 105, 116, 132, 146, 147, 148, 151, 152, 153, 154, 159, 160, 161, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 193, 194, 196, 203, 207, 211, 213, 218, 223, 226, 227, 237, 238, 240, 247, 250, 253, 254, 256, 257, 258, 259, 260, 262, 263, 265, 266, 267, 269, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 287, 289, 292, 293, 294, 295, 296, 297, 301, 307, 311, 313, 315, 316, 318, 319, 320, 322, 323, 327, 331, 333, 334, 338, 346, 350, 352, 353, 355, 358, 362, 364, 365, 382, 407, 408, 418, 429, 500, 520, 522, 532, 551, 570, 572, 573, 575, 577, 584, 587, 588, 602, 608, 609, 613, 616, 619, 620, 622, 623, 625], "framework_specific_info": [6, 8, 16, 19, 45, 47, 555], "base": [6, 8, 18, 21, 38, 45, 46, 47, 86, 105, 116, 120, 122, 132, 142, 148, 153, 154, 160, 164, 179, 184, 187, 192, 194, 196, 203, 211, 221, 228, 231, 236, 238, 240, 247, 253, 269, 275, 277, 283, 284, 287, 289, 294, 304, 307, 311, 322, 324, 331, 332, 333, 343, 346, 350, 380, 520, 552, 554, 555, 573, 576, 577, 581, 588, 596, 597, 599, 608, 612, 613, 616, 619, 621, 623, 626], "framework": [6, 8, 16, 18, 19, 45, 159, 161, 171, 180, 181, 185, 186, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 208, 211, 213, 214, 218, 224, 225, 229, 230, 232, 234, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 249, 251, 253, 260, 269, 270, 297, 305, 311, 322, 323, 324, 325, 327, 344, 350, 358, 367, 393, 417, 419, 441, 468, 475, 479, 484, 487, 502, 508, 520, 554, 555, 570, 577, 578, 582, 583, 584, 585, 587, 588, 589, 613, 614, 616, 621, 622, 623, 624, 625], "layer": [6, 8, 16, 19, 44, 45, 46, 47, 116, 117, 118, 119, 121, 122, 151, 157, 161, 166, 168, 169, 170, 174, 178, 179, 213, 220, 292, 293, 356, 358, 365, 532, 555, 576, 584, 613, 618], "mxnet_util": 7, "util": [7, 17, 22, 105, 110, 111, 139, 140, 147, 148, 149, 152, 163, 165, 168, 178, 179, 220, 255, 261, 263, 293, 303, 314, 316, 342, 380, 417, 441, 448, 458, 492, 497, 501, 556, 577, 588, 591, 616, 623, 624], "ox_util": 7, "oper": [7, 22, 44, 104, 110, 146, 168, 169, 170, 178, 179, 207, 250, 292, 532, 551, 570, 571, 572, 579, 608, 616, 620, 622, 623], "activ": [7, 22, 34, 153, 178, 179, 220, 258, 311, 350, 425, 555, 570, 576, 581, 588, 609, 612, 615, 616, 620, 621, 625], "argmax": [7, 22, 34], "attent": [7, 22, 34, 166, 168, 178, 179, 194, 238, 549, 575, 613], "binary_op": [7, 22, 34], "concat": [7, 22, 34, 145], "conv": [7, 22, 34, 58, 62, 66, 71, 72, 73, 92, 109, 157, 178, 179, 551, 588, 613, 615, 616, 623], "direct_q8": [7, 22, 34], "embed_layernorm": [7, 22, 34], "gather": [7, 18, 22, 34, 178, 179, 292, 508], "gavgpool": [7, 22, 34], "gemm": [7, 22, 34, 178, 179], "lstm": [7, 22, 34], "matmul": [7, 22, 34, 52, 59, 65, 73, 94, 109, 128, 137, 170, 178, 179, 258, 292, 579, 581, 623], "maxpool": [7, 22, 34, 129, 138, 581], "op": [7, 18, 22, 34, 44, 45, 52, 57, 65, 66, 67, 68, 69, 70, 71, 72, 74, 78, 81, 85, 88, 91, 92, 93, 94, 96, 105, 107, 109, 123, 124, 125, 131, 133, 134, 135, 136, 141, 144, 146, 147, 148, 152, 153, 157, 168, 178, 179, 258, 304, 311, 312, 339, 341, 343, 350, 351, 360, 425, 426, 536, 555, 570, 581, 588, 589, 613, 616, 617, 618, 620, 621, 623, 625], "pad": [7, 22, 34, 71, 72, 194, 211, 238, 253, 573, 622], "pool": [7, 22, 34], "resiz": [7, 22, 34, 194, 195, 207, 211, 238, 239, 250, 253, 572, 573, 622], "split": [7, 22, 34, 44, 82, 210, 211, 252, 253, 551, 620, 622], "calibr": [7, 16, 18, 19, 22, 44, 49, 89, 90, 153, 159, 178, 179, 182, 183, 226, 227, 260, 297, 334, 360, 529, 555, 572, 573, 583, 584, 616, 623, 625], "quantiz": [7, 16, 18, 19, 21, 22, 44, 48, 49, 88, 92, 94, 96, 99, 107, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 147, 148, 151, 153, 157, 159, 160, 178, 179, 182, 183, 207, 214, 221, 226, 227, 250, 258, 259, 260, 261, 271, 298, 304, 310, 314, 339, 341, 343, 355, 356, 360, 364, 365, 501, 509, 525, 555, 560, 570, 572, 573, 577, 578, 579, 581, 583, 584, 587, 589, 590, 591, 596, 598, 599, 602, 611, 614, 618, 621, 622, 623, 624, 625], "tf_util": 7, "graph_rewrit": [7, 111], "bf16": [7, 57, 87, 111, 147, 178, 179, 311, 350, 555, 581, 588, 589, 593, 598, 602, 608, 617, 623], "gener": [7, 18, 48, 49, 87, 111, 122, 146, 153, 159, 168, 174, 182, 183, 184, 193, 196, 197, 198, 199, 211, 226, 227, 228, 237, 240, 241, 242, 243, 253, 258, 262, 270, 301, 315, 323, 334, 338, 353, 355, 367, 370, 371, 372, 373, 374, 375, 376, 377, 418, 487, 493, 494, 504, 545, 551, 555, 570, 572, 575, 587, 588, 589, 591, 596, 601, 603, 605, 606, 608, 610, 612, 613, 614, 616, 617, 620, 621, 622, 623], "int8": [7, 23, 24, 44, 87, 111, 123, 124, 125, 131, 133, 134, 135, 136, 141, 146, 158, 159, 178, 179, 207, 250, 256, 257, 258, 311, 313, 350, 352, 364, 551, 555, 570, 571, 573, 576, 581, 588, 593, 596, 598, 599, 602, 608, 615, 616, 617, 618, 619, 620, 621, 622, 625], "onnx": [7, 19, 20, 21, 34, 43, 44, 87, 111, 140, 157, 178, 179, 190, 234, 256, 257, 258, 259, 323, 330, 363, 368, 471, 554, 555, 556, 572, 578, 579, 581, 582, 584, 590, 593, 598, 599, 614, 615, 620, 623], "qdq": [7, 87, 111, 112, 113, 140, 153, 178, 179, 256, 257, 258, 555, 579, 584, 598, 599, 616, 620], "graph_bas": [7, 87, 111], "quantize_graph": [7, 111], "qat": [7, 111, 112, 152, 179, 258, 271, 331, 576, 577, 579, 584, 588, 616], "quantize_graph_bas": [7, 111, 112], "quantize_graph_bn": [7, 111, 112], "quantize_graph_concatv2": [7, 111, 112], "quantize_graph_conv": [7, 111, 112], "quantize_graph_for_intel_cpu": [7, 111, 112], "quantize_graph_matmul": [7, 111, 112], "quantize_graph_pool": [7, 111, 112], "transform_graph": [7, 111], "bias_correct": [7, 111, 143], "graph_transform_bas": [7, 111, 143], "insert_log": [7, 111, 143], "rerange_quantized_concat": [7, 111, 143], "graph_convert": [7, 111], "graph_converter_without_calib": [7, 111], "graph_util": [7, 111], "quantize_graph_common": [7, 111], "tf2onnx_convert": [7, 111], "torch_util": [7, 215, 261, 314, 620], "bf16_convert": [7, 51, 87, 111, 149], "hawq_metr": [7, 149], "model_wrapp": [7, 20, 149], "symbolic_trac": [7, 149], "tensorflow": [7, 51, 53, 75, 76, 77, 87, 95, 101, 102, 103, 104, 105, 106, 110, 111, 112, 114, 117, 130, 140, 143, 146, 178, 179, 193, 194, 195, 196, 199, 201, 203, 211, 213, 218, 237, 238, 239, 240, 243, 245, 247, 253, 257, 258, 259, 260, 263, 265, 269, 270, 271, 297, 305, 316, 318, 322, 323, 331, 334, 344, 365, 427, 428, 440, 441, 448, 497, 498, 499, 501, 552, 554, 555, 570, 572, 575, 576, 578, 579, 581, 582, 584, 585, 588, 590, 598, 599, 613, 614, 615, 619, 623, 625], "kerasadaptor": 8, "kerasqueri": 8, "local_config_fil": [8, 45, 47], "none": [8, 18, 43, 44, 45, 47, 48, 49, 63, 89, 102, 104, 105, 110, 116, 140, 146, 148, 151, 153, 159, 160, 161, 166, 168, 174, 175, 176, 178, 179, 182, 183, 184, 186, 190, 192, 194, 195, 196, 197, 198, 199, 201, 207, 211, 212, 213, 214, 221, 223, 226, 227, 228, 230, 234, 236, 238, 239, 240, 241, 242, 243, 245, 250, 253, 254, 257, 258, 260, 265, 269, 270, 271, 272, 275, 284, 289, 293, 297, 301, 302, 304, 305, 306, 307, 311, 318, 322, 323, 333, 334, 335, 338, 339, 340, 341, 343, 344, 345, 346, 350, 353, 355, 356, 358, 364, 365, 367, 368, 379, 380, 384, 387, 389, 390, 392, 394, 397, 398, 403, 406, 407, 408, 419, 456, 468, 475, 479, 484, 487, 488, 490, 500, 505, 506, 508, 511, 513, 520, 526, 528, 529, 530, 537, 555, 573, 587, 616, 621, 622, 623], "defin": [8, 45, 46, 86, 148, 150, 168, 170, 171, 172, 173, 178, 179, 182, 183, 226, 227, 272, 273, 275, 276, 277, 284, 289, 292, 293, 294, 296, 323, 334, 355, 364, 443, 444, 445, 532, 549, 552, 555, 570, 572, 573, 575, 576, 581, 584, 587, 588, 609, 611, 613, 616, 619, 620, 621, 623, 625], "queri": [8, 18, 45, 47, 146, 168, 178, 179, 406, 407, 409, 410, 411, 413, 414, 415, 416, 616], "interfac": [8, 45, 46, 86, 113, 175, 260, 284, 289, 297, 298, 358, 366, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 482, 488, 495, 507, 584, 588, 599, 612, 616, 618], "each": [8, 44, 45, 46, 148, 178, 179, 192, 196, 199, 207, 211, 236, 240, 243, 250, 253, 263, 265, 266, 267, 304, 316, 318, 319, 320, 343, 550, 555, 570, 573, 575, 576, 581, 588, 589, 593, 599, 602, 608, 610, 613, 619, 620, 621, 622, 623, 624], "adapt": [8, 45, 46, 549, 554, 573, 599, 614], "should": [8, 45, 46, 54, 115, 116, 160, 166, 168, 178, 179, 182, 183, 192, 194, 196, 211, 216, 226, 227, 236, 238, 240, 253, 258, 263, 316, 322, 323, 334, 353, 355, 365, 429, 551, 552, 555, 570, 573, 575, 577, 587, 588, 589, 594, 603, 606, 608, 610, 613, 616, 622, 623, 625], "implement": [8, 45, 46, 110, 141, 145, 182, 183, 189, 192, 193, 194, 196, 226, 227, 233, 236, 237, 238, 240, 262, 315, 323, 333, 334, 341, 355, 572, 573, 588, 599, 609, 613, 616, 618, 621, 623, 625], "inherit": [8, 45, 46, 160, 161, 171, 173, 178, 191, 211, 213, 221, 235, 253, 294, 296, 552, 555, 573], "specif": [8, 16, 19, 45, 46, 104, 116, 159, 174, 178, 179, 194, 195, 196, 197, 201, 203, 218, 238, 239, 240, 241, 245, 247, 271, 278, 279, 281, 282, 283, 322, 334, 407, 408, 549, 552, 555, 570, 575, 581, 583, 587, 588, 589, 590, 591, 595, 596, 598, 602, 608, 610, 613, 615, 623, 625], "backend": [8, 20, 43, 45, 46, 157, 178, 179, 180, 181, 185, 186, 190, 194, 195, 197, 198, 199, 200, 201, 205, 208, 211, 217, 218, 224, 225, 229, 230, 232, 234, 238, 239, 241, 242, 243, 244, 245, 249, 251, 253, 270, 305, 323, 324, 325, 327, 344, 551, 577, 583, 584, 588, 589, 597, 615, 622, 625], "own": [8, 45, 46, 74, 192, 211, 236, 253, 333, 552, 570, 572, 573, 584, 587, 610, 619, 624], "mxnetadaptor": 16, "do": [16, 19, 160, 178, 179, 193, 194, 237, 238, 254, 258, 262, 265, 295, 315, 318, 364, 549, 570, 573, 577, 581, 584, 585, 587, 588, 603, 606, 613, 617, 618, 620, 623], "inspect": [16, 19, 570, 618, 621], "tensor": [16, 18, 19, 20, 21, 44, 70, 105, 146, 148, 153, 164, 170, 171, 172, 179, 211, 253, 256, 258, 292, 294, 304, 331, 343, 365, 551, 573, 613, 616, 618, 621, 622, 623], "dict": [16, 18, 19, 44, 45, 116, 146, 147, 148, 153, 154, 159, 164, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 182, 183, 193, 212, 218, 226, 227, 237, 256, 258, 264, 265, 266, 267, 269, 272, 275, 276, 277, 284, 287, 289, 292, 293, 294, 295, 296, 301, 304, 310, 313, 317, 318, 319, 320, 322, 323, 331, 334, 349, 352, 353, 355, 356, 358, 364, 365, 366, 368, 371, 379, 380, 382, 387, 389, 390, 392, 394, 397, 398, 403, 407, 408, 419, 425, 429, 437, 446, 464, 465, 466, 468, 471, 473, 478, 482, 485, 488, 489, 490, 493, 495, 498, 505, 506, 508, 510, 516, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 532, 536, 537, 551, 587, 613, 615, 616, 620, 621, 623], "mxnet": [17, 18, 21, 179, 189, 193, 196, 199, 203, 211, 233, 237, 240, 243, 247, 253, 260, 269, 297, 322, 323, 328, 334, 554, 555, 572, 578, 581, 584, 585, 588, 589, 590, 615, 623, 625], "init": [17, 22, 156, 162, 165, 167, 573, 587], "optyp": [18, 178, 179, 256], "enum": 18, "type": [18, 21, 44, 45, 74, 96, 105, 116, 122, 132, 146, 147, 148, 153, 154, 161, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 192, 194, 196, 203, 211, 213, 218, 236, 238, 240, 247, 253, 258, 259, 262, 263, 265, 269, 276, 283, 287, 292, 294, 296, 301, 307, 311, 313, 315, 316, 318, 322, 331, 333, 338, 339, 346, 350, 352, 353, 364, 378, 383, 407, 408, 450, 508, 516, 550, 555, 570, 573, 577, 581, 584, 588, 589, 609, 616, 619, 622, 623, 625], "isiter": 18, "obj": [18, 105, 174, 193, 223, 237, 254, 260, 271, 272, 273, 275, 284, 289, 293, 297, 323, 333, 334, 355, 358, 365], "bool": [18, 146, 152, 153, 170, 178, 179, 194, 196, 207, 211, 238, 240, 250, 253, 258, 263, 269, 292, 310, 316, 322, 349, 353, 364, 365, 429, 437, 456, 468, 471, 505, 508, 520, 539, 573, 587, 615, 622], "check": [18, 67, 68, 105, 146, 153, 174, 185, 196, 240, 256, 293, 364, 365, 468, 471, 508, 520, 550, 554, 570, 577, 585, 592, 594, 596, 603, 606, 607, 618], "whether": [18, 105, 116, 146, 170, 178, 179, 192, 194, 207, 211, 236, 238, 250, 253, 263, 265, 269, 292, 316, 318, 322, 358, 364, 365, 471, 555, 573, 587, 616, 620, 622], "object": [18, 44, 45, 74, 86, 105, 116, 132, 147, 148, 152, 153, 159, 160, 164, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 194, 195, 196, 211, 212, 214, 223, 226, 227, 228, 238, 239, 240, 253, 254, 258, 260, 265, 273, 275, 278, 279, 281, 282, 283, 284, 289, 292, 293, 294, 295, 296, 297, 301, 314, 318, 322, 323, 331, 332, 334, 338, 355, 358, 364, 365, 445, 520, 532, 533, 537, 551, 552, 560, 570, 571, 572, 573, 580, 587, 588, 590, 611, 613, 615, 616, 622, 623, 624, 626], "iter": [18, 20, 105, 146, 159, 169, 171, 173, 178, 179, 182, 183, 187, 192, 196, 197, 214, 226, 227, 231, 236, 240, 241, 294, 296, 323, 334, 355, 358, 551, 552, 555, 571, 573, 588, 613, 615, 616, 621, 623, 625], "return": [18, 21, 44, 45, 53, 67, 68, 70, 74, 105, 116, 146, 147, 148, 152, 153, 154, 159, 161, 168, 170, 171, 172, 173, 174, 176, 182, 183, 196, 203, 207, 211, 212, 213, 218, 223, 226, 227, 240, 247, 250, 253, 258, 259, 262, 263, 265, 266, 267, 269, 275, 276, 283, 287, 292, 293, 294, 296, 301, 307, 311, 313, 315, 316, 318, 319, 320, 322, 323, 327, 331, 333, 334, 338, 346, 350, 352, 353, 355, 358, 364, 365, 429, 508, 520, 551, 552, 573, 577, 587, 590, 610, 613, 616, 620, 621, 623], "true": [18, 85, 113, 144, 146, 159, 178, 179, 192, 194, 196, 197, 210, 211, 212, 236, 238, 240, 241, 252, 253, 258, 263, 269, 287, 310, 316, 322, 333, 334, 349, 353, 358, 364, 365, 505, 508, 520, 573, 577, 581, 587, 588, 591, 594, 595, 615, 616, 620, 621, 622, 623, 625], "els": [18, 146, 179, 192, 236, 333, 520, 596, 621], "fals": [18, 20, 43, 47, 48, 49, 71, 72, 89, 92, 99, 102, 103, 105, 113, 131, 136, 141, 144, 145, 146, 152, 153, 159, 161, 178, 179, 184, 186, 190, 194, 196, 207, 211, 212, 213, 214, 220, 228, 230, 234, 238, 240, 250, 253, 265, 269, 318, 322, 333, 334, 353, 358, 365, 437, 456, 508, 520, 539, 555, 573, 581, 587, 588, 601, 605, 615, 616, 620, 621, 622, 625], "boolean": [18, 520], "ensure_list": 18, "x": [18, 54, 74, 169, 178, 179, 193, 211, 237, 253, 301, 338, 353, 577, 579, 589, 590, 616, 620, 621, 622, 624], "ensur": [18, 211, 253, 301, 338, 570, 577, 579, 616, 622], "list": [18, 44, 53, 105, 146, 147, 148, 153, 159, 168, 169, 170, 178, 179, 182, 183, 187, 194, 207, 211, 212, 226, 227, 231, 238, 250, 253, 257, 258, 262, 263, 265, 266, 267, 269, 276, 284, 289, 292, 295, 310, 315, 316, 318, 319, 320, 322, 323, 331, 334, 349, 353, 355, 356, 365, 378, 380, 382, 387, 389, 390, 392, 394, 397, 398, 403, 407, 408, 419, 429, 432, 437, 463, 468, 471, 475, 479, 505, 512, 513, 514, 520, 532, 539, 551, 554, 555, 573, 581, 585, 588, 591, 596, 598, 601, 602, 605, 610, 613, 615, 616, 617, 620, 621, 623], "input": [18, 20, 44, 45, 53, 60, 64, 67, 68, 70, 71, 72, 74, 82, 83, 85, 86, 105, 109, 110, 116, 122, 146, 147, 151, 152, 153, 157, 168, 169, 178, 179, 182, 183, 194, 195, 196, 198, 207, 210, 211, 216, 226, 227, 238, 239, 240, 242, 250, 252, 253, 256, 257, 258, 322, 323, 327, 331, 334, 355, 364, 365, 367, 463, 475, 479, 484, 487, 493, 552, 555, 570, 571, 572, 573, 575, 576, 577, 579, 581, 583, 587, 588, 590, 591, 596, 613, 615, 616, 620, 621, 622, 625], "check_mx_vers": 18, "version": [18, 53, 104, 153, 168, 179, 257, 258, 314, 468, 508, 520, 549, 551, 555, 570, 581, 585, 586, 588, 601, 603, 605, 606, 612, 614, 620, 623, 624], "str": [18, 147, 148, 151, 152, 153, 154, 161, 168, 178, 179, 194, 195, 196, 203, 207, 211, 213, 217, 218, 238, 239, 240, 247, 250, 253, 257, 258, 259, 262, 263, 265, 267, 269, 276, 287, 310, 313, 315, 316, 318, 320, 322, 349, 352, 353, 358, 365, 367, 368, 371, 378, 379, 380, 382, 384, 407, 408, 419, 425, 426, 429, 431, 432, 437, 446, 447, 449, 450, 452, 454, 456, 459, 460, 461, 462, 464, 465, 466, 468, 471, 475, 479, 484, 487, 489, 490, 493, 494, 505, 508, 513, 516, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 532, 536, 537, 573, 587, 615, 621, 622], "mx": 18, "__version__": 18, "combine_cap": 18, "current": [18, 44, 70, 104, 151, 164, 168, 170, 171, 178, 179, 271, 278, 279, 281, 282, 283, 292, 294, 301, 305, 338, 344, 551, 552, 555, 570, 577, 581, 585, 587, 588, 591, 595, 608, 610, 613, 616, 620, 623], "new": [18, 21, 146, 151, 159, 184, 196, 211, 212, 228, 240, 253, 293, 333, 532, 550, 577, 588, 589, 602, 608, 609, 613, 614, 616, 618, 619, 622, 624, 625], "combin": [18, 153, 178, 179, 182, 183, 207, 221, 226, 227, 250, 323, 334, 355, 365, 551, 555, 584, 588, 611, 614, 616, 617, 622, 623], "capabl": [18, 47, 311, 350, 571, 581, 588, 589, 599, 613, 615, 616, 623, 625], "contain": [18, 67, 68, 70, 74, 139, 146, 148, 153, 159, 160, 168, 170, 171, 173, 174, 178, 179, 182, 183, 194, 195, 196, 226, 227, 238, 239, 240, 254, 258, 260, 265, 266, 267, 271, 284, 287, 289, 292, 293, 294, 295, 296, 297, 318, 319, 320, 323, 334, 355, 358, 364, 369, 373, 381, 387, 389, 390, 392, 393, 394, 397, 398, 401, 403, 412, 417, 422, 423, 427, 430, 436, 441, 442, 448, 467, 474, 476, 477, 480, 481, 483, 486, 492, 497, 501, 573, 575, 584, 587, 609, 613, 621, 623, 624], "make_nc_model": 18, "target": [18, 44, 102, 168, 173, 174, 179, 293, 296, 301, 338, 433, 573, 577, 588, 613, 621, 622, 623, 625], "sym_model": 18, "ctx": 18, "input_desc": 18, "convert": [18, 44, 48, 49, 50, 52, 53, 54, 55, 56, 66, 74, 86, 99, 100, 102, 103, 104, 105, 131, 136, 140, 147, 153, 168, 178, 179, 194, 207, 210, 211, 238, 250, 252, 253, 257, 265, 271, 293, 311, 318, 350, 353, 551, 588, 589, 593, 616, 617, 620, 622, 623], "symbol": [18, 147, 152, 153, 262, 315, 323, 334, 551, 590], "model": [18, 20, 21, 34, 43, 44, 45, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 116, 118, 140, 146, 147, 148, 151, 152, 153, 157, 159, 160, 166, 168, 171, 173, 174, 178, 179, 182, 183, 190, 193, 194, 196, 211, 212, 215, 216, 223, 226, 227, 234, 237, 238, 240, 253, 254, 256, 257, 258, 259, 260, 261, 269, 270, 271, 272, 275, 278, 279, 281, 282, 283, 284, 289, 293, 294, 295, 296, 297, 298, 301, 302, 304, 305, 306, 307, 314, 322, 323, 333, 334, 335, 338, 339, 340, 341, 343, 344, 345, 346, 353, 355, 361, 364, 365, 367, 368, 369, 393, 409, 411, 413, 417, 418, 429, 434, 435, 436, 439, 440, 441, 465, 466, 468, 471, 474, 475, 476, 477, 479, 480, 481, 486, 487, 492, 497, 501, 502, 509, 520, 525, 535, 536, 540, 547, 551, 552, 554, 555, 560, 571, 572, 573, 575, 576, 577, 578, 583, 584, 586, 587, 589, 591, 596, 598, 599, 602, 608, 610, 611, 612, 614, 616, 618, 619, 621, 622, 623, 624, 625], "neural": [18, 148, 159, 160, 170, 178, 179, 206, 207, 208, 211, 212, 215, 218, 221, 250, 251, 253, 255, 261, 268, 269, 271, 284, 289, 292, 295, 297, 298, 303, 309, 314, 321, 322, 323, 327, 334, 341, 342, 348, 500, 507, 520, 547, 550, 555, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 586, 587, 589, 590, 592, 593, 596, 598, 599, 601, 603, 605, 606, 607, 610, 611, 614, 616, 618, 620, 621, 622, 623, 625, 626], "compressor": [18, 159, 160, 170, 178, 179, 206, 207, 208, 211, 212, 215, 218, 221, 250, 251, 253, 255, 261, 268, 269, 271, 292, 295, 297, 298, 303, 309, 314, 321, 322, 323, 327, 334, 342, 348, 500, 507, 520, 547, 550, 552, 555, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 586, 587, 589, 590, 591, 592, 596, 598, 599, 601, 603, 605, 606, 607, 610, 611, 613, 614, 616, 618, 620, 621, 622, 623, 624, 625, 626], "tupl": [18, 105, 153, 179, 182, 183, 207, 211, 226, 227, 250, 253, 258, 310, 323, 334, 349, 355, 520, 573, 587, 588, 616, 622], "symnet": 18, "arg": [18, 53, 105, 194, 195, 196, 238, 239, 240, 292, 301, 338, 353, 361, 362, 370, 372, 374, 375, 376, 377, 387, 389, 390, 392, 394, 397, 398, 403, 572, 573, 577, 588, 597, 616, 620, 621, 622], "aux": 18, "data": [18, 44, 55, 105, 146, 148, 151, 153, 157, 168, 178, 179, 182, 183, 212, 214, 226, 227, 258, 259, 261, 301, 311, 313, 314, 323, 334, 338, 350, 352, 355, 358, 365, 368, 371, 379, 380, 382, 406, 418, 429, 445, 446, 456, 464, 465, 466, 468, 471, 488, 490, 505, 518, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 532, 536, 544, 554, 555, 570, 572, 573, 577, 581, 582, 585, 587, 588, 589, 616, 617, 618, 619, 620, 621, 622, 623], "descript": [18, 132, 258, 259, 353, 550, 551, 620], "ncmodel": 18, "fuse": [18, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 91, 92, 93, 94, 96, 131, 136, 152, 153, 157, 551, 620, 621], "suppli": 18, "get_framework_nam": 18, "get": [18, 44, 45, 67, 68, 70, 104, 105, 146, 151, 153, 159, 164, 166, 168, 170, 171, 172, 173, 176, 179, 187, 211, 212, 218, 220, 231, 253, 258, 259, 292, 294, 296, 304, 311, 313, 322, 331, 334, 343, 350, 352, 358, 365, 379, 380, 382, 419, 429, 446, 450, 463, 468, 471, 489, 500, 508, 516, 520, 536, 537, 570, 580, 584, 585, 588, 594, 620, 623, 624, 627], "name": [18, 44, 45, 53, 67, 68, 70, 104, 105, 110, 116, 146, 147, 148, 151, 152, 153, 154, 159, 164, 168, 170, 171, 172, 173, 176, 178, 179, 194, 195, 196, 199, 203, 209, 211, 212, 216, 219, 220, 238, 239, 240, 243, 247, 253, 256, 257, 258, 264, 269, 287, 292, 294, 296, 311, 313, 317, 322, 327, 331, 333, 334, 350, 352, 356, 358, 365, 429, 431, 468, 469, 470, 471, 508, 520, 522, 551, 570, 573, 577, 581, 586, 587, 588, 590, 594, 601, 605, 609, 612, 613, 616, 618, 619, 621, 623, 625, 626], "prepare_model_data": 18, "nc_model": [18, 284, 289], "data_x": 18, "prepar": [18, 153, 500, 551, 554, 573, 577, 582, 616], "loader": [18, 182, 183, 226, 227, 323, 334, 355, 361, 616], "dataloaderwrap": 18, "prepare_model": 18, "create_data_exampl": 18, "exampl": [18, 148, 153, 159, 168, 169, 178, 179, 194, 195, 196, 207, 211, 238, 239, 240, 250, 253, 265, 266, 267, 269, 295, 318, 319, 320, 322, 323, 333, 334, 353, 355, 393, 411, 417, 441, 465, 466, 467, 468, 520, 549, 550, 554, 560, 570, 583, 584, 591, 594, 595, 596, 599, 617, 618, 622, 623, 624, 627], "prepare_dataload": 18, "io": 18, "ndarray_to_devic": 18, "ndarrai": [18, 67, 68, 70, 211, 253, 356, 580, 622], "devic": [18, 79, 89, 90, 91, 92, 93, 94, 97, 107, 131, 136, 145, 168, 169, 178, 179, 575, 588, 589, 591, 594, 599, 608, 615], "is_model_quant": 18, "query_quantizable_nod": 18, "node": [18, 44, 50, 53, 54, 55, 56, 60, 62, 64, 67, 68, 70, 74, 77, 80, 82, 83, 84, 98, 102, 103, 105, 110, 132, 146, 256, 258, 331, 431, 433, 436, 441, 499, 501, 555, 570, 577, 621, 623], "map": [18, 44, 105, 179, 211, 253, 256, 258, 260, 264, 266, 267, 269, 284, 289, 294, 297, 317, 319, 320, 322, 470, 573, 577, 587, 588, 601, 605, 613, 616], "quantize_sym_model": 18, "qconfig": [18, 621], "accord": [18, 122, 153, 159, 178, 179, 194, 195, 196, 211, 238, 239, 240, 253, 304, 341, 343, 358, 552, 555, 573, 577, 613, 617, 620, 622, 623], "run_forward": 18, "b_filter": 18, "collector": [18, 148, 356], "pre_batch": 18, "post_batch": 18, "forward": [18, 554, 588, 613, 615, 616, 620, 621], "propag": [18, 100], "filter": [18, 194, 195, 196, 197, 198, 199, 201, 205, 238, 239, 240, 241, 242, 243, 245, 249, 261, 314, 365, 429, 522, 572, 573, 584, 613, 621], "which": [18, 55, 83, 110, 148, 151, 164, 168, 169, 170, 171, 173, 174, 178, 179, 194, 195, 196, 207, 212, 238, 239, 240, 250, 262, 267, 276, 278, 279, 281, 282, 283, 287, 292, 293, 294, 296, 301, 315, 320, 322, 327, 333, 334, 338, 365, 518, 549, 551, 552, 555, 570, 572, 573, 575, 577, 580, 581, 584, 587, 588, 589, 590, 592, 596, 599, 602, 608, 609, 611, 613, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625], "batch": [18, 153, 184, 186, 187, 192, 193, 214, 228, 230, 231, 236, 237, 355, 570, 572, 575, 576, 588, 611, 613, 622, 623, 626], "infer": [18, 105, 168, 260, 297, 331, 333, 334, 355, 554, 555, 575, 576, 588, 589, 608, 610, 613, 614, 616, 620, 621, 623], "collect": [18, 21, 44, 209, 211, 214, 216, 217, 219, 253, 267, 269, 320, 322, 356, 365, 471, 508, 520, 579, 616, 621, 623], "inform": [18, 44, 148, 164, 168, 170, 171, 172, 173, 174, 179, 182, 183, 214, 216, 217, 226, 227, 292, 294, 295, 296, 298, 322, 382, 507, 508, 514, 549, 550, 553, 554, 555, 556, 558, 562, 565, 568, 575, 579, 581, 588, 590, 603, 606, 609, 613, 617, 618, 621, 625, 626, 627], "dure": [18, 170, 173, 178, 179, 292, 296, 333, 365, 588, 589, 590, 610, 611, 613, 616, 620, 621, 625], "prior": [18, 88, 623], "after": [18, 44, 78, 153, 166, 170, 171, 178, 179, 194, 207, 211, 214, 238, 250, 253, 258, 294, 339, 353, 506, 552, 570, 572, 573, 575, 576, 579, 584, 587, 588, 601, 602, 605, 609, 610, 611, 613, 616, 617, 619, 620, 621, 622, 623], "count": [18, 552, 573], "int": [18, 21, 44, 105, 146, 153, 166, 178, 179, 193, 194, 195, 207, 211, 237, 238, 239, 250, 253, 257, 258, 263, 265, 269, 276, 316, 318, 322, 353, 365, 384, 419, 463, 506, 508, 511, 520, 528, 573, 587, 588, 615, 622], "make_symbol_block": 18, "gluon": [18, 323, 334, 590], "symbolblock": 18, "make_modul": 18, "parse_tune_config": 18, "tune_cfg": [18, 146, 147, 153, 555, 623], "quantizable_nod": 18, "strategi": [18, 153, 171, 178, 179, 180, 196, 224, 240, 261, 314, 502, 520, 530, 554, 555, 560, 577, 584, 588, 596, 608, 614, 615, 616, 617, 618, 624, 625], "config": [18, 115, 116, 118, 122, 153, 159, 164, 166, 170, 171, 172, 173, 174, 178, 182, 183, 194, 223, 226, 227, 238, 278, 279, 281, 282, 283, 284, 289, 292, 293, 294, 295, 296, 311, 312, 314, 323, 350, 351, 353, 355, 358, 364, 365, 367, 380, 419, 464, 475, 479, 484, 487, 501, 509, 520, 523, 525, 531, 552, 554, 560, 570, 571, 575, 576, 577, 579, 582, 584, 588, 589, 590, 611, 613, 615, 616, 617, 619, 621, 623], "tune": [18, 45, 159, 178, 179, 182, 183, 194, 196, 226, 227, 238, 240, 260, 297, 299, 300, 301, 302, 304, 305, 306, 307, 310, 311, 312, 313, 323, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 349, 350, 351, 352, 355, 365, 404, 405, 418, 441, 471, 476, 489, 501, 509, 525, 555, 570, 572, 573, 577, 584, 586, 588, 589, 608, 610, 613, 614, 617, 618, 619, 621, 625], "from": [18, 44, 45, 61, 67, 68, 70, 105, 146, 151, 153, 159, 160, 161, 164, 170, 171, 172, 173, 174, 178, 179, 182, 183, 184, 187, 191, 194, 195, 196, 197, 198, 199, 201, 206, 207, 213, 214, 217, 226, 227, 228, 231, 235, 238, 239, 240, 241, 242, 243, 245, 250, 254, 256, 257, 258, 259, 262, 265, 266, 267, 271, 276, 292, 293, 294, 296, 311, 313, 315, 318, 319, 320, 323, 331, 333, 334, 350, 352, 353, 355, 358, 364, 365, 418, 429, 452, 464, 465, 466, 468, 493, 513, 518, 520, 537, 549, 551, 552, 555, 571, 572, 573, 575, 576, 577, 578, 579, 580, 582, 584, 587, 589, 590, 591, 595, 596, 597, 599, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624], "distribute_calib_tensor": 18, "calib_tensor": 18, "calib_cfg": 18, "tensor_to_nod": 18, "distribut": [18, 21, 141, 158, 178, 179, 184, 186, 187, 190, 192, 214, 228, 230, 231, 234, 236, 360, 508, 554, 575, 585, 603, 606, 614, 616, 618, 620, 624, 626], "depend": [18, 182, 183, 212, 226, 227, 323, 334, 355, 550, 570, 580, 581, 615, 616, 623], "algorithm": [18, 153, 175, 262, 269, 277, 314, 315, 322, 358, 360, 552, 555, 575, 576, 581, 584, 597, 602, 613, 616, 621, 625], "set": [18, 44, 57, 96, 105, 115, 146, 151, 153, 159, 174, 176, 178, 179, 182, 183, 184, 194, 196, 199, 211, 212, 217, 218, 226, 227, 228, 238, 240, 243, 253, 258, 265, 271, 284, 289, 293, 298, 318, 322, 323, 331, 334, 353, 355, 365, 367, 407, 408, 429, 475, 479, 487, 532, 537, 549, 552, 570, 571, 573, 575, 577, 581, 583, 584, 585, 587, 588, 589, 591, 593, 595, 609, 613, 615, 616, 619, 620, 623, 625], "kl": [18, 21, 178, 179, 356, 360, 581, 588, 623, 625], "minmax": [18, 21, 581, 616, 625], "calib_model": 18, "qsym_model": 18, "calib_data": 18, "calibdata": 18, "threshold": [18, 155, 356, 360, 587], "amp_convert": 18, "amp_cfg": 18, "support": [18, 44, 97, 104, 151, 157, 161, 170, 171, 178, 179, 182, 183, 193, 194, 196, 203, 207, 211, 213, 214, 215, 218, 223, 226, 227, 237, 238, 240, 247, 250, 253, 261, 269, 271, 276, 292, 294, 298, 305, 311, 314, 322, 323, 327, 333, 334, 344, 350, 353, 355, 358, 360, 468, 502, 520, 547, 554, 570, 588, 591, 596, 599, 602, 608, 614, 617, 619, 623, 624], "amp": [18, 591, 598, 612], "wrap": [18, 105, 116, 161, 213, 265, 318, 378, 551, 577, 603, 606], "dataiterload": 18, "data_it": [18, 168], "collectorbas": 18, "calibcollector": 18, "include_tensors_kl": 18, "include_tensors_minmax": 18, "num_bin": [18, 21, 356], "8001": [18, 356], "tensorcollector": 18, "include_nod": 18, "qtensor_to_tensor": 18, "build": [18, 115, 154, 155, 157, 158, 169, 258, 259, 272, 275, 326, 328, 330, 331, 332, 429, 489, 520, 537, 555, 570, 585, 590, 601, 603, 605, 606, 609, 614, 619, 623], "up": [18, 100, 211, 253, 293, 406, 570, 577, 578, 581, 584, 599, 603, 606, 608, 614, 615, 616, 619, 622, 623, 625], "namecollector": 18, "cache_kl": 18, "cache_minmax": 18, "tensors_kl": 18, "tensors_minmax": 18, "onnxruntimeadaptor": 19, "rt": 19, "onnxrt_qlinearopsadaptor": [19, 555], "onnxrt_integeropsadaptor": 19, "onnxrt_qdqadaptor": 19, "onnxrtaug": 20, "dump_op_typ": 20, "black_nod": 20, "white_nod": 20, "cpuexecutionprovid": [20, 43, 616], "reduce_rang": [20, 43, 178, 179, 615], "augment": 20, "dump": [20, 159, 258, 365, 616, 621], "calib_registri": 21, "calib_method": 21, "calibratorbas": 21, "minmaxcalibr": 21, "percentilecalibr": 21, "2048": [21, 365], "percentil": 21, "99": [21, 620, 626], "999": [21, 625, 626], "option": [21, 105, 170, 178, 179, 182, 183, 194, 211, 226, 227, 238, 253, 257, 258, 265, 271, 292, 298, 311, 314, 318, 322, 323, 334, 350, 353, 355, 359, 365, 573, 581, 585, 588, 602, 613, 616, 619, 622, 623, 625], "number": [21, 67, 68, 105, 153, 166, 169, 170, 178, 179, 192, 195, 207, 211, 236, 239, 250, 253, 266, 267, 269, 292, 301, 319, 320, 322, 338, 353, 358, 365, 452, 508, 570, 571, 573, 577, 587, 613, 616, 619, 622, 623], "bin": [21, 365, 580], "histogram": [21, 356, 365, 570, 621], "valu": [21, 44, 55, 67, 68, 70, 89, 90, 105, 141, 146, 153, 158, 159, 164, 168, 169, 174, 176, 178, 179, 182, 183, 194, 197, 198, 207, 211, 212, 226, 227, 238, 241, 242, 250, 253, 265, 269, 293, 301, 304, 311, 318, 322, 323, 334, 338, 343, 350, 353, 355, 356, 358, 365, 378, 380, 382, 387, 389, 390, 392, 394, 397, 398, 403, 407, 408, 429, 431, 502, 506, 520, 528, 531, 551, 570, 573, 581, 587, 588, 594, 610, 613, 615, 616, 620, 622, 623, 625], "default": [21, 97, 146, 174, 176, 178, 179, 182, 183, 186, 194, 195, 196, 207, 211, 226, 227, 230, 238, 239, 240, 250, 253, 257, 258, 262, 271, 293, 313, 315, 322, 331, 352, 358, 365, 387, 389, 390, 392, 394, 397, 398, 403, 429, 446, 520, 551, 555, 570, 573, 579, 581, 584, 585, 587, 588, 589, 596, 599, 601, 605, 610, 613, 615, 616, 617, 619, 620, 622, 623, 625], "float": [21, 44, 148, 170, 171, 172, 174, 178, 179, 194, 207, 238, 250, 263, 265, 266, 267, 294, 316, 318, 319, 320, 353, 368, 426, 481, 506, 520, 528, 531, 573, 587, 615, 616, 620, 622], "A": [21, 44, 54, 74, 75, 103, 116, 146, 153, 160, 164, 168, 170, 171, 172, 173, 174, 178, 179, 196, 211, 214, 216, 217, 223, 240, 253, 254, 262, 265, 266, 267, 269, 272, 275, 276, 277, 284, 287, 289, 292, 293, 294, 295, 296, 301, 315, 318, 319, 320, 322, 323, 327, 331, 338, 355, 365, 573, 578, 581, 587, 588, 590, 601, 602, 605, 608, 613, 614, 616, 620, 622, 623, 625], "between": [21, 141, 158, 171, 178, 179, 211, 253, 266, 269, 319, 322, 532, 536, 551, 555, 575, 579, 584, 587, 588, 599, 616, 618, 619, 620, 622, 623], "0": [21, 44, 53, 90, 105, 146, 155, 157, 161, 166, 178, 179, 184, 186, 190, 194, 197, 198, 201, 207, 211, 213, 214, 228, 230, 234, 238, 241, 242, 245, 250, 253, 258, 260, 269, 276, 284, 289, 297, 322, 333, 334, 339, 353, 551, 570, 573, 575, 577, 579, 580, 581, 582, 585, 586, 587, 588, 589, 594, 596, 601, 605, 612, 613, 615, 616, 618, 619, 620, 621, 622, 623, 625], "100": [21, 159, 178, 179, 196, 240, 353, 571, 573, 577, 583, 588, 615, 616, 620, 622, 623, 625, 626], "klcalibr": 21, "128": [21, 194, 197, 198, 211, 238, 241, 242, 253, 573, 588, 616, 622], "num_quantized_bin": 21, "histogramcollector": 21, "collctor": 21, "smooth_distribut": 21, "p": [21, 570, 609], "ep": [21, 158, 589], "0001": [21, 178, 179, 575, 588, 615], "smooth": [21, 44, 151, 157, 178, 179, 310, 613], "discret": [21, 623], "mai": [21, 146, 278, 279, 281, 282, 283, 353, 549, 550, 570, 572, 580, 586, 589, 601, 605, 612, 614, 616, 623], "have": [21, 44, 74, 83, 146, 169, 170, 171, 192, 214, 236, 262, 265, 292, 294, 315, 318, 322, 334, 353, 549, 550, 570, 572, 573, 577, 581, 586, 587, 588, 589, 591, 608, 610, 613, 616, 620, 623], "been": [21, 170, 171, 262, 292, 294, 315, 550, 552, 570, 575, 588, 589, 608, 620], "normal": [21, 211, 253, 267, 320, 520, 588, 610, 620, 622], "1": [21, 44, 54, 74, 89, 105, 109, 113, 144, 146, 151, 153, 155, 157, 158, 159, 161, 171, 178, 179, 184, 186, 190, 193, 194, 195, 197, 198, 201, 202, 207, 211, 212, 213, 214, 228, 230, 234, 237, 238, 239, 241, 242, 245, 246, 250, 253, 260, 265, 266, 267, 269, 284, 289, 294, 297, 298, 318, 319, 320, 322, 333, 334, 353, 358, 368, 490, 549, 551, 554, 555, 572, 573, 575, 579, 581, 582, 585, 587, 589, 592, 594, 610, 611, 612, 613, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625], "replac": [21, 151, 267, 320, 520, 577, 588, 599, 618], "zero": [21, 44, 171, 174, 211, 253, 294, 365, 554, 613, 616, 620, 622, 623], "multipli": 21, "scale": [21, 44, 100, 141, 151, 153, 157, 158, 207, 211, 250, 253, 258, 579, 616, 619, 620, 622, 623], "factor": [21, 612, 620, 626], "take": [21, 170, 179, 182, 183, 187, 211, 216, 226, 227, 231, 253, 292, 301, 322, 323, 334, 338, 355, 549, 551, 552, 570, 572, 575, 581, 588, 608, 613, 616, 617, 622, 623, 625], "correspond": [21, 44, 148, 168, 178, 179, 194, 238, 262, 265, 269, 315, 318, 322, 358, 555, 581, 588, 613, 615, 616, 619, 620, 623], "amount": 21, "off": [21, 67, 68, 70, 550], "non": [21, 293, 365, 551, 612, 623], "ref": [21, 146], "http": [21, 148, 164, 170, 171, 194, 196, 238, 240, 262, 263, 265, 266, 267, 292, 294, 295, 315, 316, 318, 319, 320, 322, 334, 551, 554, 570, 573, 582, 585, 586, 588, 597, 603, 606, 618], "hanj": 21, "c": [21, 74, 196, 240, 570, 573, 580, 585, 623], "illinoi": 21, "edu": [21, 196, 240, 573], "cs412": 21, "bk3": 21, "diverg": [21, 356, 360, 575, 623], "pdf": 21, "github": [21, 148, 170, 194, 238, 262, 263, 266, 267, 292, 295, 315, 316, 319, 320, 322, 334, 464, 507, 550, 570, 573, 578, 582, 585, 586, 588, 597, 603, 606, 618], "com": [21, 148, 170, 194, 238, 262, 263, 266, 267, 292, 295, 315, 316, 319, 320, 322, 334, 549, 554, 570, 573, 582, 585, 586, 588, 591, 597, 618, 619, 626], "apach": [21, 586], "incub": 21, "blob": [21, 148, 170, 262, 263, 266, 267, 292, 315, 316, 319, 320, 322, 334, 588, 597], "master": [21, 170, 262, 263, 266, 267, 292, 295, 315, 316, 319, 320, 322, 334, 588, 623], "python": [21, 75, 146, 196, 215, 240, 261, 314, 353, 365, 468, 547, 550, 551, 570, 573, 577, 580, 585, 588, 593, 599, 602, 608, 614, 622], "contrib": [21, 261, 314], "py": [21, 146, 148, 159, 171, 178, 179, 263, 265, 266, 267, 294, 316, 318, 319, 320, 353, 536, 551, 555, 570, 577, 585, 588, 593, 595, 596, 597, 603, 606, 616, 618, 621], "microsoft": [21, 555], "onnxruntim": [21, 178, 179, 190, 196, 203, 234, 240, 247, 270, 424, 428, 555, 582, 584, 585, 589, 615], "main": [21, 218, 295, 500, 537, 551, 577, 582, 588, 595, 597, 609, 613, 616], "tool": [21, 146, 257, 365, 554, 555, 588, 601, 605, 613, 614, 616], "arrai": [21, 44, 146, 211, 253, 265, 276, 318, 365, 622], "small": [21, 67, 68, 69, 341, 552, 570, 613, 623], "probabl": [21, 178, 179, 360], "activationoper": 23, "onnx_quant": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42], "onnx_nod": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 87, 101, 111], "removableactivationoper": 23, "remov": [23, 44, 56, 57, 60, 74, 80, 83, 84, 85, 96, 98, 166, 258, 267, 320, 406, 452, 549, 550, 588, 601, 605, 613, 621], "qactivationoper": 23, "children": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39, 40, 41, 42], "initi": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39, 40, 41, 42, 44, 105, 116, 146, 161, 171, 182, 183, 191, 194, 213, 226, 227, 235, 238, 293, 294, 311, 334, 350, 355, 407, 408, 500, 552, 570, 572, 573, 587, 607, 613, 616, 620, 623], "qoper": [23, 38, 178, 179], "format": [23, 44, 53, 146, 178, 179, 194, 195, 196, 238, 239, 240, 258, 265, 271, 311, 318, 350, 353, 471, 573, 577, 579, 587, 588, 589, 590, 591, 616], "argmaxoper": 24, "qargmaxoper": 24, "attentionoper": 25, "qattentionoper": 25, "qattent": 25, "binari": [26, 146, 269, 322, 580, 587, 603, 606], "binaryoper": 26, "qbinaryoper": 26, "qbinari": 26, "concatoper": 27, "qconcatoper": 27, "qconcat": 27, "convoper": 28, "qconvoper": 28, "qlinearconv": 28, "direct8bit": 29, "direct8bitoper": 29, "qdirectoper": 29, "qdirect": 29, "embedlayernorm": 30, "embedlayernormalizationoper": 30, "qembedlayernormalizationoper": 30, "qembedlayernorm": 30, "gatheroper": 31, "qgatheroper": 31, "qgather": 31, "globalaveragepool": 32, "globalaveragepooloper": 32, "qglobalaveragepooloper": 32, "qlinearglobalaveragepool": 32, "gemmoper": 33, "qgemmoper": 33, "qgemm": 33, "lstmoper": 35, "matmuloper": 36, "qmatmuloper": 36, "qlinearmatmul": 36, "maxpooloper": 37, "qmaxpooloper": 37, "qmaxpool": 37, "op_registri": 38, "op_typ": [38, 312, 351], "qop_registri": 38, "padoper": 39, "qpadoper": 39, "qpad": 39, "averagepool": 40, "pooloper": 40, "qpooloper": 40, "qlinearaveragepool": 40, "resizeoper": 41, "qresizeoper": 41, "qresiz": 41, "splitoper": 42, "qsplitoper": 42, "qsplit": 42, "q_config": [43, 258, 555], "static": [43, 47, 151, 157, 168, 179, 259, 311, 334, 350, 537, 555, 584, 588, 591, 596, 597, 598, 599, 602, 608, 620, 623, 626], "quantization_param": 43, "op_types_to_quant": 43, "fallback_list": 43, "fp32": [43, 79, 131, 136, 141, 153, 158, 178, 179, 182, 183, 226, 227, 257, 258, 269, 304, 311, 322, 339, 343, 350, 358, 364, 365, 554, 555, 570, 581, 582, 587, 588, 589, 598, 615, 616, 617, 618, 619, 620, 621, 623, 625, 626], "add_qdq_pair_to_weight": [43, 178, 179, 616], "optypes_to_exclude_output_qu": [43, 178, 179, 616], "dedicated_qdq_pair": [43, 178, 179, 616], "helper": [44, 45, 110, 116, 146, 153, 194, 195, 196, 210, 238, 239, 240, 252, 256, 257, 258, 331, 363, 514], "onnxrt": [44, 194, 196, 203, 211, 238, 240, 247, 253, 269, 322, 363, 423, 424, 439, 441, 448, 501, 555, 589, 616], "dtype_to_nam": 44, "dtype_map": 44, "dtype": [44, 102, 105, 178, 179, 197, 198, 207, 211, 241, 242, 250, 253, 258, 259, 573, 579, 581, 591, 615, 616, 620, 621, 622, 625], "its": [44, 60, 96, 148, 168, 171, 179, 190, 196, 211, 234, 240, 253, 256, 263, 264, 294, 301, 316, 317, 338, 549, 570, 573, 575, 586, 587, 589, 599, 601, 605, 608, 609, 612, 613, 619, 622, 623], "represent": [44, 385, 386, 388, 391, 395, 396, 399, 400, 402, 404, 405, 531, 549, 551, 576, 613, 616], "quanttyp": 44, "repres": [44, 170, 171, 172, 174, 196, 201, 240, 245, 265, 267, 269, 318, 320, 322, 387, 389, 390, 392, 394, 397, 398, 401, 403, 518, 549, 573, 579, 613, 616, 623], "make_quant_nod": 44, "make": [44, 105, 141, 158, 170, 171, 173, 192, 236, 292, 294, 296, 365, 549, 550, 555, 570, 571, 572, 581, 587, 588, 596, 601, 605, 608, 616, 617, 619, 620, 623], "quantizelinear": [44, 579], "make_dquant_nod": 44, "axi": [44, 179], "dequantizelinear": [44, 579], "is_b_transpos": 44, "wheter": 44, "inuput": 44, "b": [44, 74, 194, 238, 258, 573, 587, 613, 620, 623], "transpos": [44, 73, 170, 211, 253, 257, 292, 622], "split_shared_bia": 44, "share": [44, 82, 98, 109, 580, 581, 620, 623], "float_to_float16": 44, "float16": [44, 573], "float_to_bfloat16": 44, "bfloat16": [44, 589, 591, 599, 617], "cast_tensor": 44, "tensorproto": [44, 105], "remove_init_from_model_input": 44, "collate_pr": 44, "result": [44, 146, 148, 153, 207, 211, 250, 253, 262, 265, 266, 267, 269, 315, 318, 319, 320, 322, 334, 341, 355, 364, 365, 368, 386, 400, 418, 549, 552, 554, 570, 572, 575, 577, 584, 586, 587, 588, 596, 597, 608, 609, 610, 613, 614, 616, 619, 620, 621, 622, 623, 624, 626], "quantize_data_with_scale_zero": 44, "qtype": [44, 555], "scheme": [44, 153, 537, 555, 572, 581, 599, 623, 625], "zero_point": [44, 258], "point": [44, 207, 250, 266, 267, 276, 301, 319, 320, 338, 587, 608, 616, 620, 622, 623], "To": [44, 265, 318, 333, 550, 570, 573, 577, 579, 589, 592, 595, 601, 603, 605, 606, 615, 617, 618, 620, 623, 625], "pack": [44, 61], "weight": [44, 60, 61, 122, 141, 148, 151, 158, 164, 169, 170, 171, 172, 178, 179, 258, 292, 294, 311, 322, 334, 341, 350, 365, 425, 555, 570, 576, 579, 581, 583, 587, 588, 610, 613, 615, 616, 620, 621, 623, 625], "comput": [44, 105, 148, 153, 262, 263, 266, 267, 269, 315, 316, 319, 320, 322, 355, 365, 554, 576, 579, 587, 588, 589, 591, 602, 613, 614, 616, 620, 623], "linear": [44, 157, 166, 168, 169, 170, 174, 178, 179, 258, 292, 551, 575, 579, 588, 613, 620, 623], "when": [44, 53, 64, 70, 146, 169, 171, 174, 178, 179, 194, 195, 203, 211, 238, 239, 247, 253, 263, 293, 294, 316, 334, 355, 520, 537, 549, 552, 570, 572, 573, 588, 599, 601, 602, 605, 609, 613, 616, 620, 622, 623], "uint8": [44, 207, 250, 265, 313, 318, 352, 555, 573, 581, 615, 616, 622, 625], "rmin": [44, 616], "rmax": [44, 616], "2": [44, 53, 74, 105, 109, 151, 155, 157, 159, 170, 171, 178, 179, 195, 212, 239, 265, 267, 269, 294, 301, 318, 320, 322, 333, 338, 353, 551, 555, 573, 575, 581, 582, 584, 585, 586, 587, 589, 610, 612, 613, 616, 618, 619, 620, 622, 623, 624], "m": [44, 148, 170, 178, 179, 292, 575, 585, 591, 593, 596, 599, 603, 606, 613, 626], "where": [44, 178, 179, 265, 269, 318, 322, 575, 601, 605, 609, 620, 621], "max": [44, 104, 141, 158, 178, 179, 211, 253, 266, 267, 301, 319, 320, 338, 365, 554, 570, 585, 588, 613, 616, 620, 622, 623], "ab": [44, 164, 171, 294, 616, 620], "np": [44, 211, 253, 301, 338, 577, 622], "sym": [44, 581, 616, 625], "asym": [44, 581, 625], "calculate_scale_zp": 44, "quantize_rang": 44, "calcul": [44, 60, 153, 164, 174, 179, 197, 198, 241, 242, 266, 267, 292, 294, 304, 319, 320, 343, 356, 573, 587, 588, 599, 610, 613, 616, 619, 620, 623, 625], "quantize_data": 44, "add": [44, 52, 64, 109, 119, 146, 174, 178, 179, 194, 196, 218, 238, 240, 293, 311, 350, 378, 418, 520, 550, 551, 570, 572, 573, 577, 579, 581, 587, 588, 589, 603, 606, 619, 621, 623], "necessari": [44, 549, 552, 590, 609, 613, 619, 623], "intermedi": [44, 148, 161, 178, 179, 213, 551, 584, 616], "trasnform": 44, "full": [44, 194, 195, 196, 238, 239, 240, 365, 554, 570, 573, 580, 582, 585, 586, 609, 613], "equat": [44, 267, 269, 320, 322, 616, 620], "r": [44, 141, 158, 570, 585, 609, 612, 616, 626], "": [44, 105, 141, 146, 158, 168, 169, 170, 171, 175, 176, 178, 179, 193, 196, 210, 211, 212, 214, 216, 223, 237, 240, 252, 253, 267, 292, 294, 320, 322, 323, 327, 334, 365, 506, 549, 552, 575, 577, 581, 584, 588, 589, 596, 599, 601, 605, 608, 611, 612, 613, 614, 615, 616, 618, 619, 620, 623, 625], "q": [44, 107, 109, 131, 620], "z": [44, 575, 620], "real": [44, 197, 214, 241, 577, 614, 616], "origin": [44, 151, 153, 168, 171, 174, 179, 194, 211, 212, 238, 253, 278, 279, 281, 282, 283, 293, 294, 313, 339, 352, 365, 368, 550, 573, 596, 613, 616, 622, 623, 625], "quantize_data_per_channel": 44, "per": [44, 151, 157, 159, 178, 179, 212, 360, 555, 570, 612, 617, 626], "channel": [44, 141, 151, 157, 158, 166, 169, 170, 178, 179, 207, 211, 250, 253, 292, 555, 584, 585, 591, 593, 598, 613, 622, 626], "dequantize_data_with_scale_zero": 44, "tensor_valu": 44, "scale_valu": 44, "zo_valu": 44, "dequant": [44, 57, 88, 91, 92, 93, 94, 96, 148, 153, 365, 551, 620, 621], "sacal": 44, "dequantize_data": 44, "valueinfo": 44, "tensor_nam": [44, 146], "new_dtyp": 44, "cast": [44, 57, 579, 617, 622], "info": [44, 153, 170, 174, 209, 214, 219, 258, 292, 327, 362, 365, 508, 520, 536, 551, 570, 579, 590], "quantizedvalu": 44, "new_quantized_nam": 44, "scale_nam": 44, "zero_point_nam": 44, "quantized_value_typ": 44, "quint8": 44, "linearli": 44, "intial": 44, "quantizediniti": 44, "quantized_data": 44, "quantizationmod": 44, "quantizedvaluetyp": 44, "quantformat": [44, 258], "quantize_nparrai": 44, "arr": [44, 365], "low": [44, 182, 183, 197, 198, 226, 227, 241, 242, 260, 270, 297, 323, 555, 571, 573, 577, 588, 589, 614, 616, 620, 623], "high": [44, 197, 198, 241, 242, 573, 585, 614, 623], "numpi": [44, 67, 68, 70, 105, 146, 211, 253, 259, 265, 276, 318, 580, 622], "attribute_to_kwarg": 44, "attribut": [44, 83, 104, 105, 153, 168, 176, 179, 365, 436, 437, 441, 501, 555, 572, 581, 583, 588, 615, 625], "kwarg": [44, 105, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 135, 137, 166, 178, 179, 196, 209, 211, 216, 219, 240, 253, 310, 312, 322, 323, 324, 326, 328, 330, 331, 332, 334, 349, 351, 353, 355, 361, 362, 364, 365, 370, 372, 374, 375, 376, 377, 387, 389, 390, 392, 394, 397, 398, 403, 572], "make_nod": 44, "find_by_nam": 44, "item_list": 44, "find": [44, 67, 68, 70, 105, 146, 269, 276, 301, 322, 338, 365, 536, 555, 570, 594, 601, 605, 608, 609, 619, 621, 623], "item": [44, 174, 176, 178, 179, 210, 252, 293, 311, 350, 418, 506, 577, 613, 620, 623], "get_smooth_scales_per_op": 44, "max_vals_per_channel": 44, "input_tensors_2_weight": 44, "input_tensors_2_weights_nod": 44, "alpha": [44, 157, 164, 172, 616], "same": [44, 83, 146, 169, 171, 179, 194, 211, 238, 253, 265, 318, 365, 555, 571, 572, 573, 575, 577, 581, 588, 592, 596, 601, 605, 612, 613, 615, 616, 620, 621, 622, 623], "one": [44, 109, 110, 115, 153, 159, 169, 170, 171, 173, 211, 221, 253, 262, 265, 269, 271, 292, 295, 296, 315, 318, 322, 552, 555, 570, 575, 576, 577, 581, 582, 584, 585, 587, 588, 589, 591, 592, 596, 597, 599, 601, 602, 605, 608, 609, 610, 611, 613, 615, 616, 618, 620, 622, 623], "mul": [44, 54, 65, 66, 69, 157, 579, 620], "todo": [44, 194, 197, 238, 241, 265, 311, 318, 350], "individu": [44, 170, 292, 549, 613, 620], "save": [44, 105, 174, 178, 179, 196, 223, 240, 257, 258, 298, 331, 334, 355, 356, 361, 365, 551, 555, 572, 583, 588, 589, 590, 592, 596, 601, 605, 611, 616, 620], "paper": [44, 575, 613, 620], "onli": [44, 53, 63, 70, 86, 109, 115, 141, 151, 157, 158, 159, 169, 170, 171, 178, 179, 194, 212, 214, 218, 238, 271, 292, 294, 305, 334, 344, 353, 520, 532, 554, 555, 571, 572, 575, 577, 579, 581, 588, 589, 596, 609, 613, 614, 615, 616, 620, 621, 623, 625], "get_smooth_scales_per_input": 44, "insert_smooth_mul_op_per_input": 44, "shape_info": 44, "insert": [44, 77, 105, 107, 109, 113, 144, 151, 157, 258, 551, 584, 588, 591, 613, 616, 617, 620, 621], "inupt": 44, "shape": [44, 105, 146, 170, 197, 198, 207, 211, 241, 242, 250, 253, 265, 318, 441, 448, 452, 463, 501, 554, 570, 573, 581, 582, 588, 620, 622], "ad": [44, 171, 194, 238, 262, 301, 315, 338, 570, 589, 591, 596, 599, 603, 606, 613, 621], "new_init_tensor": 44, "new_added_mul_nod": 44, "adjust_weights_per_op": 44, "adjust": [44, 599, 616, 620], "ha": [44, 67, 68, 70, 74, 170, 171, 212, 262, 292, 294, 315, 353, 550, 552, 555, 570, 572, 579, 584, 588, 589, 594, 608, 613, 615, 616, 617, 619, 620, 623], "whose": [44, 151, 157, 170, 293, 583, 620, 623], "adjustd": 44, "adjust_weights_per_input": 44, "insert_smooth_mul_op_per_op": 44, "befor": [44, 107, 109, 157, 170, 171, 173, 178, 179, 194, 238, 258, 292, 294, 296, 406, 550, 570, 573, 575, 576, 577, 580, 581, 585, 588, 603, 606, 616, 619, 621, 623], "name_2_nod": 44, "kei": [44, 146, 148, 151, 168, 174, 176, 178, 179, 276, 293, 331, 353, 356, 358, 365, 528, 554, 570, 579, 614, 621, 623], "fold_scal": 44, "fold": [44, 62, 63, 258, 581, 620], "quant": [44, 153, 178, 179, 311, 350, 551, 588, 616], "trt_env_setup": 44, "environ": [44, 159, 212, 314, 468, 500, 501, 509, 549, 570, 571, 601, 605, 608, 623], "variabl": [44, 159, 172, 178, 179, 196, 212, 240, 301, 338, 570, 585, 613, 623], "tensorrt": [44, 616], "provid": [44, 102, 105, 110, 168, 182, 183, 211, 226, 227, 253, 260, 265, 284, 289, 297, 298, 318, 323, 334, 355, 359, 361, 429, 505, 514, 552, 554, 555, 570, 571, 572, 576, 577, 578, 579, 584, 585, 588, 589, 590, 591, 595, 599, 602, 608, 609, 613, 615, 616, 621, 623, 624, 625, 626], "get_ops_recurs": 45, "prefix": [45, 146, 147, 152, 159, 591, 596, 621], "graph_info": 45, "templateadaptor": 45, "tampl": 45, "dictionari": [45, 67, 68, 70, 147, 148, 153, 176, 178, 179, 210, 252, 265, 272, 275, 277, 318, 365, 387, 389, 390, 392, 394, 397, 398, 403, 407, 408, 410], "yaml": [45, 174, 176, 179, 182, 183, 194, 196, 212, 226, 227, 238, 240, 254, 260, 271, 272, 273, 275, 284, 289, 297, 298, 364, 365, 373, 379, 380, 464, 520, 531, 555, 583, 587, 588, 610, 615, 621, 622], "file": [45, 105, 146, 153, 156, 174, 175, 178, 179, 182, 183, 194, 195, 196, 199, 210, 211, 217, 220, 226, 227, 238, 239, 240, 243, 252, 253, 254, 258, 260, 265, 271, 272, 273, 275, 284, 289, 293, 295, 297, 298, 318, 323, 333, 334, 364, 365, 373, 429, 475, 479, 489, 512, 520, 537, 552, 555, 570, 577, 580, 583, 586, 587, 588, 590, 594, 603, 606, 607, 608, 609, 610, 615, 616, 621, 622], "pytorchadaptor": 45, "api": [45, 70, 75, 110, 222, 260, 265, 297, 310, 311, 318, 322, 334, 349, 350, 353, 365, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 536, 537, 550, 551, 556, 558, 562, 565, 568, 579, 584, 588, 593, 597, 598, 599, 618, 619, 623, 627], "pytorch_ipexadaptor": 45, "intel": [45, 170, 215, 218, 255, 261, 268, 269, 292, 295, 303, 309, 314, 321, 322, 334, 342, 348, 500, 547, 549, 550, 552, 553, 555, 572, 573, 574, 575, 576, 578, 579, 581, 582, 586, 589, 590, 591, 596, 598, 599, 610, 611, 612, 613, 614, 616, 617, 618, 620, 621, 623, 624, 625], "extens": [45, 520, 552, 554, 555, 581, 584, 585, 588, 589, 590, 592, 597, 598, 599, 603, 606, 607, 613, 614, 620, 623, 624, 625], "ipex": [45, 153, 178, 179, 584, 588, 593, 597, 598, 620, 626], "pytorch_fxadaptor": 45, "fx": [45, 153, 178, 305, 344, 584, 597, 598, 614, 616, 617, 626], "graph": [45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 117, 130, 132, 136, 139, 140, 141, 143, 144, 145, 146, 168, 193, 237, 258, 260, 314, 324, 331, 441, 463, 474, 475, 480, 481, 499, 501, 524, 536, 551, 555, 573, 575, 577, 583, 587, 590, 591, 616, 617, 621], "pytorchqueri": 45, "querybackendcap": [46, 555], "tensorflowadaptor": 47, "stock": [47, 597, 620], "spr": 47, "tensorflow_itexadaptor": 47, "itex": [47, 109, 178, 179, 257, 616], "tensorflowqueri": [47, 555], "performance_onli": [47, 48, 49, 107, 131, 136, 145, 178, 588], "itex_mod": [47, 48, 89, 107, 131, 136], "quant_mod": [47, 311, 350], "graphconvert": 48, "qt_config": 48, "recip": [48, 168, 178, 179, 258, 260, 297, 579, 588, 620, 623], "int8_sequ": 48, "fp32_op": [48, 50, 107], "bf16_op": [48, 50, 107, 617], "data_load": [48, 49, 555], "fake_qu": [48, 88, 107, 131, 136], "qdq_enabl": 48, "new_api": [48, 49, 71, 72, 77, 79, 92, 99, 131, 136, 141], "use_bf16": [48, 49, 178, 615], "without": [49, 90, 146, 171, 211, 253, 294, 313, 352, 520, 549, 570, 572, 575, 577, 587, 588, 599, 613, 614, 615, 623, 624], "graphconverterwithoutcalib": 49, "recover_config": 49, "rewrit": [50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107, 108, 109, 223], "bf16convert": [50, 617], "biasadd": [52, 59, 64, 66, 109, 581], "convertaddtobiasaddoptim": 52, "conv2d": [52, 59, 60, 61, 65, 66, 71, 125, 135, 141, 581, 620, 621, 623], "addv2": [52, 69, 581], "layout": 53, "convertlayoutoptim": 53, "optim": [53, 74, 75, 79, 80, 116, 118, 168, 171, 175, 178, 179, 215, 221, 223, 260, 261, 277, 297, 301, 314, 338, 355, 356, 368, 393, 407, 408, 414, 417, 418, 420, 421, 422, 423, 424, 427, 428, 441, 501, 502, 512, 518, 524, 528, 535, 540, 552, 554, 571, 575, 576, 577, 581, 582, 584, 585, 588, 590, 591, 593, 595, 596, 599, 602, 612, 613, 614, 615, 616, 617, 619, 620, 621, 623, 625], "nchw": 53, "nhwc": 53, "It": [53, 160, 170, 182, 183, 220, 226, 227, 267, 269, 276, 292, 297, 304, 320, 322, 323, 334, 339, 343, 355, 555, 570, 575, 588, 594, 597, 602, 608, 609, 613, 616, 619, 623, 625], "4": [53, 159, 170, 178, 179, 203, 206, 207, 211, 247, 250, 253, 262, 263, 265, 315, 316, 318, 353, 549, 555, 570, 571, 577, 578, 581, 584, 585, 587, 588, 596, 612, 613, 616, 620, 622, 623, 626], "abov": [53, 555, 575, 613, 616, 620], "graph_def": [53, 146, 257, 323, 331, 334, 463, 499], "leakyrelu": [54, 620], "convertleakyreluoptim": 54, "below": [54, 66, 74, 178, 179, 298, 322, 334, 550, 551, 554, 555, 570, 572, 575, 577, 583, 587, 591, 593, 601, 602, 605, 608, 610, 611, 613, 615, 616, 619, 620, 621, 623, 624], "subgraph": [54, 66, 105, 152, 579], "maximum": [54, 170, 171, 178, 179, 194, 211, 238, 253, 263, 294, 301, 316, 338, 573, 588, 613, 616, 622], "note": [54, 170, 265, 305, 318, 344, 552, 570, 577, 579, 581, 585, 588, 593, 596, 601, 605, 608, 613, 616, 620, 621, 623, 624, 625], "coeffici": [54, 613], "less": [54, 146, 178, 179, 365, 571, 575, 588, 613], "than": [54, 146, 194, 211, 238, 253, 365, 552, 554, 571, 573, 583, 587, 610, 611, 613, 616, 619, 622], "convers": [54, 179, 271, 555, 588, 589, 616, 617, 620], "valid": [54, 67, 68, 105, 171, 174, 178, 179, 196, 240, 265, 293, 294, 318, 331, 468, 520, 537, 550, 552, 554, 555, 573, 575, 578, 581, 584, 586, 588, 599, 613, 616, 618], "nan": 55, "random": [55, 146, 178, 179, 207, 211, 250, 253, 261, 277, 301, 303, 314, 338, 342, 365, 550, 552, 588, 615, 622, 625], "convertnantorandom": 55, "const": [55, 56, 63, 64, 67, 68, 70, 82, 98, 314, 419, 501, 509], "consist": [55, 63, 550, 551, 570, 579, 620, 623], "placehold": [56, 192, 236], "convertplaceholdertoconst": 56, "train": [56, 80, 151, 157, 160, 169, 171, 178, 179, 182, 183, 194, 196, 211, 221, 226, 227, 238, 240, 253, 254, 271, 294, 314, 334, 358, 528, 552, 554, 555, 560, 573, 575, 576, 579, 584, 589, 591, 597, 608, 611, 613, 614, 619, 620, 623, 625], "rerewrit": 57, "dequantizecastoptim": 57, "b16": 57, "dilat": 58, "contract": 58, "dilatedcontract": 58, "spacetobatchnd": 58, "batchtospacend": 58, "pattern": [58, 59, 61, 78, 96, 107, 108, 109, 131, 136, 153, 163, 165, 168, 169, 171, 172, 175, 178, 179, 196, 240, 261, 282, 283, 285, 290, 294, 311, 314, 350, 425, 536, 555, 573, 581, 584, 588, 609, 611, 615, 620, 626], "inject": [59, 588], "dummi": [59, 168, 197, 198, 241, 242, 259, 269, 322, 554, 570, 573, 582, 587, 588], "injectdummybiasaddoptim": 59, "fusion": [59, 61, 70, 78, 109, 126, 127, 128, 131, 132, 133, 137, 551, 555, 581], "expanddim": 60, "expanddimsoptim": 60, "next": [60, 187, 231, 353, 552, 570, 615, 623], "featch": 61, "reshap": [61, 67, 68, 73, 620], "fetchweightfromreshapeoptim": 61, "handl": [61, 146, 151, 157, 362, 537, 551, 553, 572, 620], "batchnorm": [62, 67, 121, 551, 620], "foldbatchnormnodesoptim": 62, "graphfoldconstantoptim": 63, "sequenc": [63, 105, 169, 170, 178, 179, 194, 210, 211, 238, 252, 253, 263, 267, 292, 316, 320, 555, 573, 581, 613, 622], "self": [63, 168, 178, 179, 333, 555, 570, 572, 573, 584, 587, 619, 621, 623], "supported_op_typ": 63, "fusebiasaddandaddoptim": 64, "second": [64, 169, 178, 179, 194, 238, 339, 365, 429, 570, 588, 601, 605, 609, 620, 623, 625], "columnwis": 65, "fusecolumnwisemuloptim": 65, "depthwiseconv2dn": [65, 71, 125, 135, 581], "math": [66, 616], "fuseconvwithmathoptim": 66, "elimin": 66, "sub": [66, 159, 168, 212, 258, 552, 623], "realdiv": [66, 69], "decompos": [67, 68], "fusedecomposedbnoptim": 67, "input_graph_def": [67, 68, 70], "node_name_from_input": [67, 68, 70], "node_nam": [67, 68, 70, 146, 258, 331], "strip": [67, 68, 70, 83, 84, 146, 621], "port": [67, 68, 70, 537, 570], "other": [67, 68, 70, 151, 157, 193, 237, 267, 320, 331, 537, 549, 550, 551, 570, 581, 584, 585, 586, 588, 590, 610, 612, 613, 616, 620, 622, 623, 626], "underli": [67, 68, 70], "node_from_map": [67, 68, 70], "node_map": [67, 68, 70], "pull": [67, 68, 70], "def": [67, 68, 70, 182, 183, 226, 227, 334, 353, 355, 551, 555, 572, 573, 575, 576, 577, 587, 588, 616, 620, 621, 623], "entri": [67, 68, 70, 148, 218, 260, 298, 426, 429, 520, 586], "index": [67, 68, 70, 105, 159, 179, 187, 192, 196, 231, 236, 240, 276, 365, 537, 573, 587, 609, 620], "everi": [67, 68, 70, 170, 171, 178, 179, 292, 294, 555, 596, 601, 605, 623], "identifi": [67, 68, 70, 265, 318, 331, 613], "want": [67, 68, 70, 168, 178, 179, 192, 194, 236, 238, 294, 339, 355, 551, 555, 570, 573, 577, 585, 587, 588, 589, 596, 608, 609, 610, 619, 621, 623], "nodedef": [67, 68, 70], "rais": [67, 68, 70, 105, 170, 171, 174, 265, 292, 293, 294, 318, 323, 353, 520, 554, 613, 614], "valueerror": [67, 68, 70, 265, 318, 353, 580], "If": [67, 68, 70, 74, 159, 178, 179, 182, 183, 196, 211, 226, 227, 240, 253, 293, 323, 334, 353, 355, 550, 551, 570, 571, 573, 577, 579, 585, 586, 587, 588, 589, 594, 602, 603, 606, 608, 610, 616, 619, 620, 621, 622, 623], "isn": [67, 68, 70], "present": [67, 68, 70, 570, 614, 620], "values_from_const": [67, 68, 70], "node_def": [67, 68, 70], "extract": [67, 68, 70, 168, 196, 240, 313, 352, 520, 573], "access": [67, 68, 70, 176, 179, 361, 365, 504, 520, 537, 570, 603, 606], "valid_reshape_input": [67, 68], "reshape_in0_ndef": [67, 68], "reshape_in1_ndef": [67, 68], "ar": [67, 68, 105, 170, 171, 178, 179, 194, 211, 238, 253, 265, 269, 276, 292, 293, 294, 298, 300, 301, 318, 322, 335, 337, 338, 353, 358, 364, 365, 520, 549, 550, 551, 552, 554, 555, 570, 572, 573, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 594, 596, 599, 602, 608, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625], "bypass_reshap": [67, 68], "input_node_map": [67, 68], "input_nam": [67, 68, 102, 140, 179, 257, 258, 579], "get_const_dim_count": [67, 68], "dimens": [67, 68, 105, 186, 211, 230, 253, 573, 575, 622], "instancenorm": [68, 620], "fusedecomposedinoptim": 68, "gelu": 69, "fusegeluoptim": 69, "sqrt": 69, "erf": 69, "samll": 70, "layernorm": [70, 620], "fuselayernormoptim": 70, "remap": 70, "smaller": [70, 211, 253, 575, 588, 613, 622], "case": [70, 74, 159, 179, 193, 210, 211, 212, 237, 252, 253, 260, 284, 289, 297, 333, 520, 570, 572, 575, 576, 577, 581, 583, 587, 592, 596, 608, 609, 610, 613, 614, 616, 618, 622, 624, 625, 626], "fusedbatcnormv3": 70, "And": [70, 551, 571, 588, 594, 620], "further": [70, 179, 549, 589, 590, 591, 593, 602, 608], "restrict": [70, 178, 179, 613, 619], "2d": [70, 620], "3d": [70, 614, 620], "kera": [70, 116, 179, 196, 203, 218, 240, 247, 326, 331, 441, 448, 458, 577, 590, 598, 599, 626], "fusepadwithconv2doptim": 71, "excluded_op_nam": [71, 72, 175, 178, 179, 588, 613], "cfg": [71, 72, 153, 175, 311, 350, 358], "itex_qdq_mod": [71, 72], "conv3d": [71, 125], "fusepadwithfp32conv2doptim": 72, "fusetransposereshapeoptim": 73, "cse": [74, 98], "graphcseoptim": 74, "introduc": [74, 550, 555, 579, 581, 588, 616, 618, 620, 624], "ident": [74, 80, 169, 549, 575], "three": [74, 174, 194, 238, 300, 335, 337, 551, 555, 570, 572, 579, 585, 589, 602, 611, 616, 617, 619, 620, 621], "d": [74, 575, 583, 609, 626], "those": [74, 304, 343, 365, 575, 576, 583, 588, 611, 613, 616, 623], "child": [74, 621], "b1": 74, "c1c2": 74, "d1": [74, 365], "c1": 74, "c2": 74, "memori": [74, 260, 284, 289, 297, 333, 365, 572, 576, 588, 589, 591, 610, 613, 616, 620, 623], "bound": [74, 159, 211, 253, 265, 301, 318, 338, 587, 622], "like": [74, 96, 98, 146, 168, 174, 179, 182, 183, 184, 196, 226, 227, 228, 240, 260, 269, 294, 297, 298, 322, 331, 334, 355, 550, 551, 552, 555, 570, 575, 576, 584, 596, 611, 613, 616, 618, 620, 623], "relu": [74, 78, 109, 551, 581, 620, 621], "relu6": [74, 581], "graphdef": [74, 146, 331, 590], "grappler": [75, 581], "grappleroptim": 75, "input_output_nam": 75, "opt_cfg": 75, "wrapper": [75, 102, 103, 104, 105, 122, 147, 161, 193, 211, 213, 214, 216, 217, 223, 237, 253, 265, 269, 318, 322, 327, 331, 537, 617], "leverag": [75, 552, 554, 575, 579, 591, 608, 611, 616, 623], "built": [75, 180, 181, 185, 190, 194, 195, 200, 202, 204, 205, 207, 208, 211, 216, 218, 224, 225, 229, 232, 234, 238, 239, 244, 246, 248, 249, 250, 251, 253, 298, 322, 325, 333, 334, 355, 552, 555, 573, 577, 588, 601, 605, 610, 616, 622, 623, 625], "convert_add_to_biasadd": [76, 87, 111], "convert_layout": [76, 87, 111], "convert_leakyrelu": [76, 87, 111], "convert_nan_to_random": [76, 87, 111], "convert_placeholder_to_const": [76, 87, 111], "dequantize_cast_optim": [76, 87, 111], "dilated_contract": [76, 87, 111], "dummy_biasadd": [76, 87, 111], "expanddims_optim": [76, 87, 111], "fetch_weight_from_reshap": [76, 87, 111], "fold_batch_norm": [76, 87, 111], "fold_const": [76, 87, 111], "fuse_biasadd_add": [76, 87, 111], "fuse_column_wise_mul": [76, 87, 111], "fuse_conv_with_math": [76, 87, 111], "fuse_decomposed_bn": [76, 87, 111], "fuse_decomposed_in": [76, 87, 111], "fuse_gelu": [76, 87, 111], "fuse_layer_norm": [76, 87, 111], "fuse_pad_with_conv": [76, 87, 111], "fuse_pad_with_fp32_conv": [76, 87, 111], "fuse_reshape_transpos": [76, 87, 111], "graph_cse_optim": [76, 87, 111], "grappler_pass": [76, 87, 111], "insert_print_nod": [76, 87, 111], "move_squeeze_after_relu": [76, 87, 111], "pre_optim": [76, 87, 111], "remove_training_nod": [76, 87, 111], "rename_batch_norm": [76, 87, 111], "split_shared_input": [76, 87, 111], "strip_equivalent_nod": [76, 87, 111, 146], "strip_unused_nod": [76, 87, 111, 146], "switch_optim": [76, 87, 111], "print": [77, 148, 168, 269, 322, 353, 570, 577, 587, 588, 613, 620, 623], "insertprintminmaxnod": 77, "pre_node_nam": 77, "post_node_nam": 77, "pass": [77, 146, 159, 322, 334, 365, 463, 532, 551, 555, 571, 573, 575, 576, 577, 579, 583, 587, 588, 609, 613, 615, 616, 617, 620, 625], "sampl": [77, 178, 179, 187, 192, 194, 195, 196, 207, 211, 231, 236, 238, 239, 240, 250, 253, 269, 276, 301, 322, 338, 452, 552, 554, 573, 578, 584, 609, 616, 622, 623, 625, 626], "move": [78, 551, 615, 618], "squeez": [78, 551], "movesqueezeafterreluoptim": 78, "match": [78, 102, 168, 265, 266, 318, 319, 575, 609], "pre": [79, 116, 168, 182, 183, 194, 226, 227, 238, 323, 334, 355, 573, 575, 576, 588, 589, 596, 613, 614, 616, 621, 623], "entranc": [79, 185], "preoptim": 79, "removetrainingnodesoptim": 80, "protected_nod": 80, "types_to_splic": 80, "checknumer": 80, "stopgradi": 80, "renam": [81, 618], "fusedbatchnorm": 81, "fusedbatchnormv2": 81, "renamebatchnormoptim": 81, "splitsharedinputoptim": 82, "equival": [83, 620], "stripequivalentnodesoptim": 83, "output_node_nam": [83, 84, 131, 132, 136, 146], "unus": [84, 146], "stripunusednodesoptim": 84, "input_node_nam": [84, 131, 136, 146], "switch": [85, 591, 621], "switchoptim": 85, "condit": [85, 194, 195, 196, 211, 238, 239, 240, 253, 300, 335, 337, 573, 586, 622, 623], "graphrewriterbas": 86, "abstract": [86, 160, 211, 253, 254, 260, 297, 449, 461, 512, 536, 555, 583], "freeze_fake_qu": [87, 95, 111], "freeze_valu": [87, 95, 111], "freeze_value_without_calib": [87, 95, 111], "fuse_conv_redundant_dequant": [87, 95, 111], "fuse_conv_requant": [87, 95, 111], "fuse_matmul_redundant_dequant": [87, 95, 111], "fuse_matmul_requant": [87, 95, 111], "meta_op_optim": [87, 95, 111], "post_hostconst_convert": [87, 95, 111], "post_quantized_op_cs": [87, 95, 111], "rnn_convert": [87, 95, 111], "scale_propag": [87, 95, 111], "onnx_graph": [87, 101, 111], "onnx_schema": [87, 101, 111], "tf2onnx_util": [87, 101, 111], "insert_qdq_pattern": [87, 106, 111], "merge_duplicated_qdq": [87, 106, 111], "share_qdq_y_pattern": [87, 106, 111], "freez": [88, 89, 90, 591, 613], "fakequ": 88, "freezefakequantopoptim": 88, "follow": [88, 110, 169, 196, 240, 262, 265, 315, 318, 549, 550, 551, 552, 555, 570, 572, 573, 575, 576, 577, 579, 581, 585, 586, 587, 588, 589, 590, 591, 592, 593, 601, 605, 611, 613, 615, 616, 620, 621, 623], "freezevaluetransform": 89, "max_min_data": [89, 90], "postfix": [89, 90], "tensor_data": [89, 365], "th": [89, 90], "gpu": [89, 90, 97, 178, 179, 554, 571, 584, 588, 589, 593, 599, 608, 615, 616], "freezevaluewithoutcalibtransform": 90, "95": [90, 269, 322, 587, 620, 626], "quantizedconv": [91, 92], "quantizeddeconv": 91, "redund": [91, 93], "fuseconvredundantdequantizetransform": 91, "cpu": [91, 92, 93, 94, 178, 179, 365, 554, 571, 584, 588, 589, 591, 593, 599, 608, 612, 614, 615, 616, 617, 621], "_quantizedconv": 91, "_quantizeddeconv": 91, "successor": [91, 92, 93, 94], "requant": [92, 94, 621], "fuseconvrequantizetransform": 92, "quantizedmatmul": [93, 94], "fusematmulredundantdequantizetransform": 93, "_quantizedmatmul": [93, 94], "fusematmulrequantizedequantizetransform": 94, "quantizedmatmulwithbiasanddequant": 94, "fusematmulrequantizetransform": 94, "fusematmulrequantizedequantizenewapitransform": 94, "fusematmulrequantizenewapitransform": 94, "newapi": 94, "meta": [96, 614], "metainfochangingmemopoptim": 96, "metaop": 96, "With": [96, 333, 551, 554, 555, 572, 588, 596, 601, 605, 609, 610, 613, 614, 619, 620, 623, 626], "chang": [96, 141, 151, 158, 171, 173, 178, 179, 294, 296, 341, 365, 380, 489, 511, 550, 572, 577, 580, 586, 587, 588, 591, 601, 602, 605, 608, 613, 621, 622, 623], "better": [96, 178, 179, 182, 183, 226, 227, 276, 323, 334, 355, 576, 587, 589, 613, 614, 616, 619, 623], "perform": [96, 159, 172, 178, 179, 194, 206, 207, 212, 238, 250, 260, 284, 289, 297, 304, 322, 333, 334, 339, 343, 512, 523, 551, 552, 555, 570, 571, 572, 573, 574, 576, 578, 579, 584, 585, 587, 588, 589, 590, 591, 593, 597, 599, 602, 608, 610, 611, 612, 613, 614, 615, 616, 617, 620, 621, 623, 625, 626], "post": [97, 98, 151, 157, 171, 179, 182, 183, 226, 227, 258, 334, 549, 554, 555, 576, 577, 584, 585, 591, 597, 608, 613, 614, 620, 621, 623], "hostconst": 97, "posthostconstconvert": 97, "postcseoptim": 98, "duplic": [98, 108, 301, 338], "quantizev2": 98, "decreas": [98, 613], "size": [98, 170, 186, 187, 193, 196, 202, 207, 211, 230, 231, 237, 240, 246, 250, 253, 292, 333, 365, 520, 549, 570, 572, 573, 577, 580, 588, 608, 609, 610, 613, 620, 622, 625, 626], "rnn": 99, "quantizedrnnconvert": 99, "calibration_data": [99, 107], "rnn_detail": 99, "scalepropagationtransform": 100, "direct": [100, 170, 292, 470, 613], "export": [101, 179, 261, 265, 314, 318, 520, 554, 582, 594, 609, 621, 624], "onnxgraph": 102, "output_shap": 102, "opset": [102, 104, 105, 179, 257, 258], "extra_opset": 102, "output_nam": [102, 140, 179, 257, 258, 579], "is_subgraph": 102, "graph_nam": 102, "manipul": [102, 103], "onnxnod": 103, "skip_convers": 103, "schema": 104, "onnxopschema": 104, "domain": [104, 105, 178, 179, 393, 417, 441, 448, 501, 502, 504, 520, 532, 537, 570, 613, 623], "since_vers": 104, "get_schema": 104, "max_inclusive_opset_vers": 104, "within": [104, 171, 260, 265, 297, 318, 331, 549, 551, 589, 601, 605, 608, 614, 620], "get_max_supported_opset_vers": 104, "packag": [104, 373, 381, 387, 389, 390, 392, 393, 394, 397, 398, 401, 403, 412, 417, 422, 423, 427, 430, 436, 438, 441, 442, 448, 467, 469, 474, 477, 480, 481, 483, 486, 492, 497, 501, 535, 555, 570, 580, 585, 608, 609, 614, 618, 623], "set_nam": 105, "find_opset": 105, "assert_error": 105, "bool_val": 105, "error_msg": 105, "error": [105, 148, 269, 304, 322, 343, 362, 504, 587, 592, 620, 623], "messag": [105, 144, 520, 532, 537, 623], "map_numpy_to_onnx_dtyp": 105, "np_dtype": 105, "map_onnx_to_numpy_typ": 105, "onnx_typ": 105, "add_port_to_nam": 105, "nr": 105, "get_tensorflow_node_attr": 105, "pars": [105, 153, 194, 195, 207, 211, 238, 239, 250, 253, 367, 378, 471, 475, 479, 484, 487, 493, 512, 520, 528, 622], "get_tensorflow_tensor_shap": 105, "get_tensorflow_node_shape_attr": 105, "attr": [105, 146, 168], "map_tensorflow_dtyp": 105, "get_tensorflow_tensor_data": 105, "convert_tensorflow_tensor_to_onnx": 105, "read_tensorflow_node_attr": 105, "read": [105, 146, 199, 211, 243, 253, 293, 573, 617, 619], "infer_onnx_shape_dtyp": 105, "opset_vers": [105, 140, 179, 257, 258, 579], "input_shap": [105, 198, 242, 572, 573], "input_dtyp": 105, "sometim": [105, 551, 616], "so": [105, 211, 253, 551, 555, 580, 584, 587, 594, 596, 616, 617, 620, 621, 622, 624], "make_onnx_shap": 105, "seqtyp": 105, "tensor_dtyp": 105, "around": 105, "signifi": 105, "make_onnx_inputs_output": 105, "elem_typ": 105, "text": [105, 210, 211, 252, 253, 262, 267, 295, 315, 320, 579, 586, 597, 613, 614, 620, 622, 626], "datatyp": [105, 153, 617, 623], "save_protobuf": 105, "path": [105, 146, 153, 168, 174, 175, 194, 195, 196, 211, 238, 239, 240, 253, 254, 257, 258, 260, 271, 272, 273, 275, 284, 289, 293, 295, 297, 298, 311, 323, 331, 334, 350, 365, 429, 446, 449, 452, 454, 459, 460, 461, 462, 489, 520, 551, 552, 555, 570, 572, 573, 577, 583, 587, 588, 589, 590, 594, 597, 608, 611, 622, 625], "as_text": 105, "protobuf": 105, "is_onnx_domain": 105, "is_list_or_tupl": 105, "are_shapes_equ": 105, "src": [105, 609], "dest": 105, "equal": [105, 141, 146, 158, 353, 365, 587, 613], "get_subgraphs_from_onnx": 105, "model_proto": 105, "over": [105, 196, 240, 269, 322, 578, 582, 584, 587, 599, 608, 615, 620, 623], "df": 105, "initialize_name_count": 105, "avoid": [105, 194, 238, 551, 621], "conflict": [105, 580], "counter": 105, "make_nam": 105, "get_index_from_strided_slice_of_shap": 105, "outputs_to_valu": 105, "stride": [105, 211, 253, 622], "slice": 105, "compute_const_folding_using_tf": 105, "g": [105, 170, 178, 179, 575, 578, 582, 591, 596, 613, 618, 620, 623], "const_node_valu": 105, "graph_output": 105, "constant": [105, 258, 261, 301, 303, 309, 314, 338, 342, 348, 359, 502, 572, 581, 622], "tf": [105, 116, 146, 193, 194, 195, 196, 211, 237, 238, 239, 240, 253, 329, 331, 368, 570, 577, 590, 614, 617, 622], "generategraphwithqdqpattern": 107, "op_wise_config": [107, 131, 136], "quantized_nod": 107, "dq": [107, 109, 131, 620], "pair": [107, 178, 179, 572, 588, 589], "merg": [108, 186, 230, 311, 350, 603, 606, 621, 623], "mergeduplicatedqdqoptim": 108, "y": [109, 178, 179, 211, 253, 301, 338, 580, 594, 620, 622], "shareqdqforitexypatternoptim": 109, "enabl": [109, 148, 171, 178, 179, 294, 508, 570, 577, 585, 589, 591, 593, 596, 597, 599, 612, 613, 614, 623], "break": [109, 577, 588], "graphanalyz": 110, "extend_engin": 110, "analyz": [110, 168, 331, 619, 620, 621], "under": [110, 178, 179, 196, 240, 364, 552, 570, 573, 586, 587, 588, 591, 596, 597, 608, 611, 613, 620, 621, 623], "singleton": [110, 314, 365, 501, 509], "specifi": [110, 159, 178, 179, 182, 183, 211, 212, 226, 227, 253, 260, 265, 269, 272, 275, 284, 289, 297, 298, 318, 322, 323, 334, 353, 355, 364, 365, 382, 419, 471, 516, 520, 537, 570, 577, 581, 587, 588, 596, 610, 615, 622, 623, 625], "graphrewriterhelp": 110, "encapsul": [110, 182, 183, 226, 227, 323, 334, 355, 590], "quantize_lay": [111, 112, 114], "fake_quant": [111, 112, 114], "quantize_config": [111, 112, 114], "quantize_help": [111, 112, 114], "quantize_wrapp": [111, 112, 114], "fuse_qdq_bn": [111, 112, 130], "fuse_qdq_concatv2": [111, 112, 130], "fuse_qdq_conv": [111, 112, 130], "fuse_qdq_deconv": [111, 112, 130], "fuse_qdq_in": [111, 112, 130], "fuse_qdq_matmul": [111, 112, 130], "fuse_qdq_pool": [111, 112, 130], "optimize_qdq": [111, 112, 130], "optimize_lay": [112, 114, 117], "quantize_layer_add": [112, 114, 117], "quantize_layer_bas": [112, 114, 117], "quantize_layer_bn": [112, 114, 117], "fake": [113, 151, 157, 588, 616, 620], "fakequantizebas": 113, "abc": [113, 267, 320, 555, 621, 623], "appli": [113, 126, 127, 128, 131, 133, 137, 160, 171, 221, 263, 316, 549, 570, 588, 591, 593, 599, 608, 611, 613, 616, 617, 619, 620, 623, 624, 625], "fakequant": 113, "per_channel": [113, 581, 616, 625], "num_bit": [113, 153, 620], "8": [113, 178, 179, 210, 252, 551, 581, 585, 613, 614, 620, 623, 626], "channel_axi": [113, 155, 158], "symmetr": [113, 616, 622, 623], "narrow_rang": 113, "quantizeconfig": [115, 116], "custom": [115, 159, 298, 322, 333, 364, 571, 575, 576, 591, 613, 619], "There": [115, 298, 300, 335, 337, 570, 575, 581, 584, 587, 588, 589, 591, 620, 623, 625], "instanc": [115, 116, 159, 178, 179, 182, 183, 212, 226, 227, 266, 267, 269, 272, 275, 278, 279, 281, 282, 283, 301, 313, 319, 320, 322, 323, 334, 338, 352, 355, 365, 549, 551, 555, 570, 571, 588, 593, 599, 625, 626], "global": [115, 170, 178, 179, 278, 279, 281, 282, 283, 292, 365, 551, 588, 613, 615, 623], "class": [116, 150, 153, 276, 323, 334, 443, 444, 551, 552, 572, 573, 575, 587, 588, 599, 610, 611, 616, 618, 621, 623, 625], "init_quantize_config": 116, "quantize_recip": 116, "begin": [116, 171, 294, 575, 576, 588, 613, 623], "process": [116, 148, 159, 170, 171, 173, 174, 178, 179, 182, 183, 194, 195, 196, 207, 211, 212, 226, 227, 238, 239, 240, 250, 253, 258, 292, 294, 296, 300, 301, 314, 323, 334, 335, 337, 338, 355, 364, 365, 381, 464, 465, 468, 501, 509, 513, 552, 555, 570, 572, 573, 575, 576, 577, 579, 588, 592, 611, 613, 616, 620, 621, 622, 625], "model_nam": [116, 178, 179, 520], "special": [116, 168, 333, 551, 572, 587, 588, 610, 613, 624], "decid": [116, 178, 179, 263, 294, 316, 429, 555, 588, 616, 618, 623], "qat_clone_funct": 116, "leav": [116, 602], "quantizewrapp": [116, 122], "wrapped_lay": 116, "config_quantizable_lay": 118, "quantizelayeradd": 119, "quantizelay": 120, "quantizelayerbas": 120, "quantizelayerbatchnorm": 121, "quantizewrapperbas": 122, "fusedbatchnormv3": [123, 133], "fusenodestartwithfusedbatchnormv3": [123, 133], "_quantizedfusedbatchnorm": 123, "concatv2": [124, 134, 145, 581], "fusenodestartwithconcatv2": [124, 134], "quantizedconcatv2": [124, 134], "fusenodestartwithconv2d": [125, 135], "conv2dbackpropinput": 126, "conv3dbackpropinputv2": 126, "fusenodestartwithdeconv2d": 126, "fusedinstancenorm": 127, "fusenodestartwithfusedinstancenorm": 127, "batchmatmul": 128, "batchmatmulv2": 128, "fusenodestartwithmatmul": [128, 137], "avgpool": [129, 138, 581], "fusenodestartwithpool": [129, 138], "optimizeqdqgraph": 131, "input_graph": [131, 136, 141, 367, 475, 479, 484, 487, 494, 555], "op_wise_sequ": [131, 136], "quantizegraph": 132, "quantizegraphbas": 132, "quantizenodebas": 132, "quantizegraphforintel": 136, "common": [139, 179, 209, 261, 271, 275, 276, 277, 314, 358, 513, 514, 520, 549, 573, 576, 577, 579, 583, 585, 588, 616, 620], "herlper": 139, "quantizegraphhelp": 139, "sever": [139, 173, 211, 253, 296, 552, 570, 575, 576, 584, 588, 589, 601, 605, 613, 615, 620, 622, 623, 625], "staticmethod": 139, "function": [139, 178, 179, 182, 183, 195, 226, 227, 239, 272, 275, 284, 289, 551, 552, 555, 570, 571, 572, 575, 576, 583, 584, 585, 587, 588, 589, 599, 609, 613, 616, 619, 620, 621, 623, 624], "tensorflowqdqtoonnxqdqconvert": 140, "shape_overrid": 140, "inputs_as_nchw": [140, 257], "default_opset_vers": 140, "bia": [141, 178, 179, 258, 621], "correct": [141, 158, 174, 178, 179, 265, 266, 267, 269, 293, 318, 319, 320, 322, 549, 570, 591], "biascorrect": 141, "fp32_graph": 141, "method": [141, 153, 172, 178, 179, 187, 192, 193, 194, 196, 203, 211, 214, 231, 236, 237, 238, 240, 247, 253, 275, 276, 277, 311, 350, 358, 359, 361, 362, 514, 532, 551, 552, 554, 573, 575, 576, 587, 588, 611, 613, 616, 617, 620, 622, 623], "weight_empir": 141, "Will": [141, 575, 584], "our": [141, 153, 178, 179, 552, 554, 579, 588, 609, 619, 624], "task": [141, 194, 201, 238, 245, 269, 322, 573, 575, 576, 579, 584, 587, 588, 613, 620], "close": [141, 158], "w_int8": [141, 158], "u": [141, 158, 554, 591], "w_fp32": [141, 158], "varianc": [141, 158], "ratio": [141, 158, 170, 171, 174, 178, 179, 207, 211, 250, 253, 294, 573, 588, 613, 622, 626], "differ": [141, 154, 158, 161, 169, 178, 179, 187, 196, 211, 213, 231, 240, 253, 260, 269, 275, 277, 286, 297, 322, 333, 360, 549, 551, 552, 570, 572, 573, 575, 577, 578, 579, 583, 584, 587, 588, 590, 601, 605, 610, 613, 616, 620, 621, 622, 623], "wise": [141, 158, 178, 179, 301, 304, 338, 339, 343, 520, 570, 584, 613, 621, 623, 625], "minim": [141, 158, 301, 338, 575, 578, 587, 588, 601, 605, 613, 616, 623], "round": [141, 158, 616, 620], "scale_c": [141, 158], "shift": [141, 158, 207, 250, 609, 622], "notic": [141, 158, 212, 586, 618], "can": [141, 148, 151, 158, 168, 169, 170, 171, 173, 178, 179, 182, 183, 193, 196, 211, 212, 214, 226, 227, 237, 240, 253, 265, 267, 269, 292, 294, 296, 318, 320, 322, 323, 333, 334, 355, 365, 471, 520, 551, 552, 554, 555, 570, 571, 572, 573, 575, 576, 577, 579, 581, 584, 585, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 599, 601, 602, 603, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 619, 620, 621, 622, 623, 625, 626], "first": [141, 158, 169, 176, 178, 179, 194, 238, 265, 311, 318, 339, 350, 365, 429, 551, 552, 555, 570, 573, 579, 585, 589, 593, 602, 603, 606, 609, 615, 616, 617, 619, 620, 621, 623, 625], "empir": [141, 158], "solut": [141, 158, 554, 555, 580, 593, 597, 602, 614, 620, 623], "min": [141, 158, 365, 570, 613, 616, 620, 622, 623], "graphtransform": 142, "graphtransformbas": 142, "input_pb": [142, 144, 145], "log": [144, 159, 168, 362, 368, 471, 511, 512, 551, 570, 599, 619, 621, 623], "insertlog": 144, "node_name_list": 144, "show_nam": 144, "show_op": 144, "first_n": 144, "summar": [144, 575], "1024": [144, 196, 240, 594], "dump_fp32": 144, "rerang": 145, "rerangequantizedconcat": 145, "rerange_quant": 145, "version1_lt_version2": [146, 365], "version1": [146, 365], "version2": [146, 365], "version1_gt_version2": [146, 365], "greater": [146, 365, 613], "version1_eq_version2": [146, 365], "version1_gte_version2": [146, 365], "version1_lte_version2": [146, 365], "disable_random": 146, "seed": [146, 178, 179, 277, 365, 588, 625], "disabl": [146, 178, 179, 508, 537, 549, 608, 617], "read_graph": 146, "in_graph": 146, "in_graph_is_binari": 146, "write_graph": 146, "out_graph_def": 146, "out_graph_fil": 146, "write": [146, 203, 247, 365, 577, 583, 588, 591, 621], "is_ckpt_format": 146, "model_path": [146, 450, 520], "ckpt": [146, 323, 331, 334, 626], "folder": [146, 196, 201, 240, 245, 323, 334, 364, 573, 596, 601, 605, 621], "is_saved_model_format": 146, "saved_model": [146, 271, 441, 448, 458], "get_estimator_graph": 146, "estim": [146, 269, 322, 331, 623], "input_fn": [146, 331], "get_tensor_by_nam": 146, "try_cnt": 146, "3": [146, 171, 179, 196, 211, 240, 253, 265, 318, 353, 551, 552, 554, 570, 572, 573, 575, 577, 579, 581, 582, 585, 587, 588, 589, 591, 595, 599, 601, 605, 610, 615, 616, 619, 620, 622, 623, 626], "consid": [146, 269, 322, 549, 575, 609, 623], "import": [146, 159, 178, 179, 271, 323, 333, 334, 353, 355, 365, 551, 552, 554, 571, 572, 573, 575, 576, 577, 579, 582, 587, 588, 589, 590, 591, 595, 597, 610, 611, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623], "scope": [146, 588], "more": [146, 151, 157, 170, 211, 253, 292, 552, 553, 554, 570, 573, 575, 577, 582, 584, 585, 587, 588, 589, 591, 599, 603, 606, 610, 611, 613, 617, 620, 623, 624, 626], "onc": [146, 173, 218, 296, 300, 335, 337, 570, 572, 608, 613, 614, 623, 626], "both": [146, 179, 549, 552, 555, 576, 585, 588, 592, 613, 615, 616, 620, 623], "compat": [146, 331, 577, 590, 603, 606, 608, 618], "suffix": 146, "time": [146, 178, 179, 211, 253, 269, 301, 322, 333, 338, 365, 506, 577, 580, 588, 596, 598, 601, 605, 608, 609, 610, 613, 614, 616, 619, 621, 622, 623], "got": [146, 580, 621], "iterator_sess_run": 146, "sess": [146, 331], "iter_op": 146, "feed_dict": [146, 193, 237], "output_tensor": [146, 331], "measur": [146, 212, 323, 360, 552, 555, 571, 575, 587, 588, 621, 623], "integr": [146, 161, 213, 555, 570, 588, 609], "makeiter": 146, "feed": [146, 193, 237, 575, 613], "end": [146, 171, 178, 179, 194, 210, 211, 238, 252, 253, 294, 300, 335, 337, 555, 575, 576, 581, 585, 588, 602, 610, 613, 621, 622, 623], "predict": [146, 211, 216, 253, 262, 266, 267, 269, 315, 319, 320, 322, 334, 552, 575, 587, 599, 620, 621, 622], "pred": [146, 269, 322, 587], "collate_tf_pr": 146, "collat": [146, 153], "tbe": 146, "get_input_output_node_nam": 146, "fix_ref_type_of_graph_def": 146, "fix": [146, 171, 194, 238, 294, 550, 573, 595, 613, 620, 623], "strip_unused_lib": 146, "offici": [146, 262, 266, 267, 315, 319, 320, 549, 570, 587, 620], "r1": 146, "15": [146, 581, 626], "branch": [146, 570], "get_graph_def": 146, "auto_input_output": 146, "get_model_input_shap": 146, "inout": 146, "get_tensor_val_from_graph_nod": 146, "graph_node_name_map": 146, "val": [146, 174, 196, 199, 240, 243, 293, 588], "tensor_v": 146, "int8_node_name_revers": 146, "revers": [146, 570], "tf_diagnosis_help": 146, "fp32_model": [146, 148, 153, 258, 365, 555], "quan_model": 146, "save_path": [146, 257, 258, 555, 590], "diagnosi": [146, 179, 314, 409, 418, 441, 501, 530, 536, 588], "generate_feed_dict": 146, "input_tensor": [146, 331], "torch": [147, 148, 149, 150, 151, 152, 153, 157, 168, 169, 170, 175, 178, 179, 223, 258, 323, 334, 364, 551, 554, 556, 575, 577, 579, 588, 589, 590, 591, 596, 599, 616, 620, 621], "bf16modulewrapp": 147, "bf16modul": 147, "mix": [147, 178, 179, 299, 311, 323, 336, 350, 477, 478, 479, 526, 554, 555, 560, 584, 591, 597, 598, 599, 624], "precis": [147, 178, 179, 182, 183, 226, 227, 260, 267, 269, 270, 297, 299, 311, 320, 322, 323, 333, 336, 339, 350, 393, 407, 408, 417, 441, 475, 477, 478, 479, 502, 526, 554, 555, 560, 570, 571, 576, 577, 581, 584, 591, 597, 598, 599, 614, 615, 616, 620, 623, 624], "mixed_precision_model": 147, "bf16_symbolic_trac": 147, "fx_sub_module_list": 147, "trace": [147, 148, 152, 153, 168, 178, 179, 258, 341, 551, 598, 623], "_description_": 147, "hessian": [148, 341, 623], "awar": [148, 160, 179, 221, 271, 292, 341, 355, 555, 576, 577, 579, 584, 589, 608, 611, 623], "node_collector": 148, "hook": [148, 160, 220, 221, 284, 289, 358, 575, 576, 588, 613, 620, 621], "record": [148, 153, 161, 194, 195, 196, 202, 213, 220, 238, 239, 240, 246, 365, 573, 619, 621, 623], "hessiantrac": 148, "q_model": [148, 179, 271, 334, 551, 554, 572, 573, 577, 579, 582, 583, 587, 588, 590, 616, 617], "criterion": [148, 160, 162, 163, 164, 170, 171, 178, 179, 215, 218, 261, 314, 488, 528, 575, 576, 579, 588, 613, 616, 623, 625], "pleas": [148, 151, 157, 164, 170, 171, 178, 179, 194, 195, 196, 199, 238, 239, 240, 243, 292, 294, 295, 322, 334, 353, 551, 552, 553, 554, 555, 570, 571, 573, 576, 577, 585, 587, 589, 591, 592, 596, 599, 613, 616, 617, 618, 619, 620, 624], "refer": [148, 151, 157, 164, 170, 171, 174, 178, 179, 194, 238, 262, 263, 269, 292, 294, 295, 315, 316, 322, 334, 353, 551, 555, 571, 572, 573, 576, 577, 583, 585, 586, 587, 588, 589, 591, 596, 599, 610, 615, 618, 622, 623], "yao": 148, "zhewei": 148, "et": [148, 620], "al": [148, 620], "pyhessian": 148, "network": [148, 164, 170, 294, 341, 552, 570, 575, 576, 579, 588, 612, 614, 616, 620, 623], "through": [148, 182, 183, 226, 227, 322, 323, 334, 554, 571, 581, 583, 584, 587, 594, 610, 611, 613, 615, 616, 620], "len": [148, 179, 211, 253, 573, 577, 622], "2020": 148, "ieee": [148, 589, 620], "intern": [148, 311, 350, 504, 572, 573, 613], "confer": [148, 613, 620], "big": 148, "dong": 148, "zhen": 148, "hawq": [148, 341, 623], "v2": [148, 341, 577, 585, 597, 618, 623, 626], "advanc": [148, 178, 179, 529, 549, 554, 560, 616, 625], "system": [148, 159, 212, 365, 508, 535, 536, 571, 594], "33": [148, 626], "18518": 148, "18529": 148, "openvinotoolkit": 148, "nncf": 148, "develop": [148, 333, 520, 550, 551, 585, 588, 589, 591, 597, 608, 613, 614, 617, 619], "hessian_trac": 148, "compare_weight": 148, "float_dict": 148, "ani": [148, 265, 267, 310, 318, 320, 349, 353, 367, 368, 370, 372, 374, 375, 376, 377, 378, 379, 380, 382, 407, 408, 429, 431, 437, 446, 463, 466, 468, 471, 475, 479, 481, 484, 487, 490, 493, 499, 506, 508, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 536, 537, 549, 550, 554, 570, 572, 577, 591, 596, 609, 613, 619], "quantized_dict": 148, "compar": [148, 269, 322, 365, 570, 576, 587, 613, 616, 619, 621, 623], "being": [148, 265, 318, 437], "two": [148, 159, 169, 170, 171, 173, 196, 201, 212, 240, 245, 265, 292, 296, 298, 305, 318, 344, 365, 551, 552, 570, 573, 575, 577, 579, 581, 587, 588, 589, 616, 617, 619, 623, 625], "wt_compare_dict": 148, "float_model": 148, "state_dict": [148, 577, 621], "qmodel": 148, "compute_error": 148, "state": [148, 169, 594, 613], "weight_dict": 148, "hawq_top": 148, "enable_act": 148, "modul": [149, 150, 274, 280, 290, 291, 509, 517, 525, 551, 570, 572, 575, 579, 584, 587, 588, 590, 613, 615, 617, 621, 624], "nn": [150, 151, 153, 168, 169, 178, 179, 223, 258, 323, 334, 364, 551, 575, 579, 588, 590, 620, 621], "get_modul": 151, "set_modul": [151, 153], "new_modul": [151, 153], "torchsmoothqu": [151, 620], "example_input": [151, 153, 178, 179, 258, 579], "q_func": [151, 182, 183, 226, 227, 301, 302, 304, 305, 306, 307, 335, 338, 339, 340, 341, 343, 344, 345, 346, 555, 588, 623], "traced_model": [151, 152], "detail": [151, 157, 168, 211, 253, 402, 404, 425, 488, 493, 507, 520, 549, 550, 554, 575, 581, 582, 583, 587, 588, 589, 591, 599, 608, 613, 618, 619, 621, 623, 624, 626], "smoothquant": [151, 153, 157, 554, 614, 624], "accur": [151, 157, 620], "effici": [151, 157, 552, 572, 575, 591, 611, 614, 620, 623], "larg": [151, 157, 554, 572, 575, 588, 613, 614, 620, 626], "languag": [151, 157, 262, 315, 549, 554, 579, 613, 614, 620], "spiq": [151, 157, 620], "free": [151, 157, 169, 171, 182, 183, 226, 227, 334, 549, 554, 587, 597, 602, 610, 619, 620], "could": [151, 157, 170, 182, 183, 196, 226, 227, 240, 298, 323, 334, 355, 549, 551, 576, 588, 611, 613, 616, 620, 624], "absorb": [151, 157], "later": [151, 157, 621], "inplac": 151, "mean": [151, 170, 178, 179, 207, 211, 250, 253, 267, 269, 292, 304, 320, 322, 343, 551, 572, 577, 581, 587, 588, 594, 613, 616, 620, 622, 623, 625], "you": [151, 178, 179, 192, 194, 236, 238, 294, 322, 334, 550, 551, 570, 573, 577, 579, 585, 586, 587, 591, 593, 594, 596, 601, 605, 608, 609, 613, 616, 618, 619, 620, 621, 624], "recov": [151, 365, 555, 576, 620], "graphtrac": 151, "trace_and_fuse_sub_graph": 152, "is_qat": 152, "get_embedding_contigu": 153, "embed": [153, 613], "contigu": 153, "is_fused_modul": 153, "_propagate_qconfig_help": 153, "detect": [153, 168, 178, 179, 265, 269, 318, 322, 327, 520, 551, 570, 591, 598, 599, 613], "collate_torch_pr": 153, "fetch": [153, 156, 187, 231, 573], "collate_result": 153, "input2tupl": 153, "append_attr": 153, "fx_model": 153, "fx_white_list": 153, "append": [153, 298, 301, 338, 551, 576, 588, 611], "graphmodul": [153, 551, 617], "addit": [153, 179, 355, 570, 575, 602, 618], "dir": [153, 194, 238, 364, 573, 580, 583], "generate_activation_observ": 153, "observ": [153, 619, 621, 623], "what": [153, 171, 192, 236, 322, 334, 355, 549, 570], "check_cfg_and_qconfig": 153, "op_infos_from_cfg": 153, "output_tensor_ids_op_nam": 153, "paser_cfg": 153, "ops_nam": 153, "get_quantizable_ops_from_cfg": 153, "input_tensor_ids_op_nam": 153, "update_sq_scal": 153, "ipex_config_path": 153, "smoothquant_scale_info": 153, "ipex_config": 153, "json": [153, 195, 211, 239, 253, 493, 520, 573, 590, 609, 622], "temporari": [153, 365, 549], "auto_copi": 153, "fetch_modul": 153, "op_nam": [153, 175, 178, 179, 312, 351, 425, 426, 588, 613, 621], "simple_infer": 153, "get_example_input": 153, "dataset": [153, 182, 183, 184, 186, 187, 190, 191, 192, 193, 205, 214, 226, 227, 228, 230, 231, 234, 235, 236, 237, 249, 261, 265, 266, 267, 269, 298, 314, 318, 319, 320, 322, 323, 334, 355, 358, 393, 407, 417, 418, 429, 441, 520, 522, 552, 554, 555, 572, 577, 582, 587, 588, 596, 613, 616, 618, 620, 623, 625, 626], "example_inp": 153, "get_fallback_ord": 153, "confidence_batch": [153, 623], "fallback": [153, 304, 305, 341, 343, 344, 589, 617, 623], "requantize_cfg": 153, "fall": 153, "back": [153, 211, 217, 253, 608], "order": [153, 262, 263, 298, 301, 304, 313, 315, 316, 338, 343, 352, 551, 587, 615, 620, 621, 623], "confid": 153, "ordered_op": 153, "get_mse_order_per_fp32": 153, "mse": [153, 178, 179, 261, 269, 303, 314, 322, 334, 342, 426, 570, 587, 615, 618], "influenc": [153, 613], "last": [153, 164, 174, 178, 179, 570, 589, 591, 593, 598, 602, 616, 620], "fallback_ord": 153, "get_mse_order_per_int8": 153, "get_torch_vers": 153, "match_datatype_pattern": 153, "calculate_quant_min_max": 153, "unsign": [153, 313, 352], "qmin": 153, "qmax": 153, "algorithm_registri": 154, "algorithm_typ": 154, "locat": [154, 174, 211, 253, 577, 594, 601, 605, 608, 616, 618, 622, 625], "registr": [154, 196, 203, 211, 240, 247, 253, 287], "algorithmschedul": 154, "conf": [154, 159, 160, 179, 182, 183, 212, 226, 227, 271, 278, 279, 281, 282, 283, 284, 289, 301, 302, 304, 305, 306, 307, 311, 323, 333, 334, 335, 338, 339, 340, 341, 343, 344, 345, 346, 350, 353, 355, 531, 551, 552, 554, 571, 575, 582, 583, 588, 589, 590, 611, 616, 617, 619, 620, 623], "control": [154, 178, 179, 412, 417, 551, 570, 588, 613, 623], "phase": [154, 552, 588, 613, 616, 617, 623], "fastbiascorrect": [155, 158], "fast_bias_correct": [156, 178, 179, 314, 616], "smooth_quant": [156, 178, 179, 314, 616, 620], "weight_correct": [156, 178, 179, 314, 616], "5": [157, 161, 178, 179, 198, 207, 213, 242, 250, 269, 322, 334, 555, 570, 573, 581, 587, 588, 612, 613, 615, 616, 620, 622, 623, 625, 626], "For": [157, 168, 169, 170, 179, 196, 211, 240, 253, 266, 267, 269, 292, 295, 319, 320, 322, 323, 334, 549, 551, 553, 555, 570, 575, 576, 577, 579, 581, 584, 591, 593, 594, 596, 599, 613, 617, 620, 621, 623, 625, 626], "kernel": [157, 178, 179, 508, 555, 612, 623], "futur": [157, 182, 183, 214, 226, 227, 584, 588, 599, 624], "weightcorrect": 158, "1e": [158, 620, 625], "05": [158, 179, 269, 322, 587, 620, 626], "evalu": [159, 160, 170, 178, 182, 183, 194, 212, 226, 227, 238, 254, 262, 265, 266, 267, 269, 271, 315, 318, 319, 320, 322, 323, 333, 334, 355, 358, 501, 509, 525, 552, 555, 572, 573, 575, 576, 583, 584, 587, 588, 589, 591, 597, 599, 602, 608, 610, 613, 616, 619, 621, 623, 625], "set_env_var": [159, 212], "env_var": [159, 212], "overwrite_exist": [159, 212], "env": [159, 212, 580], "alreadi": [159, 196, 210, 212, 240, 252, 506, 555, 570, 573, 584, 603, 606, 623], "param": [159, 184, 212, 218, 228, 269, 301, 322, 338, 365, 419, 520, 555, 590, 623], "set_all_env_var": [159, 212], "physic": [159, 212, 549, 571], "core": [159, 178, 179, 212, 570, 571, 586, 601, 605, 612, 626], "get_architectur": [159, 212], "architectur": [159, 212, 272, 275, 554, 570, 571, 575, 588, 613, 614, 624], "get_threads_per_cor": [159, 212], "thread": [159, 178, 179, 212, 536, 570, 572, 612], "get_thread": [159, 212], "get_physical_id": [159, 212], "socket": [159, 212, 508, 537, 612, 626], "get_core_id": [159, 212], "get_bounded_thread": [159, 212], "core_id": [159, 212], "bind": [159, 212], "run_inst": 159, "b_dataload": [159, 178, 179, 571, 588], "b_func": [159, 571], "benchmarkconfig": [159, 178, 179, 571, 588], "accuraci": [159, 174, 178, 179, 182, 183, 226, 227, 254, 260, 269, 284, 289, 297, 322, 323, 333, 334, 339, 353, 355, 488, 512, 523, 551, 554, 570, 572, 573, 576, 577, 578, 579, 587, 588, 589, 599, 608, 610, 611, 613, 614, 615, 618, 619, 620, 621, 625, 626], "goal": [159, 254, 260, 284, 289, 297, 323, 334, 572, 611, 616, 623], "prefer": [159, 260, 297, 334, 613], "space": [159, 171, 178, 179, 182, 183, 226, 227, 260, 267, 272, 275, 276, 277, 297, 301, 304, 311, 320, 323, 334, 338, 343, 350, 520, 549, 550, 552, 555, 613, 616, 625], "etc": [159, 160, 210, 252, 254, 260, 267, 284, 289, 297, 320, 323, 334, 364, 575, 584, 613, 619, 623], "user": [159, 168, 171, 174, 178, 179, 182, 183, 196, 199, 203, 211, 212, 218, 223, 226, 227, 240, 243, 247, 253, 260, 284, 289, 295, 297, 298, 322, 323, 333, 334, 339, 355, 365, 504, 551, 552, 555, 560, 571, 575, 576, 579, 581, 584, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 599, 602, 608, 610, 611, 613, 614, 616, 617, 618, 620, 621, 622, 623, 627], "generate_prefix": 159, "core_list": 159, "command": [159, 212, 355, 505, 513, 570, 577, 591, 593, 596, 601, 605, 609], "numactl": [159, 580, 594, 602], "call_on": 159, "cmd": [159, 609], "log_fil": 159, "window": [159, 571, 608, 609], "config_inst": 159, "raw_cmd": 159, "multi": [159, 166, 168, 265, 318, 322, 334, 378, 552, 572, 573, 584, 588, 610, 613, 616, 623], "trigger": [159, 171, 294, 550], "raw": [159, 195, 199, 202, 239, 243, 246, 304, 343, 582, 587, 623], "summary_benchmark": 159, "summari": [159, 355, 570, 603, 606, 612, 621], "benchmark_with_raw_cmd": 159, "commend": 159, "fit_with_raw_cmd": 159, "cores_per_inst": [159, 178, 179, 571, 588, 615], "num_of_inst": [159, 178, 179, 571, 588, 615], "7": [159, 178, 179, 333, 571, 580, 581, 585, 588, 613, 616, 618, 620, 623, 626], "test": [159, 169, 178, 179, 211, 253, 550, 554, 570, 585, 626], "fit": [159, 170, 178, 179, 301, 323, 334, 338, 353, 355, 551, 554, 571, 572, 573, 577, 582, 583, 587, 588, 589, 590, 613, 616, 617], "pb": [159, 178, 179, 323, 331, 334, 457, 460, 471, 554, 571, 577, 582, 588, 590, 621, 626], "eval_dataload": [159, 178, 179, 182, 183, 226, 227, 298, 301, 302, 304, 305, 306, 307, 323, 334, 335, 338, 339, 340, 341, 343, 344, 345, 346, 355, 554, 571, 582, 583, 588, 616, 623], "compon": [160, 254, 261, 298, 314, 501, 536, 551, 577, 585, 586, 591, 608, 611, 612], "quantizationawaretrainingcallback": 160, "pruningcallback": 160, "distillationcallback": 160, "basecallback": 160, "design": [160, 193, 216, 221, 237, 322, 339, 552, 554, 588, 596, 599, 613, 616, 624], "mainli": [160, 173, 221, 296, 588, 613, 616], "prune": [160, 164, 165, 166, 169, 170, 171, 172, 173, 174, 178, 179, 221, 222, 261, 278, 279, 281, 282, 283, 287, 289, 290, 292, 293, 294, 296, 298, 314, 365, 376, 383, 402, 441, 476, 501, 509, 520, 525, 554, 577, 578, 581, 582, 584, 611, 614, 624, 625], "distil": [160, 163, 178, 179, 213, 220, 221, 261, 314, 554, 578, 582, 584, 611, 624, 625], "adaptor": [160, 178, 179, 313, 352, 358, 554, 584, 617, 618, 620, 621, 624], "deriv": [160, 164, 170, 171, 172, 173, 254, 292, 294, 296], "pipelin": [160, 254, 272, 273, 298, 576, 588, 611], "knowledg": [160, 161, 178, 179, 213, 254, 576, 578, 582, 584, 588, 590, 625], "transfer": [160, 201, 245, 254, 573, 575, 576, 588, 620], "teacher": [160, 178, 179, 254, 575, 576, 588, 626], "student": [160, 178, 179, 194, 220, 238, 254, 573, 575, 576, 626], "distillation_conf": [160, 175, 254], "_epoch_ran": [160, 254], "integ": [160, 170, 171, 178, 179, 254, 265, 269, 276, 292, 294, 318, 322, 353, 555, 616, 620, 623], "indic": [160, 178, 179, 187, 192, 194, 231, 236, 238, 254, 265, 276, 318, 551, 570, 580, 621], "how": [160, 164, 170, 171, 178, 179, 211, 253, 254, 292, 550, 551, 553, 555, 570, 572, 573, 575, 576, 577, 583, 588, 602, 603, 606, 607, 608, 613, 616, 620, 622, 623, 624, 625], "much": [160, 164, 178, 179, 211, 253, 254, 575, 602, 620, 622], "epoch": [160, 171, 254, 294, 355, 575, 576, 577, 588, 611, 613, 625], "ran": [160, 254], "eval_frequ": [160, 254], "frequenc": [160, 171, 178, 179, 254, 294, 588, 612, 613, 625], "term": [160, 171, 172, 254, 550, 575, 586, 587, 610, 611, 623], "best_scor": [160, 254], "best": [160, 211, 253, 254, 260, 297, 304, 343, 549, 552, 585, 591, 597, 608, 610, 616, 622, 623], "metric": [160, 178, 179, 182, 183, 215, 226, 227, 254, 260, 261, 276, 284, 289, 297, 298, 314, 323, 334, 355, 358, 393, 417, 441, 501, 509, 517, 520, 523, 552, 555, 570, 572, 573, 577, 588, 589, 616, 619, 621, 623, 624, 625, 626], "best_model": [160, 254], "found": [160, 254, 504, 520, 537, 554, 570, 575, 589, 596, 620, 623, 626], "critet": [161, 213], "includ": [161, 164, 168, 170, 172, 178, 179, 194, 196, 203, 211, 213, 238, 240, 247, 253, 260, 270, 292, 297, 353, 549, 550, 555, 570, 573, 585, 586, 587, 588, 589, 591, 594, 597, 602, 613, 616, 617, 621, 623], "tensorflowknowledgedistillationloss": [161, 213], "pytorchknowledgedistillationloss": [161, 213, 588], "pytorchintermediatelayersknowledgedistillationloss": [161, 213], "tensorflowcriterion": [161, 213], "pytorchcriterion": [161, 213], "criterion_registri": [161, 213], "criterion_typ": [161, 213], "registry_criterion": [161, 213], "knowledgedistillationframework": [161, 213], "student_model": [161, 179, 213, 588], "teacher_model": [161, 178, 179, 213, 575, 576, 588], "knowledgedistillationloss": [161, 213, 588, 625], "temperatur": [161, 178, 179, 213, 588, 625], "loss_typ": [161, 178, 179, 213, 588, 625], "ce": [161, 178, 179, 213, 588, 625], "loss_weight": [161, 178, 179, 213, 588, 625], "pytorchknowledgedistillationlosswrapp": [161, 213], "param_dict": [161, 213, 218], "tensorflowknowledgedistillationlosswrapp": [161, 213], "tensorflowknowledgedistillationlossextern": [161, 213], "intermediatelayersknowledgedistillationloss": [161, 213, 528], "layer_map": [161, 179, 213, 575], "add_origin_loss": [161, 179, 213], "pytorch": [161, 168, 170, 178, 179, 193, 194, 196, 199, 203, 211, 213, 218, 220, 237, 238, 240, 243, 247, 253, 258, 259, 260, 269, 270, 290, 292, 295, 297, 305, 314, 322, 323, 332, 334, 344, 359, 365, 368, 441, 448, 471, 481, 501, 551, 552, 554, 555, 572, 575, 576, 578, 579, 581, 584, 585, 588, 590, 591, 593, 596, 597, 598, 599, 608, 613, 614, 615, 618, 620, 623, 625], "loss": [161, 178, 179, 213, 260, 269, 284, 289, 297, 322, 355, 575, 576, 577, 578, 587, 588, 589, 599, 611, 613, 616, 620, 623, 625], "pytorchintermediatelayersknowledgedistillationlosswrapp": [161, 213], "selfknowledgedistillationloss": [161, 213, 528], "selfknowledg": [161, 213], "pytorchselfknowledgedistillationloss": [161, 213], "pytorchselfknowledgedistillationlosswrapp": [161, 213], "pruner": [163, 261, 278, 279, 280, 281, 282, 284, 289, 290, 292, 295, 314, 531, 588, 613, 625], "model_slim": [163, 165], "auto_slim": [163, 165, 167], "pattern_analyz": [163, 165, 167], "weight_slim": [163, 165, 167], "criteria": [163, 165, 178, 179, 260, 284, 289, 292, 294, 297, 551, 608, 620], "reg": [163, 165, 171], "schedul": [163, 165, 171, 172, 178, 179, 261, 290, 294, 314, 588, 611], "callback": [163, 284, 289, 355, 358, 536, 551, 588, 611, 613, 616], "register_criterion": 164, "registri": [164, 170, 171, 172, 173, 292, 294, 296, 552], "get_criterion": 164, "pruningcriterion": 164, "about": [164, 507, 508, 514, 549, 570, 572, 588, 617, 623, 624, 626], "module_nam": [164, 171, 172, 294, 365, 520], "store": [164, 168, 171, 172, 178, 179, 196, 240, 287, 294, 583], "score": [164, 170, 171, 178, 179, 262, 263, 265, 266, 267, 269, 294, 315, 316, 318, 319, 320, 322, 341, 358, 551, 587, 610, 613, 619, 623], "magnitudecriterion": 164, "magnitud": [164, 178, 179, 261, 269, 280, 314, 322, 584, 613], "criterion_class": 164, "determin": [164, 170, 171, 178, 179, 360, 549, 551, 613, 616, 620], "gradientcriterion": 164, "gradient": [164, 278, 584, 588, 613, 626], "absolut": [164, 178, 179, 269, 322, 587, 588, 612, 613, 616, 623], "snipcriterion": 164, "snip": [164, 178, 179, 294, 584, 613, 626], "product": [164, 584, 589, 591, 592, 608, 612, 614, 616, 619, 623], "singl": [164, 173, 178, 179, 187, 194, 211, 231, 238, 253, 265, 294, 296, 318, 322, 334, 401, 418, 437, 551, 573, 585, 613], "shot": [164, 171, 173, 221, 294, 296, 552, 584, 588, 613, 614], "sensit": [164, 278, 294, 584, 613], "arxiv": [164, 171, 294, 613, 620], "org": [164, 171, 265, 294, 318, 550, 551, 570, 585, 603, 606], "1810": [164, 294], "02340": [164, 294], "snipmomentumcriterion": 164, "snip_momentum": [164, 178, 179, 588, 613], "momentum": [164, 294, 584, 588, 613, 625], "mechan": [164, 613, 619, 624], "preserv": 164, "step": [164, 170, 171, 173, 178, 179, 292, 294, 296, 355, 570, 575, 576, 577, 588, 603, 606, 608, 611, 613, 615, 617, 619, 620, 621, 623], "beta": 164, "snipmomentumblockcriterion": 164, "snip_momentum_block": 164, "retrainfreecriterion": 164, "retrain_fre": [164, 171], "auto": [166, 168, 178, 179, 299, 314, 336, 342, 365, 551, 591, 594, 596, 598, 599, 613, 616], "slim": [166, 167, 168, 265, 318, 329, 331, 590, 613], "round_multipli": 166, "32": [166, 577, 583, 612, 620, 626], "spars": [166, 171, 294, 573, 614], "automat": [166, 168, 169, 178, 179, 196, 199, 206, 207, 240, 243, 250, 260, 270, 297, 551, 554, 570, 571, 573, 584, 588, 589, 591, 593, 596, 597, 599, 601, 602, 603, 605, 606, 608, 611, 613, 616, 620, 622, 623], "model_slim_ffn2": 166, "some": [166, 168, 178, 179, 194, 238, 293, 520, 570, 573, 585, 587, 588, 589, 610, 613, 616, 617, 620, 621, 623], "part": [166, 171, 292, 294, 551, 585, 589, 603, 606, 613, 620, 624], "perman": [166, 549, 613], "obtain": [166, 168, 171, 172, 174, 293, 551, 579, 613, 619, 620, 623], "acceler": [166, 575, 588, 591, 599, 608, 613, 614, 617, 620, 623], "directli": [166, 178, 179, 193, 237, 265, 269, 293, 318, 322, 579, 587, 588, 595, 613, 615, 616, 621], "sprase": 166, "multipl": [166, 178, 179, 180, 181, 185, 186, 194, 195, 197, 198, 199, 200, 201, 205, 208, 211, 218, 224, 225, 229, 230, 232, 238, 239, 241, 242, 243, 244, 245, 249, 251, 253, 270, 323, 324, 325, 327, 333, 571, 573, 579, 588, 611, 613, 619, 620, 623], "model_slim_mha": 166, "parse_auto_slim_config": 166, "ffn2_sparsiti": 166, "mha_spars": 166, "generate_ffn2_pruning_config": 166, "consecut": [166, 168, 169, 613], "generate_mha_pruning_config": 166, "head": [166, 168, 169, 174, 613], "get_attribut": 168, "level": [168, 339, 353, 362, 511, 549, 620, 623], "descent": 168, "print_iter": 168, "recipesearch": 168, "searcher": [168, 277], "search": [168, 171, 175, 182, 183, 226, 227, 260, 262, 272, 275, 276, 277, 297, 301, 315, 338, 407, 408, 554, 570, 582, 584, 587, 591, 592, 602, 614, 621, 623, 624], "root": [168, 194, 195, 196, 199, 238, 239, 240, 243, 269, 322, 537, 572, 573, 577, 587, 588, 625], "levelwis": 168, "wai": [168, 195, 196, 199, 239, 240, 243, 520, 552, 570, 572, 573, 587, 588, 591, 594, 609, 611, 613, 616, 620, 623, 625], "huggingfac": [168, 169, 194, 238, 361, 573, 578, 582, 596, 597, 598, 599, 620], "bert": [168, 179, 190, 193, 194, 211, 234, 237, 238, 253, 554, 573, 575, 587, 596, 613, 622, 626], "recipe_sampl": 168, "bertattent": 168, "dens": [168, 173, 178, 179, 296, 613, 626], "infom": [168, 214, 258], "basic": [168, 170, 178, 179, 210, 252, 261, 272, 292, 303, 307, 310, 314, 342, 346, 349, 355, 584, 585, 588, 615, 619], "searching_result": 168, "jitbasicsearch": 168, "placeholder_shap": 168, "placeholder_dtyp": 168, "jit": [168, 178, 591, 593, 598, 620, 621], "them": [168, 194, 238, 551, 572, 579, 581, 583, 611, 613, 623], "static_graph": 168, "flatten_static_graph": 168, "target_lay": 168, "linear2linearsearch": 168, "target_op_lut": 168, "lookup": 168, "tabl": [168, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 407, 408, 626], "code": [168, 182, 183, 212, 226, 227, 271, 295, 298, 334, 355, 430, 448, 551, 554, 555, 570, 572, 573, 575, 576, 577, 583, 584, 586, 587, 591, 593, 595, 596, 597, 599, 602, 608, 610, 611, 613, 614, 615, 616, 619, 620, 621, 622], "current_pattern": 168, "statu": [168, 516, 532, 549, 572, 610, 613], "selfmhasearch": 168, "classifierheadsearch": 168, "final": [168, 171, 174, 294, 588, 594, 610, 613, 616, 618, 623], "classifi": [168, 174, 194, 238, 269, 322, 573, 575], "squeezer": 169, "postcompressionutil": 169, "librari": [169, 215, 261, 314, 547, 550, 554, 585, 588, 593, 602, 608, 614, 616], "relat": [169, 172, 254, 265, 284, 289, 292, 318, 358, 448, 451, 453, 458, 538, 541, 542, 543, 546, 591, 613, 625], "linearcompress": 169, "root_linear": 169, "target_linear": 169, "also": [169, 193, 196, 211, 237, 240, 253, 262, 315, 322, 333, 334, 550, 552, 554, 555, 570, 572, 578, 582, 584, 587, 588, 591, 596, 601, 602, 605, 608, 609, 610, 613, 614, 616, 617, 620, 623], "while": [169, 171, 174, 294, 301, 338, 555, 570, 573, 578, 584, 589, 591, 596, 608, 615, 616, 620], "hidden": [169, 170, 292, 520, 555], "structur": [169, 171, 178, 179, 294, 312, 351, 445, 584, 607, 609, 613, 616, 621, 624, 626], "layer_1": 169, "act_fn": 169, "layer_2": 169, "linearcompressioniter": 169, "linear_pattern": 169, "mhacompress": 169, "mha": 169, "head_num": 169, "head_siz": 169, "progress": [169, 196, 240, 602, 608, 613, 616], "register_pattern": [170, 292], "sure": [170, 171, 173, 292, 294, 296, 570, 571], "get_pattern": [170, 292], "assertionerror": [170, 171, 174, 292, 293, 294, 323], "basepattern": [170, 172], "unit": [170, 292, 520, 550, 613], "e": [170, 178, 179, 537, 549, 575, 578, 582, 591, 596, 597, 601, 605, 613, 620, 623], "4x1": [170, 178, 179, 288, 588, 613, 626], "is_glob": [170, 292], "local": [170, 178, 179, 292, 365, 380, 412, 417, 430, 450, 570, 601, 605, 613, 619], "contrast": [170, 292, 622], "keep_mask_lay": 170, "invalid_lay": 170, "max_sparsity_ratio_per_op": [170, 171, 175, 178, 179, 588, 613], "sparsiti": [170, 171, 173, 174, 178, 179, 294, 296, 365, 554, 573, 584, 588, 624, 626], "reach": [170, 173, 178, 179, 296, 550, 554, 572, 613, 623], "min_sparsity_ratio_per_op": [170, 175, 178, 179, 588, 613], "minimum": [170, 178, 179, 588, 599, 613, 623], "target_spars": [170, 175, 178, 179, 588, 613, 615, 625], "patternnxm": [170, 292], "nxm": [170, 171, 178, 179, 288, 292, 613], "kept": [170, 292], "block_siz": [170, 292], "height": [170, 207, 211, 250, 253, 292, 577, 622, 625], "width": [170, 207, 211, 250, 253, 292, 577, 613, 616, 622, 625], "vertic": [170, 211, 253, 292, 622], "becaus": [170, 211, 253, 292, 551, 616, 620, 622, 623], "patternninm": [170, 292], "n": [170, 178, 179, 195, 211, 239, 253, 263, 292, 316, 353, 508, 573, 575, 613, 616, 620, 622], "out": [170, 178, 179, 194, 195, 196, 238, 239, 240, 260, 292, 297, 550, 551, 554, 573, 591, 596, 601, 602, 603, 605, 606, 608, 613, 615, 616], "continu": [170, 265, 292, 318, 552, 588, 609, 613], "doc": [170, 178, 179, 292, 310, 311, 322, 334, 349, 350, 353, 365, 587, 588, 603, 606], "md": [170, 178, 179, 292, 322, 334, 577, 616], "element": [170, 174, 192, 236, 265, 292, 318, 365, 573, 584, 587, 613, 620], "register_prun": [171, 294], "parse_valid_pruner_typ": 171, "get_prun": [171, 294], "cuurent": [171, 294], "baseprun": 171, "current_sparsity_ratio": [171, 294], "global_step": [171, 294], "total": [171, 211, 253, 269, 294, 322, 573, 613, 622], "start_step": [171, 175, 178, 179, 294, 588, 613, 615], "end_step": [171, 175, 178, 179, 294, 588, 613, 615], "pruning_frequ": [171, 175, 178, 179, 588, 613], "target_sparsity_ratio": [171, 294], "show": [171, 365, 549, 570, 575, 577, 588, 594, 609, 620, 623, 624], "basicprun": 171, "arrang": [171, 195, 196, 199, 239, 240, 243, 573, 613], "proce": 171, "regul": 171, "patternlockprun": [171, 282, 294], "parent": [171, 173, 288, 294, 296, 621], "blockmaskprun": 171, "grad": 171, "retrainfreeprun": 171, "pruner_class": 171, "rearrang": 171, "fast": [171, 178, 179, 554, 614], "retrain": [171, 576, 613], "effect": [171, 554, 555, 614], "2204": 171, "09656": 171, "progressiveprun": 171, "interpol": [171, 211, 253, 587, 613, 622], "fine": [171, 194, 238, 573, 594, 613, 614, 616], "grain": [171, 613, 614, 623], "improv": [171, 550, 554, 588, 591, 608, 609, 613, 614, 616, 617, 623, 626], "interv": [171, 613], "regular": [172, 262, 293, 315], "register_reg": 172, "regulariz": 172, "get_reg_typ": 172, "get_reg": 172, "basereg": 172, "grouplasso": 172, "coeff": 172, "group": [172, 279, 437, 584, 613, 621, 622, 623, 626], "lasso": [172, 279, 584, 613], "select": [172, 179, 194, 238, 551, 552, 570, 584, 585, 608, 613, 616, 621, 623], "reg_term": 172, "coeffient": 172, "register_schedul": [173, 296], "get_schedul": [173, 296], "pruningschedul": 173, "gradual": [173, 296, 613], "oneshotschedul": [173, 296], "iterativeschedul": [173, 296], "get_sparsity_ratio": 174, "elementwise_over_matmul_gemm_conv": 174, "elementwise_over_al": 174, "blockwise_over_matmul_gemm_conv": 174, "check_config": [174, 293], "prune_config": [174, 293], "everyth": [174, 293, 596], "reset_none_to_default": 174, "undefin": [174, 293], "update_param": 174, "process_weight_config": 174, "global_config": [174, 278, 279, 281, 282, 283], "local_config": [174, 178, 179, 278, 279, 281, 282, 283], "default_config": 174, "pruners_info": 174, "process_yaml_config": 174, "check_key_valid": 174, "template_config": 174, "user_config": 174, "process_and_check_config": [174, 293], "process_config": [174, 293], "parse_last_linear": 174, "often": [174, 572, 575, 611, 613], "act": [174, 192, 236, 549], "might": [174, 551, 570, 623], "caus": [174, 592, 613], "drop": [174, 265, 293, 318, 588, 589, 602, 613, 626], "parse_to_prun": [174, 293], "keep": [174, 293, 339, 551, 555, 607, 608, 618], "generate_pruner_config": 174, "dotdict": [174, 175, 179, 333, 365], "prunerv2": 175, "pruning_typ": [175, 178, 179, 588, 613], "pruning_scop": [175, 178, 179, 588, 613], "sparsity_decay_typ": [175, 178, 179, 588, 613], "pruning_op_typ": [175, 178, 179, 588, 613], "reg_typ": 175, "criterion_reduce_typ": 175, "resume_from_pruned_checkpoint": 175, "similiar": 175, "cfg_fname": 175, "parser": [175, 314, 378, 383, 501, 509, 539], "quantization_conf": 175, "pruning_conf": 175, "graph_optimization_conf": [175, 260], "mixedprecision_conf": 175, "benchmark_conf": 175, "nasconfig": [175, 179, 273, 275, 552], "approach": [175, 178, 179, 272, 273, 275, 528, 551, 552, 554, 572, 573, 575, 584, 588, 596, 608, 614, 615, 623, 625], "search_spac": [175, 179, 272, 275, 276, 277], "search_algorithm": [175, 179, 261, 274, 314, 552], "na": [175, 179, 261, 314, 327, 584], "procedur": [175, 552, 613], "deep_get": [176, 333], "dot": [176, 520, 589, 616], "nest": 176, "eg": [176, 196, 240, 573, 615], "person": [176, 549, 614], "john": 176, "deep": [176, 554, 555, 572, 584, 585, 588, 589, 591, 593, 596, 597, 599, 602, 608, 614, 616, 623, 624, 626], "deep_set": [176, 333], "sex": [176, 549], "male": 176, "instead": [176, 179, 193, 237, 365, 594, 596, 599, 613], "notat": [176, 179, 365], "pythonic_config": 177, "random_se": [178, 179, 301, 338, 588, 625], "1978": [178, 179], "workspac": [178, 179, 364, 365, 446, 519, 530, 590], "default_workspac": [178, 179], "resume_from": [178, 179, 365], "tensorboard": [178, 179, 358, 365, 555, 588], "set_random_se": [178, 179, 365], "set_workspac": [178, 179, 365], "set_resume_from": [178, 179, 365], "set_tensorboard": [178, 179, 365], "directori": [178, 179, 195, 196, 239, 240, 331, 361, 364, 365, 429, 520, 573, 577, 580, 601, 603, 605, 606, 621], "histori": [178, 179, 364, 365, 405, 418, 471, 489, 539, 608, 623], "nc_workspac": [178, 179], "datetim": [178, 179], "now": [178, 179, 211, 253, 551, 552, 573, 577, 599, 615, 622, 623], "strftime": [178, 179], "d_": [178, 179], "h": [178, 179, 211, 253, 577, 622], "resum": [178, 179, 182, 183, 226, 227, 302, 305, 306, 307, 335, 338, 339, 340, 341, 343, 344, 345, 346], "wa": [178, 179, 555, 570, 588, 614, 623], "flag": [178, 179, 263, 316], "visual": [178, 179, 554, 599, 608, 619, 621, 623, 624], "displai": [178, 179, 310, 311, 349, 350, 365, 436, 608], "workspace_path": [178, 179, 505, 520], "accuracycriterion": [178, 179, 488, 588, 623], "higher_is_bett": [178, 179, 322, 334, 587, 623, 625], "rel": [178, 179, 333, 588, 615, 623, 625, 626], "tolerable_loss": [178, 179, 588, 623], "01": [178, 179, 588, 612, 615, 623, 625, 626], "higher": [178, 179, 182, 183, 226, 227, 276, 323, 334, 355, 551, 575, 579, 587, 613, 616, 619], "accuracy_criterion": [178, 179, 333, 588, 610, 615, 623, 625], "warmup": [178, 179, 571, 588, 615], "inter_num_of_thread": [178, 179, 588, 615], "intra_num_of_thread": [178, 179, 588, 615], "benchmark": [178, 179, 214, 261, 298, 314, 333, 365, 386, 393, 406, 417, 418, 441, 501, 502, 512, 518, 535, 540, 554, 560, 590, 591, 595, 599, 602, 608, 623, 624, 625, 626], "empti": [178, 179, 594], "onnxrt_trt_ep": [178, 179, 616], "onnxrt_cuda_ep": [178, 179, 589, 616], "inter": [178, 179, 192, 196, 236, 240], "intra": [178, 179], "quantizationconfig": 178, "post_training_static_qu": [178, 572, 573, 588, 615, 623], "calibration_sampling_s": [178, 179, 588], "op_type_dict": [178, 179, 615, 616, 623], "op_name_dict": [178, 179, 588, 616, 623], "strategy_kwarg": [178, 179, 619, 623], "timeout": [178, 179, 588, 615, 623, 625], "max_trial": [178, 179, 588, 623], "quant_level": [178, 179, 623], "use_distributed_tun": [178, 179, 623], "posttrainingquantconfig": [178, 179, 334, 551, 554, 572, 582, 588, 590, 616, 617, 619, 620, 623], "quantizationawaretrainingconfig": [178, 179, 355, 551, 576, 588, 616, 617, 623], "requir": [178, 179, 185, 298, 331, 367, 369, 381, 436, 442, 467, 474, 475, 476, 477, 479, 480, 481, 483, 486, 487, 492, 497, 501, 551, 555, 570, 571, 572, 576, 577, 581, 588, 589, 590, 592, 602, 608, 612, 613, 616, 618, 619, 620, 621, 623, 625], "cv": [178, 179, 613], "object_detect": [178, 179, 265, 318], "nlp": [178, 179, 295, 596, 613, 616], "recommendation_system": [178, 179], "explicitli": [178, 179, 583, 613], "overrid": [178, 179, 365], "quantiztaion": [178, 179], "smooth_quant_arg": [178, 179, 616, 620], "gemm_to_matmul": [178, 179, 616], "graph_optimization_level": [178, 179, 615, 616], "disable_al": [178, 179, 615], "enable_bas": [178, 179], "enable_extend": [178, 179], "enable_al": [178, 179], "first_conv_or_matmul_quant": [178, 179, 616], "last_conv_or_matmul_quant": [178, 179, 616], "pre_post_process_quant": [178, 179, 616], "preprocess": [178, 179, 194, 211, 238, 253, 358, 577, 622], "postprocess": [178, 179, 205, 208, 211, 215, 253, 261, 314, 322, 334, 358, 523, 555, 588, 621, 622], "vaild": [178, 179], "dedic": [178, 179], "quant_format": [178, 179, 258, 579], "constraint": [178, 179, 260, 297, 588, 613, 619, 623, 625], "reduc": [178, 179, 555, 576, 588, 589, 608, 609, 613, 614, 616, 617, 620, 623, 625], "layer1": [178, 179, 588, 613, 616], "conv1": [178, 179, 616, 625], "tuning_strategi": [178, 179], "guarante": [178, 179, 588], "models": [178, 179, 333, 588, 610, 615], "footprint": [178, 179, 260, 284, 289, 297, 333, 576, 588, 610, 613, 615], "earli": [178, 179, 588, 616, 623, 625], "stop": [178, 179, 588, 623, 624, 625], "field": [178, 179, 196, 240, 265, 318, 551, 555, 570, 577, 588, 619, 623, 625], "exit": [178, 179, 300, 335, 337, 570, 588, 589, 625], "bit": [178, 179, 576, 589, 614, 616, 620], "excluded_precis": [178, 179, 617], "exclud": [178, 179, 555, 589, 617], "conserv": [178, 179, 314, 342], "weightpruningconfig": [178, 179, 223, 588, 611, 613], "pruning_config": [178, 179, 588], "9": [178, 179, 551, 585, 588, 613, 615, 620, 623, 625], "98": [178, 179, 588, 613, 615, 626], "exp": [178, 179, 588, 613], "link": [178, 179, 194, 238, 322, 334, 570, 573, 601, 605, 608, 626], "90": [178, 179, 625, 626], "magnitude_progress": [178, 179], "snip_progress": [178, 179], "snip_momentum_progress": [178, 179], "pattern_lock": [178, 179, 261, 280, 314], "most": [178, 179, 269, 322, 570, 588, 589, 613, 616, 620, 623], "feasibl": [178, 179], "situat": [178, 179, 577, 613], "unstructur": [178, 179, 288, 584, 613, 626], "8x1": [178, 179], "channelx1": [178, 179, 613], "1xchannel": [178, 179, 613], "itrex": [178, 179], "start": [178, 179, 211, 253, 265, 318, 339, 585, 622, 623, 624, 627], "togeth": [178, 179, 211, 253, 575, 585, 595, 614, 621, 622], "sort": [178, 179, 304, 343, 429, 623], "sinc": [178, 179, 260, 262, 284, 289, 297, 315, 575, 579, 585, 587, 602, 608, 611], "lead": [178, 179, 520, 575, 588, 589, 613, 620], "increas": [178, 179, 574, 584, 591, 608, 623], "cube": [178, 179, 613], "6": [178, 179, 554, 570, 581, 616, 620, 623, 626], "update_config": [178, 179], "10": [178, 179, 196, 240, 301, 338, 554, 570, 571, 573, 585, 588, 613, 615, 622, 623, 626], "knowledgedistillationlossconfig": [178, 179, 575, 576, 588, 611], "hyperparamet": [178, 179, 310, 619, 620, 623], "entropi": [178, 179, 623], "length": [178, 179, 194, 211, 238, 253, 265, 318, 554, 573, 587, 614, 616, 622], "groundtruth": [178, 179, 265, 318], "label": [178, 179, 182, 183, 194, 196, 197, 198, 199, 202, 207, 211, 216, 226, 227, 238, 240, 241, 242, 243, 246, 250, 253, 262, 264, 269, 315, 317, 322, 323, 334, 355, 437, 551, 572, 573, 587, 588, 616, 622], "tpye": [178, 179], "sum": [178, 179, 269, 322, 575], "distillationconfig": [178, 179, 355, 575, 576, 588, 611], "prepare_compress": [178, 179, 355, 551, 575, 576, 588, 611, 613, 616], "criterion_conf": [178, 179], "d_conf": [178, 179, 576, 588, 611], "compression_manag": [178, 179, 355, 551, 575, 576, 588, 611, 613, 616], "sgd": [178, 179, 218, 575, 588, 615, 625], "learning_r": [178, 179, 588, 615, 625], "callabl": [178, 179, 267, 320, 355, 516, 520, 536, 537], "featur": [178, 179, 194, 195, 207, 211, 238, 239, 250, 253, 550, 554, 571, 572, 574, 575, 588, 589, 590, 591, 595, 596, 599, 608, 613, 614, 618, 622], "altern": [178, 179, 334], "distil_loss": [178, 179, 588], "crossentropyloss": [178, 179, 213, 575, 588], "lr": [178, 179, 575, 577, 588], "tuningcriterion": [179, 588, 610, 619, 623], "tuning_criterion": [179, 588, 610, 619, 623], "dynam": [179, 184, 228, 258, 311, 350, 373, 555, 572, 575, 584, 588, 591, 596, 597, 598, 599, 602, 608, 614, 623, 626], "ptq": [179, 334, 551, 577, 584, 588, 616, 620, 621, 623], "tri": [179, 623], "meet": [179, 185, 298, 300, 335, 337, 551, 579, 610, 614, 615, 616, 621, 623], "bayesian": [179, 261, 277, 303, 314, 342, 552, 615], "mse_v2": [179, 261, 303, 314, 342], "hawq_v2": [179, 314, 342], "exhaust": [179, 261, 277, 303, 314, 342, 615], "docstr": [179, 353], "copi": [179, 293, 365], "deepcopi": 179, "model_origin": [179, 334, 617], "qat_op_name_dict": 179, "intermediatelayersknowledgedistillationlossconfig": [179, 575], "relationship": 179, "student_layer_nam": 179, "student_layer_output_process": 179, "teacher_layer_nam": 179, "teacher_layer_output_process": 179, "desir": [179, 207, 211, 250, 253, 622], "either": [179, 265, 318, 592, 596, 611, 615, 616], "serv": [179, 331, 537], "numer": [179, 269, 322, 589, 614, 616], "abbrevi": 179, "layer_nam": 179, "l1": 179, "selfknowledgedistillationlossconfig": [179, 575, 588], "student1_layer_name1": 179, "teacher_layer_name1": 179, "student2_layer_name1": 179, "student1_layer_name2": 179, "teacher_layer_name2": 179, "student2_layer_name2": 179, "soft": 179, "l2": [179, 613], "hard": [179, 572], "resblock": 179, "deepst": 179, "fc": 179, "02": [179, 620, 626], "mixedprecisionconfig": [179, 323, 353, 588, 589], "mixedprecis": [179, 270, 478, 526, 588], "fp16": [179, 311, 350, 589, 616], "won": [179, 616], "work": [179, 260, 297, 553, 572, 575, 603, 606, 613, 617, 618, 620, 621], "mix_precis": [179, 314, 353, 588, 589], "converted_model": [179, 323, 588, 589], "exportconfig": 179, "dynamic_ax": [179, 258, 579], "qlinear": [179, 196, 203, 240, 247, 269, 322, 555, 579, 598, 626], "ax": [179, 258], "onnxqlinear2qdqconfig": 179, "onnxqlinear2qdq": 179, "torch2onnxconfig": [179, 579], "qdq_op_fp32_bia": [179, 258, 579], "torch2onnx": [179, 255, 261, 314], "qdq_op_int32_bia": [179, 258, 579], "qdq_op_fp32_bias_qdq": [179, 258, 579], "resnet50": [179, 554, 577, 582, 591, 595, 613, 616, 619, 626], "int8_onnx_config": [179, 579], "randn": [179, 579], "224": [179, 207, 250, 554, 572, 573, 577, 579, 582, 588, 591, 622, 625, 626], "batch_siz": [179, 184, 186, 190, 192, 193, 194, 195, 214, 228, 230, 234, 236, 237, 238, 239, 258, 552, 572, 573, 577, 579, 583, 588, 591, 616], "tf2onnxconfig": 179, "tf2onnx": [179, 255, 261, 314], "keyword": 179, "argument": [179, 353, 367, 475, 479, 484, 487, 493, 552], "output_graph": [179, 475, 479, 484, 487], "42": [179, 277, 612, 626], "dyna": [179, 261, 274, 314, 552, 584, 615], "sigopt": [180, 181, 224, 225, 261, 314, 614], "tpe": [180, 181, 224, 225, 261, 314], "sigopttunestrategi": [182, 226], "q_dataload": [182, 183, 226, 227, 301, 302, 304, 305, 306, 307, 335, 338, 339, 340, 341, 343, 344, 345, 346, 583, 623], "eval_func": [182, 183, 226, 227, 298, 301, 302, 304, 305, 306, 307, 323, 334, 335, 338, 339, 340, 341, 343, 344, 345, 346, 353, 355, 551, 572, 573, 575, 576, 577, 588, 616, 617, 623, 625], "eval_metr": [182, 183, 323, 334, 335, 338, 339, 340, 341, 343, 344, 345, 346, 355, 616], "q_hook": [182, 183, 226, 227, 301, 302, 304, 305, 306, 307, 335, 338, 339, 340, 341, 343, 344, 345, 346], "hpo": [182, 226], "mandatori": [182, 183, 226, 227, 334, 588, 625], "yield": [182, 183, 192, 214, 226, 227, 236, 301, 323, 334, 338, 353, 355, 572, 616, 623], "_": [182, 183, 226, 227, 334, 551, 552, 555, 570, 575, 577, 581, 587, 588, 589, 590, 591, 597, 601, 603, 605, 606, 610, 613, 616, 618, 619, 620, 621, 623, 625], "taken": [182, 183, 226, 227, 323, 334, 355, 616], "reserv": [182, 183, 226, 227], "abl": [182, 183, 226, 227, 323, 334, 355, 599, 608, 616], "tuner": [182, 183, 226, 227, 260, 297, 323, 334, 355, 616], "scalar": [182, 183, 226, 227, 323, 334, 355, 587, 616], "pseudo": [182, 183, 226, 227, 334, 355, 621], "someth": [182, 183, 196, 226, 227, 240, 334, 355], "fefin": [183, 227], "tpetunestrategi": [183, 227], "basedatalod": [184, 228], "basedataload": [184, 189, 191, 228, 233, 235], "last_batch": [184, 186, 190, 193, 214, 228, 230, 234, 237], "rollov": [184, 186, 190, 193, 214, 228, 230, 234, 237], "collate_fn": [184, 186, 187, 190, 214, 228, 230, 231, 234, 573], "sampler": [184, 186, 188, 190, 214, 228, 230, 232, 234, 249, 261, 310, 349, 577], "batch_sampl": [184, 186, 190, 214, 228, 230, 234], "num_work": [184, 186, 190, 214, 228, 230, 234, 588, 616], "pin_memori": [184, 186, 190, 214, 228, 230, 234], "shuffl": [184, 186, 190, 214, 228, 230, 234, 588, 616], "_generate_dataload": [184, 228], "check_dataload": 185, "default_col": [186, 230], "outer": [186, 230], "defaultdataload": [186, 193, 230, 237], "definit": [187, 192, 231, 236, 434, 447, 456, 505, 536], "style": [187, 201, 231, 245, 353, 550, 573, 583], "drop_last": [187, 192, 231, 236], "iterablefetch": [187, 231], "indexfetch": [187, 231], "base_dataload": [188, 232, 249, 261], "default_dataload": [188, 232, 249, 261], "fetcher": [188, 232, 249, 261], "mxnet_dataload": [188, 232, 249, 261], "onnxrt_dataload": [188, 232, 249, 261], "pytorch_dataload": [188, 232, 249, 261], "tensorflow_dataload": [188, 232, 249, 261], "mxnetdataload": [189, 233], "onnxrtbertdataload": [190, 234], "varient": [190, 234], "onnxrtdataload": [190, 234], "pytorchdataload": [191, 235], "data_sourc": [192, 236, 358], "__iter__": [192, 196, 236, 240, 572, 573, 588], "matter": [192, 236, 617], "iterablesampl": [192, 236], "squential": [192, 236], "your": [192, 194, 236, 238, 550, 570, 573, 577, 579, 585, 586, 588, 591, 594, 595, 596, 601, 602, 603, 605, 606, 608, 613, 619, 621, 623], "clear": [192, 236, 555, 581, 587, 588], "iterabledataset": [192, 196, 236, 240], "try": [192, 236, 551, 579, 613, 616, 620, 623], "indexdataset": [192, 236], "__getitem__": [192, 196, 211, 236, 240, 253, 573, 588], "__len__": [192, 196, 236, 240, 573], "retriev": [192, 236, 514], "sequentialsampl": [192, 236], "sequenti": [192, 236, 298, 300, 335, 337, 623], "batchsampl": [192, 236], "tfdatadataload": [193, 237], "tensorflow1": [193, 237], "coupl": [193, 237], "satisfi": [193, 237, 585], "usag": [193, 237, 265, 271, 298, 318, 353, 520, 570, 573, 577, 578, 587, 591, 599, 610, 615, 622], "tf1": [193, 237, 590], "although": [193, 237, 619], "tensorflowbertdataload": [193, 237], "tensorflowmodelzoobertdataload": [193, 237], "zoo": [193, 211, 237, 253, 554, 578, 582, 626], "tensorflowdataload": [193, 237], "pytorchbertdataset": [194, 238], "model_typ": [194, 238, 450, 573], "construct": [194, 197, 198, 201, 209, 214, 216, 217, 219, 238, 241, 242, 245, 322, 327, 331, 358, 549, 573, 577, 613, 623], "tensordataset": [194, 238, 573], "repo": [194, 238, 548, 573, 578, 601, 603, 605, 606, 627], "easi": [194, 238, 297, 570, 572, 579, 588, 614, 616, 619], "load": [194, 210, 211, 238, 252, 253, 323, 331, 334, 364, 365, 493, 520, 572, 601, 605, 609, 615, 616, 620], "squad": [194, 211, 238, 253, 266, 267, 269, 319, 320, 322, 573, 587, 613, 622, 626], "distilbert": [194, 238, 554, 573, 614, 626], "xlnet": [194, 238, 573], "xlm": [194, 238, 573, 626], "101": [194, 238, 269, 322, 587, 620, 626], "2043": [194, 238], "2001": [194, 238], "onnxrtbertdataset": [194, 238], "data_dir": [194, 238, 573], "model_name_or_path": [194, 238, 573, 588, 596, 597], "max_seq_length": [194, 211, 238, 253, 573, 622], "do_lower_cas": [194, 210, 211, 238, 252, 253, 573, 622], "mrpc": [194, 238, 269, 322, 573, 587, 596, 613, 623, 626], "dynamic_length": [194, 238, 573], "shortcut": [194, 238, 573], "token": [194, 205, 208, 211, 238, 249, 251, 253, 261, 262, 263, 314, 315, 316, 361, 537, 570, 573, 587, 588, 619, 620, 622, 623], "longer": [194, 211, 238, 253, 573, 622], "truncat": [194, 211, 238, 253, 573, 622], "shorter": [194, 211, 238, 253, 573, 622], "lowercas": [194, 238, 573], "choic": [194, 238, 555, 570, 573, 587, 620], "qqp": [194, 238, 573, 587, 626], "qnli": [194, 238, 573, 587, 626], "rte": [194, 238, 573, 587, 626], "st": [194, 238, 573, 587], "cola": [194, 238, 573, 587, 626], "mnli": [194, 238, 573, 587, 626], "wnli": [194, 238, 573, 587, 626], "mobilebert": [194, 238, 573, 575, 626], "roberta": [194, 238, 573, 626], "uncas": [194, 211, 238, 253, 573, 622, 626], "load_and_cache_exampl": [194, 238], "cach": [194, 238, 450, 537, 580, 616], "convert_examples_to_featur": [194, 211, 238, 253], "max_length": [194, 238], "label_list": [194, 238, 269, 322], "output_mod": [194, 238], "classif": [194, 211, 238, 253, 269, 295, 322, 575, 579, 582, 587, 597, 613, 614], "pad_token": [194, 238], "pad_token_segment_id": [194, 238], "mask_padding_with_zero": [194, 238], "inputfeatur": [194, 211, 238, 253], "properti": [194, 238, 437, 586, 612], "input_id": [194, 211, 238, 253, 588], "vocabulari": [194, 210, 211, 238, 252, 253, 622], "attention_mask": [194, 238, 588], "usual": [194, 238, 575, 611, 613, 616, 620], "NOT": [194, 238, 581, 585], "token_type_id": [194, 238, 588], "segment": [194, 238, 263, 265, 316, 318], "portion": [194, 238], "problem": [194, 238, 269, 322, 587, 589, 609], "regress": [194, 238], "seq_length": [194, 238], "tensorflowbertdataset": [194, 238], "label_fil": [194, 211, 238, 253, 573, 622], "tfrecord": [194, 195, 196, 238, 239, 240, 573], "guid": [194, 238, 551, 554, 573, 575, 585, 591, 599, 608, 627], "parsedecodebert": [194, 238], "tensorflowmodelzoobertdataset": [194, 195, 238, 239], "num_cor": [194, 195, 199, 238, 239, 243, 573], "28": [194, 195, 199, 238, 239, 243, 573, 626], "coco": [195, 202, 206, 239, 246, 265, 269, 318, 322, 587, 613], "parsedecodecoco": [195, 239], "cocorecorddataset": [195, 239], "interleav": [195, 239, 573], "parallel": [195, 239, 573, 588, 623], "cocoraw": [195, 239, 572, 573], "img_dir": [195, 239, 573], "val2017": [195, 239, 573], "anno_dir": [195, 239, 573], "annot": [195, 239, 265, 318, 353, 573, 587, 613], "instances_val2017": [195, 239, 573], "jpg": [195, 199, 201, 239, 243, 245, 573], "imag": [195, 196, 199, 201, 207, 211, 239, 240, 243, 245, 250, 253, 265, 318, 570, 573, 577, 579, 613, 615, 620, 621, 622, 626], "coconpi": [195, 239, 573], "npy_dir": [195, 239, 573], "npy": [195, 239, 573], "tensorflowdataset": [196, 240], "pytorchdataset": [196, 240], "mxnetdataset": [196, 240], "onnxrtqldataset": [196, 240], "onnxrtitdataset": [196, 240], "IT": [196, 203, 240, 247, 614], "pytorchmxnetwrapdataset": [196, 240], "datafunc": [196, 240], "pytorchmxnetwrapfunct": [196, 211, 240, 253], "framework_dataset": [196, 240], "convent": [196, 240, 265, 318, 575], "imageclassifi": [196, 240], "choos": [196, 240, 570, 584, 585, 596, 618, 620, 623, 625], "tensorflow_itex": [196, 199, 201, 203, 240, 243, 245, 247, 615], "onnxrt_qdq": [196, 203, 240, 247, 615], "onnxrt_qlinearop": [196, 203, 211, 240, 247, 253, 615], "onnxrt_integerop": [196, 203, 211, 240, 247, 253, 615], "pytorch_ipex": [196, 203, 240, 247, 588, 615, 625], "pytorch_fx": [196, 203, 240, 247, 588, 615], "dataset_registri": [196, 240], "dataset_typ": [196, 240], "dataset_format": [196, 240], "data_format": [196, 207, 240, 250], "raw_imag": [196, 240], "overwrit": [196, 240, 601, 605], "download_url": [196, 240], "filenam": [196, 240, 365, 489, 513, 520, 573], "md5": [196, 240], "download": [196, 240, 441, 464, 465, 467, 468, 501, 570, 573, 585, 618], "address": [196, 240, 537, 549, 570, 589, 614], "gen_bar_updat": [196, 240], "bar": [196, 240, 554, 570, 608, 614], "check_integr": [196, 240], "fpath": [196, 240], "checksum": [196, 240], "calculate_md5": [196, 240], "chunk_siz": [196, 240], "cifar10": [196, 240, 573], "cifar100": [196, 240, 573], "otherwis": [196, 211, 240, 253, 365, 549, 573, 603, 606, 615, 622], "www": [196, 240, 573, 626], "toronto": [196, 240, 573], "kriz": [196, 240, 573], "cifar": [196, 240, 573, 626], "tar": [196, 240, 573, 603, 606], "gz": [196, 240, 573, 603, 606], "manual": [196, 240, 573, 591, 597, 599, 602], "subset": [196, 199, 240, 243, 573], "internet": [196, 240, 570, 573], "put": [196, 240, 573, 575], "again": [196, 240, 573, 617], "pytorchcifar10": [196, 240], "mxnetcifar10": [196, 240], "tensorflowcifar10": [196, 240], "pytorchcifar100": [196, 240], "mxnetcifar100": [196, 240], "tensorflowcifar100": [196, 240], "mnist": [196, 240, 573, 577], "modifi": [196, 223, 240, 499, 551, 570, 577, 581, 613, 625], "nation": [196, 240, 549], "institut": [196, 240], "standard": [196, 211, 240, 253, 579, 587, 622, 623], "technologi": [196, 240, 588, 612], "fashionmnist": [196, 240, 573], "npz": [196, 240, 573], "idx1": [196, 240, 573], "ubyt": [196, 240, 573], "idx3": [196, 240, 573], "t10k": [196, 240, 573], "pytorchmnist": [196, 240], "mxnetmnist": [196, 240], "tensorflowmnist": [196, 240], "pytorchfashionmnist": [196, 240], "mxnetfashionmnist": [196, 240], "tensorflowfashionmnist": [196, 240], "imagefold": [196, 240, 573, 577, 588], "expect": [196, 240, 368, 490, 549, 550, 580, 608, 616, 623], "subfold": [196, 240], "belong": [196, 240, 258, 327, 616], "class_1": [196, 240, 573], "xxx": [196, 240, 550, 573, 588], "png": [196, 240, 573], "xxy": [196, 240, 573], "xxz": [196, 240, 573], "class_n": [196, 240, 573], "123": [196, 240, 573, 622], "nsdf3": [196, 240, 573], "asd932_": [196, 240, 573], "categori": [196, 240, 264, 317, 571, 573, 598], "mxnetimagefold": [196, 240], "tensorflowtfrecorddataset": [196, 240], "tensorflowimagerecord": [196, 240], "imagenet": [196, 199, 207, 240, 243, 250, 552, 570, 588, 597, 613, 621, 622, 625, 626], "000": [196, 240, 554, 573], "001": [196, 240, 573, 577, 620, 625], "099": [196, 240, 573], "tensorflowvocrecord": [196, 240], "pascal": [196, 240], "voc": [196, 240, 269, 322], "2012": [196, 240], "00000": [196, 240], "00004": [196, 240], "00001": [196, 240], "00003": [196, 240], "dummydataset": [197, 198, 241, 242], "127": [197, 198, 241, 242, 573, 616, 620], "float32": [197, 198, 211, 241, 242, 253, 265, 318, 555, 571, 573, 588, 616, 620, 622], "rang": [197, 198, 211, 241, 242, 253, 353, 355, 554, 555, 573, 575, 576, 577, 588, 611, 613, 616, 620, 622], "stand_norm": [197, 198, 241, 242, 573], "dummy_v2": [198, 242, 572, 573], "sparse_dummy_v2": [198, 242, 573], "label_shap": [198, 242, 573], "sparsedummydataset": [198, 242], "dense_shap": [198, 242, 573], "sparse_ratio": [198, 242, 573], "imagenetraw": [199, 243, 573], "data_path": [199, 243, 573], "image_list": [199, 243, 573], "img1": [199, 243, 573], "img2": [199, 243, 573], "imgx": [199, 243, 573], "val_map": [199, 243, 573], "txt": [199, 243, 570, 573, 585], "pytorchimagenetraw": [199, 243], "mxnetimagenetraw": [199, 243], "tensorflowimagenetraw": [199, 243], "inteltensorflow": [199, 201, 243, 245, 585], "tensorflowimagenetdataset": [199, 243], "onnxrtimagenetdataset": [199, 243], "bert_dataset": [200, 205, 244, 249, 261, 314], "coco_dataset": [200, 205, 244, 249, 261, 314], "dummy_dataset": [200, 205, 244, 249, 261, 314], "dummy_dataset_v2": [200, 205, 244, 249, 261, 314], "imagenet_dataset": [200, 205, 244, 249, 261, 314], "style_transfer_dataset": [200, 205, 244, 249, 261, 314], "styletransferdataset": [201, 245], "content_fold": [201, 245, 573], "style_fold": [201, 245, 573], "crop_ratio": [201, 245, 573], "resize_shap": [201, 245, 573], "256": [201, 207, 245, 250, 573, 577, 588, 622], "image_format": [201, 245, 573], "holder": [201, 245, 573], "labelbalancecocorecordfilt": [202, 246], "balanc": [202, 246, 612, 620], "labelbalancecocorawfilt": [202, 246], "tensorflowfilt": [203, 247], "onnxrtqlfilt": [203, 247], "onnxrtitfilt": [203, 247], "pytorchfilt": [203, 247], "mxnetfilt": [203, 247], "filter_registri": [203, 247], "filter_typ": [203, 247], "__call__": [203, 247], "coco_filt": [204, 205, 248, 249, 261, 314], "imagenet_transform": [205, 208, 249, 251, 261, 314], "parsedecodecocotransform": 206, "decod": [206, 207, 250, 262, 315, 587, 622], "quantizedinput": [207, 250, 622], "labelshift": [207, 250, 622], "label_shift": [207, 250, 622], "parsedecodeimagenet": [207, 250, 622], "proto": [207, 211, 250, 253, 622], "parsedecodeimagenettransform": [207, 250], "tensorflowresizecropimagenettransform": [207, 250], "random_crop": [207, 250, 622], "resize_sid": [207, 250, 622], "resize_method": [207, 250], "bilinear": [207, 211, 250, 253, 622], "random_flip_left_right": [207, 250, 622], "mean_valu": [207, 250, 622], "channels_last": [207, 250, 591], "subpixel": [207, 250], "rgb": [207, 250], "seri": [207, 250, 554, 585, 588, 622], "applic": [207, 250, 504, 535, 537, 570, 579, 591, 608, 614, 620, 621, 622], "crop": [207, 211, 250, 253, 573, 622], "flip": [207, 211, 250, 253, 622], "left": [207, 211, 250, 253, 570, 602, 608, 620, 622], "right": [207, 250, 265, 318, 549, 551, 570, 608, 620, 622], "std": [207, 211, 250, 253, 588, 622], "bilinearimagenettransform": [207, 250], "central_fract": [207, 250, 622], "875": [207, 250, 622], "fraction": [207, 250, 622], "onnxbilinearimagenettransform": [207, 250], "onnxresizecropimagenettransform": [207, 250], "std_valu": [207, 250], "229": [207, 250, 588, 626], "225": [207, 250, 588, 626], "resizewithaspectratio": [207, 250], "87": [207, 250, 626], "inter_pol": [207, 250], "cv2": [207, 250], "inter_area": [207, 250], "aspect": [207, 211, 250, 253, 622], "postprocess_cl": [209, 219, 588], "user_postprocess": [209, 219], "convert_to_unicod": [210, 252], "unicod": [210, 252], "assum": [210, 252, 265, 276, 318, 555, 581, 608], "utf": [210, 252], "load_vocab": [210, 252], "vocab_fil": [210, 211, 252, 253, 622], "convert_by_vocab": [210, 252], "vocab": [210, 252], "whitespace_token": [210, 252], "whitespac": [210, 252, 267, 320], "clean": [210, 252, 406, 550, 588], "piec": [210, 252, 262, 315, 579, 587], "fulltoken": [210, 252], "tokenzi": [210, 252], "basictoken": [210, 252], "punctuat": [210, 252, 262, 267, 315, 320], "lower": [210, 211, 252, 253, 267, 320, 339, 520, 576, 613, 614, 616, 620, 622, 623], "wordpiecetoken": [210, 252], "unk_token": [210, 252], "unk": [210, 252], "max_input_chars_per_word": [210, 252], "200": [210, 252, 551, 623], "wordpiec": [210, 211, 252, 253, 622], "concat_gener": [211, 253], "inc": [211, 253, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 549, 554, 591, 598, 608, 614, 615, 618], "tensorflowtransform": [211, 253], "mxnettransform": [211, 253], "pytorchtransform": [211, 253], "onnxrtqltransform": [211, 253], "onnxrtittransform": [211, 253], "transform_registri": [211, 253], "transform_typ": [211, 253], "basetransform": [211, 253], "tensorflowwrapfunct": [211, 253], "transform_func": [211, 253], "pytorchmxnettransform": [211, 253], "get_torchvision_map": [211, 253], "torchvis": [211, 253, 570, 578, 582, 591, 597], "composetransform": [211, 253], "transform_list": [211, 253, 622], "compos": [211, 253, 358, 622], "croptoboundingbox": [211, 253, 622], "offset_height": [211, 253, 622], "offset_width": [211, 253, 622], "target_height": [211, 253, 622], "target_width": [211, 253, 622], "box": [211, 253, 265, 269, 318, 322, 551, 570, 587, 591, 602, 608, 621, 622, 623], "coordin": [211, 253, 301, 338, 622, 623], "top": [211, 253, 260, 269, 284, 289, 297, 322, 587, 608, 622], "corner": [211, 253, 555, 622], "horizont": [211, 253, 622], "mxnetcroptoboundingbox": [211, 253], "onnxrtcroptoboundingbox": [211, 253], "tensorflowcroptoboundingbox": [211, 253], "resizewithratio": [211, 253, 622], "min_dim": [211, 253, 622], "800": [211, 253, 622], "max_dim": [211, 253, 622], "1365": [211, 253, 622, 626], "constant_valu": [211, 253], "longest": [211, 253, 622], "side": [211, 253, 570, 573, 602, 622], "doesn": [211, 253, 555, 577, 588, 609, 625], "exce": [211, 253, 622], "tensorflowresizewithratio": [211, 253], "perm": [211, 253, 622], "permut": [211, 253, 622], "tensorflowtranspos": [211, 253], "mxnettranspos": [211, 253], "pytorchtranspos": [211, 253], "randomverticalflip": [211, 253, 622], "randomli": [211, 253, 277, 301, 338, 552, 620, 622, 623], "tensorflowrandomverticalflip": [211, 253], "randomhorizontalflip": [211, 253, 588, 622], "tensorflowrandomhorizontalflip": [211, 253], "toarrai": [211, 253, 622], "pil": [211, 253, 622], "casttftransform": [211, 253], "castonnxtransform": [211, 253], "castpytorchtransform": [211, 253], "centercroptftransform": [211, 253], "center": [211, 253, 553, 554, 585, 622, 623], "paddedcentercroptransform": [211, 253], "crop_pad": [211, 253], "resizetftransform": [211, 253], "nearest": [211, 253, 622], "bicub": [211, 253, 622], "resizepytorchtransform": [211, 253], "randomcroptftransform": [211, 253], "randomresizedcroppytorchtransform": [211, 253], "randomresizedcropmxnettransform": [211, 253], "randomresizedcroptftransform": [211, 253], "normalizetftransform": [211, 253], "rescal": [211, 253, 622], "deviat": [211, 253, 622], "broadcast": [211, 253, 577, 622], "rescalekeraspretraintransform": [211, 253], "rescaletftransform": [211, 253], "rescaletransform": [211, 253], "alignimagechanneltransform": [211, 253], "dim": [211, 253, 620, 622], "align": [211, 253, 549, 622], "w": [211, 253, 613, 620, 622], "must": [211, 253, 265, 318, 550, 551, 570, 571, 572, 585, 616, 622], "pytorchalignimagechannel": [211, 253], "tondarraytransform": [211, 253], "resizemxnettransform": [211, 253], "resizetransform": [211, 253], "cropresizetftransform": [211, 253], "boundari": [211, 253, 622], "area": [211, 253, 265, 318, 587, 622], "pytorchcropresizetransform": [211, 253], "mxnetcropresizetransform": [211, 253], "cropresizetransform": [211, 253], "centercroptransform": [211, 253], "mxnetnormalizetransform": [211, 253], "pytorchnormalizetransform": [211, 253], "normalizetransform": [211, 253], "randomcroptransform": [211, 253], "randomresizedcroptransform": [211, 253], "get_final_text": [211, 253], "pred_text": [211, 253], "orig_text": [211, 253], "project": [211, 253, 393, 416, 417, 441, 548, 549, 550, 614, 619, 623, 627], "squadexampl": [211, 253], "qas_id": [211, 253], "question_text": [211, 253], "doc_token": [211, 253], "orig_answer_text": [211, 253], "start_posit": [211, 253], "end_posit": [211, 253], "is_imposs": [211, 253], "simpl": [211, 253, 570, 585, 588, 619, 620, 623], "answer": [211, 253, 266, 267, 319, 320, 549, 613, 622, 626], "posit": [211, 253, 549, 570, 587, 591], "unique_id": [211, 253], "example_index": [211, 253], "doc_span_index": [211, 253], "token_to_orig_map": [211, 253], "token_is_max_context": [211, 253], "input_mask": [211, 253, 588], "segment_id": [211, 253, 588], "read_squad_exampl": [211, 253], "input_fil": [211, 253], "doc_strid": [211, 253, 622], "max_query_length": [211, 253, 622], "output_fn": [211, 253], "inputbatch": [211, 253], "collecttransform": [211, 253], "10833": [211, 253], "tfsquadv1posttransform": [211, 253], "n_best_siz": [211, 253, 622], "20": [211, 253, 612, 620, 622, 625, 626], "384": [211, 253, 622], "64": [211, 253, 552, 620, 622, 626], "max_answer_length": [211, 253, 622], "30": [211, 253, 578, 582, 584, 620, 622, 626], "nbest_predict": [211, 253, 622], "question": [211, 253, 266, 267, 319, 320, 549, 550, 555, 585, 591, 613, 620, 622, 626], "anoth": [211, 253, 262, 271, 315, 365, 575, 589, 601, 605, 622, 623], "long": [211, 253, 580, 622], "document": [211, 253, 353, 550, 560, 577, 589, 593, 603, 606, 607, 618, 622, 624], "chunk": [211, 253, 622], "tfmodelzoocollecttransform": [211, 253], "tfsquadv1modelzooposttransform": [211, 253], "squadv1": [211, 253, 622], "see": [211, 253, 262, 315, 549, 551, 553, 570, 586, 588, 601, 602, 605, 608, 609, 620, 621, 623, 626], "parsedecodevoctransform": [211, 253], "conf_fname_or_obj": [212, 221, 254, 260, 270, 271, 272, 273, 275, 284, 289, 297], "thei": [212, 353, 549, 575, 581, 587, 588, 589, 596, 610], "possibl": [212, 382, 570, 611, 613, 617, 623], "unnecessari": [212, 588], "tensorflowcrossentropyloss": 213, "pytorchcrossentropyloss": 213, "tensorflowsparsecategoricalcrossentropi": 213, "sparsecategoricalcrossentropyloss": 213, "setter": 214, "calib_dataload": [214, 298, 334, 551, 554, 572, 573, 582, 583, 587, 588, 616, 617], "reason": [214, 549, 572, 621, 623], "know": [214, 506, 577, 618], "known": [214, 301, 338, 579, 588, 621, 623], "open": [215, 261, 314, 358, 547, 549, 554, 570, 579, 580, 588, 603, 606, 609, 614], "metric_cl": [216, 322, 334, 588], "user_metr": [216, 322, 334], "alwai": [216, 265, 318, 322, 334, 587, 588], "recommend": [216, 322, 555, 573, 579, 581, 599, 602, 607, 609, 613, 615, 623], "set_backend": 217, "tensorflowoptim": 218, "pytorchoptim": 218, "optimizer_registri": 218, "optimizer_typ": 218, "cross": [218, 269, 322, 583, 623], "tensorflowsgd": 218, "tensorflowadamw": 218, "tensorflow_addon": 218, "adamw": 218, "tensorflowadam": 218, "adam": [218, 625], "pytorchsgd": 218, "record_output": 220, "output_process": 220, "help": [220, 271, 382, 520, 590, 591, 597, 608, 623, 624], "get_activ": 220, "f": [223, 575, 577, 616, 620], "pickle_modul": 223, "pickle_protocol": 223, "_use_new_zipfile_seri": 223, "prepare_prun": [223, 613], "opt": [223, 554, 596, 620], "tensorflowimagefold": 240, "qlinear2qdq": [255, 261, 314], "qlinearop": [256, 584, 599, 616], "check_model": 256, "modelproto": [256, 258, 323, 590], "onnx_qlinear_to_qdq": 256, "input_name_to_nod": 256, "destin": [256, 271], "tf_to_fp32_onnx": 257, "tf_to_int8_onnx": 257, "int8_model": [257, 258, 555], "update_weight_bia": 258, "fp32_onnx_path": [258, 259], "wegiht": 258, "set_data_typ": 258, "weight_typ": 258, "activation_typ": 258, "get_node_map": 258, "module_node_map": 258, "get_quantizable_onnx_op": 258, "quantize_nod": 258, "build_scale_map": 258, "int8_scale_info": 258, "scale_zp_dict": 258, "set_scale_info": 258, "int8_onnx_model": 258, "int8_onnx_path": 258, "recalculate_bia": 258, "recalcul": [258, 620], "remove_nodes_by_nam": 258, "sub_graph_with_int32_bia": 258, "a_info": 258, "b_info": 258, "bias_nam": 258, "int32": [258, 573], "nodeproto": 258, "_type_": 258, "qdq_fp32_bia": 258, "excut": 258, "qdq_int32_bia": 258, "qdq_fp32_bias_qdq": 258, "torch_to_fp32_onnx": 258, "do_constant_fold": 258, "verbos": [258, 301, 338], "torch_to_int8_onnx": 258, "u8s8": 258, "optionl": 258, "onnx2numpy_dtyp": 259, "onnx_node_typ": 259, "dummydataread": 259, "dataread": 259, "achiev": [260, 297, 579, 587, 588, 611, 613, 614, 616, 621, 623], "across": [260, 270, 297, 323, 574, 588, 613, 620, 623], "variou": [260, 270, 297, 323, 584, 591, 613, 615], "dl": [260, 270, 284, 289, 297, 323, 583, 595, 608, 614], "bring": [260, 297, 602, 616, 620], "unifi": [260, 297, 555, 572, 583, 584, 588, 590], "vari": [260, 284, 289, 297, 612, 613, 620, 626], "roc": [260, 269, 284, 289, 297, 322], "flexibl": [260, 284, 289, 297, 575, 613], "via": [260, 284, 289, 297, 537, 549, 577, 584, 588, 591, 608, 613], "popular": [261, 314, 547, 554, 555, 575, 578, 579, 582, 588, 613, 616, 623, 624], "compress": [261, 284, 289, 314, 333, 355, 547, 554, 560, 575, 584, 588, 608, 610, 611, 613, 614, 616, 620, 624, 626], "techniqu": [261, 314, 547, 554, 584, 588, 591, 611, 613, 615, 616, 624, 625, 626], "bleu": [261, 263, 268, 314, 316, 321, 587, 613], "bleu_util": [261, 268, 314, 321], "coco_label_map": [261, 268, 314, 321], "coco_tool": [261, 268, 314, 321], "evaluate_squad": [261, 268, 314, 321], "f1": [261, 266, 268, 269, 314, 319, 321, 322, 577, 587, 588, 619, 626], "basic_na": [261, 274, 314], "nas_util": [261, 274, 314], "pruner_legaci": [261, 314], "gradient_sensit": [261, 280, 314], "group_lasso": [261, 280, 314], "pruning_recip": [261, 314], "tile_pattern": [261, 285, 286], "pytorch_prun": [261, 314], "logger": [261, 290, 314, 356, 359, 365, 501, 509], "prune_util": [261, 290, 314], "tuning_sampl": [261, 303, 309, 314, 342, 348], "tuning_spac": [261, 303, 309, 310, 312, 314, 342, 348, 349, 351], "tuning_struct": [261, 303, 309, 310, 311, 314, 342, 348, 349, 350], "auto_mixed_precis": [261, 303, 314, 342], "graph_optim": [261, 314, 441, 476, 480, 481, 501, 509, 525], "mixed_precis": [261, 314, 323, 441, 476, 501, 509, 525, 588], "model_convers": [261, 314], "pruning_v2": [261, 314], "unicoderegex": [262, 315], "hoc": [262, 315], "hack": [262, 315], "recogn": [262, 315, 623], "nondigit_punct_r": [262, 315], "compil": [262, 315, 588, 612], "express": [262, 315, 549], "preced": [262, 315, 620], "digit": [262, 315, 614], "punct_nondigit_r": [262, 315], "symbol_r": [262, 315], "bleu_token": [262, 315], "mose": [262, 315], "smt": [262, 315], "mosesdecod": [262, 315], "mteval": [262, 315], "v14": [262, 315], "pl": [262, 315], "l954": [262, 315], "l983": [262, 315], "bilingu": [262, 315], "understudi": [262, 315], "qualiti": [262, 315], "machin": [262, 315, 380, 570, 579, 585, 594, 608, 614, 620, 621], "translat": [262, 263, 315, 316, 613, 623], "natur": [262, 315, 579], "approxim": [262, 263, 315, 316, 587], "glue": [262, 269, 315, 322, 573, 587, 588, 597], "word": [262, 315, 587, 613], "ngram": [262, 315, 587], "breviti": [262, 263, 315, 316, 587], "penalti": [262, 263, 315, 316, 587], "doe": [262, 315, 573, 587, 588, 618, 622], "beam": [262, 315, 587], "tensor2tensor": [263, 316], "bleu_hook": [263, 316], "compute_bleu": [263, 316], "reference_corpu": [263, 316], "translation_corpu": [263, 316], "max_ord": [263, 316], "use_bp": [263, 316], "against": [263, 316], "gram": [263, 316], "bleu_scor": [263, 316], "third": [265, 318, 570, 586], "parti": [265, 318, 586, 616], "pycocotool": [265, 318, 580, 585], "noth": [265, 318, 623], "thu": [265, 318, 588, 613, 616], "cannot": [265, 318, 508, 551, 579, 580, 589, 621], "jonathanhuang": [265, 318], "image_id": [265, 318, 587], "encod": [265, 318, 622], "invok": [265, 318], "groundtruth_dict": [265, 318], "exportgroundtruthtococo": [265, 318], "groundtruth_boxes_list": [265, 318], "groundtruth_classes_list": [265, 318], "max_num_class": [265, 318], "output_path": [265, 318], "detections_list": [265, 318], "exportdetectionstococo": [265, 318], "detection_boxes_list": [265, 318], "detection_scores_list": [265, 318], "detection_classes_list": [265, 318], "cocowrapp": [265, 318], "loadannot": [265, 318], "cocoevalwrapp": [265, 318], "agnostic_mod": [265, 318], "computemetr": [265, 318], "detection_typ": [265, 318], "bbox": [265, 318, 551, 587], "hold": [265, 301, 318, 338, 573], "iou_typ": [265, 318], "iou_thr": [265, 269, 318, 322, 587], "map_point": [265, 269, 318, 322, 587], "cocoev": [265, 318], "mscoco": [265, 318], "Then": [265, 318, 570, 601, 603, 605, 606, 620, 623], "exportsingleimagegroundtruthtococo": [265, 318], "next_annotation_id": [265, 318], "category_id_set": [265, 318], "groundtruth_box": [265, 318], "groundtruth_class": [265, 318], "groundtruth_mask": [265, 318], "groundtruth_is_crowd": [265, 318], "ingest": [265, 318], "ones": [265, 318, 613], "exportsingleimagedetectionstococo": [265, 318], "uniqu": [265, 298, 318, 407, 408, 616], "assign": [265, 318, 365, 570, 577, 615], "num_gt_box": [265, 318], "num_detect": [265, 269, 318, 322, 587, 588, 625], "image_height": [265, 318], "image_width": [265, 318], "detection_mask": [265, 318], "crowd": [265, 318], "insid": [265, 318, 575, 576, 609, 613, 623], "exportsingleimagedetectionboxestococo": [265, 318], "detection_box": [265, 318, 588, 625], "detection_scor": [265, 318, 588, 625], "detection_class": [265, 318, 588, 625], "exporsingleimagedetectionboxestococo": [265, 318], "exportsingleimagedetectionmaskstococo": [265, 318], "allenai": [266, 267, 319, 320], "bi": [266, 267, 319, 320], "att": [266, 267, 319, 320], "flow": [266, 267, 319, 320, 551, 552, 588], "f1_score": [266, 267, 319, 320], "ground_truth": [266, 267, 319, 320], "ground": [266, 267, 319, 320], "truth": [266, 267, 319, 320], "metric_max_over_ground_truth": [266, 267, 319, 320], "metric_fn": [266, 267, 319, 320], "exact_match_scor": [266, 319], "exact": [266, 319], "averag": [266, 267, 269, 319, 320, 322, 587, 588, 623], "articl": [266, 267, 319, 320], "paragraph": [266, 267, 319, 320], "qa": [266, 267, 319, 320], "cantain": [266, 267, 319, 320], "normalize_answ": [267, 320], "extra": [267, 320, 588], "newlin": [267, 320], "tab": [267, 320, 418, 536, 608, 621], "harmon": [267, 269, 320, 322], "recal": [267, 269, 320, 322], "answer_start": [267, 320], "177": [267, 320], "denver": [267, 320], "bronco": [267, 320], "nfl": [267, 320], "team": [267, 320, 549, 617], "afc": [267, 320], "super": [267, 320, 552], "bowl": [267, 320], "50": [267, 320, 552, 620, 626], "56be4db0acb8001400a502ec": [267, 320], "form": [267, 320, 570, 575, 608], "percentag": [267, 320, 625], "tensorflowmetr": [269, 322], "maintain": [269, 322, 549, 550, 554, 590, 591, 603, 606, 618], "pytorchmetr": [269, 322], "mxnetmetr": [269, 322], "onnxrtqlmetr": [269, 322], "onnxrtitmetr": [269, 322], "metric_registri": [269, 322], "metric_typ": [269, 322], "decorator_metr": [269, 322], "basemetr": [269, 322, 334], "single_output": [269, 322], "hvd": [269, 322, 577], "wrappytorchmetr": [269, 322], "wrapmxnetmetr": [269, 322], "wraponnxrtmetr": [269, 322], "proport": [269, 322], "were": [269, 322, 594, 613], "pred_list": [269, 322], "pytorchloss": [269, 322], "mae": [269, 322, 587], "compare_label": [269, 322, 334, 587], "actual": [269, 322, 577, 620], "rmse": [269, 322, 587, 623], "squar": [269, 304, 322, 343, 587, 620, 623], "tensorflowtopk": [269, 322], "k": [269, 322, 334, 587], "among": [269, 322, 602, 620], "outcom": [269, 322], "num_correct": [269, 322], "num_sampl": [269, 322], "generaltopk": [269, 322], "cocomapv2": [269, 322, 587], "anno_path": [269, 322, 587], "map_kei": [269, 322], "detectionboxes_precis": [269, 322], "output_index_map": [269, 322, 587], "tensorflowmap": [269, 322], "tensorflowcocomap": [269, 322], "tensorflowvocmap": [269, 322], "squadf1": [269, 322, 587], "miou": [269, 322], "num_class": [269, 322], "21": [269, 322, 596, 597, 614, 620, 626], "iou": [269, 322], "intersect": [269, 322, 555, 587], "union": [269, 322, 355, 587], "onnxrtglu": [269, 322], "dlrm": [269, 322], "modelconvers": 271, "typic": [271, 298, 552, 554, 576, 578, 582, 613, 626], "basicna": 272, "model_build": [272, 275], "conf_fnam": 272, "nasbas": [275, 552], "nas_registri": 276, "nas_method": 276, "create_search_space_pool": 276, "idx": [276, 573], "enumer": [276, 355, 369, 470, 476, 502, 555, 575, 576, 577, 588, 611, 613, 621], "find_pareto_front": 276, "pareto": [276, 552], "front": [276, 552], "n_point": 276, "n_metric": 276, "n_pareto_point": 276, "gridsearch": 277, "grid": [277, 552], "whole": [277, 535, 570, 616], "randomsearch": 277, "bayesianoptimizationsearch": 277, "gradientsensitivityprun": 278, "pytorchmodel": [278, 279, 281, 282, 283, 332], "overwritten": [278, 279, 281, 282, 283, 596], "grouplassoprun": 279, "legaci": 280, "basicmagnitudeprun": 281, "lock": [282, 283, 584, 611, 613], "pruner_registri": 283, "clase": 283, "pruningconf": [284, 289], "tfpruningcallback": [284, 289], "input_model": [284, 289, 590, 621], "pure": [284, 289, 589, 613], "pattern_registri": 287, "pattern_typ": 287, "patternbas": 287, "mask_shap": [287, 288], "is_contigu": 287, "tile": 288, "tilepatternbas": 288, "tilepattern_1x1": 288, "1x1": [288, 575, 588, 613], "tilepattern_2x2": 288, "2x2": [288, 620], "tilepattern_1x16": 288, "1x16": 288, "tilepattern_4x1": 288, "tilepattern_1x2": 288, "1x2": [288, 620], "reset_non_value_to_default": 293, "obejct": 293, "parse_not_to_prun": 293, "update_frequency_on_step": [294, 615], "max_sparsity_ratio_per_lay": [294, 615], "magnitudeprun": 294, "snipprun": 294, "snipmomentumprun": 294, "moreoev": 294, "least": [295, 588, 613, 623], "templat": [295, 314, 501, 509, 570, 588, 613], "tree": [295, 311, 350], "huggingface_model": 295, "eager": [295, 367, 475, 479, 487, 577, 584, 616, 617, 621, 626], "config_file_path": 295, "pruner_info": 295, "quantconf": 297, "server": [298, 314, 441, 448, 500, 501, 508, 509, 517, 520, 531, 533, 535, 570, 608], "seper": 298, "opt_model": [298, 588], "fulli": [298, 588, 616, 620], "train_func": [298, 355, 577, 588, 616], "automixedprecisiontunestrategi": [299, 336], "basictunestrategi": [300, 337], "stage": [300, 305, 335, 337, 344, 575, 613, 621, 623], "polici": [300, 304, 335, 337, 343, 549, 554, 612, 625, 627], "bayesiantunestrategi": [301, 338], "acq_max": [301, 338], "ac": [301, 338], "gp": [301, 338], "y_max": [301, 338], "n_warmup": [301, 338], "10000": [301, 338, 613], "n_iter": [301, 338], "acquisit": [301, 338], "gaussian": [301, 338, 623], "relev": [301, 338], "limit": [301, 338, 365, 554, 575, 621], "acq": [301, 338], "randomst": [301, 338], "scipi": [301, 338], "x_max": [301, 338], "targetspac": [301, 338], "pbound": [301, 338], "9527": [301, 338, 588, 625], "allow": [301, 338, 537, 570, 575, 577, 587, 588, 589, 615, 620, 623, 625], "bayesianoptim": [301, 338], "exhaustivetunestrategi": [302, 340], "msetunestrategi": [304, 343], "mse_v2tunestrategi": [305, 344], "revert": [305, 313, 344, 352, 623], "randomtunestrategi": [306, 345], "strategy_registri": [307, 346, 623], "tunestrategi": [307, 346, 623], "tuningsamplerregistri": [310, 349], "tuningsampl": [310, 349], "tuningord": [310, 349], "Not": [310, 311, 349, 350, 365, 504, 552], "tuningspac": [310, 311, 349, 350], "tuning_order_lst": [310, 349], "initial_op_tuning_cfg": [310, 349], "modelwisetuningsampl": [310, 349], "tuning_items_prior": [310, 349], "op_dtype_dict": [310, 349], "optuningconfig": [310, 311, 312, 349, 350, 351], "optypewisetuningsampl": [310, 349], "opwisetuningsampl": [310, 349], "fallbacktuningsampl": [310, 349], "op_dtyp": [310, 349], "accumul": [310, 349, 623], "skip_first": [310, 349], "smoothquantsampl": 310, "tuningitem": [311, 350], "item_typ": [311, 350], "pattern_to_intern": [311, 350], "default_dtyp": [311, 350], "pattern_to_path": [311, 350], "quant_mode_from_pattern": [311, 350], "internal_pattern": [311, 350], "initial_tuning_cfg_with_quant_mod": [311, 350], "op_name_typ": [311, 350], "step1": [311, 350], "step2": [311, 350], "complet": [311, 350, 555, 570, 616, 623, 625, 626], "step3": [311, 350], "step4": [311, 350], "step5": [311, 350], "op_quant_mod": [312, 351], "ordereddefaultdict": [313, 352], "extract_data_typ": [313, 352], "data_typ": [313, 352], "sign": [313, 352, 550, 570, 616, 619], "reverted_data_typ": [313, 352], "signed_flag": [313, 352], "get_adaptor_nam": [313, 352], "experiment": [314, 552, 573, 576, 577, 579, 588, 613, 615, 618, 622], "base_model": [314, 325], "keras_model": [314, 325], "mxnet_model": [314, 325], "nets_factori": [314, 325], "onnx_model": [314, 325], "tensorflow_model": [314, 325], "torch_model": [314, 325], "collect_layer_histogram": [314, 359], "create_obj_from_config": [314, 359], "kl_diverg": [314, 359], "load_huggingfac": [314, 359, 588], "ux": 314, "config_gener": [314, 441, 501], "configuration_wizard": [314, 441, 501], "db_manag": [314, 441, 501], "file_brows": [314, 441, 501], "jobs_manag": [314, 441, 501], "model_zoo": [314, 441, 501], "names_mapp": [314, 441, 501], "profil": [314, 393, 400, 415, 417, 418, 441, 501, 502, 512, 535, 540], "manage_workspac": [314, 441, 501], "workload": [314, 380, 501, 509, 520, 535, 540, 541, 614], "except": [314, 353, 365, 501, 509, 520, 535], "executor": [314, 368, 501, 509], "expiring_dict": [314, 501, 509], "github_info": [314, 501, 509], "hw_info": [314, 501, 509], "json_seri": [314, 501, 509], "proc": [314, 501, 509], "status_upd": [314, 501, 509], "yaml_util": [314, 501, 509], "web": [314, 500, 501, 554, 570, 621], "servic": [314, 501, 534, 535, 554, 608, 612], "commun": [314, 501, 535, 537, 549, 570], "router": [314, 501, 535], "inc_bench": [314, 501, 570, 582], "sub_class": [322, 334], "register_customer_metr": 322, "mani": [322, 334, 585, 623, 625], "tell": [322, 334, 615], "topk": [322, 334, 577, 587, 588, 616], "matrix": [322, 334, 554, 599, 624], "frozen": [323, 331, 334, 457, 460, 570, 590], "savedmodel": [323, 331, 334, 626], "chould": 323, "onnx_ml_pb2": [323, 590], "hybirdblock": [323, 334], "paramt": [323, 355], "basemodel": 324, "plai": [324, 614, 620], "role": [324, 620], "kerasmodel": [326, 459], "get_model_fwk_nam": 327, "fwk": 327, "mxnetmodel": 328, "net": 329, "factori": [329, 422, 441, 476, 492, 497, 501, 512, 516], "tfslimnetsfactori": 329, "onnxmodel": 330, "get_model_typ": [331, 450], "validate_graph_nod": 331, "validate_and_inference_input_output": 331, "input_tensor_nam": 331, "output_tensor_nam": 331, "graph_sess": 331, "graph_def_sess": 331, "frozen_pb_sess": 331, "load_saved_model": 331, "saved_model_tag": 331, "signatur": 331, "saved_model_dir": 331, "tag": [331, 520, 620, 621], "metagraphdef": 331, "keras_sess": 331, "slim_sess": 331, "checkpoint_sess": 331, "estimator_sess": 331, "saved_model_sess": 331, "tensorflowbasemodel": 331, "tensorflowsavedmodelmodel": 331, "tensorflowqatmodel": 331, "tensorflowcheckpointmodel": 331, "checkpoint": [331, 364, 590], "tensorflowmodel": [331, 461], "pytorchbasemodel": 332, "pytorchfxmodel": 332, "ipexmodel": 332, "driven": [333, 554, 588, 589, 608, 610, 621], "objective_registri": 333, "objective_custom_registri": 333, "obj_cl": 333, "eural_compressor": 333, "objective_cl": 333, "user_object": 333, "__class__": 333, "__name__": 333, "objective_cfg": 333, "usr_cfg": 333, "user_obj_cfg": 333, "easili": [333, 555, 592, 596, 608, 610, 620], "peak": [333, 610], "multiobject": [333, 530], "metric_criterion": 333, "metric_weight": 333, "obj_criterion": 333, "obj_weight": 333, "is_measur": 333, "calib_func": [334, 617], "entir": [334, 355, 551, 613, 620], "autotunestrategi": 335, "conservativetunestrategi": 339, "o0": [339, 623], "who": [339, 549], "hawq_v2tunestrategi": 341, "made": [341, 555, 616, 618, 623], "impact": [341, 618, 623], "tunestrategymeta": 346, "metaclass": 346, "blockfallbacktuningsampl": 349, "op_block_lst": 349, "target_dtyp": 349, "fun": 353, "attribute1": 353, "module_debug_level1": 353, "debug": [353, 362, 422, 423, 427, 570, 601, 605, 609, 623], "function1": 353, "param1": 353, "param2": 353, "parameter1": 353, "parameter2": 353, "o": [353, 429, 585, 593, 612, 620], "function2": 353, "pep": 353, "484": 353, "output_model": [353, 572, 588, 621], "function3": 353, "section": [353, 570, 575, 576, 608, 613, 615, 625], "restructuredtext": 353, "liter": 353, "attributeerror": 353, "generator1": 353, "example_gener": 353, "exampleclass": 353, "param3": 353, "public": [353, 549, 603, 606], "attr1": 353, "attr2": 353, "attr5": 353, "api_doc_exampl": 354, "loop": [355, 551, 552, 581, 619, 623], "compressionmanag": 355, "uesd": 355, "deal": 355, "pruningconfig": 355, "orchestr": [355, 554, 584, 624], "on_train_begin": [355, 551, 575, 576, 588, 611, 613, 616], "train_loop": [355, 588, 611], "on_epoch_begin": [355, 358, 575, 576, 588, 611], "on_step_begin": [355, 358, 575, 576, 588, 611, 613], "on_after_compute_loss": [355, 575, 576, 588, 611], "backward": [355, 575, 576, 577, 588, 611, 613, 616, 618], "on_before_optimizer_step": [355, 575, 576, 588, 611, 613], "on_step_end": [355, 358, 575, 576, 588, 611], "on_epoch_end": [355, 358, 575, 576, 588, 611], "on_train_end": [355, 575, 576, 588, 611, 613, 616], "path_to_sav": 355, "manag": [355, 358, 384, 419, 442, 503, 519, 582, 588, 591, 592, 602], "top1": [355, 613, 616, 626], "callbacks_list": 355, "layerhistogramcollector": 356, "layer_tensor": 356, "include_lay": 356, "get_func_from_config": 358, "func_dict": 358, "get_preprocess": 358, "get_metr": 358, "get_postprocess": 358, "get_algorithm": 358, "algo": 358, "create_dataset": 358, "cfg_preprocess": 358, "cfg_filter": 358, "create_dataload": 358, "dataloader_cfg": 358, "create_eval_func": 358, "postprocess_cfg": 358, "fp32_baselin": [358, 555], "baselin": [358, 619, 621], "create_train_func": 358, "train_cfg": 358, "Their": 358, "auxiliari": 359, "pretrain": [361, 591, 597], "optimizedmodel": 361, "from_pretrain": [361, 588], "save_for_huggingface_upstream": [361, 588], "output_dir": [361, 513, 588, 596, 597], "msg": 362, "fatal": 362, "warn": [362, 570], "warin": 362, "alia": [362, 365, 593, 598], "is_int8_model": 364, "checkpoint_dir": 364, "history_cfg": 364, "best_configur": 364, "best_model_weight": 364, "pt": [364, 590, 614, 616, 617], "snapshot": [364, 539], "cfg_from_fil": 365, "yaml_fil": [365, 573, 577, 587], "lazyimport": 365, "lazi": 365, "till": [365, 623], "decorat": 365, "time_limit": 365, "get_siz": [365, 520], "seen": [365, 555], "recurs": 365, "compute_spars": 365, "fault_tolerant_fil": 365, "equal_dict": 365, "d2": 365, "compare_kei": 365, "ignore_kei": 365, "ignor": [365, 573, 620], "cpuinfo": 365, "dump_elapsed_tim": [365, 555], "customized_msg": 365, "elaps": 365, "combine_histogram": 365, "old_hist": 365, "old": [365, 588, 618], "get_tensor_histogram": 365, "get_all_fp32_data": 365, "get_tuning_histori": 365, "tuning_history_path": [365, 489], "num": [365, 587], "str2arrai": 365, "dequantizeweight": 365, "weight_tensor": 365, "min_filter_tensor": 365, "max_filter_tensor": 365, "scale_info": 365, "captureoutputtofil": 365, "tmp_file_path": 365, "stream": 365, "sy": [365, 594], "stderr": 365, "captur": 365, "statist": 365, "header": [365, 580], "field_nam": 365, "output_handl": 365, "printer": 365, "global_st": 365, "load_data_from_pkl": 365, "pkl": 365, "dump_data_to_loc": 365, "show_memory_info": 365, "hint": 365, "dump_class_attr": 365, "compare_object": 365, "obj1": 365, "obj2": 365, "ignore_attr": 365, "comparison": [365, 618, 621], "alias_param": 365, "param_nam": 365, "param_alia": 365, "alias": 365, "project_data": [366, 473, 478, 482, 485, 488, 495], "benchmark_data": 366, "dataloaderinterfac": [366, 482, 495], "dataloader_data": [366, 482, 495], "parse_arg": [367, 475, 479, 484, 487, 493], "benchmark_mod": 367, "set_eager_execut": [367, 475, 479, 487], "request_id": [368, 471, 489, 490, 513], "asd": [368, 490], "benchmark_id": 368, "benchmark_result_upd": 368, "benchmark_result_update_pytorch_script": 368, "neural_coder_perform": 368, "neural_coder_tim": 368, "pytorch_script_bench_optim": 368, "command_line_of_script": 368, "pytorch_script_bench_original_model": 368, "execute_real_benchmark": 368, "project_detail": [368, 471, 490], "benchmark_detail": 368, "benchmark_model": [369, 441, 501], "execute_benchmark": [369, 441, 501], "benchmarkconfiggener": 370, "configgener": 371, "workload_directori": 371, "configuration_path": 371, "graphoptimizationconfiggener": 372, "benchmark_config_gener": [373, 441, 501], "graph_optimization_config_gener": [373, 441, 501], "mixed_precision_config_gener": [373, 441, 501], "profiling_config_gener": [373, 441, 501], "pruning_config_gener": [373, 441, 501], "quantization_config_gener": [373, 441, 501], "mixedprecisionconfiggener": 374, "profilingconfiggener": 375, "pruningconfiggener": 376, "quantizationconfiggener": 377, "configurationpars": 378, "parse_list_valu": 378, "required_typ": 378, "parse_multidim_list": 378, "dimension": 378, "normalize_string_list": 378, "string_list": 378, "bracket": 378, "miss": [378, 613, 616], "get_predefined_configur": 380, "update_config_to_machine_specif": 380, "configuration_pars": [381, 441, 501], "get_boundary_nod": [381, 441, 501], "get_configur": [381, 441, 501], "params_feed": [381, 441, 501], "pruning_config_pars": [381, 441, 501], "feeder": 382, "get_possible_valu": 382, "pruningconfigpars": 383, "bench": [384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 471, 500, 591], "dbmanag": 384, "database_loc": 384, "log_level": [384, 511], "benchmarkresult": 386, "fill_dictionari": [387, 389, 390, 392, 394, 397, 398, 403], "fill": [387, 389, 390, 392, 394, 397, 398, 403, 570, 608, 619, 622], "domainflavour": [390, 502], "db": [390, 418, 419], "benchmark_result": [393, 417, 441], "domain_flavour": [393, 417, 441, 447, 520], "optimization_typ": [393, 417, 441], "profiling_result": [393, 417, 441], "pruning_detail": [393, 417, 441], "tuning_detail": [393, 417, 441], "tuning_histori": [393, 417, 441, 476, 501], "optimizationtyp": [397, 502], "profilingresult": 400, "pruningdetail": 402, "tuningdetail": [404, 488], "tuninghistori": [405, 489], "benchmarkapiinterfac": 406, "before_delete_benchmark_entri": 406, "mapper": [406, 469, 470], "sqlite3": 406, "db_model": [406, 417, 441, 501], "datasetapiinterfac": 407, "set_database_vers": [407, 408], "version_num": [407, 408], "alembic_vers": [407, 408], "initialize_associ": [407, 408], "initialize_precision_optimization_types_associ": [407, 408], "search_in_list_of_dict_for_unique_valu": [407, 408], "list_of_dict": [407, 408], "search_in_list_of_dict": [407, 408], "diagnosisapiinterfac": 409, "dictionariesapiinterfac": 410, "dictonari": 410, "examplesapiinterfac": 411, "predefin": [411, 520], "benchmark_api_interfac": [412, 417, 441], "dataset_api_interfac": [412, 417, 441], "diagnosis_api_interfac": [412, 417, 441], "dictionaries_api_interfac": [412, 417, 441], "examples_api_interfac": [412, 417, 441], "model_api_interfac": [412, 417, 441], "optimization_api_interfac": [412, 417, 441], "profiling_api_interfac": [412, 417, 441], "project_api_interfac": [412, 417, 441], "modelapiinterfac": 413, "optimizationapiinterfac": 414, "profilingapiinterfac": 415, "projectapiinterfac": 416, "db_oper": [417, 441, 501], "params_interfac": [417, 441, 501], "modeladdparamsinterfac": 418, "datasetaddparamsinterfac": 418, "optimizationaddparamsinterfac": 418, "optimizationeditparamsinterfac": 418, "edit": [418, 549], "benchmarkaddparamsinterfac": 418, "benchmarkeditparamsinterfac": 418, "profilingaddparamsinterfac": 418, "profilingeditparamsinterfac": 418, "profilingresultaddparamsinterfac": 418, "tuninghistoryiteminterfac": 418, "tuninghistoryinterfac": 418, "diagnosisoptimizationparamsinterfac": 418, "update_dataloaders_param": 419, "framework_id": 419, "dataloaders_to_upd": 419, "framework_dataloaders_config": 419, "get_framework_dataloaders_config": 419, "get_framework_transforms_config": 419, "diagnosisfactori": 421, "onnx_diagnosi": [422, 441, 501], "onnxrt_diagnosi": [422, 423, 441], "tensorflow_diagnosi": [422, 441, 501], "op_detail": [422, 441, 501], "op_entri": [422, 441, 501], "onnxrtdiagnosi": 424, "opdetail": 425, "oppattern": 425, "pattern_data": 425, "opweight": 425, "weights_data": 425, "opactiv": 425, "op_activ": 425, "opentri": 426, "activation_min": 426, "activation_max": 426, "tensorflowdiagnosi": 428, "browser": [429, 570, 601, 605], "get_directory_entri": 429, "get_requested_path": 429, "request": [429, 441, 442, 443, 464, 465, 468, 489, 501, 532, 534, 537, 544, 570, 616], "get_non_hidden_directory_entri": 429, "create_dir_entri": 429, "direntri": 429, "create_file_entri": 429, "create_entri": 429, "is_directori": 429, "sort_entri": 429, "should_show_fil": 429, "should_show_only_model_fil": 429, "get_setting_valu": 429, "get_filter_valu": 429, "filter_requested_entri": 429, "filter_nam": 429, "is_directory_entri": 429, "is_model_or_directory_entri": 429, "shown": [429, 552, 570, 572, 575, 587, 588, 602, 610, 611, 613, 620, 623], "is_dataset_or_directory_entri": 429, "brows": 430, "filesystem": [430, 520], "attribute_typ": 431, "expanded_group": 432, "reader": [435, 436, 441, 501], "graphread": 435, "onnxrt_read": [436, 438, 441], "tensorflow_read": [436, 438, 441], "collaps": [436, 441, 501, 570], "edg": [436, 441, 501, 622], "graph_read": [436, 441, 501], "highlight": [437, 551, 570], "groupnod": 437, "group_nam": 437, "onnxrtread": 439, "tensorflowread": 440, "jobs_control_queu": [441, 442, 501], "frozen_pb": [441, 448, 458], "meta_graph": [441, 448, 458], "model_type_gett": [441, 448, 501], "repositori": [441, 446, 448, 501, 507, 603, 606], "download_config": [441, 467, 501], "download_model": [441, 467, 501], "list_model": [441, 467, 501], "optimize_model": [441, 474, 476, 477, 480, 483], "neural_coder_optim": [441, 476, 501], "tune_model": [441, 476, 486], "execute_optim": [441, 476, 501], "tensorflow_profil": [441, 492, 501], "execute_profil": [441, 492, 501], "profile_model": [441, 492, 501], "job": [442, 516], "_jobscontrolqueu": 443, "queu": 443, "jobsmanag": 443, "_jobsmmanag": 444, "_job": 444, "get_default_path": 446, "getter": 450, "onnxrtmodel": 452, "remove_number_of_samples_from_shap": 452, "pytorchscriptmodel": 454, "modelrepositori": 455, "trust": [456, 570], "frozenpbmodel": 457, "metagraphmodel": 460, "metagraph": 460, "savedmodelmodel": 462, "get_input_shap": 463, "fix_dynamic_shap": 463, "get_available_model": 468, "check_vers": 468, "framework_vers": 468, "supported_vers": 468, "validate_model_list": 468, "model_list": 468, "get_framework_module_nam": 468, "framework_nam": [468, 508], "get_installed_framework": 468, "instal": [468, 577, 580, 582, 591, 593, 596, 599, 603, 606, 608, 609, 612, 627], "mappingdirect": 470, "namesmapp": 470, "execute_optimization_pytorch_script": 471, "optimization_id": 471, "execute_optimization_regular": 471, "parse_model_data_to_bench_nam": 471, "parse_log": 471, "optimization_detail": 471, "check_if_collect_tuning_histori": 471, "optimizationfactori": 472, "graphoptim": [473, 524], "optimization_data": [473, 478, 482, 485, 488], "dataset_data": [473, 478, 482, 485, 488], "optimize_graph": [475, 479], "optimize_graph_config": [475, 479], "optimize_pt_script": 481, "optimizationinterfac": 482, "optimization_workdir": 489, "watcher": 489, "send": [489, 532, 537, 550], "profiling_id": 490, "execute_real_profil": 490, "profiling_detail": 490, "profilerfactori": [491, 496], "load_profiling_detail": 493, "json_path": 493, "profiling_data": [495, 498], "delete_assign": 499, "wsgi": 500, "prepare_environ": 500, "app": [501, 535], "workdir": [501, 509, 517], "history_snapshot_pars": [501, 535, 540], "request_data_processor": [501, 535, 540], "response_gener": [501, 535, 540], "flavour": 502, "executionstatu": 502, "status": 502, "notfoundexcept": 504, "accessdeniedexcept": 504, "deni": 504, "clienterrorexcept": 504, "internalexcept": 504, "subject": [505, 532, 586], "send_respons": 505, "log_nam": 505, "additional_log_nam": [505, 513], "shell": [505, 513, 621], "expir": 506, "expiringdictitem": 506, "expires_at": 506, "expiringdict": 506, "initial_valu": 506, "ttl": 506, "120": [506, 620], "githubinfo": 507, "hw": 508, "hwinfo": 508, "respons": [508, 512, 519, 532, 537, 545, 616], "platform": [508, 554, 584, 591, 599, 614, 616, 626], "hardwar": [508, 550, 554, 555, 575, 584, 588, 589, 608, 612, 613, 614, 615], "get_number_of_socket": 508, "get_distribut": 508, "distibut": 508, "get_bios_vers": 508, "bio": [508, 612], "is_turbo_boost_en": 508, "turbo": [508, 612], "boost": [508, 589, 592, 608, 613, 614], "get_kernel_vers": 508, "get_framework_info": 508, "get_framework_dependency_info": 508, "subdepend": 508, "jsonseri": 510, "serializ": 510, "change_log_level": 511, "optimizationpars": 512, "performancepars": 512, "accuracypars": 512, "benchmarkparserfactori": 512, "profilingpars": 512, "pid": 513, "ncprocess": 514, "aggreg": 514, "get_status_update_funct": 516, "job_typ": 516, "sent": 518, "deprec": [520, 603, 606, 622], "func": [520, 537, 616, 625], "signal": 520, "is_hidden": 520, "get_dataset_path": 520, "get_framework_from_path": 520, "get_file_extens": 520, "is_dataset_fil": 520, "get_predefined_config_path": 520, "normalize_domain": 520, "underscor": 520, "normalize_framework": 520, "normalize_str": 520, "string_to_norm": 520, "get_model_zoo_config_path": 520, "model_dict": 520, "get_model_zoo_model_path": 520, "check_modul": 520, "get_module_vers": 520, "mb": 520, "add_unit": 520, "load_model_config": 520, "load_dataloader_config": 520, "load_transforms_config": 520, "load_transforms_filter_config": 520, "meaning": [520, 588, 611], "load_precisions_config": 520, "load_pruning_details_config": 520, "get_default_pruning_config_path": 520, "load_model_wise_param": 520, "load_metrics_config": 520, "get_metrics_dict": 520, "load_help_nc_param": 520, "replace_with_valu": 520, "file_path": 520, "verify_file_path": 520, "determine_ip": 520, "ip": 520, "is_development_env": 520, "nc_mode": 520, "filter_transform": 520, "parse_bool_valu": 520, "release_tag": 520, "releas": [520, 554, 585, 597, 599, 601, 605, 607, 627], "get_shape_from_transform": 520, "shape_elements_ord": 520, "get_height_width_from_s": 520, "parse_to_string_list": 520, "parse_to_float_list": 520, "export_to_csv": 520, "csv": [520, 552, 570], "parse_vers": 520, "string_vers": 520, "are_archive_filenames_valid": 520, "archiv": 520, "malici": 520, "safe_extract_arch": 520, "zipfil": 520, "tarfil": 520, "destination_dir": 520, "member": [520, 549, 555], "safe": [520, 550], "labelbal": [522, 572, 573], "postprocessschema": 523, "sgdoptim": 528, "adamwoptim": 528, "adamoptim": 528, "crossentropylosscriterion": 528, "sparsecategoricalcrossentropycriterion": 528, "knowledgedistillationlosscriterion": 528, "weightcompressionapproach": 528, "parse_dict_value_to_float": 528, "parse_dict_value_to_int": 528, "wiseconfigdetail": 529, "wiseconfig": 529, "acccriterion": 530, "exitpolici": 530, "float_represent": 531, "dumper": 531, "pruner_represent": 531, "logic": [532, 625], "outsid": 532, "create_simple_respons": 532, "gui": [532, 537, 554, 570, 584, 585, 613, 624], "messagequeu": 532, "queue": [532, 537], "servicenotfoundexcept": 534, "unknown": 534, "connector": 536, "routingdefinit": 536, "rout": 536, "realtimeroutingdefinit": 536, "realtim": 536, "deferredroutingdefinit": 536, "separ": [536, 549, 570, 583, 586, 611, 615], "deferredsubprocessroutingdefinit": 536, "spawn": 536, "subprocess": 536, "get_model_graph": 536, "find_pattern_in_graph": 536, "get_system_info": 536, "endpoint": 537, "run_serv": 537, "webserv": 537, "get_tls_arg": 537, "tl": [537, 570], "block_ifram": 537, "werkzeug": 537, "ifram": 537, "csp": 537, "block_snif": 537, "mime": 537, "snif": 537, "require_api_token": 537, "author": [537, 586], "j": [537, 550, 554, 620, 626], "handle_api_cal": 537, "subpath": 537, "allow_api_cal": 537, "page_not_found": 537, "disable_cach": 537, "build_paramet": 537, "flask": [537, 570], "web_socket_publish": 537, "web_socket": 537, "flask_socketio": 537, "socketio": [537, 570], "benchmarkservic": 538, "historysnapshotpars": 539, "history_snapshot": 539, "provide_perform": 539, "modelservic": 541, "optimizationservic": 542, "profilingservic": 543, "processor": [544, 554, 589, 612, 614, 616, 617, 626], "requestdataprocessor": 544, "responsegener": 545, "workloadservic": 546, "welcom": [548, 549, 550, 554, 627], "interest": [549, 554, 621], "foster": 549, "particip": 549, "harass": 549, "experi": [549, 591, 619, 620, 623], "everyon": 549, "regardless": 549, "ag": 549, "bodi": 549, "ethnic": 549, "characterist": 549, "gender": 549, "educ": 549, "socio": 549, "econom": 549, "appear": [549, 570, 602, 608], "race": 549, "religion": 549, "sexual": 549, "orient": 549, "behavior": [549, 550, 555, 581, 590, 621, 623, 625], "contribut": [549, 554, 613], "inclus": 549, "Being": 549, "respect": [549, 581, 613, 620, 625], "viewpoint": 549, "gracefulli": 549, "critic": 549, "focus": [549, 555], "empathi": 549, "toward": [549, 575], "unaccept": 549, "imageri": 549, "unwelcom": 549, "troll": 549, "insult": 549, "derogatori": 549, "comment": [549, 573, 587, 588, 622], "polit": 549, "attack": 549, "privat": 549, "publish": [549, 586, 589, 609, 620], "electron": 549, "explicit": 549, "permiss": 549, "inappropri": 549, "profession": 549, "clarifi": 549, "appropri": [549, 620], "fair": 549, "action": [549, 603, 606], "reject": 549, "commit": [549, 550], "wiki": 549, "issu": [549, 550, 553, 570, 585, 616, 621], "ban": 549, "temporarili": 549, "deem": 549, "threaten": 549, "offens": 549, "harm": 549, "mail": 549, "social": [549, 554, 614], "media": [549, 554, 614], "account": [549, 619, 623], "appoint": 549, "event": [549, 621], "abus": 549, "report": [549, 550, 570, 619], "contact": [549, 618, 619], "complaint": 549, "review": [549, 550], "investig": 549, "circumst": [549, 615], "oblig": 549, "confidenti": [549, 570], "regard": [549, 617], "incid": 549, "good": [549, 616, 623], "faith": 549, "face": [549, 554, 560, 591, 595, 614, 618], "repercuss": 549, "leadership": 549, "faq": [549, 554], "page": [549, 550, 554], "view": [550, 554, 570, 578, 599, 608, 618], "pylint": 550, "flake8": 550, "autopep8": 550, "cover": [550, 579, 583, 614], "would": [550, 588, 589, 613, 616, 620], "adopt": [550, 554, 591, 613, 614, 620], "certif": [550, 570], "agre": 550, "bug": 550, "jira": 550, "ticket": 550, "potenti": [550, 552], "risk": 550, "pr": [550, 587, 603, 606, 618], "reproduc": 550, "submit": [550, 614], "intend": 550, "collabor": [550, 593, 599], "adher": 550, "toolkit": [551, 554, 585, 591, 599, 614, 624], "tracer": 551, "resolv": [551, 553], "floatfunct": 551, "cat": [551, 594], "done": [551, 575, 576, 592, 608, 613, 616], "10004": [551, 552, 555, 572, 575, 576, 579, 581, 584, 589, 611, 615, 625], "neural_compressor": [551, 552, 554, 571, 572, 573, 575, 576, 577, 579, 582, 583, 587, 588, 589, 590, 610, 611, 613, 615, 616, 617, 618, 619, 620, 622, 623, 625], "eval": [551, 572, 591, 616, 621], "fail": 551, "conduct": [551, 588, 596, 608, 624], "imper": 551, "therefor": [551, 588, 613, 616, 618, 620], "lot": [551, 620], "As": [551, 570, 572, 575, 588, 602, 613, 623], "failur": 551, "successfulli": [551, 577, 614], "suggest": [551, 619], "traceabl": 551, "proxi": 551, "tutori": [551, 599, 614, 624], "prototyp": 551, "html": [551, 554, 603, 606], "untrac": 551, "ssd": [551, 626], "resnet34": [551, 626], "r34": 551, "bboxes_labels_scor": 551, "prob": 551, "45": [551, 620, 626], "max_output": 551, "zip": 551, "dbox": 551, "dlabel": 551, "dscore": 551, "decode_singl": 551, "autom": [552, 591, 608, 609, 620], "artifici": 552, "ann": 552, "par": 552, "outperform": 552, "hand": [552, 570], "propos": [552, 555, 575, 589, 620], "lie": 552, "predictor": 552, "4x": [552, 616], "figur": [552, 601, 602, 605], "popul": 552, "inner": 552, "evolutionari": 552, "cycl": 552, "until": [552, 623], "conclud": 552, "met": [552, 581, 589, 616, 621], "yet": [552, 570, 603, 606, 609], "simplest": [552, 594], "launcher": [552, 554, 575, 576, 599, 624], "agent": 552, "nsga2": 552, "supernet": 552, "ofa_mbv3_d234_e346_k357_w1": 552, "acc": [552, 613, 621, 626], "mac": [552, 609], "num_ev": 552, "250": [552, 613], "results_csv_path": 552, "search_result": 552, "dataset_path": 552, "ilsvrc2012": 552, "aim": [552, 554, 591, 613, 620, 623, 624], "mobilenetv3": 552, "lt": [552, 573, 612, 626], "wmt": 552, "en": 552, "de": 552, "guidelin": [553, 554], "mainstream": [554, 624], "learn": [554, 555, 572, 573, 579, 583, 584, 585, 588, 589, 591, 593, 596, 597, 599, 602, 603, 606, 608, 613, 614, 616, 620, 621, 623, 624], "runtim": [554, 555, 556, 572, 578, 581, 584, 593, 598, 599, 615], "workflow": [554, 575, 585, 589, 603, 606, 621, 624], "particular": [554, 613], "wide": [554, 578, 589, 613, 616, 626], "xeon": [554, 585, 586, 589, 612, 614, 616, 617, 626], "scalabl": [554, 585, 589, 612, 614, 616, 617, 626], "flex": [554, 585], "amd": [554, 584, 585, 626], "arm": [554, 584, 585, 626], "nvidia": [554, 584, 585, 616, 626], "bloom": [554, 620], "176b": [554, 620], "7b": [554, 620], "stabl": [554, 570, 585, 613, 614], "diffus": [554, 614, 626], "gpt": [554, 613, 620, 626], "hub": [554, 578, 582, 599], "hug": [554, 614], "vision": [554, 579, 582, 595, 620], "coder": [554, 584, 592, 593, 596, 599, 602, 614], "cloud": [554, 614], "marketplac": [554, 609, 614], "googl": [554, 589, 614], "amazon": [554, 591, 599], "azur": [554, 614], "softwar": [554, 586, 589, 612, 613, 614, 618], "alibaba": [554, 598, 605, 606, 614], "tencent": [554, 614], "taco": [554, 614], "ai": [554, 591, 614, 617, 624], "ecosystem": [554, 614], "lightn": [554, 598], "pip": [554, 570, 577, 580, 582, 585, 593, 596, 601, 603, 605, 606, 618], "wget": [554, 580, 582], "storag": [554, 582, 587, 620], "googleapi": [554, 582], "v1_6": [554, 582], "mobilenet_v1_1": [554, 582], "0_224_frozen": [554, 582], "quick": [554, 581, 624, 625], "overview": 554, "notebook": [554, 624], "oneapi": [554, 585, 614, 624], "analyt": [554, 585, 614, 624], "jupyterlab": [554, 591, 597, 599, 601, 605, 624], "studio": [554, 599, 608, 624], "topic": 554, "blog": [554, 614], "medium": [554, 614], "enhanc": [554, 591, 614, 617], "apr": [554, 614], "2023": [554, 620, 626], "still": [554, 588, 614, 616, 617], "mlperf": [554, 614, 626], "5x": [554, 614], "heterogen": [554, 614], "power": [554, 575, 588, 602, 612, 614], "mar": [554, 614], "busi": [554, 614], "jan": [554, 614], "neurip": [554, 614], "oct": [554, 614], "quala": [554, 614], "minilm": [554, 614, 626], "legal": [554, 627], "secur": [554, 612, 614, 627], "idea": [554, 613, 620, 623], "feel": 554, "look": [554, 555, 581, 587, 625], "bridg": [555, 584], "vanilla": [555, 584], "abcadaptor": 555, "__init__": [555, 572, 573, 587, 623], "query_fw_cap": 555, "query_fused_pattern": 555, "he": 555, "besid": [555, 575], "describ": [555, 570, 581, 621], "past": 555, "mainten": 555, "difficult": [555, 620], "abil": [555, 573, 581, 620], "modif": [555, 572, 581, 596], "fragment": 555, "granular": [555, 581, 584, 594, 616, 620, 625], "semant": [555, 581], "mla": [555, 616], "becom": [555, 579, 613], "explor": 555, "inspect_tensor": 555, "op_list": [555, 621], "iteration_list": 555, "inspect_typ": 555, "save_to_disk": 555, "quantization_cfg": 555, "set_tensor": 555, "tensor_dict": 555, "diagnosis_help": 555, "easier": [570, 601, 605, 608, 614], "nightli": [570, 585], "pypi": [570, 585, 603, 606], "conda": [570, 580, 585, 594, 602, 618], "forg": [570, 580, 585], "git": [570, 580, 585], "clone": [570, 585, 601, 605], "cd": [570, 577, 585], "setup": [570, 581, 585, 603, 606, 613], "instruct": [570, 575, 585, 589, 603, 606, 614, 615, 616], "ui": 570, "5000": 570, "338174d13706855fc6924cec7b3a8ae8": 570, "listen": 570, "firewal": 570, "8080": 570, "tf_enable_onednn_opt": [570, 585], "cert": 570, "path_to_cert": 570, "crt": 570, "path_to_private_kei": 570, "encrypt": 570, "insecur": 570, "expos": 570, "forfeit": 570, "client": 570, "extern": 570, "threat": 570, "button": [570, 584, 602, 608], "click": [570, 582, 584, 591, 592, 599, 602, 608, 614, 621], "pop": [570, 608], "recognit": [570, 577, 579, 613, 621], "few": [570, 614, 623], "finish": [570, 602], "chosen": 570, "synthet": 570, "plu": 570, "icon": 570, "unfold": 570, "On": [570, 616], "panel": [570, 603, 606, 608], "navig": 570, "previou": [570, 588, 613, 618, 620, 621, 623, 624], "trash": 570, "visibl": 570, "cursor": 570, "prompt": [570, 577], "confirm": 570, "bottom": 570, "pencil": 570, "light": [570, 576], "blue": 570, "color": [570, 613], "That": 570, "row": [570, 620], "arrow": 570, "line": [570, 577, 584, 591, 596, 597, 621], "checkbox": 570, "column": [570, 620], "chart": [570, 616, 619, 621], "offer": [570, 573], "conveni": [570, 588], "variat": 570, "pictur": 570, "yellow": 570, "remind": 570, "ofa": 570, "fvcore": 570, "autograd": 570, "pymoo": 570, "numba": 570, "ilsvrc": 570, "hour": [570, 623], "One": [570, 573, 577, 584, 613, 614, 623], "dialog": 570, "organ": [570, 625], "cryptographi": 570, "linux": [571, 580, 602, 608], "x86_64": 571, "aarch64": 571, "encount": 572, "consum": 572, "previous": 572, "lack": [572, 580], "faster": [572, 574, 614, 623, 626], "treat": 572, "manner": [572, 575, 590], "300": [572, 573], "input_data": 572, "customis": [572, 573], "ensp": [573, 587, 622], "imagerecord": [573, 577, 625], "image_nam": 573, "cocorecord": 573, "gt": [573, 579, 620, 622], "int64": 573, "style_transf": 573, "content": 573, "tfrecorddataset": 573, "helloworld": [573, 622], "aid": 574, "deploy": [574, 591, 608, 620], "infrastructur": 574, "expens": [575, 588, 623], "deploi": [575, 588, 623], "mobil": [575, 588, 626], "produc": 575, "logit": 575, "softmax": 575, "l": [575, 621, 623], "kd": 575, "distanc": 575, "euclidean": 575, "kullback": 575, "leibler": 575, "patient": 575, "compact": [575, 588, 594, 613], "agnost": 575, "resourc": [575, 623], "convolut": [575, 614], "ia": 575, "attach": [575, 588, 620], "shallow": 575, "depth": [575, 617], "deepest": 575, "deeper": 575, "10006": [575, 576], "student_output": [575, 576], "student_loss": [575, 576], "training_func_for_nc": [575, 576], "distil_loss_conf": 575, "accordingli": [575, 599], "promis": [576, 588, 613], "huge": [576, 613], "heavi": 576, "booster": 576, "degrad": [576, 613, 623], "incorpor": [576, 623], "novel": [576, 591, 602, 608], "place": [576, 585, 613, 621], "illustr": 576, "comb": 576, "distillation_criterion": [576, 588, 611], "q_conf": 576, "horovod": 577, "builtin": 577, "program": [577, 586, 589, 591, 608], "addition": [577, 623], "enable_eager_execut": 577, "yaml_file_path": 577, "pre_process": 577, "simpli": [577, 590, 591, 593, 596, 608], "evaluation_result": 577, "evaluation_time_cost": 577, "partit": [577, 613], "distributedsampl": 577, "train_sampl": 577, "train_dataset": [577, 616], "num_replica": 577, "rank": 577, "train_load": 577, "train_kwarg": 577, "adadelta": 577, "distributedoptim": 577, "named_paramet": 577, "broadcast_paramet": 577, "root_rank": 577, "broadcast_optimizer_st": 577, "set_epoch": 577, "batch_idx": 577, "zero_grad": [577, 588, 613], "nll_loss": 577, "log_interv": 577, "0f": 577, "tloss": 577, "6f": 577, "dry_run": 577, "test_func": 577, "host": 577, "num_of_process": 577, "002": 577, "ssh": [577, 608], "readm": 577, "exactli": [577, 592], "resnet50_v1": [577, 588], "resizecropimagenet": [577, 622], "realiz": [577, 587, 610, 617, 619], "tow": 577, "node1": 577, "node2": 577, "TO": [577, 593], "your_node1_nam": 577, "your_node2_nam": 577, "resnet50_fp32_pretrained_model": 577, "nc_resnet50_v1": 577, "resnet": [577, 582, 626], "varieti": [578, 615, 623], "demonstr": [578, 591, 621], "10k": [578, 582], "speedup": [578, 584, 616], "2x": [578, 584, 612], "vnni": [578, 584, 615, 616], "exchang": 579, "howev": [579, 613, 620], "hope": 579, "briefli": [579, 588, 620], "matur": 579, "major": [579, 583, 616, 620], "reus": 579, "inc_model": [579, 590], "fp32_onnx_config": 579, "verifi": 579, "gap": [579, 590], "matmulintegertofloat": 579, "matmulinteg": 579, "toolchain": 580, "bare": 580, "metal": 580, "sudo": [580, 594], "apt": [580, 585, 594, 602], "python3": 580, "dev": [580, 601, 605], "distutil": 580, "essenti": 580, "libgl1": 580, "mesa": 580, "glx": 580, "libglib2": 580, "ln": 580, "sf": 580, "usr": 580, "incompat": 580, "88": [580, 619, 626], "80": [580, 620, 621, 626], "pyobject": 580, "reinstal": 580, "importerror": 580, "libgl": 580, "No": [580, 588, 612, 614], "yum": [580, 585], "opencv": [580, 602], "pend": 580, "27": [580, 585, 626], "alemb": [580, 585], "friendli": [581, 588, 620, 625], "dive": [581, 624], "unless": 581, "purpos": [581, 589, 608, 615, 616], "let": [581, 596, 613, 615, 625], "syntax": 581, "go": [581, 603, 606, 615, 622], "up1": 581, "up2": 581, "valid_mixed_precis": 581, "per_tensor": [581, 616, 625], "addn": 581, "grappler_optim": 581, "constfold": 581, "arithmet": 581, "debug_stripp": 581, "jupyt": [582, 599, 601, 602, 605], "lab": [582, 601, 602, 603, 605, 606], "concept": [583, 619, 624], "rather": 583, "custom_metr": 583, "refin": [583, 613], "These": 584, "broad": [584, 597, 624], "420": 584, "geomean": 584, "snippet": 584, "upload": [584, 603, 606], "dispatch": 584, "qintegerop": [584, 616], "plan": 584, "success": 585, "re": [585, 608], "uninstal": [585, 608], "frequent": 585, "ask": 585, "consolid": 585, "latest": [585, 614, 618], "eas": [585, 593, 614], "along": [585, 613], "streamlin": 585, "scienc": 585, "websit": 585, "anaconda": 585, "suit": [585, 609, 621], "esri": 585, "formerli": 585, "skylak": 585, "cascad": 585, "lake": [585, 589, 614], "cooper": [585, 589, 614], "ic": [585, 614], "sapphir": 585, "rapid": 585, "hbm": 585, "arctic": 585, "sound": 585, "pont": 585, "vecchio": 585, "cento": 585, "ubuntu": [585, 612], "04": [585, 612, 626], "fortensorflow": 585, "forpytorch": 585, "onednn": [585, 616], "newer": 585, "copyright": 586, "accompani": 586, "research": [586, 620], "wish": 586, "bibtex": 586, "misc": 586, "feng": 586, "tian": 586, "hanwen": 586, "haihao": [586, 613], "shen": [586, 613], "suyu": 586, "chen": 586, "titl": [586, 609], "howpublish": 586, "year": 586, "logo": [586, 612], "atom": 586, "phi": 586, "pentium": 586, "vtune": 586, "corpor": [586, 612], "subsidiari": [586, 612], "brand": [586, 612], "claim": [586, 612], "popularli": 587, "industri": [587, 614], "label_map": 587, "decis": 587, "ap": 587, "curv": 587, "turn": [587, 602], "target_boxes_num": 587, "str_label": 587, "int_label": 587, "inturn": 587, "cocomap": 587, "vocmap": 587, "categor": 587, "multiclass": 587, "multilabel": 587, "multi_metr": 587, "newmetr": 587, "reset": 587, "reflect": [587, 612, 622], "deliv": [588, 614], "upgrad": 588, "veri": [588, 609, 616, 623], "speed": [588, 599, 613, 614, 616, 623], "fundament": 588, "comprehens": [588, 624], "kind": 588, "resort": 588, "automodelforsequenceclassif": 588, "autotoken": 588, "val_dataset": [588, 616], "val_dataload": [588, 616], "worker": [588, 616], "ping_memori": [588, 616], "formul": 588, "effort": 588, "written": 588, "onnxrt_integ": [588, 625], "onnxrt_qlinear": [588, 625], "unsupport": [588, 613], "image_tensor": [588, 625], "post_training_dynamic_qu": [588, 615, 623], "1000": [588, 625], "2000": 588, "sampling_s": [588, 625], "model_wis": [588, 625], "op_dict": 588, "op_wis": [588, 621, 625], "sigopt_api_token": [588, 619, 623], "sigopt_project_id": [588, 619, 623], "sigopt_experiment_nam": [588, 619, 623], "demo": 588, "600": [588, 626], "training_arg": 588, "emul": [588, 616], "trainer": [588, 599], "similar": [588, 615, 620, 623, 625], "maxim": [588, 613, 623], "pruning_func": 588, "num_train_epoch": [588, 613], "train_dataload": [588, 613, 616], "n_gpu": 588, "gradient_accumulation_step": 588, "clip_grad_norm_": 588, "max_grad_norm": 588, "rate": [588, 613, 616], "start_epoch": [588, 615, 625], "end_epoch": [588, 615, 625], "97": [588, 620, 626], "newli": [588, 613], "on_after_optimizer_step": [588, 613], "layer3": [588, 613], "layer2": [588, 613, 616], "lr_schedul": [588, 613], "weight_decai": [588, 625], "0004": 588, "nesterov": [588, 625], "randomresizedcrop": [588, 622], "totensor": [588, 622], "485": 588, "456": 588, "406": 588, "nepoch": 588, "cnt": 588, "loss_sum": 588, "iter_bar": 588, "tqdm": 588, "desc": 588, "teacher_logit": 588, "train_fun": 588, "training_func": 588, "recent": [588, 589], "growth": [588, 589, 613], "complex": [588, 589, 613], "significantli": [588, 589, 613, 623], "bandwidth": [588, 589], "exit_polici": [588, 625], "determinist": 588, "arbitrari": [588, 611], "reli": [588, 620], "prune_conf": 588, "quantization_aware_training_conf": 588, "aforement": 588, "inset": 588, "p_conf": [588, 611], "ssd_mobilenet_v1": 588, "benchmarkconf": 588, "half": [589, 599], "sixteen": 589, "launch": [589, 609], "3rd": [589, 614, 616, 617], "gen": [589, 614, 617], "codenam": 589, "x86": 589, "avx512": [589, 616], "vcvtne2ps2bf16": 589, "vcvtneps2bf16": 589, "vdpbf16p": 589, "consequ": 589, "avx512_bf16": 589, "cuda": [589, 591, 593, 616], "persist": 590, "brought": [590, 592, 599, 616], "tf2": 590, "h5": 590, "hybridblock": 590, "0000": 590, "saved_result": 590, "simplifi": [591, 602, 608, 613], "subsequ": [591, 608], "acquir": 591, "analysi": [591, 608, 613, 619], "heurist": [591, 608], "rule": [591, 613], "great": 591, "facilit": 591, "autocast": 591, "simultan": [591, 611, 615], "my_model": 591, "no_grad": 591, "memory_format": 591, "112": [591, 626], "rand": [591, 620], "plugin": [591, 609], "aw": [591, 599, 614, 626], "sagemak": [591, 599], "inlin": [591, 596, 599], "neural_cod": [591, 593, 595, 596, 597, 599], "superbench": 591, "enjoi": [592, 596, 599], "rebuild": [592, 601, 605], "reload": [592, 609], "modern": 593, "democrat": [593, 614], "programm": [593, 599, 608], "nano_bf16_channels_last": 593, "resnet18": [593, 626], "nano_bf16_ipex_channels_last": 593, "nano_bf16_ipex": 593, "nano_bf16": 593, "nano_fp32_channels_last": 593, "nano_fp32_ipex_channels_last": 593, "nano_fp32_ipex": 593, "nano_gpu_to_cpu": 593, "nano_int8": 593, "nano_jit_bf16_channels_last": 593, "nano_jit_bf16_ipex_channels_last": 593, "nano_jit_bf16_ipex": 593, "nano_jit_bf16": 593, "nano_jit_fp32_channels_last": 593, "nano_jit_fp32_ipex_channels_last": 593, "nano_jit_fp32_ipex": 593, "nano_jit_fp32": 593, "nano_onnxruntime_fp32": 593, "nano_onnxruntime_int8_qlinear": 593, "openvino": 593, "nano_openvino_fp32": 593, "nano_openvino_int8": 593, "bc": [594, 602], "conda_prefix": 594, "echo": 594, "tradit": [594, 613], "libjemalloc": 594, "libiomp5": 594, "home": 594, "lib": 594, "ld_preload": 594, "malloc_conf": 594, "oversize_threshold": 594, "background_thread": 594, "metadata_thp": 594, "dirty_decay_m": 594, "9000000000": 594, "muzzy_decay_m": 594, "kmp_affin": 594, "kmp_blocktim": 594, "dnnl_primitive_cache_capac": 594, "cpufreq": 594, "scaling_governor": 594, "powersav": 594, "tee": 594, "pytorch_jit_script": [595, 598], "pytorch_channels_last": [595, 598], "run_bench": 595, "patch": [595, 608], "patch_path": 595, "your_patch_path": 595, "sweep": 595, "sweep_object": 595, "bench_config": 595, "bench_featur": 595, "sai": 596, "run_glu": [596, 597], "requisit": 596, "task_nam": [596, 597], "do_ev": [596, 597], "remain": 596, "itself": 596, "run_glue_optim": 596, "static_ipex": 596, "auto_qu": 597, "v4": [597, 626], "albert": [597, 626], "sst2": 597, "alexnet": [597, 626], "pytorch_amp": 598, "optimize_for_infer": 598, "pytorch_jit_trac": 598, "pytorch_jit_script_ofi": 598, "pytorch_jit_trace_ofi": 598, "torchdynamo": 598, "pytorch_torchdynamo_jit_script": 598, "pytorch_torchdynamo_jit_trac": 598, "pytorch_torchdynamo_jit_script_ofi": 598, "pytorch_torchdynamo_jit_trace_ofi": 598, "pytorch_inc_bf16": 598, "pytorch_inc_static_quant_fx": 598, "pytorch_inc_static_quant_ipex": 598, "pytorch_inc_dynamic_qu": 598, "pytorch_ipex_fp32": 598, "pytorch_ipex_bf16": 598, "pytorch_ipex_int8_static_qu": 598, "pytorch_ipex_int8_dynamic_qu": 598, "blade": 598, "disc": 598, "pytorch_aliblad": 598, "pytorch_lightning_bf16_cpu": 598, "tensorflow_amp": 598, "keras_amp": 598, "tensorflow_inc": 598, "keras_inc": 598, "onnx_inc_static_quant_qlinear": 598, "onnx_inc_static_quant_qdq": 598, "onnx_inc_dynamic_qu": 598, "optimum": [598, 599], "pytorch_inc_huggingface_optimum_stat": 598, "pytorch_inc_huggingface_optimum_dynam": 598, "intel_extension_for_transform": 598, "bigdl": [598, 599], "nano": [598, 599], "nano_": 598, "inc_auto": 598, "delight": 599, "announc": 599, "v": [599, 608, 613, 623, 625], "500": 599, "innov": [599, 614, 624], "isa": 599, "xpu": 599, "delta": 599, "acc_delta": 599, "int8_acc": 599, "fp32_acc": 599, "ext": [601, 603, 605, 606, 607], "nodej": [601, 605], "jlpm": [601, 605], "pin": [601, 605], "yarn": [601, 605], "npm": [601, 602, 605], "lieu": [601, 605], "labextens": [601, 602, 605], "typescript": [601, 605], "watch": [601, 605], "termin": [601, 602, 605], "immedi": [601, 605, 613], "refresh": [601, 605], "wait": [601, 605, 608], "rebuilt": [601, 605], "symlink": [601, 605], "down": 602, "enter": [602, 608], "blank": 602, "cell": 602, "gain": [602, 611, 614], "mkl": 602, "jemalloc": 602, "pip3": 602, "headless": 602, "pyproject": [603, 606], "toml": [603, 606], "twine": [603, 606], "whl": [603, 606], "dist": [603, 606], "sdist": [603, 606], "bdist_wheel": [603, 606], "frontend": [603, 606], "login": [603, 606, 619], "cut": [603, 606], "fork": [603, 606], "admin_github_token": [603, 606], "pypi_token": [603, 606], "npm_token": [603, 606], "secret": [603, 606], "draft": [603, 606], "changelog": [603, 606, 607], "pkg": [603, 606], "bot": [603, 606], "pick": [603, 606, 609], "feedstock": [603, 606], "hatch": 606, "notabl": 607, "vscode": [607, 609], "daili": 608, "give": [608, 623], "advantag": [608, 613, 615, 623], "remot": 608, "market": 608, "upper": 608, "sidebar": 608, "hover": 608, "track": [608, 619], "argpars": 608, "diff": 608, "manifest": 609, "declar": 609, "palett": 609, "registercommand": 609, "amodio": 609, "tsl": 609, "matcher": 609, "dbaeumer": 609, "eslint": 609, "press": 609, "f5": 609, "ctrl": [609, 626], "hello": 609, "world": 609, "breakpoint": 609, "consol": 609, "relaunch": 609, "toolbar": 609, "node_modul": 609, "viewlet": 609, "dropdown": 609, "runner": 609, "startup": 609, "bundl": 609, "multi_object": 610, "benefit": 611, "instanti": 611, "platinum": [612, 626], "8358": 612, "manufactur": 612, "m50cyp2sbstd": 612, "se5c620": 612, "86b": 612, "0005": 612, "2202160810": 612, "microcod": 612, "0xd000332": 612, "irq": 612, "60ghz": 612, "6chz": 612, "perf": 612, "512gb": 612, "16x32gb": 612, "ddr4": 612, "3200": 612, "mt": 612, "nic": 612, "1x": 612, "ethernet": 612, "100mb": 612, "i350": 612, "gigabit": 612, "drive": 612, "intel_ssdsckkb48": 612, "447": 612, "1g": 612, "publicli": 612, "degre": 612, "mark": 612, "trademark": 612, "neuron": 613, "art": 613, "grown": 613, "unpreced": 613, "increasingli": 613, "crucial": 613, "stand": 613, "delet": 613, "due": [613, 616, 620, 621], "commonli": 613, "salient": 613, "shrink": 613, "contextu": 613, "scene": 613, "haven": 613, "lowest": [613, 623], "formula": [613, 620], "emsp": 613, "partial": [613, 616], "downstream": 613, "finetun": 613, "prone": 613, "larger": [613, 620], "co": 613, "discourag": 613, "push": [613, 620], "penal": 613, "parameter": 613, "exemplifi": 613, "complement": 613, "fortieth": 613, "pruner2": 613, "mention": 613, "readi": 613, "hesit": 613, "sst": [613, 626], "25": [613, 620, 626], "63": [613, 620, 626], "35": [613, 626], "flan": 613, "t5": 613, "english": 613, "romanian": 613, "404": [613, 626], "381": 613, "yolov5": 613, "75": [613, 620, 626], "2x1": [613, 626], "801": 613, "7895": 613, "signific": [613, 614, 616, 620], "reduct": [613, 625], "namhoon": 613, "lee": 613, "thalaiyasingam": 613, "ajanthan": 613, "philip": 613, "torr": 613, "2019": 613, "zafrir": 613, "ofir": 613, "ariel": 613, "larei": 613, "boudoukh": 613, "mosh": 613, "wasserblat": 613, "preprint": [613, 620], "2111": 613, "05754": 613, "2021": 613, "amx": 614, "4th": 614, "mleffici": 614, "dec": 614, "wechat": 614, "deepen": 614, "foundat": 614, "intellig": 614, "vmware": 614, "virtual": 614, "applianc": 614, "bitnami": 614, "nov": 614, "sota": 614, "plug": 614, "twitter": 614, "linkedin": 614, "zone": 614, "land": 614, "gcp": 614, "pat": 614, "keynot": 614, "intelon": 614, "sep": 614, "chines": 614, "aug": 614, "purif": 614, "sacrif": 614, "jun": 614, "partner": 614, "feb": 614, "joint": 614, "msft": 614, "bilibili": 614, "gestalt": 614, "ml": 614, "doubl": 614, "reconstruct": 614, "abound": 614, "lpot": [614, 618], "nextplatform": 614, "cern": 614, "gan": 614, "3dgan": 614, "iml": 614, "workshop": 614, "asplo": 614, "18": [614, 626], "highli": 614, "intelcaff": 614, "aris": 615, "henc": 615, "onnxrt_qoper": 615, "quant_aware_train": 615, "weight_compress": [615, 625], "initial_spars": [615, 625], "prune_typ": [615, 625], "basic_magnitud": [615, 625], "update_frequ": 615, "prune_domain": 615, "tile_pattern_1x1": 615, "invent": 616, "int4": 616, "cost": 616, "theoret": 616, "affin": 616, "zeropoint": 616, "asymmetr": [616, 623], "255": [616, 620], "overflow": 616, "solv": [616, 618], "fbgemm": 616, "unseen": 616, "enough": 616, "peopl": 616, "mimic": 616, "fact": 616, "ultim": 616, "pain": 616, "lossi": 616, "understand": [616, 621, 624], "philosophi": 616, "neither": 616, "nor": 616, "val_load": 616, "avg": 616, "themselv": 616, "tensorrtexecutionprovid": 616, "cudaexecutionprovid": 616, "ON": 617, "forc": 617, "postposttrainingquantconfig": 617, "bf16wrapper": 617, "retrac": 617, "site": 618, "assist": 618, "sed": 618, "your_script": 618, "backbon": 619, "interact": 619, "sigopt_experiment_id": 619, "nc": [619, 623], "certain": 619, "suffici": 619, "ordinari": 619, "capac": 619, "receiv": 619, "latenc": [619, 623], "draw": [619, 623], "mobilenet": [619, 626], "durat": 619, "8266": 619, "8372": 619, "2132": 619, "83": [619, 620, 626], "7495": 619, "8299": 619, "8294": 619, "85": [619, 620, 626], "0837": 619, "8291": 619, "4469": 619, "llm": 620, "gigant": 620, "systemat": 620, "outlier": 620, "quantif": 620, "difficulti": 620, "mathemat": 620, "allevi": 620, "coarsest": 620, "finer": [620, 623], "matric": 620, "similarli": 620, "finest": 620, "consumpt": 620, "why": [620, 621], "suppos": 620, "6839": 620, "4741": 620, "7451": 620, "9301": 620, "1742": 620, "6835": 620, "frac": 620, "q_min": 620, "q_max": 620, "clip": 620, "zp": 620, "q_x": 620, "clamp_": 620, "round_": 620, "w_q": 620, "00296431384049356": 620, "59": [620, 626], "172": 620, "192": 620, "w_dq": 620, "1220": 620, "0500": 620, "1430": 620, "2570": 620, "1890": 620, "mseloss": 620, "1983354538679123": 620, "6848": 620, "4743": 620, "7440": 620, "9308": 620, "1749": 620, "385297635664756e": 620, "affect": 620, "quantize_per_channel": 620, "x_tmp": 620, "detach": 620, "keepdim": 620, "divid": [620, 623], "dequantize_per_channel": 620, "0029": [620, 626], "0036": 620, "162": [620, 626], "48": [620, 626], "72": [620, 626], "93": [620, 626], "207": [620, 626], "139": [620, 626], "6837": 620, "4734": 620, "1751": 620, "6821": 620, "637690492221736e": 620, "6376e": 620, "3852e": 620, "cdot": 620, "quantize_per_tensor_absmax": 620, "n_bit": 620, "div_": 620, "0806": 620, "7589": 620, "6038": 620, "3815": 620, "5040": 620, "7174": 620, "5444": 620, "5826": 620, "7772": 620, "5555": 620, "3740": 620, "3253": 620, "0698": 620, "1381": 620, "5972": 620, "0086": 620, "0737": 620, "8298": 620, "6883": 620, "2991": 620, "1601": 620, "6506": 620, "8246": 620, "3924": 620, "3845": 620, "8768": 620, "w_scale": 620, "x_q": 620, "x_scale": 620, "84": [620, 626], "0059755356051027775": 620, "89": [620, 626], "119": [620, 626], "57": [620, 626], "91": [620, 626], "006533813662827015": 620, "y_q": 620, "17509": 620, "7608": 620, "4055": 620, "16599": 620, "21020": 620, "10016": 620, "9860": 620, "22444": 620, "y_dq": 620, "6836": 620, "2970": 620, "1583": 620, "6481": 620, "8207": 620, "3911": 620, "3850": 620, "8763": 620, "prove": 620, "simplic": 620, "middl": 620, "denot": 620, "fp1": 620, "fp2": 620, "subsect": [620, 625], "explain": 620, "suppress": 620, "straightforward": 620, "intuit": 620, "x1": [620, 623], "x2": [620, 623], "herebi": 620, "sq": 620, "torchscript": 620, "overhead": 620, "stai": 620, "hardtanh": 620, "t5norm": 620, "llamanorm": 620, "groupnorm": 620, "lambada": 620, "sweet": 620, "spot": 620, "region": 620, "bigscienc": 620, "560m": 620, "65": [620, 626], "44": [620, 626], "66": [620, 626], "76": [620, 626], "1b7": 620, "71": [620, 626], "43": [620, 626], "67": [620, 626], "78": [620, 622, 626], "56": [620, 626], "58": [620, 626], "55": [620, 626], "3b": 620, "73": [620, 626], "69": [620, 626], "74": [620, 626], "7b1": 620, "77": [620, 626], "46": [620, 626], "82": [620, 626], "facebook": 620, "125m": 620, "70": [620, 626], "94": [620, 622, 626], "79": [620, 621, 626], "60": [620, 626], "81": [620, 626], "26": [620, 626], "39": [620, 626], "68": [620, 622, 626], "eleutherai": 620, "6b": 620, "96": [620, 626], "jason": 620, "wei": 620, "emerg": 620, "transact": 620, "yvinec": 620, "edouard": 620, "proceed": 620, "cvf": 620, "winter": 620, "xiui": 620, "2209": 620, "13325": 620, "xiao": 620, "guangxuan": 620, "2211": 620, "10438": 620, "discov": 621, "valuabl": 621, "instrument": 621, "writer": 621, "_pre_eval_hook": 621, "_post_eval_hook": 621, "submodul": 621, "whitelist": 621, "_recordingobserv": 621, "output_tensors_dict": 621, "current_it": 621, "get_tensor_valu": 621, "_observer_forward_hook": 621, "activation_post_process": 621, "_add_observer_": 621, "named_children": 621, "leaf": 621, "add_modul": 621, "register_forward_hook": 621, "dump_tim": 621, "summarywrit": 621, "_acc": 621, "tune_": 621, "add_graph": 621, "get_observer_dict": 621, "observer_dict": 621, "is_quant": 621, "add_histogram": 621, "bind_al": 621, "logdir_spec": 621, "tune_0_acc0": 621, "tune_1": 621, "tune_1_acc0": 621, "four": 621, "baseline_acc_0": 621, "776": 621, "tune_1_acc_0": 621, "095": 621, "runs_v3": 621, "image_recognit": 621, "run_tuning_dump_tensor": 621, "sh": 621, "inceptionv3": 621, "v0": 621, "cg": 621, "conv0": 621, "bash": 621, "run_tun": 621, "topologi": 621, "inception_v3": 621, "dataset_loc": 621, "inceptionv3_fp32_pretrained_model": 621, "nc_inceptionv3": 621, "inceptionv3_dump_tensor": 621, "poor": 621, "eightbit": 621, "disappear": 621, "centercrop": 622, "randomcrop": 622, "cropres": 622, "decodeimag": 622, "jpeg": 622, "encodejp": 622, "alignimagechannel": 622, "116": 622, "103": 622, "017": 622, "bilinearimagenet": [622, 625], "topilimag": 622, "padding_mod": 622, "border": 622, "pixel": 622, "colorjitt": 622, "bright": 622, "satur": 622, "hue": 622, "jitter": 622, "tondarrai": 622, "quickli": [623, 624], "travers": 623, "human": 623, "concret": 623, "insight": 623, "aggress": 623, "classic": 623, "six": 623, "At": 623, "ii": 623, "iii": 623, "post_training_auto_qu": 623, "iv": 623, "vi": 623, "increment": 623, "primari": 623, "highest": 623, "spent": 623, "hawq_v2_loss": 623, "model_loss": 623, "black": 623, "come": 623, "compli": 623, "posterior": 623, "focu": 623, "short": 623, "never": 623, "loglevel": 623, "endlessli": 623, "perspect": 623, "smbo": 623, "trial": 623, "appl": 623, "surrog": 623, "repeat": 623, "quantil": 623, "densiti": 623, "parzen": 623, "greatest": 623, "dai": 623, "next_tune_cfg": 623, "overridden": 623, "cluster": 623, "seamlessli": 623, "mpi": 623, "replic": 623, "replica": 623, "fed": 623, "handler": 623, "synchron": 623, "slave": 623, "abctunestrategi": 623, "familiar": 624, "mobilenet_v1": 625, "hyper": 625, "40": [625, 626], "06": [625, 626], "beta_1": 625, "beta_2": 625, "epsilon": 625, "sparsecategoricalcrossentropi": 625, "sum_over_batch_s": 625, "from_logit": 625, "54": [625, 626], "19": [625, 626], "overal": 625, "8380": 626, "visit": 626, "performancethroughput": 626, "sec": 626, "86": 626, "00": 626, "170": 626, "82x": 626, "92": 626, "85x": 626, "61": 626, "83x": 626, "densenet": 626, "121": 626, "274": 626, "148": 626, "161": 626, "132": 626, "39x": 626, "169": 626, "38": 626, "36": 626, "191": 626, "118": 626, "61x": 626, "cnn": 626, "incept": 626, "37": 626, "84x": 626, "resnet101": 626, "21x": 626, "70x": 626, "51": 626, "14x": 626, "955": 626, "328": 626, "91x": 626, "709": 626, "282": 626, "51x": 626, "v3": 626, "337": 626, "160": 626, "11x": 626, "438": 626, "204": 626, "223": 626, "105": 626, "12x": 626, "10x": 626, "47": 626, "1347": 626, "439": 626, "07x": 626, "1192": 626, "492": 626, "42x": 626, "412": 626, "376": 626, "662": 626, "397": 626, "66x": 626, "299": 626, "23": 626, "154": 626, "93x": 626, "476": 626, "227": 626, "fashion": 626, "2734": 626, "1299": 626, "498": 626, "178": 626, "79x": 626, "427": 626, "173": 626, "47x": 626, "resnetv2": 626, "194": 626, "146": 626, "33x": 626, "237": 626, "187": 626, "27x": 626, "152": 626, "155": 626, "38x": 626, "302": 626, "215": 626, "40x": 626, "346": 626, "312": 626, "277": 626, "60x": 626, "273": 626, "31x": 626, "18x": 626, "53x": 626, "24x": 626, "vgg16": 626, "219": 626, "vgg19": 626, "193": 626, "11506": 626, "9665": 626, "19x": 626, "xception": 626, "262": 626, "137": 626, "barthez": 626, "143": 626, "02x": 626, "20x": 626, "209": 626, "08x": 626, "221": 626, "stsb": 626, "218": 626, "16x": 626, "62": 626, "57x": 626, "55x": 626, "56x": 626, "53": 626, "89x": 626, "blendcnn": 626, "4885": 626, "3715": 626, "camembert": 626, "206": 626, "09x": 626, "deberta": 626, "125": 626, "366": 626, "197": 626, "399": 626, "flaubert": 626, "592": 626, "385": 626, "54x": 626, "wikitext": 626, "hubert": 626, "446": 626, "181": 626, "46x": 626, "layoutlm": 626, "longform": 626, "49": 626, "mbart": 626, "625": 626, "451": 626, "lvwerra": 626, "pegasu": 626, "samsum": 626, "peleenet": 626, "402": 626, "29x": 626, "pokemon": 626, "275": 626, "334": 626, "48x": 626, "reform": 626, "crime": 626, "punish": 626, "153": 626, "06x": 626, "657": 626, "327": 626, "01x": 626, "812": 626, "344": 626, "36x": 626, "360": 626, "23x": 626, "resnext101": 626, "32x8d": 626, "182": 626, "squeezebert": 626, "195": 626, "150": 626, "30x": 626, "75x": 626, "transfo": 626, "xl": 626, "41x": 626, "wave2vec2": 626, "22x": 626, "102": 626, "00x": 626, "115": 626, "17x": 626, "yolo": 626, "232": 626, "28x": 626, "664": 626, "329": 626, "832": 626, "338": 626, "433": 626, "164": 626, "63x": 626, "836": 626, "1396": 626, "463": 626, "90x": 626, "159": 626, "32x": 626, "968": 626, "473": 626, "05x": 626, "958": 626, "477": 626, "arcfac": 626, "126": 626, "78x": 626, "298": 626, "124": 626, "624": 626, "254": 626, "45x": 626, "caffenet": 626, "1432": 626, "540": 626, "65x": 626, "1460": 626, "357": 626, "265": 626, "35x": 626, "86x": 626, "524": 626, "duc": 626, "efficientnet": 626, "1211": 626, "758": 626, "856": 626, "762": 626, "emot": 626, "ferplu": 626, "925": 626, "694": 626, "fcn": 626, "25x": 626, "googlenet": 626, "771": 626, "571": 626, "763": 626, "579": 626, "hf": 626, "156": 626, "multilingu": 626, "99x": 626, "199": 626, "104": 626, "73x": 626, "449": 626, "74x": 626, "l12": 626, "h384": 626, "466": 626, "247": 626, "88x": 626, "l6": 626, "523": 626, "354": 626, "183": 626, "107": 626, "spanbert": 626, "208": 626, "795": 626, "780": 626, "591": 626, "515": 626, "15x": 626, "2370": 626, "1526": 626, "2216": 626, "1506": 626, "2078": 626, "1028": 626, "1762": 626, "76x": 626, "mobilenetv2": 626, "2615": 626, "1645": 626, "59x": 626, "2461": 626, "1674": 626, "766": 626, "431": 626, "77x": 626, "575": 626, "430": 626, "34x": 626, "747": 626, "564": 626, "594": 626, "590": 626, "643": 626, "253": 626, "shufflenet": 626, "2354": 626, "1461": 626, "1850": 626, "1368": 626, "squeezenet": 626, "2484": 626, "1912": 626, "2526": 626, "1911": 626, "710": 626, "549": 626, "622": 626, "497": 626, "652": 626, "507": 626, "573": 626, "470": 626, "527": 626, "396": 626, "68x": 626, "tini": 626, "647": 626, "514": 626, "26x": 626, "ultrafac": 626, "314": 626, "50x": 626, "304": 626, "316": 626, "315": 626, "zfnet": 626, "462": 626, "268": 626, "72x": 626, "465": 626, "62x": 626, "436": 626, "270": 626, "429": 626, "92x": 626, "94x": 626, "331": 626, "242": 626, "37x": 626, "98x": 626, "taskdataset": 626, "accuracyspars": 626, "ratiospars": 626, "commentsbalancedor": 626, "unbalanc": 626, "mini": 626, "answeringsquad": 626, "87f1": 626, "momentumunbalanc": 626, "momentumbalanc": 626, "90f1": 626, "59f1": 626, "23f1": 626, "classificationmrpc": 626, "52f1": 626, "26f1": 626, "classificationsst": 626, "61accuraci": 626, "recognitionimagenet": 626, "95top1": 626, "v5s6": 626, "detectioncoco": 626, "ap0": 626, "6ap0": 626, "393": 626, "584": 626, "34f1": 626, "lassounbalanc": 626, "classificationmnli": 626, "mm": 626, "allbalanc": 626, "32accuraci": 626, "sensitivitybalanc": 626, "classificationqqp": 626, "classificationqnli": 626, "54accuraci": 626, "em": 626, "7965": 626, "wideresnet40": 626, "9522": 626, "8178": 626, "0213": 626, "8235": 626, "027": 626, "5494": 626, "7153": 626, "5540": 626, "0046": 626, "5523": 626, "vgg": 626, "bn": 626, "7022": 626, "7415": 626, "7025": 626, "0003": 626, "wip": 626, "6739": 626, "7399": 626, "6845": 626, "0106": 626, "7034": 626, "8382": 626, "bilstm": 626, "8314": 626, "9403": 626, "9048": 626, "0734": 626, "7323": 626, "8256": 626, "8084": 626, "8814": 626, "7442": 626, "8371": 626, "0119": 626, "0115": 626, "tinybert": 626, "8018": 626, "8044": 626, "8363": 626, "8411": 626, "8025": 626, "8074": 626, "0007": 626, "0030": 626, "8626": 626, "8213": 626, "9091": 626, "8782": 626, "8684": 626, "8259": 626, "0058": 626, "distilroberta": 626, "6057": 626, "6455": 626, "6187": 626, "0130": 626, "c6i": 626, "2xlarg": 626, "c6a": 626, "c6g": 626, "a100cuda": 626, "executionprovid": 626}, "objects": {"": [[0, 0, 0, "-", "644ec953a7dc_pruning_support"], [1, 0, 0, "-", "6ece06672ed3_v1_14"], [2, 0, 0, "-", "6f0d0f71d92e_v1_13"], [3, 0, 0, "-", "9e89549a08c8_v1_11"], [4, 0, 0, "-", "block_mask"], [5, 0, 0, "-", "env"], [314, 0, 0, "-", "neural_compressor"]], "6ece06672ed3_v1_14": [[1, 1, 1, "ece06672ed3_v1_14.update_dataloaders", "update_dataloaders"], [1, 1, 1, "ece06672ed3_v1_14.update_transformations", "update_transformations"]], "env": [[5, 1, 1, "", "run_migrations_offline"], [5, 1, 1, "", "run_migrations_online"]], "neural_compressor": [[7, 0, 0, "-", "adaptor"], [156, 0, 0, "-", "algorithm"], [159, 0, 0, "-", "benchmark"], [163, 0, 0, "-", "compression"], [177, 0, 0, "-", "conf"], [179, 0, 0, "-", "config"], [180, 0, 0, "-", "contrib"], [205, 0, 0, "-", "data"], [261, 0, 0, "-", "experimental"], [321, 0, 0, "-", "metric"], [323, 0, 0, "-", "mix_precision"], [325, 0, 0, "-", "model"], [333, 0, 0, "-", "objective"], [334, 0, 0, "-", "quantization"], [342, 0, 0, "-", "strategy"], [354, 0, 0, "-", "template"], [355, 0, 0, "-", "training"], [359, 0, 0, "-", "utils"], [501, 0, 0, "-", "ux"], [547, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[6, 0, 0, "-", "adaptor"], [8, 0, 0, "-", "keras"], [12, 0, 0, "-", "keras_utils"], [16, 0, 0, "-", "mxnet"], [17, 0, 0, "-", "mxnet_utils"], [19, 0, 0, "-", "onnxrt"], [22, 0, 0, "-", "ox_utils"], [45, 0, 0, "-", "pytorch"], [46, 0, 0, "-", "query"], [47, 0, 0, "-", "tensorflow"], [111, 0, 0, "-", "tf_utils"], [149, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[6, 2, 1, "", "Adaptor"], [6, 1, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[8, 2, 1, "", "KerasAdaptor"], [8, 2, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras_utils": [[9, 0, 0, "-", "conv2d"], [10, 0, 0, "-", "dense"], [11, 0, 0, "-", "depthwise_conv2d"], [13, 0, 0, "-", "pool2d"], [14, 0, 0, "-", "quantizer"], [15, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[16, 2, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[18, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[18, 2, 1, "", "CalibCollector"], [18, 2, 1, "", "CalibData"], [18, 2, 1, "", "CollectorBase"], [18, 2, 1, "", "DataIterLoader"], [18, 2, 1, "", "DataLoaderWrap"], [18, 2, 1, "", "NameCollector"], [18, 2, 1, "", "OpType"], [18, 2, 1, "", "TensorCollector"], [18, 1, 1, "", "amp_convert"], [18, 1, 1, "", "calib_model"], [18, 1, 1, "", "check_mx_version"], [18, 1, 1, "", "combine_capabilities"], [18, 1, 1, "", "create_data_example"], [18, 1, 1, "", "distribute_calib_tensors"], [18, 1, 1, "", "ensure_list"], [18, 1, 1, "", "fuse"], [18, 1, 1, "", "get_framework_name"], [18, 1, 1, "", "is_model_quantized"], [18, 1, 1, "", "isiterable"], [18, 1, 1, "", "make_module"], [18, 1, 1, "", "make_nc_model"], [18, 1, 1, "", "make_symbol_block"], [18, 1, 1, "", "ndarray_to_device"], [18, 1, 1, "", "parse_tune_config"], [18, 1, 1, "", "prepare_dataloader"], [18, 1, 1, "", "prepare_model"], [18, 1, 1, "", "prepare_model_data"], [18, 1, 1, "", "quantize_sym_model"], [18, 1, 1, "", "query_quantizable_nodes"], [18, 1, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[19, 2, 1, "", "ONNXRT_IntegerOpsAdaptor"], [19, 2, 1, "", "ONNXRT_QDQAdaptor"], [19, 2, 1, "", "ONNXRT_QLinearOpsAdaptor"], [19, 2, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[20, 0, 0, "-", "calibration"], [21, 0, 0, "-", "calibrator"], [34, 0, 0, "-", "operators"], [43, 0, 0, "-", "quantizer"], [44, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[20, 2, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[21, 2, 1, "", "CalibratorBase"], [21, 2, 1, "", "HistogramCollector"], [21, 2, 1, "", "KLCalibrator"], [21, 2, 1, "", "MinMaxCalibrator"], [21, 2, 1, "", "PercentileCalibrator"], [21, 1, 1, "", "calib_registry"], [21, 1, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[23, 0, 0, "-", "activation"], [24, 0, 0, "-", "argmax"], [25, 0, 0, "-", "attention"], [26, 0, 0, "-", "binary_op"], [27, 0, 0, "-", "concat"], [28, 0, 0, "-", "conv"], [29, 0, 0, "-", "direct_q8"], [30, 0, 0, "-", "embed_layernorm"], [31, 0, 0, "-", "gather"], [32, 0, 0, "-", "gavgpool"], [33, 0, 0, "-", "gemm"], [35, 0, 0, "-", "lstm"], [36, 0, 0, "-", "matmul"], [37, 0, 0, "-", "maxpool"], [38, 0, 0, "-", "ops"], [39, 0, 0, "-", "pad"], [40, 0, 0, "-", "pooling"], [41, 0, 0, "-", "resize"], [42, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[23, 2, 1, "", "ActivationOperator"], [23, 2, 1, "", "QActivationOperator"], [23, 2, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[24, 2, 1, "", "ArgMaxOperator"], [24, 2, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[25, 2, 1, "", "AttentionOperator"], [25, 2, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[26, 2, 1, "", "BinaryOperator"], [26, 2, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[27, 2, 1, "", "ConcatOperator"], [27, 2, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[28, 2, 1, "", "ConvOperator"], [28, 2, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[29, 2, 1, "", "Direct8BitOperator"], [29, 2, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[30, 2, 1, "", "EmbedLayerNormalizationOperator"], [30, 2, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[31, 2, 1, "", "GatherOperator"], [31, 2, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[32, 2, 1, "", "GlobalAveragePoolOperator"], [32, 2, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[33, 2, 1, "", "GemmOperator"], [33, 2, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[35, 2, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[36, 2, 1, "", "MatMulOperator"], [36, 2, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[37, 2, 1, "", "MaxPoolOperator"], [37, 2, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[38, 2, 1, "", "Operator"], [38, 2, 1, "", "QOperator"], [38, 1, 1, "", "op_registry"], [38, 1, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[39, 2, 1, "", "PadOperator"], [39, 2, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[40, 2, 1, "", "PoolOperator"], [40, 2, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[41, 2, 1, "", "QResizeOperator"], [41, 2, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[42, 2, 1, "", "QSplitOperator"], [42, 2, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[43, 2, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[44, 2, 1, "", "QuantFormat"], [44, 2, 1, "", "QuantType"], [44, 2, 1, "", "QuantizationMode"], [44, 2, 1, "", "QuantizedInitializer"], [44, 2, 1, "", "QuantizedValue"], [44, 2, 1, "", "QuantizedValueType"], [44, 2, 1, "", "ValueInfo"], [44, 1, 1, "", "adjust_weights_per_input"], [44, 1, 1, "", "adjust_weights_per_op"], [44, 1, 1, "", "attribute_to_kwarg"], [44, 1, 1, "", "calculate_scale_zp"], [44, 1, 1, "", "cast_tensor"], [44, 1, 1, "", "collate_preds"], [44, 1, 1, "", "dequantize_data"], [44, 1, 1, "", "dequantize_data_with_scale_zero"], [44, 1, 1, "", "dtype_to_name"], [44, 1, 1, "", "find_by_name"], [44, 1, 1, "", "float_to_bfloat16"], [44, 1, 1, "", "float_to_float16"], [44, 1, 1, "", "fold_scale"], [44, 1, 1, "", "get_smooth_scales_per_input"], [44, 1, 1, "", "get_smooth_scales_per_op"], [44, 1, 1, "", "insert_smooth_mul_op_per_input"], [44, 1, 1, "", "insert_smooth_mul_op_per_op"], [44, 1, 1, "", "is_B_transposed"], [44, 1, 1, "", "make_dquant_node"], [44, 1, 1, "", "make_quant_node"], [44, 1, 1, "", "quantize_data"], [44, 1, 1, "", "quantize_data_per_channel"], [44, 1, 1, "", "quantize_data_with_scale_zero"], [44, 1, 1, "", "quantize_nparray"], [44, 1, 1, "", "remove_init_from_model_input"], [44, 1, 1, "", "split_shared_bias"], [44, 1, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.pytorch": [[45, 2, 1, "", "PyTorchAdaptor"], [45, 2, 1, "", "PyTorchQuery"], [45, 2, 1, "", "PyTorch_FXAdaptor"], [45, 2, 1, "", "PyTorch_IPEXAdaptor"], [45, 2, 1, "", "TemplateAdaptor"], [45, 1, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[46, 2, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[47, 2, 1, "", "TensorFlowAdaptor"], [47, 2, 1, "", "TensorflowQuery"], [47, 2, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[48, 0, 0, "-", "graph_converter"], [49, 0, 0, "-", "graph_converter_without_calib"], [87, 0, 0, "-", "graph_rewriter"], [110, 0, 0, "-", "graph_util"], [112, 0, 0, "-", "quantize_graph"], [139, 0, 0, "-", "quantize_graph_common"], [140, 0, 0, "-", "tf2onnx_converter"], [143, 0, 0, "-", "transform_graph"], [146, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, 2, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, 2, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[51, 0, 0, "-", "bf16"], [76, 0, 0, "-", "generic"], [86, 0, 0, "-", "graph_base"], [95, 0, 0, "-", "int8"], [101, 0, 0, "-", "onnx"], [106, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, 2, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[52, 0, 0, "-", "convert_add_to_biasadd"], [53, 0, 0, "-", "convert_layout"], [54, 0, 0, "-", "convert_leakyrelu"], [55, 0, 0, "-", "convert_nan_to_random"], [56, 0, 0, "-", "convert_placeholder_to_const"], [57, 0, 0, "-", "dequantize_cast_optimizer"], [58, 0, 0, "-", "dilated_contraction"], [59, 0, 0, "-", "dummy_biasadd"], [60, 0, 0, "-", "expanddims_optimizer"], [61, 0, 0, "-", "fetch_weight_from_reshape"], [62, 0, 0, "-", "fold_batch_norm"], [63, 0, 0, "-", "fold_constant"], [64, 0, 0, "-", "fuse_biasadd_add"], [65, 0, 0, "-", "fuse_column_wise_mul"], [66, 0, 0, "-", "fuse_conv_with_math"], [67, 0, 0, "-", "fuse_decomposed_bn"], [68, 0, 0, "-", "fuse_decomposed_in"], [69, 0, 0, "-", "fuse_gelu"], [70, 0, 0, "-", "fuse_layer_norm"], [71, 0, 0, "-", "fuse_pad_with_conv"], [72, 0, 0, "-", "fuse_pad_with_fp32_conv"], [73, 0, 0, "-", "fuse_reshape_transpose"], [74, 0, 0, "-", "graph_cse_optimizer"], [75, 0, 0, "-", "grappler_pass"], [77, 0, 0, "-", "insert_print_node"], [78, 0, 0, "-", "move_squeeze_after_relu"], [79, 0, 0, "-", "pre_optimize"], [80, 0, 0, "-", "remove_training_nodes"], [81, 0, 0, "-", "rename_batch_norm"], [82, 0, 0, "-", "split_shared_input"], [83, 0, 0, "-", "strip_equivalent_nodes"], [84, 0, 0, "-", "strip_unused_nodes"], [85, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[52, 2, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[53, 2, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[54, 2, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[55, 2, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[56, 2, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[57, 2, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, 2, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, 2, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, 2, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, 2, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, 2, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, 2, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, 2, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, 2, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, 2, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, 2, 1, "", "FuseDecomposedBNOptimizer"], [67, 1, 1, "", "bypass_reshape"], [67, 1, 1, "", "get_const_dim_count"], [67, 1, 1, "", "node_from_map"], [67, 1, 1, "", "node_name_from_input"], [67, 1, 1, "", "valid_reshape_inputs"], [67, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, 2, 1, "", "FuseDecomposedINOptimizer"], [68, 1, 1, "", "bypass_reshape"], [68, 1, 1, "", "get_const_dim_count"], [68, 1, 1, "", "node_from_map"], [68, 1, 1, "", "node_name_from_input"], [68, 1, 1, "", "valid_reshape_inputs"], [68, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, 2, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, 2, 1, "", "FuseLayerNormOptimizer"], [70, 1, 1, "", "node_from_map"], [70, 1, 1, "", "node_name_from_input"], [70, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, 2, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, 2, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, 2, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, 2, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, 2, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, 2, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, 2, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, 2, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, 2, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, 2, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, 2, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, 2, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, 2, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, 2, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, 2, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[88, 0, 0, "-", "freeze_fake_quant"], [89, 0, 0, "-", "freeze_value"], [90, 0, 0, "-", "freeze_value_without_calib"], [91, 0, 0, "-", "fuse_conv_redundant_dequantize"], [92, 0, 0, "-", "fuse_conv_requantize"], [93, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [94, 0, 0, "-", "fuse_matmul_requantize"], [96, 0, 0, "-", "meta_op_optimizer"], [97, 0, 0, "-", "post_hostconst_converter"], [98, 0, 0, "-", "post_quantized_op_cse"], [99, 0, 0, "-", "rnn_convert"], [100, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, 2, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, 2, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, 2, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, 2, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, 2, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, 2, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, 2, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [94, 2, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [94, 2, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [94, 2, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, 2, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, 2, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, 2, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, 2, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, 2, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[102, 0, 0, "-", "onnx_graph"], [103, 0, 0, "-", "onnx_node"], [104, 0, 0, "-", "onnx_schema"], [105, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, 2, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, 2, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, 2, 1, "", "OnnxOpSchema"], [104, 1, 1, "", "get_max_supported_opset_version"], [104, 1, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, 2, 1, "", "SeqType"], [105, 1, 1, "", "add_port_to_name"], [105, 1, 1, "", "are_shapes_equal"], [105, 1, 1, "", "assert_error"], [105, 1, 1, "", "compute_const_folding_using_tf"], [105, 1, 1, "", "convert_tensorflow_tensor_to_onnx"], [105, 1, 1, "", "find_opset"], [105, 1, 1, "", "get_index_from_strided_slice_of_shape"], [105, 1, 1, "", "get_subgraphs_from_onnx"], [105, 1, 1, "", "get_tensorflow_node_attr"], [105, 1, 1, "", "get_tensorflow_node_shape_attr"], [105, 1, 1, "", "get_tensorflow_tensor_data"], [105, 1, 1, "", "get_tensorflow_tensor_shape"], [105, 1, 1, "", "infer_onnx_shape_dtype"], [105, 1, 1, "", "initialize_name_counter"], [105, 1, 1, "", "is_list_or_tuple"], [105, 1, 1, "", "is_onnx_domain"], [105, 1, 1, "", "make_onnx_inputs_outputs"], [105, 1, 1, "", "make_onnx_shape"], [105, 1, 1, "", "map_numpy_to_onnx_dtype"], [105, 1, 1, "", "map_onnx_to_numpy_type"], [105, 1, 1, "", "map_tensorflow_dtype"], [105, 1, 1, "", "read_tensorflow_node_attrs"], [105, 1, 1, "", "save_protobuf"], [105, 1, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[107, 0, 0, "-", "insert_qdq_pattern"], [108, 0, 0, "-", "merge_duplicated_qdq"], [109, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, 2, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, 2, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, 2, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, 2, 1, "", "GraphAnalyzer"], [110, 2, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[114, 0, 0, "-", "qat"], [130, 0, 0, "-", "qdq"], [132, 0, 0, "-", "quantize_graph_base"], [133, 0, 0, "-", "quantize_graph_bn"], [134, 0, 0, "-", "quantize_graph_concatv2"], [135, 0, 0, "-", "quantize_graph_conv"], [136, 0, 0, "-", "quantize_graph_for_intel_cpu"], [137, 0, 0, "-", "quantize_graph_matmul"], [138, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, 0, 0, "-", "fake_quantize"], [115, 0, 0, "-", "quantize_config"], [116, 0, 0, "-", "quantize_helper"], [117, 0, 0, "-", "quantize_layers"], [122, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, 2, 1, "", "FakeQuantize"], [113, 2, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, 2, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, 1, 1, "", "init_quantize_config"], [116, 1, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[118, 0, 0, "-", "optimize_layer"], [119, 0, 0, "-", "quantize_layer_add"], [120, 0, 0, "-", "quantize_layer_base"], [121, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, 1, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, 2, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, 2, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, 2, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, 2, 1, "", "QuantizeWrapper"], [122, 2, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[123, 0, 0, "-", "fuse_qdq_bn"], [124, 0, 0, "-", "fuse_qdq_concatv2"], [125, 0, 0, "-", "fuse_qdq_conv"], [126, 0, 0, "-", "fuse_qdq_deconv"], [127, 0, 0, "-", "fuse_qdq_in"], [128, 0, 0, "-", "fuse_qdq_matmul"], [129, 0, 0, "-", "fuse_qdq_pooling"], [131, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, 2, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, 2, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, 2, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, 2, 1, "", "QuantizeGraphBase"], [132, 2, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, 2, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, 2, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[140, 2, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[141, 0, 0, "-", "bias_correction"], [142, 0, 0, "-", "graph_transform_base"], [144, 0, 0, "-", "insert_logging"], [145, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[141, 2, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[142, 2, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[144, 2, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[145, 2, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[146, 1, 1, "", "collate_tf_preds"], [146, 1, 1, "", "disable_random"], [146, 1, 1, "", "fix_ref_type_of_graph_def"], [146, 1, 1, "", "generate_feed_dict"], [146, 1, 1, "", "get_estimator_graph"], [146, 1, 1, "", "get_graph_def"], [146, 1, 1, "", "get_input_output_node_names"], [146, 1, 1, "", "get_model_input_shape"], [146, 1, 1, "", "get_tensor_by_name"], [146, 1, 1, "", "get_tensor_val_from_graph_node"], [146, 1, 1, "", "int8_node_name_reverse"], [146, 1, 1, "", "is_ckpt_format"], [146, 1, 1, "", "is_saved_model_format"], [146, 1, 1, "", "iterator_sess_run"], [146, 1, 1, "", "read_graph"], [146, 1, 1, "", "strip_equivalent_nodes"], [146, 1, 1, "", "strip_unused_nodes"], [146, 1, 1, "", "tf_diagnosis_helper"], [146, 1, 1, "", "version1_eq_version2"], [146, 1, 1, "", "version1_gt_version2"], [146, 1, 1, "", "version1_gte_version2"], [146, 1, 1, "", "version1_lt_version2"], [146, 1, 1, "", "version1_lte_version2"], [146, 1, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[147, 0, 0, "-", "bf16_convert"], [148, 0, 0, "-", "hawq_metric"], [150, 0, 0, "-", "model_wrapper"], [151, 0, 0, "-", "smooth_quant"], [152, 0, 0, "-", "symbolic_trace"], [153, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[147, 2, 1, "", "BF16ModuleWrapper"], [147, 1, 1, "", "Convert"], [147, 1, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[148, 2, 1, "", "HessianTrace"], [148, 2, 1, "", "Node_collector"], [148, 1, 1, "", "compare_weights"], [148, 1, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[151, 2, 1, "", "GraphTrace"], [151, 2, 1, "", "TorchSmoothQuant"], [151, 1, 1, "", "get_module"], [151, 1, 1, "", "set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[152, 1, 1, "", "symbolic_trace"], [152, 1, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.util": [[153, 1, 1, "", "append_attr"], [153, 1, 1, "", "auto_copy"], [153, 1, 1, "", "calculate_quant_min_max"], [153, 1, 1, "", "check_cfg_and_qconfig"], [153, 1, 1, "", "collate_torch_preds"], [153, 1, 1, "", "fetch_module"], [153, 1, 1, "", "generate_activation_observer"], [153, 1, 1, "", "get_embedding_contiguous"], [153, 1, 1, "", "get_example_input"], [153, 1, 1, "", "get_fallback_order"], [153, 1, 1, "", "get_mse_order_per_fp32"], [153, 1, 1, "", "get_mse_order_per_int8"], [153, 1, 1, "", "get_quantizable_ops_from_cfgs"], [153, 1, 1, "", "get_torch_version"], [153, 1, 1, "", "input2tuple"], [153, 1, 1, "", "is_fused_module"], [153, 1, 1, "", "match_datatype_pattern"], [153, 1, 1, "", "paser_cfgs"], [153, 1, 1, "", "set_module"], [153, 1, 1, "", "simple_inference"], [153, 1, 1, "", "update_sq_scale"]], "neural_compressor.algorithm": [[154, 0, 0, "-", "algorithm"], [155, 0, 0, "-", "fast_bias_correction"], [157, 0, 0, "-", "smooth_quant"], [158, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[154, 2, 1, "", "ALGORITHMS"], [154, 2, 1, "", "Algorithm"], [154, 2, 1, "", "AlgorithmScheduler"], [154, 1, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[155, 2, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[157, 2, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[158, 2, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[159, 1, 1, "", "benchmark_with_raw_cmd"], [159, 1, 1, "", "call_one"], [159, 1, 1, "", "config_instance"], [159, 1, 1, "", "fit"], [159, 1, 1, "", "generate_prefix"], [159, 1, 1, "", "get_architecture"], [159, 1, 1, "", "get_bounded_threads"], [159, 1, 1, "", "get_core_ids"], [159, 1, 1, "", "get_physical_ids"], [159, 1, 1, "", "get_threads"], [159, 1, 1, "", "get_threads_per_core"], [159, 1, 1, "", "run_instance"], [159, 1, 1, "", "set_all_env_var"], [159, 1, 1, "", "set_env_var"], [159, 1, 1, "", "summary_benchmark"]], "neural_compressor.compression": [[160, 0, 0, "-", "callbacks"], [162, 0, 0, "-", "distillation"], [165, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[160, 2, 1, "", "BaseCallbacks"], [160, 2, 1, "", "DistillationCallbacks"], [160, 2, 1, "", "PruningCallbacks"], [160, 2, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[160, 3, 1, "", "_epoch_ran"], [160, 3, 1, "", "best_model"], [160, 3, 1, "", "best_score"], [160, 3, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[161, 0, 0, "-", "criterions"]], "neural_compressor.compression.distillation.criterions": [[161, 2, 1, "", "Criterions"], [161, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [161, 2, 1, "", "KnowledgeDistillationFramework"], [161, 2, 1, "", "KnowledgeDistillationLoss"], [161, 2, 1, "", "PyTorchCriterions"], [161, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [161, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [161, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [161, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [161, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [161, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [161, 2, 1, "", "SelfKnowledgeDistillationLoss"], [161, 2, 1, "", "TensorflowCriterions"], [161, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [161, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [161, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [161, 1, 1, "", "criterion_registry"]], "neural_compressor.compression.pruner": [[164, 0, 0, "-", "criteria"], [167, 0, 0, "-", "model_slim"], [170, 0, 0, "-", "patterns"], [171, 0, 0, "-", "pruners"], [172, 0, 0, "-", "regs"], [173, 0, 0, "-", "schedulers"], [174, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[164, 2, 1, "", "GradientCriterion"], [164, 2, 1, "", "MagnitudeCriterion"], [164, 2, 1, "", "PruningCriterion"], [164, 2, 1, "", "RetrainFreeCriterion"], [164, 2, 1, "", "SnipCriterion"], [164, 2, 1, "", "SnipMomentumBlockCriterion"], [164, 2, 1, "", "SnipMomentumCriterion"], [164, 1, 1, "", "get_criterion"], [164, 1, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[164, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[164, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[164, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[164, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[164, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion": [[164, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[164, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[166, 0, 0, "-", "auto_slim"], [168, 0, 0, "-", "pattern_analyzer"], [169, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[166, 1, 1, "", "generate_ffn2_pruning_config"], [166, 1, 1, "", "generate_mha_pruning_config"], [166, 1, 1, "", "model_slim"], [166, 1, 1, "", "model_slim_ffn2"], [166, 1, 1, "", "model_slim_mha"], [166, 1, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[168, 2, 1, "", "ClassifierHeadSearcher"], [168, 2, 1, "", "JitBasicSearcher"], [168, 2, 1, "", "Linear2LinearSearcher"], [168, 2, 1, "", "RecipeSearcher"], [168, 2, 1, "", "SelfMHASearcher"], [168, 1, 1, "", "get_attributes"], [168, 1, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[168, 3, 1, "", "device"], [168, 3, 1, "", "flatten_static_graph"], [168, 3, 1, "", "model"], [168, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[168, 3, 1, "", "device"], [168, 3, 1, "", "flatten_static_graph"], [168, 3, 1, "", "model"], [168, 3, 1, "", "searching_results"], [168, 3, 1, "", "static_graph"], [168, 3, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[168, 3, 1, "", "current_pattern"], [168, 3, 1, "", "device"], [168, 3, 1, "", "flatten_static_graph"], [168, 3, 1, "", "model"], [168, 3, 1, "", "searching_results"], [168, 3, 1, "", "static_graph"], [168, 3, 1, "", "target_layers"], [168, 3, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[168, 3, 1, "", "model"], [168, 3, 1, "", "recipe"], [168, 3, 1, "", "searching_results"], [168, 3, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[168, 3, 1, "", "device"], [168, 3, 1, "", "flatten_static_graph"], [168, 3, 1, "", "model"], [168, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[169, 2, 1, "", "LinearCompression"], [169, 2, 1, "", "LinearCompressionIterator"], [169, 2, 1, "", "MHACompression"], [169, 2, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[169, 3, 1, "", "device"], [169, 3, 1, "", "layer_1"], [169, 3, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[169, 3, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[170, 2, 1, "", "BasePattern"], [170, 2, 1, "", "PatternNInM"], [170, 2, 1, "", "PatternNxM"], [170, 1, 1, "", "get_pattern"], [170, 1, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.BasePattern": [[170, 3, 1, "", "config"], [170, 3, 1, "", "invalid_layers"], [170, 3, 1, "", "is_global"], [170, 3, 1, "", "keep_mask_layers"], [170, 3, 1, "", "max_sparsity_ratio_per_op"], [170, 3, 1, "", "min_sparsity_ratio_per_op"], [170, 3, 1, "", "modules"], [170, 3, 1, "", "pattern"], [170, 3, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.PatternNInM": [[170, 3, 1, "", "M"], [170, 3, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.PatternNxM": [[170, 3, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[171, 2, 1, "", "BasePruner"], [171, 2, 1, "", "BasicPruner"], [171, 2, 1, "", "BlockMaskPruner"], [171, 2, 1, "", "PatternLockPruner"], [171, 2, 1, "", "ProgressivePruner"], [171, 2, 1, "", "RetrainFreePruner"], [171, 1, 1, "", "get_pruner"], [171, 1, 1, "", "parse_valid_pruner_types"], [171, 1, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.BasePruner": [[171, 3, 1, "", "config"], [171, 3, 1, "", "current_sparsity_ratio"], [171, 3, 1, "", "end_step"], [171, 3, 1, "", "global_step"], [171, 3, 1, "", "masks"], [171, 3, 1, "", "max_sparsity_ratio_per_op"], [171, 3, 1, "", "modules"], [171, 3, 1, "", "pattern"], [171, 3, 1, "", "pruning_frequency"], [171, 3, 1, "", "scheduler"], [171, 3, 1, "", "scores"], [171, 3, 1, "", "start_step"], [171, 3, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.BasicPruner": [[171, 3, 1, "", "criterion"], [171, 3, 1, "", "pattern"], [171, 3, 1, "", "reg"], [171, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.BlockMaskPruner": [[171, 3, 1, "", "criterion"], [171, 3, 1, "", "pattern"], [171, 3, 1, "", "reg"], [171, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.RetrainFreePruner": [[171, 3, 1, "", "criterion"], [171, 3, 1, "", "pattern"], [171, 3, 1, "", "reg"], [171, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.regs": [[172, 2, 1, "", "BaseReg"], [172, 2, 1, "", "GroupLasso"], [172, 1, 1, "", "get_reg"], [172, 1, 1, "", "get_reg_type"], [172, 1, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[172, 3, 1, "", "alpha"], [172, 3, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[173, 2, 1, "", "IterativeScheduler"], [173, 2, 1, "", "OneshotScheduler"], [173, 2, 1, "", "PruningScheduler"], [173, 1, 1, "", "get_scheduler"], [173, 1, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[173, 3, 1, "", "config"]], "neural_compressor.compression.pruner.utils": [[174, 1, 1, "", "check_config"], [174, 1, 1, "", "check_key_validity"], [174, 1, 1, "", "generate_pruner_config"], [174, 1, 1, "", "get_sparsity_ratio"], [174, 1, 1, "", "parse_last_linear"], [174, 1, 1, "", "parse_to_prune"], [174, 1, 1, "", "process_and_check_config"], [174, 1, 1, "", "process_config"], [174, 1, 1, "", "process_weight_config"], [174, 1, 1, "", "process_yaml_config"], [174, 1, 1, "", "reset_none_to_default"], [174, 1, 1, "", "update_params"]], "neural_compressor.conf": [[175, 0, 0, "-", "config"], [176, 0, 0, "-", "dotdict"], [178, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[175, 2, 1, "", "Benchmark_Conf"], [175, 2, 1, "", "Conf"], [175, 2, 1, "", "Distillation_Conf"], [175, 2, 1, "", "Graph_Optimization_Conf"], [175, 2, 1, "", "MixedPrecision_Conf"], [175, 2, 1, "", "NASConfig"], [175, 2, 1, "", "PrunerV2"], [175, 2, 1, "", "Pruning_Conf"], [175, 2, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[176, 2, 1, "", "DotDict"], [176, 1, 1, "", "deep_get"], [176, 1, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[178, 2, 1, "", "AccuracyCriterion"], [178, 2, 1, "", "BenchmarkConfig"], [178, 2, 1, "", "DistillationConfig"], [178, 2, 1, "", "KnowledgeDistillationLossConfig"], [178, 2, 1, "", "Options"], [178, 2, 1, "", "QuantizationConfig"], [178, 2, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[179, 2, 1, "", "AccuracyCriterion"], [179, 2, 1, "", "BenchmarkConfig"], [179, 2, 1, "", "DistillationConfig"], [179, 2, 1, "", "DotDict"], [179, 2, 1, "", "ExportConfig"], [179, 2, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [179, 2, 1, "", "Keras"], [179, 2, 1, "", "KnowledgeDistillationLossConfig"], [179, 2, 1, "", "MXNet"], [179, 2, 1, "", "MixedPrecisionConfig"], [179, 2, 1, "", "NASConfig"], [179, 2, 1, "", "ONNX"], [179, 2, 1, "", "ONNXQlinear2QDQConfig"], [179, 2, 1, "", "Options"], [179, 2, 1, "", "PostTrainingQuantConfig"], [179, 2, 1, "", "PyTorch"], [179, 2, 1, "", "QuantizationAwareTrainingConfig"], [179, 2, 1, "", "SelfKnowledgeDistillationLossConfig"], [179, 2, 1, "", "TF2ONNXConfig"], [179, 2, 1, "", "TensorFlow"], [179, 2, 1, "", "Torch2ONNXConfig"], [179, 2, 1, "", "TuningCriterion"], [179, 2, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[181, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[182, 0, 0, "-", "sigopt"], [183, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[182, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[183, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[188, 0, 0, "-", "dataloaders"], [200, 0, 0, "-", "datasets"], [204, 0, 0, "-", "filters"], [208, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[184, 0, 0, "-", "base_dataloader"], [185, 0, 0, "-", "dataloader"], [186, 0, 0, "-", "default_dataloader"], [187, 0, 0, "-", "fetcher"], [189, 0, 0, "-", "mxnet_dataloader"], [190, 0, 0, "-", "onnxrt_dataloader"], [191, 0, 0, "-", "pytorch_dataloader"], [192, 0, 0, "-", "sampler"], [193, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[184, 2, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[185, 2, 1, "", "DataLoader"], [185, 1, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[186, 2, 1, "", "DefaultDataLoader"], [186, 1, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[187, 2, 1, "", "Fetcher"], [187, 2, 1, "", "IndexFetcher"], [187, 2, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[189, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[190, 2, 1, "", "ONNXRTBertDataLoader"], [190, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[191, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[192, 2, 1, "", "BatchSampler"], [192, 2, 1, "", "IterableSampler"], [192, 2, 1, "", "Sampler"], [192, 2, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[193, 2, 1, "", "TFDataDataLoader"], [193, 2, 1, "", "TensorflowBertDataLoader"], [193, 2, 1, "", "TensorflowDataLoader"], [193, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[194, 0, 0, "-", "bert_dataset"], [195, 0, 0, "-", "coco_dataset"], [196, 0, 0, "-", "dataset"], [197, 0, 0, "-", "dummy_dataset"], [198, 0, 0, "-", "dummy_dataset_v2"], [199, 0, 0, "-", "imagenet_dataset"], [201, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[194, 2, 1, "", "InputFeatures"], [194, 2, 1, "", "ONNXRTBertDataset"], [194, 2, 1, "", "ParseDecodeBert"], [194, 2, 1, "", "PytorchBertDataset"], [194, 2, 1, "", "TensorflowBertDataset"], [194, 2, 1, "", "TensorflowModelZooBertDataset"], [194, 1, 1, "", "convert_examples_to_features"], [194, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[195, 2, 1, "", "COCONpy"], [195, 2, 1, "", "COCORaw"], [195, 2, 1, "", "COCORecordDataset"], [195, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[196, 2, 1, "", "CIFAR10"], [196, 2, 1, "", "CIFAR100"], [196, 2, 1, "", "Dataset"], [196, 2, 1, "", "Datasets"], [196, 2, 1, "", "FashionMNIST"], [196, 2, 1, "", "ImageFolder"], [196, 2, 1, "", "IterableDataset"], [196, 2, 1, "", "MNIST"], [196, 2, 1, "", "MXNetCIFAR10"], [196, 2, 1, "", "MXNetCIFAR100"], [196, 2, 1, "", "MXNetDatasets"], [196, 2, 1, "", "MXNetFashionMNIST"], [196, 2, 1, "", "MXNetImageFolder"], [196, 2, 1, "", "MXNetMNIST"], [196, 2, 1, "", "ONNXRTITDatasets"], [196, 2, 1, "", "ONNXRTQLDatasets"], [196, 2, 1, "", "PyTorchDatasets"], [196, 2, 1, "", "PytorchCIFAR10"], [196, 2, 1, "", "PytorchCIFAR100"], [196, 2, 1, "", "PytorchFashionMNIST"], [196, 2, 1, "", "PytorchMNIST"], [196, 2, 1, "", "PytorchMxnetWrapDataset"], [196, 2, 1, "", "PytorchMxnetWrapFunction"], [196, 2, 1, "", "Tensorflow"], [196, 2, 1, "", "TensorflowCIFAR10"], [196, 2, 1, "", "TensorflowCIFAR100"], [196, 2, 1, "", "TensorflowDatasets"], [196, 2, 1, "", "TensorflowFashionMNIST"], [196, 2, 1, "", "TensorflowImageRecord"], [196, 2, 1, "", "TensorflowMNIST"], [196, 2, 1, "", "TensorflowTFRecordDataset"], [196, 2, 1, "", "TensorflowVOCRecord"], [196, 1, 1, "", "calculate_md5"], [196, 1, 1, "", "check_integrity"], [196, 1, 1, "", "dataset_registry"], [196, 1, 1, "", "download_url"], [196, 4, 1, "", "framework_datasets"], [196, 1, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[197, 2, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[198, 2, 1, "", "DummyDataset"], [198, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[199, 2, 1, "", "ImagenetRaw"], [199, 2, 1, "", "MXNetImagenetRaw"], [199, 2, 1, "", "ONNXRTImagenetDataset"], [199, 2, 1, "", "PytorchImagenetRaw"], [199, 2, 1, "", "TensorflowImagenetDataset"], [199, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[201, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[202, 0, 0, "-", "coco_filter"], [203, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[202, 2, 1, "", "LabelBalanceCOCORawFilter"], [202, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[203, 2, 1, "", "FILTERS"], [203, 2, 1, "", "Filter"], [203, 2, 1, "", "MXNetFilters"], [203, 2, 1, "", "ONNXRTITFilters"], [203, 2, 1, "", "ONNXRTQLFilters"], [203, 2, 1, "", "PyTorchFilters"], [203, 2, 1, "", "TensorflowFilters"], [203, 1, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[206, 0, 0, "-", "coco_transform"], [207, 0, 0, "-", "imagenet_transform"], [209, 0, 0, "-", "postprocess"], [210, 0, 0, "-", "tokenization"], [211, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[206, 2, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[207, 2, 1, "", "BilinearImagenetTransform"], [207, 2, 1, "", "LabelShift"], [207, 2, 1, "", "ONNXResizeCropImagenetTransform"], [207, 2, 1, "", "OnnxBilinearImagenetTransform"], [207, 2, 1, "", "ParseDecodeImagenet"], [207, 2, 1, "", "ParseDecodeImagenetTransform"], [207, 2, 1, "", "QuantizedInput"], [207, 2, 1, "", "ResizeWithAspectRatio"], [207, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.postprocess": [[209, 2, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[210, 2, 1, "", "BasicTokenizer"], [210, 2, 1, "", "FullTokenizer"], [210, 2, 1, "", "WordpieceTokenizer"], [210, 1, 1, "", "convert_by_vocab"], [210, 1, 1, "", "convert_to_unicode"], [210, 1, 1, "", "load_vocab"], [210, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[211, 2, 1, "", "AlignImageChannelTransform"], [211, 2, 1, "", "BaseTransform"], [211, 2, 1, "", "CastONNXTransform"], [211, 2, 1, "", "CastPyTorchTransform"], [211, 2, 1, "", "CastTFTransform"], [211, 2, 1, "", "CenterCropTFTransform"], [211, 2, 1, "", "CenterCropTransform"], [211, 2, 1, "", "CollectTransform"], [211, 2, 1, "", "ComposeTransform"], [211, 2, 1, "", "CropResizeTFTransform"], [211, 2, 1, "", "CropResizeTransform"], [211, 2, 1, "", "CropToBoundingBox"], [211, 2, 1, "", "InputFeatures"], [211, 2, 1, "", "MXNetCropResizeTransform"], [211, 2, 1, "", "MXNetCropToBoundingBox"], [211, 2, 1, "", "MXNetNormalizeTransform"], [211, 2, 1, "", "MXNetTransforms"], [211, 2, 1, "", "MXNetTranspose"], [211, 2, 1, "", "NormalizeTFTransform"], [211, 2, 1, "", "NormalizeTransform"], [211, 2, 1, "", "ONNXRTCropToBoundingBox"], [211, 2, 1, "", "ONNXRTITTransforms"], [211, 2, 1, "", "ONNXRTQLTransforms"], [211, 2, 1, "", "PaddedCenterCropTransform"], [211, 2, 1, "", "ParseDecodeVocTransform"], [211, 2, 1, "", "PyTorchAlignImageChannel"], [211, 2, 1, "", "PyTorchCropResizeTransform"], [211, 2, 1, "", "PyTorchNormalizeTransform"], [211, 2, 1, "", "PyTorchTransforms"], [211, 2, 1, "", "PyTorchTranspose"], [211, 2, 1, "", "PytorchMxnetTransform"], [211, 2, 1, "", "PytorchMxnetWrapFunction"], [211, 2, 1, "", "RandomCropTFTransform"], [211, 2, 1, "", "RandomCropTransform"], [211, 2, 1, "", "RandomHorizontalFlip"], [211, 2, 1, "", "RandomResizedCropMXNetTransform"], [211, 2, 1, "", "RandomResizedCropPytorchTransform"], [211, 2, 1, "", "RandomResizedCropTFTransform"], [211, 2, 1, "", "RandomResizedCropTransform"], [211, 2, 1, "", "RandomVerticalFlip"], [211, 2, 1, "", "RescaleKerasPretrainTransform"], [211, 2, 1, "", "RescaleTFTransform"], [211, 2, 1, "", "RescaleTransform"], [211, 2, 1, "", "ResizeMXNetTransform"], [211, 2, 1, "", "ResizePytorchTransform"], [211, 2, 1, "", "ResizeTFTransform"], [211, 2, 1, "", "ResizeTransform"], [211, 2, 1, "", "ResizeWithRatio"], [211, 2, 1, "", "SquadExample"], [211, 2, 1, "", "TFModelZooCollectTransform"], [211, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [211, 2, 1, "", "TFSquadV1PostTransform"], [211, 2, 1, "", "TRANSFORMS"], [211, 2, 1, "", "TensorflowCropToBoundingBox"], [211, 2, 1, "", "TensorflowRandomHorizontalFlip"], [211, 2, 1, "", "TensorflowRandomVerticalFlip"], [211, 2, 1, "", "TensorflowResizeWithRatio"], [211, 2, 1, "", "TensorflowTransform"], [211, 2, 1, "", "TensorflowTransforms"], [211, 2, 1, "", "TensorflowTranspose"], [211, 2, 1, "", "TensorflowWrapFunction"], [211, 2, 1, "", "ToArray"], [211, 2, 1, "", "ToNDArrayTransform"], [211, 2, 1, "", "Transforms"], [211, 2, 1, "", "Transpose"], [211, 1, 1, "", "convert_examples_to_features"], [211, 1, 1, "", "get_final_text"], [211, 1, 1, "", "get_torchvision_map"], [211, 1, 1, "", "read_squad_examples"], [211, 1, 1, "", "transform_registry"]], "neural_compressor.experimental": [[212, 0, 0, "-", "benchmark"], [215, 0, 0, "-", "common"], [221, 0, 0, "-", "component"], [222, 0, 0, "-", "compression"], [224, 0, 0, "-", "contrib"], [249, 0, 0, "-", "data"], [254, 0, 0, "-", "distillation"], [255, 0, 0, "-", "export"], [260, 0, 0, "-", "graph_optimization"], [268, 0, 0, "-", "metric"], [270, 0, 0, "-", "mixed_precision"], [271, 0, 0, "-", "model_conversion"], [274, 0, 0, "-", "nas"], [280, 0, 0, "-", "pruner_legacy"], [284, 0, 0, "-", "pruning"], [285, 0, 0, "-", "pruning_recipes"], [289, 0, 0, "-", "pruning_v2"], [290, 0, 0, "-", "pytorch_pruner"], [297, 0, 0, "-", "quantization"], [298, 0, 0, "-", "scheduler"], [303, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[212, 2, 1, "", "Benchmark"], [212, 1, 1, "", "get_architecture"], [212, 1, 1, "", "get_bounded_threads"], [212, 1, 1, "", "get_core_ids"], [212, 1, 1, "", "get_physical_ids"], [212, 1, 1, "", "get_threads"], [212, 1, 1, "", "get_threads_per_core"], [212, 1, 1, "", "set_all_env_var"], [212, 1, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[213, 0, 0, "-", "criterion"], [214, 0, 0, "-", "dataloader"], [216, 0, 0, "-", "metric"], [217, 0, 0, "-", "model"], [218, 0, 0, "-", "optimizer"], [219, 0, 0, "-", "postprocess"], [220, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[213, 2, 1, "", "Criterions"], [213, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [213, 2, 1, "", "KnowledgeDistillationFramework"], [213, 2, 1, "", "KnowledgeDistillationLoss"], [213, 2, 1, "", "PyTorchCriterions"], [213, 2, 1, "", "PyTorchCrossEntropyLoss"], [213, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [213, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [213, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [213, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [213, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [213, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [213, 2, 1, "", "SelfKnowledgeDistillationLoss"], [213, 2, 1, "", "TensorFlowCrossEntropyLoss"], [213, 2, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [213, 2, 1, "", "TensorflowCriterions"], [213, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [213, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [213, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [213, 1, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[214, 2, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[216, 2, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[217, 2, 1, "", "Model"], [217, 1, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[218, 2, 1, "", "Optimizers"], [218, 2, 1, "", "PyTorchOptimizers"], [218, 2, 1, "", "PyTorchSGD"], [218, 2, 1, "", "TensorFlowAdam"], [218, 2, 1, "", "TensorFlowAdamW"], [218, 2, 1, "", "TensorFlowSGD"], [218, 2, 1, "", "TensorflowOptimizers"], [218, 1, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[219, 2, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[220, 1, 1, "", "get_activation"], [220, 1, 1, "", "record_output"]], "neural_compressor.experimental.component": [[221, 2, 1, "", "Component"]], "neural_compressor.experimental.compression": [[223, 0, 0, "-", "pruning"]], "neural_compressor.experimental.compression.pruning": [[223, 1, 1, "", "prepare_pruning"], [223, 1, 1, "", "save"]], "neural_compressor.experimental.contrib": [[225, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[226, 0, 0, "-", "sigopt"], [227, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[226, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[227, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[232, 0, 0, "-", "dataloaders"], [244, 0, 0, "-", "datasets"], [248, 0, 0, "-", "filters"], [251, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[228, 0, 0, "-", "base_dataloader"], [229, 0, 0, "-", "dataloader"], [230, 0, 0, "-", "default_dataloader"], [231, 0, 0, "-", "fetcher"], [233, 0, 0, "-", "mxnet_dataloader"], [234, 0, 0, "-", "onnxrt_dataloader"], [235, 0, 0, "-", "pytorch_dataloader"], [236, 0, 0, "-", "sampler"], [237, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[228, 2, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[230, 2, 1, "", "DefaultDataLoader"], [230, 1, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[231, 2, 1, "", "Fetcher"], [231, 2, 1, "", "IndexFetcher"], [231, 2, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[233, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[234, 2, 1, "", "ONNXRTBertDataLoader"], [234, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[235, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[236, 2, 1, "", "BatchSampler"], [236, 2, 1, "", "IterableSampler"], [236, 2, 1, "", "Sampler"], [236, 2, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[237, 2, 1, "", "TFDataDataLoader"], [237, 2, 1, "", "TensorflowBertDataLoader"], [237, 2, 1, "", "TensorflowDataLoader"], [237, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[238, 0, 0, "-", "bert_dataset"], [239, 0, 0, "-", "coco_dataset"], [240, 0, 0, "-", "dataset"], [241, 0, 0, "-", "dummy_dataset"], [242, 0, 0, "-", "dummy_dataset_v2"], [243, 0, 0, "-", "imagenet_dataset"], [245, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[238, 2, 1, "", "InputFeatures"], [238, 2, 1, "", "ONNXRTBertDataset"], [238, 2, 1, "", "ParseDecodeBert"], [238, 2, 1, "", "PytorchBertDataset"], [238, 2, 1, "", "TensorflowBertDataset"], [238, 2, 1, "", "TensorflowModelZooBertDataset"], [238, 1, 1, "", "convert_examples_to_features"], [238, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[239, 2, 1, "", "COCONpy"], [239, 2, 1, "", "COCORaw"], [239, 2, 1, "", "COCORecordDataset"], [239, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[240, 2, 1, "", "CIFAR10"], [240, 2, 1, "", "CIFAR100"], [240, 2, 1, "", "Dataset"], [240, 2, 1, "", "Datasets"], [240, 2, 1, "", "FashionMNIST"], [240, 2, 1, "", "ImageFolder"], [240, 2, 1, "", "IterableDataset"], [240, 2, 1, "", "MNIST"], [240, 2, 1, "", "MXNetCIFAR10"], [240, 2, 1, "", "MXNetCIFAR100"], [240, 2, 1, "", "MXNetDatasets"], [240, 2, 1, "", "MXNetFashionMNIST"], [240, 2, 1, "", "MXNetImageFolder"], [240, 2, 1, "", "MXNetMNIST"], [240, 2, 1, "", "ONNXRTITDatasets"], [240, 2, 1, "", "ONNXRTQLDatasets"], [240, 2, 1, "", "PyTorchDatasets"], [240, 2, 1, "", "PytorchCIFAR10"], [240, 2, 1, "", "PytorchCIFAR100"], [240, 2, 1, "", "PytorchFashionMNIST"], [240, 2, 1, "", "PytorchMNIST"], [240, 2, 1, "", "PytorchMxnetWrapDataset"], [240, 2, 1, "", "PytorchMxnetWrapFunction"], [240, 2, 1, "", "TensorflowCIFAR10"], [240, 2, 1, "", "TensorflowCIFAR100"], [240, 2, 1, "", "TensorflowDatasets"], [240, 2, 1, "", "TensorflowFashionMNIST"], [240, 2, 1, "", "TensorflowImageFolder"], [240, 2, 1, "", "TensorflowImageRecord"], [240, 2, 1, "", "TensorflowMNIST"], [240, 2, 1, "", "TensorflowTFRecordDataset"], [240, 2, 1, "", "TensorflowVOCRecord"], [240, 1, 1, "", "calculate_md5"], [240, 1, 1, "", "check_integrity"], [240, 1, 1, "", "dataset_registry"], [240, 1, 1, "", "download_url"], [240, 4, 1, "", "framework_datasets"], [240, 1, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[241, 2, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[242, 2, 1, "", "DummyDataset"], [242, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[243, 2, 1, "", "ImagenetRaw"], [243, 2, 1, "", "MXNetImagenetRaw"], [243, 2, 1, "", "ONNXRTImagenetDataset"], [243, 2, 1, "", "PytorchImagenetRaw"], [243, 2, 1, "", "TensorflowImagenetDataset"], [243, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[245, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[246, 0, 0, "-", "coco_filter"], [247, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[246, 2, 1, "", "LabelBalanceCOCORawFilter"], [246, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[247, 2, 1, "", "FILTERS"], [247, 2, 1, "", "Filter"], [247, 2, 1, "", "MXNetFilters"], [247, 2, 1, "", "ONNXRTITFilters"], [247, 2, 1, "", "ONNXRTQLFilters"], [247, 2, 1, "", "PyTorchFilters"], [247, 2, 1, "", "TensorflowFilters"], [247, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[250, 0, 0, "-", "imagenet_transform"], [252, 0, 0, "-", "tokenization"], [253, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[250, 2, 1, "", "BilinearImagenetTransform"], [250, 2, 1, "", "LabelShift"], [250, 2, 1, "", "ONNXResizeCropImagenetTransform"], [250, 2, 1, "", "OnnxBilinearImagenetTransform"], [250, 2, 1, "", "ParseDecodeImagenet"], [250, 2, 1, "", "ParseDecodeImagenetTransform"], [250, 2, 1, "", "QuantizedInput"], [250, 2, 1, "", "ResizeWithAspectRatio"], [250, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[252, 2, 1, "", "BasicTokenizer"], [252, 2, 1, "", "FullTokenizer"], [252, 2, 1, "", "WordpieceTokenizer"], [252, 1, 1, "", "convert_by_vocab"], [252, 1, 1, "", "convert_to_unicode"], [252, 1, 1, "", "load_vocab"], [252, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[253, 2, 1, "", "AlignImageChannelTransform"], [253, 2, 1, "", "BaseTransform"], [253, 2, 1, "", "CastONNXTransform"], [253, 2, 1, "", "CastPyTorchTransform"], [253, 2, 1, "", "CastTFTransform"], [253, 2, 1, "", "CenterCropTFTransform"], [253, 2, 1, "", "CenterCropTransform"], [253, 2, 1, "", "CollectTransform"], [253, 2, 1, "", "ComposeTransform"], [253, 2, 1, "", "CropResizeTFTransform"], [253, 2, 1, "", "CropResizeTransform"], [253, 2, 1, "", "CropToBoundingBox"], [253, 2, 1, "", "InputFeatures"], [253, 2, 1, "", "MXNetCropResizeTransform"], [253, 2, 1, "", "MXNetCropToBoundingBox"], [253, 2, 1, "", "MXNetNormalizeTransform"], [253, 2, 1, "", "MXNetTransforms"], [253, 2, 1, "", "MXNetTranspose"], [253, 2, 1, "", "NormalizeTFTransform"], [253, 2, 1, "", "NormalizeTransform"], [253, 2, 1, "", "ONNXRTCropToBoundingBox"], [253, 2, 1, "", "ONNXRTITTransforms"], [253, 2, 1, "", "ONNXRTQLTransforms"], [253, 2, 1, "", "PaddedCenterCropTransform"], [253, 2, 1, "", "ParseDecodeVocTransform"], [253, 2, 1, "", "PyTorchAlignImageChannel"], [253, 2, 1, "", "PyTorchCropResizeTransform"], [253, 2, 1, "", "PyTorchNormalizeTransform"], [253, 2, 1, "", "PyTorchTransforms"], [253, 2, 1, "", "PyTorchTranspose"], [253, 2, 1, "", "PytorchMxnetTransform"], [253, 2, 1, "", "PytorchMxnetWrapFunction"], [253, 2, 1, "", "RandomCropTFTransform"], [253, 2, 1, "", "RandomCropTransform"], [253, 2, 1, "", "RandomHorizontalFlip"], [253, 2, 1, "", "RandomResizedCropMXNetTransform"], [253, 2, 1, "", "RandomResizedCropPytorchTransform"], [253, 2, 1, "", "RandomResizedCropTFTransform"], [253, 2, 1, "", "RandomResizedCropTransform"], [253, 2, 1, "", "RandomVerticalFlip"], [253, 2, 1, "", "RescaleKerasPretrainTransform"], [253, 2, 1, "", "RescaleTFTransform"], [253, 2, 1, "", "RescaleTransform"], [253, 2, 1, "", "ResizeMXNetTransform"], [253, 2, 1, "", "ResizePytorchTransform"], [253, 2, 1, "", "ResizeTFTransform"], [253, 2, 1, "", "ResizeTransform"], [253, 2, 1, "", "ResizeWithRatio"], [253, 2, 1, "", "SquadExample"], [253, 2, 1, "", "TFModelZooCollectTransform"], [253, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [253, 2, 1, "", "TFSquadV1PostTransform"], [253, 2, 1, "", "TRANSFORMS"], [253, 2, 1, "", "TensorflowCropToBoundingBox"], [253, 2, 1, "", "TensorflowRandomHorizontalFlip"], [253, 2, 1, "", "TensorflowRandomVerticalFlip"], [253, 2, 1, "", "TensorflowResizeWithRatio"], [253, 2, 1, "", "TensorflowTransform"], [253, 2, 1, "", "TensorflowTransforms"], [253, 2, 1, "", "TensorflowTranspose"], [253, 2, 1, "", "TensorflowWrapFunction"], [253, 2, 1, "", "ToArray"], [253, 2, 1, "", "ToNDArrayTransform"], [253, 2, 1, "", "Transforms"], [253, 2, 1, "", "Transpose"], [253, 1, 1, "", "convert_examples_to_features"], [253, 1, 1, "", "get_final_text"], [253, 1, 1, "", "get_torchvision_map"], [253, 1, 1, "", "read_squad_examples"], [253, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[254, 2, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[254, 3, 1, "", "_epoch_ran"], [254, 3, 1, "", "best_model"], [254, 3, 1, "", "best_score"], [254, 3, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[256, 0, 0, "-", "qlinear2qdq"], [257, 0, 0, "-", "tf2onnx"], [258, 0, 0, "-", "torch2onnx"], [259, 0, 0, "-", "utils"]], "neural_compressor.experimental.export.qlinear2qdq": [[256, 1, 1, "", "check_model"], [256, 1, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[257, 1, 1, "", "tf_to_fp32_onnx"], [257, 1, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[258, 1, 1, "", "build_scale_mapping"], [258, 1, 1, "", "get_node_mapping"], [258, 1, 1, "", "get_quantizable_onnx_ops"], [258, 1, 1, "", "qdq_fp32_bias"], [258, 1, 1, "", "qdq_fp32_bias_qdq"], [258, 1, 1, "", "qdq_int32_bias"], [258, 1, 1, "", "recalculate_bias"], [258, 1, 1, "", "remove_nodes_by_name"], [258, 1, 1, "", "set_data_type"], [258, 1, 1, "", "set_scale_info"], [258, 1, 1, "", "sub_graph_with_int32_bias"], [258, 1, 1, "", "torch_to_fp32_onnx"], [258, 1, 1, "", "torch_to_int8_onnx"], [258, 1, 1, "", "update_weight_bias"]], "neural_compressor.experimental.export.utils": [[259, 2, 1, "", "DummyDataReader"], [259, 1, 1, "", "ONNX2Numpy_dtype"]], "neural_compressor.experimental.graph_optimization": [[260, 2, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[262, 0, 0, "-", "bleu"], [263, 0, 0, "-", "bleu_util"], [264, 0, 0, "-", "coco_label_map"], [265, 0, 0, "-", "coco_tools"], [266, 0, 0, "-", "evaluate_squad"], [267, 0, 0, "-", "f1"], [269, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[262, 2, 1, "", "BLEU"], [262, 2, 1, "", "UnicodeRegex"], [262, 1, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[262, 3, 1, "", "labels"], [262, 3, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[262, 3, 1, "", "nondigit_punct_re"], [262, 3, 1, "", "punct_nondigit_re"], [262, 3, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[263, 1, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[265, 2, 1, "", "COCOEvalWrapper"], [265, 2, 1, "", "COCOWrapper"], [265, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [265, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [265, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[265, 3, 1, "", "dataset"], [265, 3, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[266, 1, 1, "", "evaluate"], [266, 1, 1, "", "exact_match_score"], [266, 1, 1, "", "f1_score"], [266, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[267, 1, 1, "", "evaluate"], [267, 1, 1, "", "f1_score"], [267, 1, 1, "", "metric_max_over_ground_truths"], [267, 1, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[269, 2, 1, "", "Accuracy"], [269, 2, 1, "", "BaseMetric"], [269, 2, 1, "", "COCOmAPv2"], [269, 2, 1, "", "F1"], [269, 2, 1, "", "GeneralTopK"], [269, 2, 1, "", "Loss"], [269, 2, 1, "", "MAE"], [269, 2, 1, "", "METRICS"], [269, 2, 1, "", "MSE"], [269, 2, 1, "", "MXNetMetrics"], [269, 2, 1, "", "ONNXRTGLUE"], [269, 2, 1, "", "ONNXRTITMetrics"], [269, 2, 1, "", "ONNXRTQLMetrics"], [269, 2, 1, "", "PyTorchLoss"], [269, 2, 1, "", "PyTorchMetrics"], [269, 2, 1, "", "RMSE"], [269, 2, 1, "", "ROC"], [269, 2, 1, "", "SquadF1"], [269, 2, 1, "", "TensorflowCOCOMAP"], [269, 2, 1, "", "TensorflowMAP"], [269, 2, 1, "", "TensorflowMetrics"], [269, 2, 1, "", "TensorflowTopK"], [269, 2, 1, "", "TensorflowVOCMAP"], [269, 2, 1, "", "WrapMXNetMetric"], [269, 2, 1, "", "WrapONNXRTMetric"], [269, 2, 1, "", "WrapPyTorchMetric"], [269, 2, 1, "", "mIOU"], [269, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[269, 3, 1, "", "label_list"], [269, 3, 1, "", "pred_list"], [269, 3, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[269, 3, 1, "", "k"], [269, 3, 1, "", "num_correct"], [269, 3, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[269, 3, 1, "", "sample"], [269, 3, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[269, 3, 1, "", "compare_label"], [269, 3, 1, "", "label_list"], [269, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[269, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[269, 3, 1, "", "compare_label"], [269, 3, 1, "", "label_list"], [269, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[269, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[269, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[269, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[269, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[269, 3, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[269, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[269, 3, 1, "", "k"], [269, 3, 1, "", "num_correct"], [269, 3, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[270, 2, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[271, 2, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[272, 0, 0, "-", "basic_nas"], [273, 0, 0, "-", "dynas"], [275, 0, 0, "-", "nas"], [276, 0, 0, "-", "nas_utils"], [277, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[272, 2, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[273, 2, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[275, 2, 1, "", "NAS"], [275, 2, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[276, 1, 1, "", "create_search_space_pool"], [276, 1, 1, "", "find_pareto_front"], [276, 1, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[277, 2, 1, "", "BayesianOptimizationSearcher"], [277, 2, 1, "", "GridSearcher"], [277, 2, 1, "", "RandomSearcher"], [277, 2, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[278, 0, 0, "-", "gradient_sensitivity"], [279, 0, 0, "-", "group_lasso"], [281, 0, 0, "-", "magnitude"], [282, 0, 0, "-", "pattern_lock"], [283, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[278, 2, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[279, 2, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[281, 2, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[282, 2, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[283, 2, 1, "", "Pruner"], [283, 1, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[284, 2, 1, "", "Pruning"], [284, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[284, 3, 1, "", "conf"], [284, 3, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[286, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[287, 0, 0, "-", "pattern"], [288, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[287, 2, 1, "", "PATTERNS"], [287, 2, 1, "", "PatternBase"], [287, 1, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[287, 3, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[288, 2, 1, "", "TilePatternBase"], [288, 2, 1, "", "TilePattern_1x1"], [288, 2, 1, "", "TilePattern_1x16"], [288, 2, 1, "", "TilePattern_1x2"], [288, 2, 1, "", "TilePattern_2x2"], [288, 2, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[289, 2, 1, "", "Pruning"], [289, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[289, 3, 1, "", "conf"], [289, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[291, 0, 0, "-", "logger"], [292, 0, 0, "-", "patterns"], [293, 0, 0, "-", "prune_utils"], [294, 0, 0, "-", "pruner"], [295, 0, 0, "-", "pruning"], [296, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[292, 2, 1, "", "Pattern"], [292, 2, 1, "", "PatternNInM"], [292, 2, 1, "", "PatternNxM"], [292, 1, 1, "", "get_pattern"], [292, 1, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[292, 3, 1, "", "is_global"], [292, 3, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[292, 3, 1, "", "M"], [292, 3, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[292, 3, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[293, 1, 1, "", "check_config"], [293, 1, 1, "", "parse_not_to_prune"], [293, 1, 1, "", "parse_to_prune"], [293, 1, 1, "", "process_and_check_config"], [293, 1, 1, "", "process_config"], [293, 1, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[294, 2, 1, "", "MagnitudePruner"], [294, 2, 1, "", "PatternLockPruner"], [294, 2, 1, "", "Pruner"], [294, 2, 1, "", "SnipMomentumPruner"], [294, 2, 1, "", "SnipPruner"], [294, 1, 1, "", "get_pruner"], [294, 1, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[294, 3, 1, "", "config"], [294, 3, 1, "", "current_sparsity_ratio"], [294, 3, 1, "", "end_step"], [294, 3, 1, "", "global_step"], [294, 3, 1, "", "masks"], [294, 3, 1, "", "max_sparsity_ratio_per_layer"], [294, 3, 1, "", "modules"], [294, 3, 1, "", "pattern"], [294, 3, 1, "", "scheduler"], [294, 3, 1, "", "scores"], [294, 3, 1, "", "start_step"], [294, 3, 1, "", "target_sparsity_ratio"], [294, 3, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[295, 2, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[295, 3, 1, "", "config_file_path"], [295, 3, 1, "", "model"], [295, 3, 1, "", "pruner_info"], [295, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[296, 2, 1, "", "IterativeScheduler"], [296, 2, 1, "", "OneshotScheduler"], [296, 2, 1, "", "Scheduler"], [296, 1, 1, "", "get_scheduler"], [296, 1, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[296, 3, 1, "", "config"]], "neural_compressor.experimental.quantization": [[297, 2, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[298, 2, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[299, 0, 0, "-", "auto_mixed_precision"], [300, 0, 0, "-", "basic"], [301, 0, 0, "-", "bayesian"], [302, 0, 0, "-", "exhaustive"], [304, 0, 0, "-", "mse"], [305, 0, 0, "-", "mse_v2"], [306, 0, 0, "-", "random"], [307, 0, 0, "-", "strategy"], [309, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[299, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[300, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[301, 2, 1, "", "BayesianOptimization"], [301, 2, 1, "", "BayesianTuneStrategy"], [301, 2, 1, "", "TargetSpace"], [301, 1, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[302, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[304, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[305, 2, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[306, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[307, 2, 1, "", "TuneStrategy"], [307, 1, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[308, 0, 0, "-", "constant"], [310, 0, 0, "-", "tuning_sampler"], [311, 0, 0, "-", "tuning_space"], [312, 0, 0, "-", "tuning_structs"], [313, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[310, 2, 1, "", "FallbackTuningSampler"], [310, 2, 1, "", "ModelWiseTuningSampler"], [310, 2, 1, "", "OpTypeWiseTuningSampler"], [310, 2, 1, "", "OpWiseTuningSampler"], [310, 2, 1, "", "SmoothQuantSampler"], [310, 2, 1, "", "TuningOrder"], [310, 2, 1, "", "TuningSampler"], [310, 2, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[311, 2, 1, "", "TuningItem"], [311, 2, 1, "", "TuningSpace"], [311, 1, 1, "", "initial_tuning_cfg_with_quant_mode"], [311, 1, 1, "", "pattern_to_internal"], [311, 1, 1, "", "pattern_to_path"], [311, 1, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[312, 2, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[313, 2, 1, "", "OrderedDefaultDict"], [313, 1, 1, "", "extract_data_type"], [313, 1, 1, "", "get_adaptor_name"], [313, 1, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[315, 0, 0, "-", "bleu"], [316, 0, 0, "-", "bleu_util"], [317, 0, 0, "-", "coco_label_map"], [318, 0, 0, "-", "coco_tools"], [319, 0, 0, "-", "evaluate_squad"], [320, 0, 0, "-", "f1"], [322, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[315, 2, 1, "", "BLEU"], [315, 2, 1, "", "UnicodeRegex"], [315, 1, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[315, 3, 1, "", "labels"], [315, 3, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[315, 3, 1, "", "nondigit_punct_re"], [315, 3, 1, "", "punct_nondigit_re"], [315, 3, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[316, 1, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[318, 2, 1, "", "COCOEvalWrapper"], [318, 2, 1, "", "COCOWrapper"], [318, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [318, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [318, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[318, 3, 1, "", "dataset"], [318, 3, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[319, 1, 1, "", "evaluate"], [319, 1, 1, "", "exact_match_score"], [319, 1, 1, "", "f1_score"], [319, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[320, 1, 1, "", "evaluate"], [320, 1, 1, "", "f1_score"], [320, 1, 1, "", "metric_max_over_ground_truths"], [320, 1, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[322, 2, 1, "", "Accuracy"], [322, 2, 1, "", "BaseMetric"], [322, 2, 1, "", "COCOmAPv2"], [322, 2, 1, "", "F1"], [322, 2, 1, "", "GeneralTopK"], [322, 2, 1, "", "Loss"], [322, 2, 1, "", "MAE"], [322, 2, 1, "", "METRICS"], [322, 2, 1, "", "MSE"], [322, 2, 1, "", "MXNetMetrics"], [322, 2, 1, "", "Metric"], [322, 2, 1, "", "ONNXRTGLUE"], [322, 2, 1, "", "ONNXRTITMetrics"], [322, 2, 1, "", "ONNXRTQLMetrics"], [322, 2, 1, "", "PyTorchLoss"], [322, 2, 1, "", "PyTorchMetrics"], [322, 2, 1, "", "RMSE"], [322, 2, 1, "", "ROC"], [322, 2, 1, "", "SquadF1"], [322, 2, 1, "", "TensorflowCOCOMAP"], [322, 2, 1, "", "TensorflowMAP"], [322, 2, 1, "", "TensorflowMetrics"], [322, 2, 1, "", "TensorflowTopK"], [322, 2, 1, "", "TensorflowVOCMAP"], [322, 2, 1, "", "WrapMXNetMetric"], [322, 2, 1, "", "WrapONNXRTMetric"], [322, 2, 1, "", "WrapPyTorchMetric"], [322, 2, 1, "", "mIOU"], [322, 1, 1, "", "metric_registry"], [322, 1, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[322, 3, 1, "", "label_list"], [322, 3, 1, "", "pred_list"], [322, 3, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[322, 3, 1, "", "k"], [322, 3, 1, "", "num_correct"], [322, 3, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[322, 3, 1, "", "sample"], [322, 3, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[322, 3, 1, "", "compare_label"], [322, 3, 1, "", "label_list"], [322, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[322, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[322, 3, 1, "", "compare_label"], [322, 3, 1, "", "label_list"], [322, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[322, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[322, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[322, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[322, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[322, 3, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[322, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[322, 3, 1, "", "k"], [322, 3, 1, "", "num_correct"], [322, 3, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[323, 1, 1, "", "fit"]], "neural_compressor.model": [[324, 0, 0, "-", "base_model"], [326, 0, 0, "-", "keras_model"], [327, 0, 0, "-", "model"], [328, 0, 0, "-", "mxnet_model"], [329, 0, 0, "-", "nets_factory"], [330, 0, 0, "-", "onnx_model"], [331, 0, 0, "-", "tensorflow_model"], [332, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[324, 2, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[326, 2, 1, "", "KerasModel"]], "neural_compressor.model.model": [[327, 2, 1, "", "Model"], [327, 1, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[328, 2, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[329, 2, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[330, 2, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[331, 2, 1, "", "TensorflowBaseModel"], [331, 2, 1, "", "TensorflowCheckpointModel"], [331, 2, 1, "", "TensorflowModel"], [331, 2, 1, "", "TensorflowQATModel"], [331, 2, 1, "", "TensorflowSavedModelModel"], [331, 1, 1, "", "checkpoint_session"], [331, 1, 1, "", "estimator_session"], [331, 1, 1, "", "frozen_pb_session"], [331, 1, 1, "", "get_model_type"], [331, 1, 1, "", "graph_def_session"], [331, 1, 1, "", "graph_session"], [331, 1, 1, "", "keras_session"], [331, 1, 1, "", "load_saved_model"], [331, 1, 1, "", "saved_model_session"], [331, 1, 1, "", "slim_session"], [331, 1, 1, "", "validate_and_inference_input_output"], [331, 1, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[332, 2, 1, "", "IPEXModel"], [332, 2, 1, "", "PyTorchBaseModel"], [332, 2, 1, "", "PyTorchFXModel"], [332, 2, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[333, 2, 1, "", "Accuracy"], [333, 2, 1, "", "Footprint"], [333, 2, 1, "", "ModelSize"], [333, 2, 1, "", "MultiObjective"], [333, 2, 1, "", "Objective"], [333, 2, 1, "", "Performance"], [333, 1, 1, "", "objective_custom_registry"], [333, 1, 1, "", "objective_registry"]], "neural_compressor.quantization": [[334, 1, 1, "", "fit"]], "neural_compressor.strategy": [[335, 0, 0, "-", "auto"], [336, 0, 0, "-", "auto_mixed_precision"], [337, 0, 0, "-", "basic"], [338, 0, 0, "-", "bayesian"], [339, 0, 0, "-", "conservative"], [340, 0, 0, "-", "exhaustive"], [341, 0, 0, "-", "hawq_v2"], [343, 0, 0, "-", "mse"], [344, 0, 0, "-", "mse_v2"], [345, 0, 0, "-", "random"], [346, 0, 0, "-", "strategy"], [348, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[335, 2, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[336, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[337, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[338, 2, 1, "", "BayesianOptimization"], [338, 2, 1, "", "BayesianTuneStrategy"], [338, 2, 1, "", "TargetSpace"], [338, 1, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[339, 2, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[340, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[341, 2, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[343, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[344, 2, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[345, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[346, 2, 1, "", "TuneStrategy"], [346, 2, 1, "", "TuneStrategyMeta"], [346, 1, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[347, 0, 0, "-", "constant"], [349, 0, 0, "-", "tuning_sampler"], [350, 0, 0, "-", "tuning_space"], [351, 0, 0, "-", "tuning_structs"], [352, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[349, 2, 1, "", "BlockFallbackTuningSampler"], [349, 2, 1, "", "FallbackTuningSampler"], [349, 2, 1, "", "ModelWiseTuningSampler"], [349, 2, 1, "", "OpTypeWiseTuningSampler"], [349, 2, 1, "", "OpWiseTuningSampler"], [349, 2, 1, "", "TuningOrder"], [349, 2, 1, "", "TuningSampler"], [349, 2, 1, "", "TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_space": [[350, 2, 1, "", "TuningItem"], [350, 2, 1, "", "TuningSpace"], [350, 1, 1, "", "initial_tuning_cfg_with_quant_mode"], [350, 1, 1, "", "pattern_to_internal"], [350, 1, 1, "", "pattern_to_path"], [350, 1, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[351, 2, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[352, 2, 1, "", "OrderedDefaultDict"], [352, 1, 1, "", "extract_data_type"], [352, 1, 1, "", "get_adaptor_name"], [352, 1, 1, "", "reverted_data_type"]], "neural_compressor.template": [[353, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[353, 2, 1, "", "ExampleClass"], [353, 3, 1, "", "attribute1"], [353, 1, 1, "", "function1"], [353, 1, 1, "", "function2"], [353, 1, 1, "", "function3"], [353, 1, 1, "", "generator1"], [353, 4, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[353, 3, 1, "", "attr1"], [353, 3, 1, "", "attr2"], [353, 3, 1, "", "attr5"]], "neural_compressor.training": [[355, 2, 1, "", "CallBacks"], [355, 2, 1, "", "CompressionManager"], [355, 1, 1, "", "fit"], [355, 1, 1, "", "prepare_compression"]], "neural_compressor.utils": [[356, 0, 0, "-", "collect_layer_histogram"], [357, 0, 0, "-", "constant"], [358, 0, 0, "-", "create_obj_from_config"], [360, 0, 0, "-", "kl_divergence"], [361, 0, 0, "-", "load_huggingface"], [362, 0, 0, "-", "logger"], [363, 0, 0, "-", "options"], [364, 0, 0, "-", "pytorch"], [365, 0, 0, "-", "utility"]], "neural_compressor.utils.collect_layer_histogram": [[356, 2, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[358, 1, 1, "", "create_dataloader"], [358, 1, 1, "", "create_dataset"], [358, 1, 1, "", "create_eval_func"], [358, 1, 1, "", "create_train_func"], [358, 1, 1, "", "get_algorithm"], [358, 1, 1, "", "get_func_from_config"], [358, 1, 1, "", "get_metrics"], [358, 1, 1, "", "get_postprocess"], [358, 1, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[360, 2, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[361, 2, 1, "", "OptimizedModel"], [361, 1, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[362, 2, 1, "", "Logger"], [362, 1, 1, "", "debug"], [362, 1, 1, "", "error"], [362, 1, 1, "", "fatal"], [362, 1, 1, "", "info"], [362, 1, 1, "", "log"], [362, 1, 1, "", "warn"], [362, 1, 1, "", "warning"]], "neural_compressor.utils.options": [[363, 2, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[364, 1, 1, "", "is_int8_model"], [364, 1, 1, "", "load"]], "neural_compressor.utils.utility": [[365, 2, 1, "", "CaptureOutputToFile"], [365, 2, 1, "", "CpuInfo"], [365, 1, 1, "", "Dequantize"], [365, 1, 1, "", "DequantizeWeight"], [365, 2, 1, "", "DotDict"], [365, 2, 1, "", "GLOBAL_STATE"], [365, 2, 1, "", "LazyImport"], [365, 2, 1, "", "MODE"], [365, 2, 1, "", "Statistics"], [365, 1, 1, "", "alias_param"], [365, 1, 1, "", "combine_histogram"], [365, 1, 1, "", "compare_objects"], [365, 1, 1, "", "compute_sparsity"], [365, 1, 1, "", "dump_class_attrs"], [365, 1, 1, "", "dump_data_to_local"], [365, 1, 1, "", "dump_elapsed_time"], [365, 1, 1, "", "equal_dicts"], [365, 1, 1, "", "fault_tolerant_file"], [365, 1, 1, "", "get_all_fp32_data"], [365, 1, 1, "", "get_size"], [365, 1, 1, "", "get_tensor_histogram"], [365, 1, 1, "", "get_tuning_history"], [365, 1, 1, "", "load_data_from_pkl"], [365, 1, 1, "", "recover"], [365, 1, 1, "", "set_random_seed"], [365, 1, 1, "", "set_resume_from"], [365, 1, 1, "", "set_tensorboard"], [365, 1, 1, "", "set_workspace"], [365, 1, 1, "", "show_memory_info"], [365, 1, 1, "", "singleton"], [365, 1, 1, "", "str2array"], [365, 1, 1, "", "time_limit"], [365, 1, 1, "", "version1_eq_version2"], [365, 1, 1, "", "version1_gt_version2"], [365, 1, 1, "", "version1_gte_version2"], [365, 1, 1, "", "version1_lt_version2"], [365, 1, 1, "", "version1_lte_version2"]], "neural_compressor.ux": [[441, 0, 0, "-", "components"], [500, 0, 0, "-", "inc_bench"], [509, 0, 0, "-", "utils"], [535, 0, 0, "-", "web"]], "neural_compressor.ux.components": [[369, 0, 0, "-", "benchmark"], [373, 0, 0, "-", "config_generator"], [381, 0, 0, "-", "configuration_wizard"], [417, 0, 0, "-", "db_manager"], [422, 0, 0, "-", "diagnosis"], [430, 0, 0, "-", "file_browser"], [436, 0, 0, "-", "graph"], [442, 0, 0, "-", "jobs_management"], [446, 0, 0, "-", "manage_workspace"], [448, 0, 0, "-", "model"], [467, 0, 0, "-", "model_zoo"], [469, 0, 0, "-", "names_mapper"], [476, 0, 0, "-", "optimization"], [492, 0, 0, "-", "profiling"]], "neural_compressor.ux.components.benchmark": [[369, 2, 1, "", "Benchmarks"], [366, 0, 0, "-", "benchmark"], [367, 0, 0, "-", "benchmark_model"], [368, 0, 0, "-", "execute_benchmark"]], "neural_compressor.ux.components.benchmark.benchmark": [[366, 2, 1, "", "Benchmark"], [366, 2, 1, "", "DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[367, 1, 1, "", "benchmark_model"], [367, 1, 1, "", "parse_args"], [367, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[368, 1, 1, "", "benchmark_result_update"], [368, 1, 1, "", "benchmark_result_update_pytorch_script"], [368, 1, 1, "", "execute_benchmark"], [368, 1, 1, "", "execute_real_benchmark"], [368, 1, 1, "", "pytorch_script_bench_optimizations"], [368, 1, 1, "", "pytorch_script_bench_original_model"]], "neural_compressor.ux.components.config_generator": [[370, 0, 0, "-", "benchmark_config_generator"], [371, 0, 0, "-", "config_generator"], [372, 0, 0, "-", "graph_optimization_config_generator"], [374, 0, 0, "-", "mixed_precision_config_generator"], [375, 0, 0, "-", "profiling_config_generator"], [376, 0, 0, "-", "pruning_config_generator"], [377, 0, 0, "-", "quantization_config_generator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[370, 2, 1, "", "BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator": [[371, 2, 1, "", "ConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[372, 2, 1, "", "GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[374, 2, 1, "", "MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[375, 2, 1, "", "ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[376, 2, 1, "", "PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[377, 2, 1, "", "QuantizationConfigGenerator"]], "neural_compressor.ux.components.configuration_wizard": [[378, 0, 0, "-", "configuration_parser"], [379, 0, 0, "-", "get_boundary_nodes"], [380, 0, 0, "-", "get_configuration"], [382, 0, 0, "-", "params_feeder"], [383, 0, 0, "-", "pruning_config_parser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[378, 2, 1, "", "ConfigurationParser"], [378, 1, 1, "", "normalize_string_list"], [378, 1, 1, "", "parse_list_value"], [378, 1, 1, "", "parse_multidim_list"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[379, 1, 1, "", "get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[380, 1, 1, "", "get_predefined_configuration"], [380, 1, 1, "", "update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[382, 2, 1, "", "Feeder"], [382, 1, 1, "", "get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[383, 2, 1, "", "PruningConfigParser"]], "neural_compressor.ux.components.db_manager": [[384, 0, 0, "-", "db_manager"], [393, 0, 0, "-", "db_models"], [412, 0, 0, "-", "db_operations"], [418, 0, 0, "-", "params_interfaces"], [419, 0, 0, "-", "utils"]], "neural_compressor.ux.components.db_manager.db_manager": [[384, 2, 1, "", "DBManager"]], "neural_compressor.ux.components.db_manager.db_models": [[385, 0, 0, "-", "benchmark"], [386, 0, 0, "-", "benchmark_result"], [387, 0, 0, "-", "dataloader"], [388, 0, 0, "-", "dataset"], [389, 0, 0, "-", "domain"], [390, 0, 0, "-", "domain_flavour"], [391, 0, 0, "-", "example"], [392, 0, 0, "-", "framework"], [394, 0, 0, "-", "metric"], [395, 0, 0, "-", "model"], [396, 0, 0, "-", "optimization"], [397, 0, 0, "-", "optimization_type"], [398, 0, 0, "-", "precision"], [399, 0, 0, "-", "profiling"], [400, 0, 0, "-", "profiling_result"], [401, 0, 0, "-", "project"], [402, 0, 0, "-", "pruning_details"], [403, 0, 0, "-", "transform"], [404, 0, 0, "-", "tuning_details"], [405, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[385, 2, 1, "", "Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[386, 2, 1, "", "BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[387, 2, 1, "", "Dataloader"], [387, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[388, 2, 1, "", "Dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[389, 2, 1, "", "Domain"], [389, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[390, 2, 1, "", "DomainFlavour"], [390, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.example": [[391, 2, 1, "", "Example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[392, 2, 1, "", "Framework"], [392, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[394, 2, 1, "", "Metric"], [394, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.model": [[395, 2, 1, "", "Model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[396, 2, 1, "", "Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[397, 2, 1, "", "OptimizationType"], [397, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[398, 2, 1, "", "Precision"], [398, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[399, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[400, 2, 1, "", "ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.project": [[401, 2, 1, "", "Project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[402, 2, 1, "", "PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[403, 2, 1, "", "Transform"], [403, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[404, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[405, 2, 1, "", "TuningHistory"]], "neural_compressor.ux.components.db_manager.db_operations": [[406, 0, 0, "-", "benchmark_api_interface"], [407, 0, 0, "-", "dataset_api_interface"], [408, 0, 0, "-", "db_operations"], [409, 0, 0, "-", "diagnosis_api_interface"], [410, 0, 0, "-", "dictionaries_api_interface"], [411, 0, 0, "-", "examples_api_interface"], [413, 0, 0, "-", "model_api_interface"], [414, 0, 0, "-", "optimization_api_interface"], [415, 0, 0, "-", "profiling_api_interface"], [416, 0, 0, "-", "project_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[406, 2, 1, "", "BenchmarkAPIInterface"], [406, 1, 1, "", "before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[407, 2, 1, "", "DatasetAPIInterface"], [407, 1, 1, "", "initialize_associations"], [407, 1, 1, "", "initialize_precision_optimization_types_association"], [407, 1, 1, "", "search_in_list_of_dict"], [407, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [407, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[408, 1, 1, "", "initialize_associations"], [408, 1, 1, "", "initialize_precision_optimization_types_association"], [408, 1, 1, "", "search_in_list_of_dict"], [408, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [408, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[409, 2, 1, "", "DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[410, 2, 1, "", "DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[411, 2, 1, "", "ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[413, 2, 1, "", "ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[414, 2, 1, "", "OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[415, 2, 1, "", "ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[416, 2, 1, "", "ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[418, 2, 1, "", "BenchmarkAddParamsInterface"], [418, 2, 1, "", "BenchmarkEditParamsInterface"], [418, 2, 1, "", "DatasetAddParamsInterface"], [418, 2, 1, "", "DiagnosisOptimizationParamsInterface"], [418, 2, 1, "", "ModelAddParamsInterface"], [418, 2, 1, "", "OptimizationAddParamsInterface"], [418, 2, 1, "", "OptimizationEditParamsInterface"], [418, 2, 1, "", "ProfilingAddParamsInterface"], [418, 2, 1, "", "ProfilingEditParamsInterface"], [418, 2, 1, "", "ProfilingResultAddParamsInterface"], [418, 2, 1, "", "TuningHistoryInterface"], [418, 2, 1, "", "TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.utils": [[419, 1, 1, "", "get_framework_dataloaders_config"], [419, 1, 1, "", "get_framework_transforms_config"], [419, 1, 1, "", "update_dataloaders_params"]], "neural_compressor.ux.components.diagnosis": [[420, 0, 0, "-", "diagnosis"], [421, 0, 0, "-", "factory"], [423, 0, 0, "-", "onnx_diagnosis"], [425, 0, 0, "-", "op_details"], [426, 0, 0, "-", "op_entry"], [427, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[420, 2, 1, "", "Diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[421, 2, 1, "", "DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[424, 0, 0, "-", "onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[424, 2, 1, "", "OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[425, 2, 1, "", "OpActivation"], [425, 2, 1, "", "OpDetails"], [425, 2, 1, "", "OpPattern"], [425, 2, 1, "", "OpWeights"]], "neural_compressor.ux.components.diagnosis.op_entry": [[426, 2, 1, "", "OpEntry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[428, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[428, 2, 1, "", "TensorflowDiagnosis"]], "neural_compressor.ux.components.file_browser": [[429, 0, 0, "-", "file_browser"]], "neural_compressor.ux.components.file_browser.file_browser": [[429, 1, 1, "", "create_dir_entry"], [429, 1, 1, "", "create_entry"], [429, 1, 1, "", "create_file_entry"], [429, 1, 1, "", "filter_requested_entries"], [429, 1, 1, "", "get_directory_entries"], [429, 1, 1, "", "get_filter_value"], [429, 1, 1, "", "get_non_hidden_directory_entries"], [429, 1, 1, "", "get_requested_path"], [429, 1, 1, "", "get_setting_value"], [429, 1, 1, "", "is_dataset_or_directory_entry"], [429, 1, 1, "", "is_directory_entry"], [429, 1, 1, "", "is_model_or_directory_entry"], [429, 1, 1, "", "should_show_files"], [429, 1, 1, "", "should_show_only_model_files"], [429, 1, 1, "", "sort_entries"]], "neural_compressor.ux.components.graph": [[431, 0, 0, "-", "attribute"], [432, 0, 0, "-", "collapser"], [433, 0, 0, "-", "edge"], [434, 0, 0, "-", "graph"], [435, 0, 0, "-", "graph_reader"], [437, 0, 0, "-", "node"], [438, 0, 0, "-", "reader"]], "neural_compressor.ux.components.graph.attribute": [[431, 2, 1, "", "Attribute"]], "neural_compressor.ux.components.graph.collapser": [[432, 2, 1, "", "Collapser"]], "neural_compressor.ux.components.graph.edge": [[433, 2, 1, "", "Edge"]], "neural_compressor.ux.components.graph.graph": [[434, 2, 1, "", "Graph"]], "neural_compressor.ux.components.graph.graph_reader": [[435, 2, 1, "", "GraphReader"]], "neural_compressor.ux.components.graph.node": [[437, 2, 1, "", "GroupNode"], [437, 2, 1, "", "Node"]], "neural_compressor.ux.components.graph.reader": [[439, 0, 0, "-", "onnxrt_reader"], [440, 0, 0, "-", "tensorflow_reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[439, 2, 1, "", "OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[440, 2, 1, "", "TensorflowReader"]], "neural_compressor.ux.components.jobs_management": [[443, 0, 0, "-", "jobs_control_queue"], [444, 0, 0, "-", "jobs_manager"], [445, 0, 0, "-", "request"]], "neural_compressor.ux.components.manage_workspace": [[446, 1, 1, "", "get_default_path"]], "neural_compressor.ux.components.model": [[447, 0, 0, "-", "domain"], [449, 0, 0, "-", "model"], [450, 0, 0, "-", "model_type_getter"], [451, 0, 0, "-", "onnxrt"], [453, 0, 0, "-", "pytorch"], [455, 0, 0, "-", "repository"], [456, 0, 0, "-", "shape"], [458, 0, 0, "-", "tensorflow"]], "neural_compressor.ux.components.model.domain": [[447, 2, 1, "", "Domain"]], "neural_compressor.ux.components.model.model": [[449, 2, 1, "", "Model"]], "neural_compressor.ux.components.model.model_type_getter": [[450, 1, 1, "", "get_model_type"]], "neural_compressor.ux.components.model.onnxrt": [[452, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.onnxrt.model": [[452, 2, 1, "", "OnnxrtModel"], [452, 1, 1, "", "remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.pytorch": [[454, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.pytorch.model": [[454, 2, 1, "", "PyTorchScriptModel"]], "neural_compressor.ux.components.model.repository": [[455, 2, 1, "", "ModelRepository"]], "neural_compressor.ux.components.model.shape": [[456, 2, 1, "", "Shape"]], "neural_compressor.ux.components.model.tensorflow": [[457, 0, 0, "-", "frozen_pb"], [459, 0, 0, "-", "keras"], [460, 0, 0, "-", "meta_graph"], [461, 0, 0, "-", "model"], [462, 0, 0, "-", "saved_model"], [463, 0, 0, "-", "utils"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[457, 2, 1, "", "FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.keras": [[459, 2, 1, "", "KerasModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[460, 2, 1, "", "MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.model": [[461, 2, 1, "", "TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[462, 2, 1, "", "SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.utils": [[463, 1, 1, "", "get_input_shape"]], "neural_compressor.ux.components.model_zoo": [[464, 0, 0, "-", "download_config"], [465, 0, 0, "-", "download_model"], [466, 0, 0, "-", "downloader"], [468, 0, 0, "-", "list_models"]], "neural_compressor.ux.components.model_zoo.download_config": [[464, 1, 1, "", "download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[465, 1, 1, "", "download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[466, 2, 1, "", "Downloader"]], "neural_compressor.ux.components.model_zoo.list_models": [[468, 1, 1, "", "check_version"], [468, 1, 1, "", "get_available_models"], [468, 1, 1, "", "get_framework_module_name"], [468, 1, 1, "", "get_installed_frameworks"], [468, 1, 1, "", "list_models"], [468, 1, 1, "", "validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[470, 0, 0, "-", "names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[470, 2, 1, "", "MappingDirection"], [470, 2, 1, "", "NamesMapper"]], "neural_compressor.ux.components.optimization": [[476, 2, 1, "", "Optimizations"], [471, 0, 0, "-", "execute_optimization"], [472, 0, 0, "-", "factory"], [474, 0, 0, "-", "graph_optimizer"], [477, 0, 0, "-", "mixed_precision"], [480, 0, 0, "-", "neural_coder_optimization"], [482, 0, 0, "-", "optimization"], [483, 0, 0, "-", "pruning"], [486, 0, 0, "-", "tune"], [489, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.optimization.execute_optimization": [[471, 1, 1, "", "check_if_collect_tuning_history"], [471, 1, 1, "", "execute_optimization"], [471, 1, 1, "", "execute_optimization_pytorch_script"], [471, 1, 1, "", "execute_optimization_regular"], [471, 1, 1, "", "parse_logs"], [471, 1, 1, "", "parse_model_data_to_bench_names"]], "neural_compressor.ux.components.optimization.factory": [[472, 2, 1, "", "OptimizationFactory"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[473, 0, 0, "-", "graph_optimization"], [475, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[473, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[475, 1, 1, "", "optimize_graph"], [475, 1, 1, "", "optimize_graph_config"], [475, 1, 1, "", "parse_args"], [475, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.mixed_precision": [[478, 0, 0, "-", "mixed_precision"], [479, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[478, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[479, 1, 1, "", "optimize_graph"], [479, 1, 1, "", "optimize_graph_config"], [479, 1, 1, "", "parse_args"], [479, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[481, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[481, 1, 1, "", "optimize_pt_script"]], "neural_compressor.ux.components.optimization.optimization": [[482, 2, 1, "", "DataloaderInterface"], [482, 2, 1, "", "Optimization"], [482, 2, 1, "", "OptimizationInterface"]], "neural_compressor.ux.components.optimization.pruning": [[484, 0, 0, "-", "optimize_model"], [485, 0, 0, "-", "pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[484, 1, 1, "", "optimize_model"], [484, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[485, 2, 1, "", "Pruning"]], "neural_compressor.ux.components.optimization.tune": [[487, 0, 0, "-", "tune_model"], [488, 0, 0, "-", "tuning"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[487, 1, 1, "", "parse_args"], [487, 1, 1, "", "set_eager_execution"], [487, 1, 1, "", "tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[488, 2, 1, "", "AccuracyCriterion"], [488, 2, 1, "", "Tuning"], [488, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.optimization.tuning_history": [[489, 2, 1, "", "TuningHistory"], [489, 2, 1, "", "Watcher"], [489, 1, 1, "", "tuning_history"], [489, 1, 1, "", "tuning_history_path"]], "neural_compressor.ux.components.profiling": [[490, 0, 0, "-", "execute_profiling"], [491, 0, 0, "-", "factory"], [493, 0, 0, "-", "profile_model"], [494, 0, 0, "-", "profiler"], [495, 0, 0, "-", "profiling"], [497, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.ux.components.profiling.execute_profiling": [[490, 1, 1, "", "execute_profiling"], [490, 1, 1, "", "execute_real_profiling"]], "neural_compressor.ux.components.profiling.factory": [[491, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.profile_model": [[493, 1, 1, "", "load_profiling_details"], [493, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.profiling.profiler": [[494, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.profiling": [[495, 2, 1, "", "DataloaderInterface"], [495, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[496, 0, 0, "-", "factory"], [498, 0, 0, "-", "profiler"], [499, 0, 0, "-", "utils"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[496, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[498, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[499, 1, 1, "", "delete_assign"]], "neural_compressor.ux.inc_bench": [[500, 1, 1, "", "main"], [500, 1, 1, "", "prepare_environment"]], "neural_compressor.ux.utils": [[502, 0, 0, "-", "consts"], [503, 0, 0, "-", "environment"], [504, 0, 0, "-", "exceptions"], [505, 0, 0, "-", "executor"], [506, 0, 0, "-", "expiring_dict"], [507, 0, 0, "-", "github_info"], [508, 0, 0, "-", "hw_info"], [510, 0, 0, "-", "json_serializer"], [511, 0, 0, "-", "logger"], [512, 0, 0, "-", "parser"], [513, 0, 0, "-", "proc"], [514, 0, 0, "-", "processes"], [515, 0, 0, "-", "singleton"], [516, 0, 0, "-", "status_updates"], [517, 0, 0, "-", "templates"], [520, 0, 0, "-", "utils"], [525, 0, 0, "-", "workload"], [531, 0, 0, "-", "yaml_utils"]], "neural_compressor.ux.utils.consts": [[502, 2, 1, "", "DomainFlavours"], [502, 2, 1, "", "Domains"], [502, 2, 1, "", "ExecutionStatus"], [502, 2, 1, "", "Frameworks"], [502, 2, 1, "", "OptimizationTypes"], [502, 2, 1, "", "Precisions"], [502, 2, 1, "", "Strategies"]], "neural_compressor.ux.utils.environment": [[503, 2, 1, "", "Environment"]], "neural_compressor.ux.utils.exceptions": [[504, 5, 1, "", "AccessDeniedException"], [504, 5, 1, "", "ClientErrorException"], [504, 5, 1, "", "InternalException"], [504, 5, 1, "", "NotFoundException"]], "neural_compressor.ux.utils.executor": [[505, 2, 1, "", "Executor"]], "neural_compressor.ux.utils.expiring_dict": [[506, 2, 1, "", "ExpiringDict"], [506, 2, 1, "", "ExpiringDictItem"]], "neural_compressor.ux.utils.github_info": [[507, 2, 1, "", "GithubInfo"]], "neural_compressor.ux.utils.hw_info": [[508, 2, 1, "", "HWInfo"], [508, 1, 1, "", "get_bios_version"], [508, 1, 1, "", "get_distribution"], [508, 1, 1, "", "get_framework_dependency_info"], [508, 1, 1, "", "get_framework_info"], [508, 1, 1, "", "get_kernel_version"], [508, 1, 1, "", "get_number_of_sockets"], [508, 1, 1, "", "is_turbo_boost_enabled"]], "neural_compressor.ux.utils.json_serializer": [[510, 2, 1, "", "JsonSerializer"]], "neural_compressor.ux.utils.logger": [[511, 1, 1, "", "change_log_level"]], "neural_compressor.ux.utils.parser": [[512, 2, 1, "", "AccuracyParser"], [512, 2, 1, "", "BenchmarkParserFactory"], [512, 2, 1, "", "OptimizationParser"], [512, 2, 1, "", "Parser"], [512, 2, 1, "", "PerformanceParser"], [512, 2, 1, "", "ProfilingParser"]], "neural_compressor.ux.utils.proc": [[513, 2, 1, "", "Proc"]], "neural_compressor.ux.utils.processes": [[514, 2, 1, "", "NCProcesses"]], "neural_compressor.ux.utils.singleton": [[515, 2, 1, "", "Singleton"]], "neural_compressor.ux.utils.status_updates": [[516, 1, 1, "", "get_status_update_function"]], "neural_compressor.ux.utils.templates": [[518, 0, 0, "-", "metric"], [519, 0, 0, "-", "workdir"]], "neural_compressor.ux.utils.templates.metric": [[518, 2, 1, "", "Metric"]], "neural_compressor.ux.utils.templates.workdir": [[519, 2, 1, "", "Workdir"]], "neural_compressor.ux.utils.utils": [[520, 1, 1, "", "are_archive_filenames_valid"], [520, 1, 1, "", "check_module"], [520, 1, 1, "", "deprecated"], [520, 1, 1, "", "determine_ip"], [520, 1, 1, "", "export_to_csv"], [520, 1, 1, "", "filter_transforms"], [520, 1, 1, "", "get_dataset_path"], [520, 1, 1, "", "get_default_pruning_config_path"], [520, 1, 1, "", "get_file_extension"], [520, 1, 1, "", "get_framework_from_path"], [520, 1, 1, "", "get_height_width_from_size"], [520, 1, 1, "", "get_metrics_dict"], [520, 1, 1, "", "get_model_zoo_config_path"], [520, 1, 1, "", "get_model_zoo_model_path"], [520, 1, 1, "", "get_module_version"], [520, 1, 1, "", "get_predefined_config_path"], [520, 1, 1, "", "get_shape_from_transforms"], [520, 1, 1, "", "get_size"], [520, 1, 1, "", "is_dataset_file"], [520, 1, 1, "", "is_development_env"], [520, 1, 1, "", "is_hidden"], [520, 1, 1, "", "load_dataloader_config"], [520, 1, 1, "", "load_help_nc_params"], [520, 1, 1, "", "load_metrics_config"], [520, 1, 1, "", "load_model_config"], [520, 1, 1, "", "load_model_wise_params"], [520, 1, 1, "", "load_precisions_config"], [520, 1, 1, "", "load_pruning_details_config"], [520, 1, 1, "", "load_transforms_config"], [520, 1, 1, "", "load_transforms_filter_config"], [520, 1, 1, "", "normalize_domain"], [520, 1, 1, "", "normalize_framework"], [520, 1, 1, "", "normalize_string"], [520, 1, 1, "", "parse_bool_value"], [520, 1, 1, "", "parse_to_float_list"], [520, 1, 1, "", "parse_to_string_list"], [520, 1, 1, "", "parse_version"], [520, 1, 1, "", "release_tag"], [520, 1, 1, "", "replace_with_values"], [520, 1, 1, "", "safe_extract_archive"], [520, 1, 1, "", "verify_file_path"]], "neural_compressor.ux.utils.workload": [[521, 0, 0, "-", "config"], [522, 0, 0, "-", "dataloader"], [523, 0, 0, "-", "evaluation"], [524, 0, 0, "-", "graph_optimization"], [526, 0, 0, "-", "mixed_precision"], [527, 0, 0, "-", "model"], [528, 0, 0, "-", "pruning"], [529, 0, 0, "-", "quantization"], [530, 0, 0, "-", "tuning"]], "neural_compressor.ux.utils.workload.config": [[521, 2, 1, "", "Config"]], "neural_compressor.ux.utils.workload.dataloader": [[522, 2, 1, "", "Dataloader"], [522, 2, 1, "", "Dataset"], [522, 2, 1, "", "Filter"], [522, 2, 1, "", "LabelBalance"], [522, 2, 1, "", "Transform"]], "neural_compressor.ux.utils.workload.evaluation": [[523, 2, 1, "", "Accuracy"], [523, 2, 1, "", "Configs"], [523, 2, 1, "", "Evaluation"], [523, 2, 1, "", "Metric"], [523, 2, 1, "", "Performance"], [523, 2, 1, "", "Postprocess"], [523, 2, 1, "", "PostprocessSchema"]], "neural_compressor.ux.utils.workload.graph_optimization": [[524, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.utils.workload.mixed_precision": [[526, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.utils.workload.model": [[527, 2, 1, "", "Model"]], "neural_compressor.ux.utils.workload.pruning": [[528, 2, 1, "", "AdamOptimizer"], [528, 2, 1, "", "AdamWOptimizer"], [528, 2, 1, "", "Approach"], [528, 2, 1, "", "Criterion"], [528, 2, 1, "", "CrossEntropyLossCriterion"], [528, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [528, 2, 1, "", "KnowledgeDistillationLossCriterion"], [528, 2, 1, "", "Optimizer"], [528, 2, 1, "", "Pruning"], [528, 2, 1, "", "SGDOptimizer"], [528, 2, 1, "", "SelfKnowledgeDistillationLoss"], [528, 2, 1, "", "SparseCategoricalCrossentropyCriterion"], [528, 2, 1, "", "Train"], [528, 2, 1, "", "WeightCompressionApproach"], [528, 1, 1, "", "parse_dict_value_to_float"], [528, 1, 1, "", "parse_dict_value_to_int"]], "neural_compressor.ux.utils.workload.quantization": [[529, 2, 1, "", "Advance"], [529, 2, 1, "", "Calibration"], [529, 2, 1, "", "Quantization"], [529, 2, 1, "", "WiseConfig"], [529, 2, 1, "", "WiseConfigDetails"]], "neural_compressor.ux.utils.workload.tuning": [[530, 2, 1, "", "AccCriterion"], [530, 2, 1, "", "Diagnosis"], [530, 2, 1, "", "ExitPolicy"], [530, 2, 1, "", "MultiObjectives"], [530, 2, 1, "", "Strategy"], [530, 2, 1, "", "Tuning"], [530, 2, 1, "", "Workspace"]], "neural_compressor.ux.utils.yaml_utils": [[531, 1, 1, "", "float_representer"], [531, 1, 1, "", "pruner_representer"]], "neural_compressor.ux.web": [[532, 0, 0, "-", "communication"], [533, 0, 0, "-", "configuration"], [534, 0, 0, "-", "exceptions"], [536, 0, 0, "-", "router"], [537, 0, 0, "-", "server"], [540, 0, 0, "-", "service"]], "neural_compressor.ux.web.communication": [[532, 2, 1, "", "Message"], [532, 2, 1, "", "MessageQueue"], [532, 2, 1, "", "Request"], [532, 2, 1, "", "Response"], [532, 1, 1, "", "create_simple_response"]], "neural_compressor.ux.web.configuration": [[533, 2, 1, "", "Configuration"]], "neural_compressor.ux.web.exceptions": [[534, 5, 1, "", "ServiceNotFoundException"]], "neural_compressor.ux.web.router": [[536, 2, 1, "", "DeferredRoutingDefinition"], [536, 2, 1, "", "DeferredSubprocessRoutingDefinition"], [536, 2, 1, "", "RealtimeRoutingDefinition"], [536, 2, 1, "", "Router"], [536, 2, 1, "", "RoutingDefinition"], [536, 1, 1, "", "find_pattern_in_graph"], [536, 1, 1, "", "get_model_graph"], [536, 1, 1, "", "get_system_info"]], "neural_compressor.ux.web.server": [[537, 1, 1, "", "allow_api_call"], [537, 1, 1, "", "block_iframe"], [537, 1, 1, "", "block_sniffing"], [537, 1, 1, "", "build_parameters"], [537, 1, 1, "", "disable_cache"], [537, 1, 1, "", "get_tls_args"], [537, 1, 1, "", "handle_api_call"], [537, 1, 1, "", "page_not_found"], [537, 1, 1, "", "require_api_token"], [537, 1, 1, "", "root"], [537, 1, 1, "", "run_server"], [537, 1, 1, "", "web_socket_publisher"]], "neural_compressor.ux.web.service": [[538, 0, 0, "-", "benchmark"], [539, 0, 0, "-", "history_snapshot_parser"], [541, 0, 0, "-", "model"], [542, 0, 0, "-", "optimization"], [543, 0, 0, "-", "profiling"], [544, 0, 0, "-", "request_data_processor"], [545, 0, 0, "-", "response_generator"], [546, 0, 0, "-", "workload"]], "neural_compressor.ux.web.service.benchmark": [[538, 2, 1, "", "BenchmarkService"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[539, 2, 1, "", "HistorySnapshotParser"]], "neural_compressor.ux.web.service.model": [[541, 2, 1, "", "ModelService"]], "neural_compressor.ux.web.service.optimization": [[542, 2, 1, "", "OptimizationService"]], "neural_compressor.ux.web.service.profiling": [[543, 2, 1, "", "ProfilingService"]], "neural_compressor.ux.web.service.request_data_processor": [[544, 2, 1, "", "RequestDataProcessor"]], "neural_compressor.ux.web.service.response_generator": [[545, 2, 1, "", "ResponseGenerator"]], "neural_compressor.ux.web.service.workload": [[546, 2, 1, "", "WorkloadService"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:attribute", "4": "py:data", "5": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "data", "Python data"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"644ec953a7dc_pruning_support": 0, "6ece06672ed3_v1_14": 1, "modul": [1, 5, 6, 8, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 206, 207, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 223, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 250, 252, 253, 254, 256, 257, 258, 259, 260, 262, 263, 265, 266, 267, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 287, 288, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 310, 311, 312, 313, 315, 316, 318, 319, 320, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 349, 350, 351, 352, 353, 355, 356, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 418, 419, 420, 421, 424, 425, 426, 428, 429, 431, 432, 433, 434, 435, 437, 439, 440, 446, 447, 449, 450, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 475, 478, 479, 481, 482, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546], "content": [1, 5, 6, 7, 8, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 310, 311, 312, 313, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 418, 419, 420, 421, 424, 425, 426, 428, 429, 431, 432, 433, 434, 435, 437, 439, 440, 446, 447, 449, 450, 452, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 475, 476, 478, 479, 481, 482, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 554, 570], "function": [1, 5, 6, 18, 21, 38, 44, 45, 67, 68, 70, 104, 105, 116, 118, 146, 147, 148, 151, 152, 153, 154, 156, 159, 161, 164, 166, 168, 170, 171, 172, 173, 174, 176, 185, 186, 194, 196, 200, 203, 204, 205, 208, 210, 211, 212, 213, 215, 217, 218, 220, 223, 230, 238, 240, 244, 247, 248, 249, 251, 252, 253, 256, 257, 258, 259, 262, 263, 265, 266, 267, 268, 269, 276, 283, 287, 292, 293, 294, 296, 301, 307, 311, 313, 315, 316, 318, 319, 320, 321, 322, 323, 327, 331, 333, 334, 338, 346, 350, 352, 353, 355, 358, 359, 361, 362, 364, 365, 367, 368, 378, 379, 380, 382, 387, 389, 390, 392, 394, 397, 398, 403, 406, 407, 408, 419, 429, 446, 450, 452, 463, 464, 465, 468, 471, 475, 479, 481, 484, 487, 489, 490, 493, 499, 500, 508, 511, 516, 520, 528, 531, 532, 536, 537, 577], "6f0d0f71d92e_v1_13": 2, "9e89549a08c8_v1_11": 3, "block_mask": 4, "env": 5, "neural_compressor": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547], "adaptor": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 555, 556], "class": [6, 8, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 147, 148, 151, 154, 155, 156, 157, 158, 160, 161, 164, 168, 169, 170, 171, 172, 173, 175, 176, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 259, 260, 261, 262, 265, 268, 269, 270, 271, 272, 273, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 310, 311, 312, 313, 315, 318, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 349, 350, 351, 352, 353, 355, 356, 359, 360, 361, 362, 363, 365, 366, 369, 370, 371, 372, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 413, 414, 415, 416, 418, 420, 421, 424, 425, 426, 428, 431, 432, 433, 434, 435, 437, 439, 440, 447, 449, 452, 454, 455, 456, 457, 459, 460, 461, 462, 466, 470, 472, 473, 476, 478, 482, 485, 488, 489, 491, 494, 495, 496, 498, 502, 503, 505, 506, 507, 508, 510, 512, 513, 514, 515, 518, 519, 521, 522, 523, 524, 526, 527, 528, 529, 530, 532, 533, 536, 538, 539, 541, 542, 543, 544, 545, 546, 555], "subpackag": [7, 22, 87, 111, 112, 114, 163, 165, 180, 205, 224, 249, 261, 285, 303, 314, 342, 417, 422, 436, 441, 448, 476, 492, 501, 509, 535], "submodul": [7, 17, 22, 34, 51, 76, 87, 95, 101, 106, 111, 112, 114, 117, 130, 143, 149, 156, 162, 163, 165, 167, 177, 181, 188, 200, 204, 208, 215, 222, 225, 232, 244, 248, 251, 255, 261, 268, 274, 280, 286, 290, 303, 309, 314, 321, 325, 342, 348, 354, 359, 369, 373, 381, 393, 412, 417, 422, 423, 427, 430, 436, 438, 441, 442, 448, 451, 453, 458, 467, 469, 474, 476, 477, 480, 483, 486, 492, 497, 501, 509, 517, 525, 535, 540], "packag": [7, 34, 156, 188, 200, 204, 205, 208, 215, 232, 244, 248, 249, 251, 261, 268, 280, 285, 286, 303, 321, 325, 342, 359, 369, 476, 601, 603, 605, 606], "kera": [8, 459], "keras_util": [9, 10, 11, 12, 13, 14, 15], "conv2d": 9, "dens": 10, "depthwise_conv2d": 11, "pool2d": 13, "quantiz": [14, 43, 297, 334, 529, 551, 554, 567, 576, 582, 585, 588, 597, 608, 615, 616, 617, 620, 626], "separable_conv2d": 15, "mxnet": [16, 573, 587, 616, 622, 626], "mxnet_util": [17, 18], "util": [18, 44, 146, 153, 174, 259, 308, 309, 310, 311, 312, 313, 347, 348, 349, 350, 351, 352, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 419, 463, 499, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 558], "onnxrt": [19, 451, 452, 573, 587, 622], "ox_util": [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "calibr": [20, 21], "oper": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], "activ": 23, "argmax": 24, "attent": 25, "binary_op": 26, "concat": 27, "conv": 28, "direct_q8": 29, "embed_layernorm": 30, "gather": 31, "gavgpool": 32, "gemm": 33, "lstm": 35, "matmul": [36, 620], "maxpool": 37, "op": 38, "pad": 39, "pool": 40, "resiz": 41, "split": 42, "pytorch": [45, 364, 453, 454, 573, 577, 587, 589, 616, 617, 621, 622, 626], "queri": [46, 555], "tensorflow": [47, 457, 458, 459, 460, 461, 462, 463, 573, 577, 587, 589, 616, 617, 621, 622, 626], "tf_util": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146], "graph_convert": 48, "graph_converter_without_calib": 49, "graph_rewrit": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "bf16": [50, 51], "bf16_convert": [50, 147], "gener": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85], "convert_add_to_biasadd": 52, "convert_layout": 53, "convert_leakyrelu": 54, "convert_nan_to_random": 55, "convert_placeholder_to_const": 56, "dequantize_cast_optim": 57, "dilated_contract": 58, "dummy_biasadd": 59, "expanddims_optim": 60, "fetch_weight_from_reshap": 61, "fold_batch_norm": 62, "fold_const": 63, "fuse_biasadd_add": 64, "fuse_column_wise_mul": 65, "fuse_conv_with_math": 66, "fuse_decomposed_bn": 67, "fuse_decomposed_in": 68, "fuse_gelu": 69, "fuse_layer_norm": 70, "fuse_pad_with_conv": 71, "fuse_pad_with_fp32_conv": 72, "fuse_reshape_transpos": 73, "graph_cse_optim": 74, "grappler_pass": 75, "insert_print_nod": 77, "move_squeeze_after_relu": 78, "pre_optim": 79, "remove_training_nod": 80, "rename_batch_norm": 81, "split_shared_input": 82, "strip_equivalent_nod": 83, "strip_unused_nod": 84, "switch_optim": 85, "graph_bas": 86, "int8": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 579, 626], "freeze_fake_qu": 88, "freeze_valu": 89, "freeze_value_without_calib": 90, "fuse_conv_redundant_dequant": 91, "fuse_conv_requant": 92, "fuse_matmul_redundant_dequant": 93, "fuse_matmul_requant": 94, "meta_op_optim": 96, "post_hostconst_convert": 97, "post_quantized_op_cs": 98, "rnn_convert": 99, "scale_propag": 100, "onnx": [101, 102, 103, 104, 105, 557, 585, 589, 616, 626], "onnx_graph": 102, "onnx_nod": 103, "onnx_schema": 104, "tf2onnx_util": 105, "qdq": [106, 107, 108, 109, 123, 124, 125, 126, 127, 128, 129, 130, 131, 626], "insert_qdq_pattern": 107, "merge_duplicated_qdq": 108, "share_qdq_y_pattern": 109, "graph_util": 110, "quantize_graph": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], "qat": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 626], "fake_quant": 113, "quantize_config": 115, "quantize_help": 116, "quantize_lay": [117, 118, 119, 120, 121], "optimize_lay": 118, "quantize_layer_add": 119, "quantize_layer_bas": 120, "quantize_layer_bn": 121, "quantize_wrapp": 122, "fuse_qdq_bn": 123, "fuse_qdq_concatv2": 124, "fuse_qdq_conv": 125, "fuse_qdq_deconv": 126, "fuse_qdq_in": 127, "fuse_qdq_matmul": 128, "fuse_qdq_pool": 129, "optimize_qdq": 131, "quantize_graph_bas": 132, "quantize_graph_bn": 133, "quantize_graph_concatv2": 134, "quantize_graph_conv": 135, "quantize_graph_for_intel_cpu": 136, "quantize_graph_matmul": 137, "quantize_graph_pool": 138, "quantize_graph_common": 139, "tf2onnx_convert": 140, "transform_graph": [141, 142, 143, 144, 145], "bias_correct": 141, "graph_transform_bas": 142, "insert_log": 144, "rerange_quantized_concat": 145, "torch_util": [147, 148, 149, 150, 151, 152, 153, 220], "hawq_metr": 148, "model_wrapp": 150, "smooth_quant": [151, 157], "symbolic_trac": 152, "algorithm": [154, 155, 156, 157, 158, 620, 623], "fast_bias_correct": 155, "weight_correct": 158, "benchmark": [159, 212, 366, 367, 368, 369, 385, 538, 561, 570, 571, 588, 615], "compress": [160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 222, 223, 562], "callback": 160, "distil": [161, 162, 254, 575, 576, 588, 615, 626], "criterion": [161, 213], "pruner": [164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 283, 294], "criteria": [164, 613, 623], "model_slim": [166, 167, 168, 169], "auto_slim": 166, "pattern_analyz": 168, "weight_slim": 169, "pattern": [170, 286, 287, 288, 292, 613], "reg": 172, "schedul": [173, 296, 298, 613], "conf": [175, 176, 177, 178], "config": [175, 179, 521, 563, 572, 573, 610], "dotdict": 176, "pythonic_config": 178, "contrib": [180, 181, 182, 183, 224, 225, 226, 227], "strategi": [181, 182, 183, 225, 226, 227, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 568, 619, 623], "sigopt": [182, 226, 619, 623], "tpe": [183, 227, 623], "data": [184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 578], "dataload": [184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 214, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 387, 522, 572, 573], "base_dataload": [184, 228], "default_dataload": [186, 230], "fetcher": [187, 231], "attribut": [188, 196, 205, 240, 249, 261, 285, 325, 353, 359, 431, 549], "mxnet_dataload": [189, 233], "onnxrt_dataload": [190, 234], "pytorch_dataload": [191, 235], "sampler": [192, 236], "tensorflow_dataload": [193, 237], "dataset": [194, 195, 196, 197, 198, 199, 200, 201, 238, 239, 240, 241, 242, 243, 244, 245, 388, 570, 573, 583], "bert_dataset": [194, 238], "coco_dataset": [195, 239], "dummy_dataset": [197, 241], "dummy_dataset_v2": [198, 242], "imagenet_dataset": [199, 243], "style_transfer_dataset": [201, 245], "filter": [202, 203, 204, 246, 247, 248], "coco_filt": [202, 246], "transform": [206, 207, 208, 209, 210, 211, 250, 251, 252, 253, 403, 583, 622], "coco_transform": 206, "imagenet_transform": [207, 250], "postprocess": [209, 219], "token": [210, 252], "experiment": [212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313], "common": [213, 214, 215, 216, 217, 218, 219, 220, 551, 580], "metric": [216, 262, 263, 264, 265, 266, 267, 268, 269, 315, 316, 317, 318, 319, 320, 321, 322, 394, 518, 583, 587], "model": [217, 324, 325, 326, 327, 328, 329, 330, 331, 332, 395, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 527, 541, 565, 570, 579, 582, 585, 588, 590, 597, 613, 620, 626], "optim": [218, 396, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 542, 570, 598, 608, 611, 624], "compon": [221, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499], "prune": [223, 284, 295, 483, 484, 485, 528, 570, 588, 613, 615, 626], "export": [255, 256, 257, 258, 259, 579], "qlinear2qdq": 256, "tf2onnx": 257, "torch2onnx": 258, "graph_optim": [260, 473, 474, 475, 524], "bleu": [262, 315], "bleu_util": [263, 316], "coco_label_map": [264, 317], "coco_tool": [265, 318], "evaluate_squad": [266, 319], "f1": [267, 320], "mixed_precis": [270, 477, 478, 479, 526], "model_convers": 271, "na": [272, 273, 274, 275, 276, 277, 552, 570, 615], "basic_na": 272, "dyna": 273, "nas_util": 276, "search_algorithm": 277, "pruner_legaci": [278, 279, 280, 281, 282, 283], "gradient_sensit": 278, "group_lasso": 279, "magnitud": 281, "pattern_lock": 282, "pruning_recip": [285, 286, 287, 288], "tile_pattern": 288, "pruning_v2": 289, "pytorch_prun": [290, 291, 292, 293, 294, 295, 296], "logger": [291, 362, 511], "prune_util": 293, "auto_mixed_precis": [299, 336], "basic": [300, 337, 552, 623], "bayesian": [301, 338, 623], "exhaust": [302, 340, 623], "mse": [304, 343, 623], "mse_v2": [305, 344, 623], "random": [306, 345, 623], "constant": [308, 347, 357], "tuning_sampl": [310, 349], "tuning_spac": [311, 350], "tuning_struct": [312, 351], "mix_precis": 323, "base_model": 324, "keras_model": 326, "mxnet_model": 328, "nets_factori": 329, "onnx_model": 330, "tensorflow_model": 331, "torch_model": 332, "object": [333, 566, 610], "auto": [335, 602, 608, 617, 620, 623], "conserv": [339, 623], "hawq_v2": [341, 623], "templat": [353, 354, 517, 518, 519, 550], "api_doc_exampl": 353, "train": [355, 551, 569, 577, 588, 616], "collect_layer_histogram": 356, "create_obj_from_config": 358, "kl_diverg": 360, "load_huggingfac": 361, "option": [363, 570, 577, 596], "ux": [366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546], "benchmark_model": 367, "execute_benchmark": 368, "config_gener": [370, 371, 372, 373, 374, 375, 376, 377], "benchmark_config_gener": 370, "graph_optimization_config_gener": 372, "mixed_precision_config_gener": 374, "profiling_config_gener": 375, "pruning_config_gener": 376, "quantization_config_gener": 377, "configuration_wizard": [378, 379, 380, 381, 382, 383], "configuration_pars": 378, "get_boundary_nod": 379, "get_configur": 380, "params_feed": 382, "pruning_config_pars": 383, "db_manag": [384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419], "db_model": [385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405], "benchmark_result": 386, "domain": [389, 447], "domain_flavour": 390, "exampl": [391, 551, 552, 555, 559, 571, 572, 573, 575, 576, 577, 578, 579, 588, 589, 590, 593, 597, 610, 611, 613, 616, 620, 621, 626], "framework": [392, 572, 573, 579, 581, 590, 615, 620], "optimization_typ": 397, "precis": [398, 564, 588, 589, 617], "profil": [399, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 543, 570], "profiling_result": 400, "project": [401, 570], "pruning_detail": 402, "tuning_detail": 404, "tuning_histori": [405, 489], "db_oper": [406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416], "benchmark_api_interfac": 406, "dataset_api_interfac": 407, "diagnosis_api_interfac": 409, "dictionaries_api_interfac": 410, "examples_api_interfac": 411, "model_api_interfac": 413, "optimization_api_interfac": 414, "profiling_api_interfac": 415, "project_api_interfac": 416, "params_interfac": 418, "diagnosi": [420, 421, 422, 423, 424, 425, 426, 427, 428, 570], "factori": [421, 472, 491, 496], "onnx_diagnosi": [423, 424], "onnxrt_diagnosi": 424, "op_detail": 425, "op_entri": 426, "tensorflow_diagnosi": [427, 428], "file_brows": [429, 430], "graph": [431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 570], "collaps": 432, "edg": 433, "graph_read": 435, "node": 437, "reader": [438, 439, 440], "onnxrt_read": 439, "tensorflow_read": 440, "jobs_manag": [442, 443, 444, 445], "jobs_control_queu": 443, "request": [445, 550], "manage_workspac": 446, "model_type_gett": 450, "repositori": 455, "shape": 456, "frozen_pb": 457, "meta_graph": 460, "saved_model": 462, "model_zoo": [464, 465, 466, 467, 468], "download_config": 464, "download_model": 465, "download": 466, "list_model": 468, "names_mapp": [469, 470], "execute_optim": 471, "optimize_model": [475, 479, 481, 484], "neural_coder_optim": [480, 481], "tune": [486, 487, 488, 530, 616, 620, 623], "tune_model": 487, "execute_profil": 490, "profile_model": 493, "tensorflow_profil": [496, 497, 498, 499], "inc_bench": 500, "const": 502, "environ": [503, 585, 594], "except": [504, 534], "executor": 505, "expiring_dict": 506, "github_info": 507, "hw_info": 508, "json_seri": 510, "parser": 512, "proc": 513, "process": [514, 623], "singleton": 515, "status_upd": 516, "workdir": 519, "workload": [521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 546], "evalu": [523, 577], "yaml_util": 531, "web": [532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546], "commun": 532, "configur": [533, 577, 581, 612, 615, 619, 625], "router": 536, "server": 537, "servic": [538, 539, 540, 541, 542, 543, 544, 545, 546], "history_snapshot_pars": 539, "request_data_processor": 544, "response_gener": 545, "version": 547, "intel": [548, 554, 570, 584, 585, 588, 594, 602, 608, 626, 627], "neural": [548, 551, 552, 554, 570, 584, 585, 588, 591, 595, 597, 602, 608, 613, 619, 624, 627], "compressor": [548, 551, 554, 570, 584, 585, 588, 602, 608, 619, 627], "document": [548, 554, 559, 627], "section": [548, 627], "contributor": [549, 550], "coven": [549, 550], "code": [549, 550, 552, 588, 609, 624], "conduct": [549, 550], "our": [549, 620], "pledg": 549, "standard": 549, "respons": 549, "scope": [549, 613], "enforc": 549, "contribut": [550, 601, 605], "guidelin": 550, "pull": 550, "checklist": 550, "support": [550, 551, 552, 555, 571, 572, 573, 575, 576, 577, 579, 581, 584, 585, 587, 589, 590, 592, 593, 597, 598, 610, 611, 613, 615, 616, 620, 621, 622, 625], "fx": 551, "introduct": [551, 552, 555, 570, 571, 572, 573, 575, 576, 577, 579, 581, 584, 587, 589, 590, 608, 610, 611, 613, 615, 616, 619, 620, 621, 622, 623, 625], "mode": [551, 626], "matrix": [551, 552, 555, 571, 572, 573, 575, 576, 577, 579, 581, 584, 587, 589, 590, 593, 610, 611, 613, 615, 616, 620, 621, 625], "get": [551, 552, 554, 555, 571, 572, 573, 575, 576, 577, 581, 582, 587, 589, 591, 602, 609, 610, 611, 613, 615, 616, 621, 625], "start": [551, 552, 554, 555, 570, 571, 572, 573, 575, 576, 577, 581, 582, 587, 589, 591, 592, 596, 602, 610, 611, 613, 615, 616, 621, 625], "post": [551, 588, 616], "static": [551, 616], "dynam": [551, 552, 616], "awar": [551, 588, 616], "note": [551, 618], "detail": [551, 570], "problem": 551, "architectur": [552, 574, 584, 585], "search": [552, 608], "api": [552, 554, 555, 559, 560, 571, 572, 573, 575, 576, 577, 582, 583, 587, 589, 591, 595, 609, 610, 611, 613, 615, 624], "usag": [552, 597, 608, 621, 623], "1": [552, 570, 577, 580, 583, 588, 608, 626], "python": [552, 554, 582, 587, 591, 595, 596, 603, 606, 615, 624], "yaml": [552, 572, 573, 577, 581, 625], "2": [552, 570, 577, 580, 583, 588, 608, 626], "onli": 552, "advanc": [552, 624], "custom": [552, 570, 587, 623], "secur": [553, 570, 577], "polici": [553, 623], "report": 553, "vulner": 553, "instal": [554, 570, 585, 592, 594, 601, 602, 605], "from": [554, 570, 585, 588], "pypi": [554, 597], "select": [554, 602], "public": [554, 614], "event": [554, 614], "addit": 554, "research": 554, "collabor": 554, "work": [555, 616], "flow": [555, 616], "background": [555, 608], "ad": 555, "new": [555, 570, 603, 606, 623], "backend": [555, 616], "capabl": 555, "implement": 555, "onnxrtadaptor": 555, "runtim": [557, 585, 589, 616, 626], "torch": [558, 626], "mix": [564, 588, 589, 617], "bench": [570, 595], "tabl": 570, "binari": [570, 585], "sourc": [570, 585], "home": 570, "screen": 570, "creat": [570, 572], "predefin": 570, "displai": 570, "list": [570, 578, 622], "remov": 570, "develop": [570, 601, 605], "tab": 570, "wizard": 570, "edit": 570, "entri": 570, "inform": [570, 586], "demo": 570, "system": [570, 585, 612], "file": [572, 573, 581, 625], "user": [572, 573, 577, 583, 615, 624, 625], "specif": [572, 573], "design": [574, 623], "workflow": 574, "knowledg": [575, 626], "intermedi": 575, "layer": [575, 620], "self": 575, "distribut": [577, 597, 623], "infer": 577, "featur": [577, 581, 584, 597, 598, 602, 615, 616, 621, 625], "pure": 577, "defin": 577, "horovodrun": 577, "execut": 577, "releas": [578, 603, 606, 618], "fp32": 579, "appendix": 579, "frequent": 580, "ask": 580, "question": 580, "build": [580, 587], "issu": [580, 618], "3": [580, 592, 608], "4": [580, 599, 608, 614], "quick": [582, 596], "sampl": 582, "jupyterlab": [582, 602], "extens": [582, 591, 601, 602, 605, 608, 609, 626], "gui": 582, "valid": [582, 585, 620, 626], "incompat": [583, 618], "chang": [583, 607, 609, 618], "between": 583, "v1": 583, "face": 583, "built": [583, 585, 587], "infrastructur": 584, "linux": 585, "prerequisit": 585, "ai": 585, "kit": 585, "window": 585, "requir": [585, 601, 605], "hardwar": [585, 626], "cpu": [585, 594, 626], "base": [585, 624], "64": 585, "compat": 585, "processor": 585, "gpu": 585, "": [585, 609], "xe": 585, "multipl": [585, 610, 626], "vendor": 585, "through": [585, 626], "softwar": 585, "legal": 586, "licens": 586, "citat": 586, "trademark": 586, "singl": [587, 610], "multi": 587, "migrat": 588, "x": 588, "orchestr": [588, 611], "coder": [591, 595, 597, 608, 624], "what": [591, 609], "do": 591, "we": 591, "offer": 591, "jupyt": [591, 592, 603, 606], "lab": [591, 592], "launcher": [591, 596], "contact": 591, "aw": 592, "amazon": 592, "sagemak": 592, "For": 592, "studio": 592, "notebook": 592, "instanc": 592, "guid": [592, 624], "bigdl": 593, "nano": 593, "platform": [594, 619], "best": [594, 602], "perform": [594, 619], "set": [594, 608], "mkl": 594, "openmp": 594, "jemalloc": 594, "numa": 594, "control": 594, "variabl": 594, "frequenc": 594, "govern": 594, "enabl": [595, 602, 608], "superbench": 595, "argument": 596, "v0": 599, "highlight": 599, "other": 599, "changelog": [600, 604], "neural_compressor_ext_lab": [601, 603], "uninstal": [601, 605], "Or": 602, "let": 602, "u": 602, "help": 602, "you": 602, "pre": 602, "requisit": 602, "make": [603, 606, 609], "manual": [603, 606], "npm": [603, 606], "autom": [603, 606], "publish": [603, 606], "conda": [603, 606], "forg": [603, 606], "neural_compressor_ext_lab_alibaba": [605, 606], "log": 607, "unreleas": 607, "vscode": 608, "open": 608, "icon": 608, "5": 608, "welcom": 609, "your": 609, "v": 609, "folder": 609, "setup": 609, "up": 609, "run": 609, "straight": 609, "awai": 609, "explor": 609, "test": 609, "go": 609, "further": 609, "One": 611, "shot": 611, "network": 613, "type": 613, "sparsiti": 613, "decai": 613, "regular": 613, "spars": 613, "deploy": 613, "refer": [613, 616, 620], "full": 614, "59": 614, "2023": 614, "6": 614, "2022": 614, "34": 614, "2021": 614, "15": 614, "2018": 614, "2020": 614, "style": 615, "access": 615, "fundament": [616, 620], "scheme": 616, "ipex": 616, "approach": 616, "With": 616, "without": 616, "accuraci": [616, 623], "specifi": 616, "rule": 616, "recip": 616, "devic": 616, "turn": 617, "off": 617, "dure": 617, "known": 618, "prepar": 619, "benefit": 619, "comparison": 619, "differ": 619, "smooth": 620, "quant": 620, "per": 620, "tensor": 620, "channel": 620, "limit": 620, "smoothquant": 620, "enhanc": 620, "wise": 620, "alpha": 620, "engin": 620, "tensorboard": 621, "space": 623, "exit": 623, "overview": 624, "zero": 624, "topic": 624, "11": 626, "0": 626, "13": 626, "ptq": 626, "9": 626}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"644ec953a7dc_pruning_support": [[0, "module-644ec953a7dc_pruning_support"]], "6ece06672ed3_v1_14": [[1, "module-6ece06672ed3_v1_14"]], "Module Contents": [[1, "module-contents"], [5, "module-contents"], [6, "module-contents"], [8, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [113, "module-contents"], [115, "module-contents"], [116, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [164, "module-contents"], [166, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [178, "module-contents"], [179, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [206, "module-contents"], [207, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [223, "module-contents"], [226, "module-contents"], [227, "module-contents"], [228, "module-contents"], [230, "module-contents"], [231, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [245, "module-contents"], [246, "module-contents"], [247, "module-contents"], [250, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [256, "module-contents"], [257, "module-contents"], [258, "module-contents"], [259, "module-contents"], [260, "module-contents"], [262, "module-contents"], [263, "module-contents"], [265, "module-contents"], [266, "module-contents"], [267, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [273, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [278, "module-contents"], [279, "module-contents"], [281, "module-contents"], [282, "module-contents"], [283, "module-contents"], [284, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [295, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [302, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [310, "module-contents"], [311, "module-contents"], [312, "module-contents"], [313, "module-contents"], [315, "module-contents"], [316, "module-contents"], [318, "module-contents"], [319, "module-contents"], [320, "module-contents"], [322, "module-contents"], [323, "module-contents"], [324, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [355, "module-contents"], [356, "module-contents"], [358, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [370, "module-contents"], [371, "module-contents"], [372, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [391, "module-contents"], [392, "module-contents"], [394, "module-contents"], [395, "module-contents"], [396, "module-contents"], [397, "module-contents"], [398, "module-contents"], [399, "module-contents"], [400, "module-contents"], [401, "module-contents"], [402, "module-contents"], [403, "module-contents"], [404, "module-contents"], [405, "module-contents"], [406, "module-contents"], [407, "module-contents"], [408, "module-contents"], [409, "module-contents"], [410, "module-contents"], [411, "module-contents"], [413, "module-contents"], [414, "module-contents"], [415, "module-contents"], [416, "module-contents"], [418, "module-contents"], [419, "module-contents"], [420, "module-contents"], [421, "module-contents"], [424, "module-contents"], [425, "module-contents"], [426, "module-contents"], [428, "module-contents"], [429, "module-contents"], [431, "module-contents"], [432, "module-contents"], [433, "module-contents"], [434, "module-contents"], [435, "module-contents"], [437, "module-contents"], [439, "module-contents"], [440, "module-contents"], [446, "module-contents"], [447, "module-contents"], [449, "module-contents"], [450, "module-contents"], [452, "module-contents"], [454, "module-contents"], [455, "module-contents"], [456, "module-contents"], [457, "module-contents"], [459, "module-contents"], [460, "module-contents"], [461, "module-contents"], [462, "module-contents"], [463, "module-contents"], [464, "module-contents"], [465, "module-contents"], [466, "module-contents"], [468, "module-contents"], [470, "module-contents"], [471, "module-contents"], [472, "module-contents"], [473, "module-contents"], [475, "module-contents"], [478, "module-contents"], [479, "module-contents"], [481, "module-contents"], [482, "module-contents"], [484, "module-contents"], [485, "module-contents"], [487, "module-contents"], [488, "module-contents"], [489, "module-contents"], [490, "module-contents"], [491, "module-contents"], [493, "module-contents"], [494, "module-contents"], [495, "module-contents"], [496, "module-contents"], [498, "module-contents"], [499, "module-contents"], [500, "module-contents"], [502, "module-contents"], [503, "module-contents"], [504, "module-contents"], [505, "module-contents"], [506, "module-contents"], [507, "module-contents"], [508, "module-contents"], [510, "module-contents"], [511, "module-contents"], [512, "module-contents"], [513, "module-contents"], [514, "module-contents"], [515, "module-contents"], [516, "module-contents"], [518, "module-contents"], [519, "module-contents"], [520, "module-contents"], [521, "module-contents"], [522, "module-contents"], [523, "module-contents"], [524, "module-contents"], [526, "module-contents"], [527, "module-contents"], [528, "module-contents"], [529, "module-contents"], [530, "module-contents"], [531, "module-contents"], [532, "module-contents"], [533, "module-contents"], [534, "module-contents"], [536, "module-contents"], [537, "module-contents"], [538, "module-contents"], [539, "module-contents"], [541, "module-contents"], [542, "module-contents"], [543, "module-contents"], [544, "module-contents"], [545, "module-contents"], [546, "module-contents"]], "Functions": [[1, "functions"], [5, "functions"], [6, "functions"], [18, "functions"], [21, "functions"], [38, "functions"], [44, "functions"], [45, "functions"], [67, "functions"], [68, "functions"], [70, "functions"], [104, "functions"], [105, "functions"], [116, "functions"], [118, "functions"], [146, "functions"], [147, "functions"], [148, "functions"], [151, "functions"], [152, "functions"], [153, "functions"], [154, "functions"], [156, "functions"], [159, "functions"], [161, "functions"], [164, "functions"], [166, "functions"], [168, "functions"], [170, "functions"], [171, "functions"], [172, "functions"], [173, "functions"], [174, "functions"], [176, "functions"], [185, "functions"], [186, "functions"], [194, "functions"], [196, "functions"], [200, "functions"], [203, "functions"], [204, "functions"], [205, "functions"], [208, "functions"], [210, "functions"], [211, "functions"], [212, "functions"], [213, "functions"], [215, "functions"], [217, "functions"], [218, "functions"], [220, "functions"], [223, "functions"], [230, "functions"], [238, "functions"], [240, "functions"], [244, "functions"], [247, "functions"], [248, "functions"], [249, "functions"], [251, "functions"], [252, "functions"], [253, "functions"], [256, "functions"], [257, "functions"], [258, "functions"], [259, "functions"], [262, "functions"], [263, "functions"], [265, "functions"], [266, "functions"], [267, "functions"], [268, "functions"], [269, "functions"], [276, "functions"], [283, "functions"], [287, "functions"], [292, "functions"], [293, "functions"], [294, "functions"], [296, "functions"], [301, "functions"], [307, "functions"], [311, "functions"], [313, "functions"], [315, "functions"], [316, "functions"], [318, "functions"], [319, "functions"], [320, "functions"], [321, "functions"], [322, "functions"], [323, "functions"], [327, "functions"], [331, "functions"], [333, "functions"], [334, "functions"], [338, "functions"], [346, "functions"], [350, "functions"], [352, "functions"], [353, "functions"], [355, "functions"], [358, "functions"], [359, "functions"], [361, "functions"], [362, "functions"], [364, "functions"], [365, "functions"], [367, "functions"], [368, "functions"], [378, "functions"], [379, "functions"], [380, "functions"], [382, "functions"], [387, "functions"], [389, "functions"], [390, "functions"], [392, "functions"], [394, "functions"], [397, "functions"], [398, "functions"], [403, "functions"], [406, "functions"], [407, "functions"], [408, "functions"], [419, "functions"], [429, "functions"], [446, "functions"], [450, "functions"], [452, "functions"], [463, "functions"], [464, "functions"], [465, "functions"], [468, "functions"], [471, "functions"], [475, "functions"], [479, "functions"], [481, "functions"], [484, "functions"], [487, "functions"], [489, "functions"], [490, "functions"], [493, "functions"], [499, "functions"], [500, "functions"], [508, "functions"], [511, "functions"], [516, "functions"], [520, "functions"], [528, "functions"], [531, "functions"], [532, "functions"], [536, "functions"], [537, "functions"]], "6f0d0f71d92e_v1_13": [[2, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[3, "module-9e89549a08c8_v1_11"]], "block_mask": [[4, "module-block_mask"]], "env": [[5, "module-env"]], "neural_compressor.adaptor.adaptor": [[6, "module-neural_compressor.adaptor.adaptor"]], "Classes": [[6, "classes"], [8, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [113, "classes"], [115, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [144, "classes"], [145, "classes"], [147, "classes"], [148, "classes"], [151, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [158, "classes"], [160, "classes"], [161, "classes"], [164, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [171, "classes"], [172, "classes"], [173, "classes"], [175, "classes"], [176, "classes"], [178, "classes"], [179, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [221, "classes"], [226, "classes"], [227, "classes"], [228, "classes"], [230, "classes"], [231, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [259, "classes"], [260, "classes"], [261, "classes"], [262, "classes"], [265, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [272, "classes"], [273, "classes"], [275, "classes"], [277, "classes"], [278, "classes"], [279, "classes"], [281, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [292, "classes"], [294, "classes"], [295, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [310, "classes"], [311, "classes"], [312, "classes"], [313, "classes"], [315, "classes"], [318, "classes"], [321, "classes"], [322, "classes"], [324, "classes"], [325, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [343, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [349, "classes"], [350, "classes"], [351, "classes"], [352, "classes"], [353, "classes"], [355, "classes"], [356, "classes"], [359, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [365, "classes"], [366, "classes"], [369, "classes"], [370, "classes"], [371, "classes"], [372, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [386, "classes"], [387, "classes"], [388, "classes"], [389, "classes"], [390, "classes"], [391, "classes"], [392, "classes"], [394, "classes"], [395, "classes"], [396, "classes"], [397, "classes"], [398, "classes"], [399, "classes"], [400, "classes"], [401, "classes"], [402, "classes"], [403, "classes"], [404, "classes"], [405, "classes"], [406, "classes"], [407, "classes"], [409, "classes"], [410, "classes"], [411, "classes"], [413, "classes"], [414, "classes"], [415, "classes"], [416, "classes"], [418, "classes"], [420, "classes"], [421, "classes"], [424, "classes"], [425, "classes"], [426, "classes"], [428, "classes"], [431, "classes"], [432, "classes"], [433, "classes"], [434, "classes"], [435, "classes"], [437, "classes"], [439, "classes"], [440, "classes"], [447, "classes"], [449, "classes"], [452, "classes"], [454, "classes"], [455, "classes"], [456, "classes"], [457, "classes"], [459, "classes"], [460, "classes"], [461, "classes"], [462, "classes"], [466, "classes"], [470, "classes"], [472, "classes"], [473, "classes"], [476, "classes"], [478, "classes"], [482, "classes"], [485, "classes"], [488, "classes"], [489, "classes"], [491, "classes"], [494, "classes"], [495, "classes"], [496, "classes"], [498, "classes"], [502, "classes"], [503, "classes"], [505, "classes"], [506, "classes"], [507, "classes"], [508, "classes"], [510, "classes"], [512, "classes"], [513, "classes"], [514, "classes"], [515, "classes"], [518, "classes"], [519, "classes"], [521, "classes"], [522, "classes"], [523, "classes"], [524, "classes"], [526, "classes"], [527, "classes"], [528, "classes"], [529, "classes"], [530, "classes"], [532, "classes"], [533, "classes"], [536, "classes"], [538, "classes"], [539, "classes"], [541, "classes"], [542, "classes"], [543, "classes"], [544, "classes"], [545, "classes"], [546, "classes"]], "neural_compressor.adaptor": [[7, "module-neural_compressor.adaptor"]], "Subpackages": [[7, "subpackages"], [22, "subpackages"], [87, "subpackages"], [111, "subpackages"], [112, "subpackages"], [114, "subpackages"], [163, "subpackages"], [165, "subpackages"], [180, "subpackages"], [205, "subpackages"], [224, "subpackages"], [249, "subpackages"], [261, "subpackages"], [285, "subpackages"], [303, "subpackages"], [314, "subpackages"], [342, "subpackages"], [417, "subpackages"], [422, "subpackages"], [436, "subpackages"], [441, "subpackages"], [448, "subpackages"], [476, "subpackages"], [492, "subpackages"], [501, "subpackages"], [509, "subpackages"], [535, "subpackages"]], "Submodules": [[7, "submodules"], [17, "submodules"], [22, "submodules"], [34, "submodules"], [51, "submodules"], [76, "submodules"], [87, "submodules"], [95, "submodules"], [101, "submodules"], [106, "submodules"], [111, "submodules"], [112, "submodules"], [114, "submodules"], [117, "submodules"], [130, "submodules"], [143, "submodules"], [149, "submodules"], [156, "submodules"], [162, "submodules"], [163, "submodules"], [165, "submodules"], [167, "submodules"], [177, "submodules"], [181, "submodules"], [188, "submodules"], [200, "submodules"], [204, "submodules"], [208, "submodules"], [215, "submodules"], [222, "submodules"], [225, "submodules"], [232, "submodules"], [244, "submodules"], [248, "submodules"], [251, "submodules"], [255, "submodules"], [261, "submodules"], [268, "submodules"], [274, "submodules"], [280, "submodules"], [286, "submodules"], [290, "submodules"], [303, "submodules"], [309, "submodules"], [314, "submodules"], [321, "submodules"], [325, "submodules"], [342, "submodules"], [348, "submodules"], [354, "submodules"], [359, "submodules"], [369, "submodules"], [373, "submodules"], [381, "submodules"], [393, "submodules"], [412, "submodules"], [417, "submodules"], [422, "submodules"], [423, "submodules"], [427, "submodules"], [430, "submodules"], [436, "submodules"], [438, "submodules"], [441, "submodules"], [442, "submodules"], [448, "submodules"], [451, "submodules"], [453, "submodules"], [458, "submodules"], [467, "submodules"], [469, "submodules"], [474, "submodules"], [476, "submodules"], [477, "submodules"], [480, "submodules"], [483, "submodules"], [486, "submodules"], [492, "submodules"], [497, "submodules"], [501, "submodules"], [509, "submodules"], [517, "submodules"], [525, "submodules"], [535, "submodules"], [540, "submodules"]], "Package Contents": [[7, "package-contents"], [34, "package-contents"], [156, "package-contents"], [188, "package-contents"], [200, "package-contents"], [204, "package-contents"], [205, "package-contents"], [208, "package-contents"], [215, "package-contents"], [232, "package-contents"], [244, "package-contents"], [248, "package-contents"], [249, "package-contents"], [251, "package-contents"], [261, "package-contents"], [268, "package-contents"], [280, "package-contents"], [285, "package-contents"], [286, "package-contents"], [303, "package-contents"], [321, "package-contents"], [325, "package-contents"], [342, "package-contents"], [359, "package-contents"], [369, "package-contents"], [476, "package-contents"]], "neural_compressor.adaptor.keras": [[8, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[9, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[10, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[11, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[12, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[13, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[14, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[15, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[16, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[17, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[18, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[19, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[20, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[21, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[22, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[23, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[24, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[25, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[26, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[27, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[28, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[29, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[31, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[34, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[35, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[36, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[37, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[38, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[39, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[40, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[41, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[42, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[43, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[44, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[140, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[141, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[146, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[147, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[148, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[149, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[150, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[151, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[152, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[153, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[154, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[155, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[156, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[157, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[158, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[159, "module-neural_compressor.benchmark"]], "neural_compressor.compression.callbacks": [[160, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[161, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[162, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[163, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[164, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[165, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[166, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[167, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[168, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[169, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns": [[170, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.pruners": [[171, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.regs": [[172, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[173, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.utils": [[174, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[175, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[176, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[177, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[178, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[179, "module-neural_compressor.config"]], "neural_compressor.contrib": [[180, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[181, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[182, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[183, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[184, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[185, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[186, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[187, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[188, "module-neural_compressor.data.dataloaders"]], "Attributes": [[188, "attributes"], [196, "attributes"], [205, "attributes"], [240, "attributes"], [249, "attributes"], [261, "attributes"], [285, "attributes"], [325, "attributes"], [353, "attributes"], [359, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[189, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[190, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[191, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[192, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[193, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[194, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[195, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[196, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[197, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[198, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[199, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[200, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[201, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[202, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[203, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[204, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[205, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[206, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[207, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[208, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[209, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[210, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[211, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[212, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[213, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[214, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[215, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[216, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[217, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[218, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[219, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[220, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[221, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[222, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[223, "module-neural_compressor.experimental.compression.pruning"]], "neural_compressor.experimental.contrib": [[224, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[225, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[226, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[227, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[228, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[229, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[230, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[231, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[232, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[233, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[234, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[235, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[236, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[237, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[238, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[239, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[240, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[241, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[242, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[243, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[244, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[245, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[246, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[247, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[248, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[249, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[250, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[251, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[252, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[253, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[254, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[255, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[256, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[257, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[258, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.export.utils": [[259, "module-neural_compressor.experimental.export.utils"]], "neural_compressor.experimental.graph_optimization": [[260, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[261, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[262, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[263, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[264, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[265, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[266, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[267, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[268, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[269, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[270, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[271, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[272, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[273, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[274, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[275, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[276, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[277, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[278, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[279, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[280, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[281, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[282, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[283, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[284, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[285, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[286, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[287, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[288, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[289, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[290, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[291, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[292, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[293, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[294, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[295, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[296, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[297, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[298, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[299, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[300, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[301, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[302, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[303, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[304, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[305, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[306, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[307, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[308, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[309, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[310, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[311, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[312, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[313, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[314, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[315, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[316, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[317, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[318, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[319, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[320, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[321, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[322, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[323, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[324, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[325, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[326, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[327, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[328, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[329, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[330, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[331, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[332, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[333, "module-neural_compressor.objective"]], "neural_compressor.quantization": [[334, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[335, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[336, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[337, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[338, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[339, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[340, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[341, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[342, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[343, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[344, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[345, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[346, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[347, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[348, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[349, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[350, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[351, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[352, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[353, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[354, "module-neural_compressor.template"]], "neural_compressor.training": [[355, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[356, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[357, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[358, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[359, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[360, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[361, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[362, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[363, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[364, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[365, "module-neural_compressor.utils.utility"]], "neural_compressor.ux.components.benchmark.benchmark": [[366, "module-neural_compressor.ux.components.benchmark.benchmark"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[367, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[368, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "neural_compressor.ux.components.benchmark": [[369, "module-neural_compressor.ux.components.benchmark"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[370, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "neural_compressor.ux.components.config_generator.config_generator": [[371, "module-neural_compressor.ux.components.config_generator.config_generator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[372, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[373, "module-neural_compressor.ux.components.config_generator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[374, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[375, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[376, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[377, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[378, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[379, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[380, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "neural_compressor.ux.components.configuration_wizard": [[381, "module-neural_compressor.ux.components.configuration_wizard"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[382, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[383, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "neural_compressor.ux.components.db_manager.db_manager": [[384, "module-neural_compressor.ux.components.db_manager.db_manager"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[385, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[386, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[387, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[388, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[389, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[390, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "neural_compressor.ux.components.db_manager.db_models.example": [[391, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[392, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[393, "module-neural_compressor.ux.components.db_manager.db_models"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[394, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "neural_compressor.ux.components.db_manager.db_models.model": [[395, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[396, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[397, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[398, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[399, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[400, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "neural_compressor.ux.components.db_manager.db_models.project": [[401, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[402, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[403, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[404, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[405, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[406, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[407, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[408, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[409, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[410, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[411, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[412, "module-neural_compressor.ux.components.db_manager.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[413, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[414, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[415, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[416, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[417, "module-neural_compressor.ux.components.db_manager"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[418, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "neural_compressor.ux.components.db_manager.utils": [[419, "module-neural_compressor.ux.components.db_manager.utils"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[420, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[421, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[422, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[423, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[424, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[425, "module-neural_compressor.ux.components.diagnosis.op_details"]], "neural_compressor.ux.components.diagnosis.op_entry": [[426, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[427, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[428, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.file_browser.file_browser": [[429, "module-neural_compressor.ux.components.file_browser.file_browser"]], "neural_compressor.ux.components.file_browser": [[430, "module-neural_compressor.ux.components.file_browser"]], "neural_compressor.ux.components.graph.attribute": [[431, "module-neural_compressor.ux.components.graph.attribute"]], "neural_compressor.ux.components.graph.collapser": [[432, "module-neural_compressor.ux.components.graph.collapser"]], "neural_compressor.ux.components.graph.edge": [[433, "module-neural_compressor.ux.components.graph.edge"]], "neural_compressor.ux.components.graph.graph": [[434, "module-neural_compressor.ux.components.graph.graph"]], "neural_compressor.ux.components.graph.graph_reader": [[435, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[436, "module-neural_compressor.ux.components.graph"]], "neural_compressor.ux.components.graph.node": [[437, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[438, "module-neural_compressor.ux.components.graph.reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[439, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[440, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[441, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[442, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[443, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[444, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[445, "module-neural_compressor.ux.components.jobs_management.request"]], "neural_compressor.ux.components.manage_workspace": [[446, "module-neural_compressor.ux.components.manage_workspace"]], "neural_compressor.ux.components.model.domain": [[447, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[448, "module-neural_compressor.ux.components.model"]], "neural_compressor.ux.components.model.model": [[449, "module-neural_compressor.ux.components.model.model"]], "neural_compressor.ux.components.model.model_type_getter": [[450, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[451, "module-neural_compressor.ux.components.model.onnxrt"]], "neural_compressor.ux.components.model.onnxrt.model": [[452, "module-neural_compressor.ux.components.model.onnxrt.model"]], "neural_compressor.ux.components.model.pytorch": [[453, "module-neural_compressor.ux.components.model.pytorch"]], "neural_compressor.ux.components.model.pytorch.model": [[454, "module-neural_compressor.ux.components.model.pytorch.model"]], "neural_compressor.ux.components.model.repository": [[455, "module-neural_compressor.ux.components.model.repository"]], "neural_compressor.ux.components.model.shape": [[456, "module-neural_compressor.ux.components.model.shape"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[457, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[458, "module-neural_compressor.ux.components.model.tensorflow"]], "neural_compressor.ux.components.model.tensorflow.keras": [[459, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[460, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "neural_compressor.ux.components.model.tensorflow.model": [[461, "module-neural_compressor.ux.components.model.tensorflow.model"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[462, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "neural_compressor.ux.components.model.tensorflow.utils": [[463, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "neural_compressor.ux.components.model_zoo.download_config": [[464, "module-neural_compressor.ux.components.model_zoo.download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[465, "module-neural_compressor.ux.components.model_zoo.download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[466, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[467, "module-neural_compressor.ux.components.model_zoo"]], "neural_compressor.ux.components.model_zoo.list_models": [[468, "module-neural_compressor.ux.components.model_zoo.list_models"]], "neural_compressor.ux.components.names_mapper": [[469, "module-neural_compressor.ux.components.names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[470, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "neural_compressor.ux.components.optimization.execute_optimization": [[471, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "neural_compressor.ux.components.optimization.factory": [[472, "module-neural_compressor.ux.components.optimization.factory"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[473, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[474, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[475, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "neural_compressor.ux.components.optimization": [[476, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[477, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[478, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[479, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[480, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[481, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "neural_compressor.ux.components.optimization.optimization": [[482, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[483, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[484, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[485, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[486, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[487, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[488, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "neural_compressor.ux.components.optimization.tuning_history": [[489, "module-neural_compressor.ux.components.optimization.tuning_history"]], "neural_compressor.ux.components.profiling.execute_profiling": [[490, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "neural_compressor.ux.components.profiling.factory": [[491, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[492, "module-neural_compressor.ux.components.profiling"]], "neural_compressor.ux.components.profiling.profile_model": [[493, "module-neural_compressor.ux.components.profiling.profile_model"]], "neural_compressor.ux.components.profiling.profiler": [[494, "module-neural_compressor.ux.components.profiling.profiler"]], "neural_compressor.ux.components.profiling.profiling": [[495, "module-neural_compressor.ux.components.profiling.profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[496, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[497, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[498, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[499, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "neural_compressor.ux.inc_bench": [[500, "module-neural_compressor.ux.inc_bench"]], "neural_compressor.ux": [[501, "module-neural_compressor.ux"]], "neural_compressor.ux.utils.consts": [[502, "module-neural_compressor.ux.utils.consts"]], "neural_compressor.ux.utils.environment": [[503, "module-neural_compressor.ux.utils.environment"]], "neural_compressor.ux.utils.exceptions": [[504, "module-neural_compressor.ux.utils.exceptions"]], "neural_compressor.ux.utils.executor": [[505, "module-neural_compressor.ux.utils.executor"]], "neural_compressor.ux.utils.expiring_dict": [[506, "module-neural_compressor.ux.utils.expiring_dict"]], "neural_compressor.ux.utils.github_info": [[507, "module-neural_compressor.ux.utils.github_info"]], "neural_compressor.ux.utils.hw_info": [[508, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[509, "module-neural_compressor.ux.utils"]], "neural_compressor.ux.utils.json_serializer": [[510, "module-neural_compressor.ux.utils.json_serializer"]], "neural_compressor.ux.utils.logger": [[511, "module-neural_compressor.ux.utils.logger"]], "neural_compressor.ux.utils.parser": [[512, "module-neural_compressor.ux.utils.parser"]], "neural_compressor.ux.utils.proc": [[513, "module-neural_compressor.ux.utils.proc"]], "neural_compressor.ux.utils.processes": [[514, "module-neural_compressor.ux.utils.processes"]], "neural_compressor.ux.utils.singleton": [[515, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.status_updates": [[516, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[517, "module-neural_compressor.ux.utils.templates"]], "neural_compressor.ux.utils.templates.metric": [[518, "module-neural_compressor.ux.utils.templates.metric"]], "neural_compressor.ux.utils.templates.workdir": [[519, "module-neural_compressor.ux.utils.templates.workdir"]], "neural_compressor.ux.utils.utils": [[520, "module-neural_compressor.ux.utils.utils"]], "neural_compressor.ux.utils.workload.config": [[521, "module-neural_compressor.ux.utils.workload.config"]], "neural_compressor.ux.utils.workload.dataloader": [[522, "module-neural_compressor.ux.utils.workload.dataloader"]], "neural_compressor.ux.utils.workload.evaluation": [[523, "module-neural_compressor.ux.utils.workload.evaluation"]], "neural_compressor.ux.utils.workload.graph_optimization": [[524, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[525, "module-neural_compressor.ux.utils.workload"]], "neural_compressor.ux.utils.workload.mixed_precision": [[526, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "neural_compressor.ux.utils.workload.model": [[527, "module-neural_compressor.ux.utils.workload.model"]], "neural_compressor.ux.utils.workload.pruning": [[528, "module-neural_compressor.ux.utils.workload.pruning"]], "neural_compressor.ux.utils.workload.quantization": [[529, "module-neural_compressor.ux.utils.workload.quantization"]], "neural_compressor.ux.utils.workload.tuning": [[530, "module-neural_compressor.ux.utils.workload.tuning"]], "neural_compressor.ux.utils.yaml_utils": [[531, "module-neural_compressor.ux.utils.yaml_utils"]], "neural_compressor.ux.web.communication": [[532, "module-neural_compressor.ux.web.communication"]], "neural_compressor.ux.web.configuration": [[533, "module-neural_compressor.ux.web.configuration"]], "neural_compressor.ux.web.exceptions": [[534, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[535, "module-neural_compressor.ux.web"]], "neural_compressor.ux.web.router": [[536, "module-neural_compressor.ux.web.router"]], "neural_compressor.ux.web.server": [[537, "module-neural_compressor.ux.web.server"]], "neural_compressor.ux.web.service.benchmark": [[538, "module-neural_compressor.ux.web.service.benchmark"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[539, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[540, "module-neural_compressor.ux.web.service"]], "neural_compressor.ux.web.service.model": [[541, "module-neural_compressor.ux.web.service.model"]], "neural_compressor.ux.web.service.optimization": [[542, "module-neural_compressor.ux.web.service.optimization"]], "neural_compressor.ux.web.service.profiling": [[543, "module-neural_compressor.ux.web.service.profiling"]], "neural_compressor.ux.web.service.request_data_processor": [[544, "module-neural_compressor.ux.web.service.request_data_processor"]], "neural_compressor.ux.web.service.response_generator": [[545, "module-neural_compressor.ux.web.service.response_generator"]], "neural_compressor.ux.web.service.workload": [[546, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[547, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[548, "intel-neural-compressor-documentation"], [627, "intel-neural-compressor-documentation"]], "Sections": [[548, "sections"], [627, "sections"]], "Contributor Covenant Code of Conduct": [[549, "contributor-covenant-code-of-conduct"], [550, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[549, "our-pledge"]], "Our Standards": [[549, "our-standards"]], "Our Responsibilities": [[549, "our-responsibilities"]], "Scope": [[549, "scope"]], "Enforcement": [[549, "enforcement"]], "Attribution": [[549, "attribution"]], "Contribution Guidelines": [[550, "contribution-guidelines"]], "Pull Request Checklist": [[550, "pull-request-checklist"]], "Pull Request Template": [[550, "pull-request-template"]], "Support": [[550, "support"]], "FX": [[551, "fx"]], "Introduction": [[551, "introduction"], [552, "introduction"], [555, "introduction"], [570, "introduction"], [571, "introduction"], [572, "introduction"], [573, "introduction"], [575, "introduction"], [576, "introduction"], [577, "introduction"], [579, "introduction"], [581, "introduction"], [584, "introduction"], [587, "introduction"], [589, "introduction"], [590, "introduction"], [610, "introduction"], [611, "introduction"], [613, "introduction"], [615, "introduction"], [619, "introduction"], [620, "introduction"], [621, "introduction"], [622, "introduction"], [623, "introduction"], [625, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[551, "fx-mode-support-matrix-in-neural-compressor"]], "Get Start": [[551, "get-start"]], "Post Training Static Quantization": [[551, "post-training-static-quantization"], [616, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[551, "post-training-dynamic-quantization"], [616, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[551, "quantization-aware-training"]], "Examples": [[551, "examples"], [552, "examples"], [571, "examples"], [572, "examples"], [573, "examples"], [575, "examples"], [576, "examples"], [577, "examples"], [578, "examples"], [579, "examples"], [588, "examples"], [589, "examples"], [590, "examples"], [611, "examples"], [613, "examples"], [616, "examples"], [621, "examples"]], "Note": [[551, "note"]], "Details": [[551, "details"]], "Common Problem": [[551, "common-problem"]], "Dynamic Quantization": [[551, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[551, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[552, "neural-architecture-search"]], "Basic NAS": [[552, "basic-nas"]], "Dynamic NAS": [[552, "dynamic-nas"]], "NAS Support Matrix": [[552, "nas-support-matrix"]], "Get Started with NAS API": [[552, "get-started-with-nas-api"]], "Basic Usage": [[552, "basic-usage"]], "1. Python code + YAML": [[552, "python-code-yaml"]], "2. Python code only": [[552, "python-code-only"]], "Advanced Usage (Custom NAS)": [[552, "advanced-usage-custom-nas"]], "Security Policy": [[553, "security-policy"]], "Report a Vulnerability": [[553, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[554, "intel-neural-compressor"], [608, "intel-neural-compressor"]], "Installation": [[554, "installation"], [585, "installation"], [602, "installation"]], "Install from pypi": [[554, "install-from-pypi"]], "Getting Started": [[554, "getting-started"], [582, "getting-started"]], "Quantization with Python API": [[554, "quantization-with-python-api"], [582, "quantization-with-python-api"]], "Documentation": [[554, "documentation"]], "Selected Publications/Events": [[554, "selected-publications-events"]], "Additional Content": [[554, "additional-content"]], "Research Collaborations": [[554, "research-collaborations"]], "Adaptor": [[555, "adaptor"], [556, "adaptor"]], "Adaptor Support Matrix": [[555, "adaptor-support-matrix"]], "Working Flow": [[555, "working-flow"], [616, "working-flow"]], "Get Start with Adaptor API": [[555, "get-start-with-adaptor-api"]], "Query API": [[555, "query-api"]], "Background": [[555, "background"]], "Query API Introduction": [[555, "query-api-introduction"]], "Example of Adding a New Backend Support": [[555, "example-of-adding-a-new-backend-support"]], "Capability": [[555, "capability"]], "Implement ONNXRTAdaptor Class": [[555, "implement-onnxrtadaptor-class"]], "ONNX Runtime": [[557, "onnx-runtime"], [589, "onnx-runtime"], [589, "id1"]], "Torch Utils": [[558, "torch-utils"]], "API Document Example": [[559, "api-document-example"]], "APIs": [[560, "apis"]], "Benchmark": [[561, "benchmark"], [588, "benchmark"], [615, "benchmark"]], "Compression": [[562, "compression"]], "Config": [[563, "config"]], "Mix Precision": [[564, "mix-precision"], [588, "mix-precision"]], "Model": [[565, "model"], [590, "model"]], "Objective": [[566, "objective"], [610, "objective"]], "Quantization": [[567, "quantization"], [615, "quantization"], [616, "quantization"]], "Strategy": [[568, "strategy"]], "Training": [[569, "training"]], "Intel\u00ae Neural Compressor Bench": [[570, "intel-neural-compressor-bench"]], "Table of Contents": [[570, "table-of-contents"]], "Install Intel\u00ae Neural Compressor with Bench": [[570, "install-intel-neural-compressor-with-bench"]], "Option 1: Install from Binary": [[570, "option-1-install-from-binary"]], "Option 2: Install from Source": [[570, "option-2-install-from-source"]], "Start the Intel\u00ae Neural Compressor Bench": [[570, "start-the-intel-neural-compressor-bench"]], "Home Screen": [[570, "home-screen"]], "Create New Project": [[570, "create-new-project"]], "Predefined Model": [[570, "predefined-model"]], "Custom Model": [[570, "custom-model"]], "Display Model Graph": [[570, "display-model-graph"]], "Project List": [[570, "project-list"]], "Remove Project": [[570, "remove-project"]], "Develop Project": [[570, "develop-project"]], "Optimization Tab": [[570, "optimization-tab"]], "Optimization Table": [[570, "optimization-table"]], "Optimization Wizard": [[570, "optimization-wizard"]], "Editing Optimization Entries": [[570, "editing-optimization-entries"]], "Optimization Details": [[570, "optimization-details"]], "Pruning": [[570, "pruning"], [588, "pruning"], [613, "pruning"], [615, "pruning"]], "Benchmark Tab": [[570, "benchmark-tab"]], "Benchmark Table": [[570, "benchmark-table"]], "Benchmark Wizard": [[570, "benchmark-wizard"]], "Editing Benchmark Entries": [[570, "editing-benchmark-entries"]], "Benchmark Details": [[570, "benchmark-details"]], "Profiling Tab": [[570, "profiling-tab"]], "Profiling Table": [[570, "profiling-table"]], "Profiling Wizard": [[570, "profiling-wizard"]], "Editing Profiling Entries": [[570, "editing-profiling-entries"]], "Profiling Details": [[570, "profiling-details"]], "Diagnosis Tab": [[570, "diagnosis-tab"]], "Dataset Tab": [[570, "dataset-tab"]], "Dataset List": [[570, "dataset-list"]], "Dataset Wizard": [[570, "dataset-wizard"]], "Dataset Details": [[570, "dataset-details"]], "Custom Dataset": [[570, "custom-dataset"]], "Project Information": [[570, "project-information"]], "NAS demo": [[570, "nas-demo"]], "System Information": [[570, "system-information"]], "Security": [[570, "security"], [577, "security"]], "Benchmarking": [[571, "benchmarking"]], "Benchmark Support Matrix": [[571, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[571, "get-started-with-benchmark-api"]], "DataLoader": [[572, "dataloader"]], "Supported Framework Dataloader Matrix": [[572, "supported-framework-dataloader-matrix"]], "Get Start with Dataloader API": [[572, "get-start-with-dataloader-api"]], "Config Dataloader in a Yaml File": [[572, "config-dataloader-in-a-yaml-file"]], "Create a User-specific Dataloader": [[572, "create-a-user-specific-dataloader"]], "Dataset": [[573, "dataset"]], "Supported Framework Dataset Matrix": [[573, "supported-framework-dataset-matrix"]], "TensorFlow": [[573, "tensorflow"], [587, "tensorflow"], [589, "tensorflow"], [622, "tensorflow"]], "PyTorch": [[573, "pytorch"], [587, "pytorch"], [589, "pytorch"], [617, "pytorch"]], "MXNet": [[573, "mxnet"], [587, "mxnet"], [622, "mxnet"]], "ONNXRT": [[573, "onnxrt"], [587, "onnxrt"], [622, "onnxrt"]], "Get start with Dataset API": [[573, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[573, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[573, "user-specific-dataset"]], "Design": [[574, "design"], [623, "design"], [623, "id1"], [623, "id3"], [623, "id5"], [623, "id7"], [623, "id9"], [623, "id11"], [623, "id13"], [623, "id15"], [623, "id17"], [623, "id19"], [623, "id21"]], "Architecture": [[574, "architecture"], [584, "architecture"]], "Workflow": [[574, "workflow"]], "Distillation": [[575, "distillation"], [588, "distillation"], [615, "distillation"]], "Knowledge Distillation": [[575, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[575, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[575, "self-distillation"]], "Distillation Support Matrix": [[575, "distillation-support-matrix"]], "Get Started with Distillation API": [[575, "get-started-with-distillation-api"]], "Distillation for Quantization": [[576, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[576, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[576, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[577, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[577, "supported-feature-matrix"], [581, "supported-feature-matrix"], [584, "supported-feature-matrix"], [615, "supported-feature-matrix"], [616, "supported-feature-matrix"], [621, "supported-feature-matrix"], [625, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[577, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[577, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[577, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[577, "horovodrun-execution"]], "PyTorch Examples:": [[577, "pytorch-examples"]], "TensorFlow Examples:": [[577, "tensorflow-examples"]], "Example List": [[578, "example-list"]], "Release Data": [[578, "release-data"]], "Export": [[579, "export"]], "Supported Framework Model Matrix": [[579, "supported-framework-model-matrix"], [590, "supported-framework-model-matrix"]], "FP32 Model Export": [[579, "fp32-model-export"]], "INT8 Model Export": [[579, "int8-model-export"]], "Appendix": [[579, "appendix"]], "Frequently Asked Questions": [[580, "frequently-asked-questions"]], "Common Build Issues": [[580, "common-build-issues"]], "Issue 1:": [[580, "issue-1"]], "Issue 2:": [[580, "issue-2"]], "Issue 3:": [[580, "issue-3"]], "Issue 4:": [[580, "issue-4"]], "Framework YAML Configuration Files": [[581, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[581, "get-started-with-framework-yaml-files"]], "Quick Samples": [[582, "quick-samples"]], "Quantization with JupyterLab Extension": [[582, "quantization-with-jupyterlab-extension"]], "Quantization with GUI": [[582, "quantization-with-gui"]], "Validated Models": [[582, "validated-models"], [620, "validated-models"], [626, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[583, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[583, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[583, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[584, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[585, "linux-installation"]], "Prerequisites": [[585, "prerequisites"], [585, "id1"]], "Install from Binary": [[585, "install-from-binary"], [585, "id2"]], "Install from Source": [[585, "install-from-source"], [585, "id3"]], "Install from AI Kit": [[585, "install-from-ai-kit"]], "Windows Installation": [[585, "windows-installation"]], "System Requirements": [[585, "system-requirements"]], "Validated Hardware Environment": [[585, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[585, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[585, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[585, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[585, "validated-software-environment"]], "Legal Information": [[586, "legal-information"]], "License": [[586, "license"]], "Citation": [[586, "citation"]], "Trademarks": [[586, "trademarks"]], "Metrics": [[587, "metrics"]], "Supported Built-in Metric Matrix": [[587, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[587, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[587, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[587, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[588, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[588, "model-quantization"]], "Post-training Quantization": [[588, "post-training-quantization"]], "Quantization Aware Training": [[588, "quantization-aware-training"], [616, "quantization-aware-training"], [616, "id1"]], "Orchestration": [[588, "orchestration"]], "Mixed Precision": [[589, "mixed-precision"]], "Mixed Precision Support Matrix": [[589, "mixed-precision-support-matrix"]], "Get Started with Mixed Precision API": [[589, "get-started-with-mixed-precision-api"]], "Neural Coder": [[591, "neural-coder"], [608, "neural-coder"], [608, "id1"]], "What do we offer?": [[591, "what-do-we-offer"]], "Getting Started!": [[591, "getting-started"], [602, "getting-started"]], "Jupyter Lab Extension": [[591, "jupyter-lab-extension"]], "Python Launcher": [[591, "python-launcher"], [596, "python-launcher"]], "Python API": [[591, "python-api"]], "Contact": [[591, "contact"]], "AWS Amazon SageMaker Support": [[592, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[592, "start-jupyter-lab-3"]], "For SageMaker Studio": [[592, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[592, "for-sagemaker-notebook-instance"]], "Installation Guide": [[592, "installation-guide"]], "BigDL Nano Support": [[593, "bigdl-nano-support"]], "Example": [[593, "example"], [597, "example"], [610, "example"], [620, "example"]], "Support Matrix": [[593, "support-matrix"]], "Intel CPU Platforms: Best Performance Setting": [[594, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[594, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[594, "install-numa-controller"]], "Environment Variables": [[594, "environment-variables"]], "Frequency Governers": [[594, "frequency-governers"]], "Neural Coder as Python API": [[595, "neural-coder-as-python-api"]], "Enable": [[595, "enable"]], "Bench": [[595, "bench"]], "SuperBench": [[595, "superbench"]], "Quick-Start": [[596, "quick-start"]], "Launcher Arguments (Optional)": [[596, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[597, "neural-coder-for-quantization"]], "Features Supported": [[597, "features-supported"]], "Models Supported": [[597, "models-supported"]], "Usage": [[597, "usage"], [621, "usage"], [621, "id1"], [623, "usage"], [623, "id2"], [623, "id4"], [623, "id6"], [623, "id8"], [623, "id10"], [623, "id12"], [623, "id14"], [623, "id16"], [623, "id18"], [623, "id20"], [623, "id22"]], "PyPI distribution:": [[597, "pypi-distribution"]], "Supported Optimization Features": [[598, "supported-optimization-features"]], "v0.4": [[599, "v0-4"]], "Highlights": [[599, "highlights"]], "Others": [[599, "others"]], "Changelog": [[600, "changelog"], [604, "changelog"]], "neural_compressor_ext_lab": [[601, "neural-compressor-ext-lab"]], "Requirements": [[601, "requirements"], [605, "requirements"]], "Install": [[601, "install"], [605, "install"]], "Uninstall": [[601, "uninstall"], [605, "uninstall"]], "Contributing": [[601, "contributing"], [605, "contributing"]], "Development install": [[601, "development-install"], [605, "development-install"]], "Development uninstall": [[601, "development-uninstall"], [605, "development-uninstall"]], "Packaging the extension": [[601, "packaging-the-extension"], [605, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[602, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[602, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[602, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[602, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[603, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[603, "manual-release"], [606, "manual-release"]], "Python package": [[603, "python-package"], [606, "python-package"]], "NPM package": [[603, "npm-package"], [606, "npm-package"]], "Automated releases with the Jupyter Releaser": [[603, "automated-releases-with-the-jupyter-releaser"], [606, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[603, "publishing-to-conda-forge"], [606, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[605, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[606, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[607, "change-log"]], "[Unreleased]": [[607, "unreleased"]], "Background Introduction": [[608, "background-introduction"]], "Neural Coder Extension in VSCode": [[608, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[608, "neural-coder-extension-usage"]], "1. Open": [[608, "open"]], "2. Search": [[608, "search"]], "3. Setting": [[608, "setting"]], "4. Icon": [[608, "icon"]], "5. optimization (quantization)": [[608, "optimization-quantization"]], "5.1 Enable": [[608, "enable"]], "5.2 Auto": [[608, "auto"]], "Welcome to your VS Code Extension": [[609, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[609, "what-s-in-the-folder"]], "Setup": [[609, "setup"]], "Get up and running straight away": [[609, "get-up-and-running-straight-away"]], "Make changes": [[609, "make-changes"]], "Explore the API": [[609, "explore-the-api"]], "Run tests": [[609, "run-tests"]], "Go further": [[609, "go-further"]], "Single Objective": [[610, "single-objective"]], "Multiple Objectives": [[610, "multiple-objectives"]], "Objective Support Matrix": [[610, "objective-support-matrix"]], "Get Started with Objective API": [[610, "get-started-with-objective-api"]], "Config Single Objective": [[610, "config-single-objective"]], "Config Multiple Objectives": [[610, "config-multiple-objectives"]], "Optimization Orchestration": [[611, "optimization-orchestration"]], "One-shot": [[611, "one-shot"]], "Orchestration Support Matrix": [[611, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[611, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[612, "system-configuration"]], "Neural Network Pruning": [[613, "neural-network-pruning"]], "Pruning Patterns": [[613, "pruning-patterns"]], "Pruning Criteria": [[613, "pruning-criteria"]], "Pruning Types": [[613, "pruning-types"]], "Pruning Schedules": [[613, "pruning-schedules"]], "Pruning Scope": [[613, "pruning-scope"]], "Sparsity Decay Types": [[613, "sparsity-decay-types"]], "Regularization": [[613, "regularization"]], "Pruning Support Matrix": [[613, "pruning-support-matrix"]], "Get Started with Pruning API": [[613, "get-started-with-pruning-api"]], "Sparse Model Deployment": [[613, "sparse-model-deployment"]], "Reference": [[613, "reference"], [616, "reference"], [620, "reference"]], "Full Publications/Events (59)": [[614, "full-publications-events-59"]], "2023 (6)": [[614, "id1"]], "2022 (34)": [[614, "id2"]], "2021 (15)": [[614, "id3"]], "2018 - 2020 (4)": [[614, "id4"]], "Pythonic Style Access for Configurations": [[615, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[615, "pythonic-api-for-user-configurations"], [615, "id1"]], "Pythonic API for Framework Configurations": [[615, "pythonic-api-for-framework-configurations"], [615, "id2"]], "Get Started with Pythonic API for Configurations": [[615, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[615, "nas"]], "Quantization Introduction": [[616, "quantization-introduction"]], "Quantization Fundamentals": [[616, "quantization-fundamentals"], [620, "quantization-fundamentals"]], "Quantization Support Matrix": [[616, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[616, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[616, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[616, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[616, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[616, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[616, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[616, "with-or-without-accuracy-aware-tuning"]], "Get Started": [[616, "get-started"]], "Post Training Quantization": [[616, "post-training-quantization"]], "Specify Quantization Rules": [[616, "specify-quantization-rules"]], "Specify Quantization Recipes": [[616, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[616, "specify-quantization-backend-and-device"]], "Turn OFF Auto Mixed Precision during Quantization": [[617, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[617, "tensorflow"]], "Release": [[618, "release"]], "Release Notes": [[618, "release-notes"]], "Known Issues": [[618, "known-issues"]], "Incompatible Changes": [[618, "incompatible-changes"]], "SigOpt Strategy": [[619, "sigopt-strategy"]], "Preparation": [[619, "preparation"]], "SigOpt Platform": [[619, "sigopt-platform"]], "Neural Compressor Configuration": [[619, "neural-compressor-configuration"]], "Performance": [[619, "performance"]], "Benefit of SigOpt Strategy": [[619, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[619, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[620, "smooth-quant"]], "Per-tensor & Per-channel": [[620, "per-tensor-per-channel"]], "Per-tensor example": [[620, "per-tensor-example"]], "Per-channel example": [[620, "per-channel-example"]], "Matmul quantization example": [[620, "matmul-quantization-example"]], "Per-channel limitation": [[620, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[620, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[620, "smoothquant"]], "Our enhancement:": [[620, "our-enhancement"]], "Algorithm: Layer-wise Auto-tuning of $\\alpha$.": [[620, "algorithm-layer-wise-auto-tuning-of-alpha"]], "Engineering": [[620, "engineering"]], "Supported Framework Matrix": [[620, "supported-framework-matrix"]], "TensorBoard": [[621, "tensorboard"]], "Get Started with TensorBoard": [[621, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[621, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[621, "tensorflow-tensorboard"]], "PyTorch Examples": [[621, "pytorch-examples"]], "TensorFlow Examples": [[621, "tensorflow-examples"]], "Transform": [[622, "transform"]], "Transform Support List": [[622, "transform-support-list"]], "Pytorch": [[622, "pytorch"]], "Tuning Strategies": [[623, "tuning-strategies"]], "Strategy Design": [[623, "strategy-design"]], "Tuning Space": [[623, "tuning-space"]], "Exit Policy": [[623, "exit-policy"]], "Accuracy Criteria": [[623, "accuracy-criteria"]], "Tuning Process": [[623, "tuning-process"]], "Tuning Algorithms": [[623, "tuning-algorithms"]], "Auto": [[623, "auto"]], "Conservative Tuning": [[623, "conservative-tuning"]], "Basic": [[623, "basic"]], "MSE": [[623, "mse"]], "MSE_V2": [[623, "mse-v2"]], "HAWQ_V2": [[623, "hawq-v2"]], "Bayesian": [[623, "bayesian"]], "Exhaustive": [[623, "exhaustive"]], "Random": [[623, "random"]], "SigOpt": [[623, "sigopt"]], "TPE": [[623, "tpe"]], "Distributed Tuning": [[623, "distributed-tuning"]], "Customize a New Tuning Strategy": [[623, "customize-a-new-tuning-strategy"]], "User Guide": [[624, "user-guide"]], "Overview": [[624, "overview"]], "Python-based APIs": [[624, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[624, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[624, "advanced-topics"]], "User YAML Configuration Files": [[625, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[625, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[626, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.11.0": [[626, "tensorflow-models-with-intel-tensorflow-2-11-0"]], "PyTorch Models with Torch 1.13.0+cpu in PTQ Mode": [[626, "pytorch-models-with-torch-1-13-0-cpu-in-ptq-mode"]], "PyTorch Models with Torch 1.13.0+cpu in QAT Mode": [[626, "pytorch-models-with-torch-1-13-0-cpu-in-qat-mode"]], "PyTorch Models with Torch and Intel\u00ae Extension for PyTorch* 1.13.0+cpu": [[626, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-13-0-cpu"]], "ONNX Models with ONNX Runtime 1.13.1": [[626, "onnx-models-with-onnx-runtime-1-13-1"]], "MXNet Models with MXNet 1.9.1": [[626, "mxnet-models-with-mxnet-1-9-1"]], "Validated Pruning Examples": [[626, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[626, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[626, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"644ec953a7dc_pruning_support": [[0, "module-644ec953a7dc_pruning_support"]], "module": [[0, "module-644ec953a7dc_pruning_support"], [1, "module-6ece06672ed3_v1_14"], [2, "module-6f0d0f71d92e_v1_13"], [3, "module-9e89549a08c8_v1_11"], [4, "module-block_mask"], [5, "module-env"], [6, "module-neural_compressor.adaptor.adaptor"], [7, "module-neural_compressor.adaptor"], [8, "module-neural_compressor.adaptor.keras"], [9, "module-neural_compressor.adaptor.keras_utils.conv2d"], [10, "module-neural_compressor.adaptor.keras_utils.dense"], [11, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [12, "module-neural_compressor.adaptor.keras_utils"], [13, "module-neural_compressor.adaptor.keras_utils.pool2d"], [14, "module-neural_compressor.adaptor.keras_utils.quantizer"], [15, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [16, "module-neural_compressor.adaptor.mxnet"], [17, "module-neural_compressor.adaptor.mxnet_utils"], [18, "module-neural_compressor.adaptor.mxnet_utils.util"], [19, "module-neural_compressor.adaptor.onnxrt"], [20, "module-neural_compressor.adaptor.ox_utils.calibration"], [21, "module-neural_compressor.adaptor.ox_utils.calibrator"], [22, "module-neural_compressor.adaptor.ox_utils"], [23, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [24, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [25, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [26, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [27, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [28, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [29, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [30, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [31, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [32, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [33, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [34, "module-neural_compressor.adaptor.ox_utils.operators"], [35, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [36, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [37, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [38, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [39, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [40, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [41, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [42, "module-neural_compressor.adaptor.ox_utils.operators.split"], [43, "module-neural_compressor.adaptor.ox_utils.quantizer"], [44, "module-neural_compressor.adaptor.ox_utils.util"], [45, "module-neural_compressor.adaptor.pytorch"], [46, "module-neural_compressor.adaptor.query"], [47, "module-neural_compressor.adaptor.tensorflow"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [110, "module-neural_compressor.adaptor.tf_utils.graph_util"], [111, "module-neural_compressor.adaptor.tf_utils"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [140, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [141, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [142, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [145, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [146, "module-neural_compressor.adaptor.tf_utils.util"], [147, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [148, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [149, "module-neural_compressor.adaptor.torch_utils"], [150, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [151, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [152, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [153, "module-neural_compressor.adaptor.torch_utils.util"], [154, "module-neural_compressor.algorithm.algorithm"], [155, "module-neural_compressor.algorithm.fast_bias_correction"], [156, "module-neural_compressor.algorithm"], [157, "module-neural_compressor.algorithm.smooth_quant"], [158, "module-neural_compressor.algorithm.weight_correction"], [159, "module-neural_compressor.benchmark"], [160, "module-neural_compressor.compression.callbacks"], [161, "module-neural_compressor.compression.distillation.criterions"], [162, "module-neural_compressor.compression.distillation"], [163, "module-neural_compressor.compression"], [164, "module-neural_compressor.compression.pruner.criteria"], [165, "module-neural_compressor.compression.pruner"], [166, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [167, "module-neural_compressor.compression.pruner.model_slim"], [168, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [169, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [170, "module-neural_compressor.compression.pruner.patterns"], [171, "module-neural_compressor.compression.pruner.pruners"], [172, "module-neural_compressor.compression.pruner.regs"], [173, "module-neural_compressor.compression.pruner.schedulers"], [174, "module-neural_compressor.compression.pruner.utils"], [175, "module-neural_compressor.conf.config"], [176, "module-neural_compressor.conf.dotdict"], [177, "module-neural_compressor.conf"], [178, "module-neural_compressor.conf.pythonic_config"], [179, "module-neural_compressor.config"], [180, "module-neural_compressor.contrib"], [181, "module-neural_compressor.contrib.strategy"], [182, "module-neural_compressor.contrib.strategy.sigopt"], [183, "module-neural_compressor.contrib.strategy.tpe"], [184, "module-neural_compressor.data.dataloaders.base_dataloader"], [185, "module-neural_compressor.data.dataloaders.dataloader"], [186, "module-neural_compressor.data.dataloaders.default_dataloader"], [187, "module-neural_compressor.data.dataloaders.fetcher"], [188, "module-neural_compressor.data.dataloaders"], [189, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [190, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [191, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [192, "module-neural_compressor.data.dataloaders.sampler"], [193, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [194, "module-neural_compressor.data.datasets.bert_dataset"], [195, "module-neural_compressor.data.datasets.coco_dataset"], [196, "module-neural_compressor.data.datasets.dataset"], [197, "module-neural_compressor.data.datasets.dummy_dataset"], [198, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [199, "module-neural_compressor.data.datasets.imagenet_dataset"], [200, "module-neural_compressor.data.datasets"], [201, "module-neural_compressor.data.datasets.style_transfer_dataset"], [202, "module-neural_compressor.data.filters.coco_filter"], [203, "module-neural_compressor.data.filters.filter"], [204, "module-neural_compressor.data.filters"], [205, "module-neural_compressor.data"], [206, "module-neural_compressor.data.transforms.coco_transform"], [207, "module-neural_compressor.data.transforms.imagenet_transform"], [208, "module-neural_compressor.data.transforms"], [209, "module-neural_compressor.data.transforms.postprocess"], [210, "module-neural_compressor.data.transforms.tokenization"], [211, "module-neural_compressor.data.transforms.transform"], [212, "module-neural_compressor.experimental.benchmark"], [213, "module-neural_compressor.experimental.common.criterion"], [214, "module-neural_compressor.experimental.common.dataloader"], [215, "module-neural_compressor.experimental.common"], [216, "module-neural_compressor.experimental.common.metric"], [217, "module-neural_compressor.experimental.common.model"], [218, "module-neural_compressor.experimental.common.optimizer"], [219, "module-neural_compressor.experimental.common.postprocess"], [220, "module-neural_compressor.experimental.common.torch_utils"], [221, "module-neural_compressor.experimental.component"], [222, "module-neural_compressor.experimental.compression"], [223, "module-neural_compressor.experimental.compression.pruning"], [224, "module-neural_compressor.experimental.contrib"], [225, "module-neural_compressor.experimental.contrib.strategy"], [226, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [227, "module-neural_compressor.experimental.contrib.strategy.tpe"], [228, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [229, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [230, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [231, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [232, "module-neural_compressor.experimental.data.dataloaders"], [233, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [234, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [235, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [236, "module-neural_compressor.experimental.data.dataloaders.sampler"], [237, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [238, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [239, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [240, "module-neural_compressor.experimental.data.datasets.dataset"], [241, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [242, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [243, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [244, "module-neural_compressor.experimental.data.datasets"], [245, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [246, "module-neural_compressor.experimental.data.filters.coco_filter"], [247, "module-neural_compressor.experimental.data.filters.filter"], [248, "module-neural_compressor.experimental.data.filters"], [249, "module-neural_compressor.experimental.data"], [250, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [251, "module-neural_compressor.experimental.data.transforms"], [252, "module-neural_compressor.experimental.data.transforms.tokenization"], [253, "module-neural_compressor.experimental.data.transforms.transform"], [254, "module-neural_compressor.experimental.distillation"], [255, "module-neural_compressor.experimental.export"], [256, "module-neural_compressor.experimental.export.qlinear2qdq"], [257, "module-neural_compressor.experimental.export.tf2onnx"], [258, "module-neural_compressor.experimental.export.torch2onnx"], [259, "module-neural_compressor.experimental.export.utils"], [260, "module-neural_compressor.experimental.graph_optimization"], [261, "module-neural_compressor.experimental"], [262, "module-neural_compressor.experimental.metric.bleu"], [263, "module-neural_compressor.experimental.metric.bleu_util"], [264, "module-neural_compressor.experimental.metric.coco_label_map"], [265, "module-neural_compressor.experimental.metric.coco_tools"], [266, "module-neural_compressor.experimental.metric.evaluate_squad"], [267, "module-neural_compressor.experimental.metric.f1"], [268, "module-neural_compressor.experimental.metric"], [269, "module-neural_compressor.experimental.metric.metric"], [270, "module-neural_compressor.experimental.mixed_precision"], [271, "module-neural_compressor.experimental.model_conversion"], [272, "module-neural_compressor.experimental.nas.basic_nas"], [273, "module-neural_compressor.experimental.nas.dynas"], [274, "module-neural_compressor.experimental.nas"], [275, "module-neural_compressor.experimental.nas.nas"], [276, "module-neural_compressor.experimental.nas.nas_utils"], [277, "module-neural_compressor.experimental.nas.search_algorithms"], [278, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [279, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [280, "module-neural_compressor.experimental.pruner_legacy"], [281, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [282, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [283, "module-neural_compressor.experimental.pruner_legacy.pruner"], [284, "module-neural_compressor.experimental.pruning"], [285, "module-neural_compressor.experimental.pruning_recipes"], [286, "module-neural_compressor.experimental.pruning_recipes.patterns"], [287, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [288, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [289, "module-neural_compressor.experimental.pruning_v2"], [290, "module-neural_compressor.experimental.pytorch_pruner"], [291, "module-neural_compressor.experimental.pytorch_pruner.logger"], [292, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [293, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [294, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [295, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [296, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [297, "module-neural_compressor.experimental.quantization"], [298, "module-neural_compressor.experimental.scheduler"], [299, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [300, "module-neural_compressor.experimental.strategy.basic"], [301, "module-neural_compressor.experimental.strategy.bayesian"], [302, "module-neural_compressor.experimental.strategy.exhaustive"], [303, "module-neural_compressor.experimental.strategy"], [304, "module-neural_compressor.experimental.strategy.mse"], [305, "module-neural_compressor.experimental.strategy.mse_v2"], [306, "module-neural_compressor.experimental.strategy.random"], [307, "module-neural_compressor.experimental.strategy.strategy"], [308, "module-neural_compressor.experimental.strategy.utils.constant"], [309, "module-neural_compressor.experimental.strategy.utils"], [310, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [311, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [312, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [313, "module-neural_compressor.experimental.strategy.utils.utility"], [314, "module-neural_compressor"], [315, "module-neural_compressor.metric.bleu"], [316, "module-neural_compressor.metric.bleu_util"], [317, "module-neural_compressor.metric.coco_label_map"], [318, "module-neural_compressor.metric.coco_tools"], [319, "module-neural_compressor.metric.evaluate_squad"], [320, "module-neural_compressor.metric.f1"], [321, "module-neural_compressor.metric"], [322, "module-neural_compressor.metric.metric"], [323, "module-neural_compressor.mix_precision"], [324, "module-neural_compressor.model.base_model"], [325, "module-neural_compressor.model"], [326, "module-neural_compressor.model.keras_model"], [327, "module-neural_compressor.model.model"], [328, "module-neural_compressor.model.mxnet_model"], [329, "module-neural_compressor.model.nets_factory"], [330, "module-neural_compressor.model.onnx_model"], [331, "module-neural_compressor.model.tensorflow_model"], [332, "module-neural_compressor.model.torch_model"], [333, "module-neural_compressor.objective"], [334, "module-neural_compressor.quantization"], [335, "module-neural_compressor.strategy.auto"], [336, "module-neural_compressor.strategy.auto_mixed_precision"], [337, "module-neural_compressor.strategy.basic"], [338, "module-neural_compressor.strategy.bayesian"], [339, "module-neural_compressor.strategy.conservative"], [340, "module-neural_compressor.strategy.exhaustive"], [341, "module-neural_compressor.strategy.hawq_v2"], [342, "module-neural_compressor.strategy"], [343, "module-neural_compressor.strategy.mse"], [344, "module-neural_compressor.strategy.mse_v2"], [345, "module-neural_compressor.strategy.random"], [346, "module-neural_compressor.strategy.strategy"], [347, "module-neural_compressor.strategy.utils.constant"], [348, "module-neural_compressor.strategy.utils"], [349, "module-neural_compressor.strategy.utils.tuning_sampler"], [350, "module-neural_compressor.strategy.utils.tuning_space"], [351, "module-neural_compressor.strategy.utils.tuning_structs"], [352, "module-neural_compressor.strategy.utils.utility"], [353, "module-neural_compressor.template.api_doc_example"], [354, "module-neural_compressor.template"], [355, "module-neural_compressor.training"], [356, "module-neural_compressor.utils.collect_layer_histogram"], [357, "module-neural_compressor.utils.constant"], [358, "module-neural_compressor.utils.create_obj_from_config"], [359, "module-neural_compressor.utils"], [360, "module-neural_compressor.utils.kl_divergence"], [361, "module-neural_compressor.utils.load_huggingface"], [362, "module-neural_compressor.utils.logger"], [363, "module-neural_compressor.utils.options"], [364, "module-neural_compressor.utils.pytorch"], [365, "module-neural_compressor.utils.utility"], [366, "module-neural_compressor.ux.components.benchmark.benchmark"], [367, "module-neural_compressor.ux.components.benchmark.benchmark_model"], [368, "module-neural_compressor.ux.components.benchmark.execute_benchmark"], [369, "module-neural_compressor.ux.components.benchmark"], [370, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"], [371, "module-neural_compressor.ux.components.config_generator.config_generator"], [372, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"], [373, "module-neural_compressor.ux.components.config_generator"], [374, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"], [375, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"], [376, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"], [377, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"], [378, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"], [379, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"], [380, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"], [381, "module-neural_compressor.ux.components.configuration_wizard"], [382, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"], [383, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"], [384, "module-neural_compressor.ux.components.db_manager.db_manager"], [385, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"], [386, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"], [387, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"], [388, "module-neural_compressor.ux.components.db_manager.db_models.dataset"], [389, "module-neural_compressor.ux.components.db_manager.db_models.domain"], [390, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"], [391, "module-neural_compressor.ux.components.db_manager.db_models.example"], [392, "module-neural_compressor.ux.components.db_manager.db_models.framework"], [393, "module-neural_compressor.ux.components.db_manager.db_models"], [394, "module-neural_compressor.ux.components.db_manager.db_models.metric"], [395, "module-neural_compressor.ux.components.db_manager.db_models.model"], [396, "module-neural_compressor.ux.components.db_manager.db_models.optimization"], [397, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"], [398, "module-neural_compressor.ux.components.db_manager.db_models.precision"], [399, "module-neural_compressor.ux.components.db_manager.db_models.profiling"], [400, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"], [401, "module-neural_compressor.ux.components.db_manager.db_models.project"], [402, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"], [403, "module-neural_compressor.ux.components.db_manager.db_models.transform"], [404, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"], [405, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"], [406, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"], [407, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"], [408, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"], [409, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"], [410, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"], [411, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"], [412, "module-neural_compressor.ux.components.db_manager.db_operations"], [413, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"], [414, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"], [415, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"], [416, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"], [417, "module-neural_compressor.ux.components.db_manager"], [418, "module-neural_compressor.ux.components.db_manager.params_interfaces"], [419, "module-neural_compressor.ux.components.db_manager.utils"], [420, "module-neural_compressor.ux.components.diagnosis.diagnosis"], [421, "module-neural_compressor.ux.components.diagnosis.factory"], [422, "module-neural_compressor.ux.components.diagnosis"], [423, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"], [424, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"], [425, "module-neural_compressor.ux.components.diagnosis.op_details"], [426, "module-neural_compressor.ux.components.diagnosis.op_entry"], [427, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"], [428, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"], [429, "module-neural_compressor.ux.components.file_browser.file_browser"], [430, "module-neural_compressor.ux.components.file_browser"], [431, "module-neural_compressor.ux.components.graph.attribute"], [432, "module-neural_compressor.ux.components.graph.collapser"], [433, "module-neural_compressor.ux.components.graph.edge"], [434, "module-neural_compressor.ux.components.graph.graph"], [435, "module-neural_compressor.ux.components.graph.graph_reader"], [436, "module-neural_compressor.ux.components.graph"], [437, "module-neural_compressor.ux.components.graph.node"], [438, "module-neural_compressor.ux.components.graph.reader"], [439, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"], [440, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"], [441, "module-neural_compressor.ux.components"], [442, "module-neural_compressor.ux.components.jobs_management"], [443, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"], [444, "module-neural_compressor.ux.components.jobs_management.jobs_manager"], [445, "module-neural_compressor.ux.components.jobs_management.request"], [446, "module-neural_compressor.ux.components.manage_workspace"], [447, "module-neural_compressor.ux.components.model.domain"], [448, "module-neural_compressor.ux.components.model"], [449, "module-neural_compressor.ux.components.model.model"], [450, "module-neural_compressor.ux.components.model.model_type_getter"], [451, "module-neural_compressor.ux.components.model.onnxrt"], [452, "module-neural_compressor.ux.components.model.onnxrt.model"], [453, "module-neural_compressor.ux.components.model.pytorch"], [454, "module-neural_compressor.ux.components.model.pytorch.model"], [455, "module-neural_compressor.ux.components.model.repository"], [456, "module-neural_compressor.ux.components.model.shape"], [457, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"], [458, "module-neural_compressor.ux.components.model.tensorflow"], [459, "module-neural_compressor.ux.components.model.tensorflow.keras"], [460, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"], [461, "module-neural_compressor.ux.components.model.tensorflow.model"], [462, "module-neural_compressor.ux.components.model.tensorflow.saved_model"], [463, "module-neural_compressor.ux.components.model.tensorflow.utils"], [464, "module-neural_compressor.ux.components.model_zoo.download_config"], [465, "module-neural_compressor.ux.components.model_zoo.download_model"], [466, "module-neural_compressor.ux.components.model_zoo.downloader"], [467, "module-neural_compressor.ux.components.model_zoo"], [468, "module-neural_compressor.ux.components.model_zoo.list_models"], [469, "module-neural_compressor.ux.components.names_mapper"], [470, "module-neural_compressor.ux.components.names_mapper.names_mapper"], [471, "module-neural_compressor.ux.components.optimization.execute_optimization"], [472, "module-neural_compressor.ux.components.optimization.factory"], [473, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"], [474, "module-neural_compressor.ux.components.optimization.graph_optimizer"], [475, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"], [476, "module-neural_compressor.ux.components.optimization"], [477, "module-neural_compressor.ux.components.optimization.mixed_precision"], [478, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"], [479, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"], [480, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"], [481, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"], [482, "module-neural_compressor.ux.components.optimization.optimization"], [483, "module-neural_compressor.ux.components.optimization.pruning"], [484, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"], [485, "module-neural_compressor.ux.components.optimization.pruning.pruning"], [486, "module-neural_compressor.ux.components.optimization.tune"], [487, "module-neural_compressor.ux.components.optimization.tune.tune_model"], [488, "module-neural_compressor.ux.components.optimization.tune.tuning"], [489, "module-neural_compressor.ux.components.optimization.tuning_history"], [490, "module-neural_compressor.ux.components.profiling.execute_profiling"], [491, "module-neural_compressor.ux.components.profiling.factory"], [492, "module-neural_compressor.ux.components.profiling"], [493, "module-neural_compressor.ux.components.profiling.profile_model"], [494, "module-neural_compressor.ux.components.profiling.profiler"], [495, "module-neural_compressor.ux.components.profiling.profiling"], [496, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"], [497, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"], [498, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"], [499, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"], [500, "module-neural_compressor.ux.inc_bench"], [501, "module-neural_compressor.ux"], [502, "module-neural_compressor.ux.utils.consts"], [503, "module-neural_compressor.ux.utils.environment"], [504, "module-neural_compressor.ux.utils.exceptions"], [505, "module-neural_compressor.ux.utils.executor"], [506, "module-neural_compressor.ux.utils.expiring_dict"], [507, "module-neural_compressor.ux.utils.github_info"], [508, "module-neural_compressor.ux.utils.hw_info"], [509, "module-neural_compressor.ux.utils"], [510, "module-neural_compressor.ux.utils.json_serializer"], [511, "module-neural_compressor.ux.utils.logger"], [512, "module-neural_compressor.ux.utils.parser"], [513, "module-neural_compressor.ux.utils.proc"], [514, "module-neural_compressor.ux.utils.processes"], [515, "module-neural_compressor.ux.utils.singleton"], [516, "module-neural_compressor.ux.utils.status_updates"], [517, "module-neural_compressor.ux.utils.templates"], [518, "module-neural_compressor.ux.utils.templates.metric"], [519, "module-neural_compressor.ux.utils.templates.workdir"], [520, "module-neural_compressor.ux.utils.utils"], [521, "module-neural_compressor.ux.utils.workload.config"], [522, "module-neural_compressor.ux.utils.workload.dataloader"], [523, "module-neural_compressor.ux.utils.workload.evaluation"], [524, "module-neural_compressor.ux.utils.workload.graph_optimization"], [525, "module-neural_compressor.ux.utils.workload"], [526, "module-neural_compressor.ux.utils.workload.mixed_precision"], [527, "module-neural_compressor.ux.utils.workload.model"], [528, "module-neural_compressor.ux.utils.workload.pruning"], [529, "module-neural_compressor.ux.utils.workload.quantization"], [530, "module-neural_compressor.ux.utils.workload.tuning"], [531, "module-neural_compressor.ux.utils.yaml_utils"], [532, "module-neural_compressor.ux.web.communication"], [533, "module-neural_compressor.ux.web.configuration"], [534, "module-neural_compressor.ux.web.exceptions"], [535, "module-neural_compressor.ux.web"], [536, "module-neural_compressor.ux.web.router"], [537, "module-neural_compressor.ux.web.server"], [538, "module-neural_compressor.ux.web.service.benchmark"], [539, "module-neural_compressor.ux.web.service.history_snapshot_parser"], [540, "module-neural_compressor.ux.web.service"], [541, "module-neural_compressor.ux.web.service.model"], [542, "module-neural_compressor.ux.web.service.optimization"], [543, "module-neural_compressor.ux.web.service.profiling"], [544, "module-neural_compressor.ux.web.service.request_data_processor"], [545, "module-neural_compressor.ux.web.service.response_generator"], [546, "module-neural_compressor.ux.web.service.workload"], [547, "module-neural_compressor.version"]], "6ece06672ed3_v1_14": [[1, "module-6ece06672ed3_v1_14"]], "update_dataloaders() (in module 6ece06672ed3_v1_14)": [[1, "ece06672ed3_v1_14.update_dataloaders"]], "update_transformations() (in module 6ece06672ed3_v1_14)": [[1, "ece06672ed3_v1_14.update_transformations"]], "6f0d0f71d92e_v1_13": [[2, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[3, "module-9e89549a08c8_v1_11"]], "block_mask": [[4, "module-block_mask"]], "env": [[5, "module-env"]], "run_migrations_offline() (in module env)": [[5, "env.run_migrations_offline"]], "run_migrations_online() (in module env)": [[5, "env.run_migrations_online"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[6, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[6, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[6, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[7, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[8, "neural_compressor.adaptor.keras.KerasQuery"]], "neural_compressor.adaptor.keras": [[8, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[9, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[10, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[11, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[12, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[13, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[14, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[15, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[16, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[16, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[17, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[18, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[19, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[19, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[19, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[19, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[19, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[20, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[20, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[21, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[21, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[21, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[21, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[21, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[21, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[21, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[21, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[22, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[23, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[23, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[23, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[23, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[24, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[24, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[24, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[25, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[25, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[25, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[26, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[26, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[26, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[27, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[27, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[27, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[28, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[28, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[28, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[29, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[29, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[29, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[30, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[30, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[31, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[31, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[31, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[33, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[33, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[34, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[35, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[35, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[36, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[36, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[36, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[37, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[37, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[37, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[38, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[38, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[38, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[38, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[38, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[39, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[39, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[39, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[40, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[40, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[40, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[41, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[41, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[41, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[42, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[42, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[42, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[43, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[43, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "adjust_weights_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_input"]], "adjust_weights_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_op"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "fold_scale() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.fold_scale"]], "get_smooth_scales_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_input"]], "get_smooth_scales_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_op"]], "insert_smooth_mul_op_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_input"]], "insert_smooth_mul_op_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_op"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[44, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[46, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[49, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[140, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[140, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[141, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[141, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[142, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[144, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[145, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[146, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[147, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[147, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[147, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[147, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[148, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[148, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[148, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[148, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[148, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[149, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[150, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "graphtrace (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[151, "neural_compressor.adaptor.torch_utils.smooth_quant.GraphTrace"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[151, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[151, "neural_compressor.adaptor.torch_utils.smooth_quant.get_module"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[151, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "set_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[151, "neural_compressor.adaptor.torch_utils.smooth_quant.set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[152, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[152, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[152, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[153, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[153, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[153, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[153, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[153, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[153, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[153, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[153, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[153, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[153, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[153, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[153, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[153, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[153, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[153, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[153, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[153, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "neural_compressor.adaptor.torch_utils.util": [[153, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[153, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[153, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[153, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[153, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[154, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[154, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[154, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[154, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[154, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[155, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[155, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[156, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[157, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[157, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[158, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[158, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[159, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[159, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[159, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[159, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[159, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[159, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[159, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[159, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[159, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[159, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[159, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[159, "module-neural_compressor.benchmark"]], "run_instance() (in module neural_compressor.benchmark)": [[159, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[159, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[159, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[159, "neural_compressor.benchmark.summary_benchmark"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[160, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[160, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[160, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[160, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[160, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[160, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[160, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[160, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[160, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[161, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[161, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[161, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[161, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[161, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[161, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[161, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[161, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[161, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[161, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[161, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[161, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[161, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[161, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[161, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[161, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[161, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[161, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[162, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[163, "module-neural_compressor.compression"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[164, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[164, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[164, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[164, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[164, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumblockcriterion (class in neural_compressor.compression.pruner.criteria)": [[164, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[164, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[164, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[164, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[164, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[164, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[164, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[164, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[164, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[164, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumblockcriterion attribute)": [[164, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[164, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[165, "module-neural_compressor.compression.pruner"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[166, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[166, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[166, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[166, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[166, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[166, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[166, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[167, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[168, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[168, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[169, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[169, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "mhacompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[169, "neural_compressor.compression.pruner.model_slim.weight_slim.MHACompression"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[169, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[169, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[169, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[169, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[169, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[169, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns)": [[170, "neural_compressor.compression.pruner.patterns.BasePattern"]], "m (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[170, "neural_compressor.compression.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[170, "neural_compressor.compression.pruner.patterns.PatternNInM.N"]], "patternninm (class in neural_compressor.compression.pruner.patterns)": [[170, "neural_compressor.compression.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.compression.pruner.patterns)": [[170, "neural_compressor.compression.pruner.patterns.PatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.patternnxm attribute)": [[170, "neural_compressor.compression.pruner.patterns.PatternNxM.block_size"]], "config (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[170, "neural_compressor.compression.pruner.patterns.BasePattern.config"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[170, "neural_compressor.compression.pruner.patterns.get_pattern"]], "invalid_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[170, "neural_compressor.compression.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[170, "neural_compressor.compression.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[170, "neural_compressor.compression.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[170, "neural_compressor.compression.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[170, "neural_compressor.compression.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[170, "neural_compressor.compression.pruner.patterns.BasePattern.modules"]], "neural_compressor.compression.pruner.patterns": [[170, "module-neural_compressor.compression.pruner.patterns"]], "pattern (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[170, "neural_compressor.compression.pruner.patterns.BasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns)": [[170, "neural_compressor.compression.pruner.patterns.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[170, "neural_compressor.compression.pruner.patterns.BasePattern.target_sparsity"]], "basepruner (class in neural_compressor.compression.pruner.pruners)": [[171, "neural_compressor.compression.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.compression.pruner.pruners)": [[171, "neural_compressor.compression.pruner.pruners.BasicPruner"]], "blockmaskpruner (class in neural_compressor.compression.pruner.pruners)": [[171, "neural_compressor.compression.pruner.pruners.BlockMaskPruner"]], "patternlockpruner (class in neural_compressor.compression.pruner.pruners)": [[171, "neural_compressor.compression.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.compression.pruner.pruners)": [[171, "neural_compressor.compression.pruner.pruners.ProgressivePruner"]], "retrainfreepruner (class in neural_compressor.compression.pruner.pruners)": [[171, "neural_compressor.compression.pruner.pruners.RetrainFreePruner"]], "config (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[171, "neural_compressor.compression.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[171, "neural_compressor.compression.pruner.pruners.BasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[171, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[171, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.criterion"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[171, "neural_compressor.compression.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[171, "neural_compressor.compression.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[171, "neural_compressor.compression.pruner.pruners.get_pruner"]], "global_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[171, "neural_compressor.compression.pruner.pruners.BasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[171, "neural_compressor.compression.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[171, "neural_compressor.compression.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[171, "neural_compressor.compression.pruner.pruners.BasePruner.modules"]], "neural_compressor.compression.pruner.pruners": [[171, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[171, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pattern (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[171, "neural_compressor.compression.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[171, "neural_compressor.compression.pruner.pruners.BasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[171, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[171, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[171, "neural_compressor.compression.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[171, "neural_compressor.compression.pruner.pruners.BasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[171, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[171, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.reg"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners)": [[171, "neural_compressor.compression.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[171, "neural_compressor.compression.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[171, "neural_compressor.compression.pruner.pruners.BasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[171, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[171, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[171, "neural_compressor.compression.pruner.pruners.BasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[171, "neural_compressor.compression.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[171, "neural_compressor.compression.pruner.pruners.BasePruner.target_sparsity_ratio"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[172, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[172, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[172, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[172, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[172, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[172, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[172, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[172, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[173, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[173, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[173, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[173, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[173, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[173, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[173, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[174, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[174, "neural_compressor.compression.pruner.utils.check_key_validity"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[174, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[174, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "neural_compressor.compression.pruner.utils": [[174, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[174, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[174, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[174, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[174, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[174, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[174, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[174, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[174, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[175, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[175, "neural_compressor.conf.config.Conf"]], "distillation_conf (class in neural_compressor.conf.config)": [[175, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[175, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[175, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[175, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[175, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[175, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[175, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[175, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[176, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[176, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[176, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[176, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[177, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[178, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[178, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[178, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[178, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[178, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[178, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[178, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[178, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[179, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[179, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[179, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[179, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[179, "neural_compressor.config.ExportConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[179, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[179, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[179, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[179, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[179, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[179, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[179, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[179, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[179, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[179, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[179, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[179, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[179, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[179, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[179, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[179, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[179, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[179, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[179, "module-neural_compressor.config"]], "neural_compressor.contrib": [[180, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[181, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[182, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[182, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[183, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[183, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[184, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[184, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[185, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[185, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[185, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[186, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[186, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[186, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[187, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[187, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[187, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[187, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[188, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[189, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[189, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[190, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[190, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[190, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[191, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[191, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[192, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[192, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[192, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[192, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[192, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[193, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[193, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[193, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[193, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[193, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[194, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[194, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[194, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[194, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[194, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[194, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[194, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[194, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[194, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[195, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[195, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[195, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[195, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[195, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[196, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[196, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[197, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[197, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[198, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[198, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[198, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[199, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[199, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[199, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[199, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[199, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[199, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[199, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[200, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[201, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[201, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[202, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[202, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[202, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[203, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[203, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[203, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[203, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[203, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[203, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[203, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[203, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[203, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[204, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[205, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[206, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[206, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[207, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[207, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[207, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[207, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[207, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[207, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[207, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[207, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[207, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[207, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[208, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[209, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[209, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[210, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[210, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[210, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[210, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[210, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[210, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[210, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[210, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.TRANSFORMS"], [211, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[211, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[211, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[212, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[212, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[212, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[212, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[212, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[212, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[212, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[212, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[212, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[212, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[213, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[213, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[213, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[213, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[213, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[213, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[213, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[213, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[213, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[213, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[213, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[213, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[213, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[213, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[213, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[213, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[213, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[213, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[213, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[213, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[213, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[214, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[214, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[215, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[216, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[216, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[217, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[217, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[217, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[218, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[218, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[218, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[218, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[218, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[218, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[218, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[218, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[218, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[219, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[219, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[220, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[220, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[220, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[221, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[221, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[222, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[223, "module-neural_compressor.experimental.compression.pruning"]], "prepare_pruning() (in module neural_compressor.experimental.compression.pruning)": [[223, "neural_compressor.experimental.compression.pruning.prepare_pruning"]], "save() (in module neural_compressor.experimental.compression.pruning)": [[223, "neural_compressor.experimental.compression.pruning.save"]], "neural_compressor.experimental.contrib": [[224, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[225, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[226, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[226, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[227, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[227, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[228, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[228, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[229, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[230, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[230, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[230, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[231, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[231, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[231, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[231, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[232, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[233, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[233, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[234, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[234, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[234, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[235, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[235, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[236, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[236, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[236, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[236, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[236, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[237, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[237, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[237, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[237, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[237, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[238, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[238, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[238, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[238, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[238, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[238, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[238, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[238, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[238, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[239, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[239, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[239, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[239, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[239, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[240, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[240, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[241, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[241, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[242, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[242, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[242, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[243, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[243, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[243, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[243, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[243, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[243, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[243, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[244, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[245, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[245, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[246, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[246, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[246, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[247, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[247, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[247, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[247, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[247, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[247, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[247, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[247, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[247, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[248, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[249, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[250, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[250, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[250, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[250, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[250, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[250, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[250, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[250, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[250, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[250, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[251, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[252, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[252, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[252, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[252, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[252, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[252, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[252, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[252, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [253, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[253, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[253, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[254, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[254, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[254, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[254, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[254, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[254, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[255, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[256, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[256, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[256, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[257, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[257, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[257, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "build_scale_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[258, "neural_compressor.experimental.export.torch2onnx.build_scale_mapping"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[258, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[258, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[258, "module-neural_compressor.experimental.export.torch2onnx"]], "qdq_fp32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[258, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias"]], "qdq_fp32_bias_qdq() (in module neural_compressor.experimental.export.torch2onnx)": [[258, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias_qdq"]], "qdq_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[258, "neural_compressor.experimental.export.torch2onnx.qdq_int32_bias"]], "recalculate_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[258, "neural_compressor.experimental.export.torch2onnx.recalculate_bias"]], "remove_nodes_by_name() (in module neural_compressor.experimental.export.torch2onnx)": [[258, "neural_compressor.experimental.export.torch2onnx.remove_nodes_by_name"]], "set_data_type() (in module neural_compressor.experimental.export.torch2onnx)": [[258, "neural_compressor.experimental.export.torch2onnx.set_data_type"]], "set_scale_info() (in module neural_compressor.experimental.export.torch2onnx)": [[258, "neural_compressor.experimental.export.torch2onnx.set_scale_info"]], "sub_graph_with_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[258, "neural_compressor.experimental.export.torch2onnx.sub_graph_with_int32_bias"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[258, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[258, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "update_weight_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[258, "neural_compressor.experimental.export.torch2onnx.update_weight_bias"]], "dummydatareader (class in neural_compressor.experimental.export.utils)": [[259, "neural_compressor.experimental.export.utils.DummyDataReader"]], "onnx2numpy_dtype() (in module neural_compressor.experimental.export.utils)": [[259, "neural_compressor.experimental.export.utils.ONNX2Numpy_dtype"]], "neural_compressor.experimental.export.utils": [[259, "module-neural_compressor.experimental.export.utils"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[260, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[260, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[261, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[262, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[262, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[262, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[262, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[262, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[262, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[262, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[262, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[262, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[263, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[263, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[264, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[265, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[265, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[265, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[265, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[265, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[265, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[265, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[265, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[266, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[266, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[266, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[266, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[266, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[267, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[267, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[267, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[267, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[267, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[268, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[269, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[269, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[269, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[269, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[269, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[269, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[269, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[269, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[269, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[269, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[269, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[269, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[269, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[269, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[269, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[269, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[269, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[269, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[269, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[269, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[269, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[269, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[269, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[269, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[269, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[269, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[269, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[269, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[269, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[269, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[269, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[269, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[269, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[269, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[269, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[269, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[269, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[269, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[269, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[269, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[269, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[269, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[269, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[269, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[269, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[269, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[269, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[269, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[269, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[269, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[269, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[269, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[269, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[270, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[270, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[271, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[271, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[272, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[272, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[273, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[273, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[274, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[275, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[275, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[275, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[276, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[276, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[276, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[276, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[277, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[277, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[277, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[277, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[277, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[278, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[278, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[279, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[279, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[280, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[281, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[281, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[282, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[282, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[283, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[283, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[283, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[284, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[284, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[284, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[284, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[284, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[285, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[286, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[287, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[287, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[287, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[287, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[287, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[288, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[289, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[289, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[289, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[289, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[289, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[290, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[291, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[292, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[292, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[293, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[293, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[293, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[293, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[293, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[293, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[293, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[294, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[295, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[295, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[296, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[296, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[296, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[296, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[296, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[296, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[297, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[297, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[298, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[298, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[299, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[299, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[300, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[300, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[301, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[301, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[301, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[301, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[301, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[302, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[302, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[303, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[304, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[304, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[305, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[305, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[306, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[306, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[307, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[307, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[307, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[308, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[309, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[310, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[310, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[310, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[310, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[310, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[310, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[310, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[310, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[310, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[311, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[311, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[311, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[311, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[311, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[311, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[311, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[312, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[312, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[313, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[313, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[313, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[313, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[313, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[314, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[315, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[315, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[315, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[315, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[315, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[315, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[315, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[315, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[315, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[316, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[316, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[317, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[318, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[318, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[318, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[318, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[318, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[318, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[318, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[318, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[319, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[319, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[319, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[319, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[319, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[320, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[320, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[320, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[320, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[320, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[321, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[322, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[322, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[322, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[322, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[322, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[322, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[322, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[322, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[322, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[322, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[322, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[322, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[322, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[322, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[322, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[322, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[322, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[322, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[322, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[322, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[322, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[322, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[322, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[322, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[322, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[322, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[322, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[322, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[322, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[322, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[322, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[322, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[322, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[322, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[322, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[322, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[322, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[322, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[322, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[322, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[322, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[322, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[322, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[322, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[322, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[322, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[322, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[322, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[322, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[322, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[322, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[322, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[322, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[322, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[322, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[323, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[323, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[324, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[324, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[325, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[326, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[326, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[327, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[327, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[327, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[328, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[328, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[329, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[329, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[330, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[330, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[331, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[331, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[331, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[331, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[331, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[331, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[331, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[331, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[331, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[331, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[331, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[331, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[331, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[331, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[331, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[331, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[331, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[331, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[332, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[332, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[332, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[332, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[332, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[333, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[333, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[333, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[333, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[333, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[333, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[333, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[333, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[333, "neural_compressor.objective.objective_registry"]], "fit() (in module neural_compressor.quantization)": [[334, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[334, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[335, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[335, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[336, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[336, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[337, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[337, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[338, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[338, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[338, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[338, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[338, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[339, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[339, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[340, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[340, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[341, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[341, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[342, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[343, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[343, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[344, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[344, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[345, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[345, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[346, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[346, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[346, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[346, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[347, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[348, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[349, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[349, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[349, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[349, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[349, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[349, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[349, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.strategy.utils.tuning_sampler)": [[349, "neural_compressor.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_sampler": [[349, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[350, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[350, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[350, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[350, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[350, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[350, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[350, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[351, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[351, "module-neural_compressor.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[352, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[352, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[352, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[352, "module-neural_compressor.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[352, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[353, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[353, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[353, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[353, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[353, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[353, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[353, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[353, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[353, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[353, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[353, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[354, "module-neural_compressor.template"]], "callbacks (class in neural_compressor.training)": [[355, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[355, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[355, "neural_compressor.training.fit"]], "neural_compressor.training": [[355, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[355, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[356, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[356, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[357, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[358, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[358, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[358, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[358, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[358, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[358, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[358, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[358, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[358, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[358, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[359, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[360, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[360, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[361, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "neural_compressor.utils.load_huggingface": [[361, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[361, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[362, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[362, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[362, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[362, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[362, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[362, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[362, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[362, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[362, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.options": [[363, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[363, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[364, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[364, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[364, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.Dequantize"]], "dequantizeweight() (in module neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.DequantizeWeight"]], "dotdict (class in neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.MODE"]], "statistics (class in neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.alias_param"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.compute_sparsity"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.dump_elapsed_time"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_size() (in module neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.get_tuning_history"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.load_data_from_pkl"]], "neural_compressor.utils.utility": [[365, "module-neural_compressor.utils.utility"]], "recover() (in module neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[365, "neural_compressor.utils.utility.version1_lte_version2"]], "benchmark (class in neural_compressor.ux.components.benchmark.benchmark)": [[366, "neural_compressor.ux.components.benchmark.benchmark.Benchmark"]], "dataloaderinterface (class in neural_compressor.ux.components.benchmark.benchmark)": [[366, "neural_compressor.ux.components.benchmark.benchmark.DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark": [[366, "module-neural_compressor.ux.components.benchmark.benchmark"]], "benchmark_model() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[367, "neural_compressor.ux.components.benchmark.benchmark_model.benchmark_model"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[367, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "parse_args() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[367, "neural_compressor.ux.components.benchmark.benchmark_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[367, "neural_compressor.ux.components.benchmark.benchmark_model.set_eager_execution"]], "benchmark_result_update() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[368, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update"]], "benchmark_result_update_pytorch_script() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[368, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update_pytorch_script"]], "execute_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[368, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_benchmark"]], "execute_real_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[368, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_real_benchmark"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[368, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "pytorch_script_bench_optimizations() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[368, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_optimizations"]], "pytorch_script_bench_original_model() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[368, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_original_model"]], "benchmarks (class in neural_compressor.ux.components.benchmark)": [[369, "neural_compressor.ux.components.benchmark.Benchmarks"]], "neural_compressor.ux.components.benchmark": [[369, "module-neural_compressor.ux.components.benchmark"]], "benchmarkconfiggenerator (class in neural_compressor.ux.components.config_generator.benchmark_config_generator)": [[370, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[370, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "configgenerator (class in neural_compressor.ux.components.config_generator.config_generator)": [[371, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator": [[371, "module-neural_compressor.ux.components.config_generator.config_generator"]], "graphoptimizationconfiggenerator (class in neural_compressor.ux.components.config_generator.graph_optimization_config_generator)": [[372, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[372, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[373, "module-neural_compressor.ux.components.config_generator"]], "mixedprecisionconfiggenerator (class in neural_compressor.ux.components.config_generator.mixed_precision_config_generator)": [[374, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[374, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "profilingconfiggenerator (class in neural_compressor.ux.components.config_generator.profiling_config_generator)": [[375, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[375, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "pruningconfiggenerator (class in neural_compressor.ux.components.config_generator.pruning_config_generator)": [[376, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[376, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "quantizationconfiggenerator (class in neural_compressor.ux.components.config_generator.quantization_config_generator)": [[377, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[377, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "configurationparser (class in neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[378, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[378, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "normalize_string_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[378, "neural_compressor.ux.components.configuration_wizard.configuration_parser.normalize_string_list"]], "parse_list_value() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[378, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_list_value"]], "parse_multidim_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[378, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_multidim_list"]], "get_boundary_nodes() (in module neural_compressor.ux.components.configuration_wizard.get_boundary_nodes)": [[379, "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[379, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "get_predefined_configuration() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[380, "neural_compressor.ux.components.configuration_wizard.get_configuration.get_predefined_configuration"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[380, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "update_config_to_machine_specification() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[380, "neural_compressor.ux.components.configuration_wizard.get_configuration.update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard": [[381, "module-neural_compressor.ux.components.configuration_wizard"]], "feeder (class in neural_compressor.ux.components.configuration_wizard.params_feeder)": [[382, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder"]], "get_possible_values() (in module neural_compressor.ux.components.configuration_wizard.params_feeder)": [[382, "neural_compressor.ux.components.configuration_wizard.params_feeder.get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[382, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "pruningconfigparser (class in neural_compressor.ux.components.configuration_wizard.pruning_config_parser)": [[383, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[383, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "dbmanager (class in neural_compressor.ux.components.db_manager.db_manager)": [[384, "neural_compressor.ux.components.db_manager.db_manager.DBManager"]], "neural_compressor.ux.components.db_manager.db_manager": [[384, "module-neural_compressor.ux.components.db_manager.db_manager"]], "benchmark (class in neural_compressor.ux.components.db_manager.db_models.benchmark)": [[385, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[385, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "benchmarkresult (class in neural_compressor.ux.components.db_manager.db_models.benchmark_result)": [[386, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[386, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "dataloader (class in neural_compressor.ux.components.db_manager.db_models.dataloader)": [[387, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.dataloader)": [[387, "neural_compressor.ux.components.db_manager.db_models.dataloader.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[387, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "dataset (class in neural_compressor.ux.components.db_manager.db_models.dataset)": [[388, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[388, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "domain (class in neural_compressor.ux.components.db_manager.db_models.domain)": [[389, "neural_compressor.ux.components.db_manager.db_models.domain.Domain"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain)": [[389, "neural_compressor.ux.components.db_manager.db_models.domain.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[389, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "domainflavour (class in neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[390, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[390, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[390, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "example (class in neural_compressor.ux.components.db_manager.db_models.example)": [[391, "neural_compressor.ux.components.db_manager.db_models.example.Example"]], "neural_compressor.ux.components.db_manager.db_models.example": [[391, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "framework (class in neural_compressor.ux.components.db_manager.db_models.framework)": [[392, "neural_compressor.ux.components.db_manager.db_models.framework.Framework"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.framework)": [[392, "neural_compressor.ux.components.db_manager.db_models.framework.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[392, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[393, "module-neural_compressor.ux.components.db_manager.db_models"]], "metric (class in neural_compressor.ux.components.db_manager.db_models.metric)": [[394, "neural_compressor.ux.components.db_manager.db_models.metric.Metric"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.metric)": [[394, "neural_compressor.ux.components.db_manager.db_models.metric.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[394, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "model (class in neural_compressor.ux.components.db_manager.db_models.model)": [[395, "neural_compressor.ux.components.db_manager.db_models.model.Model"]], "neural_compressor.ux.components.db_manager.db_models.model": [[395, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "optimization (class in neural_compressor.ux.components.db_manager.db_models.optimization)": [[396, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[396, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "optimizationtype (class in neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[397, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[397, "neural_compressor.ux.components.db_manager.db_models.optimization_type.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[397, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "precision (class in neural_compressor.ux.components.db_manager.db_models.precision)": [[398, "neural_compressor.ux.components.db_manager.db_models.precision.Precision"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.precision)": [[398, "neural_compressor.ux.components.db_manager.db_models.precision.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[398, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "profiling (class in neural_compressor.ux.components.db_manager.db_models.profiling)": [[399, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[399, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "profilingresult (class in neural_compressor.ux.components.db_manager.db_models.profiling_result)": [[400, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[400, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "project (class in neural_compressor.ux.components.db_manager.db_models.project)": [[401, "neural_compressor.ux.components.db_manager.db_models.project.Project"]], "neural_compressor.ux.components.db_manager.db_models.project": [[401, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "pruningdetails (class in neural_compressor.ux.components.db_manager.db_models.pruning_details)": [[402, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[402, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "transform (class in neural_compressor.ux.components.db_manager.db_models.transform)": [[403, "neural_compressor.ux.components.db_manager.db_models.transform.Transform"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.transform)": [[403, "neural_compressor.ux.components.db_manager.db_models.transform.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[403, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "tuningdetails (class in neural_compressor.ux.components.db_manager.db_models.tuning_details)": [[404, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[404, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "tuninghistory (class in neural_compressor.ux.components.db_manager.db_models.tuning_history)": [[405, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[405, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[406, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface"]], "before_delete_benchmark_entry() (in module neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[406, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[406, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[407, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[407, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[407, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[407, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[407, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[407, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[407, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.set_database_version"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[408, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[408, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[408, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[408, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[408, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[408, "neural_compressor.ux.components.db_manager.db_operations.db_operations.set_database_version"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface)": [[409, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[409, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface)": [[410, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[410, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.examples_api_interface)": [[411, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[411, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[412, "module-neural_compressor.ux.components.db_manager.db_operations"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.model_api_interface)": [[413, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[413, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface)": [[414, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[414, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface)": [[415, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[415, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.project_api_interface)": [[416, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[416, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[417, "module-neural_compressor.ux.components.db_manager"]], "benchmarkaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[418, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkAddParamsInterface"]], "benchmarkeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[418, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkEditParamsInterface"]], "datasetaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[418, "neural_compressor.ux.components.db_manager.params_interfaces.DatasetAddParamsInterface"]], "diagnosisoptimizationparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[418, "neural_compressor.ux.components.db_manager.params_interfaces.DiagnosisOptimizationParamsInterface"]], "modeladdparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[418, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface"]], "optimizationaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[418, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationAddParamsInterface"]], "optimizationeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[418, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationEditParamsInterface"]], "profilingaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[418, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingAddParamsInterface"]], "profilingeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[418, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingEditParamsInterface"]], "profilingresultaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[418, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingResultAddParamsInterface"]], "tuninghistoryinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[418, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface"]], "tuninghistoryiteminterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[418, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[418, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "get_framework_dataloaders_config() (in module neural_compressor.ux.components.db_manager.utils)": [[419, "neural_compressor.ux.components.db_manager.utils.get_framework_dataloaders_config"]], "get_framework_transforms_config() (in module neural_compressor.ux.components.db_manager.utils)": [[419, "neural_compressor.ux.components.db_manager.utils.get_framework_transforms_config"]], "neural_compressor.ux.components.db_manager.utils": [[419, "module-neural_compressor.ux.components.db_manager.utils"]], "update_dataloaders_params() (in module neural_compressor.ux.components.db_manager.utils)": [[419, "neural_compressor.ux.components.db_manager.utils.update_dataloaders_params"]], "diagnosis (class in neural_compressor.ux.components.diagnosis.diagnosis)": [[420, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[420, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "diagnosisfactory (class in neural_compressor.ux.components.diagnosis.factory)": [[421, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.factory": [[421, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[422, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[423, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "onnxrtdiagnosis (class in neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis)": [[424, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[424, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "opactivation (class in neural_compressor.ux.components.diagnosis.op_details)": [[425, "neural_compressor.ux.components.diagnosis.op_details.OpActivation"]], "opdetails (class in neural_compressor.ux.components.diagnosis.op_details)": [[425, "neural_compressor.ux.components.diagnosis.op_details.OpDetails"]], "oppattern (class in neural_compressor.ux.components.diagnosis.op_details)": [[425, "neural_compressor.ux.components.diagnosis.op_details.OpPattern"]], "opweights (class in neural_compressor.ux.components.diagnosis.op_details)": [[425, "neural_compressor.ux.components.diagnosis.op_details.OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details": [[425, "module-neural_compressor.ux.components.diagnosis.op_details"]], "opentry (class in neural_compressor.ux.components.diagnosis.op_entry)": [[426, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry": [[426, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[427, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "tensorflowdiagnosis (class in neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis)": [[428, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[428, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "create_dir_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[429, "neural_compressor.ux.components.file_browser.file_browser.create_dir_entry"]], "create_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[429, "neural_compressor.ux.components.file_browser.file_browser.create_entry"]], "create_file_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[429, "neural_compressor.ux.components.file_browser.file_browser.create_file_entry"]], "filter_requested_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[429, "neural_compressor.ux.components.file_browser.file_browser.filter_requested_entries"]], "get_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[429, "neural_compressor.ux.components.file_browser.file_browser.get_directory_entries"]], "get_filter_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[429, "neural_compressor.ux.components.file_browser.file_browser.get_filter_value"]], "get_non_hidden_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[429, "neural_compressor.ux.components.file_browser.file_browser.get_non_hidden_directory_entries"]], "get_requested_path() (in module neural_compressor.ux.components.file_browser.file_browser)": [[429, "neural_compressor.ux.components.file_browser.file_browser.get_requested_path"]], "get_setting_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[429, "neural_compressor.ux.components.file_browser.file_browser.get_setting_value"]], "is_dataset_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[429, "neural_compressor.ux.components.file_browser.file_browser.is_dataset_or_directory_entry"]], "is_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[429, "neural_compressor.ux.components.file_browser.file_browser.is_directory_entry"]], "is_model_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[429, "neural_compressor.ux.components.file_browser.file_browser.is_model_or_directory_entry"]], "neural_compressor.ux.components.file_browser.file_browser": [[429, "module-neural_compressor.ux.components.file_browser.file_browser"]], "should_show_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[429, "neural_compressor.ux.components.file_browser.file_browser.should_show_files"]], "should_show_only_model_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[429, "neural_compressor.ux.components.file_browser.file_browser.should_show_only_model_files"]], "sort_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[429, "neural_compressor.ux.components.file_browser.file_browser.sort_entries"]], "neural_compressor.ux.components.file_browser": [[430, "module-neural_compressor.ux.components.file_browser"]], "attribute (class in neural_compressor.ux.components.graph.attribute)": [[431, "neural_compressor.ux.components.graph.attribute.Attribute"]], "neural_compressor.ux.components.graph.attribute": [[431, "module-neural_compressor.ux.components.graph.attribute"]], "collapser (class in neural_compressor.ux.components.graph.collapser)": [[432, "neural_compressor.ux.components.graph.collapser.Collapser"]], "neural_compressor.ux.components.graph.collapser": [[432, "module-neural_compressor.ux.components.graph.collapser"]], "edge (class in neural_compressor.ux.components.graph.edge)": [[433, "neural_compressor.ux.components.graph.edge.Edge"]], "neural_compressor.ux.components.graph.edge": [[433, "module-neural_compressor.ux.components.graph.edge"]], "graph (class in neural_compressor.ux.components.graph.graph)": [[434, "neural_compressor.ux.components.graph.graph.Graph"]], "neural_compressor.ux.components.graph.graph": [[434, "module-neural_compressor.ux.components.graph.graph"]], "graphreader (class in neural_compressor.ux.components.graph.graph_reader)": [[435, "neural_compressor.ux.components.graph.graph_reader.GraphReader"]], "neural_compressor.ux.components.graph.graph_reader": [[435, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[436, "module-neural_compressor.ux.components.graph"]], "groupnode (class in neural_compressor.ux.components.graph.node)": [[437, "neural_compressor.ux.components.graph.node.GroupNode"]], "node (class in neural_compressor.ux.components.graph.node)": [[437, "neural_compressor.ux.components.graph.node.Node"]], "neural_compressor.ux.components.graph.node": [[437, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[438, "module-neural_compressor.ux.components.graph.reader"]], "onnxrtreader (class in neural_compressor.ux.components.graph.reader.onnxrt_reader)": [[439, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[439, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "tensorflowreader (class in neural_compressor.ux.components.graph.reader.tensorflow_reader)": [[440, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[440, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[441, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[442, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[443, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[444, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[445, "module-neural_compressor.ux.components.jobs_management.request"]], "get_default_path() (in module neural_compressor.ux.components.manage_workspace)": [[446, "neural_compressor.ux.components.manage_workspace.get_default_path"]], "neural_compressor.ux.components.manage_workspace": [[446, "module-neural_compressor.ux.components.manage_workspace"]], "domain (class in neural_compressor.ux.components.model.domain)": [[447, "neural_compressor.ux.components.model.domain.Domain"]], "neural_compressor.ux.components.model.domain": [[447, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[448, "module-neural_compressor.ux.components.model"]], "model (class in neural_compressor.ux.components.model.model)": [[449, "neural_compressor.ux.components.model.model.Model"]], "neural_compressor.ux.components.model.model": [[449, "module-neural_compressor.ux.components.model.model"]], "get_model_type() (in module neural_compressor.ux.components.model.model_type_getter)": [[450, "neural_compressor.ux.components.model.model_type_getter.get_model_type"]], "neural_compressor.ux.components.model.model_type_getter": [[450, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[451, "module-neural_compressor.ux.components.model.onnxrt"]], "onnxrtmodel (class in neural_compressor.ux.components.model.onnxrt.model)": [[452, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel"]], "neural_compressor.ux.components.model.onnxrt.model": [[452, "module-neural_compressor.ux.components.model.onnxrt.model"]], "remove_number_of_samples_from_shape() (in module neural_compressor.ux.components.model.onnxrt.model)": [[452, "neural_compressor.ux.components.model.onnxrt.model.remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.pytorch": [[453, "module-neural_compressor.ux.components.model.pytorch"]], "pytorchscriptmodel (class in neural_compressor.ux.components.model.pytorch.model)": [[454, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel"]], "neural_compressor.ux.components.model.pytorch.model": [[454, "module-neural_compressor.ux.components.model.pytorch.model"]], "modelrepository (class in neural_compressor.ux.components.model.repository)": [[455, "neural_compressor.ux.components.model.repository.ModelRepository"]], "neural_compressor.ux.components.model.repository": [[455, "module-neural_compressor.ux.components.model.repository"]], "shape (class in neural_compressor.ux.components.model.shape)": [[456, "neural_compressor.ux.components.model.shape.Shape"]], "neural_compressor.ux.components.model.shape": [[456, "module-neural_compressor.ux.components.model.shape"]], "frozenpbmodel (class in neural_compressor.ux.components.model.tensorflow.frozen_pb)": [[457, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[457, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[458, "module-neural_compressor.ux.components.model.tensorflow"]], "kerasmodel (class in neural_compressor.ux.components.model.tensorflow.keras)": [[459, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel"]], "neural_compressor.ux.components.model.tensorflow.keras": [[459, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "metagraphmodel (class in neural_compressor.ux.components.model.tensorflow.meta_graph)": [[460, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[460, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "tensorflowmodel (class in neural_compressor.ux.components.model.tensorflow.model)": [[461, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.model": [[461, "module-neural_compressor.ux.components.model.tensorflow.model"]], "savedmodelmodel (class in neural_compressor.ux.components.model.tensorflow.saved_model)": [[462, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[462, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "get_input_shape() (in module neural_compressor.ux.components.model.tensorflow.utils)": [[463, "neural_compressor.ux.components.model.tensorflow.utils.get_input_shape"]], "neural_compressor.ux.components.model.tensorflow.utils": [[463, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "download_config() (in module neural_compressor.ux.components.model_zoo.download_config)": [[464, "neural_compressor.ux.components.model_zoo.download_config.download_config"]], "neural_compressor.ux.components.model_zoo.download_config": [[464, "module-neural_compressor.ux.components.model_zoo.download_config"]], "download_model() (in module neural_compressor.ux.components.model_zoo.download_model)": [[465, "neural_compressor.ux.components.model_zoo.download_model.download_model"]], "neural_compressor.ux.components.model_zoo.download_model": [[465, "module-neural_compressor.ux.components.model_zoo.download_model"]], "downloader (class in neural_compressor.ux.components.model_zoo.downloader)": [[466, "neural_compressor.ux.components.model_zoo.downloader.Downloader"]], "neural_compressor.ux.components.model_zoo.downloader": [[466, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[467, "module-neural_compressor.ux.components.model_zoo"]], "check_version() (in module neural_compressor.ux.components.model_zoo.list_models)": [[468, "neural_compressor.ux.components.model_zoo.list_models.check_version"]], "get_available_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[468, "neural_compressor.ux.components.model_zoo.list_models.get_available_models"]], "get_framework_module_name() (in module neural_compressor.ux.components.model_zoo.list_models)": [[468, "neural_compressor.ux.components.model_zoo.list_models.get_framework_module_name"]], "get_installed_frameworks() (in module neural_compressor.ux.components.model_zoo.list_models)": [[468, "neural_compressor.ux.components.model_zoo.list_models.get_installed_frameworks"]], "list_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[468, "neural_compressor.ux.components.model_zoo.list_models.list_models"]], "neural_compressor.ux.components.model_zoo.list_models": [[468, "module-neural_compressor.ux.components.model_zoo.list_models"]], "validate_model_list() (in module neural_compressor.ux.components.model_zoo.list_models)": [[468, "neural_compressor.ux.components.model_zoo.list_models.validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[469, "module-neural_compressor.ux.components.names_mapper"]], "mappingdirection (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[470, "neural_compressor.ux.components.names_mapper.names_mapper.MappingDirection"]], "namesmapper (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[470, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[470, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "check_if_collect_tuning_history() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[471, "neural_compressor.ux.components.optimization.execute_optimization.check_if_collect_tuning_history"]], "execute_optimization() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[471, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization"]], "execute_optimization_pytorch_script() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[471, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_pytorch_script"]], "execute_optimization_regular() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[471, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_regular"]], "neural_compressor.ux.components.optimization.execute_optimization": [[471, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "parse_logs() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[471, "neural_compressor.ux.components.optimization.execute_optimization.parse_logs"]], "parse_model_data_to_bench_names() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[471, "neural_compressor.ux.components.optimization.execute_optimization.parse_model_data_to_bench_names"]], "optimizationfactory (class in neural_compressor.ux.components.optimization.factory)": [[472, "neural_compressor.ux.components.optimization.factory.OptimizationFactory"]], "neural_compressor.ux.components.optimization.factory": [[472, "module-neural_compressor.ux.components.optimization.factory"]], "graphoptimization (class in neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization)": [[473, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[473, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[474, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[475, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[475, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[475, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[475, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[475, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.set_eager_execution"]], "optimizations (class in neural_compressor.ux.components.optimization)": [[476, "neural_compressor.ux.components.optimization.Optimizations"]], "neural_compressor.ux.components.optimization": [[476, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[477, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "mixedprecision (class in neural_compressor.ux.components.optimization.mixed_precision.mixed_precision)": [[478, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[478, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[479, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[479, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[479, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[479, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[479, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[480, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[481, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "optimize_pt_script() (in module neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model)": [[481, "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model.optimize_pt_script"]], "dataloaderinterface (class in neural_compressor.ux.components.optimization.optimization)": [[482, "neural_compressor.ux.components.optimization.optimization.DataloaderInterface"]], "optimization (class in neural_compressor.ux.components.optimization.optimization)": [[482, "neural_compressor.ux.components.optimization.optimization.Optimization"]], "optimizationinterface (class in neural_compressor.ux.components.optimization.optimization)": [[482, "neural_compressor.ux.components.optimization.optimization.OptimizationInterface"]], "neural_compressor.ux.components.optimization.optimization": [[482, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[483, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[484, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "optimize_model() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[484, "neural_compressor.ux.components.optimization.pruning.optimize_model.optimize_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[484, "neural_compressor.ux.components.optimization.pruning.optimize_model.parse_args"]], "pruning (class in neural_compressor.ux.components.optimization.pruning.pruning)": [[485, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[485, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[486, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[487, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[487, "neural_compressor.ux.components.optimization.tune.tune_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[487, "neural_compressor.ux.components.optimization.tune.tune_model.set_eager_execution"]], "tune_model() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[487, "neural_compressor.ux.components.optimization.tune.tune_model.tune_model"]], "accuracycriterion (class in neural_compressor.ux.components.optimization.tune.tuning)": [[488, "neural_compressor.ux.components.optimization.tune.tuning.AccuracyCriterion"]], "tuning (class in neural_compressor.ux.components.optimization.tune.tuning)": [[488, "neural_compressor.ux.components.optimization.tune.tuning.Tuning"]], "tuningdetails (class in neural_compressor.ux.components.optimization.tune.tuning)": [[488, "neural_compressor.ux.components.optimization.tune.tuning.TuningDetails"]], "neural_compressor.ux.components.optimization.tune.tuning": [[488, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "tuninghistory (class in neural_compressor.ux.components.optimization.tuning_history)": [[489, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory"]], "watcher (class in neural_compressor.ux.components.optimization.tuning_history)": [[489, "neural_compressor.ux.components.optimization.tuning_history.Watcher"]], "neural_compressor.ux.components.optimization.tuning_history": [[489, "module-neural_compressor.ux.components.optimization.tuning_history"]], "tuning_history() (in module neural_compressor.ux.components.optimization.tuning_history)": [[489, "neural_compressor.ux.components.optimization.tuning_history.tuning_history"]], "tuning_history_path() (in module neural_compressor.ux.components.optimization.tuning_history)": [[489, "neural_compressor.ux.components.optimization.tuning_history.tuning_history_path"]], "execute_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[490, "neural_compressor.ux.components.profiling.execute_profiling.execute_profiling"]], "execute_real_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[490, "neural_compressor.ux.components.profiling.execute_profiling.execute_real_profiling"]], "neural_compressor.ux.components.profiling.execute_profiling": [[490, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.factory)": [[491, "neural_compressor.ux.components.profiling.factory.ProfilerFactory"]], "neural_compressor.ux.components.profiling.factory": [[491, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[492, "module-neural_compressor.ux.components.profiling"]], "load_profiling_details() (in module neural_compressor.ux.components.profiling.profile_model)": [[493, "neural_compressor.ux.components.profiling.profile_model.load_profiling_details"]], "neural_compressor.ux.components.profiling.profile_model": [[493, "module-neural_compressor.ux.components.profiling.profile_model"]], "parse_args() (in module neural_compressor.ux.components.profiling.profile_model)": [[493, "neural_compressor.ux.components.profiling.profile_model.parse_args"]], "profiler (class in neural_compressor.ux.components.profiling.profiler)": [[494, "neural_compressor.ux.components.profiling.profiler.Profiler"]], "neural_compressor.ux.components.profiling.profiler": [[494, "module-neural_compressor.ux.components.profiling.profiler"]], "dataloaderinterface (class in neural_compressor.ux.components.profiling.profiling)": [[495, "neural_compressor.ux.components.profiling.profiling.DataloaderInterface"]], "profiling (class in neural_compressor.ux.components.profiling.profiling)": [[495, "neural_compressor.ux.components.profiling.profiling.Profiling"]], "neural_compressor.ux.components.profiling.profiling": [[495, "module-neural_compressor.ux.components.profiling.profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.tensorflow_profiler.factory)": [[496, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[496, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[497, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "profiler (class in neural_compressor.ux.components.profiling.tensorflow_profiler.profiler)": [[498, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[498, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "delete_assign() (in module neural_compressor.ux.components.profiling.tensorflow_profiler.utils)": [[499, "neural_compressor.ux.components.profiling.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[499, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "main() (in module neural_compressor.ux.inc_bench)": [[500, "neural_compressor.ux.inc_bench.main"]], "neural_compressor.ux.inc_bench": [[500, "module-neural_compressor.ux.inc_bench"]], "prepare_environment() (in module neural_compressor.ux.inc_bench)": [[500, "neural_compressor.ux.inc_bench.prepare_environment"]], "neural_compressor.ux": [[501, "module-neural_compressor.ux"]], "domainflavours (class in neural_compressor.ux.utils.consts)": [[502, "neural_compressor.ux.utils.consts.DomainFlavours"]], "domains (class in neural_compressor.ux.utils.consts)": [[502, "neural_compressor.ux.utils.consts.Domains"]], "executionstatus (class in neural_compressor.ux.utils.consts)": [[502, "neural_compressor.ux.utils.consts.ExecutionStatus"]], "frameworks (class in neural_compressor.ux.utils.consts)": [[502, "neural_compressor.ux.utils.consts.Frameworks"]], "optimizationtypes (class in neural_compressor.ux.utils.consts)": [[502, "neural_compressor.ux.utils.consts.OptimizationTypes"]], "precisions (class in neural_compressor.ux.utils.consts)": [[502, "neural_compressor.ux.utils.consts.Precisions"]], "strategies (class in neural_compressor.ux.utils.consts)": [[502, "neural_compressor.ux.utils.consts.Strategies"]], "neural_compressor.ux.utils.consts": [[502, "module-neural_compressor.ux.utils.consts"]], "environment (class in neural_compressor.ux.utils.environment)": [[503, "neural_compressor.ux.utils.environment.Environment"]], "neural_compressor.ux.utils.environment": [[503, "module-neural_compressor.ux.utils.environment"]], "accessdeniedexception": [[504, "neural_compressor.ux.utils.exceptions.AccessDeniedException"]], "clienterrorexception": [[504, "neural_compressor.ux.utils.exceptions.ClientErrorException"]], "internalexception": [[504, "neural_compressor.ux.utils.exceptions.InternalException"]], "notfoundexception": [[504, "neural_compressor.ux.utils.exceptions.NotFoundException"]], "neural_compressor.ux.utils.exceptions": [[504, "module-neural_compressor.ux.utils.exceptions"]], "executor (class in neural_compressor.ux.utils.executor)": [[505, "neural_compressor.ux.utils.executor.Executor"]], "neural_compressor.ux.utils.executor": [[505, "module-neural_compressor.ux.utils.executor"]], "expiringdict (class in neural_compressor.ux.utils.expiring_dict)": [[506, "neural_compressor.ux.utils.expiring_dict.ExpiringDict"]], "expiringdictitem (class in neural_compressor.ux.utils.expiring_dict)": [[506, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem"]], "neural_compressor.ux.utils.expiring_dict": [[506, "module-neural_compressor.ux.utils.expiring_dict"]], "githubinfo (class in neural_compressor.ux.utils.github_info)": [[507, "neural_compressor.ux.utils.github_info.GithubInfo"]], "neural_compressor.ux.utils.github_info": [[507, "module-neural_compressor.ux.utils.github_info"]], "hwinfo (class in neural_compressor.ux.utils.hw_info)": [[508, "neural_compressor.ux.utils.hw_info.HWInfo"]], "get_bios_version() (in module neural_compressor.ux.utils.hw_info)": [[508, "neural_compressor.ux.utils.hw_info.get_bios_version"]], "get_distribution() (in module neural_compressor.ux.utils.hw_info)": [[508, "neural_compressor.ux.utils.hw_info.get_distribution"]], "get_framework_dependency_info() (in module neural_compressor.ux.utils.hw_info)": [[508, "neural_compressor.ux.utils.hw_info.get_framework_dependency_info"]], "get_framework_info() (in module neural_compressor.ux.utils.hw_info)": [[508, "neural_compressor.ux.utils.hw_info.get_framework_info"]], "get_kernel_version() (in module neural_compressor.ux.utils.hw_info)": [[508, "neural_compressor.ux.utils.hw_info.get_kernel_version"]], "get_number_of_sockets() (in module neural_compressor.ux.utils.hw_info)": [[508, "neural_compressor.ux.utils.hw_info.get_number_of_sockets"]], "is_turbo_boost_enabled() (in module neural_compressor.ux.utils.hw_info)": [[508, "neural_compressor.ux.utils.hw_info.is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info": [[508, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[509, "module-neural_compressor.ux.utils"]], "jsonserializer (class in neural_compressor.ux.utils.json_serializer)": [[510, "neural_compressor.ux.utils.json_serializer.JsonSerializer"]], "neural_compressor.ux.utils.json_serializer": [[510, "module-neural_compressor.ux.utils.json_serializer"]], "change_log_level() (in module neural_compressor.ux.utils.logger)": [[511, "neural_compressor.ux.utils.logger.change_log_level"]], "neural_compressor.ux.utils.logger": [[511, "module-neural_compressor.ux.utils.logger"]], "accuracyparser (class in neural_compressor.ux.utils.parser)": [[512, "neural_compressor.ux.utils.parser.AccuracyParser"]], "benchmarkparserfactory (class in neural_compressor.ux.utils.parser)": [[512, "neural_compressor.ux.utils.parser.BenchmarkParserFactory"]], "optimizationparser (class in neural_compressor.ux.utils.parser)": [[512, "neural_compressor.ux.utils.parser.OptimizationParser"]], "parser (class in neural_compressor.ux.utils.parser)": [[512, "neural_compressor.ux.utils.parser.Parser"]], "performanceparser (class in neural_compressor.ux.utils.parser)": [[512, "neural_compressor.ux.utils.parser.PerformanceParser"]], "profilingparser (class in neural_compressor.ux.utils.parser)": [[512, "neural_compressor.ux.utils.parser.ProfilingParser"]], "neural_compressor.ux.utils.parser": [[512, "module-neural_compressor.ux.utils.parser"]], "proc (class in neural_compressor.ux.utils.proc)": [[513, "neural_compressor.ux.utils.proc.Proc"]], "neural_compressor.ux.utils.proc": [[513, "module-neural_compressor.ux.utils.proc"]], "ncprocesses (class in neural_compressor.ux.utils.processes)": [[514, "neural_compressor.ux.utils.processes.NCProcesses"]], "neural_compressor.ux.utils.processes": [[514, "module-neural_compressor.ux.utils.processes"]], "singleton (class in neural_compressor.ux.utils.singleton)": [[515, "neural_compressor.ux.utils.singleton.Singleton"]], "neural_compressor.ux.utils.singleton": [[515, "module-neural_compressor.ux.utils.singleton"]], "get_status_update_function() (in module neural_compressor.ux.utils.status_updates)": [[516, "neural_compressor.ux.utils.status_updates.get_status_update_function"]], "neural_compressor.ux.utils.status_updates": [[516, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[517, "module-neural_compressor.ux.utils.templates"]], "metric (class in neural_compressor.ux.utils.templates.metric)": [[518, "neural_compressor.ux.utils.templates.metric.Metric"]], "neural_compressor.ux.utils.templates.metric": [[518, "module-neural_compressor.ux.utils.templates.metric"]], "workdir (class in neural_compressor.ux.utils.templates.workdir)": [[519, "neural_compressor.ux.utils.templates.workdir.Workdir"]], "neural_compressor.ux.utils.templates.workdir": [[519, "module-neural_compressor.ux.utils.templates.workdir"]], "are_archive_filenames_valid() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.are_archive_filenames_valid"]], "check_module() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.check_module"]], "deprecated() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.deprecated"]], "determine_ip() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.determine_ip"]], "export_to_csv() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.export_to_csv"]], "filter_transforms() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.filter_transforms"]], "get_dataset_path() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.get_dataset_path"]], "get_default_pruning_config_path() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.get_default_pruning_config_path"]], "get_file_extension() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.get_file_extension"]], "get_framework_from_path() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.get_framework_from_path"]], "get_height_width_from_size() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.get_height_width_from_size"]], "get_metrics_dict() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.get_metrics_dict"]], "get_model_zoo_config_path() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.get_model_zoo_config_path"]], "get_model_zoo_model_path() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.get_model_zoo_model_path"]], "get_module_version() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.get_module_version"]], "get_predefined_config_path() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.get_predefined_config_path"]], "get_shape_from_transforms() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.get_shape_from_transforms"]], "get_size() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.get_size"]], "is_dataset_file() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.is_dataset_file"]], "is_development_env() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.is_development_env"]], "is_hidden() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.is_hidden"]], "load_dataloader_config() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.load_dataloader_config"]], "load_help_nc_params() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.load_help_nc_params"]], "load_metrics_config() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.load_metrics_config"]], "load_model_config() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.load_model_config"]], "load_model_wise_params() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.load_model_wise_params"]], "load_precisions_config() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.load_precisions_config"]], "load_pruning_details_config() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.load_pruning_details_config"]], "load_transforms_config() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.load_transforms_config"]], "load_transforms_filter_config() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.load_transforms_filter_config"]], "neural_compressor.ux.utils.utils": [[520, "module-neural_compressor.ux.utils.utils"]], "normalize_domain() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.normalize_domain"]], "normalize_framework() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.normalize_framework"]], "normalize_string() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.normalize_string"]], "parse_bool_value() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.parse_bool_value"]], "parse_to_float_list() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.parse_to_float_list"]], "parse_to_string_list() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.parse_to_string_list"]], "parse_version() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.parse_version"]], "release_tag() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.release_tag"]], "replace_with_values() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.replace_with_values"]], "safe_extract_archive() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.safe_extract_archive"]], "verify_file_path() (in module neural_compressor.ux.utils.utils)": [[520, "neural_compressor.ux.utils.utils.verify_file_path"]], "config (class in neural_compressor.ux.utils.workload.config)": [[521, "neural_compressor.ux.utils.workload.config.Config"]], "neural_compressor.ux.utils.workload.config": [[521, "module-neural_compressor.ux.utils.workload.config"]], "dataloader (class in neural_compressor.ux.utils.workload.dataloader)": [[522, "neural_compressor.ux.utils.workload.dataloader.Dataloader"]], "dataset (class in neural_compressor.ux.utils.workload.dataloader)": [[522, "neural_compressor.ux.utils.workload.dataloader.Dataset"]], "filter (class in neural_compressor.ux.utils.workload.dataloader)": [[522, "neural_compressor.ux.utils.workload.dataloader.Filter"]], "labelbalance (class in neural_compressor.ux.utils.workload.dataloader)": [[522, "neural_compressor.ux.utils.workload.dataloader.LabelBalance"]], "transform (class in neural_compressor.ux.utils.workload.dataloader)": [[522, "neural_compressor.ux.utils.workload.dataloader.Transform"]], "neural_compressor.ux.utils.workload.dataloader": [[522, "module-neural_compressor.ux.utils.workload.dataloader"]], "accuracy (class in neural_compressor.ux.utils.workload.evaluation)": [[523, "neural_compressor.ux.utils.workload.evaluation.Accuracy"]], "configs (class in neural_compressor.ux.utils.workload.evaluation)": [[523, "neural_compressor.ux.utils.workload.evaluation.Configs"]], "evaluation (class in neural_compressor.ux.utils.workload.evaluation)": [[523, "neural_compressor.ux.utils.workload.evaluation.Evaluation"]], "metric (class in neural_compressor.ux.utils.workload.evaluation)": [[523, "neural_compressor.ux.utils.workload.evaluation.Metric"]], "performance (class in neural_compressor.ux.utils.workload.evaluation)": [[523, "neural_compressor.ux.utils.workload.evaluation.Performance"]], "postprocess (class in neural_compressor.ux.utils.workload.evaluation)": [[523, "neural_compressor.ux.utils.workload.evaluation.Postprocess"]], "postprocessschema (class in neural_compressor.ux.utils.workload.evaluation)": [[523, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema"]], "neural_compressor.ux.utils.workload.evaluation": [[523, "module-neural_compressor.ux.utils.workload.evaluation"]], "graphoptimization (class in neural_compressor.ux.utils.workload.graph_optimization)": [[524, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization": [[524, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[525, "module-neural_compressor.ux.utils.workload"]], "mixedprecision (class in neural_compressor.ux.utils.workload.mixed_precision)": [[526, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision": [[526, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "model (class in neural_compressor.ux.utils.workload.model)": [[527, "neural_compressor.ux.utils.workload.model.Model"]], "neural_compressor.ux.utils.workload.model": [[527, "module-neural_compressor.ux.utils.workload.model"]], "adamoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[528, "neural_compressor.ux.utils.workload.pruning.AdamOptimizer"]], "adamwoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[528, "neural_compressor.ux.utils.workload.pruning.AdamWOptimizer"]], "approach (class in neural_compressor.ux.utils.workload.pruning)": [[528, "neural_compressor.ux.utils.workload.pruning.Approach"]], "criterion (class in neural_compressor.ux.utils.workload.pruning)": [[528, "neural_compressor.ux.utils.workload.pruning.Criterion"]], "crossentropylosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[528, "neural_compressor.ux.utils.workload.pruning.CrossEntropyLossCriterion"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[528, "neural_compressor.ux.utils.workload.pruning.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationlosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[528, "neural_compressor.ux.utils.workload.pruning.KnowledgeDistillationLossCriterion"]], "optimizer (class in neural_compressor.ux.utils.workload.pruning)": [[528, "neural_compressor.ux.utils.workload.pruning.Optimizer"]], "pruning (class in neural_compressor.ux.utils.workload.pruning)": [[528, "neural_compressor.ux.utils.workload.pruning.Pruning"]], "sgdoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[528, "neural_compressor.ux.utils.workload.pruning.SGDOptimizer"]], "selfknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[528, "neural_compressor.ux.utils.workload.pruning.SelfKnowledgeDistillationLoss"]], "sparsecategoricalcrossentropycriterion (class in neural_compressor.ux.utils.workload.pruning)": [[528, "neural_compressor.ux.utils.workload.pruning.SparseCategoricalCrossentropyCriterion"]], "train (class in neural_compressor.ux.utils.workload.pruning)": [[528, "neural_compressor.ux.utils.workload.pruning.Train"]], "weightcompressionapproach (class in neural_compressor.ux.utils.workload.pruning)": [[528, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach"]], "neural_compressor.ux.utils.workload.pruning": [[528, "module-neural_compressor.ux.utils.workload.pruning"]], "parse_dict_value_to_float() (in module neural_compressor.ux.utils.workload.pruning)": [[528, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_float"]], "parse_dict_value_to_int() (in module neural_compressor.ux.utils.workload.pruning)": [[528, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_int"]], "advance (class in neural_compressor.ux.utils.workload.quantization)": [[529, "neural_compressor.ux.utils.workload.quantization.Advance"]], "calibration (class in neural_compressor.ux.utils.workload.quantization)": [[529, "neural_compressor.ux.utils.workload.quantization.Calibration"]], "quantization (class in neural_compressor.ux.utils.workload.quantization)": [[529, "neural_compressor.ux.utils.workload.quantization.Quantization"]], "wiseconfig (class in neural_compressor.ux.utils.workload.quantization)": [[529, "neural_compressor.ux.utils.workload.quantization.WiseConfig"]], "wiseconfigdetails (class in neural_compressor.ux.utils.workload.quantization)": [[529, "neural_compressor.ux.utils.workload.quantization.WiseConfigDetails"]], "neural_compressor.ux.utils.workload.quantization": [[529, "module-neural_compressor.ux.utils.workload.quantization"]], "acccriterion (class in neural_compressor.ux.utils.workload.tuning)": [[530, "neural_compressor.ux.utils.workload.tuning.AccCriterion"]], "diagnosis (class in neural_compressor.ux.utils.workload.tuning)": [[530, "neural_compressor.ux.utils.workload.tuning.Diagnosis"]], "exitpolicy (class in neural_compressor.ux.utils.workload.tuning)": [[530, "neural_compressor.ux.utils.workload.tuning.ExitPolicy"]], "multiobjectives (class in neural_compressor.ux.utils.workload.tuning)": [[530, "neural_compressor.ux.utils.workload.tuning.MultiObjectives"]], "strategy (class in neural_compressor.ux.utils.workload.tuning)": [[530, "neural_compressor.ux.utils.workload.tuning.Strategy"]], "tuning (class in neural_compressor.ux.utils.workload.tuning)": [[530, "neural_compressor.ux.utils.workload.tuning.Tuning"]], "workspace (class in neural_compressor.ux.utils.workload.tuning)": [[530, "neural_compressor.ux.utils.workload.tuning.Workspace"]], "neural_compressor.ux.utils.workload.tuning": [[530, "module-neural_compressor.ux.utils.workload.tuning"]], "float_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[531, "neural_compressor.ux.utils.yaml_utils.float_representer"]], "neural_compressor.ux.utils.yaml_utils": [[531, "module-neural_compressor.ux.utils.yaml_utils"]], "pruner_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[531, "neural_compressor.ux.utils.yaml_utils.pruner_representer"]], "message (class in neural_compressor.ux.web.communication)": [[532, "neural_compressor.ux.web.communication.Message"]], "messagequeue (class in neural_compressor.ux.web.communication)": [[532, "neural_compressor.ux.web.communication.MessageQueue"]], "request (class in neural_compressor.ux.web.communication)": [[532, "neural_compressor.ux.web.communication.Request"]], "response (class in neural_compressor.ux.web.communication)": [[532, "neural_compressor.ux.web.communication.Response"]], "create_simple_response() (in module neural_compressor.ux.web.communication)": [[532, "neural_compressor.ux.web.communication.create_simple_response"]], "neural_compressor.ux.web.communication": [[532, "module-neural_compressor.ux.web.communication"]], "configuration (class in neural_compressor.ux.web.configuration)": [[533, "neural_compressor.ux.web.configuration.Configuration"]], "neural_compressor.ux.web.configuration": [[533, "module-neural_compressor.ux.web.configuration"]], "servicenotfoundexception": [[534, "neural_compressor.ux.web.exceptions.ServiceNotFoundException"]], "neural_compressor.ux.web.exceptions": [[534, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[535, "module-neural_compressor.ux.web"]], "deferredroutingdefinition (class in neural_compressor.ux.web.router)": [[536, "neural_compressor.ux.web.router.DeferredRoutingDefinition"]], "deferredsubprocessroutingdefinition (class in neural_compressor.ux.web.router)": [[536, "neural_compressor.ux.web.router.DeferredSubprocessRoutingDefinition"]], "realtimeroutingdefinition (class in neural_compressor.ux.web.router)": [[536, "neural_compressor.ux.web.router.RealtimeRoutingDefinition"]], "router (class in neural_compressor.ux.web.router)": [[536, "neural_compressor.ux.web.router.Router"]], "routingdefinition (class in neural_compressor.ux.web.router)": [[536, "neural_compressor.ux.web.router.RoutingDefinition"]], "find_pattern_in_graph() (in module neural_compressor.ux.web.router)": [[536, "neural_compressor.ux.web.router.find_pattern_in_graph"]], "get_model_graph() (in module neural_compressor.ux.web.router)": [[536, "neural_compressor.ux.web.router.get_model_graph"]], "get_system_info() (in module neural_compressor.ux.web.router)": [[536, "neural_compressor.ux.web.router.get_system_info"]], "neural_compressor.ux.web.router": [[536, "module-neural_compressor.ux.web.router"]], "allow_api_call() (in module neural_compressor.ux.web.server)": [[537, "neural_compressor.ux.web.server.allow_api_call"]], "block_iframe() (in module neural_compressor.ux.web.server)": [[537, "neural_compressor.ux.web.server.block_iframe"]], "block_sniffing() (in module neural_compressor.ux.web.server)": [[537, "neural_compressor.ux.web.server.block_sniffing"]], "build_parameters() (in module neural_compressor.ux.web.server)": [[537, "neural_compressor.ux.web.server.build_parameters"]], "disable_cache() (in module neural_compressor.ux.web.server)": [[537, "neural_compressor.ux.web.server.disable_cache"]], "get_tls_args() (in module neural_compressor.ux.web.server)": [[537, "neural_compressor.ux.web.server.get_tls_args"]], "handle_api_call() (in module neural_compressor.ux.web.server)": [[537, "neural_compressor.ux.web.server.handle_api_call"]], "neural_compressor.ux.web.server": [[537, "module-neural_compressor.ux.web.server"]], "page_not_found() (in module neural_compressor.ux.web.server)": [[537, "neural_compressor.ux.web.server.page_not_found"]], "require_api_token() (in module neural_compressor.ux.web.server)": [[537, "neural_compressor.ux.web.server.require_api_token"]], "root() (in module neural_compressor.ux.web.server)": [[537, "neural_compressor.ux.web.server.root"]], "run_server() (in module neural_compressor.ux.web.server)": [[537, "neural_compressor.ux.web.server.run_server"]], "web_socket_publisher() (in module neural_compressor.ux.web.server)": [[537, "neural_compressor.ux.web.server.web_socket_publisher"]], "benchmarkservice (class in neural_compressor.ux.web.service.benchmark)": [[538, "neural_compressor.ux.web.service.benchmark.BenchmarkService"]], "neural_compressor.ux.web.service.benchmark": [[538, "module-neural_compressor.ux.web.service.benchmark"]], "historysnapshotparser (class in neural_compressor.ux.web.service.history_snapshot_parser)": [[539, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[539, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[540, "module-neural_compressor.ux.web.service"]], "modelservice (class in neural_compressor.ux.web.service.model)": [[541, "neural_compressor.ux.web.service.model.ModelService"]], "neural_compressor.ux.web.service.model": [[541, "module-neural_compressor.ux.web.service.model"]], "optimizationservice (class in neural_compressor.ux.web.service.optimization)": [[542, "neural_compressor.ux.web.service.optimization.OptimizationService"]], "neural_compressor.ux.web.service.optimization": [[542, "module-neural_compressor.ux.web.service.optimization"]], "profilingservice (class in neural_compressor.ux.web.service.profiling)": [[543, "neural_compressor.ux.web.service.profiling.ProfilingService"]], "neural_compressor.ux.web.service.profiling": [[543, "module-neural_compressor.ux.web.service.profiling"]], "requestdataprocessor (class in neural_compressor.ux.web.service.request_data_processor)": [[544, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor"]], "neural_compressor.ux.web.service.request_data_processor": [[544, "module-neural_compressor.ux.web.service.request_data_processor"]], "responsegenerator (class in neural_compressor.ux.web.service.response_generator)": [[545, "neural_compressor.ux.web.service.response_generator.ResponseGenerator"]], "neural_compressor.ux.web.service.response_generator": [[545, "module-neural_compressor.ux.web.service.response_generator"]], "workloadservice (class in neural_compressor.ux.web.service.workload)": [[546, "neural_compressor.ux.web.service.workload.WorkloadService"]], "neural_compressor.ux.web.service.workload": [[546, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[547, "module-neural_compressor.version"]]}})