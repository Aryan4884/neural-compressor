Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/compression/pruning/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/objective", "docs/source/orchestration", "docs/source/platform_configuration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/compression/pruning/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/platform_configuration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.pattern_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.neural_insights_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.weights_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Full Publications/Events (60)", "Pythonic Style Access for Configurations", "Quantization", "Turn OFF Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 146, 160, 166, 167, 170, 287, 328, 370, 421, 447, 450, 457], "mask": [0, 165, 166, 167, 190, 234, 260, 289, 313, 450, 463], "adaptor_registri": [1, 393], "cl": [1, 150, 157, 166, 167, 168, 169, 192, 199, 207, 209, 214, 236, 243, 249, 271, 278, 282, 287, 289, 291, 302, 317, 328, 363, 383], "sourc": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 160, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 246, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 276, 277, 278, 279, 282, 283, 284, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 334, 335, 336, 337, 339, 340, 342, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 366, 367, 368, 369, 370, 372, 373, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 389, 392, 423, 425, 438, 440, 442, 443, 445, 451], "The": [1, 3, 11, 14, 16, 33, 39, 48, 69, 108, 114, 116, 141, 149, 150, 155, 156, 157, 160, 164, 166, 167, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 190, 191, 192, 193, 194, 198, 199, 207, 209, 212, 214, 217, 219, 222, 223, 224, 234, 235, 236, 237, 238, 242, 243, 249, 250, 255, 257, 258, 259, 261, 262, 264, 266, 267, 268, 270, 271, 273, 274, 276, 277, 278, 279, 282, 284, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 300, 301, 302, 306, 308, 310, 311, 312, 314, 315, 317, 318, 326, 328, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 367, 369, 370, 372, 373, 375, 377, 378, 382, 383, 384, 387, 389, 390, 393, 394, 396, 400, 403, 406, 408, 409, 410, 412, 414, 416, 418, 420, 421, 422, 424, 425, 426, 427, 430, 431, 433, 436, 438, 439, 440, 442, 443, 445, 446, 447, 448, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463], "decor": [1, 16, 33, 62, 63, 65, 141, 150, 166, 167, 169, 207, 214, 249, 264, 271, 278, 282, 287, 289, 291, 302, 305, 317, 328, 363, 366, 383, 389, 390, 393, 460], "us": [1, 13, 16, 33, 39, 43, 44, 65, 98, 100, 111, 143, 149, 155, 157, 160, 164, 165, 166, 167, 169, 172, 174, 175, 178, 179, 188, 189, 190, 191, 192, 193, 194, 197, 206, 207, 208, 209, 214, 222, 223, 232, 233, 234, 235, 236, 237, 238, 241, 248, 249, 253, 254, 255, 257, 258, 260, 264, 265, 266, 271, 278, 279, 282, 284, 287, 289, 290, 291, 292, 293, 296, 299, 302, 305, 306, 310, 311, 313, 317, 328, 345, 350, 351, 355, 358, 360, 363, 366, 367, 370, 373, 374, 375, 376, 383, 387, 388, 389, 390, 393, 408, 409, 410, 412, 413, 414, 416, 418, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 436, 438, 440, 442, 443, 445, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463], "regist": [1, 16, 33, 150, 157, 160, 166, 167, 168, 169, 192, 199, 207, 209, 214, 236, 243, 249, 264, 271, 278, 282, 287, 289, 291, 302, 305, 317, 328, 363, 366, 380, 390, 393, 410, 414, 424, 425, 446, 447, 457, 460], "all": [1, 13, 16, 33, 40, 58, 92, 149, 150, 152, 155, 156, 166, 167, 170, 174, 175, 180, 181, 188, 192, 199, 207, 208, 214, 217, 219, 224, 232, 236, 243, 249, 257, 260, 262, 264, 271, 278, 282, 283, 287, 293, 302, 305, 310, 313, 315, 317, 319, 328, 363, 366, 369, 375, 383, 387, 392, 393, 409, 410, 414, 418, 422, 425, 428, 436, 439, 440, 443, 444, 445, 446, 448, 449, 450, 451, 453, 454, 457, 459, 460], "subclass": [1, 16, 33, 150, 166, 167, 169, 185, 189, 192, 199, 207, 214, 229, 233, 236, 243, 249, 264, 271, 278, 282, 287, 289, 291, 302, 305, 317, 328, 363, 366, 393], "paramet": [1, 11, 13, 14, 16, 39, 40, 62, 63, 65, 81, 100, 111, 127, 141, 142, 143, 147, 148, 149, 150, 155, 156, 157, 160, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 178, 179, 189, 190, 192, 199, 203, 207, 209, 214, 219, 222, 223, 233, 234, 236, 243, 246, 249, 250, 252, 253, 254, 255, 257, 258, 260, 261, 262, 264, 266, 267, 268, 270, 271, 272, 273, 274, 276, 277, 278, 279, 282, 284, 287, 288, 289, 290, 291, 292, 296, 302, 306, 308, 310, 311, 313, 314, 315, 317, 318, 322, 326, 328, 345, 350, 351, 355, 363, 367, 369, 370, 372, 375, 379, 380, 382, 383, 389, 409, 410, 412, 414, 421, 424, 425, 439, 445, 446, 450, 453, 456, 457, 459, 460, 462], "framework_specific_info": [1, 3, 11, 14, 40, 42, 393], "base": [1, 3, 13, 16, 33, 40, 41, 42, 81, 100, 111, 115, 117, 127, 137, 143, 146, 149, 150, 156, 160, 175, 180, 183, 188, 190, 192, 199, 207, 217, 224, 227, 232, 234, 236, 243, 249, 264, 270, 272, 278, 279, 282, 284, 289, 299, 302, 306, 317, 319, 326, 327, 328, 360, 363, 367, 390, 392, 393, 410, 413, 414, 418, 425, 433, 434, 436, 445, 449, 450, 453, 456, 458, 460, 463], "framework": [1, 3, 11, 13, 14, 40, 155, 157, 167, 176, 177, 181, 182, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 204, 207, 209, 210, 214, 220, 221, 225, 226, 228, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 245, 247, 249, 255, 264, 265, 292, 300, 306, 317, 318, 319, 320, 322, 361, 367, 375, 392, 393, 414, 415, 419, 420, 421, 422, 424, 425, 426, 450, 451, 453, 458, 459, 460, 461, 462], "layer": [1, 3, 11, 14, 39, 40, 41, 42, 111, 112, 113, 114, 116, 117, 147, 153, 157, 162, 164, 165, 166, 170, 174, 175, 209, 216, 287, 288, 373, 375, 383, 393, 413, 421, 450, 455], "mxnet_util": 2, "util": [2, 12, 17, 100, 105, 106, 134, 135, 142, 143, 144, 148, 159, 161, 164, 174, 175, 216, 256, 258, 288, 298, 309, 311, 343, 348, 359, 394, 414, 425, 428, 453, 460, 461], "ox_util": 2, "oper": [2, 17, 39, 99, 105, 141, 164, 165, 166, 174, 175, 203, 246, 287, 345, 350, 389, 408, 409, 416, 445, 453, 457, 459, 460], "activ": [2, 17, 29, 149, 174, 175, 216, 306, 367, 393, 413, 418, 425, 446, 449, 452, 453, 457, 458, 462], "argmax": [2, 17, 29], "attent": [2, 17, 29, 146, 162, 164, 174, 175, 190, 234, 387, 412, 450], "binary_op": [2, 17, 29], "concat": [2, 17, 29, 140], "conv": [2, 17, 29, 53, 57, 61, 66, 67, 68, 87, 104, 153, 174, 175, 389, 425, 450, 452, 453, 460], "direct_q8": [2, 17, 29], "embed_layernorm": [2, 17, 29], "gather": [2, 13, 17, 29, 174, 175, 287], "gavgpool": [2, 17, 29], "gemm": [2, 17, 29, 174, 175], "lstm": [2, 17, 29], "matmul": [2, 17, 29, 47, 54, 60, 68, 89, 104, 123, 132, 166, 174, 175, 287, 418, 460], "maxpool": [2, 17, 29, 124, 133, 418], "op": [2, 13, 17, 29, 39, 40, 47, 52, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 76, 80, 83, 86, 87, 88, 89, 91, 100, 102, 104, 118, 119, 120, 126, 128, 129, 130, 131, 136, 139, 141, 142, 143, 148, 149, 153, 164, 174, 175, 299, 306, 307, 345, 350, 356, 358, 360, 367, 368, 377, 383, 393, 418, 425, 426, 450, 453, 454, 455, 457, 458, 460, 462], "pad": [2, 17, 29, 66, 67, 190, 207, 234, 249, 410, 459], "pool": [2, 17, 29], "resiz": [2, 17, 29, 190, 191, 203, 207, 234, 235, 246, 249, 409, 410, 459], "split": [2, 17, 29, 39, 77, 206, 207, 248, 249, 389, 457, 459], "calibr": [2, 11, 13, 14, 17, 39, 44, 84, 85, 149, 155, 174, 175, 178, 179, 222, 223, 255, 292, 351, 377, 393, 409, 410, 420, 421, 453, 460, 462], "quantiz": [2, 11, 13, 14, 16, 17, 39, 43, 44, 83, 87, 89, 91, 94, 102, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 142, 143, 147, 149, 153, 155, 156, 174, 175, 178, 179, 203, 210, 217, 222, 223, 246, 254, 255, 256, 266, 293, 299, 305, 309, 356, 358, 360, 372, 373, 377, 382, 383, 393, 398, 409, 410, 414, 415, 418, 420, 421, 424, 426, 427, 428, 433, 435, 436, 439, 448, 451, 455, 458, 459, 460, 461, 462], "tf_util": 2, "graph_rewrit": [2, 106], "bf16": [2, 52, 82, 106, 142, 174, 175, 306, 367, 393, 418, 425, 426, 430, 435, 439, 445, 454, 460], "gener": [2, 13, 43, 44, 82, 106, 117, 141, 149, 155, 164, 170, 178, 179, 180, 189, 192, 193, 194, 195, 207, 222, 223, 224, 233, 236, 237, 238, 239, 249, 257, 265, 296, 310, 318, 346, 351, 355, 370, 372, 389, 393, 409, 412, 424, 425, 426, 428, 433, 438, 440, 442, 443, 445, 447, 449, 450, 451, 453, 454, 457, 458, 459, 460], "int8": [2, 18, 19, 39, 82, 106, 118, 119, 120, 126, 128, 129, 130, 131, 136, 141, 154, 155, 174, 175, 203, 246, 252, 253, 254, 306, 308, 367, 369, 382, 383, 389, 393, 408, 410, 413, 418, 425, 430, 433, 435, 436, 439, 445, 452, 453, 454, 455, 456, 457, 458, 459, 462], "onnx": [2, 14, 15, 16, 29, 38, 39, 82, 106, 135, 153, 174, 175, 186, 230, 252, 253, 254, 318, 325, 345, 381, 392, 393, 394, 409, 415, 416, 418, 419, 421, 427, 430, 435, 436, 451, 452, 457, 460], "qdq": [2, 82, 106, 107, 108, 135, 149, 174, 175, 252, 253, 254, 393, 416, 421, 435, 436, 453, 457], "graph_bas": [2, 82, 106], "quantize_graph": [2, 106], "qat": [2, 106, 107, 148, 175, 266, 326, 413, 414, 421, 425, 453], "quantize_graph_bas": [2, 106, 107], "quantize_graph_bn": [2, 106, 107], "quantize_graph_concatv2": [2, 106, 107], "quantize_graph_conv": [2, 106, 107], "quantize_graph_for_intel_cpu": [2, 106, 107], "quantize_graph_matmul": [2, 106, 107], "quantize_graph_pool": [2, 106, 107], "transform_graph": [2, 106], "bias_correct": [2, 106, 138], "graph_transform_bas": [2, 106, 138], "insert_log": [2, 106, 138], "rerange_quantized_concat": [2, 106, 138], "graph_convert": [2, 106], "graph_converter_without_calib": [2, 106], "graph_util": [2, 106], "quantize_graph_common": [2, 106], "tf2onnx_convert": [2, 106], "torch_util": [2, 211, 256, 309, 457], "bf16_convert": [2, 46, 82, 106, 144], "hawq_metr": [2, 144], "model_wrapp": [2, 15, 144], "pattern_detector": [2, 144], "symbolic_trac": [2, 144], "tensorflow": [2, 46, 48, 70, 71, 72, 82, 90, 96, 97, 98, 99, 100, 101, 105, 106, 107, 109, 112, 125, 135, 138, 141, 174, 175, 189, 190, 191, 192, 195, 197, 199, 207, 209, 214, 233, 234, 235, 236, 239, 241, 243, 249, 253, 254, 255, 258, 260, 264, 265, 266, 292, 300, 311, 313, 317, 318, 326, 344, 345, 349, 350, 351, 361, 383, 390, 392, 393, 409, 412, 413, 415, 418, 419, 421, 422, 425, 427, 435, 436, 450, 451, 452, 456, 460, 462], "kerasadaptor": 3, "kerasqueri": 3, "local_config_fil": [3, 40, 42], "none": [3, 13, 38, 39, 40, 42, 43, 44, 58, 84, 97, 99, 100, 105, 111, 135, 141, 143, 147, 149, 155, 156, 157, 162, 164, 170, 171, 172, 174, 175, 178, 179, 180, 182, 186, 188, 190, 191, 192, 193, 194, 195, 197, 203, 207, 208, 209, 210, 217, 219, 222, 223, 224, 226, 230, 232, 234, 235, 236, 237, 238, 239, 241, 246, 249, 250, 253, 254, 255, 260, 264, 265, 266, 267, 270, 279, 284, 288, 292, 296, 297, 299, 300, 301, 302, 306, 313, 317, 318, 328, 344, 349, 350, 351, 352, 355, 356, 357, 358, 360, 361, 362, 363, 367, 370, 372, 373, 375, 380, 382, 383, 393, 410, 424, 453, 458, 459, 460], "defin": [3, 40, 41, 81, 143, 145, 164, 166, 167, 168, 169, 174, 175, 178, 179, 222, 223, 267, 268, 270, 271, 272, 279, 284, 287, 288, 289, 291, 318, 351, 372, 382, 387, 390, 393, 409, 410, 412, 413, 418, 421, 424, 425, 446, 448, 450, 453, 456, 457, 458, 460, 462], "queri": [3, 13, 40, 42, 141, 149, 164, 174, 175, 453], "interfac": [3, 40, 41, 81, 108, 171, 255, 279, 284, 292, 293, 375, 421, 425, 436, 449, 453, 455], "each": [3, 39, 40, 41, 143, 174, 175, 188, 192, 195, 203, 207, 232, 236, 239, 246, 249, 258, 260, 261, 262, 299, 311, 313, 314, 315, 360, 388, 393, 410, 412, 413, 418, 425, 426, 430, 436, 439, 445, 447, 450, 456, 457, 458, 459, 460, 461], "adapt": [3, 40, 41, 387, 392, 410, 436, 451], "should": [3, 40, 41, 49, 110, 111, 156, 162, 164, 174, 175, 178, 179, 188, 190, 192, 207, 212, 222, 223, 232, 234, 236, 249, 258, 311, 317, 318, 351, 370, 372, 383, 389, 390, 393, 410, 412, 414, 424, 425, 426, 431, 440, 443, 445, 447, 450, 453, 459, 460, 462], "implement": [3, 40, 41, 105, 136, 140, 178, 179, 185, 188, 189, 190, 192, 222, 223, 229, 232, 233, 234, 236, 257, 310, 318, 328, 351, 358, 372, 409, 410, 425, 436, 446, 450, 453, 455, 458, 460, 462], "inherit": [3, 40, 41, 156, 157, 167, 169, 174, 187, 207, 209, 217, 231, 249, 289, 291, 390, 393, 410], "specif": [3, 11, 14, 40, 41, 99, 111, 155, 170, 174, 175, 190, 191, 192, 193, 197, 199, 214, 234, 235, 236, 237, 241, 243, 266, 273, 274, 276, 277, 278, 317, 351, 380, 387, 390, 393, 412, 418, 420, 424, 425, 426, 427, 428, 432, 433, 435, 439, 445, 447, 450, 452, 460, 462], "backend": [3, 15, 38, 40, 41, 153, 174, 175, 176, 177, 181, 182, 186, 190, 191, 193, 194, 195, 196, 197, 201, 204, 207, 213, 214, 220, 221, 225, 226, 228, 230, 234, 235, 237, 238, 239, 240, 241, 245, 247, 249, 265, 300, 318, 319, 320, 322, 361, 389, 414, 420, 421, 425, 426, 434, 452, 459, 462], "own": [3, 40, 41, 69, 188, 207, 232, 249, 328, 390, 409, 410, 421, 424, 447, 456, 461], "mxnetadaptor": 11, "do": [11, 14, 156, 174, 175, 189, 190, 233, 234, 250, 254, 257, 260, 290, 310, 313, 382, 387, 410, 414, 418, 421, 424, 425, 440, 443, 450, 454, 455, 457, 460], "inspect": [11, 14, 455, 458], "tensor": [11, 13, 14, 15, 16, 39, 65, 100, 141, 143, 149, 160, 166, 167, 168, 175, 207, 249, 252, 254, 287, 289, 299, 326, 360, 383, 389, 410, 450, 453, 455, 458, 459, 460], "dict": [11, 13, 14, 39, 40, 111, 141, 142, 143, 149, 150, 155, 160, 164, 165, 166, 167, 168, 169, 170, 172, 174, 175, 178, 179, 189, 208, 214, 222, 223, 233, 252, 254, 259, 260, 261, 262, 264, 267, 270, 271, 272, 279, 282, 284, 287, 288, 289, 290, 291, 296, 299, 305, 308, 312, 313, 314, 315, 317, 318, 326, 351, 366, 369, 370, 372, 373, 375, 382, 383, 389, 416, 424, 450, 452, 453, 457, 458, 460], "configur": [11, 13, 14, 40, 113, 142, 149, 155, 170, 171, 174, 175, 178, 179, 181, 192, 195, 208, 213, 222, 223, 236, 239, 250, 254, 255, 266, 267, 268, 270, 279, 284, 288, 292, 293, 299, 317, 318, 328, 351, 360, 372, 374, 375, 381, 382, 389, 390, 393, 410, 424, 425, 432, 446, 447, 450, 453, 455, 459, 460, 463], "mxnet": [12, 13, 16, 175, 185, 189, 192, 195, 199, 207, 229, 233, 236, 239, 243, 249, 255, 264, 292, 317, 318, 323, 351, 392, 393, 409, 415, 418, 421, 422, 425, 426, 427, 452, 460, 462], "init": [12, 17, 152, 158, 161, 163, 410, 424], "optyp": [13, 174, 175, 252], "enum": 13, "type": [13, 16, 39, 40, 69, 91, 100, 111, 117, 127, 141, 142, 143, 149, 150, 157, 164, 165, 166, 167, 168, 169, 170, 172, 174, 175, 188, 190, 192, 199, 207, 209, 214, 232, 234, 236, 243, 249, 257, 258, 260, 264, 271, 278, 282, 287, 289, 291, 296, 302, 306, 308, 310, 311, 313, 317, 326, 328, 355, 356, 363, 367, 369, 370, 382, 383, 388, 393, 410, 414, 416, 418, 421, 425, 426, 446, 453, 456, 459, 460, 462], "isiter": 13, "obj": [13, 100, 170, 189, 219, 233, 250, 255, 266, 267, 268, 270, 279, 284, 288, 292, 318, 328, 351, 372, 375, 383], "bool": [13, 141, 148, 149, 166, 174, 175, 190, 192, 203, 207, 234, 236, 246, 249, 254, 258, 264, 287, 305, 311, 317, 366, 370, 382, 383, 410, 424, 452, 459], "check": [13, 62, 63, 100, 141, 149, 170, 181, 192, 236, 252, 288, 382, 383, 388, 392, 414, 422, 429, 431, 433, 440, 443, 444, 455], "whether": [13, 100, 111, 141, 166, 174, 175, 188, 190, 203, 207, 232, 234, 246, 249, 258, 260, 264, 287, 311, 313, 317, 375, 382, 383, 393, 410, 424, 453, 457, 459], "object": [13, 39, 40, 69, 81, 100, 111, 127, 142, 143, 148, 149, 155, 156, 160, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 190, 191, 192, 207, 208, 210, 219, 222, 223, 224, 234, 235, 236, 249, 250, 255, 260, 268, 270, 273, 274, 276, 277, 278, 279, 284, 287, 288, 289, 290, 291, 292, 296, 309, 313, 317, 318, 326, 327, 345, 350, 351, 355, 369, 372, 375, 382, 383, 389, 390, 398, 408, 409, 410, 417, 424, 425, 427, 448, 450, 452, 453, 459, 460, 461, 463], "i": [13, 39, 40, 43, 44, 48, 49, 52, 55, 59, 65, 77, 80, 100, 127, 136, 141, 143, 148, 149, 154, 155, 156, 160, 164, 165, 167, 168, 170, 174, 175, 178, 179, 180, 188, 189, 190, 191, 192, 193, 194, 197, 199, 203, 207, 208, 210, 214, 216, 217, 222, 223, 224, 232, 233, 234, 235, 236, 237, 238, 241, 243, 246, 249, 257, 260, 262, 264, 266, 271, 279, 284, 288, 289, 293, 300, 310, 313, 315, 317, 318, 328, 334, 335, 339, 351, 356, 361, 370, 372, 382, 383, 387, 388, 389, 390, 393, 394, 396, 400, 403, 406, 408, 409, 410, 412, 413, 414, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 436, 438, 439, 440, 442, 443, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463], "iter": [13, 15, 100, 141, 155, 165, 167, 169, 174, 175, 178, 179, 183, 188, 192, 193, 210, 222, 223, 227, 232, 236, 237, 289, 291, 318, 351, 372, 375, 389, 390, 393, 408, 410, 425, 450, 452, 453, 458, 460, 462], "return": [13, 16, 39, 40, 48, 62, 63, 65, 69, 100, 111, 141, 142, 143, 148, 149, 150, 155, 157, 164, 166, 167, 168, 169, 170, 172, 178, 179, 192, 199, 203, 207, 208, 209, 214, 219, 222, 223, 236, 243, 246, 249, 257, 258, 260, 261, 262, 264, 270, 271, 278, 282, 287, 288, 289, 291, 296, 302, 306, 308, 310, 311, 313, 314, 315, 317, 318, 322, 326, 328, 345, 350, 351, 355, 363, 367, 369, 370, 372, 375, 380, 382, 383, 389, 390, 410, 414, 424, 427, 447, 450, 453, 457, 458, 460], "true": [13, 80, 108, 139, 141, 155, 174, 175, 188, 190, 192, 193, 206, 207, 208, 232, 234, 236, 237, 248, 249, 254, 258, 264, 282, 305, 311, 317, 328, 351, 366, 370, 375, 382, 383, 410, 414, 418, 424, 425, 428, 431, 432, 452, 453, 457, 458, 459, 460, 462], "els": [13, 141, 175, 188, 232, 328, 380, 433, 458], "fals": [13, 15, 38, 42, 43, 44, 66, 67, 84, 87, 94, 97, 98, 100, 108, 126, 131, 136, 139, 140, 141, 148, 149, 155, 157, 174, 175, 180, 182, 186, 190, 192, 203, 207, 208, 209, 210, 216, 224, 226, 230, 234, 236, 246, 249, 260, 264, 313, 317, 328, 351, 370, 375, 383, 393, 410, 418, 424, 425, 438, 442, 452, 453, 457, 458, 459, 462], "boolean": 13, "ensure_list": 13, "x": [13, 49, 69, 165, 174, 175, 189, 207, 233, 249, 296, 355, 370, 414, 426, 427, 453, 457, 458, 459, 461], "ensur": [13, 207, 249, 296, 355, 414, 453, 459], "list": [13, 39, 48, 100, 141, 142, 143, 146, 149, 155, 164, 165, 166, 174, 175, 178, 179, 183, 190, 203, 207, 208, 222, 223, 227, 234, 246, 249, 253, 254, 257, 258, 260, 261, 262, 264, 271, 279, 284, 287, 290, 305, 310, 311, 313, 314, 315, 317, 318, 326, 334, 335, 339, 351, 366, 370, 372, 373, 383, 389, 392, 393, 410, 416, 418, 422, 425, 428, 433, 435, 438, 439, 442, 447, 450, 452, 453, 454, 457, 458, 460], "input": [13, 15, 39, 40, 48, 55, 59, 62, 63, 65, 66, 67, 69, 77, 78, 80, 81, 100, 104, 105, 111, 117, 141, 142, 147, 148, 149, 153, 164, 165, 174, 175, 178, 179, 190, 191, 192, 194, 203, 206, 207, 212, 222, 223, 234, 235, 236, 238, 246, 248, 249, 252, 253, 254, 317, 318, 322, 326, 351, 372, 380, 382, 383, 390, 393, 408, 409, 410, 412, 413, 414, 416, 418, 420, 424, 425, 427, 428, 433, 450, 452, 453, 457, 458, 459, 462], "check_mx_vers": 13, "version": [13, 48, 99, 149, 164, 175, 253, 254, 309, 387, 389, 393, 418, 422, 423, 425, 438, 440, 442, 443, 449, 451, 457, 460, 461], "str": [13, 142, 143, 146, 147, 148, 149, 150, 157, 164, 174, 175, 190, 191, 192, 199, 203, 207, 209, 213, 214, 234, 235, 236, 243, 246, 249, 253, 254, 257, 258, 260, 262, 264, 271, 282, 305, 308, 310, 311, 313, 315, 317, 336, 344, 346, 349, 350, 366, 369, 370, 375, 380, 383, 384, 410, 424, 452, 458, 459], "mx": 13, "__version__": 13, "combine_cap": 13, "current": [13, 39, 65, 99, 147, 160, 164, 166, 167, 174, 175, 266, 273, 274, 276, 277, 278, 287, 289, 296, 300, 355, 361, 383, 389, 390, 393, 414, 418, 424, 425, 428, 432, 445, 447, 450, 453, 457, 460], "new": [13, 16, 141, 147, 155, 180, 192, 207, 208, 224, 236, 249, 288, 328, 388, 414, 425, 426, 439, 445, 446, 450, 451, 453, 455, 456, 459, 461, 462], "combin": [13, 149, 174, 175, 178, 179, 203, 217, 222, 223, 246, 318, 351, 372, 383, 389, 393, 421, 425, 448, 451, 453, 454, 459, 460], "capabl": [13, 42, 306, 367, 408, 418, 425, 426, 436, 450, 452, 453, 460, 462], "contain": [13, 62, 63, 65, 69, 134, 141, 143, 149, 155, 156, 164, 166, 167, 169, 170, 174, 175, 178, 179, 190, 191, 192, 222, 223, 234, 235, 236, 250, 254, 255, 260, 261, 262, 266, 279, 282, 284, 287, 288, 289, 290, 291, 292, 313, 314, 315, 318, 351, 372, 375, 382, 410, 412, 421, 424, 446, 450, 458, 460, 461], "make_nc_model": 13, "target": [13, 39, 97, 164, 169, 170, 175, 288, 291, 296, 355, 410, 414, 425, 450, 458, 459, 460, 462], "sym_model": 13, "ctx": 13, "input_desc": 13, "convert": [13, 39, 43, 44, 45, 47, 48, 49, 50, 51, 61, 69, 81, 94, 95, 97, 98, 99, 100, 126, 131, 135, 142, 149, 164, 174, 175, 190, 203, 206, 207, 234, 246, 248, 249, 253, 260, 266, 288, 306, 313, 367, 370, 389, 425, 426, 430, 453, 454, 457, 459, 460], "symbol": [13, 142, 148, 149, 257, 310, 318, 351, 389, 427], "model": [13, 15, 16, 29, 38, 39, 40, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 111, 113, 135, 141, 142, 143, 146, 147, 148, 149, 153, 155, 156, 162, 164, 167, 169, 170, 174, 175, 178, 179, 186, 189, 190, 192, 207, 208, 211, 212, 219, 222, 223, 230, 233, 234, 236, 249, 250, 252, 253, 254, 255, 256, 264, 265, 266, 267, 270, 273, 274, 276, 277, 278, 279, 284, 288, 289, 290, 291, 292, 293, 296, 297, 299, 300, 301, 302, 309, 317, 318, 328, 344, 349, 350, 351, 352, 355, 356, 357, 358, 360, 361, 362, 363, 369, 370, 372, 378, 380, 382, 383, 385, 389, 390, 392, 393, 398, 408, 409, 410, 412, 413, 414, 415, 420, 421, 423, 424, 426, 428, 433, 435, 436, 439, 445, 447, 448, 449, 451, 453, 455, 456, 458, 459, 460, 461, 462], "an": [13, 62, 63, 65, 100, 136, 143, 149, 154, 167, 174, 175, 183, 188, 192, 207, 211, 216, 227, 232, 236, 249, 256, 257, 261, 262, 270, 271, 293, 309, 310, 314, 315, 318, 345, 350, 351, 370, 372, 383, 385, 387, 389, 390, 392, 393, 409, 410, 411, 416, 424, 425, 426, 428, 432, 433, 436, 445, 447, 450, 451, 453, 456, 457, 458, 459, 460], "neural": [13, 143, 155, 156, 166, 174, 175, 202, 203, 204, 207, 208, 211, 214, 217, 246, 247, 249, 251, 256, 263, 264, 266, 279, 284, 287, 290, 292, 293, 298, 304, 309, 316, 317, 318, 322, 329, 351, 358, 359, 365, 380, 385, 388, 393, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 426, 427, 429, 430, 433, 435, 436, 438, 440, 442, 443, 444, 447, 448, 451, 453, 455, 457, 458, 459, 460, 462, 463], "compressor": [13, 155, 156, 166, 174, 175, 202, 203, 204, 207, 208, 211, 214, 217, 246, 247, 249, 251, 256, 263, 264, 266, 287, 290, 292, 293, 298, 304, 309, 316, 317, 318, 322, 329, 351, 359, 365, 385, 388, 390, 393, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 426, 427, 428, 429, 433, 435, 436, 438, 440, 442, 443, 444, 447, 448, 450, 451, 453, 455, 457, 458, 459, 460, 461, 462, 463], "tupl": [13, 100, 149, 175, 178, 179, 203, 207, 222, 223, 246, 249, 254, 305, 318, 351, 366, 372, 410, 424, 425, 453, 459], "symnet": 13, "arg": [13, 48, 100, 190, 191, 192, 234, 235, 236, 287, 296, 355, 370, 378, 379, 409, 410, 414, 425, 434, 453, 457, 458, 459], "aux": 13, "data": [13, 39, 50, 100, 141, 143, 147, 149, 153, 164, 174, 175, 178, 179, 208, 210, 222, 223, 256, 296, 306, 308, 309, 318, 344, 349, 351, 355, 367, 369, 372, 375, 380, 383, 392, 393, 409, 410, 414, 418, 419, 422, 424, 425, 426, 453, 454, 455, 456, 457, 458, 459, 460], "descript": [13, 127, 370, 388, 389, 457], "ncmodel": 13, "fuse": [13, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 86, 87, 88, 89, 91, 126, 131, 148, 149, 153, 389, 457, 458], "suppli": 13, "get_framework_nam": 13, "get": [13, 39, 40, 62, 63, 65, 99, 100, 141, 147, 149, 155, 160, 162, 164, 166, 167, 168, 169, 172, 175, 183, 207, 208, 214, 216, 227, 249, 287, 289, 291, 299, 306, 308, 317, 326, 351, 360, 367, 369, 375, 383, 417, 421, 422, 425, 431, 457, 460, 461, 464], "name": [13, 39, 40, 48, 62, 63, 65, 99, 100, 105, 111, 141, 142, 143, 147, 148, 149, 150, 155, 160, 164, 166, 167, 168, 169, 172, 174, 175, 190, 191, 192, 195, 199, 205, 207, 208, 212, 215, 216, 234, 235, 236, 239, 243, 249, 252, 253, 254, 259, 264, 282, 287, 289, 291, 306, 308, 312, 317, 322, 326, 328, 351, 367, 369, 373, 375, 383, 389, 410, 414, 416, 418, 423, 424, 425, 427, 431, 438, 442, 446, 449, 450, 453, 455, 456, 458, 460, 462, 463], "context": [13, 383, 452], "prepare_model_data": 13, "nc_model": [13, 279, 284], "data_x": 13, "prepar": [13, 149, 389, 392, 410, 414, 419, 453], "dataload": [13, 15, 143, 147, 149, 155, 162, 164, 178, 179, 190, 201, 211, 222, 223, 234, 245, 250, 256, 279, 284, 293, 309, 344, 349, 351, 372, 375, 389, 392, 393, 412, 413, 414, 419, 420, 424, 425, 426, 448, 453, 454, 457, 458, 459, 462], "need": [13, 39, 100, 104, 147, 155, 164, 175, 178, 179, 180, 188, 189, 192, 199, 207, 210, 212, 213, 222, 223, 224, 232, 233, 236, 243, 249, 293, 299, 317, 318, 328, 351, 360, 372, 382, 383, 389, 393, 409, 410, 412, 414, 421, 425, 426, 428, 430, 431, 434, 438, 439, 440, 442, 443, 445, 446, 450, 452, 453, 454, 455, 457, 459, 460, 462], "run": [13, 141, 155, 167, 170, 174, 175, 178, 179, 189, 206, 208, 222, 223, 233, 248, 288, 289, 296, 318, 351, 355, 372, 388, 393, 408, 414, 417, 418, 425, 426, 428, 430, 432, 433, 434, 436, 438, 439, 440, 442, 443, 445, 451, 453, 455, 456, 458, 460, 462], "loader": [13, 178, 179, 222, 223, 318, 351, 372, 378, 453], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "creat": [13, 16, 100, 174, 175, 180, 190, 192, 210, 224, 234, 236, 260, 270, 271, 306, 313, 345, 350, 367, 370, 375, 387, 390, 393, 410, 427, 438, 440, 442, 443, 446, 453, 456, 458, 460], "exampl": [13, 143, 149, 155, 164, 165, 174, 175, 190, 191, 192, 203, 207, 234, 235, 236, 246, 249, 260, 261, 262, 264, 290, 313, 314, 315, 317, 318, 328, 351, 370, 372, 387, 388, 392, 398, 420, 421, 428, 431, 432, 433, 436, 454, 455, 459, 460, 461, 464], "prepare_dataload": 13, "io": 13, "ndarray_to_devic": 13, "ndarrai": [13, 62, 63, 65, 207, 249, 373, 417, 459], "devic": [13, 74, 84, 85, 86, 87, 88, 89, 92, 102, 126, 131, 140, 164, 165, 174, 175, 412, 425, 426, 428, 431, 436, 445, 452], "is_model_quant": 13, "query_quantizable_nod": 13, "node": [13, 39, 45, 48, 49, 50, 51, 55, 57, 59, 62, 63, 65, 69, 72, 75, 77, 78, 79, 93, 97, 98, 100, 105, 127, 141, 252, 326, 350, 393, 414, 458, 460], "given": [13, 16, 62, 63, 65, 99, 100, 111, 141, 149, 207, 249, 260, 313, 351, 390, 450, 457, 459], "map": [13, 39, 100, 175, 207, 249, 252, 255, 259, 261, 262, 264, 279, 284, 289, 292, 312, 314, 315, 317, 410, 414, 424, 425, 438, 442, 450, 453], "quantize_sym_model": 13, "qconfig": [13, 458], "accord": [13, 117, 149, 155, 174, 175, 190, 191, 192, 207, 234, 235, 236, 249, 299, 358, 360, 375, 390, 393, 410, 414, 450, 454, 457, 459, 460], "run_forward": 13, "b_filter": 13, "collector": [13, 143, 373], "pre_batch": 13, "post_batch": 13, "forward": [13, 392, 425, 450, 452, 453, 457, 458], "propag": [13, 95], "filter": [13, 190, 191, 192, 193, 194, 195, 197, 201, 234, 235, 236, 237, 238, 239, 241, 245, 256, 309, 383, 409, 410, 421, 450, 458], "which": [13, 50, 78, 105, 143, 147, 160, 164, 165, 166, 167, 169, 170, 174, 175, 190, 191, 192, 203, 208, 234, 235, 236, 246, 257, 262, 271, 273, 274, 276, 277, 278, 282, 287, 288, 289, 291, 296, 310, 315, 317, 322, 328, 351, 355, 383, 387, 389, 390, 393, 409, 410, 412, 414, 417, 418, 421, 424, 425, 426, 427, 429, 433, 436, 439, 445, 446, 448, 450, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462], "batch": [13, 149, 180, 182, 183, 188, 189, 210, 224, 226, 227, 232, 233, 372, 409, 412, 413, 425, 448, 450, 459, 460, 463], "infer": [13, 100, 164, 255, 292, 326, 328, 351, 372, 393, 412, 413, 425, 426, 445, 447, 450, 451, 453, 457, 458, 460], "collect": [13, 16, 39, 205, 207, 210, 212, 213, 215, 249, 262, 264, 315, 317, 373, 383, 453, 458, 460], "inform": [13, 39, 143, 160, 164, 166, 167, 168, 169, 170, 175, 178, 179, 210, 212, 213, 222, 223, 287, 289, 290, 291, 293, 317, 383, 387, 388, 391, 392, 393, 394, 396, 400, 403, 406, 412, 418, 425, 427, 440, 443, 446, 450, 454, 455, 458, 462, 463, 464], "dure": [13, 166, 169, 174, 175, 287, 291, 328, 383, 425, 426, 427, 447, 448, 450, 453, 457, 458, 462], "call": [13, 147, 150, 164, 167, 260, 289, 313, 389, 390, 393, 409, 420, 434, 436, 446, 453, 457, 458, 459], "prior": [13, 83, 460], "after": [13, 39, 73, 149, 162, 166, 167, 174, 175, 190, 203, 207, 210, 234, 246, 249, 289, 356, 370, 390, 409, 410, 412, 413, 416, 421, 424, 425, 438, 439, 442, 446, 447, 448, 450, 453, 454, 456, 457, 458, 459, 460], "count": [13, 390, 410], "int": [13, 16, 39, 100, 141, 146, 149, 162, 174, 175, 189, 190, 191, 203, 207, 233, 234, 235, 246, 249, 253, 254, 258, 260, 264, 271, 311, 313, 317, 336, 345, 350, 370, 383, 410, 424, 425, 452, 459], "make_symbol_block": 13, "gluon": [13, 318, 351, 427], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "tune_cfg": [13, 141, 142, 149, 393, 460], "quantizable_nod": 13, "strategi": [13, 149, 167, 174, 175, 176, 192, 220, 236, 256, 309, 392, 393, 398, 414, 421, 425, 433, 445, 451, 452, 453, 454, 455, 461, 462], "config": [13, 110, 111, 113, 117, 149, 155, 160, 162, 166, 167, 168, 169, 170, 174, 178, 179, 190, 219, 222, 223, 234, 273, 274, 276, 277, 278, 279, 284, 287, 288, 289, 290, 291, 306, 307, 309, 318, 345, 350, 367, 368, 370, 372, 375, 382, 383, 390, 392, 398, 408, 412, 413, 414, 416, 419, 421, 425, 426, 427, 448, 450, 452, 453, 454, 456, 458, 460], "tune": [13, 40, 155, 174, 175, 178, 179, 190, 192, 222, 223, 234, 236, 255, 292, 294, 295, 296, 297, 299, 300, 301, 302, 305, 306, 307, 308, 318, 328, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 366, 367, 368, 369, 372, 383, 393, 409, 410, 414, 421, 423, 425, 426, 445, 447, 450, 451, 454, 455, 456, 458, 462], "from": [13, 39, 40, 56, 62, 63, 65, 100, 141, 147, 149, 155, 156, 157, 160, 166, 167, 168, 169, 170, 174, 175, 178, 179, 180, 183, 187, 190, 191, 192, 193, 194, 195, 197, 202, 203, 209, 210, 213, 222, 223, 224, 227, 231, 234, 235, 236, 237, 238, 239, 241, 246, 250, 252, 253, 254, 257, 260, 261, 262, 266, 271, 287, 288, 289, 291, 306, 308, 310, 313, 314, 315, 318, 326, 328, 351, 367, 369, 370, 372, 375, 382, 383, 387, 389, 390, 393, 408, 409, 410, 412, 413, 414, 415, 416, 417, 419, 421, 424, 426, 427, 428, 432, 433, 434, 436, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461], "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 16, 136, 154, 174, 175, 180, 182, 183, 186, 188, 210, 224, 226, 227, 230, 232, 377, 392, 412, 422, 440, 443, 451, 453, 455, 457, 461, 463], "depend": [13, 178, 179, 208, 222, 223, 318, 351, 372, 388, 417, 418, 452, 453, 460], "algorithm": [13, 149, 171, 257, 264, 272, 309, 310, 317, 375, 377, 390, 393, 412, 413, 418, 421, 434, 439, 450, 453, 458, 462], "set": [13, 39, 52, 91, 100, 110, 141, 147, 149, 155, 170, 172, 174, 175, 178, 179, 180, 190, 192, 195, 207, 208, 213, 214, 222, 223, 224, 234, 236, 239, 249, 260, 266, 279, 284, 288, 293, 313, 317, 318, 326, 350, 351, 370, 372, 380, 383, 387, 390, 408, 410, 412, 414, 416, 418, 420, 421, 422, 424, 425, 426, 428, 430, 432, 446, 450, 452, 453, 456, 457, 460, 462], "kl": [13, 16, 174, 175, 373, 377, 418, 425, 460, 462], "minmax": [13, 16, 418, 453, 462], "calib_model": 13, "qsym_model": 13, "calib_data": 13, "calibdata": 13, "threshold": [13, 151, 373, 377, 424], "amp_convert": 13, "amp_cfg": 13, "support": [13, 39, 92, 99, 147, 153, 157, 166, 167, 174, 175, 178, 179, 189, 190, 192, 199, 203, 207, 209, 210, 211, 214, 219, 222, 223, 233, 234, 236, 243, 246, 249, 256, 264, 266, 271, 287, 289, 293, 300, 306, 309, 317, 318, 322, 328, 351, 361, 367, 370, 372, 375, 377, 383, 385, 392, 425, 428, 433, 436, 439, 445, 451, 454, 456, 460, 461], "amp": [13, 428, 435, 449], "wrap": [13, 100, 111, 157, 209, 260, 313, 389, 414, 440, 443], "dataiterload": 13, "data_it": [13, 164], "collectorbas": 13, "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 16, 373], "8001": [13, 373], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 110, 150, 151, 153, 154, 165, 267, 270, 321, 323, 325, 326, 327, 393, 422, 427, 438, 440, 442, 443, 446, 451, 456, 460], "up": [13, 95, 207, 249, 288, 414, 415, 418, 421, 436, 440, 443, 445, 451, 452, 453, 456, 459, 460, 462], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "onnxruntimeadaptor": 14, "rt": 14, "onnxrt_qlinearopsadaptor": [14, 393], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": 15, "white_nod": 15, "cpuexecutionprovid": [15, 38, 453], "reduce_rang": [15, 38, 174, 175, 452], "augment": 15, "dump": [15, 155, 254, 383, 453, 458], "calib_registri": 16, "calib_method": 16, "calibratorbas": 16, "minmaxcalibr": 16, "percentilecalibr": 16, "2048": [16, 383], "percentil": 16, "99": [16, 457, 463], "999": [16, 462, 463], "option": [16, 100, 166, 174, 175, 178, 179, 190, 207, 222, 223, 234, 249, 253, 254, 260, 266, 287, 293, 306, 309, 313, 317, 318, 351, 367, 370, 372, 376, 383, 410, 418, 422, 425, 439, 450, 453, 456, 459, 460, 462], "number": [16, 62, 63, 100, 149, 162, 165, 166, 174, 175, 188, 191, 203, 207, 232, 235, 246, 249, 261, 262, 264, 287, 296, 314, 315, 317, 345, 350, 355, 370, 375, 383, 408, 410, 414, 424, 450, 453, 456, 459, 460], "bin": [16, 383, 417], "histogram": [16, 373, 383, 458], "valu": [16, 39, 50, 62, 63, 65, 84, 85, 100, 136, 141, 149, 154, 155, 160, 164, 165, 170, 172, 174, 175, 178, 179, 190, 193, 194, 203, 207, 208, 222, 223, 234, 237, 238, 246, 249, 260, 264, 288, 296, 299, 306, 313, 317, 318, 351, 355, 360, 367, 370, 372, 373, 375, 383, 389, 410, 418, 424, 425, 431, 447, 450, 452, 453, 457, 459, 460, 462], "default": [16, 92, 141, 170, 172, 174, 175, 178, 179, 182, 190, 191, 192, 203, 207, 222, 223, 226, 234, 235, 236, 246, 249, 253, 254, 257, 266, 288, 308, 310, 317, 326, 369, 375, 383, 389, 393, 410, 418, 421, 422, 424, 425, 426, 433, 436, 438, 442, 447, 450, 452, 453, 454, 456, 457, 459, 460, 462], "float": [16, 39, 143, 166, 167, 168, 170, 174, 175, 190, 203, 234, 246, 258, 260, 261, 262, 289, 311, 313, 314, 315, 370, 380, 383, 410, 424, 452, 453, 457, 459], "A": [16, 39, 49, 69, 70, 98, 111, 141, 149, 156, 160, 164, 166, 167, 168, 169, 170, 174, 175, 192, 207, 210, 212, 213, 219, 236, 249, 250, 257, 260, 261, 262, 264, 267, 270, 271, 272, 279, 282, 284, 287, 288, 289, 290, 291, 296, 310, 313, 314, 315, 317, 318, 322, 326, 355, 372, 383, 410, 415, 418, 424, 425, 427, 438, 439, 442, 445, 450, 451, 453, 457, 459, 460, 462], "between": [16, 136, 154, 167, 174, 175, 207, 249, 261, 264, 314, 317, 345, 350, 383, 389, 393, 412, 421, 424, 425, 436, 453, 455, 456, 457, 459, 460], "0": [16, 39, 48, 85, 100, 141, 149, 151, 153, 157, 162, 174, 175, 180, 182, 186, 190, 193, 194, 197, 203, 207, 209, 210, 224, 226, 230, 234, 237, 238, 241, 246, 249, 254, 255, 264, 271, 279, 284, 292, 317, 328, 351, 356, 370, 389, 410, 412, 414, 416, 417, 418, 422, 423, 424, 425, 426, 431, 433, 438, 442, 449, 450, 452, 453, 455, 456, 457, 458, 459, 460, 462], "100": [16, 155, 174, 175, 192, 236, 370, 408, 410, 414, 420, 425, 452, 453, 457, 459, 460, 462, 463], "klcalibr": 16, "128": [16, 190, 193, 194, 207, 234, 237, 238, 249, 410, 425, 453, 459], "num_quantized_bin": 16, "histogramcollector": 16, "collctor": 16, "smooth_distribut": 16, "p": [16, 446], "ep": [16, 154, 426], "0001": [16, 174, 175, 412, 425, 452], "smooth": [16, 39, 147, 153, 174, 175, 305, 450], "discret": [16, 460], "mai": [16, 141, 273, 274, 276, 277, 278, 370, 387, 388, 392, 409, 416, 417, 423, 426, 438, 442, 449, 451, 453, 460], "have": [16, 39, 69, 78, 141, 165, 166, 167, 188, 210, 232, 257, 260, 287, 289, 310, 313, 317, 351, 369, 370, 387, 388, 409, 410, 414, 418, 423, 424, 425, 426, 428, 445, 447, 450, 453, 457, 460], "been": [16, 166, 167, 257, 287, 289, 310, 388, 390, 412, 425, 426, 445, 457], "normal": [16, 207, 249, 262, 315, 425, 447, 457, 459], "1": [16, 39, 49, 69, 84, 100, 104, 108, 139, 141, 147, 149, 151, 153, 154, 155, 157, 167, 174, 175, 180, 182, 186, 189, 190, 191, 193, 194, 197, 198, 203, 207, 208, 209, 210, 224, 226, 230, 233, 234, 235, 237, 238, 241, 242, 246, 249, 255, 260, 261, 262, 264, 279, 284, 289, 292, 293, 313, 314, 315, 317, 328, 351, 370, 375, 387, 389, 392, 393, 409, 410, 412, 416, 418, 419, 422, 424, 426, 429, 431, 447, 448, 449, 450, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462], "replac": [16, 147, 262, 315, 414, 425, 436, 455], "zero": [16, 39, 167, 170, 207, 249, 289, 383, 392, 450, 453, 457, 459, 460], "multipli": 16, "scale": [16, 39, 95, 136, 147, 149, 153, 154, 203, 207, 246, 249, 453, 456, 457, 459, 460], "factor": [16, 449, 457, 463], "take": [16, 166, 175, 178, 179, 183, 207, 212, 222, 223, 227, 249, 287, 296, 317, 318, 351, 355, 372, 387, 389, 390, 409, 412, 418, 425, 445, 450, 453, 454, 459, 460, 462], "correspond": [16, 39, 143, 164, 174, 175, 190, 234, 257, 260, 264, 310, 313, 317, 375, 383, 393, 418, 425, 450, 452, 453, 456, 457, 460], "amount": 16, "off": [16, 62, 63, 65, 388], "non": [16, 288, 383, 389, 449, 460], "ref": [16, 141], "http": [16, 143, 160, 166, 167, 190, 192, 234, 236, 257, 258, 260, 261, 262, 287, 289, 290, 310, 311, 313, 314, 315, 317, 351, 389, 392, 410, 419, 422, 423, 425, 434, 440, 443, 455], "hanj": 16, "c": [16, 69, 192, 236, 410, 417, 422, 460], "illinoi": 16, "edu": [16, 192, 236, 410], "cs412": 16, "bk3": 16, "diverg": [16, 373, 377, 412, 460], "pdf": 16, "github": [16, 143, 166, 190, 234, 257, 258, 261, 262, 287, 290, 310, 311, 314, 315, 317, 351, 388, 410, 415, 422, 423, 425, 434, 440, 443, 455], "com": [16, 143, 166, 190, 234, 257, 258, 261, 262, 287, 290, 310, 311, 314, 315, 317, 351, 387, 392, 410, 419, 422, 423, 425, 428, 434, 455, 456, 463], "apach": [16, 423], "incub": 16, "blob": [16, 143, 166, 257, 258, 261, 262, 287, 310, 311, 314, 315, 317, 351, 425, 434], "master": [16, 166, 257, 258, 261, 262, 287, 290, 310, 311, 314, 315, 317, 351, 425, 460], "python": [16, 70, 141, 192, 211, 236, 256, 309, 370, 383, 385, 388, 389, 410, 414, 417, 422, 425, 430, 436, 439, 445, 451, 459], "contrib": [16, 256, 309], "py": [16, 141, 143, 155, 167, 174, 175, 258, 260, 261, 262, 289, 311, 313, 314, 315, 370, 389, 393, 414, 422, 425, 430, 432, 433, 434, 440, 443, 453, 455, 458], "microsoft": [16, 393], "onnxruntim": [16, 174, 175, 186, 192, 199, 230, 236, 243, 265, 345, 393, 421, 422, 426, 452], "main": [16, 214, 290, 389, 414, 425, 432, 434, 446, 450, 453], "tool": [16, 141, 253, 383, 392, 393, 425, 438, 442, 450, 451, 453], "arrai": [16, 39, 141, 207, 249, 260, 271, 313, 383, 459], "small": [16, 62, 63, 64, 358, 390, 450, 460], "probabl": [16, 174, 175, 377], "activationoper": 18, "onnx_quant": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37], "onnx_nod": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 82, 96, 106], "removableactivationoper": 18, "remov": [18, 39, 51, 52, 55, 69, 75, 78, 79, 80, 91, 93, 162, 262, 315, 387, 388, 425, 438, 442, 450, 458], "qactivationoper": 18, "children": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37], "initi": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 39, 100, 111, 141, 157, 167, 178, 179, 187, 190, 209, 222, 223, 231, 234, 288, 289, 306, 351, 367, 372, 390, 409, 410, 424, 444, 450, 453, 457, 460], "qoper": [18, 33, 174, 175], "format": [18, 39, 48, 141, 174, 175, 190, 191, 192, 234, 235, 236, 254, 260, 266, 306, 313, 367, 370, 410, 414, 416, 424, 425, 426, 427, 428, 453], "argmaxoper": 19, "qargmaxoper": 19, "attentionoper": 20, "qattentionoper": 20, "qattent": 20, "binari": [21, 141, 264, 317, 417, 424, 440, 443], "binaryoper": 21, "qbinaryoper": 21, "qbinari": 21, "concatoper": 22, "qconcatoper": 22, "qconcat": 22, "convoper": 23, "qconvoper": 23, "qlinearconv": 23, "direct8bit": 24, "direct8bitoper": 24, "qdirectoper": 24, "qdirect": 24, "embedlayernorm": 25, "embedlayernormalizationoper": 25, "qembedlayernormalizationoper": 25, "qembedlayernorm": 25, "gatheroper": 26, "qgatheroper": 26, "qgather": 26, "globalaveragepool": 27, "globalaveragepooloper": 27, "qglobalaveragepooloper": 27, "qlinearglobalaveragepool": 27, "gemmoper": 28, "qgemmoper": 28, "qgemm": 28, "lstmoper": 30, "matmuloper": 31, "qmatmuloper": 31, "qlinearmatmul": 31, "maxpooloper": 32, "qmaxpooloper": 32, "qmaxpool": 32, "op_registri": 33, "op_typ": [33, 307, 368], "qop_registri": 33, "padoper": 34, "qpadoper": 34, "qpad": 34, "averagepool": 35, "pooloper": 35, "qpooloper": 35, "qlinearaveragepool": 35, "resizeoper": 36, "qresizeoper": 36, "qresiz": 36, "splitoper": 37, "qsplitoper": 37, "qsplit": 37, "q_config": [38, 254, 393], "mode": [38, 39, 40, 105, 147, 199, 243, 260, 306, 313, 326, 367, 380, 383, 393, 421, 438, 442, 453, 454, 460], "static": [38, 42, 147, 153, 164, 175, 306, 351, 367, 393, 416, 421, 425, 428, 433, 434, 435, 436, 439, 445, 457, 460, 463], "quantization_param": 38, "op_types_to_quant": 38, "fallback_list": 38, "fp32": [38, 74, 126, 131, 136, 149, 154, 174, 175, 178, 179, 222, 223, 253, 254, 264, 299, 306, 317, 356, 360, 367, 375, 382, 383, 392, 393, 418, 419, 424, 425, 426, 435, 452, 453, 454, 455, 456, 457, 458, 460, 462, 463], "add_qdq_pair_to_weight": [38, 174, 175, 453], "optypes_to_exclude_output_qu": [38, 174, 175, 453], "dedicated_qdq_pair": [38, 174, 175, 453], "helper": [39, 40, 105, 111, 141, 149, 190, 191, 192, 206, 234, 235, 236, 248, 252, 253, 254, 326, 381], "onnxrt": [39, 190, 192, 199, 207, 234, 236, 243, 249, 264, 317, 344, 381, 393, 426, 453], "dtype_to_nam": 39, "dtype_map": 39, "dtype": [39, 97, 100, 174, 175, 193, 194, 203, 207, 237, 238, 246, 249, 410, 416, 418, 428, 452, 453, 457, 458, 459, 462], "its": [39, 55, 91, 143, 164, 167, 175, 186, 192, 207, 230, 236, 249, 252, 258, 259, 289, 296, 311, 312, 355, 387, 410, 412, 423, 424, 426, 436, 438, 442, 445, 446, 449, 450, 456, 459, 460], "string": [39, 40, 111, 141, 155, 157, 164, 166, 167, 168, 169, 170, 171, 174, 175, 192, 209, 214, 236, 250, 255, 257, 260, 266, 267, 268, 270, 271, 279, 284, 287, 288, 289, 290, 291, 292, 310, 313, 322, 326, 375, 380, 383, 424, 457, 459], "represent": [39, 387, 389, 413, 450, 453], "quanttyp": 39, "repres": [39, 166, 167, 168, 170, 192, 197, 236, 241, 260, 262, 264, 313, 315, 317, 387, 410, 416, 450, 453, 460], "make_quant_nod": 39, "output": [39, 48, 52, 54, 69, 93, 100, 105, 141, 149, 164, 165, 166, 172, 174, 175, 178, 179, 212, 216, 222, 223, 253, 254, 257, 287, 310, 317, 318, 326, 351, 372, 378, 379, 383, 389, 393, 412, 413, 414, 416, 418, 420, 424, 425, 427, 436, 445, 446, 448, 450, 452, 453, 457, 458, 459, 460, 462], "make": [39, 100, 136, 154, 166, 167, 169, 188, 232, 287, 289, 291, 383, 387, 388, 393, 408, 409, 418, 424, 425, 433, 438, 442, 445, 453, 454, 456, 457, 460], "quantizelinear": 39, "make_dquant_nod": 39, "axi": [39, 175], "dequantizelinear": 39, "is_b_transpos": 39, "wheter": 39, "inuput": 39, "b": [39, 69, 190, 234, 410, 424, 450, 457, 460], "transpos": [39, 68, 166, 207, 249, 253, 287, 459], "split_shared_bia": 39, "share": [39, 77, 93, 104, 417, 418, 457, 460], "float_to_float16": 39, "float16": [39, 410], "float_to_bfloat16": 39, "bfloat16": [39, 426, 428, 436, 454], "cast_tensor": 39, "tensorproto": [39, 100], "remove_init_from_model_input": 39, "collate_pr": 39, "result": [39, 141, 143, 149, 203, 207, 246, 249, 257, 260, 261, 262, 264, 310, 313, 314, 315, 317, 331, 351, 358, 372, 382, 383, 387, 390, 392, 409, 412, 414, 421, 423, 424, 425, 433, 434, 445, 446, 447, 450, 451, 453, 456, 457, 458, 459, 460, 461, 463], "quantize_data_with_scale_zero": 39, "qtype": [39, 393], "scheme": [39, 149, 393, 409, 418, 436, 460, 462], "zero_point": 39, "point": [39, 203, 246, 261, 262, 271, 296, 314, 315, 355, 424, 445, 453, 457, 459, 460], "To": [39, 260, 313, 328, 388, 410, 414, 426, 429, 432, 438, 440, 442, 443, 452, 454, 455, 457, 460, 462], "pack": [39, 56], "weight": [39, 55, 56, 117, 136, 143, 147, 154, 160, 165, 166, 167, 168, 174, 175, 287, 289, 306, 317, 351, 358, 367, 383, 384, 393, 413, 418, 420, 424, 425, 447, 450, 452, 453, 457, 458, 460, 462], "we": [39, 62, 63, 65, 69, 81, 136, 147, 153, 154, 155, 164, 174, 175, 189, 208, 210, 233, 257, 260, 310, 313, 358, 387, 389, 393, 409, 414, 416, 418, 424, 425, 432, 433, 436, 440, 443, 445, 446, 447, 448, 450, 452, 453, 456, 457, 458, 460, 461], "comput": [39, 100, 143, 149, 257, 258, 261, 262, 264, 310, 311, 314, 315, 317, 372, 383, 413, 416, 424, 425, 426, 428, 439, 450, 451, 453, 457, 460], "linear": [39, 153, 162, 164, 165, 166, 170, 174, 175, 287, 389, 412, 416, 425, 450, 457, 460], "transform": [39, 45, 136, 138, 139, 140, 146, 167, 190, 191, 192, 193, 194, 195, 197, 199, 201, 234, 235, 236, 237, 238, 239, 241, 243, 245, 256, 309, 389, 390, 409, 410, 412, 413, 414, 415, 419, 425, 428, 433, 434, 435, 436, 450, 451, 454, 457, 458, 462, 463], "when": [39, 48, 59, 65, 141, 165, 167, 170, 174, 175, 190, 191, 199, 207, 234, 235, 243, 249, 258, 288, 289, 311, 351, 372, 387, 390, 409, 410, 425, 436, 438, 439, 442, 446, 450, 453, 457, 459, 460], "uint8": [39, 203, 246, 260, 308, 313, 369, 393, 410, 418, 452, 453, 459, 462], "rmin": [39, 453], "rmax": [39, 453], "2": [39, 48, 69, 100, 104, 147, 151, 153, 155, 166, 167, 174, 175, 191, 208, 235, 260, 262, 264, 289, 296, 313, 315, 317, 328, 355, 370, 389, 393, 410, 412, 416, 418, 419, 421, 422, 423, 424, 426, 447, 449, 450, 453, 455, 456, 457, 459, 460, 461], "m": [39, 143, 166, 174, 175, 287, 412, 422, 428, 430, 433, 436, 440, 443, 450, 463], "where": [39, 174, 175, 260, 264, 313, 317, 369, 383, 412, 438, 442, 446, 457, 458], "max": [39, 99, 136, 154, 174, 175, 207, 249, 261, 262, 296, 314, 315, 355, 383, 392, 422, 425, 450, 453, 457, 459, 460], "ab": [39, 160, 167, 289, 453, 457], "np": [39, 207, 249, 296, 355, 414, 459, 460], "sym": [39, 418, 453, 462], "asym": [39, 418, 462], "calculate_scale_zp": 39, "quantize_rang": 39, "calcul": [39, 55, 149, 160, 170, 175, 193, 194, 237, 238, 261, 262, 287, 289, 299, 314, 315, 360, 373, 383, 410, 424, 425, 436, 447, 450, 453, 456, 457, 460, 462], "quantize_data": 39, "add": [39, 47, 59, 104, 114, 141, 170, 174, 175, 190, 192, 214, 234, 236, 288, 306, 367, 388, 389, 409, 410, 414, 416, 418, 424, 425, 426, 440, 443, 456, 458, 460], "necessari": [39, 387, 390, 427, 446, 450, 456, 460], "intermedi": [39, 143, 157, 174, 175, 209, 389, 421, 453], "trasnform": 39, "full": [39, 190, 191, 192, 234, 235, 236, 383, 392, 410, 417, 423, 446, 450], "equat": [39, 262, 264, 315, 317, 453, 457], "r": [39, 136, 154, 422, 446, 449, 453, 463], "": [39, 100, 136, 141, 154, 164, 165, 166, 167, 171, 172, 174, 175, 189, 192, 206, 207, 208, 210, 212, 219, 233, 236, 248, 249, 262, 287, 289, 315, 317, 318, 322, 351, 383, 387, 390, 412, 414, 416, 418, 421, 425, 426, 433, 436, 438, 442, 445, 448, 449, 450, 451, 452, 453, 455, 456, 457, 460, 462], "q": [39, 102, 104, 126, 457], "z": [39, 412, 457], "real": [39, 193, 210, 237, 414, 451, 453], "origin": [39, 147, 149, 164, 167, 170, 175, 190, 207, 208, 234, 249, 273, 274, 276, 277, 278, 288, 289, 308, 356, 369, 383, 388, 410, 433, 450, 453, 459, 460, 462], "quantize_data_per_channel": 39, "per": [39, 147, 153, 155, 174, 175, 208, 377, 393, 449, 454, 463], "channel": [39, 136, 147, 153, 154, 162, 165, 166, 174, 175, 203, 207, 246, 249, 287, 393, 421, 422, 428, 430, 435, 450, 459, 463], "dequantize_data_with_scale_zero": 39, "tensor_valu": 39, "scale_valu": 39, "zo_valu": 39, "dequant": [39, 52, 83, 86, 87, 88, 89, 91, 143, 149, 383, 389, 457, 458], "sacal": 39, "dequantize_data": 39, "valueinfo": 39, "tensor_nam": [39, 141], "new_dtyp": 39, "cast": [39, 52, 454, 459], "info": [39, 149, 166, 170, 205, 210, 215, 287, 322, 379, 383, 389, 427], "quantizedvalu": 39, "new_quantized_nam": 39, "scale_nam": 39, "zero_point_nam": 39, "quantized_value_typ": 39, "quint8": 39, "linearli": 39, "intial": 39, "quantizediniti": 39, "quantized_data": 39, "quantizationmod": 39, "quantizedvaluetyp": 39, "quantformat": 39, "quantize_nparrai": 39, "arr": [39, 383], "low": [39, 178, 179, 193, 194, 222, 223, 237, 238, 255, 265, 292, 318, 393, 408, 410, 414, 425, 426, 451, 453, 457, 460], "high": [39, 193, 194, 237, 238, 410, 422, 451, 460], "numpi": [39, 62, 63, 65, 100, 141, 207, 249, 260, 271, 313, 417, 459], "attribute_to_kwarg": 39, "attribut": [39, 78, 99, 100, 149, 164, 172, 175, 383, 393, 409, 418, 420, 425, 452, 462], "kwarg": [39, 100, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 130, 132, 162, 174, 175, 192, 205, 207, 212, 215, 236, 249, 305, 307, 317, 318, 319, 321, 323, 325, 326, 327, 351, 366, 368, 370, 372, 378, 379, 382, 383, 409], "make_nod": 39, "find_by_nam": 39, "item_list": 39, "find": [39, 62, 63, 65, 100, 141, 264, 271, 296, 317, 355, 383, 393, 431, 438, 442, 445, 446, 456, 458, 460], "item": [39, 170, 172, 174, 175, 206, 248, 288, 306, 367, 414, 450, 457, 460], "get_smooth_scales_per_op": 39, "max_vals_per_channel": 39, "input_tensors_2_weight": 39, "input_tensors_2_weights_nod": 39, "alpha": [39, 153, 160, 168, 453], "same": [39, 78, 141, 165, 167, 175, 190, 207, 234, 249, 260, 313, 383, 393, 408, 409, 410, 412, 414, 418, 425, 429, 433, 438, 442, 449, 450, 452, 453, 457, 458, 459, 460], "one": [39, 104, 105, 110, 149, 155, 165, 166, 167, 169, 207, 217, 249, 257, 260, 264, 266, 287, 290, 291, 310, 313, 317, 390, 393, 412, 413, 414, 418, 419, 421, 422, 424, 425, 426, 428, 429, 433, 434, 436, 438, 439, 442, 445, 446, 447, 448, 450, 452, 453, 455, 457, 459, 460], "mul": [39, 49, 60, 61, 64, 153, 416, 457], "todo": [39, 190, 193, 234, 237, 260, 306, 313, 367], "individu": [39, 166, 287, 345, 350, 387, 450, 457], "save": [39, 100, 170, 174, 175, 192, 219, 236, 253, 254, 293, 326, 351, 372, 373, 378, 383, 389, 393, 409, 420, 425, 426, 427, 429, 433, 438, 442, 448, 453, 457], "paper": [39, 412, 450, 457], "onli": [39, 48, 58, 65, 81, 104, 110, 136, 147, 153, 154, 155, 165, 166, 167, 174, 175, 190, 208, 210, 214, 234, 266, 287, 289, 300, 351, 361, 370, 383, 392, 393, 408, 409, 412, 414, 417, 418, 425, 426, 433, 446, 450, 451, 452, 453, 457, 458, 460, 462], "get_smooth_scales_per_input": 39, "insert_smooth_mul_op_per_input": 39, "shape_info": 39, "insert": [39, 72, 100, 102, 104, 108, 139, 147, 153, 389, 421, 425, 428, 450, 453, 454, 457, 458], "inupt": 39, "shape": [39, 100, 141, 166, 193, 194, 203, 207, 237, 238, 246, 249, 260, 313, 392, 410, 418, 419, 425, 457, 459], "ad": [39, 167, 190, 234, 257, 296, 310, 355, 426, 428, 433, 436, 440, 443, 450, 458], "new_init_tensor": 39, "new_added_mul_nod": 39, "adjust_weights_per_op": 39, "adjust": [39, 436, 453, 457], "ha": [39, 62, 63, 65, 69, 166, 167, 208, 257, 287, 289, 310, 370, 388, 390, 393, 409, 416, 421, 425, 426, 431, 445, 450, 452, 453, 454, 456, 457, 460], "whose": [39, 147, 153, 166, 288, 420, 457, 460], "adjustd": 39, "adjust_weights_per_input": 39, "insert_smooth_mul_op_per_op": 39, "befor": [39, 102, 104, 153, 166, 167, 169, 174, 175, 190, 234, 287, 289, 291, 388, 410, 412, 413, 414, 417, 418, 422, 425, 440, 443, 453, 456, 458, 460], "name_2_nod": 39, "kei": [39, 141, 143, 147, 164, 170, 172, 174, 175, 271, 288, 326, 370, 373, 375, 383, 392, 451, 458, 460], "fold_scal": 39, "fold": [39, 57, 58, 254, 418, 457], "quant": [39, 149, 174, 175, 306, 367, 389, 425, 453], "trt_env_setup": 39, "environ": [39, 155, 208, 387, 408, 438, 442, 445, 460], "variabl": [39, 155, 168, 174, 175, 192, 208, 236, 296, 355, 422, 450, 460], "tensorrt": [39, 453], "execut": [39, 48, 155, 167, 174, 175, 289, 293, 295, 350, 351, 352, 354, 372, 375, 382, 383, 412, 413, 425, 426, 430, 431, 438, 439, 442, 445, 446, 448, 450, 453, 456, 460, 463], "provid": [39, 97, 100, 105, 164, 178, 179, 207, 222, 223, 249, 255, 260, 279, 284, 292, 293, 313, 318, 351, 372, 376, 378, 390, 392, 393, 408, 409, 413, 414, 415, 421, 422, 425, 426, 427, 428, 432, 436, 439, 445, 446, 450, 452, 453, 458, 460, 461, 462, 463], "get_ops_recurs": 40, "prefix": [40, 141, 142, 148, 155, 428, 433, 458], "thi": [40, 81, 105, 127, 134, 136, 140, 143, 149, 154, 156, 162, 164, 166, 167, 168, 169, 174, 175, 178, 179, 189, 190, 191, 192, 193, 194, 195, 197, 207, 210, 216, 217, 222, 223, 233, 234, 235, 236, 237, 238, 239, 241, 249, 257, 260, 261, 262, 264, 273, 274, 276, 277, 278, 279, 284, 287, 289, 291, 292, 293, 296, 299, 310, 313, 314, 315, 317, 318, 328, 351, 355, 360, 370, 372, 382, 383, 387, 388, 389, 390, 393, 409, 410, 412, 413, 414, 416, 417, 418, 421, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 436, 438, 440, 442, 443, 444, 445, 446, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461], "graph_info": 40, "templateadaptor": 40, "tampl": 40, "dictionari": [40, 62, 63, 65, 142, 143, 149, 172, 174, 175, 206, 248, 260, 267, 270, 272, 313, 383], "yaml": [40, 170, 172, 175, 178, 179, 190, 192, 208, 222, 223, 234, 236, 250, 255, 266, 267, 268, 270, 279, 284, 292, 293, 382, 383, 393, 420, 424, 425, 447, 452, 458, 459], "file": [40, 100, 141, 149, 152, 170, 171, 174, 175, 178, 179, 190, 191, 192, 195, 206, 207, 213, 216, 222, 223, 234, 235, 236, 239, 248, 249, 250, 255, 260, 266, 267, 268, 270, 279, 284, 288, 290, 292, 293, 313, 318, 328, 334, 335, 339, 351, 382, 383, 390, 393, 414, 417, 420, 423, 424, 425, 427, 431, 440, 443, 444, 445, 446, 447, 452, 453, 458, 459], "pytorchadaptor": 40, "api": [40, 65, 70, 105, 218, 255, 260, 292, 305, 306, 313, 317, 351, 366, 367, 370, 383, 388, 389, 394, 396, 400, 403, 406, 416, 421, 425, 430, 434, 435, 436, 455, 456, 460, 464], "pytorch_ipexadaptor": 40, "intel": [40, 166, 211, 214, 251, 256, 263, 264, 287, 290, 298, 304, 309, 316, 317, 329, 351, 359, 365, 385, 387, 388, 390, 391, 393, 409, 410, 411, 412, 413, 415, 416, 418, 419, 423, 426, 427, 428, 433, 435, 436, 447, 448, 449, 450, 451, 453, 454, 455, 457, 458, 460, 461, 462], "extens": [40, 383, 390, 392, 393, 418, 421, 422, 425, 426, 427, 429, 434, 435, 436, 440, 443, 444, 450, 451, 453, 457, 460, 461, 462], "ipex": [40, 149, 174, 175, 421, 425, 430, 434, 435, 457, 463], "pytorch_fxadaptor": 40, "fx": [40, 149, 174, 300, 361, 421, 434, 435, 451, 453, 454, 463], "graph": [40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 109, 112, 125, 127, 131, 134, 135, 136, 138, 139, 140, 141, 164, 189, 233, 255, 319, 326, 350, 389, 393, 410, 412, 414, 420, 424, 427, 428, 453, 454, 458], "pytorchqueri": 40, "querybackendcap": [41, 393], "tensorflowadaptor": 42, "stock": [42, 434, 457], "spr": 42, "tensorflow_itexadaptor": 42, "itex": [42, 104, 174, 175, 253, 453], "tensorflowqueri": [42, 393], "performance_onli": [42, 43, 44, 102, 126, 131, 140, 174, 425], "itex_mod": [42, 43, 84, 102, 126, 131], "quant_mod": [42, 306, 367], "graphconvert": 43, "qt_config": 43, "recip": [43, 164, 174, 175, 255, 292, 425, 457, 460], "int8_sequ": 43, "fp32_op": [43, 45, 102], "bf16_op": [43, 45, 102, 454], "data_load": [43, 44, 393], "fake_qu": [43, 83, 102, 126, 131], "qdq_enabl": 43, "new_api": [43, 44, 66, 67, 72, 74, 87, 94, 126, 131, 136], "use_bf16": [43, 44, 174, 452], "without": [44, 85, 141, 167, 207, 249, 289, 308, 369, 387, 409, 412, 414, 424, 425, 436, 450, 451, 452, 460, 461], "graphconverterwithoutcalib": 44, "recover_config": 44, "rewrit": [45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 101, 102, 103, 104, 219], "bf16convert": [45, 454], "biasadd": [47, 54, 59, 61, 104, 418], "convertaddtobiasaddoptim": 47, "conv2d": [47, 54, 55, 56, 60, 61, 66, 120, 130, 136, 416, 418, 457, 458, 460], "addv2": [47, 64, 418], "layout": 48, "convertlayoutoptim": 48, "optim": [48, 69, 70, 74, 75, 111, 113, 164, 167, 171, 174, 175, 211, 217, 219, 255, 256, 272, 292, 296, 309, 355, 372, 373, 380, 383, 390, 392, 408, 412, 413, 414, 418, 419, 421, 422, 425, 427, 428, 430, 432, 433, 436, 439, 449, 450, 451, 452, 453, 454, 456, 457, 458, 460, 462], "nchw": 48, "nhwc": 48, "It": [48, 156, 166, 178, 179, 216, 222, 223, 262, 264, 271, 287, 292, 299, 315, 317, 318, 351, 356, 360, 372, 393, 412, 425, 431, 434, 439, 445, 446, 450, 453, 456, 460, 462], "exist": [48, 155, 172, 208, 326, 416, 424, 432, 460], "4": [48, 155, 166, 174, 175, 199, 202, 203, 207, 243, 246, 249, 257, 258, 260, 310, 311, 313, 370, 387, 393, 408, 414, 415, 418, 421, 422, 424, 425, 433, 449, 450, 453, 457, 459, 460, 463], "abov": [48, 393, 412, 450, 453, 457], "graph_def": [48, 141, 253, 318, 326, 350, 351], "leakyrelu": [49, 457], "convertleakyreluoptim": 49, "below": [49, 61, 69, 174, 175, 293, 317, 351, 388, 389, 392, 393, 409, 412, 414, 420, 424, 428, 430, 438, 439, 442, 445, 447, 448, 450, 452, 453, 456, 457, 458, 460, 461], "subgraph": [49, 61, 100, 148], "maximum": [49, 166, 167, 174, 175, 190, 207, 234, 249, 258, 289, 296, 311, 355, 410, 425, 450, 453, 459], "note": [49, 166, 260, 300, 313, 361, 390, 414, 416, 418, 422, 425, 430, 433, 438, 442, 445, 450, 453, 457, 458, 460, 461, 462], "coeffici": [49, 450], "less": [49, 141, 174, 175, 383, 408, 412, 425, 450], "than": [49, 141, 190, 207, 234, 249, 383, 390, 392, 408, 410, 420, 424, 447, 448, 450, 453, 456, 459, 460], "convers": [49, 175, 266, 393, 425, 426, 453, 454, 457], "valid": [49, 62, 63, 100, 167, 170, 174, 175, 192, 236, 260, 288, 289, 313, 326, 388, 390, 392, 393, 410, 412, 415, 418, 421, 423, 425, 436, 450, 453, 455], "nan": 50, "random": [50, 141, 174, 175, 203, 207, 246, 249, 256, 272, 296, 298, 309, 355, 359, 383, 388, 390, 425, 452, 459, 462], "convertnantorandom": 50, "const": [50, 51, 58, 59, 62, 63, 65, 77, 93], "consist": [50, 58, 388, 389, 457, 460], "placehold": [51, 188, 232], "convertplaceholdertoconst": 51, "train": [51, 75, 147, 153, 156, 165, 167, 174, 175, 178, 179, 190, 192, 207, 217, 222, 223, 234, 236, 249, 250, 266, 289, 309, 351, 375, 390, 392, 393, 398, 410, 412, 413, 416, 421, 426, 428, 434, 445, 448, 450, 451, 456, 457, 460, 462], "rerewrit": 52, "dequantizecastoptim": 52, "b16": 52, "dilat": 53, "contract": 53, "dilatedcontract": 53, "spacetobatchnd": 53, "batchtospacend": 53, "pattern": [53, 54, 56, 73, 91, 102, 103, 104, 126, 131, 149, 159, 161, 164, 165, 167, 168, 171, 174, 175, 192, 236, 256, 277, 278, 280, 285, 289, 306, 309, 367, 393, 410, 418, 421, 425, 446, 448, 452, 457, 463], "inject": [54, 425], "dummi": [54, 164, 193, 194, 237, 238, 264, 317, 392, 410, 419, 424, 425], "injectdummybiasaddoptim": 54, "fusion": [54, 56, 65, 73, 104, 121, 122, 123, 126, 127, 128, 132, 389, 393, 418], "expanddim": 55, "expanddimsoptim": 55, "next": [55, 183, 227, 370, 390, 452, 460], "featch": 56, "reshap": [56, 62, 63, 68, 457], "fetchweightfromreshapeoptim": 56, "handl": [56, 141, 147, 153, 379, 389, 391, 409, 457], "batchnorm": [57, 62, 116, 389, 457], "foldbatchnormnodesoptim": 57, "graphfoldconstantoptim": 58, "sequenc": [58, 100, 165, 166, 174, 175, 190, 206, 207, 234, 248, 249, 258, 262, 287, 311, 315, 393, 410, 418, 450, 459], "self": [58, 164, 174, 175, 328, 393, 409, 410, 421, 424, 456, 458, 460], "supported_op_typ": 58, "fusebiasaddandaddoptim": 59, "second": [59, 165, 174, 175, 190, 234, 356, 383, 425, 438, 442, 446, 457, 460, 462], "columnwis": 60, "fusecolumnwisemuloptim": 60, "depthwiseconv2dn": [60, 66, 120, 130, 418], "math": [61, 453], "fuseconvwithmathoptim": 61, "elimin": 61, "sub": [61, 149, 155, 164, 208, 390, 460], "realdiv": [61, 64], "decompos": [62, 63], "fusedecomposedbnoptim": 62, "input_graph_def": [62, 63, 65], "node_name_from_input": [62, 63, 65], "node_nam": [62, 63, 65, 141, 326, 336], "strip": [62, 63, 65, 78, 79, 141, 458], "port": [62, 63, 65], "other": [62, 63, 65, 147, 153, 189, 233, 262, 315, 326, 387, 388, 389, 418, 421, 423, 425, 427, 447, 449, 450, 453, 457, 459, 460, 463], "underli": [62, 63, 65], "node_from_map": [62, 63, 65], "node_map": [62, 63, 65], "pull": [62, 63, 65], "def": [62, 63, 65, 178, 179, 222, 223, 351, 370, 372, 389, 393, 409, 410, 412, 413, 414, 424, 425, 453, 457, 458, 460], "entri": [62, 63, 65, 143, 214, 255, 293, 383, 423], "index": [62, 63, 65, 100, 155, 175, 183, 188, 192, 227, 232, 236, 271, 383, 410, 424, 446, 457], "everi": [62, 63, 65, 166, 167, 174, 175, 287, 289, 393, 433, 438, 442, 460], "identifi": [62, 63, 65, 260, 313, 326, 450], "want": [62, 63, 65, 164, 174, 175, 188, 190, 232, 234, 289, 356, 372, 389, 393, 410, 414, 424, 425, 426, 433, 445, 446, 447, 456, 458, 460], "nodedef": [62, 63, 65], "rais": [62, 63, 65, 100, 166, 167, 170, 260, 287, 288, 289, 313, 318, 370, 392, 450, 451], "valueerror": [62, 63, 65, 260, 313, 370, 417], "If": [62, 63, 65, 69, 155, 174, 175, 178, 179, 192, 207, 222, 223, 236, 249, 288, 318, 351, 370, 372, 388, 389, 408, 410, 414, 422, 423, 424, 425, 426, 431, 439, 440, 443, 445, 447, 453, 456, 457, 458, 459, 460], "isn": [62, 63, 65], "t": [62, 63, 65, 136, 154, 166, 174, 175, 207, 210, 249, 262, 315, 389, 393, 412, 414, 425, 446, 450, 453, 460, 462], "present": [62, 63, 65, 451, 457], "values_from_const": [62, 63, 65], "node_def": [62, 63, 65], "extract": [62, 63, 65, 164, 192, 236, 308, 369, 410], "access": [62, 63, 65, 172, 175, 378, 383, 440, 443], "valid_reshape_input": [62, 63], "reshape_in0_ndef": [62, 63], "reshape_in1_ndef": [62, 63], "ar": [62, 63, 100, 149, 166, 167, 174, 175, 190, 207, 234, 249, 260, 264, 271, 287, 288, 289, 293, 295, 296, 313, 317, 352, 354, 355, 369, 370, 375, 382, 383, 387, 388, 389, 390, 392, 393, 409, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 431, 433, 436, 439, 445, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 462], "bypass_reshap": [62, 63], "input_node_map": [62, 63], "input_nam": [62, 63, 97, 135, 175, 253, 254, 416], "get_const_dim_count": [62, 63], "dimens": [62, 63, 100, 182, 207, 226, 249, 410, 412, 459], "instancenorm": [63, 457], "fusedecomposedinoptim": 63, "gelu": 64, "fusegeluoptim": 64, "sqrt": 64, "erf": 64, "samll": 65, "layernorm": [65, 457], "fuselayernormoptim": 65, "remap": 65, "smaller": [65, 207, 249, 412, 425, 450, 459], "case": [65, 69, 155, 175, 189, 206, 207, 208, 233, 248, 249, 255, 279, 284, 292, 328, 409, 412, 413, 414, 418, 420, 424, 429, 433, 445, 446, 447, 450, 451, 453, 455, 459, 461, 462, 463], "fusedbatcnormv3": 65, "And": [65, 389, 408, 425, 431, 457], "further": [65, 175, 387, 426, 427, 428, 430, 439, 445, 453], "restrict": [65, 174, 175, 450, 456], "2d": [65, 457], "3d": [65, 451, 457], "kera": [65, 111, 175, 192, 199, 214, 236, 243, 321, 326, 414, 427, 435, 436, 463], "fusepadwithconv2doptim": 66, "excluded_op_nam": [66, 67, 171, 174, 175, 425, 450], "cfg": [66, 67, 149, 171, 306, 367, 375], "itex_qdq_mod": [66, 67], "conv3d": [66, 120], "fusepadwithfp32conv2doptim": 67, "fusetransposereshapeoptim": 68, "cse": [69, 93], "graphcseoptim": 69, "introduc": [69, 388, 393, 418, 425, 453, 455, 457, 461], "ident": [69, 75, 165, 387, 412], "three": [69, 170, 190, 234, 295, 352, 354, 389, 393, 409, 422, 426, 439, 448, 453, 454, 456, 457, 458], "d": [69, 149, 412, 420, 446, 463], "those": [69, 299, 360, 383, 412, 413, 420, 425, 448, 450, 453, 460], "child": [69, 458], "b1": 69, "c1c2": 69, "d1": [69, 383], "c1": 69, "c2": 69, "memori": [69, 255, 279, 284, 292, 328, 383, 409, 413, 425, 426, 428, 447, 450, 453, 457, 460], "bound": [69, 155, 207, 249, 260, 296, 313, 355, 424, 459], "like": [69, 91, 93, 141, 164, 170, 175, 178, 179, 180, 192, 222, 223, 224, 236, 255, 264, 289, 292, 293, 317, 326, 351, 372, 388, 389, 390, 393, 412, 413, 421, 433, 448, 450, 453, 455, 457, 460], "relu": [69, 73, 104, 389, 418, 457, 458], "relu6": [69, 418], "updat": [69, 149, 160, 166, 170, 289, 317, 351, 380, 417, 424, 425, 431, 436, 439, 449, 450, 457, 460, 461], "graphdef": [69, 141, 326, 350, 427], "grappler": [70, 418], "grappleroptim": 70, "input_output_nam": 70, "opt_cfg": 70, "wrapper": [70, 97, 98, 99, 100, 117, 142, 157, 189, 207, 209, 210, 212, 213, 219, 233, 249, 260, 264, 313, 317, 322, 326, 454], "leverag": [70, 390, 392, 412, 416, 428, 445, 448, 453, 460], "built": [70, 176, 177, 181, 186, 190, 191, 196, 198, 200, 201, 203, 204, 207, 212, 214, 220, 221, 225, 228, 230, 234, 235, 240, 242, 244, 245, 246, 247, 249, 293, 317, 320, 328, 351, 372, 390, 393, 410, 414, 425, 438, 442, 447, 453, 459, 460, 462], "convert_add_to_biasadd": [71, 82, 106], "convert_layout": [71, 82, 106], "convert_leakyrelu": [71, 82, 106], "convert_nan_to_random": [71, 82, 106], "convert_placeholder_to_const": [71, 82, 106], "dequantize_cast_optim": [71, 82, 106], "dilated_contract": [71, 82, 106], "dummy_biasadd": [71, 82, 106], "expanddims_optim": [71, 82, 106], "fetch_weight_from_reshap": [71, 82, 106], "fold_batch_norm": [71, 82, 106], "fold_const": [71, 82, 106], "fuse_biasadd_add": [71, 82, 106], "fuse_column_wise_mul": [71, 82, 106], "fuse_conv_with_math": [71, 82, 106], "fuse_decomposed_bn": [71, 82, 106], "fuse_decomposed_in": [71, 82, 106], "fuse_gelu": [71, 82, 106], "fuse_layer_norm": [71, 82, 106], "fuse_pad_with_conv": [71, 82, 106], "fuse_pad_with_fp32_conv": [71, 82, 106], "fuse_reshape_transpos": [71, 82, 106], "graph_cse_optim": [71, 82, 106], "grappler_pass": [71, 82, 106], "insert_print_nod": [71, 82, 106], "move_squeeze_after_relu": [71, 82, 106], "pre_optim": [71, 82, 106], "remove_training_nod": [71, 82, 106], "rename_batch_norm": [71, 82, 106], "split_shared_input": [71, 82, 106], "strip_equivalent_nod": [71, 82, 106, 141], "strip_unused_nod": [71, 82, 106, 141], "switch_optim": [71, 82, 106], "print": [72, 143, 164, 264, 317, 370, 383, 414, 424, 425, 450, 457, 460], "insertprintminmaxnod": 72, "pre_node_nam": 72, "post_node_nam": 72, "pass": [72, 141, 155, 317, 351, 383, 389, 393, 408, 410, 412, 413, 414, 420, 424, 425, 446, 450, 452, 453, 454, 457, 462], "sampl": [72, 174, 175, 183, 188, 190, 191, 192, 203, 207, 227, 232, 234, 235, 236, 246, 249, 264, 271, 296, 317, 355, 390, 392, 410, 415, 421, 446, 453, 459, 460, 462, 463], "move": [73, 389, 452, 455], "squeez": [73, 389], "movesqueezeafterreluoptim": 73, "match": [73, 97, 164, 260, 261, 313, 314, 412, 446], "pre": [74, 111, 164, 178, 179, 190, 222, 223, 234, 318, 351, 372, 410, 412, 413, 425, 426, 433, 450, 451, 453, 458, 460], "entranc": [74, 181], "preoptim": 74, "removetrainingnodesoptim": 75, "protected_nod": 75, "types_to_splic": 75, "checknumer": 75, "stopgradi": 75, "renam": [76, 455], "fusedbatchnorm": 76, "fusedbatchnormv2": 76, "renamebatchnormoptim": 76, "splitsharedinputoptim": 77, "equival": [78, 457], "stripequivalentnodesoptim": 78, "output_node_nam": [78, 79, 126, 127, 131, 141], "unus": [79, 141], "stripunusednodesoptim": 79, "input_node_nam": [79, 126, 131, 141], "switch": [80, 428, 458], "switchoptim": 80, "condit": [80, 190, 191, 192, 207, 234, 235, 236, 249, 295, 352, 354, 410, 423, 459, 460], "graphrewriterbas": 81, "abstract": [81, 156, 207, 249, 250, 255, 292, 393, 420], "freeze_fake_qu": [82, 90, 106], "freeze_valu": [82, 90, 106], "freeze_value_without_calib": [82, 90, 106], "fuse_conv_redundant_dequant": [82, 90, 106], "fuse_conv_requant": [82, 90, 106], "fuse_matmul_redundant_dequant": [82, 90, 106], "fuse_matmul_requant": [82, 90, 106], "meta_op_optim": [82, 90, 106], "post_hostconst_convert": [82, 90, 106], "post_quantized_op_cs": [82, 90, 106], "rnn_convert": [82, 90, 106], "scale_propag": [82, 90, 106], "onnx_graph": [82, 96, 106], "onnx_schema": [82, 96, 106], "tf2onnx_util": [82, 96, 106], "insert_qdq_pattern": [82, 101, 106], "merge_duplicated_qdq": [82, 101, 106], "share_qdq_y_pattern": [82, 101, 106], "freez": [83, 84, 85, 428, 450], "fakequ": 83, "freezefakequantopoptim": 83, "follow": [83, 105, 165, 192, 236, 257, 260, 310, 313, 387, 388, 389, 390, 393, 409, 410, 412, 413, 414, 416, 418, 422, 423, 424, 425, 426, 427, 428, 429, 430, 438, 442, 448, 450, 452, 453, 457, 458, 460], "freezevaluetransform": 84, "max_min_data": [84, 85], "postfix": [84, 85], "tensor_data": [84, 383, 384], "th": [84, 85], "gpu": [84, 85, 92, 174, 175, 392, 408, 421, 425, 426, 430, 436, 445, 452, 453], "freezevaluewithoutcalibtransform": 85, "95": [85, 264, 317, 424, 457, 463], "quantizedconv": [86, 87], "quantizeddeconv": 86, "redund": [86, 88], "fuseconvredundantdequantizetransform": 86, "cpu": [86, 87, 88, 89, 174, 175, 383, 392, 408, 421, 425, 426, 428, 430, 436, 445, 449, 451, 452, 453, 454, 458], "_quantizedconv": 86, "_quantizeddeconv": 86, "successor": [86, 87, 88, 89], "requant": [87, 89, 458], "fuseconvrequantizetransform": 87, "quantizedmatmul": [88, 89], "fusematmulredundantdequantizetransform": 88, "_quantizedmatmul": [88, 89], "fusematmulrequantizedequantizetransform": 89, "quantizedmatmulwithbiasanddequant": 89, "fusematmulrequantizetransform": 89, "fusematmulrequantizedequantizenewapitransform": 89, "fusematmulrequantizenewapitransform": 89, "newapi": 89, "meta": [91, 451], "metainfochangingmemopoptim": 91, "metaop": 91, "With": [91, 328, 389, 392, 393, 409, 425, 433, 438, 442, 446, 447, 450, 451, 456, 457, 460, 463], "chang": [91, 136, 147, 154, 167, 169, 174, 175, 289, 291, 358, 383, 388, 409, 414, 417, 423, 424, 425, 428, 438, 439, 442, 445, 450, 458, 459, 460], "better": [91, 174, 175, 178, 179, 222, 223, 271, 318, 351, 372, 413, 424, 426, 450, 451, 453, 456, 460], "perform": [91, 155, 168, 174, 175, 190, 202, 203, 208, 234, 246, 255, 279, 284, 292, 299, 317, 328, 351, 356, 360, 389, 390, 393, 408, 409, 410, 411, 413, 415, 416, 421, 422, 424, 425, 426, 427, 428, 430, 434, 436, 439, 445, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 460, 462, 463], "post": [92, 93, 147, 153, 167, 175, 178, 179, 222, 223, 351, 387, 392, 393, 413, 414, 416, 421, 422, 428, 434, 445, 450, 451, 457, 458, 460], "hostconst": 92, "posthostconstconvert": 92, "just": [92, 180, 205, 207, 210, 212, 213, 215, 224, 249, 328, 390, 425, 435, 439, 445, 448, 453, 457, 459, 460], "postcseoptim": 93, "duplic": [93, 103, 296, 355], "quantizev2": 93, "decreas": [93, 450], "size": [93, 166, 182, 183, 189, 192, 198, 203, 207, 226, 227, 233, 236, 242, 246, 249, 287, 328, 383, 387, 409, 410, 414, 417, 425, 445, 446, 447, 450, 457, 459, 462, 463], "rnn": 94, "quantizedrnnconvert": 94, "calibration_data": [94, 102], "rnn_detail": 94, "scalepropagationtransform": 95, "direct": [95, 166, 287, 450], "export": [96, 175, 256, 260, 309, 313, 392, 419, 431, 446, 458, 461], "onnxgraph": 97, "output_shap": 97, "opset": [97, 99, 100, 175, 253, 254, 416], "extra_opset": 97, "output_nam": [97, 135, 175, 253, 254, 416], "is_subgraph": 97, "graph_nam": 97, "manipul": [97, 98], "onnxnod": 98, "skip_convers": 98, "schema": 99, "onnxopschema": 99, "domain": [99, 100, 174, 175, 450, 460], "since_vers": 99, "get_schema": 99, "max_inclusive_opset_vers": 99, "within": [99, 167, 255, 260, 292, 313, 326, 345, 350, 387, 389, 426, 438, 442, 445, 451, 457], "get_max_supported_opset_vers": 99, "packag": [99, 393, 417, 422, 445, 446, 451, 455, 460], "set_nam": 100, "find_opset": 100, "assert_error": 100, "bool_val": 100, "error_msg": 100, "error": [100, 143, 264, 299, 317, 360, 379, 424, 429, 457, 460], "messag": [100, 139, 460], "map_numpy_to_onnx_dtyp": 100, "np_dtype": 100, "map_onnx_to_numpy_typ": 100, "onnx_typ": 100, "add_port_to_nam": 100, "nr": 100, "get_tensorflow_node_attr": 100, "pars": [100, 149, 190, 191, 203, 207, 234, 235, 246, 249, 334, 335, 339, 459], "get_tensorflow_tensor_shap": 100, "get_tensorflow_node_shape_attr": 100, "attr": [100, 141, 164], "map_tensorflow_dtyp": 100, "get_tensorflow_tensor_data": 100, "convert_tensorflow_tensor_to_onnx": 100, "read_tensorflow_node_attr": 100, "read": [100, 141, 195, 207, 239, 249, 288, 410, 454, 456], "infer_onnx_shape_dtyp": 100, "opset_vers": [100, 135, 175, 253, 254, 416], "input_shap": [100, 194, 238, 409, 410], "input_dtyp": 100, "sometim": [100, 389, 453], "so": [100, 207, 249, 369, 389, 393, 417, 421, 424, 431, 433, 453, 454, 457, 458, 459, 461], "make_onnx_shap": 100, "seqtyp": 100, "tensor_dtyp": 100, "around": 100, "signifi": 100, "make_onnx_inputs_output": 100, "elem_typ": 100, "text": [100, 206, 207, 248, 249, 257, 262, 290, 310, 315, 416, 423, 434, 450, 451, 457, 459, 463], "datatyp": [100, 149, 454, 460], "save_protobuf": 100, "path": [100, 141, 149, 164, 170, 171, 190, 191, 192, 207, 234, 235, 236, 249, 250, 253, 254, 255, 266, 267, 268, 270, 279, 284, 288, 290, 292, 293, 306, 318, 326, 350, 351, 367, 380, 383, 389, 390, 393, 409, 410, 414, 420, 424, 425, 426, 427, 431, 434, 445, 448, 459, 462], "as_text": 100, "protobuf": 100, "is_onnx_domain": 100, "is_list_or_tupl": 100, "are_shapes_equ": 100, "src": [100, 446], "dest": 100, "equal": [100, 136, 141, 154, 370, 383, 424, 450], "get_subgraphs_from_onnx": 100, "model_proto": 100, "over": [100, 192, 236, 264, 317, 415, 419, 421, 424, 436, 445, 452, 457, 460], "df": 100, "initialize_name_count": 100, "avoid": [100, 190, 234, 389, 458], "conflict": [100, 417], "counter": 100, "make_nam": 100, "get_index_from_strided_slice_of_shap": 100, "outputs_to_valu": 100, "stride": [100, 207, 249, 459], "slice": 100, "compute_const_folding_using_tf": 100, "g": [100, 166, 174, 175, 412, 415, 419, 428, 433, 450, 455, 457, 460], "const_node_valu": 100, "graph_output": 100, "constant": [100, 254, 256, 296, 298, 304, 309, 355, 359, 365, 376, 409, 418, 459], "tf": [100, 111, 141, 189, 190, 191, 192, 207, 233, 234, 235, 236, 249, 324, 326, 414, 427, 451, 454, 459], "generategraphwithqdqpattern": 102, "op_wise_config": [102, 126, 131], "quantized_nod": 102, "dq": [102, 104, 126, 457], "pair": [102, 174, 175, 409, 425, 426], "merg": [103, 182, 226, 306, 367, 440, 443, 458, 460], "mergeduplicatedqdqoptim": 103, "y": [104, 174, 175, 207, 249, 296, 355, 417, 431, 457, 459], "shareqdqforitexypatternoptim": 104, "enabl": [104, 143, 167, 174, 175, 289, 414, 422, 426, 428, 430, 433, 434, 436, 449, 450, 451, 460], "break": [104, 414, 425], "graphanalyz": 105, "extend_engin": 105, "analyz": [105, 164, 326, 456, 457, 458], "under": [105, 174, 175, 192, 236, 382, 390, 410, 423, 424, 425, 428, 433, 434, 445, 448, 450, 457, 458, 460], "singleton": [105, 383], "specifi": [105, 149, 155, 174, 175, 178, 179, 207, 208, 222, 223, 249, 255, 260, 264, 267, 270, 279, 284, 292, 293, 313, 317, 318, 351, 370, 372, 382, 383, 414, 418, 424, 425, 433, 447, 452, 459, 460, 462], "graphrewriterhelp": 105, "encapsul": [105, 178, 179, 222, 223, 318, 351, 372, 427], "quantize_lay": [106, 107, 109], "fake_quant": [106, 107, 109], "quantize_config": [106, 107, 109], "quantize_help": [106, 107, 109], "quantize_wrapp": [106, 107, 109], "fuse_qdq_bn": [106, 107, 125], "fuse_qdq_concatv2": [106, 107, 125], "fuse_qdq_conv": [106, 107, 125], "fuse_qdq_deconv": [106, 107, 125], "fuse_qdq_in": [106, 107, 125], "fuse_qdq_matmul": [106, 107, 125], "fuse_qdq_pool": [106, 107, 125], "optimize_qdq": [106, 107, 125], "optimize_lay": [107, 109, 112], "quantize_layer_add": [107, 109, 112], "quantize_layer_bas": [107, 109, 112], "quantize_layer_bn": [107, 109, 112], "fake": [108, 147, 153, 369, 425, 453, 457], "fakequantizebas": 108, "abc": [108, 262, 315, 393, 458, 460], "appli": [108, 121, 122, 123, 126, 128, 132, 156, 167, 217, 258, 311, 387, 425, 428, 430, 436, 445, 448, 450, 453, 454, 456, 457, 460, 461, 462], "fakequant": 108, "per_channel": [108, 418, 453, 462], "num_bit": [108, 149, 457], "8": [108, 174, 175, 206, 248, 389, 418, 422, 450, 451, 457, 460, 463], "channel_axi": [108, 151, 154], "symmetr": [108, 453, 459, 460], "narrow_rang": 108, "quantizeconfig": [110, 111], "custom": [110, 155, 293, 317, 328, 382, 408, 412, 413, 428, 450, 456], "There": [110, 293, 295, 352, 354, 412, 418, 421, 424, 425, 426, 428, 457, 460, 462], "instanc": [110, 111, 155, 174, 175, 178, 179, 208, 222, 223, 261, 262, 264, 267, 270, 273, 274, 276, 277, 278, 296, 308, 314, 315, 317, 318, 351, 355, 369, 372, 383, 387, 389, 393, 408, 425, 430, 436, 462, 463], "global": [110, 166, 174, 175, 273, 274, 276, 277, 278, 287, 383, 389, 425, 450, 452, 460], "class": [111, 145, 149, 271, 318, 351, 389, 390, 409, 410, 412, 424, 425, 436, 447, 448, 453, 455, 458, 460, 462], "init_quantize_config": 111, "quantize_recip": 111, "begin": [111, 167, 289, 412, 413, 425, 450, 460], "process": [111, 143, 155, 166, 167, 169, 170, 174, 175, 178, 179, 190, 191, 192, 203, 207, 208, 222, 223, 234, 235, 236, 246, 249, 287, 289, 291, 295, 296, 318, 351, 352, 354, 355, 372, 382, 383, 390, 393, 409, 410, 412, 413, 414, 416, 425, 429, 448, 450, 453, 457, 458, 459, 462], "model_nam": [111, 174, 175], "special": [111, 164, 328, 389, 409, 424, 425, 447, 450, 461], "decid": [111, 174, 175, 258, 289, 311, 393, 425, 453, 455, 460], "qat_clone_funct": 111, "leav": [111, 439], "quantizewrapp": [111, 117], "wrapped_lay": 111, "config_quantizable_lay": 113, "quantizelayeradd": 114, "quantizelay": 115, "quantizelayerbas": 115, "quantizelayerbatchnorm": 116, "quantizewrapperbas": 117, "fusedbatchnormv3": [118, 128], "fusenodestartwithfusedbatchnormv3": [118, 128], "_quantizedfusedbatchnorm": 118, "concatv2": [119, 129, 140, 418], "fusenodestartwithconcatv2": [119, 129], "quantizedconcatv2": [119, 129], "fusenodestartwithconv2d": [120, 130], "conv2dbackpropinput": 121, "conv3dbackpropinputv2": 121, "fusenodestartwithdeconv2d": 121, "fusedinstancenorm": 122, "fusenodestartwithfusedinstancenorm": 122, "batchmatmul": 123, "batchmatmulv2": 123, "fusenodestartwithmatmul": [123, 132], "avgpool": [124, 133, 418], "fusenodestartwithpool": [124, 133], "optimizeqdqgraph": 126, "input_graph": [126, 131, 136, 346, 350, 393], "op_wise_sequ": [126, 131], "quantizegraph": 127, "quantizegraphbas": 127, "quantizenodebas": 127, "quantizegraphforintel": 131, "common": [134, 175, 205, 256, 266, 270, 271, 272, 309, 375, 387, 410, 413, 414, 416, 420, 422, 425, 453, 457], "herlper": 134, "quantizegraphhelp": 134, "sever": [134, 169, 207, 249, 291, 390, 412, 413, 421, 425, 426, 438, 442, 450, 452, 457, 459, 460, 462], "staticmethod": 134, "function": [134, 174, 175, 178, 179, 191, 222, 223, 235, 267, 270, 279, 284, 389, 390, 393, 408, 409, 412, 413, 416, 420, 421, 422, 424, 425, 426, 436, 446, 450, 453, 456, 457, 458, 460, 461], "tensorflowqdqtoonnxqdqconvert": 135, "shape_overrid": 135, "inputs_as_nchw": [135, 253], "default_opset_vers": 135, "bia": [136, 174, 175, 458], "correct": [136, 154, 170, 174, 175, 260, 261, 262, 264, 288, 313, 314, 315, 317, 387, 428], "biascorrect": 136, "fp32_graph": 136, "method": [136, 149, 168, 174, 175, 183, 188, 189, 190, 192, 199, 207, 210, 227, 232, 233, 234, 236, 243, 249, 270, 271, 272, 306, 367, 369, 375, 376, 378, 379, 389, 390, 392, 410, 412, 413, 424, 425, 448, 450, 453, 454, 457, 459, 460], "weight_empir": 136, "Will": [136, 412, 421], "our": [136, 149, 174, 175, 390, 392, 416, 425, 446, 456, 461], "task": [136, 190, 197, 234, 241, 264, 317, 410, 412, 413, 416, 421, 424, 425, 450, 457], "close": [136, 154], "w_int8": [136, 154], "u": [136, 154, 392, 428], "w_fp32": [136, 154], "varianc": [136, 154], "ratio": [136, 154, 166, 167, 170, 174, 175, 203, 207, 246, 249, 289, 410, 425, 450, 459, 463], "differ": [136, 150, 154, 157, 165, 174, 175, 183, 192, 207, 209, 227, 236, 249, 255, 264, 270, 272, 281, 292, 317, 328, 377, 387, 389, 390, 409, 410, 412, 414, 415, 420, 421, 424, 425, 427, 438, 442, 447, 450, 453, 457, 458, 459, 460], "wise": [136, 154, 174, 175, 296, 299, 355, 356, 360, 421, 450, 458, 460, 462], "minim": [136, 154, 296, 355, 412, 415, 424, 425, 438, 442, 450, 453, 460], "round": [136, 154, 453, 457], "scale_c": [136, 154], "shift": [136, 154, 203, 246, 446, 459], "notic": [136, 154, 208, 423, 455], "can": [136, 143, 147, 154, 164, 165, 166, 167, 169, 174, 175, 178, 179, 189, 192, 207, 208, 210, 222, 223, 233, 236, 249, 260, 262, 264, 287, 289, 291, 313, 315, 317, 318, 328, 351, 372, 383, 389, 390, 392, 393, 408, 409, 410, 412, 413, 414, 416, 418, 421, 422, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 436, 438, 439, 440, 442, 443, 445, 446, 447, 448, 449, 450, 452, 453, 454, 456, 457, 458, 459, 460, 462, 463], "first": [136, 154, 165, 172, 174, 175, 190, 234, 260, 306, 313, 356, 367, 383, 389, 390, 393, 410, 422, 426, 430, 439, 440, 443, 446, 452, 453, 454, 456, 457, 458, 460, 462], "empir": [136, 154], "solut": [136, 154, 392, 393, 417, 430, 434, 439, 451, 457, 460], "don": [136, 154, 166, 174, 175, 389, 450, 460], "min": [136, 154, 383, 450, 453, 457, 459, 460], "graphtransform": 137, "graphtransformbas": 137, "input_pb": [137, 139, 140], "log": [139, 155, 164, 334, 335, 339, 379, 389, 436, 456, 458, 460], "insertlog": 139, "node_name_list": 139, "show_nam": 139, "show_op": 139, "first_n": 139, "summar": [139, 412], "1024": [139, 192, 236, 431], "dump_fp32": 139, "rerang": 140, "rerangequantizedconcat": 140, "rerange_quant": 140, "version1_lt_version2": [141, 383], "version1": [141, 383], "version2": [141, 383], "version1_gt_version2": [141, 383], "greater": [141, 383, 450, 460], "version1_eq_version2": [141, 383], "version1_gte_version2": [141, 383], "version1_lte_version2": [141, 383], "disable_random": 141, "seed": [141, 174, 175, 272, 383, 425, 462], "disabl": [141, 174, 175, 387, 445, 454], "read_graph": 141, "in_graph": 141, "in_graph_is_binari": 141, "write_graph": 141, "out_graph_def": 141, "out_graph_fil": 141, "write": [141, 199, 243, 383, 414, 420, 425, 428, 458], "is_ckpt_format": 141, "model_path": 141, "ckpt": [141, 318, 326, 351, 463], "folder": [141, 192, 197, 236, 241, 318, 351, 382, 410, 433, 438, 442, 458], "is_saved_model_format": 141, "saved_model": [141, 266], "get_estimator_graph": 141, "estim": [141, 264, 317, 326, 460], "input_fn": [141, 326], "get_tensor_by_nam": 141, "try_cnt": 141, "3": [141, 167, 175, 192, 207, 236, 249, 260, 313, 370, 389, 390, 392, 409, 410, 412, 414, 416, 418, 419, 422, 424, 425, 426, 428, 432, 436, 438, 442, 447, 452, 453, 456, 457, 459, 460, 463], "consid": [141, 264, 317, 387, 412, 446, 460], "import": [141, 155, 174, 175, 266, 318, 328, 351, 370, 372, 383, 389, 390, 392, 408, 409, 410, 412, 413, 414, 416, 419, 424, 425, 426, 427, 428, 432, 434, 447, 448, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460], "scope": [141, 425], "more": [141, 147, 153, 166, 207, 249, 287, 390, 391, 392, 410, 412, 414, 416, 419, 421, 422, 424, 425, 426, 428, 436, 440, 443, 447, 448, 450, 454, 457, 460, 461, 463], "onc": [141, 169, 214, 291, 295, 352, 354, 409, 445, 450, 451, 460, 463], "both": [141, 175, 387, 390, 393, 413, 425, 429, 450, 452, 453, 457, 460], "compat": [141, 326, 414, 427, 440, 443, 445, 455], "v1": [141, 202, 203, 246, 261, 262, 264, 314, 315, 317, 326, 414, 416, 417, 424, 427, 450, 455, 456, 463], "suffix": 141, "time": [141, 174, 175, 207, 249, 264, 296, 317, 328, 355, 383, 414, 417, 425, 433, 435, 438, 442, 445, 446, 447, 450, 451, 453, 456, 458, 459, 460], "got": [141, 417, 458], "iterator_sess_run": 141, "sess": [141, 326], "iter_op": 141, "feed_dict": [141, 189, 233], "output_tensor": [141, 326], "measur": [141, 208, 318, 377, 390, 393, 408, 412, 424, 425, 458, 460], "integr": [141, 157, 209, 393, 425, 446], "session": [141, 189, 233, 326, 425, 458], "makeiter": 141, "feed": [141, 189, 233, 412, 450], "end": [141, 167, 174, 175, 190, 206, 207, 234, 248, 249, 289, 295, 352, 354, 393, 412, 413, 418, 422, 425, 439, 447, 450, 458, 459, 460], "predict": [141, 207, 212, 249, 257, 261, 262, 264, 310, 314, 315, 317, 351, 390, 412, 424, 436, 457, 458, 459], "pred": [141, 264, 317, 424], "collate_tf_pr": 141, "collat": [141, 149], "tbe": 141, "get_input_output_node_nam": 141, "fix_ref_type_of_graph_def": 141, "fix": [141, 167, 190, 234, 289, 388, 410, 432, 450, 457, 460], "strip_unused_lib": 141, "offici": [141, 257, 261, 262, 310, 314, 315, 387, 424, 457], "r1": 141, "15": [141, 418, 463], "branch": 141, "get_graph_def": 141, "auto_input_output": 141, "get_model_input_shap": 141, "inout": 141, "get_tensor_val_from_graph_nod": 141, "graph_node_name_map": 141, "val": [141, 170, 192, 195, 236, 239, 288, 425], "tensor_v": 141, "int8_node_name_revers": 141, "revers": 141, "tf_diagnosis_help": 141, "fp32_model": [141, 143, 149, 383, 393], "quan_model": 141, "save_path": [141, 253, 254, 393, 427], "diagnosi": [141, 174, 175, 425], "generate_feed_dict": 141, "input_tensor": [141, 326], "torch": [142, 143, 144, 145, 146, 147, 148, 149, 153, 164, 165, 166, 171, 174, 175, 219, 254, 318, 351, 382, 389, 392, 394, 412, 414, 416, 425, 426, 427, 428, 433, 436, 453, 457, 458], "bf16modulewrapp": 142, "bf16modul": 142, "mix": [142, 174, 175, 294, 306, 318, 353, 367, 392, 393, 398, 421, 428, 434, 435, 436, 461], "precis": [142, 174, 175, 178, 179, 222, 223, 255, 262, 264, 265, 292, 294, 306, 315, 317, 318, 328, 353, 356, 367, 392, 393, 398, 408, 413, 414, 418, 421, 428, 434, 435, 436, 451, 452, 453, 457, 460, 461], "mixed_precision_model": 142, "bf16_symbolic_trac": 142, "fx_sub_module_list": 142, "trace": [142, 143, 148, 149, 164, 174, 175, 254, 358, 389, 435, 460], "_description_": 142, "hessian": [143, 358, 460], "awar": [143, 156, 175, 217, 266, 287, 358, 372, 393, 413, 414, 416, 421, 426, 445, 448, 460], "node_collector": 143, "hook": [143, 156, 216, 217, 279, 284, 375, 412, 413, 425, 450, 457, 458], "record": [143, 149, 157, 190, 191, 192, 198, 209, 216, 234, 235, 236, 242, 383, 410, 456, 458, 460], "hessiantrac": 143, "q_model": [143, 175, 266, 351, 389, 392, 409, 410, 414, 416, 419, 420, 424, 425, 427, 453, 454], "criterion": [143, 156, 158, 159, 160, 166, 167, 174, 175, 211, 214, 256, 309, 412, 413, 425, 450, 453, 460, 462], "pleas": [143, 147, 153, 160, 166, 167, 174, 175, 190, 191, 192, 195, 234, 235, 236, 239, 287, 289, 290, 317, 351, 370, 389, 390, 391, 392, 393, 408, 410, 413, 414, 416, 422, 424, 426, 428, 429, 433, 436, 450, 453, 454, 455, 456, 457, 461], "refer": [143, 147, 153, 160, 166, 167, 170, 174, 175, 190, 234, 257, 258, 264, 287, 289, 290, 310, 311, 317, 351, 370, 389, 393, 408, 409, 410, 413, 414, 416, 420, 422, 423, 424, 425, 426, 428, 433, 436, 447, 452, 455, 459, 460], "yao": 143, "zhewei": 143, "et": [143, 457], "al": [143, 457], "pyhessian": 143, "network": [143, 160, 166, 289, 358, 390, 412, 413, 416, 425, 449, 451, 453, 457, 460], "through": [143, 178, 179, 222, 223, 317, 318, 351, 392, 408, 418, 420, 421, 424, 431, 447, 448, 450, 452, 453, 457], "len": [143, 175, 207, 249, 410, 414, 459], "2020": 143, "ieee": [143, 426, 457], "intern": [143, 306, 367, 409, 410, 450], "confer": [143, 450, 457], "big": 143, "dong": 143, "zhen": 143, "hawq": [143, 358, 460], "v2": [143, 358, 414, 416, 417, 422, 434, 455, 460, 463], "advanc": [143, 174, 175, 387, 392, 398, 453, 462], "system": [143, 155, 208, 383, 408, 431], "33": [143, 463], "18518": 143, "18529": 143, "openvinotoolkit": 143, "nncf": 143, "develop": [143, 328, 388, 389, 422, 425, 426, 428, 434, 445, 450, 451, 454, 456], "hessian_trac": 143, "compare_weight": 143, "float_dict": 143, "ani": [143, 260, 262, 305, 313, 315, 345, 350, 366, 370, 380, 383, 387, 388, 392, 409, 414, 428, 433, 446, 450, 456], "quantized_dict": 143, "compar": [143, 264, 317, 383, 413, 424, 450, 453, 456, 458, 460], "being": [143, 260, 313], "two": [143, 155, 165, 166, 167, 169, 192, 197, 208, 236, 241, 260, 287, 291, 293, 300, 313, 361, 383, 389, 390, 410, 412, 414, 416, 418, 424, 425, 426, 453, 454, 456, 460, 462], "wt_compare_dict": 143, "float_model": 143, "state_dict": [143, 414, 458], "qmodel": 143, "compute_error": 143, "state": [143, 165, 431, 450], "weight_dict": 143, "hawq_top": 143, "enable_act": 143, "modul": [144, 145, 269, 275, 285, 286, 389, 409, 412, 421, 424, 425, 427, 450, 452, 454, 458, 461], "nn": [145, 147, 149, 164, 165, 174, 175, 219, 254, 318, 351, 382, 389, 412, 425, 427, 457, 458], "detector": 146, "transformerbasedmodelblockpatterndetector": 146, "pattern_lst": 146, "block_pattern": 146, "detect": [146, 149, 164, 174, 175, 260, 264, 313, 317, 322, 389, 428, 435, 436, 450], "ffn": 146, "get_modul": 147, "set_modul": [147, 149], "new_modul": [147, 149], "torchsmoothqu": [147, 457], "example_input": [147, 149, 174, 175, 254, 416], "q_func": [147, 178, 179, 222, 223, 296, 297, 299, 300, 301, 302, 352, 355, 356, 357, 358, 360, 361, 362, 363, 393, 425, 460], "traced_model": [147, 148], "detail": [147, 153, 164, 207, 249, 383, 384, 387, 388, 392, 412, 418, 419, 420, 424, 425, 426, 428, 436, 445, 450, 455, 456, 458, 460, 461, 463], "smoothquant": [147, 149, 153, 392, 451, 461], "accur": [147, 153, 457], "effici": [147, 153, 390, 409, 412, 428, 448, 451, 457, 460], "larg": [147, 153, 392, 409, 412, 425, 450, 451, 457, 463], "languag": [147, 153, 257, 310, 387, 392, 416, 450, 451, 457], "spiq": [147, 153, 457], "free": [147, 153, 165, 167, 178, 179, 222, 223, 351, 387, 392, 424, 434, 439, 447, 456, 457], "could": [147, 153, 166, 178, 179, 192, 222, 223, 236, 293, 318, 351, 372, 387, 389, 413, 425, 448, 450, 453, 457, 461], "absorb": [147, 153], "later": [147, 153, 458], "inplac": 147, "mean": [147, 166, 174, 175, 203, 207, 246, 249, 262, 264, 287, 299, 315, 317, 360, 389, 409, 414, 418, 424, 425, 431, 450, 453, 457, 459, 460, 462], "you": [147, 174, 175, 188, 190, 232, 234, 289, 317, 351, 388, 389, 410, 414, 422, 423, 424, 428, 430, 431, 433, 438, 442, 445, 446, 450, 453, 455, 456, 457, 458, 461], "recov": [147, 383, 393, 413, 457], "graphtrac": 147, "trace_and_fuse_sub_graph": 148, "is_qat": 148, "get_embedding_contigu": 149, "embed": [149, 450], "contigu": 149, "is_fused_modul": 149, "_propagate_qconfig_help": 149, "collate_torch_pr": 149, "fetch": [149, 152, 183, 227, 410], "collate_result": 149, "input2tupl": 149, "append_attr": 149, "fx_model": 149, "fx_white_list": 149, "append": [149, 293, 296, 355, 389, 413, 425, 448], "graphmodul": [149, 389, 454], "addit": [149, 175, 372, 412, 439, 455], "dir": [149, 190, 234, 382, 410, 417, 420], "generate_activation_observ": 149, "observ": [149, 456, 458, 460], "what": [149, 167, 188, 232, 317, 351, 372, 387], "check_cfg_and_qconfig": 149, "op_infos_from_cfg": 149, "output_tensor_ids_op_nam": 149, "paser_cfg": 149, "ops_nam": 149, "get_quantizable_ops_from_cfg": 149, "input_tensor_ids_op_nam": 149, "update_sq_scal": 149, "ipex_config_path": 149, "smoothquant_scale_info": 149, "ipex_config": 149, "json": [149, 191, 207, 235, 249, 410, 427, 446, 459], "temporari": [149, 383, 387], "auto_copi": 149, "fetch_modul": 149, "op_nam": [149, 171, 174, 175, 307, 368, 383, 384, 425, 450, 458], "simple_infer": 149, "get_example_input": 149, "dataset": [149, 178, 179, 180, 182, 183, 186, 187, 188, 189, 201, 210, 222, 223, 224, 226, 227, 230, 231, 232, 233, 245, 256, 260, 261, 262, 264, 293, 309, 313, 314, 315, 317, 318, 351, 372, 375, 390, 392, 393, 409, 414, 419, 424, 425, 433, 450, 453, 455, 457, 460, 462, 463], "example_inp": 149, "get_fallback_ord": 149, "confidence_batch": [149, 460], "fallback": [149, 299, 300, 358, 360, 361, 416, 426, 454, 460], "requantize_cfg": 149, "fall": 149, "back": [149, 207, 213, 249, 445], "order": [149, 257, 258, 293, 296, 299, 308, 310, 311, 355, 360, 369, 389, 424, 452, 457, 458, 460], "confid": 149, "ordered_op": 149, "get_mse_order_per_fp32": 149, "mse": [149, 174, 175, 256, 264, 298, 309, 317, 351, 359, 383, 424, 452, 455], "influenc": [149, 450], "last": [149, 160, 170, 174, 175, 426, 428, 430, 435, 439, 453, 457], "fallback_ord": 149, "get_mse_order_per_int8": 149, "get_torch_vers": 149, "match_datatype_pattern": 149, "calculate_quant_min_max": 149, "unsign": [149, 308, 369], "qmin": 149, "qmax": 149, "get_depth": 149, "depth": [149, 412, 454], "get_dict_at_depth": 149, "target_depth": 149, "nest": [149, 172], "get_element_under_depth": 149, "ops_lst": 149, "get_op_type_by_nam": 149, "quantizable_op": 149, "algorithm_registri": 150, "algorithm_typ": 150, "locat": [150, 170, 207, 249, 414, 431, 438, 442, 445, 453, 455, 459, 462], "registr": [150, 192, 199, 207, 236, 243, 249, 282], "algorithmschedul": 150, "conf": [150, 155, 156, 175, 178, 179, 208, 222, 223, 266, 273, 274, 276, 277, 278, 279, 284, 296, 297, 299, 300, 301, 302, 306, 318, 328, 351, 352, 355, 356, 357, 358, 360, 361, 362, 363, 367, 370, 372, 389, 390, 392, 408, 412, 419, 420, 425, 426, 427, 448, 453, 454, 456, 457, 460], "control": [150, 174, 175, 389, 425, 450, 460], "phase": [150, 390, 425, 450, 453, 454, 460], "fastbiascorrect": [151, 154], "fast_bias_correct": [152, 174, 175, 309, 453], "smooth_quant": [152, 174, 175, 309, 453, 457], "weight_correct": [152, 174, 175, 309, 453], "5": [153, 157, 174, 175, 194, 203, 209, 238, 246, 264, 317, 351, 393, 410, 416, 418, 424, 425, 449, 450, 452, 453, 457, 459, 460, 462, 463], "For": [153, 164, 165, 166, 175, 192, 207, 236, 249, 261, 262, 264, 287, 290, 314, 315, 317, 318, 351, 387, 389, 391, 393, 412, 413, 414, 416, 418, 421, 428, 430, 431, 433, 436, 450, 454, 457, 458, 460, 462, 463], "kernel": [153, 174, 175, 393, 449, 460], "futur": [153, 178, 179, 210, 222, 223, 421, 425, 436, 461], "weightcorrect": 154, "1e": [154, 457, 462], "05": [154, 175, 264, 317, 424, 457, 463], "evalu": [155, 156, 166, 174, 178, 179, 190, 208, 222, 223, 234, 250, 257, 260, 261, 262, 264, 266, 310, 313, 314, 315, 317, 318, 328, 351, 372, 375, 390, 393, 409, 410, 412, 413, 420, 421, 424, 425, 426, 428, 434, 436, 439, 445, 447, 450, 453, 456, 458, 460, 462], "set_env_var": [155, 208], "env_var": [155, 208], "overwrite_exist": [155, 208], "env": [155, 208, 417], "alreadi": [155, 192, 206, 208, 236, 248, 393, 410, 421, 440, 443, 460], "param": [155, 180, 208, 214, 224, 264, 296, 317, 355, 383, 393, 427, 460], "set_all_env_var": [155, 208], "physic": [155, 208, 387, 408], "core": [155, 174, 175, 208, 408, 423, 438, 442, 449, 463], "get_architectur": [155, 208], "architectur": [155, 208, 267, 270, 392, 408, 412, 425, 450, 451, 461], "get_threads_per_cor": [155, 208], "thread": [155, 174, 175, 208, 345, 350, 409, 449], "get_thread": [155, 208], "get_physical_id": [155, 208], "socket": [155, 208, 383, 449, 463], "get_core_id": [155, 208], "id": [155, 206, 208, 248, 257, 259, 260, 261, 262, 310, 312, 313, 314, 315, 424, 456, 460], "get_bounded_thread": [155, 208], "core_id": [155, 208], "bind": [155, 208], "run_inst": 155, "b_dataload": [155, 174, 175, 408, 425], "b_func": [155, 408], "benchmarkconfig": [155, 174, 175, 408, 425], "accuraci": [155, 170, 174, 175, 178, 179, 222, 223, 250, 255, 264, 279, 284, 292, 317, 318, 328, 351, 356, 370, 372, 380, 389, 392, 409, 410, 413, 414, 415, 416, 424, 425, 426, 436, 445, 447, 448, 450, 451, 452, 455, 456, 457, 458, 462, 463], "goal": [155, 250, 255, 279, 284, 292, 318, 351, 409, 448, 453, 460], "prefer": [155, 255, 292, 351, 450], "space": [155, 167, 174, 175, 178, 179, 222, 223, 255, 262, 267, 270, 271, 272, 292, 296, 299, 306, 315, 318, 351, 355, 360, 367, 387, 388, 390, 393, 450, 453, 462], "etc": [155, 156, 206, 248, 250, 255, 262, 279, 284, 292, 315, 318, 351, 382, 412, 421, 450, 456, 460], "user": [155, 164, 167, 170, 174, 175, 178, 179, 192, 195, 199, 207, 208, 214, 219, 222, 223, 236, 239, 243, 249, 255, 279, 284, 290, 292, 293, 317, 318, 328, 351, 356, 372, 383, 389, 390, 393, 398, 408, 412, 413, 416, 418, 421, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 436, 439, 445, 447, 448, 450, 451, 453, 454, 455, 457, 458, 459, 460, 464], "generate_prefix": 155, "core_list": 155, "command": [155, 208, 372, 414, 428, 430, 433, 438, 442, 446], "numactl": [155, 417, 431, 439], "call_on": 155, "cmd": [155, 446], "log_fil": [155, 344, 349], "window": [155, 408, 445, 446], "config_inst": 155, "raw_cmd": 155, "multi": [155, 162, 164, 260, 313, 317, 351, 390, 409, 410, 421, 425, 447, 450, 453, 460], "trigger": [155, 167, 289, 388], "raw": [155, 191, 195, 198, 235, 239, 242, 299, 360, 424, 460], "summary_benchmark": 155, "summari": [155, 372, 440, 443, 449, 458], "profil": [155, 309], "benchmark_with_raw_cmd": 155, "commend": 155, "fit_with_raw_cmd": 155, "cores_per_inst": [155, 174, 175, 408, 425, 452], "num_of_inst": [155, 174, 175, 408, 425, 452], "7": [155, 174, 175, 328, 408, 417, 418, 422, 425, 450, 453, 455, 457, 460, 463], "test": [155, 165, 174, 175, 207, 249, 388, 392, 422, 463], "fit": [155, 166, 174, 175, 296, 318, 351, 355, 370, 372, 389, 392, 408, 409, 410, 414, 419, 420, 424, 425, 426, 427, 450, 453, 454], "pb": [155, 174, 175, 318, 326, 351, 392, 408, 414, 419, 425, 427, 458, 463], "eval_dataload": [155, 174, 175, 178, 179, 222, 223, 293, 296, 297, 299, 300, 301, 302, 318, 351, 352, 355, 356, 357, 358, 360, 361, 362, 363, 372, 392, 408, 419, 420, 425, 453, 460], "compon": [156, 250, 256, 293, 309, 389, 414, 422, 423, 428, 445, 448, 449], "quantizationawaretrainingcallback": 156, "pruningcallback": 156, "distillationcallback": 156, "basecallback": 156, "design": [156, 189, 212, 217, 233, 317, 356, 390, 392, 425, 433, 436, 450, 453, 461], "mainli": [156, 169, 217, 291, 425, 450, 453], "prune": [156, 160, 161, 162, 165, 166, 167, 168, 169, 170, 174, 175, 217, 218, 256, 273, 274, 276, 277, 278, 282, 284, 285, 287, 288, 289, 291, 293, 309, 383, 392, 414, 415, 418, 419, 421, 448, 451, 461, 462], "distil": [156, 159, 174, 175, 209, 216, 217, 256, 309, 392, 415, 419, 421, 448, 461, 462], "In": [156, 166, 167, 168, 175, 189, 217, 233, 260, 287, 289, 313, 328, 387, 389, 390, 392, 393, 409, 410, 412, 413, 414, 424, 425, 435, 438, 439, 442, 447, 448, 450, 453, 454, 456, 457, 458, 459, 460], "adaptor": [156, 174, 175, 308, 369, 375, 392, 421, 454, 455, 457, 458, 461], "deriv": [156, 160, 166, 167, 168, 169, 250, 287, 289, 291], "pipelin": [156, 250, 267, 268, 293, 413, 425, 448], "knowledg": [156, 157, 174, 175, 209, 250, 413, 415, 419, 421, 425, 427, 462], "transfer": [156, 197, 241, 250, 410, 412, 413, 425, 457], "teacher": [156, 174, 175, 250, 412, 413, 425, 463], "student": [156, 174, 175, 190, 216, 234, 250, 410, 412, 413, 463], "distillation_conf": [156, 171, 250], "_epoch_ran": [156, 250], "integ": [156, 166, 167, 174, 175, 250, 260, 264, 271, 287, 289, 313, 317, 370, 393, 453, 457, 460], "indic": [156, 174, 175, 183, 188, 190, 227, 232, 234, 250, 260, 271, 313, 389, 417, 458], "how": [156, 160, 166, 167, 174, 175, 207, 249, 250, 287, 388, 389, 391, 393, 409, 410, 412, 413, 414, 420, 425, 439, 440, 443, 444, 445, 450, 453, 457, 459, 460, 461, 462], "much": [156, 160, 174, 175, 207, 249, 250, 412, 439, 457, 459], "epoch": [156, 167, 250, 289, 372, 412, 413, 414, 425, 448, 450, 462], "ran": [156, 250], "eval_frequ": [156, 250], "frequenc": [156, 167, 174, 175, 250, 289, 425, 449, 450, 462], "term": [156, 167, 168, 250, 388, 412, 423, 424, 447, 448, 460], "best_scor": [156, 250], "best": [156, 207, 249, 250, 255, 292, 299, 360, 387, 390, 422, 428, 434, 445, 447, 453, 459, 460], "metric": [156, 174, 175, 178, 179, 211, 222, 223, 250, 255, 256, 271, 279, 284, 292, 293, 309, 318, 351, 372, 375, 390, 393, 409, 410, 414, 425, 426, 453, 456, 458, 460, 461, 462, 463], "best_model": [156, 250], "found": [156, 250, 392, 412, 426, 433, 457, 460, 463], "critet": [157, 209], "includ": [157, 160, 164, 166, 168, 174, 175, 190, 192, 199, 207, 209, 234, 236, 243, 249, 255, 265, 287, 292, 370, 383, 387, 388, 393, 410, 422, 423, 424, 425, 426, 428, 431, 434, 439, 450, 453, 454, 458, 460], "tensorflowknowledgedistillationloss": [157, 209], "pytorchknowledgedistillationloss": [157, 209, 425], "pytorchintermediatelayersknowledgedistillationloss": [157, 209], "tensorflowcriterion": [157, 209], "pytorchcriterion": [157, 209], "criterion_registri": [157, 209], "criterion_typ": [157, 209], "registry_criterion": [157, 209], "knowledgedistillationframework": [157, 209], "student_model": [157, 175, 209, 425], "teacher_model": [157, 174, 175, 209, 412, 413, 425], "knowledgedistillationloss": [157, 209, 425, 462], "temperatur": [157, 174, 175, 209, 425, 462], "loss_typ": [157, 174, 175, 209, 425, 462], "ce": [157, 174, 175, 209, 425, 462], "loss_weight": [157, 174, 175, 209, 425, 462], "pytorchknowledgedistillationlosswrapp": [157, 209], "param_dict": [157, 209, 214], "tensorflowknowledgedistillationlosswrapp": [157, 209], "tensorflowknowledgedistillationlossextern": [157, 209], "intermediatelayersknowledgedistillationloss": [157, 209], "layer_map": [157, 175, 209, 412], "add_origin_loss": [157, 175, 209], "pytorch": [157, 164, 166, 174, 175, 189, 190, 192, 195, 199, 207, 209, 214, 216, 233, 234, 236, 239, 243, 249, 254, 255, 264, 265, 285, 287, 290, 292, 300, 309, 317, 318, 327, 351, 361, 376, 383, 389, 390, 392, 393, 409, 412, 413, 415, 418, 421, 422, 425, 427, 428, 430, 433, 434, 435, 436, 445, 450, 451, 452, 455, 457, 460, 462], "loss": [157, 174, 175, 209, 255, 264, 279, 284, 292, 317, 372, 412, 413, 414, 415, 424, 425, 426, 436, 448, 450, 453, 457, 460, 462], "pytorchintermediatelayersknowledgedistillationlosswrapp": [157, 209], "selfknowledgedistillationloss": [157, 209], "selfknowledg": [157, 209], "pytorchselfknowledgedistillationloss": [157, 209], "pytorchselfknowledgedistillationlosswrapp": [157, 209], "pruner": [159, 256, 273, 274, 275, 276, 277, 279, 284, 285, 287, 290, 309, 425, 450, 462], "model_slim": [159, 161], "auto_slim": [159, 161, 163], "pattern_analyz": [159, 161, 163], "weight_slim": [159, 161, 163], "criteria": [159, 161, 174, 175, 255, 279, 284, 287, 289, 292, 389, 445, 457], "reg": [159, 161, 167], "schedul": [159, 161, 167, 168, 174, 175, 256, 285, 289, 309, 425, 448], "callback": [159, 279, 284, 372, 375, 389, 425, 448, 450, 453], "register_criterion": 160, "registri": [160, 166, 167, 168, 169, 287, 289, 291, 390], "get_criterion": 160, "pruningcriterion": 160, "about": [160, 383, 387, 409, 425, 454, 460, 461, 463], "module_nam": [160, 167, 168, 289, 383], "store": [160, 164, 167, 168, 174, 175, 192, 236, 282, 289, 420], "score": [160, 166, 167, 174, 175, 257, 258, 260, 261, 262, 264, 289, 310, 311, 313, 314, 315, 317, 358, 375, 389, 424, 447, 450, 456, 460], "magnitudecriterion": 160, "magnitud": [160, 174, 175, 256, 264, 275, 309, 317, 421, 450], "criterion_class": 160, "determin": [160, 166, 167, 174, 175, 377, 387, 389, 450, 453, 457], "gradientcriterion": 160, "gradient": [160, 273, 421, 425, 450, 463], "absolut": [160, 174, 175, 264, 317, 424, 425, 449, 450, 453, 460], "snipcriterion": 160, "snip": [160, 174, 175, 289, 421, 450, 463], "product": [160, 392, 421, 426, 428, 429, 445, 449, 451, 453, 456, 460], "singl": [160, 169, 174, 175, 183, 190, 207, 227, 234, 249, 260, 289, 291, 313, 317, 351, 389, 410, 422, 450], "shot": [160, 167, 169, 217, 289, 291, 390, 421, 425, 450, 451], "connect": [160, 289, 445, 449, 450, 456], "sensit": [160, 273, 289, 421, 450], "arxiv": [160, 167, 289, 450, 457], "org": [160, 167, 260, 289, 313, 388, 389, 422, 440, 443], "1810": [160, 289], "02340": [160, 289], "snipmomentumcriterion": 160, "snip_momentum": [160, 174, 175, 425, 450], "momentum": [160, 289, 421, 425, 450, 462], "mechan": [160, 450, 456, 461], "preserv": 160, "step": [160, 166, 167, 169, 174, 175, 287, 289, 291, 372, 412, 413, 414, 416, 425, 440, 443, 445, 448, 450, 452, 454, 456, 457, 458, 460], "beta": 160, "snipmomentumblockcriterion": 160, "snip_momentum_block": 160, "retrainfreecriterion": 160, "retrain_fre": [160, 167], "auto": [162, 164, 174, 175, 294, 309, 353, 359, 383, 389, 428, 431, 433, 435, 436, 450, 453], "slim": [162, 163, 164, 260, 313, 324, 326, 427, 450], "round_multipli": 162, "32": [162, 414, 420, 449, 457, 463], "spars": [162, 167, 289, 410, 451], "automat": [162, 164, 165, 174, 175, 192, 195, 202, 203, 236, 239, 246, 255, 265, 292, 389, 392, 408, 410, 421, 425, 426, 428, 430, 433, 434, 436, 438, 439, 440, 442, 443, 445, 448, 450, 453, 457, 459, 460], "model_slim_ffn2": 162, "some": [162, 164, 174, 175, 190, 234, 288, 410, 416, 422, 424, 425, 426, 447, 450, 453, 454, 457, 458, 460], "part": [162, 167, 287, 289, 389, 422, 426, 440, 443, 450, 457, 461], "perman": [162, 387, 450], "obtain": [162, 164, 167, 168, 170, 288, 389, 450, 456, 457, 460], "acceler": [162, 412, 425, 428, 436, 445, 450, 451, 454, 457, 460], "directli": [162, 174, 175, 189, 233, 260, 264, 288, 313, 317, 424, 425, 432, 450, 452, 453, 458], "sprase": 162, "multipl": [162, 174, 175, 176, 177, 181, 182, 190, 191, 193, 194, 195, 196, 197, 201, 204, 207, 214, 220, 221, 225, 226, 228, 234, 235, 237, 238, 239, 240, 241, 245, 247, 249, 265, 318, 319, 320, 322, 328, 408, 410, 416, 425, 448, 450, 456, 457, 460], "model_slim_mha": 162, "parse_auto_slim_config": 162, "ffn2_sparsiti": 162, "mha_spars": 162, "generate_ffn2_pruning_config": 162, "consecut": [162, 164, 165, 450], "generate_mha_pruning_config": 162, "head": [162, 164, 165, 170, 450], "get_attribut": 164, "level": [164, 356, 370, 379, 387, 457, 460], "descent": 164, "print_iter": 164, "recipesearch": 164, "searcher": [164, 272], "search": [164, 167, 171, 178, 179, 222, 223, 255, 257, 267, 270, 271, 272, 292, 296, 310, 355, 392, 419, 421, 424, 428, 429, 439, 451, 458, 460, 461], "root": [164, 190, 191, 192, 195, 234, 235, 236, 239, 264, 317, 409, 410, 414, 424, 425, 462], "levelwis": 164, "wai": [164, 191, 192, 195, 235, 236, 239, 390, 409, 410, 424, 425, 428, 431, 446, 448, 450, 453, 457, 460, 462], "huggingfac": [164, 165, 190, 234, 378, 410, 415, 419, 433, 434, 435, 436, 457], "bert": [164, 175, 186, 189, 190, 207, 230, 233, 234, 249, 392, 410, 412, 424, 433, 450, 459, 463], "recipe_sampl": 164, "bertattent": 164, "dens": [164, 169, 174, 175, 291, 450, 463], "infom": [164, 210], "basic": [164, 166, 174, 175, 206, 248, 256, 267, 287, 298, 302, 305, 309, 359, 363, 366, 372, 421, 422, 425, 452, 456], "searching_result": 164, "jitbasicsearch": 164, "placeholder_shap": 164, "placeholder_dtyp": 164, "By": [164, 174, 175, 257, 310, 392, 424, 427, 438, 439, 442, 451, 460], "jit": [164, 174, 428, 430, 435, 457, 458], "script": [164, 257, 258, 261, 262, 310, 311, 314, 315, 414, 421, 428, 432, 435, 436, 439, 451], "them": [164, 190, 234, 389, 409, 416, 418, 420, 448, 450, 460], "static_graph": 164, "flatten_static_graph": 164, "target_lay": 164, "linear2linearsearch": 164, "target_op_lut": 164, "lookup": 164, "tabl": [164, 383, 416, 463], "code": [164, 178, 179, 208, 222, 223, 266, 290, 293, 351, 372, 389, 392, 393, 409, 410, 412, 413, 414, 420, 421, 423, 424, 428, 430, 432, 433, 434, 436, 439, 445, 447, 448, 450, 451, 452, 453, 456, 457, 458, 459], "current_pattern": 164, "statu": [164, 380, 387, 409, 447, 450], "selfmhasearch": 164, "classifierheadsearch": 164, "final": [164, 167, 170, 289, 425, 431, 447, 450, 453, 455, 460], "classifi": [164, 170, 190, 234, 264, 317, 410, 412], "squeezer": 165, "postcompressionutil": 165, "librari": [165, 211, 256, 309, 345, 385, 388, 392, 422, 425, 430, 439, 445, 451, 453], "relat": [165, 168, 250, 260, 279, 284, 287, 313, 375, 428, 450, 462], "linearcompress": 165, "root_linear": 165, "target_linear": 165, "also": [165, 189, 192, 207, 233, 236, 249, 257, 310, 317, 328, 351, 388, 390, 393, 409, 415, 419, 421, 424, 425, 428, 433, 438, 439, 442, 445, 446, 447, 450, 451, 453, 454, 457, 460], "while": [165, 167, 170, 289, 296, 355, 393, 410, 415, 421, 426, 428, 433, 445, 452, 453, 457], "hidden": [165, 166, 287, 393], "structur": [165, 167, 174, 175, 289, 307, 368, 421, 444, 446, 450, 453, 458, 461, 463], "layer_1": 165, "act_fn": 165, "layer_2": 165, "linearcompressioniter": 165, "linear_pattern": 165, "mhacompress": 165, "mha": 165, "head_num": 165, "head_siz": 165, "progress": [165, 192, 236, 439, 445, 450, 453], "register_pattern": [166, 287], "sure": [166, 167, 169, 287, 289, 291, 408], "get_pattern": [166, 287], "assertionerror": [166, 167, 170, 287, 288, 289, 318], "basepattern": [166, 168], "unit": [166, 287, 388, 450], "e": [166, 174, 175, 387, 412, 415, 419, 428, 433, 434, 438, 442, 450, 457, 460], "4x1": [166, 174, 175, 283, 425, 450, 463], "is_glob": [166, 287], "local": [166, 174, 175, 287, 383, 438, 442, 450, 456], "contrast": [166, 287, 459], "keep_mask_lay": 166, "invalid_lay": 166, "max_sparsity_ratio_per_op": [166, 167, 171, 174, 175, 425, 450], "sparsiti": [166, 167, 169, 170, 174, 175, 289, 291, 383, 392, 410, 421, 425, 461, 463], "reach": [166, 169, 174, 175, 291, 388, 392, 409, 450, 460], "min_sparsity_ratio_per_op": [166, 171, 174, 175, 425, 450], "minimum": [166, 174, 175, 425, 436, 450, 460], "target_spars": [166, 171, 174, 175, 425, 450, 452, 462], "patternnxm": [166, 287], "nxm": [166, 167, 174, 175, 283, 287, 450], "kept": [166, 287], "block_siz": [166, 287], "height": [166, 203, 207, 246, 249, 287, 414, 459, 462], "width": [166, 203, 207, 246, 249, 287, 414, 450, 453, 459, 462], "vertic": [166, 207, 249, 287, 459], "becaus": [166, 207, 249, 287, 389, 453, 457, 459, 460], "patternninm": [166, 287], "n": [166, 174, 175, 191, 207, 235, 249, 258, 287, 311, 370, 410, 412, 450, 453, 457, 459], "out": [166, 174, 175, 190, 191, 192, 234, 235, 236, 255, 287, 292, 388, 389, 392, 410, 428, 433, 438, 439, 440, 442, 443, 445, 450, 452, 453], "continu": [166, 260, 287, 313, 390, 425, 446, 450], "doc": [166, 174, 175, 287, 305, 306, 317, 351, 366, 367, 370, 383, 424, 425, 440, 443], "md": [166, 174, 175, 287, 317, 351, 414, 453], "element": [166, 170, 188, 232, 260, 287, 313, 383, 410, 421, 424, 450, 457], "register_prun": [167, 289], "parse_valid_pruner_typ": 167, "get_prun": [167, 289], "cuurent": [167, 289], "baseprun": 167, "current_sparsity_ratio": [167, 289], "global_step": [167, 289], "total": [167, 207, 249, 264, 289, 317, 410, 450, 459], "start_step": [167, 171, 174, 175, 289, 425, 450, 452], "end_step": [167, 171, 174, 175, 289, 425, 450, 452], "pruning_frequ": [167, 171, 174, 175, 425, 450], "target_sparsity_ratio": [167, 289], "show": [167, 383, 387, 412, 414, 425, 431, 446, 457, 460, 461], "basicprun": 167, "arrang": [167, 191, 192, 195, 235, 236, 239, 410, 450], "proce": 167, "regul": 167, "patternlockprun": [167, 277, 289], "parent": [167, 169, 283, 289, 291, 458], "blockmaskprun": 167, "grad": 167, "retrainfreeprun": 167, "pruner_class": 167, "rearrang": 167, "fast": [167, 174, 175, 392, 451], "retrain": [167, 413, 450], "effect": [167, 392, 393, 451], "2204": 167, "09656": 167, "progressiveprun": 167, "interpol": [167, 207, 249, 424, 450, 459], "fine": [167, 190, 234, 410, 431, 450, 451, 453], "grain": [167, 450, 451, 460], "improv": [167, 388, 425, 428, 445, 446, 450, 451, 453, 454, 460, 463], "interv": [167, 450], "regular": [168, 257, 288, 310], "register_reg": 168, "regulariz": 168, "get_reg_typ": 168, "get_reg": 168, "basereg": 168, "grouplasso": 168, "coeff": 168, "group": [168, 274, 421, 450, 458, 459, 460, 463], "lasso": [168, 274, 421, 450], "select": [168, 175, 190, 234, 389, 390, 421, 422, 445, 450, 453, 458, 460], "reg_term": 168, "coeffient": 168, "register_schedul": [169, 291], "get_schedul": [169, 291], "pruningschedul": 169, "gradual": [169, 291, 450], "oneshotschedul": [169, 291], "iterativeschedul": [169, 291], "get_sparsity_ratio": 170, "elementwise_over_matmul_gemm_conv": 170, "elementwise_over_al": 170, "blockwise_over_matmul_gemm_conv": 170, "check_config": [170, 288], "prune_config": [170, 288], "everyth": [170, 288, 433], "reset_none_to_default": 170, "undefin": [170, 288], "update_param": 170, "process_weight_config": 170, "global_config": [170, 273, 274, 276, 277, 278], "local_config": [170, 174, 175, 273, 274, 276, 277, 278], "default_config": 170, "pruners_info": 170, "process_yaml_config": 170, "check_key_valid": 170, "template_config": 170, "user_config": 170, "process_and_check_config": [170, 288], "process_config": [170, 288], "parse_last_linear": 170, "often": [170, 409, 412, 448, 450], "act": [170, 188, 232, 387], "might": [170, 389, 460], "caus": [170, 429, 450], "drop": [170, 260, 288, 313, 425, 426, 439, 450, 463], "parse_to_prun": [170, 288], "keep": [170, 288, 356, 389, 393, 444, 445, 455], "generate_pruner_config": 170, "dotdict": [170, 171, 175, 328, 383], "prunerv2": 171, "pruning_typ": [171, 174, 175, 425, 450], "pruning_scop": [171, 174, 175, 425, 450], "sparsity_decay_typ": [171, 174, 175, 425, 450], "pruning_op_typ": [171, 174, 175, 425, 450], "reg_typ": 171, "criterion_reduce_typ": 171, "resume_from_pruned_checkpoint": 171, "similiar": 171, "cfg_fname": 171, "parser": 171, "quantization_conf": 171, "pruning_conf": 171, "graph_optimization_conf": [171, 255], "mixedprecision_conf": 171, "benchmark_conf": 171, "nasconfig": [171, 175, 268, 270, 390], "approach": [171, 174, 175, 267, 268, 270, 389, 390, 392, 409, 410, 412, 421, 425, 433, 445, 451, 452, 460, 462], "search_spac": [171, 175, 267, 270, 271, 272], "search_algorithm": [171, 175, 256, 269, 309, 390], "na": [171, 175, 256, 309, 322, 421], "procedur": [171, 390, 450], "deep_get": [172, 328], "dot": [172, 426, 453], "eg": [172, 192, 236, 410, 452], "person": [172, 387, 451], "john": 172, "deep": [172, 392, 393, 409, 421, 422, 425, 426, 428, 430, 433, 434, 436, 439, 445, 451, 453, 460, 461, 463], "deep_set": [172, 328], "sex": [172, 387], "male": 172, "instead": [172, 175, 189, 233, 383, 431, 433, 436, 450], "notat": [172, 175, 383], "pythonic_config": 173, "random_se": [174, 175, 296, 355, 425, 462], "1978": [174, 175], "workspac": [174, 175, 382, 383, 427], "default_workspac": [174, 175], "resume_from": [174, 175, 383], "tensorboard": [174, 175, 375, 383, 393, 425], "set_random_se": [174, 175, 383], "set_workspac": [174, 175, 383], "set_resume_from": [174, 175, 383], "set_tensorboard": [174, 175, 383], "directori": [174, 175, 191, 192, 235, 236, 326, 378, 380, 382, 383, 410, 414, 417, 438, 440, 442, 443, 458], "histori": [174, 175, 382, 383, 445, 460], "nc_workspac": [174, 175], "datetim": [174, 175], "now": [174, 175, 207, 249, 389, 390, 410, 414, 436, 452, 459, 460], "strftime": [174, 175], "d_": [174, 175], "h": [174, 175, 207, 249, 414, 459], "resum": [174, 175, 178, 179, 222, 223, 297, 300, 301, 302, 352, 355, 356, 357, 358, 360, 361, 362, 363], "wa": [174, 175, 393, 425, 451, 460], "flag": [174, 175, 258, 311], "visual": [174, 175, 392, 436, 445, 456, 458, 460, 461], "displai": [174, 175, 305, 306, 366, 367, 383, 445], "2022": [174, 175, 392, 423, 457], "workspace_path": [174, 175], "accuracycriterion": [174, 175, 425, 460], "higher_is_bett": [174, 175, 317, 351, 424, 460, 462], "rel": [174, 175, 328, 425, 452, 460, 462, 463], "tolerable_loss": [174, 175, 425, 460], "01": [174, 175, 425, 449, 452, 460, 462, 463], "higher": [174, 175, 178, 179, 222, 223, 271, 318, 351, 372, 389, 412, 416, 424, 450, 453, 456], "accept": [174, 175, 370, 387, 408], "accuracy_criterion": [174, 175, 328, 425, 447, 452, 460, 462], "avail": [174, 175, 322, 394, 396, 400, 403, 406, 415, 417, 419, 421, 438, 442, 449, 450, 460, 463], "warmup": [174, 175, 408, 425, 452], "inter_num_of_thread": [174, 175, 345, 350, 425, 452], "intra_num_of_thread": [174, 175, 345, 350, 425, 452], "benchmark": [174, 175, 210, 256, 293, 309, 328, 383, 392, 398, 427, 428, 432, 436, 439, 445, 460, 461, 462, 463], "empti": [174, 175, 431], "onnxrt_trt_ep": [174, 175, 453], "onnxrt_cuda_ep": [174, 175, 426, 453], "inter": [174, 175, 188, 192, 232, 236], "intra": [174, 175], "quantizationconfig": 174, "post_training_static_qu": [174, 409, 410, 425, 452, 460], "calibration_sampling_s": [174, 175, 425], "op_type_dict": [174, 175, 452, 453, 460], "op_name_dict": [174, 175, 425, 453, 460], "strategy_kwarg": [174, 175, 456, 460], "timeout": [174, 175, 425, 452, 460, 462], "max_trial": [174, 175, 425, 460], "quant_level": [174, 175, 460], "posttrainingquantconfig": [174, 175, 351, 389, 392, 409, 416, 419, 425, 427, 453, 454, 456, 457, 460], "quantizationawaretrainingconfig": [174, 175, 372, 389, 413, 416, 425, 453, 454, 460], "requir": [174, 175, 181, 293, 326, 350, 389, 393, 408, 409, 413, 414, 418, 425, 426, 427, 429, 439, 445, 449, 450, 453, 455, 456, 457, 458, 460, 462], "cv": [174, 175, 450], "object_detect": [174, 175, 260, 313], "nlp": [174, 175, 290, 433, 450, 453], "recommendation_system": [174, 175], "explicitli": [174, 175, 420, 450], "overrid": [174, 175, 383], "quantiztaion": [174, 175], "smooth_quant_arg": [174, 175, 453, 457], "gemm_to_matmul": [174, 175, 453], "graph_optimization_level": [174, 175, 452, 453], "disable_al": [174, 175, 452], "enable_bas": [174, 175], "enable_extend": [174, 175], "enable_al": [174, 175], "first_conv_or_matmul_quant": [174, 175, 453], "last_conv_or_matmul_quant": [174, 175, 453], "pre_post_process_quant": [174, 175, 453], "preprocess": [174, 175, 190, 207, 234, 249, 375, 414, 459], "postprocess": [174, 175, 201, 204, 207, 211, 249, 256, 309, 317, 351, 375, 393, 425, 458, 459], "vaild": [174, 175], "dedic": [174, 175], "quant_format": [174, 175, 254, 416], "constraint": [174, 175, 255, 292, 425, 450, 456, 460, 462], "reduc": [174, 175, 393, 413, 425, 426, 445, 446, 450, 451, 453, 454, 457, 460, 462], "layer1": [174, 175, 425, 450, 453], "conv1": [174, 175, 453, 462], "tuning_strategi": [174, 175], "guarante": [174, 175, 425], "models": [174, 175, 328, 425, 447, 452], "footprint": [174, 175, 255, 279, 284, 292, 328, 413, 425, 447, 450, 452], "earli": [174, 175, 425, 453, 460, 462], "stop": [174, 175, 425, 460, 461, 462], "field": [174, 175, 192, 236, 260, 313, 389, 393, 414, 425, 456, 460, 462], "exit": [174, 175, 295, 352, 354, 425, 426, 462], "bit": [174, 175, 413, 426, 451, 453, 457], "excluded_precis": [174, 175, 454], "exclud": [174, 175, 393, 426, 454], "conserv": [174, 175, 309, 359], "use_distributed_tun": 174, "weightpruningconfig": [174, 175, 219, 425, 448, 450], "pruning_config": [174, 175, 425], "9": [174, 175, 389, 422, 425, 450, 452, 457, 460, 462], "98": [174, 175, 425, 450, 452, 463], "exp": [174, 175, 425, 450], "link": [174, 175, 190, 234, 317, 351, 410, 416, 438, 442, 445, 463], "90": [174, 175, 462, 463], "magnitude_progress": [174, 175], "snip_progress": [174, 175], "snip_momentum_progress": [174, 175], "pattern_lock": [174, 175, 256, 275, 309], "most": [174, 175, 264, 317, 425, 426, 450, 453, 457, 460], "feasibl": [174, 175], "situat": [174, 175, 414, 450], "unstructur": [174, 175, 283, 421, 450, 463], "8x1": [174, 175], "channelx1": [174, 175, 450], "1xchannel": [174, 175, 450], "itrex": [174, 175], "start": [174, 175, 207, 249, 260, 313, 356, 422, 459, 460, 461, 464], "togeth": [174, 175, 207, 249, 412, 422, 432, 451, 458, 459], "sort": [174, 175, 299, 360, 460], "sinc": [174, 175, 255, 257, 279, 284, 292, 310, 412, 416, 422, 424, 439, 445, 448], "lead": [174, 175, 412, 425, 426, 450, 457], "increas": [174, 175, 411, 421, 428, 445, 460], "cube": [174, 175, 450], "6": [174, 175, 392, 418, 453, 457, 460, 463], "update_config": [174, 175], "10": [174, 175, 192, 236, 296, 355, 392, 408, 410, 416, 422, 425, 450, 452, 459, 460, 463], "knowledgedistillationlossconfig": [174, 175, 412, 413, 425, 448], "hyperparamet": [174, 175, 305, 456, 457, 460], "entropi": [174, 175, 460], "length": [174, 175, 190, 207, 234, 249, 260, 313, 392, 410, 424, 451, 453, 459], "groundtruth": [174, 175, 260, 313], "label": [174, 175, 178, 179, 190, 192, 193, 194, 195, 198, 203, 207, 212, 222, 223, 234, 236, 237, 238, 239, 242, 246, 249, 257, 259, 264, 310, 312, 317, 318, 351, 372, 389, 409, 410, 424, 425, 453, 459], "tpye": [174, 175], "sum": [174, 175, 264, 317, 412], "distillationconfig": [174, 175, 372, 412, 413, 425, 448], "prepare_compress": [174, 175, 372, 389, 412, 413, 425, 448, 450, 453], "criterion_conf": [174, 175], "d_conf": [174, 175, 413, 425, 448], "compression_manag": [174, 175, 372, 389, 412, 413, 425, 448, 450, 453], "sgd": [174, 175, 214, 412, 425, 452, 462], "learning_r": [174, 175, 425, 452, 462], "callabl": [174, 175, 262, 315, 372], "featur": [174, 175, 190, 191, 203, 207, 234, 235, 246, 249, 388, 392, 408, 409, 411, 412, 425, 426, 427, 428, 432, 433, 436, 445, 450, 451, 455, 459], "altern": [174, 175, 351], "distil_loss": [174, 175, 425], "crossentropyloss": [174, 175, 209, 412, 425], "lr": [174, 175, 412, 414, 425], "tuningcriterion": [175, 425, 447, 456, 460], "tuning_criterion": [175, 425, 447, 456, 460], "dynam": [175, 180, 224, 254, 306, 367, 393, 409, 412, 416, 421, 425, 428, 433, 434, 435, 436, 439, 445, 451, 460, 463], "ptq": [175, 351, 389, 414, 421, 425, 453, 457, 458, 460], "tri": [175, 460], "meet": [175, 181, 293, 295, 352, 354, 389, 447, 451, 452, 453, 458, 460], "bayesian": [175, 256, 272, 298, 309, 359, 390, 452], "mse_v2": [175, 256, 298, 309, 359], "hawq_v2": [175, 309, 359], "exhaust": [175, 256, 272, 298, 309, 359, 452], "docstr": [175, 370], "copi": [175, 288, 383], "deepcopi": 175, "model_origin": [175, 351, 454], "qat_op_name_dict": 175, "intermediatelayersknowledgedistillationlossconfig": [175, 412], "relationship": 175, "student_layer_nam": 175, "student_layer_output_process": 175, "teacher_layer_nam": 175, "teacher_layer_output_process": 175, "desir": [175, 203, 207, 246, 249, 459], "either": [175, 260, 313, 429, 433, 448, 452, 453], "serv": [175, 326], "numer": [175, 264, 317, 426, 451, 453], "abbrevi": 175, "layer_nam": 175, "l1": 175, "selfknowledgedistillationlossconfig": [175, 412, 425], "student1_layer_name1": 175, "teacher_layer_name1": 175, "student2_layer_name1": 175, "student1_layer_name2": 175, "teacher_layer_name2": 175, "student2_layer_name2": 175, "soft": 175, "l2": [175, 450], "hard": [175, 409], "resblock": 175, "deepst": 175, "fc": 175, "02": [175, 457, 463], "mixedprecisionconfig": [175, 318, 370, 425, 426], "mixedprecis": [175, 265, 425], "fp16": [175, 306, 367, 426, 453], "won": [175, 453], "work": [175, 255, 292, 391, 409, 412, 440, 443, 450, 454, 455, 457, 458], "mix_precis": [175, 309, 370, 425, 426], "converted_model": [175, 318, 425, 426], "exportconfig": 175, "14": [175, 253, 254, 416, 422, 457, 463], "dynamic_ax": [175, 254, 416], "qlinear": [175, 192, 199, 236, 243, 264, 317, 393, 416, 435, 463], "ax": [175, 254], "onnxqlinear2qdqconfig": 175, "onnxqlinear2qdq": 175, "torch2onnxconfig": [175, 416], "torch2onnx": [175, 251, 256, 309], "qdq_op_fp32_bia": 175, "qdq_op_int32_bia": 175, "qdq_op_fp32_bias_qdq": 175, "resnet50": [175, 392, 414, 416, 428, 432, 450, 453, 456, 463], "int8_onnx_config": [175, 416], "randn": [175, 416], "224": [175, 203, 246, 392, 409, 410, 414, 416, 419, 425, 428, 459, 462, 463], "batch_siz": [175, 180, 182, 186, 188, 189, 190, 191, 210, 224, 226, 230, 232, 233, 234, 235, 254, 390, 409, 410, 414, 416, 420, 425, 428, 453], "tf2onnxconfig": [175, 416], "tf2onnx": [175, 251, 256, 309], "keyword": 175, "argument": [175, 370, 390], "output_graph": 175, "42": [175, 272, 449, 463], "dyna": [175, 256, 269, 309, 390, 421, 452], "sigopt": [176, 177, 220, 221, 256, 309, 451], "tpe": [176, 177, 220, 221, 256, 309], "sigopttunestrategi": [178, 222], "q_dataload": [178, 179, 222, 223, 296, 297, 299, 300, 301, 302, 352, 355, 356, 357, 358, 360, 361, 362, 363, 420, 460], "eval_func": [178, 179, 222, 223, 293, 296, 297, 299, 300, 301, 302, 318, 351, 352, 355, 356, 357, 358, 360, 361, 362, 363, 370, 372, 389, 409, 410, 412, 413, 414, 425, 453, 454, 460, 462], "eval_metr": [178, 179, 318, 351, 352, 355, 356, 357, 358, 360, 361, 362, 363, 372, 453], "q_hook": [178, 179, 222, 223, 296, 297, 299, 300, 301, 302, 352, 355, 356, 357, 358, 360, 361, 362, 363], "hpo": [178, 222], "mandatori": [178, 179, 222, 223, 351, 425, 462], "yield": [178, 179, 188, 210, 222, 223, 232, 296, 318, 351, 355, 370, 372, 409, 453, 460], "_": [178, 179, 222, 223, 351, 389, 390, 393, 412, 414, 416, 418, 424, 425, 426, 427, 428, 434, 438, 440, 442, 443, 447, 450, 453, 455, 456, 457, 458, 460, 462], "well": [178, 179, 222, 223, 318, 351, 372, 390, 392, 410, 450, 453, 455, 457, 462], "taken": [178, 179, 222, 223, 318, 351, 372, 453], "reserv": [178, 179, 222, 223], "abl": [178, 179, 222, 223, 318, 351, 372, 436, 445, 453], "tuner": [178, 179, 222, 223, 255, 292, 318, 351, 372, 453], "scalar": [178, 179, 222, 223, 318, 351, 372, 424, 453], "pseudo": [178, 179, 222, 223, 351, 372, 458], "someth": [178, 179, 192, 222, 223, 236, 351, 372], "fefin": [179, 223], "tpetunestrategi": [179, 223], "basedatalod": [180, 224], "basedataload": [180, 185, 187, 224, 229, 231], "last_batch": [180, 182, 186, 189, 210, 224, 226, 230, 233], "rollov": [180, 182, 186, 189, 210, 224, 226, 230, 233], "collate_fn": [180, 182, 183, 186, 210, 224, 226, 227, 230, 410], "sampler": [180, 182, 184, 186, 210, 224, 226, 228, 230, 245, 256, 305, 366, 414], "batch_sampl": [180, 182, 186, 210, 224, 226, 230], "num_work": [180, 182, 186, 210, 224, 226, 230, 425, 453], "pin_memori": [180, 182, 186, 210, 224, 226, 230], "shuffl": [180, 182, 186, 210, 224, 226, 230, 425, 453], "_generate_dataload": [180, 224], "check_dataload": 181, "default_col": [182, 226], "outer": [182, 226], "defaultdataload": [182, 189, 226, 233], "definit": [183, 188, 227, 232], "style": [183, 197, 227, 241, 370, 388, 410, 420], "drop_last": [183, 188, 227, 232], "iterablefetch": [183, 227], "indexfetch": [183, 227], "base_dataload": [184, 228, 245, 256], "default_dataload": [184, 228, 245, 256], "fetcher": [184, 228, 245, 256], "mxnet_dataload": [184, 228, 245, 256], "onnxrt_dataload": [184, 228, 245, 256, 344], "pytorch_dataload": [184, 228, 245, 256], "tensorflow_dataload": [184, 228, 245, 256, 349], "mxnetdataload": [185, 229], "onnxrtbertdataload": [186, 230], "varient": [186, 230], "onnxrtdataload": [186, 230, 344], "pytorchdataload": [187, 231], "data_sourc": [188, 232, 375], "__iter__": [188, 192, 232, 236, 409, 410, 425], "matter": [188, 232, 454], "iterablesampl": [188, 232], "squential": [188, 232], "your": [188, 190, 232, 234, 388, 410, 414, 423, 425, 428, 431, 432, 433, 438, 439, 440, 442, 443, 445, 450, 456, 458, 460], "clear": [188, 232, 393, 418, 424, 425], "iterabledataset": [188, 192, 232, 236], "try": [188, 232, 389, 450, 453, 457, 460], "indexdataset": [188, 232], "__getitem__": [188, 192, 207, 232, 236, 249, 410, 425], "__len__": [188, 192, 232, 236, 410], "retriev": [188, 232], "sequentialsampl": [188, 232], "sequenti": [188, 232, 293, 295, 352, 354, 460], "batchsampl": [188, 232], "tfdatadataload": [189, 233], "tensorflow1": [189, 233], "coupl": [189, 233], "satisfi": [189, 233, 422], "usag": [189, 233, 260, 266, 293, 313, 370, 410, 414, 415, 424, 428, 436, 447, 452, 459], "tf1": [189, 233, 427], "although": [189, 233, 456], "tensorflowbertdataload": [189, 233], "tensorflowmodelzoobertdataload": [189, 233], "zoo": [189, 207, 233, 249, 392, 415, 419, 463], "tensorflowdataload": [189, 233, 349], "pytorchbertdataset": [190, 234], "model_typ": [190, 234, 383, 410], "construct": [190, 193, 194, 197, 205, 210, 212, 213, 215, 234, 237, 238, 241, 317, 322, 326, 369, 375, 387, 410, 414, 450, 460], "tensordataset": [190, 234, 410], "repo": [190, 234, 386, 410, 415, 438, 440, 442, 443, 464], "easi": [190, 234, 292, 409, 416, 425, 451, 453, 456], "load": [190, 206, 207, 234, 248, 249, 318, 326, 351, 382, 383, 409, 438, 442, 446, 452, 453, 457], "squad": [190, 207, 234, 249, 261, 262, 264, 314, 315, 317, 410, 424, 450, 459, 463], "distilbert": [190, 234, 392, 410, 451, 463], "xlnet": [190, 234, 410], "xlm": [190, 234, 410, 463], "101": [190, 234, 264, 317, 424, 457, 463], "2043": [190, 234], "2001": [190, 234], "onnxrtbertdataset": [190, 234], "data_dir": [190, 234, 410], "model_name_or_path": [190, 234, 410, 425, 433, 434], "max_seq_length": [190, 207, 234, 249, 410, 459], "do_lower_cas": [190, 206, 207, 234, 248, 249, 410, 459], "mrpc": [190, 234, 264, 317, 410, 424, 433, 450, 460, 463], "dynamic_length": [190, 234, 410], "shortcut": [190, 234, 410], "token": [190, 201, 204, 207, 234, 245, 247, 249, 256, 257, 258, 309, 310, 311, 378, 410, 424, 425, 456, 457, 459, 460], "longer": [190, 207, 234, 249, 410, 459], "truncat": [190, 207, 234, 249, 410, 459], "shorter": [190, 207, 234, 249, 410, 459], "lowercas": [190, 234, 410], "choic": [190, 234, 393, 410, 424, 457], "qqp": [190, 234, 410, 424, 463], "qnli": [190, 234, 410, 424, 463], "rte": [190, 234, 410, 424, 463], "st": [190, 234, 410, 424], "cola": [190, 234, 410, 424, 463], "mnli": [190, 234, 410, 424, 463], "wnli": [190, 234, 410, 424, 463], "mobilebert": [190, 234, 410, 412, 463], "roberta": [190, 234, 410, 463], "uncas": [190, 207, 234, 249, 410, 459, 463], "load_and_cache_exampl": [190, 234], "cach": [190, 234, 417, 453], "convert_examples_to_featur": [190, 207, 234, 249], "max_length": [190, 234], "label_list": [190, 234, 264, 317], "output_mod": [190, 234], "classif": [190, 207, 234, 249, 264, 290, 317, 412, 416, 424, 434, 450, 451], "pad_token": [190, 234], "pad_token_segment_id": [190, 234], "mask_padding_with_zero": [190, 234], "inputfeatur": [190, 207, 234, 249], "properti": [190, 234, 369, 423, 449], "input_id": [190, 207, 234, 249, 425], "vocabulari": [190, 206, 207, 234, 248, 249, 459], "attention_mask": [190, 234, 425], "usual": [190, 234, 412, 448, 450, 453, 457], "NOT": [190, 234, 418], "token_type_id": [190, 234, 425], "segment": [190, 234, 258, 260, 311, 313], "portion": [190, 234], "problem": [190, 234, 264, 317, 424, 426, 446], "regress": [190, 234], "seq_length": [190, 234], "tensorflowbertdataset": [190, 234], "label_fil": [190, 207, 234, 249, 410, 459], "tfrecord": [190, 191, 192, 234, 235, 236, 410], "guid": [190, 234, 389, 392, 410, 412, 422, 428, 436, 445, 464], "parsedecodebert": [190, 234], "tensorflowmodelzoobertdataset": [190, 191, 234, 235], "num_cor": [190, 191, 195, 234, 235, 239, 410], "28": [190, 191, 195, 234, 235, 239, 410, 463], "coco": [191, 198, 202, 235, 242, 260, 264, 313, 317, 424, 450], "parsedecodecoco": [191, 235], "cocorecorddataset": [191, 235], "interleav": [191, 235, 410], "parallel": [191, 235, 345, 350, 410, 425, 460], "cocoraw": [191, 235, 409, 410], "img_dir": [191, 235, 410], "val2017": [191, 235, 410], "anno_dir": [191, 235, 410], "annot": [191, 235, 260, 313, 370, 410, 424, 450], "instances_val2017": [191, 235, 410], "jpg": [191, 195, 197, 235, 239, 241, 410], "imag": [191, 192, 195, 197, 203, 207, 235, 236, 239, 241, 246, 249, 260, 313, 410, 414, 416, 450, 452, 457, 458, 459, 463], "coconpi": [191, 235, 410], "npy_dir": [191, 235, 410], "npy": [191, 235, 410], "tensorflowdataset": [192, 236], "pytorchdataset": [192, 236], "mxnetdataset": [192, 236], "onnxrtqldataset": [192, 236], "onnxrtitdataset": [192, 236], "IT": [192, 199, 236, 243, 451], "pytorchmxnetwrapdataset": [192, 236], "datafunc": [192, 236], "pytorchmxnetwrapfunct": [192, 207, 236, 249], "framework_dataset": [192, 236], "convent": [192, 236, 260, 313, 412], "imageclassifi": [192, 236], "choos": [192, 236, 421, 433, 455, 457, 460, 462], "tensorflow_itex": [192, 195, 197, 199, 236, 239, 241, 243, 452], "onnxrt_qdq": [192, 199, 236, 243, 452], "onnxrt_qlinearop": [192, 199, 207, 236, 243, 249, 452], "onnxrt_integerop": [192, 199, 207, 236, 243, 249, 452], "pytorch_ipex": [192, 199, 236, 243, 425, 452, 462], "pytorch_fx": [192, 199, 236, 243, 425, 452], "dataset_registri": [192, 236], "dataset_typ": [192, 236], "dataset_format": [192, 236], "data_format": [192, 203, 236, 246], "raw_imag": [192, 236], "overwrit": [192, 236, 438, 442], "download_url": [192, 236], "url": [192, 236, 423], "filenam": [192, 236, 383, 410], "md5": [192, 236], "download": [192, 236, 410, 422, 455], "address": [192, 236, 387, 426, 451], "gen_bar_updat": [192, 236], "bar": [192, 236, 392, 445, 451], "check_integr": [192, 236], "fpath": [192, 236], "checksum": [192, 236], "calculate_md5": [192, 236], "chunk_siz": [192, 236], "cifar10": [192, 236, 410], "cifar100": [192, 236, 410], "databas": [192, 236], "otherwis": [192, 207, 236, 249, 383, 387, 410, 440, 443, 452, 459], "www": [192, 236, 410, 463], "toronto": [192, 236, 410], "kriz": [192, 236, 410], "cifar": [192, 236, 410, 463], "tar": [192, 236, 410, 440, 443], "gz": [192, 236, 410, 440, 443], "manual": [192, 236, 410, 428, 434, 436, 439], "subset": [192, 195, 236, 239, 410], "internet": [192, 236, 410], "put": [192, 236, 410, 412], "again": [192, 236, 410, 454], "pytorchcifar10": [192, 236], "mxnetcifar10": [192, 236], "tensorflowcifar10": [192, 236], "pytorchcifar100": [192, 236], "mxnetcifar100": [192, 236], "tensorflowcifar100": [192, 236], "mnist": [192, 236, 410, 414], "modifi": [192, 219, 236, 350, 389, 414, 418, 450, 462], "nation": [192, 236, 387], "institut": [192, 236], "standard": [192, 207, 236, 249, 416, 424, 459, 460], "technologi": [192, 236, 425, 449], "fashionmnist": [192, 236, 410], "npz": [192, 236, 410], "idx1": [192, 236, 410], "ubyt": [192, 236, 410], "idx3": [192, 236, 410], "t10k": [192, 236, 410], "pytorchmnist": [192, 236], "mxnetmnist": [192, 236], "tensorflowmnist": [192, 236], "pytorchfashionmnist": [192, 236], "mxnetfashionmnist": [192, 236], "tensorflowfashionmnist": [192, 236], "imagefold": [192, 236, 410, 414, 425], "expect": [192, 236, 387, 388, 417, 445, 453, 460], "subfold": [192, 236], "belong": [192, 236, 322, 453], "class_1": [192, 236, 410], "xxx": [192, 236, 388, 410, 425], "png": [192, 236, 410], "xxy": [192, 236, 410], "xxz": [192, 236, 410], "class_n": [192, 236, 410], "123": [192, 236, 410, 459], "nsdf3": [192, 236, 410], "asd932_": [192, 236, 410], "categori": [192, 236, 259, 312, 408, 410, 435], "mxnetimagefold": [192, 236], "tensorflowtfrecorddataset": [192, 236], "tensorflowimagerecord": [192, 236], "imagenet": [192, 195, 203, 236, 239, 246, 390, 425, 434, 450, 458, 459, 462, 463], "000": [192, 236, 392, 410], "001": [192, 236, 410, 414, 457, 462], "099": [192, 236, 410], "tensorflowvocrecord": [192, 236], "pascal": [192, 236], "voc": [192, 236, 264, 317], "2012": [192, 236], "00000": [192, 236], "00004": [192, 236], "00001": [192, 236], "00003": [192, 236], "dummydataset": [193, 194, 237, 238], "127": [193, 194, 237, 238, 410, 453, 457], "float32": [193, 194, 207, 237, 238, 249, 260, 313, 393, 408, 410, 425, 453, 457, 459], "rang": [193, 194, 207, 237, 238, 249, 370, 372, 392, 393, 410, 412, 413, 414, 425, 448, 450, 453, 457, 459], "stand_norm": [193, 194, 237, 238, 410], "dummy_v2": [194, 238, 409, 410], "sparse_dummy_v2": [194, 238, 410], "label_shap": [194, 238, 410], "sparsedummydataset": [194, 238], "dense_shap": [194, 238, 410], "sparse_ratio": [194, 238, 410], "imagenetraw": [195, 239, 410], "data_path": [195, 239, 410], "image_list": [195, 239, 410], "img1": [195, 239, 410], "img2": [195, 239, 410], "imgx": [195, 239, 410], "val_map": [195, 239, 410], "txt": [195, 239, 410, 422], "pytorchimagenetraw": [195, 239], "mxnetimagenetraw": [195, 239], "tensorflowimagenetraw": [195, 239], "inteltensorflow": [195, 197, 239, 241, 422], "tensorflowimagenetdataset": [195, 239], "onnxrtimagenetdataset": [195, 239], "bert_dataset": [196, 201, 240, 245, 256, 309], "coco_dataset": [196, 201, 240, 245, 256, 309], "dummy_dataset": [196, 201, 240, 245, 256, 309], "dummy_dataset_v2": [196, 201, 240, 245, 256, 309], "imagenet_dataset": [196, 201, 240, 245, 256, 309], "style_transfer_dataset": [196, 201, 240, 245, 256, 309], "styletransferdataset": [197, 241], "content_fold": [197, 241, 410], "style_fold": [197, 241, 410], "crop_ratio": [197, 241, 410], "resize_shap": [197, 241, 410], "256": [197, 203, 241, 246, 410, 414, 425, 459], "image_format": [197, 241, 410], "holder": [197, 241, 410], "labelbalancecocorecordfilt": [198, 242], "balanc": [198, 242, 449, 457], "labelbalancecocorawfilt": [198, 242], "tensorflowfilt": [199, 243], "onnxrtqlfilt": [199, 243], "onnxrtitfilt": [199, 243], "pytorchfilt": [199, 243], "mxnetfilt": [199, 243], "filter_registri": [199, 243], "filter_typ": [199, 243], "__call__": [199, 243], "coco_filt": [200, 201, 244, 245, 256, 309], "imagenet_transform": [201, 204, 245, 247, 256, 309], "parsedecodecocotransform": 202, "decod": [202, 203, 246, 257, 310, 424, 459], "quantizedinput": [203, 246, 459], "labelshift": [203, 246, 459], "label_shift": [203, 246, 459], "parsedecodeimagenet": [203, 246, 459], "proto": [203, 207, 246, 249, 459], "parsedecodeimagenettransform": [203, 246], "tensorflowresizecropimagenettransform": [203, 246], "random_crop": [203, 246, 459], "resize_sid": [203, 246, 459], "resize_method": [203, 246], "bilinear": [203, 207, 246, 249, 459], "random_flip_left_right": [203, 246, 459], "mean_valu": [203, 246, 459], "channels_last": [203, 246, 428], "subpixel": [203, 246], "rgb": [203, 246], "seri": [203, 246, 392, 422, 425, 459], "applic": [203, 246, 416, 428, 445, 451, 457, 458, 459], "crop": [203, 207, 246, 249, 410, 459], "flip": [203, 207, 246, 249, 459], "left": [203, 207, 246, 249, 439, 445, 457, 459], "right": [203, 246, 260, 313, 387, 389, 445, 457, 459], "std": [203, 207, 246, 249, 425, 459], "bilinearimagenettransform": [203, 246], "central_fract": [203, 246, 459], "875": [203, 246, 459], "fraction": [203, 246, 459], "onnxbilinearimagenettransform": [203, 246], "onnxresizecropimagenettransform": [203, 246], "std_valu": [203, 246], "229": [203, 246, 425, 463], "225": [203, 246, 425, 463], "resizewithaspectratio": [203, 246], "87": [203, 246, 463], "inter_pol": [203, 246], "cv2": [203, 246], "inter_area": [203, 246], "aspect": [203, 207, 246, 249, 459], "postprocess_cl": [205, 215, 425], "user_postprocess": [205, 215], "convert_to_unicod": [206, 248], "unicod": [206, 248], "assum": [206, 248, 260, 271, 313, 393, 418, 445], "utf": [206, 248], "load_vocab": [206, 248], "vocab_fil": [206, 207, 248, 249, 459], "convert_by_vocab": [206, 248], "vocab": [206, 248], "whitespace_token": [206, 248], "whitespac": [206, 248, 262, 315], "clean": [206, 248, 388, 425], "piec": [206, 248, 257, 310, 424], "fulltoken": [206, 248], "tokenzi": [206, 248], "basictoken": [206, 248], "punctuat": [206, 248, 257, 262, 310, 315], "lower": [206, 207, 248, 249, 262, 315, 356, 413, 450, 451, 453, 457, 459, 460], "wordpiecetoken": [206, 248], "unk_token": [206, 248], "unk": [206, 248], "max_input_chars_per_word": [206, 248], "200": [206, 248, 389, 460], "wordpiec": [206, 207, 248, 249, 459], "concat_gener": [207, 249], "inc": [207, 249, 387, 392, 428, 435, 445, 451, 452, 455], "tensorflowtransform": [207, 249], "mxnettransform": [207, 249], "pytorchtransform": [207, 249], "onnxrtqltransform": [207, 249], "onnxrtittransform": [207, 249], "transform_registri": [207, 249], "transform_typ": [207, 249], "basetransform": [207, 249], "tensorflowwrapfunct": [207, 249], "transform_func": [207, 249], "pytorchmxnettransform": [207, 249], "get_torchvision_map": [207, 249], "torchvis": [207, 249, 415, 419, 428, 434], "composetransform": [207, 249], "transform_list": [207, 249, 459], "compos": [207, 249, 375, 459], "croptoboundingbox": [207, 249, 459], "offset_height": [207, 249, 459], "offset_width": [207, 249, 459], "target_height": [207, 249, 459], "target_width": [207, 249, 459], "box": [207, 249, 260, 264, 313, 317, 389, 424, 428, 439, 445, 458, 459, 460], "coordin": [207, 249, 296, 355, 459, 460], "top": [207, 249, 255, 264, 279, 284, 292, 317, 424, 445, 459], "corner": [207, 249, 393, 459], "horizont": [207, 249, 459], "mxnetcroptoboundingbox": [207, 249], "onnxrtcroptoboundingbox": [207, 249], "tensorflowcroptoboundingbox": [207, 249], "resizewithratio": [207, 249, 459], "min_dim": [207, 249, 459], "800": [207, 249, 459], "max_dim": [207, 249, 459], "1365": [207, 249, 459, 463], "constant_valu": [207, 249], "longest": [207, 249, 459], "side": [207, 249, 410, 439, 459], "doesn": [207, 249, 393, 414, 425, 446, 462], "exce": [207, 249, 459], "tensorflowresizewithratio": [207, 249], "perm": [207, 249, 459], "permut": [207, 249, 459], "tensorflowtranspos": [207, 249], "mxnettranspos": [207, 249], "pytorchtranspos": [207, 249], "randomverticalflip": [207, 249, 459], "randomli": [207, 249, 272, 296, 355, 390, 457, 459, 460], "tensorflowrandomverticalflip": [207, 249], "randomhorizontalflip": [207, 249, 425, 459], "tensorflowrandomhorizontalflip": [207, 249], "toarrai": [207, 249, 459], "pil": [207, 249, 459], "casttftransform": [207, 249], "castonnxtransform": [207, 249], "castpytorchtransform": [207, 249], "centercroptftransform": [207, 249], "center": [207, 249, 391, 392, 422, 459, 460], "paddedcentercroptransform": [207, 249], "crop_pad": [207, 249], "resizetftransform": [207, 249], "nearest": [207, 249, 459], "bicub": [207, 249, 459], "resizepytorchtransform": [207, 249], "randomcroptftransform": [207, 249], "randomresizedcroppytorchtransform": [207, 249], "08": [207, 249, 459, 463], "randomresizedcropmxnettransform": [207, 249], "randomresizedcroptftransform": [207, 249], "normalizetftransform": [207, 249], "rescal": [207, 249, 459], "deviat": [207, 249, 459], "broadcast": [207, 249, 414, 459], "rescalekeraspretraintransform": [207, 249], "rescaletftransform": [207, 249], "rescaletransform": [207, 249], "alignimagechanneltransform": [207, 249], "dim": [207, 249, 457, 459], "align": [207, 249, 387, 459], "w": [207, 249, 450, 457, 459], "must": [207, 249, 260, 313, 388, 389, 408, 409, 422, 453, 459], "pytorchalignimagechannel": [207, 249], "tondarraytransform": [207, 249], "resizemxnettransform": [207, 249], "resizetransform": [207, 249], "cropresizetftransform": [207, 249], "boundari": [207, 249, 459], "area": [207, 249, 260, 313, 424, 459], "pytorchcropresizetransform": [207, 249], "mxnetcropresizetransform": [207, 249], "cropresizetransform": [207, 249], "centercroptransform": [207, 249], "mxnetnormalizetransform": [207, 249], "pytorchnormalizetransform": [207, 249], "normalizetransform": [207, 249], "randomcroptransform": [207, 249], "randomresizedcroptransform": [207, 249], "get_final_text": [207, 249], "pred_text": [207, 249], "orig_text": [207, 249], "project": [207, 249, 386, 387, 388, 451, 456, 460, 464], "squadexampl": [207, 249], "qas_id": [207, 249], "question_text": [207, 249], "doc_token": [207, 249], "orig_answer_text": [207, 249], "start_posit": [207, 249], "end_posit": [207, 249], "is_imposs": [207, 249], "simpl": [207, 249, 422, 425, 456, 457, 460], "answer": [207, 249, 261, 262, 314, 315, 387, 450, 459, 463], "posit": [207, 249, 387, 424, 428], "unique_id": [207, 249], "example_index": [207, 249], "doc_span_index": [207, 249], "token_to_orig_map": [207, 249], "token_is_max_context": [207, 249], "input_mask": [207, 249, 425], "segment_id": [207, 249, 425], "read_squad_exampl": [207, 249], "input_fil": [207, 249], "doc_strid": [207, 249, 459], "max_query_length": [207, 249, 459], "output_fn": [207, 249], "inputbatch": [207, 249], "collecttransform": [207, 249], "10833": [207, 249], "tfsquadv1posttransform": [207, 249], "n_best_siz": [207, 249, 459], "20": [207, 249, 449, 457, 459, 462, 463], "384": [207, 249, 459], "64": [207, 249, 390, 457, 459, 463], "max_answer_length": [207, 249, 459], "30": [207, 249, 415, 419, 421, 457, 459, 463], "nbest_predict": [207, 249, 459], "question": [207, 249, 261, 262, 314, 315, 387, 388, 393, 422, 428, 450, 457, 459, 463], "anoth": [207, 249, 257, 266, 310, 383, 412, 426, 438, 442, 459, 460], "long": [207, 249, 417, 459], "document": [207, 249, 370, 388, 398, 414, 426, 430, 440, 443, 444, 455, 459, 461], "chunk": [207, 249, 459], "tfmodelzoocollecttransform": [207, 249], "tfsquadv1modelzooposttransform": [207, 249], "squadv1": [207, 249, 459], "see": [207, 249, 257, 310, 387, 389, 391, 423, 425, 438, 439, 442, 445, 446, 457, 458, 460, 463], "parsedecodevoctransform": [207, 249], "conf_fname_or_obj": [208, 217, 250, 255, 265, 266, 267, 268, 270, 279, 284, 292], "thei": [208, 370, 387, 412, 418, 424, 425, 426, 433, 447], "possibl": [208, 448, 450, 454, 460], "unnecessari": [208, 425], "tensorflowcrossentropyloss": 209, "pytorchcrossentropyloss": 209, "tensorflowsparsecategoricalcrossentropi": 209, "sparsecategoricalcrossentropyloss": 209, "setter": 210, "calib_dataload": [210, 293, 351, 389, 392, 409, 410, 419, 420, 424, 425, 453, 454], "reason": [210, 387, 409, 458, 460], "know": [210, 414, 455], "known": [210, 296, 355, 425, 458, 460], "open": [211, 256, 309, 375, 385, 387, 392, 416, 417, 425, 440, 443, 446, 451], "metric_cl": [212, 317, 351, 425], "user_metr": [212, 317, 351], "alwai": [212, 260, 313, 317, 351, 424, 425], "recommend": [212, 317, 393, 410, 418, 436, 439, 444, 446, 450, 452, 460], "set_backend": 213, "tensorflowoptim": 214, "pytorchoptim": 214, "optimizer_registri": 214, "optimizer_typ": 214, "cross": [214, 264, 317, 420, 460], "tensorflowsgd": 214, "tensorflowadamw": 214, "tensorflow_addon": 214, "adamw": 214, "tensorflowadam": 214, "adam": [214, 462], "pytorchsgd": 214, "record_output": 216, "output_process": 216, "help": [216, 266, 427, 428, 434, 445, 460, 461], "get_activ": 216, "f": [219, 412, 414, 453, 457], "pickle_modul": 219, "pickle_protocol": 219, "_use_new_zipfile_seri": 219, "prepare_prun": [219, 450], "opt": [219, 392, 433, 457], "tensorflowimagefold": 236, "qlinear2qdq": [251, 256, 309], "qlinearop": [252, 421, 436, 453], "check_model": 252, "modelproto": [252, 318, 427], "onnx_qlinear_to_qdq": 252, "input_name_to_nod": 252, "destin": [252, 266], "tf_to_fp32_onnx": 253, "tf_to_int8_onnx": 253, "int8_model": [253, 393], "torch_to_fp32_onnx": 254, "pt_model": 254, "do_constant_fold": 254, "verbos": [254, 296, 355], "torch_to_int8_onnx": 254, "_quantiz": 254, "achiev": [255, 292, 416, 424, 425, 448, 450, 451, 453, 458, 460], "across": [255, 265, 292, 318, 411, 425, 450, 457, 460], "variou": [255, 265, 292, 318, 421, 428, 450, 452], "dl": [255, 265, 279, 284, 292, 318, 420, 432, 445, 451], "bring": [255, 292, 439, 457], "unifi": [255, 292, 393, 409, 420, 421, 425, 427], "vari": [255, 279, 284, 292, 449, 450, 457, 463], "roc": [255, 264, 279, 284, 292, 317], "flexibl": [255, 279, 284, 292, 412, 450], "via": [255, 279, 284, 292, 387, 414, 421, 425, 428, 445, 450], "popular": [256, 309, 385, 392, 393, 412, 415, 416, 419, 425, 450, 453, 460, 461], "compress": [256, 279, 284, 309, 328, 372, 385, 392, 398, 412, 421, 425, 445, 447, 448, 450, 451, 453, 457, 461, 463], "techniqu": [256, 309, 385, 392, 421, 425, 428, 448, 450, 452, 453, 461, 462, 463], "bleu": [256, 258, 263, 309, 311, 316, 424, 450], "bleu_util": [256, 263, 309, 316], "coco_label_map": [256, 263, 309, 316], "coco_tool": [256, 263, 309, 316], "evaluate_squad": [256, 263, 309, 316], "f1": [256, 261, 263, 264, 309, 314, 316, 317, 414, 424, 425, 456, 463], "basic_na": [256, 269, 309], "nas_util": [256, 269, 309], "pruner_legaci": [256, 309], "gradient_sensit": [256, 275, 309], "group_lasso": [256, 275, 309], "pruning_recip": [256, 309], "tile_pattern": [256, 280, 281], "pytorch_prun": [256, 309], "logger": [256, 285, 309, 373, 376, 383], "prune_util": [256, 285, 309], "tuning_sampl": [256, 298, 304, 309, 359, 365], "tuning_spac": [256, 298, 304, 305, 307, 309, 359, 365, 366, 368], "tuning_struct": [256, 298, 304, 305, 306, 309, 359, 365, 366, 367], "auto_mixed_precis": [256, 298, 309, 359], "graph_optim": [256, 309], "mixed_precis": [256, 309, 318, 425], "model_convers": [256, 309], "pruning_v2": [256, 309], "unicoderegex": [257, 310], "hoc": [257, 310], "hack": [257, 310], "recogn": [257, 310, 460], "nondigit_punct_r": [257, 310], "compil": [257, 310, 425, 449], "express": [257, 310, 387], "preced": [257, 310, 457], "digit": [257, 310, 451], "punct_nondigit_r": [257, 310], "symbol_r": [257, 310], "bleu_token": [257, 310], "mose": [257, 310], "smt": [257, 310], "mosesdecod": [257, 310], "mteval": [257, 310], "v14": [257, 310], "pl": [257, 310], "l954": [257, 310], "l983": [257, 310], "bilingu": [257, 310], "understudi": [257, 310], "qualiti": [257, 310], "machin": [257, 310, 416, 422, 431, 445, 451, 457, 458], "translat": [257, 258, 310, 311, 450, 460], "natur": [257, 310, 416], "approxim": [257, 258, 310, 311, 424], "glue": [257, 264, 310, 317, 410, 424, 425, 434], "word": [257, 310, 424, 450], "ngram": [257, 310, 424], "breviti": [257, 258, 310, 311, 424], "penalti": [257, 258, 310, 311, 424], "doe": [257, 310, 369, 410, 424, 425, 455, 459], "beam": [257, 310, 424], "tensor2tensor": [258, 311], "bleu_hook": [258, 311], "compute_bleu": [258, 311], "reference_corpu": [258, 311], "translation_corpu": [258, 311], "max_ord": [258, 311], "use_bp": [258, 311], "against": [258, 311], "gram": [258, 311], "bleu_scor": [258, 311], "third": [260, 313, 423], "parti": [260, 313, 423, 453], "pycocotool": [260, 313, 417, 422], "noth": [260, 313, 460], "thu": [260, 313, 425, 450, 453], "cannot": [260, 313, 389, 417, 426, 458], "jonathanhuang": [260, 313], "image_id": [260, 313, 424], "encod": [260, 313, 459], "invok": [260, 313], "groundtruth_dict": [260, 313], "exportgroundtruthtococo": [260, 313], "groundtruth_boxes_list": [260, 313], "groundtruth_classes_list": [260, 313], "max_num_class": [260, 313], "output_path": [260, 313], "detections_list": [260, 313], "exportdetectionstococo": [260, 313], "detection_boxes_list": [260, 313], "detection_scores_list": [260, 313], "detection_classes_list": [260, 313], "cocowrapp": [260, 313], "loadannot": [260, 313], "cocoevalwrapp": [260, 313], "agnostic_mod": [260, 313], "computemetr": [260, 313], "detection_typ": [260, 313], "bbox": [260, 313, 389, 424], "hold": [260, 296, 313, 355, 410], "iou_typ": [260, 313], "iou_thr": [260, 264, 313, 317, 424], "map_point": [260, 264, 313, 317, 424], "cocoev": [260, 313], "mscoco": [260, 313], "Then": [260, 313, 438, 440, 442, 443, 457, 460], "exportsingleimagegroundtruthtococo": [260, 313], "next_annotation_id": [260, 313], "category_id_set": [260, 313], "groundtruth_box": [260, 313], "groundtruth_class": [260, 313], "groundtruth_mask": [260, 313], "groundtruth_is_crowd": [260, 313], "ingest": [260, 313], "here": [260, 313, 370, 410, 414, 415, 416, 418, 419, 424, 433, 440, 443, 445, 453, 455, 456, 463], "ones": [260, 313, 450], "exportsingleimagedetectionstococo": [260, 313], "associ": [260, 313], "uniqu": [260, 293, 313, 453], "assign": [260, 313, 383, 414, 452], "num_gt_box": [260, 313], "num_detect": [260, 264, 313, 317, 424, 425, 462], "image_height": [260, 313], "image_width": [260, 313], "detection_mask": [260, 313], "crowd": [260, 313], "insid": [260, 313, 412, 413, 446, 450, 460], "exportsingleimagedetectionboxestococo": [260, 313], "detection_box": [260, 313, 425, 462], "detection_scor": [260, 313, 425, 462], "detection_class": [260, 313, 425, 462], "exporsingleimagedetectionboxestococo": [260, 313], "exportsingleimagedetectionmaskstococo": [260, 313], "allenai": [261, 262, 314, 315], "bi": [261, 262, 314, 315], "att": [261, 262, 314, 315], "flow": [261, 262, 314, 315, 389, 390, 425], "f1_score": [261, 262, 314, 315], "ground_truth": [261, 262, 314, 315], "ground": [261, 262, 314, 315], "truth": [261, 262, 314, 315], "metric_max_over_ground_truth": [261, 262, 314, 315], "metric_fn": [261, 262, 314, 315], "exact_match_scor": [261, 314], "exact": [261, 314], "averag": [261, 262, 264, 314, 315, 317, 424, 425, 460], "articl": [261, 262, 314, 315], "paragraph": [261, 262, 314, 315], "qa": [261, 262, 314, 315], "cantain": [261, 262, 314, 315], "normalize_answ": [262, 315], "extra": [262, 315, 425], "newlin": [262, 315], "tab": [262, 315, 445, 458], "harmon": [262, 264, 315, 317], "recal": [262, 264, 315, 317], "answer_start": [262, 315], "177": [262, 315], "denver": [262, 315], "bronco": [262, 315], "nfl": [262, 315], "team": [262, 315, 387, 454], "afc": [262, 315], "super": [262, 315, 390], "bowl": [262, 315], "50": [262, 315, 390, 457, 463], "56be4db0acb8001400a502ec": [262, 315], "form": [262, 315, 412, 445], "percentag": [262, 315, 462], "tensorflowmetr": [264, 317], "maintain": [264, 317, 387, 388, 392, 427, 428, 440, 443, 455], "pytorchmetr": [264, 317], "mxnetmetr": [264, 317], "onnxrtqlmetr": [264, 317], "onnxrtitmetr": [264, 317], "metric_registri": [264, 317], "metric_typ": [264, 317], "decorator_metr": [264, 317], "basemetr": [264, 317, 351], "single_output": [264, 317], "hvd": [264, 317, 414], "wrappytorchmetr": [264, 317], "wrapmxnetmetr": [264, 317], "wraponnxrtmetr": [264, 317], "proport": [264, 317], "were": [264, 317, 431, 450], "pred_list": [264, 317], "pytorchloss": [264, 317], "mae": [264, 317, 424], "compare_label": [264, 317, 351, 424], "actual": [264, 317, 414, 457], "rmse": [264, 317, 424, 460], "squar": [264, 299, 317, 360, 424, 457, 460], "tensorflowtopk": [264, 317], "k": [264, 317, 351, 424], "among": [264, 317, 439, 457], "outcom": [264, 317], "num_correct": [264, 317], "num_sampl": [264, 317], "generaltopk": [264, 317], "cocomapv2": [264, 317, 424], "anno_path": [264, 317, 424], "map_kei": [264, 317], "detectionboxes_precis": [264, 317], "output_index_map": [264, 317, 424], "tensorflowmap": [264, 317], "tensorflowcocomap": [264, 317], "tensorflowvocmap": [264, 317], "squadf1": [264, 317, 424], "miou": [264, 317], "num_class": [264, 317], "21": [264, 317, 433, 434, 451, 457, 463], "iou": [264, 317], "intersect": [264, 317, 393, 424], "union": [264, 317, 372, 424], "onnxrtglu": [264, 317], "dlrm": [264, 317], "modelconvers": 266, "typic": [266, 293, 390, 392, 413, 415, 419, 450, 463], "basicna": 267, "model_build": [267, 270], "conf_fnam": 267, "nasbas": [270, 390], "nas_registri": 271, "nas_method": 271, "create_search_space_pool": 271, "idx": [271, 410], "enumer": [271, 372, 393, 412, 413, 414, 425, 448, 450, 458], "find_pareto_front": 271, "pareto": [271, 390], "front": [271, 390], "n_point": 271, "n_metric": 271, "n_pareto_point": 271, "gridsearch": 272, "grid": [272, 390], "whole": [272, 453], "randomsearch": 272, "bayesianoptimizationsearch": 272, "gradientsensitivityprun": 273, "pytorchmodel": [273, 274, 276, 277, 278, 327], "overwritten": [273, 274, 276, 277, 278, 433], "grouplassoprun": 274, "legaci": 275, "basicmagnitudeprun": 276, "lock": [277, 278, 421, 448, 450], "pruner_registri": 278, "clase": 278, "pruningconf": [279, 284], "tfpruningcallback": [279, 284], "input_model": [279, 284, 427, 458], "pure": [279, 284, 426, 450], "pattern_registri": 282, "pattern_typ": 282, "patternbas": 282, "mask_shap": [282, 283], "is_contigu": 282, "tile": 283, "tilepatternbas": 283, "tilepattern_1x1": 283, "1x1": [283, 412, 425, 450], "tilepattern_2x2": 283, "2x2": [283, 457], "tilepattern_1x16": 283, "1x16": 283, "tilepattern_4x1": 283, "tilepattern_1x2": 283, "1x2": [283, 457], "reset_non_value_to_default": 288, "obejct": 288, "parse_not_to_prun": 288, "update_frequency_on_step": [289, 452], "max_sparsity_ratio_per_lay": [289, 452], "magnitudeprun": 289, "snipprun": 289, "snipmomentumprun": 289, "moreoev": 289, "least": [290, 425, 450, 460], "templat": [290, 425, 450], "tree": [290, 306, 367], "huggingface_model": 290, "eager": [290, 350, 414, 421, 453, 454, 458, 463], "config_file_path": 290, "pruner_info": 290, "quantconf": 292, "server": [293, 445], "seper": 293, "opt_model": [293, 425], "fulli": [293, 425, 453, 457], "train_func": [293, 372, 414, 425, 453], "automixedprecisiontunestrategi": [294, 353], "basictunestrategi": [295, 354], "stage": [295, 300, 352, 354, 361, 412, 450, 458, 460], "polici": [295, 299, 352, 354, 360, 387, 392, 449, 462, 464], "bayesiantunestrategi": [296, 355], "acq_max": [296, 355], "ac": [296, 355], "gp": [296, 355], "y_max": [296, 355], "n_warmup": [296, 355], "10000": [296, 355, 450], "n_iter": [296, 355], "acquisit": [296, 355], "gaussian": [296, 355, 460], "relev": [296, 355], "limit": [296, 355, 383, 392, 412, 458], "acq": [296, 355], "randomst": [296, 355], "scipi": [296, 355], "x_max": [296, 355], "targetspac": [296, 355], "pbound": [296, 355], "9527": [296, 355, 425, 462], "allow": [296, 355, 412, 414, 424, 425, 426, 452, 457, 460, 462], "bayesianoptim": [296, 355], "exhaustivetunestrategi": [297, 357], "msetunestrategi": [299, 360], "mse_v2tunestrategi": [300, 361], "revert": [300, 308, 361, 369, 460], "randomtunestrategi": [301, 362], "strategy_registri": [302, 363, 460], "tunestrategi": [302, 363, 460], "tuningsamplerregistri": [305, 366], "tuningsampl": [305, 366], "tuningord": [305, 366], "Not": [305, 306, 366, 367, 383, 390], "tuningspac": [305, 306, 366, 367], "tuning_order_lst": [305, 366], "initial_op_tuning_cfg": [305, 366], "modelwisetuningsampl": [305, 366], "tuning_items_prior": [305, 366], "op_dtype_dict": [305, 366], "optuningconfig": [305, 306, 307, 366, 367, 368], "optypewisetuningsampl": [305, 366], "opwisetuningsampl": [305, 366], "fallbacktuningsampl": [305, 366], "op_dtyp": [305, 366], "accumul": [305, 366, 460], "skip_first": [305, 366], "smoothquantsampl": 305, "tuningitem": [306, 367], "item_typ": [306, 367], "pattern_to_intern": [306, 367], "default_dtyp": [306, 367], "pattern_to_path": [306, 367], "quant_mode_from_pattern": [306, 367], "internal_pattern": [306, 367], "initial_tuning_cfg_with_quant_mod": [306, 367], "op_name_typ": [306, 367], "step1": [306, 367], "step2": [306, 367], "complet": [306, 367, 393, 453, 460, 462, 463], "step3": [306, 367], "step4": [306, 367], "step5": [306, 367], "op_quant_mod": [307, 368], "ordereddefaultdict": [308, 369], "extract_data_typ": [308, 369], "data_typ": [308, 369], "sign": [308, 369, 388, 453, 456], "reverted_data_typ": [308, 369], "signed_flag": [308, 369], "get_adaptor_nam": [308, 369], "experiment": [309, 344, 349, 390, 410, 413, 414, 416, 425, 450, 452, 455, 459], "base_model": [309, 320], "keras_model": [309, 320], "mxnet_model": [309, 320], "nets_factori": [309, 320], "onnx_model": [309, 320, 344], "tensorflow_model": [309, 320, 349], "torch_model": [309, 320], "collect_layer_histogram": [309, 376], "create_obj_from_config": [309, 376], "kl_diverg": [309, 376], "load_huggingfac": [309, 376, 425], "neural_insights_util": [309, 376], "weights_detail": [309, 376], "sub_class": [317, 351], "register_customer_metr": 317, "mani": [317, 351, 422, 460, 462], "tell": [317, 351, 452], "topk": [317, 351, 414, 424, 425, 453], "matrix": [317, 351, 392, 436, 461], "frozen": [318, 326, 351, 427], "savedmodel": [318, 326, 351, 463], "chould": 318, "onnx_ml_pb2": [318, 427], "hybirdblock": [318, 351], "paramt": [318, 372], "basemodel": 319, "plai": [319, 451, 457], "role": [319, 457], "kerasmodel": 321, "get_model_fwk_nam": 322, "fwk": 322, "mxnetmodel": 323, "net": 324, "factori": [324, 331, 333, 338, 341, 343, 348], "tfslimnetsfactori": 324, "onnxmodel": [325, 344], "get_model_typ": 326, "validate_graph_nod": 326, "validate_and_inference_input_output": 326, "input_tensor_nam": 326, "output_tensor_nam": 326, "graph_sess": 326, "graph_def_sess": 326, "frozen_pb_sess": 326, "load_saved_model": 326, "saved_model_tag": 326, "signatur": 326, "saved_model_dir": 326, "tag": [326, 457, 458], "metagraphdef": 326, "keras_sess": 326, "slim_sess": 326, "checkpoint_sess": 326, "estimator_sess": 326, "saved_model_sess": 326, "tensorflowbasemodel": [326, 349], "tensorflowsavedmodelmodel": 326, "tensorflowqatmodel": 326, "tensorflowcheckpointmodel": 326, "checkpoint": [326, 382, 427], "tensorflowmodel": 326, "pytorchbasemodel": 327, "pytorchfxmodel": 327, "ipexmodel": 327, "driven": [328, 392, 425, 426, 445, 447, 458], "objective_registri": 328, "objective_custom_registri": 328, "obj_cl": 328, "eural_compressor": 328, "objective_cl": 328, "user_object": 328, "__class__": 328, "__name__": 328, "objective_cfg": 328, "usr_cfg": 328, "user_obj_cfg": 328, "easili": [328, 393, 429, 433, 445, 447, 457], "peak": [328, 447], "multiobject": 328, "metric_criterion": 328, "metric_weight": 328, "obj_criterion": 328, "obj_weight": 328, "is_measur": 328, "parserfactori": 330, "onnxrtparserfactori": 332, "onnxprofilingpars": 334, "respons": [334, 335, 339, 453], "profilingpars": 335, "profilingresult": 336, "total_execution_tim": 336, "accelerator_execution_tim": 336, "cpu_execution_tim": 336, "op_run": 336, "op_defin": 336, "tensorflowparserfactori": 337, "tensorflowprofilingpars": 339, "profilerfactori": [340, 342, 347], "create_onnx_config": 345, "ort": 345, "independ": [345, 350], "sessionopt": 345, "delete_assign": 350, "create_tf_config": 350, "tf_modul": 350, "configproto": 350, "set_eager_execut": 350, "calib_func": [351, 454], "entir": [351, 372, 389, 450, 457], "autotunestrategi": 352, "conservativetunestrategi": 356, "o0": [356, 460], "who": [356, 387], "hawq_v2tunestrategi": 358, "made": [358, 393, 453, 455, 460], "impact": [358, 455, 460], "tunestrategymeta": 363, "metaclass": 363, "lowerbitssampl": 366, "blockfallbacktuningsampl": 366, "op_block_lst": 366, "target_dtyp": 366, "build_slave_faker_model": 369, "slave": [369, 460], "virtual": [369, 451], "fun": 370, "attribute1": 370, "module_debug_level1": 370, "debug": [370, 379, 438, 442, 446, 460], "function1": 370, "param1": 370, "param2": 370, "parameter1": 370, "parameter2": 370, "o": [370, 422, 430, 449, 457], "function2": 370, "pep": 370, "484": 370, "output_model": [370, 409, 425, 458], "function3": 370, "section": [370, 412, 413, 445, 450, 452, 462], "restructuredtext": 370, "liter": 370, "attributeerror": 370, "except": [370, 383], "generator1": 370, "example_gener": 370, "exampleclass": 370, "param3": 370, "public": [370, 387, 440, 443], "attr1": 370, "attr2": 370, "attr5": 370, "api_doc_exampl": 371, "loop": [372, 389, 390, 418, 456, 460], "compressionmanag": 372, "uesd": 372, "deal": 372, "pruningconfig": 372, "orchestr": [372, 392, 421, 461], "on_train_begin": [372, 389, 412, 413, 425, 448, 450, 453], "train_loop": [372, 425, 448], "on_epoch_begin": [372, 375, 412, 413, 425, 448], "on_step_begin": [372, 375, 412, 413, 425, 448, 450], "on_after_compute_loss": [372, 412, 413, 425, 448], "backward": [372, 412, 413, 414, 425, 448, 450, 453, 455], "on_before_optimizer_step": [372, 412, 413, 425, 448, 450], "on_step_end": [372, 375, 412, 413, 425, 448], "on_epoch_end": [372, 375, 412, 413, 425, 448], "on_train_end": [372, 412, 413, 425, 448, 450, 453], "path_to_sav": 372, "manag": [372, 375, 419, 425, 428, 429, 439], "top1": [372, 450, 453, 463], "callbacks_list": 372, "layerhistogramcollector": 373, "layer_tensor": 373, "include_lay": 373, "get_func_from_config": 375, "func_dict": 375, "get_preprocess": 375, "get_metr": 375, "get_postprocess": 375, "get_algorithm": 375, "algo": 375, "create_dataset": 375, "cfg_preprocess": 375, "cfg_filter": 375, "create_dataload": 375, "dataloader_cfg": 375, "create_eval_func": 375, "postprocess_cfg": 375, "fp32_baselin": [375, 393], "baselin": [375, 456, 458], "create_train_func": 375, "train_cfg": 375, "Their": 375, "auxiliari": 376, "pretrain": [378, 428, 434], "optimizedmodel": 378, "from_pretrain": [378, 425], "save_for_huggingface_upstream": [378, 425], "output_dir": [378, 425, 433, 434], "msg": 379, "fatal": 379, "warn": 379, "warin": 379, "alia": [379, 383, 430, 435], "insight": [380, 392, 460], "register_neural_insights_workload": 380, "workload_loc": [380, 383], "workload_mod": 380, "workload": [380, 383, 451], "uuid": 380, "update_neural_insights_workload": 380, "workload_uuid": 380, "update_neural_insights_workload_accuracy_data": 380, "baseline_accuraci": 380, "optimized_accuraci": 380, "is_int8_model": 382, "checkpoint_dir": 382, "history_cfg": 382, "best_configur": 382, "best_model_weight": 382, "pt": [382, 427, 451, 453, 454], "snapshot": 382, "cfg_from_fil": 383, "yaml_fil": [383, 410, 414, 424], "lazyimport": 383, "lazi": 383, "till": [383, 460], "decorat": 383, "time_limit": 383, "get_siz": 383, "seen": [383, 393], "recurs": 383, "compute_spars": 383, "fault_tolerant_fil": 383, "equal_dict": 383, "d2": 383, "compare_kei": 383, "ignore_kei": 383, "ignor": [383, 410, 457], "cpuinfo": 383, "dump_elapsed_tim": [383, 393], "customized_msg": 383, "elaps": 383, "combine_histogram": 383, "old_hist": 383, "old": [383, 425, 455], "get_tensor_histogram": 383, "get_all_fp32_data": 383, "get_tuning_histori": 383, "tuning_history_path": 383, "num": [383, 424], "offlin": [383, 387, 425, 453, 457], "str2arrai": 383, "dequantizeweight": 383, "weight_tensor": 383, "min_filter_tensor": 383, "max_filter_tensor": 383, "scale_info": 383, "captureoutputtofil": 383, "tmp_file_path": 383, "stream": 383, "sy": [383, 431], "stderr": 383, "captur": 383, "statist": [383, 384], "header": [383, 417], "field_nam": 383, "output_handl": 383, "printer": 383, "global_st": 383, "load_data_from_pkl": 383, "pkl": 383, "dump_data_to_loc": 383, "show_memory_info": 383, "hint": 383, "dump_class_attr": 383, "compare_object": 383, "obj1": 383, "obj2": 383, "ignore_attr": 383, "comparison": [383, 455, 458], "alias_param": 383, "param_nam": 383, "param_alia": 383, "alias": 383, "print_tabl": 383, "column_map": 383, "table_entri": 383, "titl": [383, 423, 446], "insert_newlin": 383, "prettyt": 383, "column": [383, 457], "func": [383, 453, 462], "handler": [383, 460], "get_tensors_info": 383, "get_weights_detail": 383, "weightdetail": 383, "dump_tabl": 383, "filepath": 383, "file_typ": 383, "csv": [383, 390], "dump_table_to_csv": 383, "get_number_of_socket": 383, "platform": [383, 392, 421, 428, 436, 451, 453, 463], "opentri": 383, "activation_min": 383, "activation_max": 383, "print_op_list": 383, "get_op_list": 383, "minmax_file_path": 383, "input_model_tensor": 383, "optimized_model_tensor": 383, "dequan_min_max": 383, "calculate_ms": 383, "mse_metric_gap": 383, "fp32_tensor": 383, "dequantize_tensor": 383, "euclidean": [383, 412], "distanc": [383, 412], "weightsdetail": 384, "input_tensor_data": 384, "optimized_tensor_data": 384, "weightsstatist": 384, "welcom": [386, 387, 388, 392, 464], "interest": [387, 392, 458], "foster": 387, "particip": 387, "commun": 387, "harass": 387, "experi": [387, 428, 456, 457, 460], "everyon": 387, "regardless": 387, "ag": 387, "bodi": 387, "ethnic": 387, "characterist": 387, "gender": 387, "educ": 387, "socio": 387, "econom": 387, "appear": [387, 439, 445], "race": 387, "religion": 387, "sexual": 387, "orient": 387, "behavior": [387, 388, 393, 418, 427, 458, 460, 462], "contribut": [387, 392, 450], "inclus": 387, "Being": 387, "respect": [387, 418, 450, 457, 462], "viewpoint": 387, "gracefulli": 387, "critic": 387, "focus": [387, 393], "empathi": 387, "toward": [387, 412], "member": [387, 393], "unaccept": 387, "imageri": 387, "unwelcom": 387, "troll": 387, "insult": 387, "derogatori": 387, "comment": [387, 410, 424, 425, 459], "polit": 387, "attack": 387, "privat": 387, "publish": [387, 423, 426, 446, 457], "electron": 387, "explicit": 387, "permiss": 387, "inappropri": 387, "profession": 387, "clarifi": 387, "appropri": [387, 457], "fair": 387, "action": [387, 440, 443], "edit": 387, "reject": 387, "commit": [387, 388], "wiki": 387, "issu": [387, 388, 391, 422, 453, 458], "ban": 387, "temporarili": 387, "deem": 387, "threaten": 387, "offens": 387, "harm": 387, "mail": 387, "social": [387, 451], "media": [387, 451], "account": [387, 456, 460], "appoint": 387, "onlin": [387, 456], "event": [387, 458], "abus": 387, "report": [387, 388, 456], "contact": [387, 455, 456], "complaint": 387, "review": [387, 388], "investig": 387, "circumst": [387, 452], "oblig": 387, "confidenti": 387, "regard": [387, 454], "incid": 387, "separ": [387, 420, 423, 448, 452], "good": [387, 453, 460], "faith": 387, "face": [387, 392, 398, 428, 432, 451, 455], "repercuss": 387, "leadership": 387, "faq": [387, 392], "page": [387, 388, 392], "send": 388, "view": [388, 392, 415, 436, 445, 455], "pylint": 388, "flake8": 388, "autopep8": 388, "cover": [388, 416, 420, 451], "would": [388, 425, 426, 450, 453, 457], "adopt": [388, 428, 450, 451, 457], "certif": 388, "agre": 388, "j": [388, 392, 457, 463], "bug": 388, "jira": 388, "ticket": 388, "potenti": [388, 390], "risk": 388, "pr": [388, 424, 440, 443, 455], "reproduc": 388, "hardwar": [388, 392, 393, 412, 421, 425, 426, 445, 449, 450, 451, 452], "submit": [388, 451], "intend": 388, "safe": 388, "collabor": [388, 430, 436], "adher": 388, "toolkit": [389, 422, 428, 436, 451, 461], "tracer": 389, "resolv": [389, 391], "floatfunct": 389, "cat": [389, 416, 431], "done": [389, 412, 413, 429, 445, 450, 453], "10004": [389, 390, 393, 409, 412, 413, 418, 421, 426, 448, 452, 462], "neural_compressor": [389, 390, 392, 408, 409, 410, 412, 413, 414, 416, 419, 420, 424, 425, 426, 427, 447, 448, 450, 452, 453, 454, 455, 456, 457, 459, 460, 462], "eval": [389, 409, 428, 453, 458], "fail": [389, 416], "conduct": [389, 425, 433, 445, 461], "imper": 389, "therefor": [389, 425, 450, 453, 455, 457], "lot": [389, 457], "As": [389, 409, 412, 425, 439, 450, 460], "failur": 389, "successfulli": [389, 414, 451], "suggest": [389, 456], "traceabl": 389, "proxi": 389, "tutori": [389, 436, 451, 461], "prototyp": 389, "html": [389, 392, 440, 443], "highlight": 389, "untrac": 389, "ssd": [389, 416, 463], "resnet34": [389, 463], "r34": 389, "bboxes_labels_scor": 389, "prob": 389, "45": [389, 457, 463], "max_output": 389, "zip": 389, "dbox": 389, "dlabel": 389, "dscore": 389, "decode_singl": 389, "autom": [390, 428, 445, 446, 457], "artifici": 390, "ann": 390, "par": 390, "outperform": 390, "hand": 390, "propos": [390, 393, 412, 426, 457], "lie": 390, "predictor": 390, "4x": [390, 453], "shown": [390, 409, 412, 424, 425, 439, 447, 448, 450, 457, 460], "figur": [390, 438, 439, 442], "popul": 390, "inner": 390, "evolutionari": 390, "cycl": 390, "until": [390, 460], "conclud": 390, "met": [390, 418, 426, 453, 458], "yet": [390, 440, 443, 446], "simplest": [390, 431], "launcher": [390, 392, 412, 413, 436, 461], "agent": 390, "nsga2": 390, "supernet": 390, "ofa_mbv3_d234_e346_k357_w1": 390, "acc": [390, 450, 458, 463], "mac": [390, 446], "num_ev": 390, "250": [390, 450], "results_csv_path": 390, "search_result": 390, "dataset_path": 390, "ilsvrc2012": 390, "aim": [390, 392, 428, 450, 457, 460, 461], "mobilenetv3": 390, "lt": [390, 410, 449, 463], "wmt": 390, "en": 390, "de": 390, "guidelin": [391, 392], "mainstream": [392, 461], "learn": [392, 393, 409, 410, 416, 420, 421, 422, 425, 426, 428, 430, 433, 434, 436, 439, 440, 443, 445, 450, 451, 453, 457, 458, 460, 461], "runtim": [392, 393, 394, 409, 415, 418, 421, 430, 435, 436, 452], "workflow": [392, 412, 416, 422, 426, 440, 443, 458, 461], "particular": [392, 450], "wide": [392, 415, 426, 450, 453, 463], "xeon": [392, 422, 423, 426, 449, 451, 453, 454, 463], "scalabl": [392, 422, 426, 449, 451, 453, 454, 463], "processor": [392, 426, 449, 451, 453, 454, 463], "flex": [392, 422], "amd": [392, 421, 422, 463], "arm": [392, 421, 422, 463], "nvidia": [392, 421, 422, 463], "bloom": [392, 457], "176b": [392, 457], "7b": [392, 457], "stabl": [392, 422, 450, 451], "diffus": [392, 451, 463], "gpt": [392, 450, 457, 463], "hub": [392, 415, 419, 436], "hug": [392, 451], "vision": [392, 416, 432, 457], "coder": [392, 421, 429, 430, 433, 436, 439, 451], "cloud": [392, 451], "marketplac": [392, 446, 451], "googl": [392, 426, 451], "amazon": [392, 428, 436], "web": [392, 458], "servic": [392, 445, 449], "azur": [392, 451], "softwar": [392, 423, 426, 449, 450, 451, 455], "alibaba": [392, 435, 442, 443, 451], "tencent": [392, 451], "taco": [392, 451], "ai": [392, 428, 451, 454, 461], "ecosystem": [392, 451], "lightn": [392, 435], "pip": [392, 414, 417, 419, 422, 430, 433, 438, 440, 442, 443, 455], "wget": [392, 417, 419], "storag": [392, 419, 424, 457], "googleapi": [392, 419], "v1_6": [392, 419], "mobilenet_v1_1": [392, 419], "0_224_frozen": [392, 419], "quick": [392, 418, 461, 462], "overview": 392, "jupyterlab": [392, 428, 434, 436, 438, 442, 461], "studio": [392, 436, 445, 461], "topic": 392, "innov": [392, 436, 451, 461], "come": [392, 460], "soon": 392, "blog": [392, 451], "medium": [392, 451], "netflix": [392, 451], "2023": [392, 457, 463], "enhanc": [392, 428, 451, 454], "apr": [392, 451], "still": [392, 425, 451, 453, 454], "mlperf": [392, 451, 463], "5x": [392, 451], "neurip": [392, 451], "oct": [392, 451], "quala": [392, 451], "minilm": [392, 451, 463], "releas": [392, 422, 434, 436, 438, 442, 444, 464], "legal": [392, 464], "secur": [392, 449, 451, 464], "idea": [392, 450, 457, 460], "feel": 392, "look": [392, 393, 418, 424, 462], "bridg": [393, 421], "vanilla": [393, 421], "abcadaptor": 393, "__init__": [393, 409, 410, 424, 460], "query_fw_cap": 393, "query_fused_pattern": 393, "he": 393, "besid": [393, 412], "describ": [393, 418, 458], "past": 393, "mainten": 393, "difficult": [393, 457], "abil": [393, 410, 418, 457], "modif": [393, 409, 418, 433], "fragment": 393, "scenario": [393, 408, 412, 425, 450], "granular": [393, 418, 421, 431, 453, 457, 462], "semant": [393, 418], "mla": [393, 453], "becom": [393, 416, 450], "explor": 393, "inspect_tensor": 393, "op_list": [393, 458], "iteration_list": 393, "inspect_typ": 393, "save_to_disk": 393, "quantization_cfg": 393, "set_tensor": 393, "tensor_dict": 393, "diagnosis_help": 393, "linux": [408, 417, 439, 445], "x86_64": 408, "aarch64": 408, "encount": 409, "consum": 409, "previous": 409, "lack": [409, 417], "faster": [409, 411, 416, 451, 460, 463], "treat": 409, "manner": [409, 412, 427], "labelbal": [409, 410], "300": [409, 410], "16": [409, 410, 457, 463], "input_data": 409, "customis": [409, 410], "One": [410, 414, 421, 450, 451, 460], "ensp": [410, 424, 459], "imagerecord": [410, 414, 462], "image_nam": 410, "cocorecord": 410, "gt": [410, 457, 459], "int32": 410, "int64": 410, "offer": 410, "style_transf": 410, "content": 410, "tfrecorddataset": 410, "helloworld": [410, 459], "aid": 411, "deploy": [411, 428, 445, 457], "infrastructur": 411, "expens": [412, 425, 460], "deploi": [412, 425, 460], "power": [412, 425, 439, 449, 451], "mobil": [412, 425, 463], "produc": 412, "instruct": [412, 422, 426, 440, 443, 451, 452, 453], "logit": 412, "softmax": 412, "l": [412, 458, 460], "kd": 412, "kullback": 412, "leibler": 412, "patient": 412, "compact": [412, 425, 431, 450], "agnost": 412, "resourc": [412, 460], "convolut": [412, 451], "ia": 412, "attach": [412, 425, 457], "shallow": 412, "deepest": 412, "deeper": 412, "10006": [412, 413], "student_output": [412, 413], "student_loss": [412, 413], "training_func_for_nc": [412, 413], "distil_loss_conf": 412, "accordingli": [412, 436], "promis": [413, 425, 450], "huge": [413, 450], "heavi": 413, "light": 413, "booster": 413, "degrad": [413, 450, 460], "incorpor": [413, 460], "novel": [413, 428, 439, 445], "place": [413, 422, 450, 458], "illustr": 413, "comb": 413, "distillation_criterion": [413, 425, 448], "q_conf": 413, "horovod": 414, "instal": [414, 417, 419, 428, 430, 433, 436, 440, 443, 445, 446, 449, 464], "builtin": 414, "program": [414, 423, 426, 428, 445], "addition": [414, 460], "enable_eager_execut": 414, "yaml_file_path": 414, "pre_process": 414, "simpli": [414, 427, 428, 430, 433, 445], "evaluation_result": 414, "evaluation_time_cost": 414, "partit": [414, 450], "distributedsampl": 414, "train_sampl": 414, "train_dataset": [414, 453], "num_replica": 414, "rank": 414, "train_load": 414, "train_kwarg": 414, "adadelta": 414, "distributedoptim": 414, "named_paramet": 414, "broadcast_paramet": 414, "root_rank": 414, "broadcast_optimizer_st": 414, "set_epoch": 414, "batch_idx": 414, "zero_grad": [414, 425, 450], "nll_loss": 414, "log_interv": 414, "0f": 414, "tloss": 414, "6f": 414, "dry_run": 414, "test_func": 414, "host": 414, "num_of_process": 414, "002": 414, "ssh": [414, 445], "prompt": 414, "readm": 414, "exactli": [414, 429], "cd": [414, 422], "recognit": [414, 416, 450, 458], "line": [414, 421, 428, 433, 434, 458], "resnet50_v1": [414, 425], "resizecropimagenet": [414, 459], "realiz": [414, 424, 447, 454, 456], "tow": 414, "node1": 414, "node2": 414, "TO": [414, 430], "your_node1_nam": 414, "your_node2_nam": 414, "resnet50_fp32_pretrained_model": 414, "nc_resnet50_v1": 414, "resnet": [414, 463], "varieti": [415, 452, 460], "demonstr": [415, 428, 458], "10k": [415, 419], "speedup": [415, 421, 453], "2x": [415, 421, 449], "vnni": [415, 421, 452, 453], "exchang": 416, "hope": 416, "inc_model": [416, 427], "fp32_onnx_config": 416, "verifi": 416, "vgg16": [416, 463], "mobilenet": [416, 456, 463], "rcnn": 416, "torchscript": [416, 457], "unsupport": [416, 425, 450], "add_relu": 416, "conv1d_relu": 416, "conv2d_relu": 416, "group_norm": 416, "hardswish": 416, "instance_norm": 416, "layer_norm": 416, "leaky_relu": 416, "sigmoid": 416, "due": [416, 450, 453, 457, 458], "toolchain": 417, "bare": 417, "metal": 417, "sudo": [417, 431], "apt": [417, 422, 431, 439], "python3": 417, "dev": [417, 438, 442], "distutil": 417, "essenti": 417, "git": [417, 422], "libgl1": 417, "mesa": 417, "glx": 417, "libglib2": 417, "ln": 417, "sf": 417, "usr": 417, "incompat": 417, "88": [417, 456, 463], "80": [417, 457, 458, 463], "pyobject": 417, "reinstal": 417, "importerror": 417, "libgl": 417, "No": [417, 425, 449, 451], "yum": [417, 422], "opencv": [417, 439], "conda": [417, 422, 431, 439, 455], "13": [417, 422, 457], "pend": 417, "sqlalchemi": 417, "27": [417, 463], "alemb": 417, "forg": [417, 422], "friendli": [418, 425, 457, 462], "dive": [418, 461], "unless": 418, "purpos": [418, 426, 445, 452, 453], "setup": [418, 422, 440, 443, 450], "let": [418, 433, 450, 452, 462], "syntax": 418, "go": [418, 440, 443, 452, 459], "up1": 418, "up2": 418, "valid_mixed_precis": 418, "per_tensor": [418, 453, 462], "addn": 418, "grappler_optim": 418, "constfold": 418, "arithmet": 418, "debug_stripp": 418, "jupyt": [419, 436, 438, 439, 442], "lab": [419, 438, 439, 440, 442, 443], "click": [419, 421, 428, 429, 436, 439, 445, 451, 458], "major": [420, 453, 457], "concept": [420, 456, 461], "rather": 420, "custom_metr": 420, "refin": [420, 450], "These": 421, "broad": [421, 434, 461], "420": 421, "geomean": 421, "snippet": 421, "gui": [421, 450], "upload": [421, 440, 443], "button": [421, 439, 445], "dispatch": 421, "qintegerop": [421, 453], "plan": 421, "oneapi": [422, 451, 461], "analyt": [422, 451, 461], "success": 422, "frequent": 422, "ask": 422, "pypi": [422, 440, 443], "nightli": 422, "clone": [422, 438, 442], "consolid": 422, "latest": [422, 451, 455], "eas": [422, 430, 451], "along": [422, 450], "streamlin": 422, "scienc": 422, "websit": 422, "anaconda": 422, "suit": [422, 446, 458], "esri": 422, "formerli": 422, "skylak": 422, "cascad": 422, "lake": [422, 426, 451], "cooper": [422, 426, 451], "ic": [422, 451], "sapphir": 422, "rapid": 422, "hbm": 422, "arctic": 422, "sound": 422, "pont": 422, "vecchio": 422, "cento": 422, "ubuntu": [422, 449], "22": [422, 463], "04": [422, 449, 463], "fortensorflow": 422, "forpytorch": 422, "12": [422, 463], "11": [422, 424, 426, 457, 460], "tf_enable_onednn_opt": 422, "onednn": [422, 453], "newer": 422, "copyright": 423, "subject": 423, "accompani": 423, "research": [423, 457], "wish": 423, "bibtex": 423, "misc": 423, "author": 423, "feng": 423, "tian": 423, "hanwen": 423, "haihao": [423, 450], "shen": [423, 450], "suyu": 423, "chen": 423, "howpublish": 423, "year": 423, "logo": [423, 449], "atom": 423, "phi": 423, "pentium": 423, "vtune": 423, "corpor": [423, 449], "subsidiari": [423, 449], "brand": [423, 449], "claim": [423, 449], "popularli": 424, "industri": [424, 451], "label_map": 424, "decis": 424, "ap": 424, "curv": 424, "turn": [424, 439], "target_boxes_num": 424, "str_label": 424, "int_label": 424, "inturn": 424, "cocomap": 424, "vocmap": 424, "categor": 424, "multiclass": 424, "multilabel": 424, "multi_metr": 424, "newmetr": 424, "reset": 424, "reflect": [424, 449, 459], "deliv": [425, 451], "conveni": 425, "upgrad": 425, "veri": [425, 446, 453, 460], "speed": [425, 436, 450, 451, 453, 460], "fundament": 425, "comprehens": [425, 461], "kind": 425, "resort": 425, "automodelforsequenceclassif": 425, "autotoken": 425, "val_dataset": [425, 453], "val_dataload": [425, 453], "worker": [425, 453], "ping_memori": [425, 453], "formul": 425, "effort": 425, "written": 425, "onnxrt_integ": [425, 462], "onnxrt_qlinear": [425, 462], "image_tensor": [425, 462], "post_training_dynamic_qu": [425, 452, 460], "1000": [425, 462], "2000": 425, "sampling_s": [425, 462], "model_wis": [425, 462], "op_dict": 425, "op_wis": [425, 458, 462], "sigopt_api_token": [425, 456, 460], "sigopt_project_id": [425, 456, 460], "sigopt_experiment_nam": [425, 456, 460], "demo": 425, "600": [425, 463], "training_arg": 425, "emul": [425, 453], "trainer": [425, 436], "similar": [425, 452, 457, 460, 462], "briefli": [425, 457], "maxim": [425, 450, 460], "pruning_func": 425, "num_train_epoch": [425, 450], "train_dataload": [425, 450, 453], "n_gpu": 425, "gradient_accumulation_step": 425, "clip_grad_norm_": 425, "max_grad_norm": 425, "rate": [425, 450, 453], "start_epoch": [425, 452, 462], "end_epoch": [425, 452, 462], "97": [425, 457, 463], "newli": [425, 450], "on_after_optimizer_step": [425, 450], "layer3": [425, 450], "layer2": [425, 450, 453], "lr_schedul": [425, 450], "weight_decai": [425, 462], "0004": 425, "nesterov": [425, 462], "randomresizedcrop": [425, 459], "totensor": [425, 459], "485": 425, "456": 425, "406": 425, "nepoch": 425, "cnt": 425, "loss_sum": 425, "iter_bar": 425, "tqdm": 425, "desc": 425, "teacher_logit": 425, "train_fun": 425, "training_func": 425, "recent": [425, 426], "growth": [425, 426, 450], "complex": [425, 426, 450], "significantli": [425, 426, 450, 460], "bandwidth": [425, 426], "exit_polici": [425, 462], "determinist": 425, "arbitrari": [425, 448], "meaning": [425, 448], "reli": [425, 457], "prune_conf": 425, "quantization_aware_training_conf": 425, "aforement": 425, "previou": [425, 450, 455, 457, 458, 460, 461], "inset": 425, "p_conf": [425, 448], "ssd_mobilenet_v1": 425, "benchmarkconf": 425, "half": [426, 436], "sixteen": 426, "launch": [426, 446], "3rd": [426, 451, 453, 454], "gen": [426, 451, 453, 454], "codenam": 426, "boost": [426, 429, 445, 450, 451], "x86": 426, "avx512": [426, 453], "vcvtne2ps2bf16": 426, "vcvtneps2bf16": 426, "vdpbf16p": 426, "consequ": 426, "avx512_bf16": 426, "cuda": [426, 428, 430, 453], "persist": 427, "gap": 427, "brought": [427, 429, 436, 453], "tf2": 427, "h5": 427, "hybridblock": 427, "0000": 427, "saved_result": 427, "simplifi": [428, 439, 445, 450], "subsequ": [428, 445], "acquir": 428, "analysi": [428, 445, 450, 456], "heurist": [428, 445], "rule": [428, 450], "great": 428, "facilit": 428, "autocast": 428, "simultan": [428, 448, 452], "my_model": 428, "no_grad": 428, "memory_format": 428, "112": [428, 463], "rand": [428, 457], "plugin": [428, 446], "aw": [428, 436, 451, 463], "sagemak": [428, 436], "inlin": [428, 433, 436], "neural_cod": [428, 430, 432, 433, 434, 436], "bench": 428, "superbench": 428, "enjoi": [429, 433, 436], "rebuild": [429, 438, 442], "reload": [429, 446], "modern": 430, "democrat": [430, 451], "programm": [430, 436, 445], "nano_bf16_channels_last": 430, "resnet18": [430, 463], "nano_bf16_ipex_channels_last": 430, "nano_bf16_ipex": 430, "nano_bf16": 430, "nano_fp32_channels_last": 430, "nano_fp32_ipex_channels_last": 430, "nano_fp32_ipex": 430, "nano_gpu_to_cpu": 430, "nano_int8": 430, "nano_jit_bf16_channels_last": 430, "nano_jit_bf16_ipex_channels_last": 430, "nano_jit_bf16_ipex": 430, "nano_jit_bf16": 430, "nano_jit_fp32_channels_last": 430, "nano_jit_fp32_ipex_channels_last": 430, "nano_jit_fp32_ipex": 430, "nano_jit_fp32": 430, "nano_onnxruntime_fp32": 430, "nano_onnxruntime_int8_qlinear": 430, "openvino": 430, "nano_openvino_fp32": 430, "nano_openvino_int8": 430, "bc": [431, 439], "conda_prefix": 431, "echo": 431, "tradit": [431, 450], "libjemalloc": 431, "libiomp5": 431, "home": 431, "lib": 431, "ld_preload": 431, "malloc_conf": 431, "oversize_threshold": 431, "background_thread": 431, "metadata_thp": 431, "dirty_decay_m": 431, "9000000000": 431, "muzzy_decay_m": 431, "kmp_affin": 431, "kmp_blocktim": 431, "dnnl_primitive_cache_capac": 431, "cpufreq": 431, "scaling_governor": 431, "powersav": 431, "tee": 431, "pytorch_jit_script": [432, 435], "pytorch_channels_last": [432, 435], "run_bench": 432, "patch": [432, 445], "patch_path": 432, "your_patch_path": 432, "sweep": 432, "sweep_object": 432, "bench_config": 432, "bench_featur": 432, "sai": 433, "run_glu": [433, 434], "requisit": 433, "task_nam": [433, 434], "do_ev": [433, 434], "remain": 433, "itself": 433, "run_glue_optim": 433, "static_ipex": 433, "auto_qu": 434, "v4": [434, 463], "albert": [434, 463], "sst2": 434, "alexnet": [434, 463], "pytorch_amp": 435, "optimize_for_infer": 435, "pytorch_jit_trac": 435, "pytorch_jit_script_ofi": 435, "pytorch_jit_trace_ofi": 435, "torchdynamo": 435, "pytorch_torchdynamo_jit_script": 435, "pytorch_torchdynamo_jit_trac": 435, "pytorch_torchdynamo_jit_script_ofi": 435, "pytorch_torchdynamo_jit_trace_ofi": 435, "pytorch_inc_bf16": 435, "pytorch_inc_static_quant_fx": 435, "pytorch_inc_static_quant_ipex": 435, "pytorch_inc_dynamic_qu": 435, "pytorch_ipex_fp32": 435, "pytorch_ipex_bf16": 435, "pytorch_ipex_int8_static_qu": 435, "pytorch_ipex_int8_dynamic_qu": 435, "blade": 435, "disc": 435, "pytorch_aliblad": 435, "pytorch_lightning_bf16_cpu": 435, "tensorflow_amp": 435, "keras_amp": 435, "tensorflow_inc": 435, "keras_inc": 435, "onnx_inc_static_quant_qlinear": 435, "onnx_inc_static_quant_qdq": 435, "onnx_inc_dynamic_qu": 435, "optimum": [435, 436], "pytorch_inc_huggingface_optimum_stat": 435, "pytorch_inc_huggingface_optimum_dynam": 435, "intel_extension_for_transform": 435, "bigdl": [435, 436], "nano": [435, 436], "nano_": 435, "inc_auto": 435, "delight": 436, "announc": 436, "v": [436, 445, 450, 460, 462], "500": 436, "isa": 436, "xpu": 436, "delta": 436, "acc_delta": 436, "int8_acc": 436, "fp32_acc": 436, "ext": [438, 440, 442, 443, 444], "nodej": [438, 442], "jlpm": [438, 442], "pin": [438, 442], "yarn": [438, 442], "npm": [438, 439, 442], "lieu": [438, 442], "labextens": [438, 439, 442], "typescript": [438, 442], "watch": [438, 442], "termin": [438, 439, 442], "immedi": [438, 442, 450], "refresh": [438, 442], "browser": [438, 442], "wait": [438, 442, 445], "rebuilt": [438, 442], "easier": [438, 442, 445, 451], "symlink": [438, 442], "down": 439, "finish": 439, "enter": [439, 445], "blank": 439, "cell": 439, "gain": [439, 448, 451], "mkl": 439, "jemalloc": 439, "pip3": 439, "headless": 439, "pyproject": [440, 443], "toml": [440, 443], "twine": [440, 443], "whl": [440, 443], "dist": [440, 443], "sdist": [440, 443], "bdist_wheel": [440, 443], "deprec": [440, 443, 459], "frontend": [440, 443], "login": [440, 443, 456], "repositori": [440, 443], "cut": [440, 443], "fork": [440, 443], "admin_github_token": [440, 443], "pypi_token": [440, 443], "npm_token": [440, 443], "secret": [440, 443], "panel": [440, 443, 445], "draft": [440, 443], "changelog": [440, 443, 444], "pkg": [440, 443], "bot": [440, 443], "pick": [440, 443, 446], "feedstock": [440, 443], "hatch": 443, "notabl": 444, "vscode": [444, 446], "daili": 445, "give": [445, 460], "advantag": [445, 450, 452, 460], "remot": 445, "re": 445, "market": 445, "uninstal": 445, "fill": [445, 456, 459], "upper": 445, "sidebar": 445, "hover": 445, "track": [445, 456], "argpars": 445, "pop": 445, "diff": 445, "manifest": 446, "declar": 446, "palett": 446, "registercommand": 446, "amodio": 446, "tsl": 446, "matcher": 446, "dbaeumer": 446, "eslint": 446, "press": 446, "f5": 446, "ctrl": [446, 463], "hello": 446, "world": 446, "breakpoint": 446, "consol": 446, "relaunch": 446, "toolbar": 446, "node_modul": 446, "viewlet": 446, "dropdown": 446, "runner": 446, "startup": 446, "bundl": 446, "multi_object": 447, "benefit": 448, "instanti": 448, "platinum": [449, 463], "8358": 449, "manufactur": 449, "m50cyp2sbstd": 449, "bio": 449, "se5c620": 449, "86b": 449, "0005": 449, "2202160810": 449, "microcod": 449, "0xd000332": 449, "irq": 449, "60ghz": 449, "6chz": 449, "turbo": 449, "perf": 449, "512gb": 449, "16x32gb": 449, "ddr4": 449, "3200": 449, "mt": 449, "nic": 449, "1x": 449, "ethernet": 449, "100mb": 449, "i350": 449, "gigabit": 449, "drive": 449, "intel_ssdsckkb48": 449, "447": 449, "1g": 449, "publicli": 449, "degre": 449, "mark": 449, "trademark": 449, "neuron": 450, "art": 450, "grown": 450, "unpreced": 450, "increasingli": 450, "crucial": 450, "stand": 450, "delet": 450, "commonli": 450, "salient": 450, "shrink": 450, "contextu": 450, "howev": [450, 457], "scene": 450, "haven": 450, "color": 450, "lowest": [450, 460], "formula": [450, 457], "emsp": 450, "partial": [450, 453], "downstream": 450, "finetun": 450, "prone": 450, "larger": [450, 457], "co": 450, "discourag": 450, "push": [450, 457], "penal": 450, "parameter": 450, "exemplifi": 450, "complement": 450, "fortieth": 450, "miss": [450, 453], "pruner2": 450, "mention": 450, "readi": 450, "hesit": 450, "sst": [450, 463], "25": [450, 457, 463], "63": [450, 457, 463], "24": [450, 457, 460, 463], "35": [450, 463], "flan": 450, "t5": 450, "english": 450, "romanian": 450, "404": [450, 463], "381": 450, "yolov5": 450, "75": [450, 457, 463], "2x1": [450, 463], "801": 450, "7895": 450, "signific": [450, 451, 457], "reduct": [450, 462], "namhoon": 450, "lee": 450, "thalaiyasingam": 450, "ajanthan": 450, "philip": 450, "torr": 450, "2019": 450, "zafrir": 450, "ofir": 450, "ariel": 450, "larei": 450, "boudoukh": 450, "mosh": 450, "wasserblat": 450, "preprint": [450, 457], "2111": 450, "05754": 450, "2021": 450, "heterogen": 451, "mar": 451, "busi": 451, "jan": 451, "amx": 451, "4th": [451, 453], "mleffici": 451, "dec": 451, "wechat": 451, "deepen": 451, "foundat": 451, "intellig": 451, "vmware": 451, "applianc": 451, "bitnami": 451, "nov": 451, "sota": 451, "few": [451, 460], "plug": 451, "twitter": 451, "linkedin": 451, "zone": 451, "land": 451, "gcp": 451, "pat": 451, "keynot": 451, "intelon": 451, "sep": 451, "chines": 451, "aug": 451, "purif": 451, "sacrif": 451, "jun": 451, "partner": 451, "feb": 451, "joint": 451, "msft": 451, "bilibili": 451, "gestalt": 451, "ml": 451, "doubl": 451, "reconstruct": 451, "abound": 451, "lpot": [451, 455], "nextplatform": 451, "cern": 451, "gan": 451, "3dgan": 451, "iml": 451, "workshop": 451, "asplo": 451, "18": [451, 463], "highli": 451, "intelcaff": 451, "aris": 452, "henc": 452, "onnxrt_qoper": 452, "quant_aware_train": 452, "weight_compress": [452, 462], "initial_spars": [452, 462], "prune_typ": [452, 462], "basic_magnitud": [452, 462], "update_frequ": 452, "prune_domain": 452, "tile_pattern_1x1": 452, "invent": 453, "int4": 453, "cost": 453, "On": 453, "theoret": 453, "affin": 453, "zeropoint": 453, "asymmetr": [453, 460], "255": [453, 457], "overflow": 453, "solv": [453, 455], "fbgemm": 453, "unseen": 453, "enough": 453, "peopl": 453, "mimic": 453, "fact": 453, "ultim": 453, "pain": 453, "lossi": 453, "chart": [453, 456, 458], "understand": [453, 458, 461], "philosophi": 453, "request": 453, "neither": 453, "nor": 453, "val_load": 453, "avg": 453, "themselv": 453, "tensorrtexecutionprovid": 453, "cudaexecutionprovid": 453, "ON": 454, "forc": 454, "postposttrainingquantconfig": 454, "bf16wrapper": 454, "retrac": 454, "site": 455, "assist": 455, "sed": 455, "your_script": 455, "backbon": 456, "interact": 456, "sigopt_experiment_id": 456, "nc": [456, 460], "certain": 456, "suffici": 456, "ordinari": 456, "capac": 456, "receiv": 456, "latenc": [456, 460], "draw": [456, 460], "durat": 456, "8266": 456, "8372": 456, "2132": 456, "83": [456, 457, 463], "7495": 456, "8299": 456, "8294": 456, "85": [456, 457, 463], "0837": 456, "8291": 456, "4469": 456, "llm": 457, "gigant": 457, "systemat": 457, "outlier": 457, "quantif": 457, "migrat": [457, 461], "difficulti": 457, "mathemat": 457, "allevi": 457, "coarsest": 457, "finer": [457, 460], "row": 457, "matric": 457, "similarli": 457, "finest": 457, "consumpt": 457, "why": [457, 458], "suppos": 457, "6839": 457, "4741": 457, "7451": 457, "9301": 457, "1742": 457, "6835": 457, "frac": 457, "q_min": 457, "q_max": 457, "clip": 457, "zp": 457, "q_x": 457, "clamp_": 457, "round_": 457, "w_q": 457, "00296431384049356": 457, "59": [457, 463], "172": 457, "192": 457, "w_dq": 457, "1220": 457, "0500": 457, "1430": 457, "2570": 457, "1890": 457, "mseloss": 457, "1983354538679123": 457, "6848": 457, "4743": 457, "7440": 457, "9308": 457, "1749": 457, "385297635664756e": 457, "07": [457, 462, 463], "affect": 457, "quantize_per_channel": 457, "x_tmp": 457, "detach": 457, "keepdim": 457, "divid": [457, 460], "dequantize_per_channel": 457, "0029": [457, 463], "0036": 457, "162": [457, 463], "48": [457, 463], "72": [457, 463], "93": [457, 463], "207": [457, 463], "139": [457, 463], "6837": 457, "4734": 457, "1751": 457, "6821": 457, "637690492221736e": 457, "6376e": 457, "3852e": 457, "cdot": 457, "quantize_per_tensor_absmax": 457, "n_bit": 457, "div_": 457, "0806": 457, "7589": 457, "6038": 457, "3815": 457, "5040": 457, "7174": 457, "5444": 457, "5826": 457, "7772": 457, "5555": 457, "3740": 457, "3253": 457, "0698": 457, "1381": 457, "5972": 457, "0086": 457, "0737": 457, "8298": 457, "6883": 457, "2991": 457, "1601": 457, "6506": 457, "8246": 457, "3924": 457, "3845": 457, "8768": 457, "w_scale": 457, "x_q": 457, "x_scale": 457, "84": [457, 463], "120": 457, "0059755356051027775": 457, "89": [457, 463], "119": [457, 463], "57": [457, 463], "91": [457, 463], "006533813662827015": 457, "y_q": 457, "17509": 457, "7608": 457, "4055": 457, "16599": 457, "21020": 457, "10016": 457, "9860": 457, "22444": 457, "y_dq": 457, "6836": 457, "2970": 457, "1583": 457, "6481": 457, "8207": 457, "3911": 457, "3850": 457, "8763": 457, "though": 457, "prove": 457, "simplic": 457, "middl": 457, "denot": 457, "fp1": 457, "fp2": 457, "subsect": [457, 462], "explain": 457, "even": 457, "suppress": 457, "straightforward": 457, "intuit": 457, "x1": [457, 460], "x2": [457, 460], "herebi": 457, "recalcul": 457, "sq": 457, "overhead": 457, "stai": 457, "hardtanh": 457, "t5norm": 457, "llamanorm": 457, "groupnorm": 457, "lambada": 457, "sweet": 457, "spot": 457, "region": 457, "bigscienc": 457, "560m": 457, "65": [457, 463], "44": [457, 463], "66": [457, 463], "76": [457, 463], "1b7": 457, "71": [457, 463], "43": [457, 463], "67": [457, 463], "78": [457, 459, 463], "56": [457, 463], "58": [457, 463], "55": [457, 463], "3b": 457, "73": [457, 463], "69": [457, 463], "74": [457, 463], "7b1": 457, "77": [457, 463], "46": [457, 463], "17": [457, 463], "82": [457, 463], "52": [457, 463], "facebook": 457, "125m": 457, "41": [457, 463], "70": [457, 463], "94": [457, 459, 463], "79": [457, 458, 463], "60": [457, 463], "81": [457, 463], "26": [457, 463], "39": [457, 463], "68": [457, 459, 463], "eleutherai": 457, "6b": 457, "29": [457, 463], "96": [457, 463], "jason": 457, "wei": 457, "emerg": 457, "transact": 457, "yvinec": 457, "edouard": 457, "proceed": 457, "cvf": 457, "winter": 457, "xiui": 457, "2209": 457, "13325": 457, "xiao": 457, "guangxuan": 457, "2211": 457, "10438": 457, "discov": 458, "valuabl": 458, "instrument": 458, "writer": 458, "_pre_eval_hook": 458, "_post_eval_hook": 458, "submodul": 458, "whitelist": 458, "_recordingobserv": 458, "output_tensors_dict": 458, "current_it": 458, "get_tensor_valu": 458, "_observer_forward_hook": 458, "activation_post_process": 458, "_add_observer_": 458, "named_children": 458, "leaf": 458, "add_modul": 458, "register_forward_hook": 458, "dump_tim": 458, "summarywrit": 458, "_acc": 458, "tune_": 458, "add_graph": 458, "get_observer_dict": 458, "observer_dict": 458, "is_quant": 458, "add_histogram": 458, "shell": 458, "bind_al": 458, "logdir_spec": 458, "tune_0_acc0": 458, "tune_1": 458, "tune_1_acc0": 458, "four": 458, "baseline_acc_0": 458, "776": 458, "tune_1_acc_0": 458, "095": 458, "runs_v3": 458, "image_recognit": 458, "run_tuning_dump_tensor": 458, "sh": 458, "inceptionv3": 458, "skip": [458, 460], "v0": 458, "cg": 458, "conv0": 458, "bash": 458, "run_tun": 458, "topologi": 458, "inception_v3": 458, "dataset_loc": 458, "inceptionv3_fp32_pretrained_model": 458, "nc_inceptionv3": 458, "inceptionv3_dump_tensor": 458, "poor": 458, "eightbit": 458, "disappear": 458, "centercrop": 459, "randomcrop": 459, "cropres": 459, "decodeimag": 459, "jpeg": 459, "encodejp": 459, "alignimagechannel": 459, "116": 459, "103": 459, "017": 459, "bilinearimagenet": [459, 462], "topilimag": 459, "padding_mod": 459, "border": 459, "pixel": 459, "edg": 459, "colorjitt": 459, "bright": 459, "satur": 459, "hue": 459, "jitter": 459, "tondarrai": 459, "quickli": [460, 461], "travers": 460, "human": 460, "concret": 460, "aggress": 460, "classic": 460, "six": 460, "At": 460, "ii": 460, "iii": 460, "post_training_auto_qu": 460, "iv": 460, "vi": 460, "increment": 460, "primari": 460, "highest": 460, "spent": 460, "hawq_v2_loss": 460, "model_loss": 460, "black": 460, "compli": 460, "posterior": 460, "focu": 460, "short": 460, "never": 460, "loglevel": 460, "endlessli": 460, "perspect": 460, "smbo": 460, "trial": 460, "appl": 460, "surrog": 460, "repeat": 460, "quantil": 460, "densiti": 460, "parzen": 460, "greatest": 460, "hour": 460, "dai": 460, "next_tune_cfg": 460, "overridden": 460, "cluster": 460, "seamlessli": 460, "mpi": 460, "replic": 460, "replica": 460, "fed": 460, "synchron": 460, "mpirun": 460, "number_of_process": 460, "run_cmd": 460, "abctunestrategi": 460, "familiar": 461, "notebook": 461, "organ": 462, "logic": 462, "mobilenet_v1": 462, "hyper": 462, "40": [462, 463], "06": [462, 463], "beta_1": 462, "beta_2": 462, "epsilon": 462, "sparsecategoricalcrossentropi": 462, "sum_over_batch_s": 462, "from_logit": 462, "54": [462, 463], "19": [462, 463], "overal": 462, "8380": 463, "visit": 463, "performancethroughput": 463, "sec": 463, "86": 463, "00": 463, "170": 463, "82x": 463, "92": 463, "85x": 463, "61": 463, "83x": 463, "densenet": 463, "121": 463, "274": 463, "148": 463, "161": 463, "132": 463, "39x": 463, "169": 463, "38": 463, "36": 463, "191": 463, "31": 463, "118": 463, "61x": 463, "cnn": 463, "incept": 463, "37": 463, "84x": 463, "resnet101": 463, "21x": 463, "70x": 463, "51": 463, "14x": 463, "34": 463, "955": 463, "328": 463, "91x": 463, "709": 463, "282": 463, "51x": 463, "v3": 463, "337": 463, "09": 463, "160": 463, "11x": 463, "438": 463, "204": 463, "223": 463, "105": 463, "12x": 463, "10x": 463, "47": 463, "1347": 463, "439": 463, "07x": 463, "1192": 463, "492": 463, "42x": 463, "412": 463, "376": 463, "662": 463, "397": 463, "66x": 463, "299": 463, "23": 463, "154": 463, "93x": 463, "476": 463, "227": 463, "fashion": 463, "2734": 463, "1299": 463, "498": 463, "178": 463, "79x": 463, "427": 463, "173": 463, "47x": 463, "resnetv2": 463, "194": 463, "146": 463, "33x": 463, "237": 463, "187": 463, "27x": 463, "152": 463, "155": 463, "38x": 463, "302": 463, "215": 463, "40x": 463, "03": 463, "346": 463, "312": 463, "277": 463, "60x": 463, "273": 463, "31x": 463, "18x": 463, "53x": 463, "24x": 463, "219": 463, "vgg19": 463, "193": 463, "11506": 463, "9665": 463, "19x": 463, "xception": 463, "262": 463, "137": 463, "barthez": 463, "143": 463, "02x": 463, "20x": 463, "209": 463, "08x": 463, "221": 463, "stsb": 463, "218": 463, "16x": 463, "62": 463, "57x": 463, "55x": 463, "56x": 463, "53": 463, "89x": 463, "blendcnn": 463, "4885": 463, "3715": 463, "camembert": 463, "206": 463, "09x": 463, "deberta": 463, "125": 463, "366": 463, "197": 463, "399": 463, "flaubert": 463, "592": 463, "385": 463, "54x": 463, "wikitext": 463, "hubert": 463, "446": 463, "181": 463, "46x": 463, "layoutlm": 463, "longform": 463, "49": 463, "mbart": 463, "625": 463, "451": 463, "lvwerra": 463, "pegasu": 463, "samsum": 463, "peleenet": 463, "402": 463, "29x": 463, "pokemon": 463, "275": 463, "334": 463, "48x": 463, "reform": 463, "crime": 463, "punish": 463, "153": 463, "06x": 463, "657": 463, "327": 463, "01x": 463, "812": 463, "344": 463, "36x": 463, "360": 463, "23x": 463, "resnext101": 463, "32x8d": 463, "182": 463, "squeezebert": 463, "195": 463, "150": 463, "30x": 463, "75x": 463, "transfo": 463, "xl": 463, "41x": 463, "wave2vec2": 463, "22x": 463, "102": 463, "00x": 463, "115": 463, "17x": 463, "yolo": 463, "232": 463, "28x": 463, "664": 463, "329": 463, "832": 463, "338": 463, "433": 463, "164": 463, "63x": 463, "836": 463, "1396": 463, "463": 463, "90x": 463, "159": 463, "32x": 463, "968": 463, "473": 463, "05x": 463, "958": 463, "477": 463, "arcfac": 463, "126": 463, "78x": 463, "298": 463, "124": 463, "624": 463, "254": 463, "45x": 463, "caffenet": 463, "1432": 463, "540": 463, "65x": 463, "1460": 463, "357": 463, "265": 463, "35x": 463, "86x": 463, "524": 463, "duc": 463, "efficientnet": 463, "1211": 463, "758": 463, "856": 463, "762": 463, "emot": 463, "ferplu": 463, "925": 463, "694": 463, "fcn": 463, "25x": 463, "googlenet": 463, "771": 463, "571": 463, "763": 463, "579": 463, "hf": 463, "156": 463, "multilingu": 463, "99x": 463, "199": 463, "104": 463, "73x": 463, "449": 463, "74x": 463, "l12": 463, "h384": 463, "466": 463, "247": 463, "88x": 463, "l6": 463, "523": 463, "354": 463, "183": 463, "107": 463, "spanbert": 463, "208": 463, "795": 463, "780": 463, "591": 463, "515": 463, "15x": 463, "2370": 463, "1526": 463, "2216": 463, "1506": 463, "2078": 463, "1028": 463, "1762": 463, "76x": 463, "mobilenetv2": 463, "2615": 463, "1645": 463, "59x": 463, "2461": 463, "1674": 463, "766": 463, "431": 463, "77x": 463, "575": 463, "430": 463, "34x": 463, "747": 463, "564": 463, "594": 463, "590": 463, "643": 463, "253": 463, "shufflenet": 463, "2354": 463, "1461": 463, "1850": 463, "1368": 463, "squeezenet": 463, "2484": 463, "1912": 463, "2526": 463, "1911": 463, "710": 463, "549": 463, "622": 463, "497": 463, "652": 463, "507": 463, "573": 463, "470": 463, "527": 463, "396": 463, "68x": 463, "tini": 463, "647": 463, "514": 463, "26x": 463, "ultrafac": 463, "314": 463, "50x": 463, "304": 463, "316": 463, "315": 463, "zfnet": 463, "462": 463, "268": 463, "72x": 463, "465": 463, "62x": 463, "436": 463, "270": 463, "429": 463, "92x": 463, "94x": 463, "331": 463, "242": 463, "37x": 463, "98x": 463, "taskdataset": 463, "accuracyspars": 463, "ratiospars": 463, "commentsbalancedor": 463, "unbalanc": 463, "mini": 463, "answeringsquad": 463, "87f1": 463, "momentumunbalanc": 463, "momentumbalanc": 463, "90f1": 463, "59f1": 463, "23f1": 463, "classificationmrpc": 463, "52f1": 463, "26f1": 463, "classificationsst": 463, "61accuraci": 463, "recognitionimagenet": 463, "95top1": 463, "v5s6": 463, "detectioncoco": 463, "ap0": 463, "6ap0": 463, "393": 463, "584": 463, "34f1": 463, "lassounbalanc": 463, "classificationmnli": 463, "mm": 463, "allbalanc": 463, "32accuraci": 463, "sensitivitybalanc": 463, "classificationqqp": 463, "classificationqnli": 463, "54accuraci": 463, "em": 463, "7965": 463, "wideresnet40": 463, "9522": 463, "8178": 463, "0213": 463, "8235": 463, "027": 463, "5494": 463, "7153": 463, "5540": 463, "0046": 463, "5523": 463, "vgg": 463, "bn": 463, "7022": 463, "7415": 463, "7025": 463, "0003": 463, "wip": 463, "6739": 463, "7399": 463, "6845": 463, "0106": 463, "7034": 463, "8382": 463, "bilstm": 463, "8314": 463, "9403": 463, "9048": 463, "0734": 463, "7323": 463, "8256": 463, "8084": 463, "8814": 463, "7442": 463, "8371": 463, "0119": 463, "0115": 463, "tinybert": 463, "8018": 463, "8044": 463, "8363": 463, "8411": 463, "8025": 463, "8074": 463, "0007": 463, "0030": 463, "8626": 463, "8213": 463, "9091": 463, "8782": 463, "8684": 463, "8259": 463, "0058": 463, "distilroberta": 463, "6057": 463, "6455": 463, "6187": 463, "0130": 463, "c6i": 463, "2xlarg": 463, "c6a": 463, "c6g": 463, "a100cuda": 463, "executionprovid": 463}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [309, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "adaptor"], [152, 0, 0, "-", "algorithm"], [155, 0, 0, "-", "benchmark"], [159, 0, 0, "-", "compression"], [173, 0, 0, "-", "conf"], [175, 0, 0, "-", "config"], [176, 0, 0, "-", "contrib"], [201, 0, 0, "-", "data"], [256, 0, 0, "-", "experimental"], [316, 0, 0, "-", "metric"], [318, 0, 0, "-", "mix_precision"], [320, 0, 0, "-", "model"], [328, 0, 0, "-", "objective"], [329, 0, 0, "-", "profiling"], [351, 0, 0, "-", "quantization"], [359, 0, 0, "-", "strategy"], [371, 0, 0, "-", "template"], [372, 0, 0, "-", "training"], [376, 0, 0, "-", "utils"], [385, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "adaptor"], [3, 0, 0, "-", "keras"], [7, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [17, 0, 0, "-", "ox_utils"], [40, 0, 0, "-", "pytorch"], [41, 0, 0, "-", "query"], [42, 0, 0, "-", "tensorflow"], [106, 0, 0, "-", "tf_utils"], [144, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[1, 1, 1, "", "Adaptor"], [1, 2, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[3, 1, 1, "", "KerasAdaptor"], [3, 1, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras_utils": [[4, 0, 0, "-", "conv2d"], [5, 0, 0, "-", "dense"], [6, 0, 0, "-", "depthwise_conv2d"], [8, 0, 0, "-", "pool2d"], [9, 0, 0, "-", "quantizer"], [10, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, 1, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 1, 1, "", "CalibCollector"], [13, 1, 1, "", "CalibData"], [13, 1, 1, "", "CollectorBase"], [13, 1, 1, "", "DataIterLoader"], [13, 1, 1, "", "DataLoaderWrap"], [13, 1, 1, "", "NameCollector"], [13, 1, 1, "", "OpType"], [13, 1, 1, "", "TensorCollector"], [13, 2, 1, "", "amp_convert"], [13, 2, 1, "", "calib_model"], [13, 2, 1, "", "check_mx_version"], [13, 2, 1, "", "combine_capabilities"], [13, 2, 1, "", "create_data_example"], [13, 2, 1, "", "distribute_calib_tensors"], [13, 2, 1, "", "ensure_list"], [13, 2, 1, "", "fuse"], [13, 2, 1, "", "get_framework_name"], [13, 2, 1, "", "is_model_quantized"], [13, 2, 1, "", "isiterable"], [13, 2, 1, "", "make_module"], [13, 2, 1, "", "make_nc_model"], [13, 2, 1, "", "make_symbol_block"], [13, 2, 1, "", "ndarray_to_device"], [13, 2, 1, "", "parse_tune_config"], [13, 2, 1, "", "prepare_dataloader"], [13, 2, 1, "", "prepare_model"], [13, 2, 1, "", "prepare_model_data"], [13, 2, 1, "", "quantize_sym_model"], [13, 2, 1, "", "query_quantizable_nodes"], [13, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[14, 1, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 1, 1, "", "ONNXRT_QDQAdaptor"], [14, 1, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 1, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [16, 0, 0, "-", "calibrator"], [29, 0, 0, "-", "operators"], [38, 0, 0, "-", "quantizer"], [39, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, 1, 1, "", "CalibratorBase"], [16, 1, 1, "", "HistogramCollector"], [16, 1, 1, "", "KLCalibrator"], [16, 1, 1, "", "MinMaxCalibrator"], [16, 1, 1, "", "PercentileCalibrator"], [16, 2, 1, "", "calib_registry"], [16, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[18, 0, 0, "-", "activation"], [19, 0, 0, "-", "argmax"], [20, 0, 0, "-", "attention"], [21, 0, 0, "-", "binary_op"], [22, 0, 0, "-", "concat"], [23, 0, 0, "-", "conv"], [24, 0, 0, "-", "direct_q8"], [25, 0, 0, "-", "embed_layernorm"], [26, 0, 0, "-", "gather"], [27, 0, 0, "-", "gavgpool"], [28, 0, 0, "-", "gemm"], [30, 0, 0, "-", "lstm"], [31, 0, 0, "-", "matmul"], [32, 0, 0, "-", "maxpool"], [33, 0, 0, "-", "ops"], [34, 0, 0, "-", "pad"], [35, 0, 0, "-", "pooling"], [36, 0, 0, "-", "resize"], [37, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, 1, 1, "", "ActivationOperator"], [18, 1, 1, "", "QActivationOperator"], [18, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, 1, 1, "", "ArgMaxOperator"], [19, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, 1, 1, "", "AttentionOperator"], [20, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, 1, 1, "", "BinaryOperator"], [21, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, 1, 1, "", "ConcatOperator"], [22, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, 1, 1, "", "ConvOperator"], [23, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, 1, 1, "", "Direct8BitOperator"], [24, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, 1, 1, "", "EmbedLayerNormalizationOperator"], [25, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, 1, 1, "", "GatherOperator"], [26, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, 1, 1, "", "GlobalAveragePoolOperator"], [27, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, 1, 1, "", "GemmOperator"], [28, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, 1, 1, "", "MatMulOperator"], [31, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, 1, 1, "", "MaxPoolOperator"], [32, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[33, 1, 1, "", "Operator"], [33, 1, 1, "", "QOperator"], [33, 2, 1, "", "op_registry"], [33, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[34, 1, 1, "", "PadOperator"], [34, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[35, 1, 1, "", "PoolOperator"], [35, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[36, 1, 1, "", "QResizeOperator"], [36, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[37, 1, 1, "", "QSplitOperator"], [37, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[38, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[39, 1, 1, "", "QuantFormat"], [39, 1, 1, "", "QuantType"], [39, 1, 1, "", "QuantizationMode"], [39, 1, 1, "", "QuantizedInitializer"], [39, 1, 1, "", "QuantizedValue"], [39, 1, 1, "", "QuantizedValueType"], [39, 1, 1, "", "ValueInfo"], [39, 2, 1, "", "adjust_weights_per_input"], [39, 2, 1, "", "adjust_weights_per_op"], [39, 2, 1, "", "attribute_to_kwarg"], [39, 2, 1, "", "calculate_scale_zp"], [39, 2, 1, "", "cast_tensor"], [39, 2, 1, "", "collate_preds"], [39, 2, 1, "", "dequantize_data"], [39, 2, 1, "", "dequantize_data_with_scale_zero"], [39, 2, 1, "", "dtype_to_name"], [39, 2, 1, "", "find_by_name"], [39, 2, 1, "", "float_to_bfloat16"], [39, 2, 1, "", "float_to_float16"], [39, 2, 1, "", "fold_scale"], [39, 2, 1, "", "get_smooth_scales_per_input"], [39, 2, 1, "", "get_smooth_scales_per_op"], [39, 2, 1, "", "insert_smooth_mul_op_per_input"], [39, 2, 1, "", "insert_smooth_mul_op_per_op"], [39, 2, 1, "", "is_B_transposed"], [39, 2, 1, "", "make_dquant_node"], [39, 2, 1, "", "make_quant_node"], [39, 2, 1, "", "quantize_data"], [39, 2, 1, "", "quantize_data_per_channel"], [39, 2, 1, "", "quantize_data_with_scale_zero"], [39, 2, 1, "", "quantize_nparray"], [39, 2, 1, "", "remove_init_from_model_input"], [39, 2, 1, "", "split_shared_bias"], [39, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.pytorch": [[40, 1, 1, "", "PyTorchAdaptor"], [40, 1, 1, "", "PyTorchQuery"], [40, 1, 1, "", "PyTorch_FXAdaptor"], [40, 1, 1, "", "PyTorch_IPEXAdaptor"], [40, 1, 1, "", "TemplateAdaptor"], [40, 2, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[41, 1, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[42, 1, 1, "", "TensorFlowAdaptor"], [42, 1, 1, "", "TensorflowQuery"], [42, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[43, 0, 0, "-", "graph_converter"], [44, 0, 0, "-", "graph_converter_without_calib"], [82, 0, 0, "-", "graph_rewriter"], [105, 0, 0, "-", "graph_util"], [107, 0, 0, "-", "quantize_graph"], [134, 0, 0, "-", "quantize_graph_common"], [135, 0, 0, "-", "tf2onnx_converter"], [138, 0, 0, "-", "transform_graph"], [141, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[43, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[44, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[46, 0, 0, "-", "bf16"], [71, 0, 0, "-", "generic"], [81, 0, 0, "-", "graph_base"], [90, 0, 0, "-", "int8"], [96, 0, 0, "-", "onnx"], [101, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[45, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[45, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[47, 0, 0, "-", "convert_add_to_biasadd"], [48, 0, 0, "-", "convert_layout"], [49, 0, 0, "-", "convert_leakyrelu"], [50, 0, 0, "-", "convert_nan_to_random"], [51, 0, 0, "-", "convert_placeholder_to_const"], [52, 0, 0, "-", "dequantize_cast_optimizer"], [53, 0, 0, "-", "dilated_contraction"], [54, 0, 0, "-", "dummy_biasadd"], [55, 0, 0, "-", "expanddims_optimizer"], [56, 0, 0, "-", "fetch_weight_from_reshape"], [57, 0, 0, "-", "fold_batch_norm"], [58, 0, 0, "-", "fold_constant"], [59, 0, 0, "-", "fuse_biasadd_add"], [60, 0, 0, "-", "fuse_column_wise_mul"], [61, 0, 0, "-", "fuse_conv_with_math"], [62, 0, 0, "-", "fuse_decomposed_bn"], [63, 0, 0, "-", "fuse_decomposed_in"], [64, 0, 0, "-", "fuse_gelu"], [65, 0, 0, "-", "fuse_layer_norm"], [66, 0, 0, "-", "fuse_pad_with_conv"], [67, 0, 0, "-", "fuse_pad_with_fp32_conv"], [68, 0, 0, "-", "fuse_reshape_transpose"], [69, 0, 0, "-", "graph_cse_optimizer"], [70, 0, 0, "-", "grappler_pass"], [72, 0, 0, "-", "insert_print_node"], [73, 0, 0, "-", "move_squeeze_after_relu"], [74, 0, 0, "-", "pre_optimize"], [75, 0, 0, "-", "remove_training_nodes"], [76, 0, 0, "-", "rename_batch_norm"], [77, 0, 0, "-", "split_shared_input"], [78, 0, 0, "-", "strip_equivalent_nodes"], [79, 0, 0, "-", "strip_unused_nodes"], [80, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[47, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[48, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[49, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[50, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[51, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[52, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[53, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[54, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[55, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[56, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[57, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[58, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[59, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[60, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[61, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[62, 1, 1, "", "FuseDecomposedBNOptimizer"], [62, 2, 1, "", "bypass_reshape"], [62, 2, 1, "", "get_const_dim_count"], [62, 2, 1, "", "node_from_map"], [62, 2, 1, "", "node_name_from_input"], [62, 2, 1, "", "valid_reshape_inputs"], [62, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[63, 1, 1, "", "FuseDecomposedINOptimizer"], [63, 2, 1, "", "bypass_reshape"], [63, 2, 1, "", "get_const_dim_count"], [63, 2, 1, "", "node_from_map"], [63, 2, 1, "", "node_name_from_input"], [63, 2, 1, "", "valid_reshape_inputs"], [63, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[64, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[65, 1, 1, "", "FuseLayerNormOptimizer"], [65, 2, 1, "", "node_from_map"], [65, 2, 1, "", "node_name_from_input"], [65, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[66, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[67, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[68, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[69, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[70, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[72, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[73, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[74, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[75, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[76, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[77, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[78, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[79, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[80, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[81, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[83, 0, 0, "-", "freeze_fake_quant"], [84, 0, 0, "-", "freeze_value"], [85, 0, 0, "-", "freeze_value_without_calib"], [86, 0, 0, "-", "fuse_conv_redundant_dequantize"], [87, 0, 0, "-", "fuse_conv_requantize"], [88, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [89, 0, 0, "-", "fuse_matmul_requantize"], [91, 0, 0, "-", "meta_op_optimizer"], [92, 0, 0, "-", "post_hostconst_converter"], [93, 0, 0, "-", "post_quantized_op_cse"], [94, 0, 0, "-", "rnn_convert"], [95, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[83, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[84, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[85, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[86, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[87, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[88, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[89, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [89, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [89, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [89, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[91, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[92, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[93, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[94, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[95, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[97, 0, 0, "-", "onnx_graph"], [98, 0, 0, "-", "onnx_node"], [99, 0, 0, "-", "onnx_schema"], [100, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[97, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[98, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[99, 1, 1, "", "OnnxOpSchema"], [99, 2, 1, "", "get_max_supported_opset_version"], [99, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[100, 1, 1, "", "SeqType"], [100, 2, 1, "", "add_port_to_name"], [100, 2, 1, "", "are_shapes_equal"], [100, 2, 1, "", "assert_error"], [100, 2, 1, "", "compute_const_folding_using_tf"], [100, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [100, 2, 1, "", "find_opset"], [100, 2, 1, "", "get_index_from_strided_slice_of_shape"], [100, 2, 1, "", "get_subgraphs_from_onnx"], [100, 2, 1, "", "get_tensorflow_node_attr"], [100, 2, 1, "", "get_tensorflow_node_shape_attr"], [100, 2, 1, "", "get_tensorflow_tensor_data"], [100, 2, 1, "", "get_tensorflow_tensor_shape"], [100, 2, 1, "", "infer_onnx_shape_dtype"], [100, 2, 1, "", "initialize_name_counter"], [100, 2, 1, "", "is_list_or_tuple"], [100, 2, 1, "", "is_onnx_domain"], [100, 2, 1, "", "make_onnx_inputs_outputs"], [100, 2, 1, "", "make_onnx_shape"], [100, 2, 1, "", "map_numpy_to_onnx_dtype"], [100, 2, 1, "", "map_onnx_to_numpy_type"], [100, 2, 1, "", "map_tensorflow_dtype"], [100, 2, 1, "", "read_tensorflow_node_attrs"], [100, 2, 1, "", "save_protobuf"], [100, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[102, 0, 0, "-", "insert_qdq_pattern"], [103, 0, 0, "-", "merge_duplicated_qdq"], [104, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[102, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[103, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[104, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[105, 1, 1, "", "GraphAnalyzer"], [105, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[109, 0, 0, "-", "qat"], [125, 0, 0, "-", "qdq"], [127, 0, 0, "-", "quantize_graph_base"], [128, 0, 0, "-", "quantize_graph_bn"], [129, 0, 0, "-", "quantize_graph_concatv2"], [130, 0, 0, "-", "quantize_graph_conv"], [131, 0, 0, "-", "quantize_graph_for_intel_cpu"], [132, 0, 0, "-", "quantize_graph_matmul"], [133, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[108, 0, 0, "-", "fake_quantize"], [110, 0, 0, "-", "quantize_config"], [111, 0, 0, "-", "quantize_helper"], [112, 0, 0, "-", "quantize_layers"], [117, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[108, 1, 1, "", "FakeQuantize"], [108, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[110, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[111, 2, 1, "", "init_quantize_config"], [111, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[113, 0, 0, "-", "optimize_layer"], [114, 0, 0, "-", "quantize_layer_add"], [115, 0, 0, "-", "quantize_layer_base"], [116, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[113, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[114, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[115, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[116, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[117, 1, 1, "", "QuantizeWrapper"], [117, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[118, 0, 0, "-", "fuse_qdq_bn"], [119, 0, 0, "-", "fuse_qdq_concatv2"], [120, 0, 0, "-", "fuse_qdq_conv"], [121, 0, 0, "-", "fuse_qdq_deconv"], [122, 0, 0, "-", "fuse_qdq_in"], [123, 0, 0, "-", "fuse_qdq_matmul"], [124, 0, 0, "-", "fuse_qdq_pooling"], [126, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[118, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[119, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[120, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[121, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[122, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[123, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[124, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[126, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[127, 1, 1, "", "QuantizeGraphBase"], [127, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[128, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[129, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[130, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[131, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[132, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[133, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[134, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[135, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[136, 0, 0, "-", "bias_correction"], [137, 0, 0, "-", "graph_transform_base"], [139, 0, 0, "-", "insert_logging"], [140, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[136, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[137, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[139, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[140, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[141, 2, 1, "", "collate_tf_preds"], [141, 2, 1, "", "disable_random"], [141, 2, 1, "", "fix_ref_type_of_graph_def"], [141, 2, 1, "", "generate_feed_dict"], [141, 2, 1, "", "get_estimator_graph"], [141, 2, 1, "", "get_graph_def"], [141, 2, 1, "", "get_input_output_node_names"], [141, 2, 1, "", "get_model_input_shape"], [141, 2, 1, "", "get_tensor_by_name"], [141, 2, 1, "", "get_tensor_val_from_graph_node"], [141, 2, 1, "", "int8_node_name_reverse"], [141, 2, 1, "", "is_ckpt_format"], [141, 2, 1, "", "is_saved_model_format"], [141, 2, 1, "", "iterator_sess_run"], [141, 2, 1, "", "read_graph"], [141, 2, 1, "", "strip_equivalent_nodes"], [141, 2, 1, "", "strip_unused_nodes"], [141, 2, 1, "", "tf_diagnosis_helper"], [141, 2, 1, "", "version1_eq_version2"], [141, 2, 1, "", "version1_gt_version2"], [141, 2, 1, "", "version1_gte_version2"], [141, 2, 1, "", "version1_lt_version2"], [141, 2, 1, "", "version1_lte_version2"], [141, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[142, 0, 0, "-", "bf16_convert"], [143, 0, 0, "-", "hawq_metric"], [145, 0, 0, "-", "model_wrapper"], [146, 0, 0, "-", "pattern_detector"], [147, 0, 0, "-", "smooth_quant"], [148, 0, 0, "-", "symbolic_trace"], [149, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[142, 1, 1, "", "BF16ModuleWrapper"], [142, 2, 1, "", "Convert"], [142, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[143, 1, 1, "", "HessianTrace"], [143, 1, 1, "", "Node_collector"], [143, 2, 1, "", "compare_weights"], [143, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[146, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[147, 1, 1, "", "GraphTrace"], [147, 1, 1, "", "TorchSmoothQuant"], [147, 2, 1, "", "get_module"], [147, 2, 1, "", "set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[148, 2, 1, "", "symbolic_trace"], [148, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.util": [[149, 2, 1, "", "append_attr"], [149, 2, 1, "", "auto_copy"], [149, 2, 1, "", "calculate_quant_min_max"], [149, 2, 1, "", "check_cfg_and_qconfig"], [149, 2, 1, "", "collate_torch_preds"], [149, 2, 1, "", "fetch_module"], [149, 2, 1, "", "generate_activation_observer"], [149, 2, 1, "", "get_depth"], [149, 2, 1, "", "get_dict_at_depth"], [149, 2, 1, "", "get_element_under_depth"], [149, 2, 1, "", "get_embedding_contiguous"], [149, 2, 1, "", "get_example_input"], [149, 2, 1, "", "get_fallback_order"], [149, 2, 1, "", "get_mse_order_per_fp32"], [149, 2, 1, "", "get_mse_order_per_int8"], [149, 2, 1, "", "get_op_type_by_name"], [149, 2, 1, "", "get_quantizable_ops_from_cfgs"], [149, 2, 1, "", "get_torch_version"], [149, 2, 1, "", "input2tuple"], [149, 2, 1, "", "is_fused_module"], [149, 2, 1, "", "match_datatype_pattern"], [149, 2, 1, "", "paser_cfgs"], [149, 2, 1, "", "set_module"], [149, 2, 1, "", "simple_inference"], [149, 2, 1, "", "update_sq_scale"]], "neural_compressor.algorithm": [[150, 0, 0, "-", "algorithm"], [151, 0, 0, "-", "fast_bias_correction"], [153, 0, 0, "-", "smooth_quant"], [154, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[150, 1, 1, "", "ALGORITHMS"], [150, 1, 1, "", "Algorithm"], [150, 1, 1, "", "AlgorithmScheduler"], [150, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[151, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[153, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[154, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[155, 2, 1, "", "benchmark_with_raw_cmd"], [155, 2, 1, "", "call_one"], [155, 2, 1, "", "config_instance"], [155, 2, 1, "", "fit"], [155, 2, 1, "", "generate_prefix"], [155, 2, 1, "", "get_architecture"], [155, 2, 1, "", "get_bounded_threads"], [155, 2, 1, "", "get_core_ids"], [155, 2, 1, "", "get_physical_ids"], [155, 2, 1, "", "get_threads"], [155, 2, 1, "", "get_threads_per_core"], [155, 2, 1, "", "profile"], [155, 2, 1, "", "run_instance"], [155, 2, 1, "", "set_all_env_var"], [155, 2, 1, "", "set_env_var"], [155, 2, 1, "", "summary_benchmark"]], "neural_compressor.compression": [[156, 0, 0, "-", "callbacks"], [158, 0, 0, "-", "distillation"], [161, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[156, 1, 1, "", "BaseCallbacks"], [156, 1, 1, "", "DistillationCallbacks"], [156, 1, 1, "", "PruningCallbacks"], [156, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[156, 3, 1, "", "_epoch_ran"], [156, 3, 1, "", "best_model"], [156, 3, 1, "", "best_score"], [156, 3, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[157, 0, 0, "-", "criterions"]], "neural_compressor.compression.distillation.criterions": [[157, 1, 1, "", "Criterions"], [157, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [157, 1, 1, "", "KnowledgeDistillationFramework"], [157, 1, 1, "", "KnowledgeDistillationLoss"], [157, 1, 1, "", "PyTorchCriterions"], [157, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [157, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [157, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [157, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [157, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [157, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [157, 1, 1, "", "SelfKnowledgeDistillationLoss"], [157, 1, 1, "", "TensorflowCriterions"], [157, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [157, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [157, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [157, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.pruner": [[160, 0, 0, "-", "criteria"], [163, 0, 0, "-", "model_slim"], [166, 0, 0, "-", "patterns"], [167, 0, 0, "-", "pruners"], [168, 0, 0, "-", "regs"], [169, 0, 0, "-", "schedulers"], [170, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[160, 1, 1, "", "GradientCriterion"], [160, 1, 1, "", "MagnitudeCriterion"], [160, 1, 1, "", "PruningCriterion"], [160, 1, 1, "", "RetrainFreeCriterion"], [160, 1, 1, "", "SnipCriterion"], [160, 1, 1, "", "SnipMomentumBlockCriterion"], [160, 1, 1, "", "SnipMomentumCriterion"], [160, 2, 1, "", "get_criterion"], [160, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[160, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[160, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[160, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[160, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[160, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion": [[160, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[160, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[162, 0, 0, "-", "auto_slim"], [164, 0, 0, "-", "pattern_analyzer"], [165, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[162, 2, 1, "", "generate_ffn2_pruning_config"], [162, 2, 1, "", "generate_mha_pruning_config"], [162, 2, 1, "", "model_slim"], [162, 2, 1, "", "model_slim_ffn2"], [162, 2, 1, "", "model_slim_mha"], [162, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[164, 1, 1, "", "ClassifierHeadSearcher"], [164, 1, 1, "", "JitBasicSearcher"], [164, 1, 1, "", "Linear2LinearSearcher"], [164, 1, 1, "", "RecipeSearcher"], [164, 1, 1, "", "SelfMHASearcher"], [164, 2, 1, "", "get_attributes"], [164, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[164, 3, 1, "", "device"], [164, 3, 1, "", "flatten_static_graph"], [164, 3, 1, "", "model"], [164, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[164, 3, 1, "", "device"], [164, 3, 1, "", "flatten_static_graph"], [164, 3, 1, "", "model"], [164, 3, 1, "", "searching_results"], [164, 3, 1, "", "static_graph"], [164, 3, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[164, 3, 1, "", "current_pattern"], [164, 3, 1, "", "device"], [164, 3, 1, "", "flatten_static_graph"], [164, 3, 1, "", "model"], [164, 3, 1, "", "searching_results"], [164, 3, 1, "", "static_graph"], [164, 3, 1, "", "target_layers"], [164, 3, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[164, 3, 1, "", "model"], [164, 3, 1, "", "recipe"], [164, 3, 1, "", "searching_results"], [164, 3, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[164, 3, 1, "", "device"], [164, 3, 1, "", "flatten_static_graph"], [164, 3, 1, "", "model"], [164, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[165, 1, 1, "", "LinearCompression"], [165, 1, 1, "", "LinearCompressionIterator"], [165, 1, 1, "", "MHACompression"], [165, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[165, 3, 1, "", "device"], [165, 3, 1, "", "layer_1"], [165, 3, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[165, 3, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[166, 1, 1, "", "BasePattern"], [166, 1, 1, "", "PatternNInM"], [166, 1, 1, "", "PatternNxM"], [166, 2, 1, "", "get_pattern"], [166, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.BasePattern": [[166, 3, 1, "", "config"], [166, 3, 1, "", "invalid_layers"], [166, 3, 1, "", "is_global"], [166, 3, 1, "", "keep_mask_layers"], [166, 3, 1, "", "max_sparsity_ratio_per_op"], [166, 3, 1, "", "min_sparsity_ratio_per_op"], [166, 3, 1, "", "modules"], [166, 3, 1, "", "pattern"], [166, 3, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.PatternNInM": [[166, 3, 1, "", "M"], [166, 3, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.PatternNxM": [[166, 3, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[167, 1, 1, "", "BasePruner"], [167, 1, 1, "", "BasicPruner"], [167, 1, 1, "", "BlockMaskPruner"], [167, 1, 1, "", "PatternLockPruner"], [167, 1, 1, "", "ProgressivePruner"], [167, 1, 1, "", "RetrainFreePruner"], [167, 2, 1, "", "get_pruner"], [167, 2, 1, "", "parse_valid_pruner_types"], [167, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.BasePruner": [[167, 3, 1, "", "config"], [167, 3, 1, "", "current_sparsity_ratio"], [167, 3, 1, "", "end_step"], [167, 3, 1, "", "global_step"], [167, 3, 1, "", "masks"], [167, 3, 1, "", "max_sparsity_ratio_per_op"], [167, 3, 1, "", "modules"], [167, 3, 1, "", "pattern"], [167, 3, 1, "", "pruning_frequency"], [167, 3, 1, "", "scheduler"], [167, 3, 1, "", "scores"], [167, 3, 1, "", "start_step"], [167, 3, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.BasicPruner": [[167, 3, 1, "", "criterion"], [167, 3, 1, "", "pattern"], [167, 3, 1, "", "reg"], [167, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.BlockMaskPruner": [[167, 3, 1, "", "criterion"], [167, 3, 1, "", "pattern"], [167, 3, 1, "", "reg"], [167, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.RetrainFreePruner": [[167, 3, 1, "", "criterion"], [167, 3, 1, "", "pattern"], [167, 3, 1, "", "reg"], [167, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.regs": [[168, 1, 1, "", "BaseReg"], [168, 1, 1, "", "GroupLasso"], [168, 2, 1, "", "get_reg"], [168, 2, 1, "", "get_reg_type"], [168, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[168, 3, 1, "", "alpha"], [168, 3, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[169, 1, 1, "", "IterativeScheduler"], [169, 1, 1, "", "OneshotScheduler"], [169, 1, 1, "", "PruningScheduler"], [169, 2, 1, "", "get_scheduler"], [169, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[169, 3, 1, "", "config"]], "neural_compressor.compression.pruner.utils": [[170, 2, 1, "", "check_config"], [170, 2, 1, "", "check_key_validity"], [170, 2, 1, "", "generate_pruner_config"], [170, 2, 1, "", "get_sparsity_ratio"], [170, 2, 1, "", "parse_last_linear"], [170, 2, 1, "", "parse_to_prune"], [170, 2, 1, "", "process_and_check_config"], [170, 2, 1, "", "process_config"], [170, 2, 1, "", "process_weight_config"], [170, 2, 1, "", "process_yaml_config"], [170, 2, 1, "", "reset_none_to_default"], [170, 2, 1, "", "update_params"]], "neural_compressor.conf": [[171, 0, 0, "-", "config"], [172, 0, 0, "-", "dotdict"], [174, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[171, 1, 1, "", "Benchmark_Conf"], [171, 1, 1, "", "Conf"], [171, 1, 1, "", "Distillation_Conf"], [171, 1, 1, "", "Graph_Optimization_Conf"], [171, 1, 1, "", "MixedPrecision_Conf"], [171, 1, 1, "", "NASConfig"], [171, 1, 1, "", "PrunerV2"], [171, 1, 1, "", "Pruning_Conf"], [171, 1, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[172, 1, 1, "", "DotDict"], [172, 2, 1, "", "deep_get"], [172, 2, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[174, 1, 1, "", "AccuracyCriterion"], [174, 1, 1, "", "BenchmarkConfig"], [174, 1, 1, "", "DistillationConfig"], [174, 1, 1, "", "KnowledgeDistillationLossConfig"], [174, 1, 1, "", "Options"], [174, 1, 1, "", "QuantizationConfig"], [174, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[175, 1, 1, "", "AccuracyCriterion"], [175, 1, 1, "", "BenchmarkConfig"], [175, 1, 1, "", "DistillationConfig"], [175, 1, 1, "", "DotDict"], [175, 1, 1, "", "ExportConfig"], [175, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [175, 1, 1, "", "Keras"], [175, 1, 1, "", "KnowledgeDistillationLossConfig"], [175, 1, 1, "", "MXNet"], [175, 1, 1, "", "MixedPrecisionConfig"], [175, 1, 1, "", "NASConfig"], [175, 1, 1, "", "ONNX"], [175, 1, 1, "", "ONNXQlinear2QDQConfig"], [175, 1, 1, "", "Options"], [175, 1, 1, "", "PostTrainingQuantConfig"], [175, 1, 1, "", "PyTorch"], [175, 1, 1, "", "QuantizationAwareTrainingConfig"], [175, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [175, 1, 1, "", "TF2ONNXConfig"], [175, 1, 1, "", "TensorFlow"], [175, 1, 1, "", "Torch2ONNXConfig"], [175, 1, 1, "", "TuningCriterion"], [175, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[177, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[178, 0, 0, "-", "sigopt"], [179, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[178, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[179, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[184, 0, 0, "-", "dataloaders"], [196, 0, 0, "-", "datasets"], [200, 0, 0, "-", "filters"], [204, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[180, 0, 0, "-", "base_dataloader"], [181, 0, 0, "-", "dataloader"], [182, 0, 0, "-", "default_dataloader"], [183, 0, 0, "-", "fetcher"], [185, 0, 0, "-", "mxnet_dataloader"], [186, 0, 0, "-", "onnxrt_dataloader"], [187, 0, 0, "-", "pytorch_dataloader"], [188, 0, 0, "-", "sampler"], [189, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[180, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[181, 1, 1, "", "DataLoader"], [181, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[182, 1, 1, "", "DefaultDataLoader"], [182, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[183, 1, 1, "", "Fetcher"], [183, 1, 1, "", "IndexFetcher"], [183, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[185, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[186, 1, 1, "", "ONNXRTBertDataLoader"], [186, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[187, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[188, 1, 1, "", "BatchSampler"], [188, 1, 1, "", "IterableSampler"], [188, 1, 1, "", "Sampler"], [188, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[189, 1, 1, "", "TFDataDataLoader"], [189, 1, 1, "", "TensorflowBertDataLoader"], [189, 1, 1, "", "TensorflowDataLoader"], [189, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[190, 0, 0, "-", "bert_dataset"], [191, 0, 0, "-", "coco_dataset"], [192, 0, 0, "-", "dataset"], [193, 0, 0, "-", "dummy_dataset"], [194, 0, 0, "-", "dummy_dataset_v2"], [195, 0, 0, "-", "imagenet_dataset"], [197, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[190, 1, 1, "", "InputFeatures"], [190, 1, 1, "", "ONNXRTBertDataset"], [190, 1, 1, "", "ParseDecodeBert"], [190, 1, 1, "", "PytorchBertDataset"], [190, 1, 1, "", "TensorflowBertDataset"], [190, 1, 1, "", "TensorflowModelZooBertDataset"], [190, 2, 1, "", "convert_examples_to_features"], [190, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[191, 1, 1, "", "COCONpy"], [191, 1, 1, "", "COCORaw"], [191, 1, 1, "", "COCORecordDataset"], [191, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[192, 1, 1, "", "CIFAR10"], [192, 1, 1, "", "CIFAR100"], [192, 1, 1, "", "Dataset"], [192, 1, 1, "", "Datasets"], [192, 1, 1, "", "FashionMNIST"], [192, 1, 1, "", "ImageFolder"], [192, 1, 1, "", "IterableDataset"], [192, 1, 1, "", "MNIST"], [192, 1, 1, "", "MXNetCIFAR10"], [192, 1, 1, "", "MXNetCIFAR100"], [192, 1, 1, "", "MXNetDatasets"], [192, 1, 1, "", "MXNetFashionMNIST"], [192, 1, 1, "", "MXNetImageFolder"], [192, 1, 1, "", "MXNetMNIST"], [192, 1, 1, "", "ONNXRTITDatasets"], [192, 1, 1, "", "ONNXRTQLDatasets"], [192, 1, 1, "", "PyTorchDatasets"], [192, 1, 1, "", "PytorchCIFAR10"], [192, 1, 1, "", "PytorchCIFAR100"], [192, 1, 1, "", "PytorchFashionMNIST"], [192, 1, 1, "", "PytorchMNIST"], [192, 1, 1, "", "PytorchMxnetWrapDataset"], [192, 1, 1, "", "PytorchMxnetWrapFunction"], [192, 1, 1, "", "Tensorflow"], [192, 1, 1, "", "TensorflowCIFAR10"], [192, 1, 1, "", "TensorflowCIFAR100"], [192, 1, 1, "", "TensorflowDatasets"], [192, 1, 1, "", "TensorflowFashionMNIST"], [192, 1, 1, "", "TensorflowImageRecord"], [192, 1, 1, "", "TensorflowMNIST"], [192, 1, 1, "", "TensorflowTFRecordDataset"], [192, 1, 1, "", "TensorflowVOCRecord"], [192, 2, 1, "", "calculate_md5"], [192, 2, 1, "", "check_integrity"], [192, 2, 1, "", "dataset_registry"], [192, 2, 1, "", "download_url"], [192, 4, 1, "", "framework_datasets"], [192, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[193, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[194, 1, 1, "", "DummyDataset"], [194, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[195, 1, 1, "", "ImagenetRaw"], [195, 1, 1, "", "MXNetImagenetRaw"], [195, 1, 1, "", "ONNXRTImagenetDataset"], [195, 1, 1, "", "PytorchImagenetRaw"], [195, 1, 1, "", "TensorflowImagenetDataset"], [195, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[197, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[198, 0, 0, "-", "coco_filter"], [199, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[198, 1, 1, "", "LabelBalanceCOCORawFilter"], [198, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[199, 1, 1, "", "FILTERS"], [199, 1, 1, "", "Filter"], [199, 1, 1, "", "MXNetFilters"], [199, 1, 1, "", "ONNXRTITFilters"], [199, 1, 1, "", "ONNXRTQLFilters"], [199, 1, 1, "", "PyTorchFilters"], [199, 1, 1, "", "TensorflowFilters"], [199, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[202, 0, 0, "-", "coco_transform"], [203, 0, 0, "-", "imagenet_transform"], [205, 0, 0, "-", "postprocess"], [206, 0, 0, "-", "tokenization"], [207, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[202, 1, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[203, 1, 1, "", "BilinearImagenetTransform"], [203, 1, 1, "", "LabelShift"], [203, 1, 1, "", "ONNXResizeCropImagenetTransform"], [203, 1, 1, "", "OnnxBilinearImagenetTransform"], [203, 1, 1, "", "ParseDecodeImagenet"], [203, 1, 1, "", "ParseDecodeImagenetTransform"], [203, 1, 1, "", "QuantizedInput"], [203, 1, 1, "", "ResizeWithAspectRatio"], [203, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.postprocess": [[205, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[206, 1, 1, "", "BasicTokenizer"], [206, 1, 1, "", "FullTokenizer"], [206, 1, 1, "", "WordpieceTokenizer"], [206, 2, 1, "", "convert_by_vocab"], [206, 2, 1, "", "convert_to_unicode"], [206, 2, 1, "", "load_vocab"], [206, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[207, 1, 1, "", "AlignImageChannelTransform"], [207, 1, 1, "", "BaseTransform"], [207, 1, 1, "", "CastONNXTransform"], [207, 1, 1, "", "CastPyTorchTransform"], [207, 1, 1, "", "CastTFTransform"], [207, 1, 1, "", "CenterCropTFTransform"], [207, 1, 1, "", "CenterCropTransform"], [207, 1, 1, "", "CollectTransform"], [207, 1, 1, "", "ComposeTransform"], [207, 1, 1, "", "CropResizeTFTransform"], [207, 1, 1, "", "CropResizeTransform"], [207, 1, 1, "", "CropToBoundingBox"], [207, 1, 1, "", "InputFeatures"], [207, 1, 1, "", "MXNetCropResizeTransform"], [207, 1, 1, "", "MXNetCropToBoundingBox"], [207, 1, 1, "", "MXNetNormalizeTransform"], [207, 1, 1, "", "MXNetTransforms"], [207, 1, 1, "", "MXNetTranspose"], [207, 1, 1, "", "NormalizeTFTransform"], [207, 1, 1, "", "NormalizeTransform"], [207, 1, 1, "", "ONNXRTCropToBoundingBox"], [207, 1, 1, "", "ONNXRTITTransforms"], [207, 1, 1, "", "ONNXRTQLTransforms"], [207, 1, 1, "", "PaddedCenterCropTransform"], [207, 1, 1, "", "ParseDecodeVocTransform"], [207, 1, 1, "", "PyTorchAlignImageChannel"], [207, 1, 1, "", "PyTorchCropResizeTransform"], [207, 1, 1, "", "PyTorchNormalizeTransform"], [207, 1, 1, "", "PyTorchTransforms"], [207, 1, 1, "", "PyTorchTranspose"], [207, 1, 1, "", "PytorchMxnetTransform"], [207, 1, 1, "", "PytorchMxnetWrapFunction"], [207, 1, 1, "", "RandomCropTFTransform"], [207, 1, 1, "", "RandomCropTransform"], [207, 1, 1, "", "RandomHorizontalFlip"], [207, 1, 1, "", "RandomResizedCropMXNetTransform"], [207, 1, 1, "", "RandomResizedCropPytorchTransform"], [207, 1, 1, "", "RandomResizedCropTFTransform"], [207, 1, 1, "", "RandomResizedCropTransform"], [207, 1, 1, "", "RandomVerticalFlip"], [207, 1, 1, "", "RescaleKerasPretrainTransform"], [207, 1, 1, "", "RescaleTFTransform"], [207, 1, 1, "", "RescaleTransform"], [207, 1, 1, "", "ResizeMXNetTransform"], [207, 1, 1, "", "ResizePytorchTransform"], [207, 1, 1, "", "ResizeTFTransform"], [207, 1, 1, "", "ResizeTransform"], [207, 1, 1, "", "ResizeWithRatio"], [207, 1, 1, "", "SquadExample"], [207, 1, 1, "", "TFModelZooCollectTransform"], [207, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [207, 1, 1, "", "TFSquadV1PostTransform"], [207, 1, 1, "", "TRANSFORMS"], [207, 1, 1, "", "TensorflowCropToBoundingBox"], [207, 1, 1, "", "TensorflowRandomHorizontalFlip"], [207, 1, 1, "", "TensorflowRandomVerticalFlip"], [207, 1, 1, "", "TensorflowResizeWithRatio"], [207, 1, 1, "", "TensorflowTransform"], [207, 1, 1, "", "TensorflowTransforms"], [207, 1, 1, "", "TensorflowTranspose"], [207, 1, 1, "", "TensorflowWrapFunction"], [207, 1, 1, "", "ToArray"], [207, 1, 1, "", "ToNDArrayTransform"], [207, 1, 1, "", "Transforms"], [207, 1, 1, "", "Transpose"], [207, 2, 1, "", "convert_examples_to_features"], [207, 2, 1, "", "get_final_text"], [207, 2, 1, "", "get_torchvision_map"], [207, 2, 1, "", "read_squad_examples"], [207, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[208, 0, 0, "-", "benchmark"], [211, 0, 0, "-", "common"], [217, 0, 0, "-", "component"], [218, 0, 0, "-", "compression"], [220, 0, 0, "-", "contrib"], [245, 0, 0, "-", "data"], [250, 0, 0, "-", "distillation"], [251, 0, 0, "-", "export"], [255, 0, 0, "-", "graph_optimization"], [263, 0, 0, "-", "metric"], [265, 0, 0, "-", "mixed_precision"], [266, 0, 0, "-", "model_conversion"], [269, 0, 0, "-", "nas"], [275, 0, 0, "-", "pruner_legacy"], [279, 0, 0, "-", "pruning"], [280, 0, 0, "-", "pruning_recipes"], [284, 0, 0, "-", "pruning_v2"], [285, 0, 0, "-", "pytorch_pruner"], [292, 0, 0, "-", "quantization"], [293, 0, 0, "-", "scheduler"], [298, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[208, 1, 1, "", "Benchmark"], [208, 2, 1, "", "get_architecture"], [208, 2, 1, "", "get_bounded_threads"], [208, 2, 1, "", "get_core_ids"], [208, 2, 1, "", "get_physical_ids"], [208, 2, 1, "", "get_threads"], [208, 2, 1, "", "get_threads_per_core"], [208, 2, 1, "", "set_all_env_var"], [208, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[209, 0, 0, "-", "criterion"], [210, 0, 0, "-", "dataloader"], [212, 0, 0, "-", "metric"], [213, 0, 0, "-", "model"], [214, 0, 0, "-", "optimizer"], [215, 0, 0, "-", "postprocess"], [216, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[209, 1, 1, "", "Criterions"], [209, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [209, 1, 1, "", "KnowledgeDistillationFramework"], [209, 1, 1, "", "KnowledgeDistillationLoss"], [209, 1, 1, "", "PyTorchCriterions"], [209, 1, 1, "", "PyTorchCrossEntropyLoss"], [209, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [209, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [209, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [209, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [209, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [209, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [209, 1, 1, "", "SelfKnowledgeDistillationLoss"], [209, 1, 1, "", "TensorFlowCrossEntropyLoss"], [209, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [209, 1, 1, "", "TensorflowCriterions"], [209, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [209, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [209, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [209, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[210, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[212, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[213, 1, 1, "", "Model"], [213, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[214, 1, 1, "", "Optimizers"], [214, 1, 1, "", "PyTorchOptimizers"], [214, 1, 1, "", "PyTorchSGD"], [214, 1, 1, "", "TensorFlowAdam"], [214, 1, 1, "", "TensorFlowAdamW"], [214, 1, 1, "", "TensorFlowSGD"], [214, 1, 1, "", "TensorflowOptimizers"], [214, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[215, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[216, 2, 1, "", "get_activation"], [216, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[217, 1, 1, "", "Component"]], "neural_compressor.experimental.compression": [[219, 0, 0, "-", "pruning"]], "neural_compressor.experimental.compression.pruning": [[219, 2, 1, "", "prepare_pruning"], [219, 2, 1, "", "save"]], "neural_compressor.experimental.contrib": [[221, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[222, 0, 0, "-", "sigopt"], [223, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[222, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[223, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[228, 0, 0, "-", "dataloaders"], [240, 0, 0, "-", "datasets"], [244, 0, 0, "-", "filters"], [247, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[224, 0, 0, "-", "base_dataloader"], [225, 0, 0, "-", "dataloader"], [226, 0, 0, "-", "default_dataloader"], [227, 0, 0, "-", "fetcher"], [229, 0, 0, "-", "mxnet_dataloader"], [230, 0, 0, "-", "onnxrt_dataloader"], [231, 0, 0, "-", "pytorch_dataloader"], [232, 0, 0, "-", "sampler"], [233, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[224, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[226, 1, 1, "", "DefaultDataLoader"], [226, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[227, 1, 1, "", "Fetcher"], [227, 1, 1, "", "IndexFetcher"], [227, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[229, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[230, 1, 1, "", "ONNXRTBertDataLoader"], [230, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[231, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[232, 1, 1, "", "BatchSampler"], [232, 1, 1, "", "IterableSampler"], [232, 1, 1, "", "Sampler"], [232, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[233, 1, 1, "", "TFDataDataLoader"], [233, 1, 1, "", "TensorflowBertDataLoader"], [233, 1, 1, "", "TensorflowDataLoader"], [233, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[234, 0, 0, "-", "bert_dataset"], [235, 0, 0, "-", "coco_dataset"], [236, 0, 0, "-", "dataset"], [237, 0, 0, "-", "dummy_dataset"], [238, 0, 0, "-", "dummy_dataset_v2"], [239, 0, 0, "-", "imagenet_dataset"], [241, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[234, 1, 1, "", "InputFeatures"], [234, 1, 1, "", "ONNXRTBertDataset"], [234, 1, 1, "", "ParseDecodeBert"], [234, 1, 1, "", "PytorchBertDataset"], [234, 1, 1, "", "TensorflowBertDataset"], [234, 1, 1, "", "TensorflowModelZooBertDataset"], [234, 2, 1, "", "convert_examples_to_features"], [234, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[235, 1, 1, "", "COCONpy"], [235, 1, 1, "", "COCORaw"], [235, 1, 1, "", "COCORecordDataset"], [235, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[236, 1, 1, "", "CIFAR10"], [236, 1, 1, "", "CIFAR100"], [236, 1, 1, "", "Dataset"], [236, 1, 1, "", "Datasets"], [236, 1, 1, "", "FashionMNIST"], [236, 1, 1, "", "ImageFolder"], [236, 1, 1, "", "IterableDataset"], [236, 1, 1, "", "MNIST"], [236, 1, 1, "", "MXNetCIFAR10"], [236, 1, 1, "", "MXNetCIFAR100"], [236, 1, 1, "", "MXNetDatasets"], [236, 1, 1, "", "MXNetFashionMNIST"], [236, 1, 1, "", "MXNetImageFolder"], [236, 1, 1, "", "MXNetMNIST"], [236, 1, 1, "", "ONNXRTITDatasets"], [236, 1, 1, "", "ONNXRTQLDatasets"], [236, 1, 1, "", "PyTorchDatasets"], [236, 1, 1, "", "PytorchCIFAR10"], [236, 1, 1, "", "PytorchCIFAR100"], [236, 1, 1, "", "PytorchFashionMNIST"], [236, 1, 1, "", "PytorchMNIST"], [236, 1, 1, "", "PytorchMxnetWrapDataset"], [236, 1, 1, "", "PytorchMxnetWrapFunction"], [236, 1, 1, "", "TensorflowCIFAR10"], [236, 1, 1, "", "TensorflowCIFAR100"], [236, 1, 1, "", "TensorflowDatasets"], [236, 1, 1, "", "TensorflowFashionMNIST"], [236, 1, 1, "", "TensorflowImageFolder"], [236, 1, 1, "", "TensorflowImageRecord"], [236, 1, 1, "", "TensorflowMNIST"], [236, 1, 1, "", "TensorflowTFRecordDataset"], [236, 1, 1, "", "TensorflowVOCRecord"], [236, 2, 1, "", "calculate_md5"], [236, 2, 1, "", "check_integrity"], [236, 2, 1, "", "dataset_registry"], [236, 2, 1, "", "download_url"], [236, 4, 1, "", "framework_datasets"], [236, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[237, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[238, 1, 1, "", "DummyDataset"], [238, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[239, 1, 1, "", "ImagenetRaw"], [239, 1, 1, "", "MXNetImagenetRaw"], [239, 1, 1, "", "ONNXRTImagenetDataset"], [239, 1, 1, "", "PytorchImagenetRaw"], [239, 1, 1, "", "TensorflowImagenetDataset"], [239, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[241, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[242, 0, 0, "-", "coco_filter"], [243, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[242, 1, 1, "", "LabelBalanceCOCORawFilter"], [242, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[243, 1, 1, "", "FILTERS"], [243, 1, 1, "", "Filter"], [243, 1, 1, "", "MXNetFilters"], [243, 1, 1, "", "ONNXRTITFilters"], [243, 1, 1, "", "ONNXRTQLFilters"], [243, 1, 1, "", "PyTorchFilters"], [243, 1, 1, "", "TensorflowFilters"], [243, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[246, 0, 0, "-", "imagenet_transform"], [248, 0, 0, "-", "tokenization"], [249, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[246, 1, 1, "", "BilinearImagenetTransform"], [246, 1, 1, "", "LabelShift"], [246, 1, 1, "", "ONNXResizeCropImagenetTransform"], [246, 1, 1, "", "OnnxBilinearImagenetTransform"], [246, 1, 1, "", "ParseDecodeImagenet"], [246, 1, 1, "", "ParseDecodeImagenetTransform"], [246, 1, 1, "", "QuantizedInput"], [246, 1, 1, "", "ResizeWithAspectRatio"], [246, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[248, 1, 1, "", "BasicTokenizer"], [248, 1, 1, "", "FullTokenizer"], [248, 1, 1, "", "WordpieceTokenizer"], [248, 2, 1, "", "convert_by_vocab"], [248, 2, 1, "", "convert_to_unicode"], [248, 2, 1, "", "load_vocab"], [248, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[249, 1, 1, "", "AlignImageChannelTransform"], [249, 1, 1, "", "BaseTransform"], [249, 1, 1, "", "CastONNXTransform"], [249, 1, 1, "", "CastPyTorchTransform"], [249, 1, 1, "", "CastTFTransform"], [249, 1, 1, "", "CenterCropTFTransform"], [249, 1, 1, "", "CenterCropTransform"], [249, 1, 1, "", "CollectTransform"], [249, 1, 1, "", "ComposeTransform"], [249, 1, 1, "", "CropResizeTFTransform"], [249, 1, 1, "", "CropResizeTransform"], [249, 1, 1, "", "CropToBoundingBox"], [249, 1, 1, "", "InputFeatures"], [249, 1, 1, "", "MXNetCropResizeTransform"], [249, 1, 1, "", "MXNetCropToBoundingBox"], [249, 1, 1, "", "MXNetNormalizeTransform"], [249, 1, 1, "", "MXNetTransforms"], [249, 1, 1, "", "MXNetTranspose"], [249, 1, 1, "", "NormalizeTFTransform"], [249, 1, 1, "", "NormalizeTransform"], [249, 1, 1, "", "ONNXRTCropToBoundingBox"], [249, 1, 1, "", "ONNXRTITTransforms"], [249, 1, 1, "", "ONNXRTQLTransforms"], [249, 1, 1, "", "PaddedCenterCropTransform"], [249, 1, 1, "", "ParseDecodeVocTransform"], [249, 1, 1, "", "PyTorchAlignImageChannel"], [249, 1, 1, "", "PyTorchCropResizeTransform"], [249, 1, 1, "", "PyTorchNormalizeTransform"], [249, 1, 1, "", "PyTorchTransforms"], [249, 1, 1, "", "PyTorchTranspose"], [249, 1, 1, "", "PytorchMxnetTransform"], [249, 1, 1, "", "PytorchMxnetWrapFunction"], [249, 1, 1, "", "RandomCropTFTransform"], [249, 1, 1, "", "RandomCropTransform"], [249, 1, 1, "", "RandomHorizontalFlip"], [249, 1, 1, "", "RandomResizedCropMXNetTransform"], [249, 1, 1, "", "RandomResizedCropPytorchTransform"], [249, 1, 1, "", "RandomResizedCropTFTransform"], [249, 1, 1, "", "RandomResizedCropTransform"], [249, 1, 1, "", "RandomVerticalFlip"], [249, 1, 1, "", "RescaleKerasPretrainTransform"], [249, 1, 1, "", "RescaleTFTransform"], [249, 1, 1, "", "RescaleTransform"], [249, 1, 1, "", "ResizeMXNetTransform"], [249, 1, 1, "", "ResizePytorchTransform"], [249, 1, 1, "", "ResizeTFTransform"], [249, 1, 1, "", "ResizeTransform"], [249, 1, 1, "", "ResizeWithRatio"], [249, 1, 1, "", "SquadExample"], [249, 1, 1, "", "TFModelZooCollectTransform"], [249, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [249, 1, 1, "", "TFSquadV1PostTransform"], [249, 1, 1, "", "TRANSFORMS"], [249, 1, 1, "", "TensorflowCropToBoundingBox"], [249, 1, 1, "", "TensorflowRandomHorizontalFlip"], [249, 1, 1, "", "TensorflowRandomVerticalFlip"], [249, 1, 1, "", "TensorflowResizeWithRatio"], [249, 1, 1, "", "TensorflowTransform"], [249, 1, 1, "", "TensorflowTransforms"], [249, 1, 1, "", "TensorflowTranspose"], [249, 1, 1, "", "TensorflowWrapFunction"], [249, 1, 1, "", "ToArray"], [249, 1, 1, "", "ToNDArrayTransform"], [249, 1, 1, "", "Transforms"], [249, 1, 1, "", "Transpose"], [249, 2, 1, "", "convert_examples_to_features"], [249, 2, 1, "", "get_final_text"], [249, 2, 1, "", "get_torchvision_map"], [249, 2, 1, "", "read_squad_examples"], [249, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[250, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[250, 3, 1, "", "_epoch_ran"], [250, 3, 1, "", "best_model"], [250, 3, 1, "", "best_score"], [250, 3, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[252, 0, 0, "-", "qlinear2qdq"], [253, 0, 0, "-", "tf2onnx"], [254, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[252, 2, 1, "", "check_model"], [252, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[253, 2, 1, "", "tf_to_fp32_onnx"], [253, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[254, 2, 1, "", "torch_to_fp32_onnx"], [254, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[255, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[257, 0, 0, "-", "bleu"], [258, 0, 0, "-", "bleu_util"], [259, 0, 0, "-", "coco_label_map"], [260, 0, 0, "-", "coco_tools"], [261, 0, 0, "-", "evaluate_squad"], [262, 0, 0, "-", "f1"], [264, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[257, 1, 1, "", "BLEU"], [257, 1, 1, "", "UnicodeRegex"], [257, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[257, 3, 1, "", "labels"], [257, 3, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[257, 3, 1, "", "nondigit_punct_re"], [257, 3, 1, "", "punct_nondigit_re"], [257, 3, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[258, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[260, 1, 1, "", "COCOEvalWrapper"], [260, 1, 1, "", "COCOWrapper"], [260, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [260, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [260, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[260, 3, 1, "", "dataset"], [260, 3, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[261, 2, 1, "", "evaluate"], [261, 2, 1, "", "exact_match_score"], [261, 2, 1, "", "f1_score"], [261, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[262, 2, 1, "", "evaluate"], [262, 2, 1, "", "f1_score"], [262, 2, 1, "", "metric_max_over_ground_truths"], [262, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[264, 1, 1, "", "Accuracy"], [264, 1, 1, "", "BaseMetric"], [264, 1, 1, "", "COCOmAPv2"], [264, 1, 1, "", "F1"], [264, 1, 1, "", "GeneralTopK"], [264, 1, 1, "", "Loss"], [264, 1, 1, "", "MAE"], [264, 1, 1, "", "METRICS"], [264, 1, 1, "", "MSE"], [264, 1, 1, "", "MXNetMetrics"], [264, 1, 1, "", "ONNXRTGLUE"], [264, 1, 1, "", "ONNXRTITMetrics"], [264, 1, 1, "", "ONNXRTQLMetrics"], [264, 1, 1, "", "PyTorchLoss"], [264, 1, 1, "", "PyTorchMetrics"], [264, 1, 1, "", "RMSE"], [264, 1, 1, "", "ROC"], [264, 1, 1, "", "SquadF1"], [264, 1, 1, "", "TensorflowCOCOMAP"], [264, 1, 1, "", "TensorflowMAP"], [264, 1, 1, "", "TensorflowMetrics"], [264, 1, 1, "", "TensorflowTopK"], [264, 1, 1, "", "TensorflowVOCMAP"], [264, 1, 1, "", "WrapMXNetMetric"], [264, 1, 1, "", "WrapONNXRTMetric"], [264, 1, 1, "", "WrapPyTorchMetric"], [264, 1, 1, "", "mIOU"], [264, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[264, 3, 1, "", "label_list"], [264, 3, 1, "", "pred_list"], [264, 3, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[264, 3, 1, "", "k"], [264, 3, 1, "", "num_correct"], [264, 3, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[264, 3, 1, "", "sample"], [264, 3, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[264, 3, 1, "", "compare_label"], [264, 3, 1, "", "label_list"], [264, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[264, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[264, 3, 1, "", "compare_label"], [264, 3, 1, "", "label_list"], [264, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[264, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[264, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[264, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[264, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[264, 3, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[264, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[264, 3, 1, "", "k"], [264, 3, 1, "", "num_correct"], [264, 3, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[265, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[266, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[267, 0, 0, "-", "basic_nas"], [268, 0, 0, "-", "dynas"], [270, 0, 0, "-", "nas"], [271, 0, 0, "-", "nas_utils"], [272, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[267, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[268, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[270, 1, 1, "", "NAS"], [270, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[271, 2, 1, "", "create_search_space_pool"], [271, 2, 1, "", "find_pareto_front"], [271, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[272, 1, 1, "", "BayesianOptimizationSearcher"], [272, 1, 1, "", "GridSearcher"], [272, 1, 1, "", "RandomSearcher"], [272, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[273, 0, 0, "-", "gradient_sensitivity"], [274, 0, 0, "-", "group_lasso"], [276, 0, 0, "-", "magnitude"], [277, 0, 0, "-", "pattern_lock"], [278, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[273, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[274, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[276, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[277, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[278, 1, 1, "", "Pruner"], [278, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[279, 1, 1, "", "Pruning"], [279, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[279, 3, 1, "", "conf"], [279, 3, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[281, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[282, 0, 0, "-", "pattern"], [283, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[282, 1, 1, "", "PATTERNS"], [282, 1, 1, "", "PatternBase"], [282, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[282, 3, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[283, 1, 1, "", "TilePatternBase"], [283, 1, 1, "", "TilePattern_1x1"], [283, 1, 1, "", "TilePattern_1x16"], [283, 1, 1, "", "TilePattern_1x2"], [283, 1, 1, "", "TilePattern_2x2"], [283, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[284, 1, 1, "", "Pruning"], [284, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[284, 3, 1, "", "conf"], [284, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[286, 0, 0, "-", "logger"], [287, 0, 0, "-", "patterns"], [288, 0, 0, "-", "prune_utils"], [289, 0, 0, "-", "pruner"], [290, 0, 0, "-", "pruning"], [291, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[287, 1, 1, "", "Pattern"], [287, 1, 1, "", "PatternNInM"], [287, 1, 1, "", "PatternNxM"], [287, 2, 1, "", "get_pattern"], [287, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[287, 3, 1, "", "is_global"], [287, 3, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[287, 3, 1, "", "M"], [287, 3, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[287, 3, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[288, 2, 1, "", "check_config"], [288, 2, 1, "", "parse_not_to_prune"], [288, 2, 1, "", "parse_to_prune"], [288, 2, 1, "", "process_and_check_config"], [288, 2, 1, "", "process_config"], [288, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[289, 1, 1, "", "MagnitudePruner"], [289, 1, 1, "", "PatternLockPruner"], [289, 1, 1, "", "Pruner"], [289, 1, 1, "", "SnipMomentumPruner"], [289, 1, 1, "", "SnipPruner"], [289, 2, 1, "", "get_pruner"], [289, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[289, 3, 1, "", "config"], [289, 3, 1, "", "current_sparsity_ratio"], [289, 3, 1, "", "end_step"], [289, 3, 1, "", "global_step"], [289, 3, 1, "", "masks"], [289, 3, 1, "", "max_sparsity_ratio_per_layer"], [289, 3, 1, "", "modules"], [289, 3, 1, "", "pattern"], [289, 3, 1, "", "scheduler"], [289, 3, 1, "", "scores"], [289, 3, 1, "", "start_step"], [289, 3, 1, "", "target_sparsity_ratio"], [289, 3, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[290, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[290, 3, 1, "", "config_file_path"], [290, 3, 1, "", "model"], [290, 3, 1, "", "pruner_info"], [290, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[291, 1, 1, "", "IterativeScheduler"], [291, 1, 1, "", "OneshotScheduler"], [291, 1, 1, "", "Scheduler"], [291, 2, 1, "", "get_scheduler"], [291, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[291, 3, 1, "", "config"]], "neural_compressor.experimental.quantization": [[292, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[293, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[294, 0, 0, "-", "auto_mixed_precision"], [295, 0, 0, "-", "basic"], [296, 0, 0, "-", "bayesian"], [297, 0, 0, "-", "exhaustive"], [299, 0, 0, "-", "mse"], [300, 0, 0, "-", "mse_v2"], [301, 0, 0, "-", "random"], [302, 0, 0, "-", "strategy"], [304, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[294, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[295, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[296, 1, 1, "", "BayesianOptimization"], [296, 1, 1, "", "BayesianTuneStrategy"], [296, 1, 1, "", "TargetSpace"], [296, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[297, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[299, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[300, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[301, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[302, 1, 1, "", "TuneStrategy"], [302, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[303, 0, 0, "-", "constant"], [305, 0, 0, "-", "tuning_sampler"], [306, 0, 0, "-", "tuning_space"], [307, 0, 0, "-", "tuning_structs"], [308, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[305, 1, 1, "", "FallbackTuningSampler"], [305, 1, 1, "", "ModelWiseTuningSampler"], [305, 1, 1, "", "OpTypeWiseTuningSampler"], [305, 1, 1, "", "OpWiseTuningSampler"], [305, 1, 1, "", "SmoothQuantSampler"], [305, 1, 1, "", "TuningOrder"], [305, 1, 1, "", "TuningSampler"], [305, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[306, 1, 1, "", "TuningItem"], [306, 1, 1, "", "TuningSpace"], [306, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [306, 2, 1, "", "pattern_to_internal"], [306, 2, 1, "", "pattern_to_path"], [306, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[307, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[308, 1, 1, "", "OrderedDefaultDict"], [308, 2, 1, "", "extract_data_type"], [308, 2, 1, "", "get_adaptor_name"], [308, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[310, 0, 0, "-", "bleu"], [311, 0, 0, "-", "bleu_util"], [312, 0, 0, "-", "coco_label_map"], [313, 0, 0, "-", "coco_tools"], [314, 0, 0, "-", "evaluate_squad"], [315, 0, 0, "-", "f1"], [317, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[310, 1, 1, "", "BLEU"], [310, 1, 1, "", "UnicodeRegex"], [310, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[310, 3, 1, "", "labels"], [310, 3, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[310, 3, 1, "", "nondigit_punct_re"], [310, 3, 1, "", "punct_nondigit_re"], [310, 3, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[311, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[313, 1, 1, "", "COCOEvalWrapper"], [313, 1, 1, "", "COCOWrapper"], [313, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [313, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [313, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[313, 3, 1, "", "dataset"], [313, 3, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[314, 2, 1, "", "evaluate"], [314, 2, 1, "", "exact_match_score"], [314, 2, 1, "", "f1_score"], [314, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[315, 2, 1, "", "evaluate"], [315, 2, 1, "", "f1_score"], [315, 2, 1, "", "metric_max_over_ground_truths"], [315, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[317, 1, 1, "", "Accuracy"], [317, 1, 1, "", "BaseMetric"], [317, 1, 1, "", "COCOmAPv2"], [317, 1, 1, "", "F1"], [317, 1, 1, "", "GeneralTopK"], [317, 1, 1, "", "Loss"], [317, 1, 1, "", "MAE"], [317, 1, 1, "", "METRICS"], [317, 1, 1, "", "MSE"], [317, 1, 1, "", "MXNetMetrics"], [317, 1, 1, "", "Metric"], [317, 1, 1, "", "ONNXRTGLUE"], [317, 1, 1, "", "ONNXRTITMetrics"], [317, 1, 1, "", "ONNXRTQLMetrics"], [317, 1, 1, "", "PyTorchLoss"], [317, 1, 1, "", "PyTorchMetrics"], [317, 1, 1, "", "RMSE"], [317, 1, 1, "", "ROC"], [317, 1, 1, "", "SquadF1"], [317, 1, 1, "", "TensorflowCOCOMAP"], [317, 1, 1, "", "TensorflowMAP"], [317, 1, 1, "", "TensorflowMetrics"], [317, 1, 1, "", "TensorflowTopK"], [317, 1, 1, "", "TensorflowVOCMAP"], [317, 1, 1, "", "WrapMXNetMetric"], [317, 1, 1, "", "WrapONNXRTMetric"], [317, 1, 1, "", "WrapPyTorchMetric"], [317, 1, 1, "", "mIOU"], [317, 2, 1, "", "metric_registry"], [317, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[317, 3, 1, "", "label_list"], [317, 3, 1, "", "pred_list"], [317, 3, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[317, 3, 1, "", "k"], [317, 3, 1, "", "num_correct"], [317, 3, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[317, 3, 1, "", "sample"], [317, 3, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[317, 3, 1, "", "compare_label"], [317, 3, 1, "", "label_list"], [317, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[317, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[317, 3, 1, "", "compare_label"], [317, 3, 1, "", "label_list"], [317, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[317, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[317, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[317, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[317, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[317, 3, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[317, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[317, 3, 1, "", "k"], [317, 3, 1, "", "num_correct"], [317, 3, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[318, 2, 1, "", "fit"]], "neural_compressor.model": [[319, 0, 0, "-", "base_model"], [321, 0, 0, "-", "keras_model"], [322, 0, 0, "-", "model"], [323, 0, 0, "-", "mxnet_model"], [324, 0, 0, "-", "nets_factory"], [325, 0, 0, "-", "onnx_model"], [326, 0, 0, "-", "tensorflow_model"], [327, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[319, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[321, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[322, 1, 1, "", "Model"], [322, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[323, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[324, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[325, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[326, 1, 1, "", "TensorflowBaseModel"], [326, 1, 1, "", "TensorflowCheckpointModel"], [326, 1, 1, "", "TensorflowModel"], [326, 1, 1, "", "TensorflowQATModel"], [326, 1, 1, "", "TensorflowSavedModelModel"], [326, 2, 1, "", "checkpoint_session"], [326, 2, 1, "", "estimator_session"], [326, 2, 1, "", "frozen_pb_session"], [326, 2, 1, "", "get_model_type"], [326, 2, 1, "", "graph_def_session"], [326, 2, 1, "", "graph_session"], [326, 2, 1, "", "keras_session"], [326, 2, 1, "", "load_saved_model"], [326, 2, 1, "", "saved_model_session"], [326, 2, 1, "", "slim_session"], [326, 2, 1, "", "validate_and_inference_input_output"], [326, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[327, 1, 1, "", "IPEXModel"], [327, 1, 1, "", "PyTorchBaseModel"], [327, 1, 1, "", "PyTorchFXModel"], [327, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[328, 1, 1, "", "Accuracy"], [328, 1, 1, "", "Footprint"], [328, 1, 1, "", "ModelSize"], [328, 1, 1, "", "MultiObjective"], [328, 1, 1, "", "Objective"], [328, 1, 1, "", "Performance"], [328, 2, 1, "", "objective_custom_registry"], [328, 2, 1, "", "objective_registry"]], "neural_compressor.profiling": [[331, 0, 0, "-", "parser"], [341, 0, 0, "-", "profiler"]], "neural_compressor.profiling.parser": [[330, 0, 0, "-", "factory"], [333, 0, 0, "-", "onnx_parser"], [335, 0, 0, "-", "parser"], [336, 0, 0, "-", "result"], [338, 0, 0, "-", "tensorflow_parser"]], "neural_compressor.profiling.parser.factory": [[330, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[332, 0, 0, "-", "factory"], [334, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[332, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[334, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[335, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[336, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[337, 0, 0, "-", "factory"], [339, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[337, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[339, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[340, 0, 0, "-", "factory"], [343, 0, 0, "-", "onnxrt_profiler"], [346, 0, 0, "-", "profiler"], [348, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.profiling.profiler.factory": [[340, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[342, 0, 0, "-", "factory"], [344, 0, 0, "-", "profiler"], [345, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[342, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[344, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[345, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[346, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[347, 0, 0, "-", "factory"], [349, 0, 0, "-", "profiler"], [350, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[347, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[349, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[350, 2, 1, "", "create_tf_config"], [350, 2, 1, "", "delete_assign"], [350, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[351, 2, 1, "", "fit"]], "neural_compressor.strategy": [[352, 0, 0, "-", "auto"], [353, 0, 0, "-", "auto_mixed_precision"], [354, 0, 0, "-", "basic"], [355, 0, 0, "-", "bayesian"], [356, 0, 0, "-", "conservative"], [357, 0, 0, "-", "exhaustive"], [358, 0, 0, "-", "hawq_v2"], [360, 0, 0, "-", "mse"], [361, 0, 0, "-", "mse_v2"], [362, 0, 0, "-", "random"], [363, 0, 0, "-", "strategy"], [365, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[352, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[353, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[354, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[355, 1, 1, "", "BayesianOptimization"], [355, 1, 1, "", "BayesianTuneStrategy"], [355, 1, 1, "", "TargetSpace"], [355, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[356, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[357, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[358, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[360, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[361, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[362, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[363, 1, 1, "", "TuneStrategy"], [363, 1, 1, "", "TuneStrategyMeta"], [363, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[364, 0, 0, "-", "constant"], [366, 0, 0, "-", "tuning_sampler"], [367, 0, 0, "-", "tuning_space"], [368, 0, 0, "-", "tuning_structs"], [369, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[366, 1, 1, "", "BlockFallbackTuningSampler"], [366, 1, 1, "", "FallbackTuningSampler"], [366, 1, 1, "", "LowerBitsSampler"], [366, 1, 1, "", "ModelWiseTuningSampler"], [366, 1, 1, "", "OpTypeWiseTuningSampler"], [366, 1, 1, "", "OpWiseTuningSampler"], [366, 1, 1, "", "TuningOrder"], [366, 1, 1, "", "TuningSampler"], [366, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_space": [[367, 1, 1, "", "TuningItem"], [367, 1, 1, "", "TuningSpace"], [367, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [367, 2, 1, "", "pattern_to_internal"], [367, 2, 1, "", "pattern_to_path"], [367, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[368, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[369, 1, 1, "", "OrderedDefaultDict"], [369, 2, 1, "", "build_slave_faker_model"], [369, 2, 1, "", "extract_data_type"], [369, 2, 1, "", "get_adaptor_name"], [369, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[370, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[370, 1, 1, "", "ExampleClass"], [370, 3, 1, "", "attribute1"], [370, 2, 1, "", "function1"], [370, 2, 1, "", "function2"], [370, 2, 1, "", "function3"], [370, 2, 1, "", "generator1"], [370, 4, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[370, 3, 1, "", "attr1"], [370, 3, 1, "", "attr2"], [370, 3, 1, "", "attr5"]], "neural_compressor.training": [[372, 1, 1, "", "CallBacks"], [372, 1, 1, "", "CompressionManager"], [372, 2, 1, "", "fit"], [372, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[373, 0, 0, "-", "collect_layer_histogram"], [374, 0, 0, "-", "constant"], [375, 0, 0, "-", "create_obj_from_config"], [377, 0, 0, "-", "kl_divergence"], [378, 0, 0, "-", "load_huggingface"], [379, 0, 0, "-", "logger"], [380, 0, 0, "-", "neural_insights_utils"], [381, 0, 0, "-", "options"], [382, 0, 0, "-", "pytorch"], [383, 0, 0, "-", "utility"], [384, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[373, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[375, 2, 1, "", "create_dataloader"], [375, 2, 1, "", "create_dataset"], [375, 2, 1, "", "create_eval_func"], [375, 2, 1, "", "create_train_func"], [375, 2, 1, "", "get_algorithm"], [375, 2, 1, "", "get_func_from_config"], [375, 2, 1, "", "get_metrics"], [375, 2, 1, "", "get_postprocess"], [375, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[377, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[378, 1, 1, "", "OptimizedModel"], [378, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[379, 1, 1, "", "Logger"], [379, 2, 1, "", "debug"], [379, 2, 1, "", "error"], [379, 2, 1, "", "fatal"], [379, 2, 1, "", "info"], [379, 2, 1, "", "log"], [379, 2, 1, "", "warn"], [379, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[380, 2, 1, "", "register_neural_insights_workload"], [380, 2, 1, "", "update_neural_insights_workload"], [380, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[381, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[382, 2, 1, "", "is_int8_model"], [382, 2, 1, "", "load"]], "neural_compressor.utils.utility": [[383, 1, 1, "", "CaptureOutputToFile"], [383, 1, 1, "", "CpuInfo"], [383, 2, 1, "", "Dequantize"], [383, 2, 1, "", "DequantizeWeight"], [383, 1, 1, "", "DotDict"], [383, 1, 1, "", "GLOBAL_STATE"], [383, 1, 1, "", "LazyImport"], [383, 1, 1, "", "MODE"], [383, 1, 1, "", "OpEntry"], [383, 1, 1, "", "Statistics"], [383, 2, 1, "", "alias_param"], [383, 2, 1, "", "calculate_mse"], [383, 2, 1, "", "combine_histogram"], [383, 2, 1, "", "compare_objects"], [383, 2, 1, "", "compute_sparsity"], [383, 2, 1, "", "dump_class_attrs"], [383, 2, 1, "", "dump_data_to_local"], [383, 2, 1, "", "dump_elapsed_time"], [383, 2, 1, "", "dump_table"], [383, 2, 1, "", "dump_table_to_csv"], [383, 2, 1, "", "equal_dicts"], [383, 2, 1, "", "fault_tolerant_file"], [383, 2, 1, "", "get_all_fp32_data"], [383, 2, 1, "", "get_number_of_sockets"], [383, 2, 1, "", "get_op_list"], [383, 2, 1, "", "get_size"], [383, 2, 1, "", "get_tensor_histogram"], [383, 2, 1, "", "get_tensors_info"], [383, 2, 1, "", "get_tuning_history"], [383, 2, 1, "", "get_weights_details"], [383, 2, 1, "", "load_data_from_pkl"], [383, 2, 1, "", "mse_metric_gap"], [383, 2, 1, "", "print_op_list"], [383, 2, 1, "", "print_table"], [383, 2, 1, "", "recover"], [383, 2, 1, "", "set_random_seed"], [383, 2, 1, "", "set_resume_from"], [383, 2, 1, "", "set_tensorboard"], [383, 2, 1, "", "set_workspace"], [383, 2, 1, "", "show_memory_info"], [383, 2, 1, "", "singleton"], [383, 2, 1, "", "str2array"], [383, 2, 1, "", "time_limit"], [383, 2, 1, "", "version1_eq_version2"], [383, 2, 1, "", "version1_gt_version2"], [383, 2, 1, "", "version1_gte_version2"], [383, 2, 1, "", "version1_lt_version2"], [383, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[384, 1, 1, "", "WeightsDetails"], [384, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:attribute", "4": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "data", "Python data"]}, "titleterms": {"block_mask": 0, "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385], "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 393, 394], "modul": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 160, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 202, 203, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 246, 248, 249, 250, 252, 253, 254, 255, 257, 258, 260, 261, 262, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 276, 277, 278, 279, 282, 283, 284, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 305, 306, 307, 308, 310, 311, 313, 314, 315, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 334, 335, 336, 337, 339, 340, 342, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 366, 367, 368, 369, 370, 372, 373, 375, 377, 378, 379, 380, 381, 382, 383, 384], "content": [1, 2, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 334, 335, 336, 337, 339, 340, 342, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 367, 368, 369, 370, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 392], "class": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 108, 110, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 142, 143, 146, 147, 150, 151, 152, 153, 154, 156, 157, 160, 164, 165, 166, 167, 168, 169, 171, 172, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 255, 256, 257, 260, 263, 264, 265, 266, 267, 268, 270, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 305, 306, 307, 308, 310, 313, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 334, 335, 336, 337, 339, 340, 342, 344, 346, 347, 349, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 366, 367, 368, 369, 370, 372, 373, 376, 377, 378, 379, 381, 383, 384, 393], "function": [1, 13, 16, 33, 39, 40, 62, 63, 65, 99, 100, 111, 113, 141, 142, 143, 147, 148, 149, 150, 152, 155, 157, 160, 162, 164, 166, 167, 168, 169, 170, 172, 181, 182, 190, 192, 196, 199, 200, 201, 204, 206, 207, 208, 209, 211, 213, 214, 216, 219, 226, 234, 236, 240, 243, 244, 245, 247, 248, 249, 252, 253, 254, 257, 258, 260, 261, 262, 263, 264, 271, 278, 282, 287, 288, 289, 291, 296, 302, 306, 308, 310, 311, 313, 314, 315, 316, 317, 318, 322, 326, 328, 345, 350, 351, 355, 363, 367, 369, 370, 372, 375, 376, 378, 379, 380, 382, 383, 414], "subpackag": [2, 17, 82, 106, 107, 109, 159, 161, 176, 201, 220, 245, 256, 280, 298, 309, 359], "submodul": [2, 12, 17, 29, 46, 71, 82, 90, 96, 101, 106, 107, 109, 112, 125, 138, 144, 152, 158, 159, 161, 163, 173, 177, 184, 196, 200, 204, 211, 218, 221, 228, 240, 244, 247, 251, 256, 263, 269, 275, 281, 285, 298, 304, 309, 316, 320, 331, 333, 338, 341, 343, 348, 359, 365, 371, 376], "packag": [2, 29, 152, 184, 196, 200, 201, 204, 211, 228, 240, 244, 245, 247, 256, 263, 275, 280, 281, 298, 316, 320, 359, 376, 438, 440, 442, 443], "kera": 3, "keras_util": [4, 5, 6, 7, 8, 9, 10], "conv2d": 4, "dens": 5, "depthwise_conv2d": 6, "pool2d": 8, "quantiz": [9, 38, 292, 351, 389, 392, 405, 413, 416, 419, 422, 425, 434, 445, 452, 453, 454, 457, 463], "separable_conv2d": 10, "mxnet": [11, 410, 424, 453, 459, 463], "mxnet_util": [12, 13], "util": [13, 39, 141, 149, 170, 303, 304, 305, 306, 307, 308, 345, 350, 364, 365, 366, 367, 368, 369, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 396], "onnxrt": [14, 410, 424, 459], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], "calibr": [15, 16], "oper": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "activ": 18, "argmax": 19, "attent": 20, "binary_op": 21, "concat": 22, "conv": 23, "direct_q8": 24, "embed_layernorm": 25, "gather": 26, "gavgpool": 27, "gemm": 28, "lstm": 30, "matmul": [31, 457], "maxpool": 32, "op": [33, 416], "pad": 34, "pool": 35, "resiz": 36, "split": 37, "pytorch": [40, 382, 410, 414, 416, 424, 426, 453, 454, 458, 459, 463], "queri": [41, 393], "tensorflow": [42, 410, 414, 416, 424, 426, 453, 454, 458, 459, 463], "tf_util": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141], "graph_convert": 43, "graph_converter_without_calib": 44, "graph_rewrit": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "bf16": [45, 46], "bf16_convert": [45, 142], "gener": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80], "convert_add_to_biasadd": 47, "convert_layout": 48, "convert_leakyrelu": 49, "convert_nan_to_random": 50, "convert_placeholder_to_const": 51, "dequantize_cast_optim": 52, "dilated_contract": 53, "dummy_biasadd": 54, "expanddims_optim": 55, "fetch_weight_from_reshap": 56, "fold_batch_norm": 57, "fold_const": 58, "fuse_biasadd_add": 59, "fuse_column_wise_mul": 60, "fuse_conv_with_math": 61, "fuse_decomposed_bn": 62, "fuse_decomposed_in": 63, "fuse_gelu": 64, "fuse_layer_norm": 65, "fuse_pad_with_conv": 66, "fuse_pad_with_fp32_conv": 67, "fuse_reshape_transpos": 68, "graph_cse_optim": 69, "grappler_pass": 70, "insert_print_nod": 72, "move_squeeze_after_relu": 73, "pre_optim": 74, "remove_training_nod": 75, "rename_batch_norm": 76, "split_shared_input": 77, "strip_equivalent_nod": 78, "strip_unused_nod": 79, "switch_optim": 80, "graph_bas": 81, "int8": [83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 416, 463], "freeze_fake_qu": 83, "freeze_valu": 84, "freeze_value_without_calib": 85, "fuse_conv_redundant_dequant": 86, "fuse_conv_requant": 87, "fuse_matmul_redundant_dequant": 88, "fuse_matmul_requant": 89, "meta_op_optim": 91, "post_hostconst_convert": 92, "post_quantized_op_cs": 93, "rnn_convert": 94, "scale_propag": 95, "onnx": [96, 97, 98, 99, 100, 395, 422, 426, 453, 463], "onnx_graph": 97, "onnx_nod": 98, "onnx_schema": 99, "tf2onnx_util": 100, "qdq": [101, 102, 103, 104, 118, 119, 120, 121, 122, 123, 124, 125, 126, 463], "insert_qdq_pattern": 102, "merge_duplicated_qdq": 103, "share_qdq_y_pattern": 104, "graph_util": 105, "quantize_graph": [107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], "qat": [108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 463], "fake_quant": 108, "quantize_config": 110, "quantize_help": 111, "quantize_lay": [112, 113, 114, 115, 116], "optimize_lay": 113, "quantize_layer_add": 114, "quantize_layer_bas": 115, "quantize_layer_bn": 116, "quantize_wrapp": 117, "fuse_qdq_bn": 118, "fuse_qdq_concatv2": 119, "fuse_qdq_conv": 120, "fuse_qdq_deconv": 121, "fuse_qdq_in": 122, "fuse_qdq_matmul": 123, "fuse_qdq_pool": 124, "optimize_qdq": 126, "quantize_graph_bas": 127, "quantize_graph_bn": 128, "quantize_graph_concatv2": 129, "quantize_graph_conv": 130, "quantize_graph_for_intel_cpu": 131, "quantize_graph_matmul": 132, "quantize_graph_pool": 133, "quantize_graph_common": 134, "tf2onnx_convert": 135, "transform_graph": [136, 137, 138, 139, 140], "bias_correct": 136, "graph_transform_bas": 137, "insert_log": 139, "rerange_quantized_concat": 140, "torch_util": [142, 143, 144, 145, 146, 147, 148, 149, 216], "hawq_metr": 143, "model_wrapp": 145, "pattern_detector": 146, "smooth_quant": [147, 153], "symbolic_trac": 148, "algorithm": [150, 151, 152, 153, 154, 457, 460], "fast_bias_correct": 151, "weight_correct": 154, "benchmark": [155, 208, 399, 408, 425, 452], "compress": [156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 218, 219, 400], "callback": 156, "distil": [157, 158, 250, 412, 413, 425, 452, 463], "criterion": [157, 209], "pruner": [160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 278, 289], "criteria": [160, 450, 460], "model_slim": [162, 163, 164, 165], "auto_slim": 162, "pattern_analyz": 164, "weight_slim": 165, "pattern": [166, 281, 282, 283, 287, 450], "reg": 168, "schedul": [169, 291, 293, 450], "conf": [171, 172, 173, 174], "config": [171, 175, 401, 409, 410, 447], "dotdict": 172, "pythonic_config": 174, "contrib": [176, 177, 178, 179, 220, 221, 222, 223], "strategi": [177, 178, 179, 221, 222, 223, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 406, 456, 460], "sigopt": [178, 222, 456, 460], "tpe": [179, 223, 460], "data": [180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 415], "dataload": [180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 210, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 409, 410], "base_dataload": [180, 224], "default_dataload": [182, 226], "fetcher": [183, 227], "attribut": [184, 192, 201, 236, 245, 256, 280, 320, 370, 376, 387], "mxnet_dataload": [185, 229], "onnxrt_dataload": [186, 230], "pytorch_dataload": [187, 231], "sampler": [188, 232], "tensorflow_dataload": [189, 233], "dataset": [190, 191, 192, 193, 194, 195, 196, 197, 234, 235, 236, 237, 238, 239, 240, 241, 410, 420], "bert_dataset": [190, 234], "coco_dataset": [191, 235], "dummy_dataset": [193, 237], "dummy_dataset_v2": [194, 238], "imagenet_dataset": [195, 239], "style_transfer_dataset": [197, 241], "filter": [198, 199, 200, 242, 243, 244], "coco_filt": [198, 242], "transform": [202, 203, 204, 205, 206, 207, 246, 247, 248, 249, 420, 459], "coco_transform": 202, "imagenet_transform": [203, 246], "postprocess": [205, 215], "token": [206, 248], "experiment": [208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308], "common": [209, 210, 211, 212, 213, 214, 215, 216, 389, 417], "metric": [212, 257, 258, 259, 260, 261, 262, 263, 264, 310, 311, 312, 313, 314, 315, 316, 317, 420, 424], "model": [213, 319, 320, 321, 322, 323, 324, 325, 326, 327, 403, 416, 419, 422, 425, 427, 434, 450, 457, 463], "optim": [214, 435, 445, 448, 461], "compon": 217, "prune": [219, 279, 290, 425, 450, 452, 463], "export": [251, 252, 253, 254, 416], "qlinear2qdq": 252, "tf2onnx": 253, "torch2onnx": 254, "graph_optim": 255, "bleu": [257, 310], "bleu_util": [258, 311], "coco_label_map": [259, 312], "coco_tool": [260, 313], "evaluate_squad": [261, 314], "f1": [262, 315], "mixed_precis": 265, "model_convers": 266, "na": [267, 268, 269, 270, 271, 272, 390, 452], "basic_na": 267, "dyna": 268, "nas_util": 271, "search_algorithm": 272, "pruner_legaci": [273, 274, 275, 276, 277, 278], "gradient_sensit": 273, "group_lasso": 274, "magnitud": 276, "pattern_lock": 277, "pruning_recip": [280, 281, 282, 283], "tile_pattern": 283, "pruning_v2": 284, "pytorch_prun": [285, 286, 287, 288, 289, 290, 291], "logger": [286, 379], "prune_util": 288, "auto_mixed_precis": [294, 353], "basic": [295, 354, 390, 460], "bayesian": [296, 355, 460], "exhaust": [297, 357, 460], "mse": [299, 360, 460], "mse_v2": [300, 361, 460], "random": [301, 362, 460], "constant": [303, 364, 374], "tuning_sampl": [305, 366], "tuning_spac": [306, 367], "tuning_struct": [307, 368], "mix_precis": 318, "base_model": 319, "keras_model": 321, "mxnet_model": 323, "nets_factori": 324, "onnx_model": 325, "tensorflow_model": 326, "torch_model": 327, "object": [328, 404, 447], "profil": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350], "parser": [330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "factori": [330, 332, 337, 340, 342, 347], "onnx_pars": [332, 333, 334], "result": 336, "tensorflow_pars": [337, 338, 339], "onnxrt_profil": [342, 343, 344, 345], "tensorflow_profil": [347, 348, 349, 350], "auto": [352, 439, 445, 454, 457, 460], "conserv": [356, 460], "hawq_v2": [358, 460], "templat": [370, 371, 388], "api_doc_exampl": 370, "train": [372, 389, 407, 414, 425, 453], "collect_layer_histogram": 373, "create_obj_from_config": 375, "kl_diverg": 377, "load_huggingfac": 378, "neural_insights_util": 380, "option": [381, 414, 433], "weights_detail": 384, "version": 385, "intel": [386, 392, 421, 422, 425, 431, 439, 445, 463, 464], "neural": [386, 389, 390, 392, 421, 422, 425, 428, 432, 434, 439, 445, 450, 456, 461, 464], "compressor": [386, 389, 392, 421, 422, 425, 439, 445, 456, 464], "document": [386, 392, 397, 464], "section": [386, 464], "contributor": [387, 388], "coven": [387, 388], "code": [387, 388, 390, 425, 446, 461], "conduct": [387, 388], "our": [387, 457], "pledg": 387, "standard": 387, "respons": 387, "scope": [387, 450], "enforc": 387, "contribut": [388, 438, 442], "guidelin": 388, "pull": 388, "request": 388, "checklist": 388, "support": [388, 389, 390, 393, 408, 409, 410, 412, 413, 414, 416, 418, 421, 422, 424, 426, 427, 429, 430, 434, 435, 447, 448, 450, 452, 453, 457, 458, 459, 462], "fx": 389, "introduct": [389, 390, 393, 408, 409, 410, 412, 413, 414, 416, 418, 421, 424, 426, 427, 445, 447, 448, 450, 452, 453, 456, 457, 458, 459, 460, 462], "mode": [389, 463], "matrix": [389, 390, 393, 408, 409, 410, 412, 413, 414, 416, 418, 421, 424, 426, 427, 430, 447, 448, 450, 452, 453, 457, 458, 462], "get": [389, 390, 392, 393, 408, 409, 410, 412, 413, 414, 418, 419, 424, 426, 428, 439, 446, 447, 448, 450, 452, 453, 458, 462], "start": [389, 390, 392, 393, 408, 409, 410, 412, 413, 414, 418, 419, 424, 426, 428, 429, 433, 439, 447, 448, 450, 452, 453, 458, 462], "post": [389, 425, 453], "static": [389, 453], "dynam": [389, 390, 453], "awar": [389, 425, 453], "exampl": [389, 390, 393, 397, 408, 409, 410, 412, 413, 414, 415, 416, 425, 426, 427, 430, 434, 447, 448, 450, 453, 457, 458, 463], "note": [389, 455], "detail": 389, "problem": 389, "architectur": [390, 411, 421, 422], "search": [390, 445], "api": [390, 392, 393, 397, 398, 408, 409, 410, 412, 413, 414, 419, 420, 424, 426, 428, 432, 446, 447, 448, 450, 452, 461], "usag": [390, 434, 445, 458, 460], "1": [390, 414, 417, 420, 425, 445, 463], "python": [390, 392, 419, 424, 428, 432, 433, 440, 443, 452, 461], "yaml": [390, 409, 410, 414, 418, 462], "2": [390, 414, 417, 420, 425, 445, 463], "onli": 390, "advanc": [390, 461], "custom": [390, 424, 460], "secur": [391, 414], "polici": [391, 460], "report": 391, "vulner": 391, "instal": [392, 422, 429, 431, 438, 439, 442], "from": [392, 422, 425], "pypi": [392, 434], "select": [392, 439], "public": [392, 451], "event": [392, 451], "addit": 392, "research": 392, "collabor": 392, "work": [393, 453], "flow": [393, 453], "background": [393, 445], "ad": 393, "new": [393, 440, 443, 460], "backend": [393, 453], "capabl": 393, "implement": 393, "onnxrtadaptor": 393, "runtim": [395, 422, 426, 453, 463], "torch": [396, 463], "mix": [402, 425, 426, 454], "precis": [402, 425, 426, 454], "framework": [409, 410, 416, 418, 427, 452, 457], "file": [409, 410, 418, 462], "creat": 409, "user": [409, 410, 414, 420, 452, 461, 462], "specif": [409, 410], "design": [411, 460], "workflow": 411, "knowledg": [412, 463], "intermedi": 412, "layer": [412, 457], "self": 412, "distribut": [414, 434, 460], "infer": 414, "evalu": 414, "featur": [414, 418, 421, 434, 435, 439, 452, 453, 458, 462], "pure": 414, "configur": [414, 418, 449, 452, 456, 462], "defin": 414, "horovodrun": 414, "execut": 414, "list": [415, 459], "releas": [415, 440, 443, 455], "fp32": 416, "appendix": 416, "frequent": 417, "ask": 417, "question": 417, "build": [417, 424], "issu": [417, 455], "3": [417, 429, 445], "4": [417, 436, 445, 451], "quick": [419, 433], "sampl": 419, "jupyterlab": [419, 439], "extens": [419, 428, 438, 439, 442, 445, 446, 463], "valid": [419, 422, 457, 463], "incompat": [420, 455], "chang": [420, 444, 446, 455], "between": 420, "v1": 420, "face": 420, "built": [420, 422, 424], "infrastructur": 421, "linux": 422, "prerequisit": 422, "binari": 422, "sourc": 422, "ai": 422, "kit": 422, "window": 422, "system": [422, 449], "requir": [422, 438, 442], "hardwar": [422, 463], "environ": [422, 431], "cpu": [422, 431, 463], "base": [422, 461], "64": 422, "compat": 422, "processor": 422, "gpu": 422, "": [422, 446], "xe": 422, "multipl": [422, 447, 463], "vendor": 422, "through": [422, 463], "softwar": 422, "legal": 423, "inform": 423, "licens": 423, "citat": 423, "trademark": 423, "singl": [424, 447], "multi": 424, "migrat": 425, "x": 425, "orchestr": [425, 448], "coder": [428, 432, 434, 445, 461], "what": [428, 446], "do": 428, "we": 428, "offer": 428, "jupyt": [428, 429, 440, 443], "lab": [428, 429], "launcher": [428, 433], "contact": 428, "aw": 429, "amazon": 429, "sagemak": 429, "For": 429, "studio": 429, "notebook": 429, "instanc": 429, "guid": [429, 461], "bigdl": 430, "nano": 430, "platform": [431, 456], "best": [431, 439], "perform": [431, 456], "set": [431, 445], "mkl": 431, "openmp": 431, "jemalloc": 431, "numa": 431, "control": 431, "variabl": 431, "frequenc": 431, "govern": 431, "enabl": [432, 439, 445], "bench": 432, "superbench": 432, "argument": 433, "v0": 436, "highlight": 436, "other": 436, "changelog": [437, 441], "neural_compressor_ext_lab": [438, 440], "uninstal": [438, 442], "develop": [438, 442], "Or": 439, "let": 439, "u": 439, "help": 439, "you": 439, "pre": 439, "requisit": 439, "make": [440, 443, 446], "manual": [440, 443], "npm": [440, 443], "autom": [440, 443], "publish": [440, 443], "conda": [440, 443], "forg": [440, 443], "neural_compressor_ext_lab_alibaba": [442, 443], "log": 444, "unreleas": 444, "vscode": 445, "open": 445, "icon": 445, "5": 445, "welcom": 446, "your": 446, "v": 446, "folder": 446, "setup": 446, "up": 446, "run": 446, "straight": 446, "awai": 446, "explor": 446, "test": 446, "go": 446, "further": 446, "One": 448, "shot": 448, "network": 450, "type": 450, "sparsiti": 450, "decai": 450, "regular": 450, "spars": 450, "deploy": 450, "refer": [450, 453, 457], "full": 451, "60": 451, "2023": 451, "7": 451, "2022": 451, "34": 451, "2021": 451, "15": 451, "2018": 451, "2020": 451, "style": 452, "access": 452, "fundament": [453, 457], "scheme": 453, "ipex": 453, "approach": 453, "With": 453, "without": 453, "accuraci": [453, 460], "tune": [453, 457, 460], "specifi": 453, "rule": 453, "recip": 453, "devic": 453, "turn": 454, "off": 454, "dure": 454, "known": 455, "prepar": 456, "benefit": 456, "comparison": 456, "differ": 456, "smooth": 457, "quant": 457, "per": 457, "tensor": 457, "channel": 457, "limit": 457, "smoothquant": 457, "enhanc": 457, "wise": 457, "alpha": 457, "engin": 457, "tensorboard": 458, "space": 460, "exit": 460, "process": 460, "overview": 461, "zero": 461, "topic": 461, "11": 463, "0": 463, "13": 463, "ptq": 463, "9": 463}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [108, "module-contents"], [110, "module-contents"], [111, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [160, "module-contents"], [162, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [174, "module-contents"], [175, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [202, "module-contents"], [203, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [219, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [226, "module-contents"], [227, "module-contents"], [229, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [246, "module-contents"], [248, "module-contents"], [249, "module-contents"], [250, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [255, "module-contents"], [257, "module-contents"], [258, "module-contents"], [260, "module-contents"], [261, "module-contents"], [262, "module-contents"], [264, "module-contents"], [265, "module-contents"], [266, "module-contents"], [267, "module-contents"], [268, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [273, "module-contents"], [274, "module-contents"], [276, "module-contents"], [277, "module-contents"], [278, "module-contents"], [279, "module-contents"], [282, "module-contents"], [283, "module-contents"], [284, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [290, "module-contents"], [291, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [295, "module-contents"], [296, "module-contents"], [297, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [302, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [310, "module-contents"], [311, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [317, "module-contents"], [318, "module-contents"], [319, "module-contents"], [321, "module-contents"], [322, "module-contents"], [323, "module-contents"], [324, "module-contents"], [325, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [330, "module-contents"], [332, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [339, "module-contents"], [340, "module-contents"], [342, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [372, "module-contents"], [373, "module-contents"], [375, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"]], "Classes": [[1, "classes"], [3, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [108, "classes"], [110, "classes"], [114, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [139, "classes"], [140, "classes"], [142, "classes"], [143, "classes"], [146, "classes"], [147, "classes"], [150, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [156, "classes"], [157, "classes"], [160, "classes"], [164, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [171, "classes"], [172, "classes"], [174, "classes"], [175, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [217, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [226, "classes"], [227, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [260, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [270, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [276, "classes"], [277, "classes"], [278, "classes"], [279, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [287, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [293, "classes"], [294, "classes"], [295, "classes"], [296, "classes"], [297, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [310, "classes"], [313, "classes"], [316, "classes"], [317, "classes"], [319, "classes"], [320, "classes"], [321, "classes"], [322, "classes"], [323, "classes"], [324, "classes"], [325, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [330, "classes"], [332, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [339, "classes"], [340, "classes"], [342, "classes"], [344, "classes"], [346, "classes"], [347, "classes"], [349, "classes"], [352, "classes"], [353, "classes"], [354, "classes"], [355, "classes"], [356, "classes"], [357, "classes"], [358, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [366, "classes"], [367, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [372, "classes"], [373, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [381, "classes"], [383, "classes"], [384, "classes"]], "Functions": [[1, "functions"], [13, "functions"], [16, "functions"], [33, "functions"], [39, "functions"], [40, "functions"], [62, "functions"], [63, "functions"], [65, "functions"], [99, "functions"], [100, "functions"], [111, "functions"], [113, "functions"], [141, "functions"], [142, "functions"], [143, "functions"], [147, "functions"], [148, "functions"], [149, "functions"], [150, "functions"], [152, "functions"], [155, "functions"], [157, "functions"], [160, "functions"], [162, "functions"], [164, "functions"], [166, "functions"], [167, "functions"], [168, "functions"], [169, "functions"], [170, "functions"], [172, "functions"], [181, "functions"], [182, "functions"], [190, "functions"], [192, "functions"], [196, "functions"], [199, "functions"], [200, "functions"], [201, "functions"], [204, "functions"], [206, "functions"], [207, "functions"], [208, "functions"], [209, "functions"], [211, "functions"], [213, "functions"], [214, "functions"], [216, "functions"], [219, "functions"], [226, "functions"], [234, "functions"], [236, "functions"], [240, "functions"], [243, "functions"], [244, "functions"], [245, "functions"], [247, "functions"], [248, "functions"], [249, "functions"], [252, "functions"], [253, "functions"], [254, "functions"], [257, "functions"], [258, "functions"], [260, "functions"], [261, "functions"], [262, "functions"], [263, "functions"], [264, "functions"], [271, "functions"], [278, "functions"], [282, "functions"], [287, "functions"], [288, "functions"], [289, "functions"], [291, "functions"], [296, "functions"], [302, "functions"], [306, "functions"], [308, "functions"], [310, "functions"], [311, "functions"], [313, "functions"], [314, "functions"], [315, "functions"], [316, "functions"], [317, "functions"], [318, "functions"], [322, "functions"], [326, "functions"], [328, "functions"], [345, "functions"], [350, "functions"], [351, "functions"], [355, "functions"], [363, "functions"], [367, "functions"], [369, "functions"], [370, "functions"], [372, "functions"], [375, "functions"], [376, "functions"], [378, "functions"], [379, "functions"], [380, "functions"], [382, "functions"], [383, "functions"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "Subpackages": [[2, "subpackages"], [17, "subpackages"], [82, "subpackages"], [106, "subpackages"], [107, "subpackages"], [109, "subpackages"], [159, "subpackages"], [161, "subpackages"], [176, "subpackages"], [201, "subpackages"], [220, "subpackages"], [245, "subpackages"], [256, "subpackages"], [280, "subpackages"], [298, "subpackages"], [309, "subpackages"], [359, "subpackages"]], "Submodules": [[2, "submodules"], [12, "submodules"], [17, "submodules"], [29, "submodules"], [46, "submodules"], [71, "submodules"], [82, "submodules"], [90, "submodules"], [96, "submodules"], [101, "submodules"], [106, "submodules"], [107, "submodules"], [109, "submodules"], [112, "submodules"], [125, "submodules"], [138, "submodules"], [144, "submodules"], [152, "submodules"], [158, "submodules"], [159, "submodules"], [161, "submodules"], [163, "submodules"], [173, "submodules"], [177, "submodules"], [184, "submodules"], [196, "submodules"], [200, "submodules"], [204, "submodules"], [211, "submodules"], [218, "submodules"], [221, "submodules"], [228, "submodules"], [240, "submodules"], [244, "submodules"], [247, "submodules"], [251, "submodules"], [256, "submodules"], [263, "submodules"], [269, "submodules"], [275, "submodules"], [281, "submodules"], [285, "submodules"], [298, "submodules"], [304, "submodules"], [309, "submodules"], [316, "submodules"], [320, "submodules"], [331, "submodules"], [333, "submodules"], [338, "submodules"], [341, "submodules"], [343, "submodules"], [348, "submodules"], [359, "submodules"], [365, "submodules"], [371, "submodules"], [376, "submodules"]], "Package Contents": [[2, "package-contents"], [29, "package-contents"], [152, "package-contents"], [184, "package-contents"], [196, "package-contents"], [200, "package-contents"], [201, "package-contents"], [204, "package-contents"], [211, "package-contents"], [228, "package-contents"], [240, "package-contents"], [244, "package-contents"], [245, "package-contents"], [247, "package-contents"], [256, "package-contents"], [263, "package-contents"], [275, "package-contents"], [280, "package-contents"], [281, "package-contents"], [298, "package-contents"], [316, "package-contents"], [320, "package-contents"], [359, "package-contents"], [376, "package-contents"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[33, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[34, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[36, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[37, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[38, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[39, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[40, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[41, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[42, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[43, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[44, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[105, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[106, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[107, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[135, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[136, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[137, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[138, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[139, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[140, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[141, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[142, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[143, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[144, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[145, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[146, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[147, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[148, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[149, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[150, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[151, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[152, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[153, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[154, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[155, "module-neural_compressor.benchmark"]], "neural_compressor.compression.callbacks": [[156, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[157, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[158, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[159, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[160, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[161, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[162, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[163, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[164, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[165, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns": [[166, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.pruners": [[167, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.regs": [[168, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[169, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.utils": [[170, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[171, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[172, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[173, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[174, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[175, "module-neural_compressor.config"]], "neural_compressor.contrib": [[176, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[177, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[178, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[179, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[180, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[181, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[182, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[183, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[184, "module-neural_compressor.data.dataloaders"]], "Attributes": [[184, "attributes"], [192, "attributes"], [201, "attributes"], [236, "attributes"], [245, "attributes"], [256, "attributes"], [280, "attributes"], [320, "attributes"], [370, "attributes"], [376, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[185, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[186, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[187, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[188, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[189, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[190, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[191, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[192, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[193, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[194, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[195, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[196, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[197, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[198, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[199, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[200, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[201, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[202, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[203, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[204, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[205, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[206, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[207, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[208, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[209, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[210, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[211, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[212, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[213, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[214, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[215, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[216, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[217, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[218, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[219, "module-neural_compressor.experimental.compression.pruning"]], "neural_compressor.experimental.contrib": [[220, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[221, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[222, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[223, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[224, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[225, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[226, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[227, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[228, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[229, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[230, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[231, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[232, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[233, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[234, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[235, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[236, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[237, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[238, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[239, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[240, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[241, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[242, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[243, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[244, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[245, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[246, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[247, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[248, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[249, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[250, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[251, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[252, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[253, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[254, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[255, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[256, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[257, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[258, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[259, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[260, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[261, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[262, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[263, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[264, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[265, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[266, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[267, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[268, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[269, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[270, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[271, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[272, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[273, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[274, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[275, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[276, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[277, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[278, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[279, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[280, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[281, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[282, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[283, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[284, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[285, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[286, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[287, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[288, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[289, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[290, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[291, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[292, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[293, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[294, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[295, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[296, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[297, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[298, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[299, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[300, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[301, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[302, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[303, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[304, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[305, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[306, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[307, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[308, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[309, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[310, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[311, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[312, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[313, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[314, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[315, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[316, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[317, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[318, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[319, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[320, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[321, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[322, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[323, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[324, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[325, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[326, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[327, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[328, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[329, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[330, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[331, "module-neural_compressor.profiling.parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[332, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[333, "module-neural_compressor.profiling.parser.onnx_parser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[334, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[335, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[336, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[337, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[338, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[339, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[340, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[341, "module-neural_compressor.profiling.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[342, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[343, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[344, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[345, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[346, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[347, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[348, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[349, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[350, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[351, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[352, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[353, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[354, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[355, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[356, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[357, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[358, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[359, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[360, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[361, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[362, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[363, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[364, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[365, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[366, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[367, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[368, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[369, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[370, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[371, "module-neural_compressor.template"]], "neural_compressor.training": [[372, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[373, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[374, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[375, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[376, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[377, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[378, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[379, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[380, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[381, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[382, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[383, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[384, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[385, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[386, "intel-neural-compressor-documentation"], [464, "intel-neural-compressor-documentation"]], "Sections": [[386, "sections"], [464, "sections"]], "Contributor Covenant Code of Conduct": [[387, "contributor-covenant-code-of-conduct"], [388, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[387, "our-pledge"]], "Our Standards": [[387, "our-standards"]], "Our Responsibilities": [[387, "our-responsibilities"]], "Scope": [[387, "scope"]], "Enforcement": [[387, "enforcement"]], "Attribution": [[387, "attribution"]], "Contribution Guidelines": [[388, "contribution-guidelines"]], "Pull Request Checklist": [[388, "pull-request-checklist"]], "Pull Request Template": [[388, "pull-request-template"]], "Support": [[388, "support"]], "FX": [[389, "fx"]], "Introduction": [[389, "introduction"], [390, "introduction"], [393, "introduction"], [408, "introduction"], [409, "introduction"], [410, "introduction"], [412, "introduction"], [413, "introduction"], [414, "introduction"], [416, "introduction"], [418, "introduction"], [421, "introduction"], [424, "introduction"], [426, "introduction"], [427, "introduction"], [447, "introduction"], [448, "introduction"], [450, "introduction"], [452, "introduction"], [456, "introduction"], [457, "introduction"], [458, "introduction"], [459, "introduction"], [460, "introduction"], [462, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[389, "fx-mode-support-matrix-in-neural-compressor"]], "Get Start": [[389, "get-start"]], "Post Training Static Quantization": [[389, "post-training-static-quantization"], [453, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[389, "post-training-dynamic-quantization"], [453, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[389, "quantization-aware-training"]], "Examples": [[389, "examples"], [390, "examples"], [408, "examples"], [409, "examples"], [410, "examples"], [412, "examples"], [413, "examples"], [414, "examples"], [415, "examples"], [416, "examples"], [425, "examples"], [426, "examples"], [427, "examples"], [448, "examples"], [450, "examples"], [453, "examples"], [458, "examples"]], "Note": [[389, "note"]], "Details": [[389, "details"]], "Common Problem": [[389, "common-problem"]], "Dynamic Quantization": [[389, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[389, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[390, "neural-architecture-search"]], "Basic NAS": [[390, "basic-nas"]], "Dynamic NAS": [[390, "dynamic-nas"]], "NAS Support Matrix": [[390, "nas-support-matrix"]], "Get Started with NAS API": [[390, "get-started-with-nas-api"]], "Basic Usage": [[390, "basic-usage"]], "1. Python code + YAML": [[390, "python-code-yaml"]], "2. Python code only": [[390, "python-code-only"]], "Advanced Usage (Custom NAS)": [[390, "advanced-usage-custom-nas"]], "Security Policy": [[391, "security-policy"]], "Report a Vulnerability": [[391, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[392, "intel-neural-compressor"], [445, "intel-neural-compressor"]], "Installation": [[392, "installation"], [422, "installation"], [439, "installation"]], "Install from pypi": [[392, "install-from-pypi"]], "Getting Started": [[392, "getting-started"], [419, "getting-started"]], "Quantization with Python API": [[392, "quantization-with-python-api"], [419, "quantization-with-python-api"]], "Documentation": [[392, "documentation"]], "Selected Publications/Events": [[392, "selected-publications-events"]], "Additional Content": [[392, "additional-content"]], "Research Collaborations": [[392, "research-collaborations"]], "Adaptor": [[393, "adaptor"], [394, "adaptor"]], "Adaptor Support Matrix": [[393, "adaptor-support-matrix"]], "Working Flow": [[393, "working-flow"], [453, "working-flow"]], "Get Start with Adaptor API": [[393, "get-start-with-adaptor-api"]], "Query API": [[393, "query-api"]], "Background": [[393, "background"]], "Query API Introduction": [[393, "query-api-introduction"]], "Example of Adding a New Backend Support": [[393, "example-of-adding-a-new-backend-support"]], "Capability": [[393, "capability"]], "Implement ONNXRTAdaptor Class": [[393, "implement-onnxrtadaptor-class"]], "ONNX Runtime": [[395, "onnx-runtime"], [426, "onnx-runtime"], [426, "id1"]], "Torch Utils": [[396, "torch-utils"]], "API Document Example": [[397, "api-document-example"]], "APIs": [[398, "apis"]], "Benchmark": [[399, "benchmark"], [425, "benchmark"], [452, "benchmark"]], "Compression": [[400, "compression"]], "Config": [[401, "config"]], "Mix Precision": [[402, "mix-precision"], [425, "mix-precision"]], "Model": [[403, "model"], [427, "model"]], "Objective": [[404, "objective"], [447, "objective"]], "Quantization": [[405, "quantization"], [452, "quantization"], [453, "quantization"]], "Strategy": [[406, "strategy"]], "Training": [[407, "training"]], "Benchmarking": [[408, "benchmarking"]], "Benchmark Support Matrix": [[408, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[408, "get-started-with-benchmark-api"]], "DataLoader": [[409, "dataloader"]], "Supported Framework Dataloader Matrix": [[409, "supported-framework-dataloader-matrix"]], "Get Start with Dataloader API": [[409, "get-start-with-dataloader-api"]], "Config Dataloader in a Yaml File": [[409, "config-dataloader-in-a-yaml-file"]], "Create a User-specific Dataloader": [[409, "create-a-user-specific-dataloader"]], "Dataset": [[410, "dataset"]], "Supported Framework Dataset Matrix": [[410, "supported-framework-dataset-matrix"]], "TensorFlow": [[410, "tensorflow"], [424, "tensorflow"], [426, "tensorflow"], [459, "tensorflow"]], "PyTorch": [[410, "pytorch"], [424, "pytorch"], [426, "pytorch"], [454, "pytorch"]], "MXNet": [[410, "mxnet"], [424, "mxnet"], [459, "mxnet"]], "ONNXRT": [[410, "onnxrt"], [424, "onnxrt"], [459, "onnxrt"]], "Get start with Dataset API": [[410, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[410, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[410, "user-specific-dataset"]], "Design": [[411, "design"], [460, "design"], [460, "id1"], [460, "id3"], [460, "id5"], [460, "id7"], [460, "id9"], [460, "id11"], [460, "id13"], [460, "id15"], [460, "id17"], [460, "id19"], [460, "id21"]], "Architecture": [[411, "architecture"], [421, "architecture"]], "Workflow": [[411, "workflow"]], "Distillation": [[412, "distillation"], [425, "distillation"], [452, "distillation"]], "Knowledge Distillation": [[412, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[412, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[412, "self-distillation"]], "Distillation Support Matrix": [[412, "distillation-support-matrix"]], "Get Started with Distillation API": [[412, "get-started-with-distillation-api"]], "Distillation for Quantization": [[413, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[413, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[413, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[414, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[414, "supported-feature-matrix"], [418, "supported-feature-matrix"], [421, "supported-feature-matrix"], [452, "supported-feature-matrix"], [453, "supported-feature-matrix"], [458, "supported-feature-matrix"], [462, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[414, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[414, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[414, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[414, "horovodrun-execution"]], "Security": [[414, "security"]], "PyTorch Examples:": [[414, "pytorch-examples"]], "TensorFlow Examples:": [[414, "tensorflow-examples"]], "Example List": [[415, "example-list"]], "Release Data": [[415, "release-data"]], "Export": [[416, "export"]], "Supported Framework Model Matrix": [[416, "supported-framework-model-matrix"], [427, "supported-framework-model-matrix"]], "PyTorch Model": [[416, "pytorch-model"]], "FP32 Model Export": [[416, "fp32-model-export"], [416, "id1"]], "INT8 Model Export": [[416, "int8-model-export"], [416, "id2"]], "Tensorflow Model": [[416, "tensorflow-model"]], "Appendix": [[416, "appendix"]], "Supported quantized ops": [[416, "supported-quantized-ops"]], "Frequently Asked Questions": [[417, "frequently-asked-questions"]], "Common Build Issues": [[417, "common-build-issues"]], "Issue 1:": [[417, "issue-1"]], "Issue 2:": [[417, "issue-2"]], "Issue 3:": [[417, "issue-3"]], "Issue 4:": [[417, "issue-4"]], "Framework YAML Configuration Files": [[418, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[418, "get-started-with-framework-yaml-files"]], "Quick Samples": [[419, "quick-samples"]], "Quantization with JupyterLab Extension": [[419, "quantization-with-jupyterlab-extension"]], "Validated Models": [[419, "validated-models"], [457, "validated-models"], [463, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[420, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[420, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[420, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[421, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[422, "linux-installation"]], "Prerequisites": [[422, "prerequisites"], [422, "id1"]], "Install from Binary": [[422, "install-from-binary"], [422, "id2"]], "Install from Source": [[422, "install-from-source"], [422, "id3"]], "Install from AI Kit": [[422, "install-from-ai-kit"]], "Windows Installation": [[422, "windows-installation"]], "System Requirements": [[422, "system-requirements"]], "Validated Hardware Environment": [[422, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[422, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[422, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[422, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[422, "validated-software-environment"]], "Legal Information": [[423, "legal-information"]], "License": [[423, "license"]], "Citation": [[423, "citation"]], "Trademarks": [[423, "trademarks"]], "Metrics": [[424, "metrics"]], "Supported Built-in Metric Matrix": [[424, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[424, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[424, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[424, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[425, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[425, "model-quantization"]], "Post-training Quantization": [[425, "post-training-quantization"]], "Quantization Aware Training": [[425, "quantization-aware-training"], [453, "quantization-aware-training"], [453, "id1"]], "Pruning": [[425, "pruning"], [450, "pruning"], [452, "pruning"]], "Orchestration": [[425, "orchestration"]], "Mixed Precision": [[426, "mixed-precision"]], "Mixed Precision Support Matrix": [[426, "mixed-precision-support-matrix"]], "Get Started with Mixed Precision API": [[426, "get-started-with-mixed-precision-api"]], "Neural Coder": [[428, "neural-coder"], [445, "neural-coder"], [445, "id1"]], "What do we offer?": [[428, "what-do-we-offer"]], "Getting Started!": [[428, "getting-started"], [439, "getting-started"]], "Jupyter Lab Extension": [[428, "jupyter-lab-extension"]], "Python Launcher": [[428, "python-launcher"], [433, "python-launcher"]], "Python API": [[428, "python-api"]], "Contact": [[428, "contact"]], "AWS Amazon SageMaker Support": [[429, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[429, "start-jupyter-lab-3"]], "For SageMaker Studio": [[429, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[429, "for-sagemaker-notebook-instance"]], "Installation Guide": [[429, "installation-guide"]], "BigDL Nano Support": [[430, "bigdl-nano-support"]], "Example": [[430, "example"], [434, "example"], [447, "example"], [457, "example"]], "Support Matrix": [[430, "support-matrix"]], "Intel CPU Platforms: Best Performance Setting": [[431, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[431, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[431, "install-numa-controller"]], "Environment Variables": [[431, "environment-variables"]], "Frequency Governers": [[431, "frequency-governers"]], "Neural Coder as Python API": [[432, "neural-coder-as-python-api"]], "Enable": [[432, "enable"]], "Bench": [[432, "bench"]], "SuperBench": [[432, "superbench"]], "Quick-Start": [[433, "quick-start"]], "Launcher Arguments (Optional)": [[433, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[434, "neural-coder-for-quantization"]], "Features Supported": [[434, "features-supported"]], "Models Supported": [[434, "models-supported"]], "Usage": [[434, "usage"], [458, "usage"], [458, "id1"], [460, "usage"], [460, "id2"], [460, "id4"], [460, "id6"], [460, "id8"], [460, "id10"], [460, "id12"], [460, "id14"], [460, "id16"], [460, "id18"], [460, "id20"], [460, "id22"]], "PyPI distribution:": [[434, "pypi-distribution"]], "Supported Optimization Features": [[435, "supported-optimization-features"]], "v0.4": [[436, "v0-4"]], "Highlights": [[436, "highlights"]], "Others": [[436, "others"]], "Changelog": [[437, "changelog"], [441, "changelog"]], "neural_compressor_ext_lab": [[438, "neural-compressor-ext-lab"]], "Requirements": [[438, "requirements"], [442, "requirements"]], "Install": [[438, "install"], [442, "install"]], "Uninstall": [[438, "uninstall"], [442, "uninstall"]], "Contributing": [[438, "contributing"], [442, "contributing"]], "Development install": [[438, "development-install"], [442, "development-install"]], "Development uninstall": [[438, "development-uninstall"], [442, "development-uninstall"]], "Packaging the extension": [[438, "packaging-the-extension"], [442, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[439, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[439, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[439, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[439, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[440, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[440, "manual-release"], [443, "manual-release"]], "Python package": [[440, "python-package"], [443, "python-package"]], "NPM package": [[440, "npm-package"], [443, "npm-package"]], "Automated releases with the Jupyter Releaser": [[440, "automated-releases-with-the-jupyter-releaser"], [443, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[440, "publishing-to-conda-forge"], [443, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[442, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[443, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[444, "change-log"]], "[Unreleased]": [[444, "unreleased"]], "Background Introduction": [[445, "background-introduction"]], "Neural Coder Extension in VSCode": [[445, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[445, "neural-coder-extension-usage"]], "1. Open": [[445, "open"]], "2. Search": [[445, "search"]], "3. Setting": [[445, "setting"]], "4. Icon": [[445, "icon"]], "5. optimization (quantization)": [[445, "optimization-quantization"]], "5.1 Enable": [[445, "enable"]], "5.2 Auto": [[445, "auto"]], "Welcome to your VS Code Extension": [[446, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[446, "what-s-in-the-folder"]], "Setup": [[446, "setup"]], "Get up and running straight away": [[446, "get-up-and-running-straight-away"]], "Make changes": [[446, "make-changes"]], "Explore the API": [[446, "explore-the-api"]], "Run tests": [[446, "run-tests"]], "Go further": [[446, "go-further"]], "Single Objective": [[447, "single-objective"]], "Multiple Objectives": [[447, "multiple-objectives"]], "Objective Support Matrix": [[447, "objective-support-matrix"]], "Get Started with Objective API": [[447, "get-started-with-objective-api"]], "Config Single Objective": [[447, "config-single-objective"]], "Config Multiple Objectives": [[447, "config-multiple-objectives"]], "Optimization Orchestration": [[448, "optimization-orchestration"]], "One-shot": [[448, "one-shot"]], "Orchestration Support Matrix": [[448, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[448, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[449, "system-configuration"]], "Neural Network Pruning": [[450, "neural-network-pruning"]], "Pruning Patterns": [[450, "pruning-patterns"]], "Pruning Criteria": [[450, "pruning-criteria"]], "Pruning Types": [[450, "pruning-types"]], "Pruning Schedules": [[450, "pruning-schedules"]], "Pruning Scope": [[450, "pruning-scope"]], "Sparsity Decay Types": [[450, "sparsity-decay-types"]], "Regularization": [[450, "regularization"]], "Pruning Support Matrix": [[450, "pruning-support-matrix"]], "Get Started with Pruning API": [[450, "get-started-with-pruning-api"]], "Sparse Model Deployment": [[450, "sparse-model-deployment"]], "Reference": [[450, "reference"], [453, "reference"], [457, "reference"]], "Full Publications/Events (60)": [[451, "full-publications-events-60"]], "2023 (7)": [[451, "id1"]], "2022 (34)": [[451, "id2"]], "2021 (15)": [[451, "id3"]], "2018 - 2020 (4)": [[451, "id4"]], "Pythonic Style Access for Configurations": [[452, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[452, "pythonic-api-for-user-configurations"], [452, "id1"]], "Pythonic API for Framework Configurations": [[452, "pythonic-api-for-framework-configurations"], [452, "id2"]], "Get Started with Pythonic API for Configurations": [[452, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[452, "nas"]], "Quantization Introduction": [[453, "quantization-introduction"]], "Quantization Fundamentals": [[453, "quantization-fundamentals"], [457, "quantization-fundamentals"]], "Quantization Support Matrix": [[453, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[453, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[453, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[453, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[453, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[453, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[453, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[453, "with-or-without-accuracy-aware-tuning"]], "Get Started": [[453, "get-started"]], "Post Training Quantization": [[453, "post-training-quantization"]], "Specify Quantization Rules": [[453, "specify-quantization-rules"]], "Specify Quantization Recipes": [[453, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[453, "specify-quantization-backend-and-device"]], "Turn OFF Auto Mixed Precision during Quantization": [[454, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[454, "tensorflow"]], "Release": [[455, "release"]], "Release Notes": [[455, "release-notes"]], "Known Issues": [[455, "known-issues"]], "Incompatible Changes": [[455, "incompatible-changes"]], "SigOpt Strategy": [[456, "sigopt-strategy"]], "Preparation": [[456, "preparation"]], "SigOpt Platform": [[456, "sigopt-platform"]], "Neural Compressor Configuration": [[456, "neural-compressor-configuration"]], "Performance": [[456, "performance"]], "Benefit of SigOpt Strategy": [[456, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[456, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[457, "smooth-quant"]], "Per-tensor & Per-channel": [[457, "per-tensor-per-channel"]], "Per-tensor example": [[457, "per-tensor-example"]], "Per-channel example": [[457, "per-channel-example"]], "Matmul quantization example": [[457, "matmul-quantization-example"]], "Per-channel limitation": [[457, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[457, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[457, "smoothquant"]], "Our enhancement:": [[457, "our-enhancement"]], "Algorithm: Layer-wise Auto-tuning of $\\alpha$.": [[457, "algorithm-layer-wise-auto-tuning-of-alpha"]], "Engineering": [[457, "engineering"]], "Supported Framework Matrix": [[457, "supported-framework-matrix"]], "TensorBoard": [[458, "tensorboard"]], "Get Started with TensorBoard": [[458, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[458, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[458, "tensorflow-tensorboard"]], "PyTorch Examples": [[458, "pytorch-examples"]], "TensorFlow Examples": [[458, "tensorflow-examples"]], "Transform": [[459, "transform"]], "Transform Support List": [[459, "transform-support-list"]], "Pytorch": [[459, "pytorch"]], "Tuning Strategies": [[460, "tuning-strategies"]], "Strategy Design": [[460, "strategy-design"]], "Tuning Space": [[460, "tuning-space"]], "Exit Policy": [[460, "exit-policy"]], "Accuracy Criteria": [[460, "accuracy-criteria"]], "Tuning Process": [[460, "tuning-process"]], "Tuning Algorithms": [[460, "tuning-algorithms"]], "Auto": [[460, "auto"]], "Conservative Tuning": [[460, "conservative-tuning"]], "Basic": [[460, "basic"]], "MSE": [[460, "mse"]], "MSE_V2": [[460, "mse-v2"]], "HAWQ_V2": [[460, "hawq-v2"]], "Bayesian": [[460, "bayesian"]], "Exhaustive": [[460, "exhaustive"]], "Random": [[460, "random"]], "SigOpt": [[460, "sigopt"]], "TPE": [[460, "tpe"]], "Distributed Tuning": [[460, "distributed-tuning"]], "Customize a New Tuning Strategy": [[460, "customize-a-new-tuning-strategy"]], "User Guide": [[461, "user-guide"]], "Overview": [[461, "overview"]], "Python-based APIs": [[461, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[461, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[461, "advanced-topics"]], "User YAML Configuration Files": [[462, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[462, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[463, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.11.0": [[463, "tensorflow-models-with-intel-tensorflow-2-11-0"]], "PyTorch Models with Torch 1.13.0+cpu in PTQ Mode": [[463, "pytorch-models-with-torch-1-13-0-cpu-in-ptq-mode"]], "PyTorch Models with Torch 1.13.0+cpu in QAT Mode": [[463, "pytorch-models-with-torch-1-13-0-cpu-in-qat-mode"]], "PyTorch Models with Torch and Intel\u00ae Extension for PyTorch* 1.13.0+cpu": [[463, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-13-0-cpu"]], "ONNX Models with ONNX Runtime 1.13.1": [[463, "onnx-models-with-onnx-runtime-1-13-1"]], "MXNet Models with MXNet 1.9.1": [[463, "mxnet-models-with-mxnet-1-9-1"]], "Validated Pruning Examples": [[463, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[463, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[463, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.adaptor.adaptor"], [2, "module-neural_compressor.adaptor"], [3, "module-neural_compressor.adaptor.keras"], [4, "module-neural_compressor.adaptor.keras_utils.conv2d"], [5, "module-neural_compressor.adaptor.keras_utils.dense"], [6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [7, "module-neural_compressor.adaptor.keras_utils"], [8, "module-neural_compressor.adaptor.keras_utils.pool2d"], [9, "module-neural_compressor.adaptor.keras_utils.quantizer"], [10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils.calibrator"], [17, "module-neural_compressor.adaptor.ox_utils"], [18, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [20, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [22, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [23, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [29, "module-neural_compressor.adaptor.ox_utils.operators"], [30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [33, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [34, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [36, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [37, "module-neural_compressor.adaptor.ox_utils.operators.split"], [38, "module-neural_compressor.adaptor.ox_utils.quantizer"], [39, "module-neural_compressor.adaptor.ox_utils.util"], [40, "module-neural_compressor.adaptor.pytorch"], [41, "module-neural_compressor.adaptor.query"], [42, "module-neural_compressor.adaptor.tensorflow"], [43, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [44, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [105, "module-neural_compressor.adaptor.tf_utils.graph_util"], [106, "module-neural_compressor.adaptor.tf_utils"], [107, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [135, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [136, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [137, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [138, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [139, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [140, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [141, "module-neural_compressor.adaptor.tf_utils.util"], [142, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [143, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [144, "module-neural_compressor.adaptor.torch_utils"], [145, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [146, "module-neural_compressor.adaptor.torch_utils.pattern_detector"], [147, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [148, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [149, "module-neural_compressor.adaptor.torch_utils.util"], [150, "module-neural_compressor.algorithm.algorithm"], [151, "module-neural_compressor.algorithm.fast_bias_correction"], [152, "module-neural_compressor.algorithm"], [153, "module-neural_compressor.algorithm.smooth_quant"], [154, "module-neural_compressor.algorithm.weight_correction"], [155, "module-neural_compressor.benchmark"], [156, "module-neural_compressor.compression.callbacks"], [157, "module-neural_compressor.compression.distillation.criterions"], [158, "module-neural_compressor.compression.distillation"], [159, "module-neural_compressor.compression"], [160, "module-neural_compressor.compression.pruner.criteria"], [161, "module-neural_compressor.compression.pruner"], [162, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [163, "module-neural_compressor.compression.pruner.model_slim"], [164, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [165, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [166, "module-neural_compressor.compression.pruner.patterns"], [167, "module-neural_compressor.compression.pruner.pruners"], [168, "module-neural_compressor.compression.pruner.regs"], [169, "module-neural_compressor.compression.pruner.schedulers"], [170, "module-neural_compressor.compression.pruner.utils"], [171, "module-neural_compressor.conf.config"], [172, "module-neural_compressor.conf.dotdict"], [173, "module-neural_compressor.conf"], [174, "module-neural_compressor.conf.pythonic_config"], [175, "module-neural_compressor.config"], [176, "module-neural_compressor.contrib"], [177, "module-neural_compressor.contrib.strategy"], [178, "module-neural_compressor.contrib.strategy.sigopt"], [179, "module-neural_compressor.contrib.strategy.tpe"], [180, "module-neural_compressor.data.dataloaders.base_dataloader"], [181, "module-neural_compressor.data.dataloaders.dataloader"], [182, "module-neural_compressor.data.dataloaders.default_dataloader"], [183, "module-neural_compressor.data.dataloaders.fetcher"], [184, "module-neural_compressor.data.dataloaders"], [185, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [186, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [187, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [188, "module-neural_compressor.data.dataloaders.sampler"], [189, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [190, "module-neural_compressor.data.datasets.bert_dataset"], [191, "module-neural_compressor.data.datasets.coco_dataset"], [192, "module-neural_compressor.data.datasets.dataset"], [193, "module-neural_compressor.data.datasets.dummy_dataset"], [194, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [195, "module-neural_compressor.data.datasets.imagenet_dataset"], [196, "module-neural_compressor.data.datasets"], [197, "module-neural_compressor.data.datasets.style_transfer_dataset"], [198, "module-neural_compressor.data.filters.coco_filter"], [199, "module-neural_compressor.data.filters.filter"], [200, "module-neural_compressor.data.filters"], [201, "module-neural_compressor.data"], [202, "module-neural_compressor.data.transforms.coco_transform"], [203, "module-neural_compressor.data.transforms.imagenet_transform"], [204, "module-neural_compressor.data.transforms"], [205, "module-neural_compressor.data.transforms.postprocess"], [206, "module-neural_compressor.data.transforms.tokenization"], [207, "module-neural_compressor.data.transforms.transform"], [208, "module-neural_compressor.experimental.benchmark"], [209, "module-neural_compressor.experimental.common.criterion"], [210, "module-neural_compressor.experimental.common.dataloader"], [211, "module-neural_compressor.experimental.common"], [212, "module-neural_compressor.experimental.common.metric"], [213, "module-neural_compressor.experimental.common.model"], [214, "module-neural_compressor.experimental.common.optimizer"], [215, "module-neural_compressor.experimental.common.postprocess"], [216, "module-neural_compressor.experimental.common.torch_utils"], [217, "module-neural_compressor.experimental.component"], [218, "module-neural_compressor.experimental.compression"], [219, "module-neural_compressor.experimental.compression.pruning"], [220, "module-neural_compressor.experimental.contrib"], [221, "module-neural_compressor.experimental.contrib.strategy"], [222, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [223, "module-neural_compressor.experimental.contrib.strategy.tpe"], [224, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [225, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [226, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [227, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [228, "module-neural_compressor.experimental.data.dataloaders"], [229, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [230, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [231, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [232, "module-neural_compressor.experimental.data.dataloaders.sampler"], [233, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [234, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [235, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [236, "module-neural_compressor.experimental.data.datasets.dataset"], [237, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [238, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [239, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [240, "module-neural_compressor.experimental.data.datasets"], [241, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [242, "module-neural_compressor.experimental.data.filters.coco_filter"], [243, "module-neural_compressor.experimental.data.filters.filter"], [244, "module-neural_compressor.experimental.data.filters"], [245, "module-neural_compressor.experimental.data"], [246, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [247, "module-neural_compressor.experimental.data.transforms"], [248, "module-neural_compressor.experimental.data.transforms.tokenization"], [249, "module-neural_compressor.experimental.data.transforms.transform"], [250, "module-neural_compressor.experimental.distillation"], [251, "module-neural_compressor.experimental.export"], [252, "module-neural_compressor.experimental.export.qlinear2qdq"], [253, "module-neural_compressor.experimental.export.tf2onnx"], [254, "module-neural_compressor.experimental.export.torch2onnx"], [255, "module-neural_compressor.experimental.graph_optimization"], [256, "module-neural_compressor.experimental"], [257, "module-neural_compressor.experimental.metric.bleu"], [258, "module-neural_compressor.experimental.metric.bleu_util"], [259, "module-neural_compressor.experimental.metric.coco_label_map"], [260, "module-neural_compressor.experimental.metric.coco_tools"], [261, "module-neural_compressor.experimental.metric.evaluate_squad"], [262, "module-neural_compressor.experimental.metric.f1"], [263, "module-neural_compressor.experimental.metric"], [264, "module-neural_compressor.experimental.metric.metric"], [265, "module-neural_compressor.experimental.mixed_precision"], [266, "module-neural_compressor.experimental.model_conversion"], [267, "module-neural_compressor.experimental.nas.basic_nas"], [268, "module-neural_compressor.experimental.nas.dynas"], [269, "module-neural_compressor.experimental.nas"], [270, "module-neural_compressor.experimental.nas.nas"], [271, "module-neural_compressor.experimental.nas.nas_utils"], [272, "module-neural_compressor.experimental.nas.search_algorithms"], [273, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [274, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [275, "module-neural_compressor.experimental.pruner_legacy"], [276, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [277, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [278, "module-neural_compressor.experimental.pruner_legacy.pruner"], [279, "module-neural_compressor.experimental.pruning"], [280, "module-neural_compressor.experimental.pruning_recipes"], [281, "module-neural_compressor.experimental.pruning_recipes.patterns"], [282, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [283, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [284, "module-neural_compressor.experimental.pruning_v2"], [285, "module-neural_compressor.experimental.pytorch_pruner"], [286, "module-neural_compressor.experimental.pytorch_pruner.logger"], [287, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [288, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [289, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [290, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [291, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [292, "module-neural_compressor.experimental.quantization"], [293, "module-neural_compressor.experimental.scheduler"], [294, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [295, "module-neural_compressor.experimental.strategy.basic"], [296, "module-neural_compressor.experimental.strategy.bayesian"], [297, "module-neural_compressor.experimental.strategy.exhaustive"], [298, "module-neural_compressor.experimental.strategy"], [299, "module-neural_compressor.experimental.strategy.mse"], [300, "module-neural_compressor.experimental.strategy.mse_v2"], [301, "module-neural_compressor.experimental.strategy.random"], [302, "module-neural_compressor.experimental.strategy.strategy"], [303, "module-neural_compressor.experimental.strategy.utils.constant"], [304, "module-neural_compressor.experimental.strategy.utils"], [305, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [306, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [307, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [308, "module-neural_compressor.experimental.strategy.utils.utility"], [309, "module-neural_compressor"], [310, "module-neural_compressor.metric.bleu"], [311, "module-neural_compressor.metric.bleu_util"], [312, "module-neural_compressor.metric.coco_label_map"], [313, "module-neural_compressor.metric.coco_tools"], [314, "module-neural_compressor.metric.evaluate_squad"], [315, "module-neural_compressor.metric.f1"], [316, "module-neural_compressor.metric"], [317, "module-neural_compressor.metric.metric"], [318, "module-neural_compressor.mix_precision"], [319, "module-neural_compressor.model.base_model"], [320, "module-neural_compressor.model"], [321, "module-neural_compressor.model.keras_model"], [322, "module-neural_compressor.model.model"], [323, "module-neural_compressor.model.mxnet_model"], [324, "module-neural_compressor.model.nets_factory"], [325, "module-neural_compressor.model.onnx_model"], [326, "module-neural_compressor.model.tensorflow_model"], [327, "module-neural_compressor.model.torch_model"], [328, "module-neural_compressor.objective"], [329, "module-neural_compressor.profiling"], [330, "module-neural_compressor.profiling.parser.factory"], [331, "module-neural_compressor.profiling.parser"], [332, "module-neural_compressor.profiling.parser.onnx_parser.factory"], [333, "module-neural_compressor.profiling.parser.onnx_parser"], [334, "module-neural_compressor.profiling.parser.onnx_parser.parser"], [335, "module-neural_compressor.profiling.parser.parser"], [336, "module-neural_compressor.profiling.parser.result"], [337, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"], [338, "module-neural_compressor.profiling.parser.tensorflow_parser"], [339, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"], [340, "module-neural_compressor.profiling.profiler.factory"], [341, "module-neural_compressor.profiling.profiler"], [342, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"], [343, "module-neural_compressor.profiling.profiler.onnxrt_profiler"], [344, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"], [345, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"], [346, "module-neural_compressor.profiling.profiler.profiler"], [347, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"], [348, "module-neural_compressor.profiling.profiler.tensorflow_profiler"], [349, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"], [350, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"], [351, "module-neural_compressor.quantization"], [352, "module-neural_compressor.strategy.auto"], [353, "module-neural_compressor.strategy.auto_mixed_precision"], [354, "module-neural_compressor.strategy.basic"], [355, "module-neural_compressor.strategy.bayesian"], [356, "module-neural_compressor.strategy.conservative"], [357, "module-neural_compressor.strategy.exhaustive"], [358, "module-neural_compressor.strategy.hawq_v2"], [359, "module-neural_compressor.strategy"], [360, "module-neural_compressor.strategy.mse"], [361, "module-neural_compressor.strategy.mse_v2"], [362, "module-neural_compressor.strategy.random"], [363, "module-neural_compressor.strategy.strategy"], [364, "module-neural_compressor.strategy.utils.constant"], [365, "module-neural_compressor.strategy.utils"], [366, "module-neural_compressor.strategy.utils.tuning_sampler"], [367, "module-neural_compressor.strategy.utils.tuning_space"], [368, "module-neural_compressor.strategy.utils.tuning_structs"], [369, "module-neural_compressor.strategy.utils.utility"], [370, "module-neural_compressor.template.api_doc_example"], [371, "module-neural_compressor.template"], [372, "module-neural_compressor.training"], [373, "module-neural_compressor.utils.collect_layer_histogram"], [374, "module-neural_compressor.utils.constant"], [375, "module-neural_compressor.utils.create_obj_from_config"], [376, "module-neural_compressor.utils"], [377, "module-neural_compressor.utils.kl_divergence"], [378, "module-neural_compressor.utils.load_huggingface"], [379, "module-neural_compressor.utils.logger"], [380, "module-neural_compressor.utils.neural_insights_utils"], [381, "module-neural_compressor.utils.options"], [382, "module-neural_compressor.utils.pytorch"], [383, "module-neural_compressor.utils.utility"], [384, "module-neural_compressor.utils.weights_details"], [385, "module-neural_compressor.version"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasQuery"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[30, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[33, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[33, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[33, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[33, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[33, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[34, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[34, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[34, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[35, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[35, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[36, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[36, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[36, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[37, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[37, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[37, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[38, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[38, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "adjust_weights_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_input"]], "adjust_weights_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_op"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "fold_scale() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.fold_scale"]], "get_smooth_scales_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_input"]], "get_smooth_scales_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_op"]], "insert_smooth_mul_op_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_input"]], "insert_smooth_mul_op_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_op"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[39, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[40, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[40, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[40, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[40, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[40, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[40, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[40, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[41, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[41, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[42, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[42, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[42, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[42, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[43, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[43, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[44, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[44, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[45, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[47, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[48, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[105, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[105, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[105, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[106, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[107, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[108, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[108, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[110, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[135, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[135, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[136, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[136, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[137, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[137, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[138, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[139, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[139, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[140, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[140, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[141, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[142, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[142, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[142, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[142, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[143, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[143, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[143, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[143, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[143, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[144, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[145, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[146, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[146, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "graphtrace (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[147, "neural_compressor.adaptor.torch_utils.smooth_quant.GraphTrace"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[147, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[147, "neural_compressor.adaptor.torch_utils.smooth_quant.get_module"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[147, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "set_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[147, "neural_compressor.adaptor.torch_utils.smooth_quant.set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[148, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[148, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[148, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.get_depth"]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "neural_compressor.adaptor.torch_utils.util": [[149, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[150, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[150, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[150, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[150, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[150, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[151, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[151, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[152, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[153, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[153, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[154, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[154, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[155, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.summary_benchmark"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[156, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[156, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[156, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[156, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[156, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[156, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[156, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[156, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[156, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[157, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[158, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[159, "module-neural_compressor.compression"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[160, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[160, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[160, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[160, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[160, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumblockcriterion (class in neural_compressor.compression.pruner.criteria)": [[160, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[160, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[160, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[160, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[160, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[160, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[160, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[160, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[160, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[160, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumblockcriterion attribute)": [[160, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[160, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[161, "module-neural_compressor.compression.pruner"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[162, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[162, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[162, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[162, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[162, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[162, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[162, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[163, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[164, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[165, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[165, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "mhacompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[165, "neural_compressor.compression.pruner.model_slim.weight_slim.MHACompression"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[165, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[165, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[165, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[165, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[165, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[165, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns)": [[166, "neural_compressor.compression.pruner.patterns.BasePattern"]], "m (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[166, "neural_compressor.compression.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[166, "neural_compressor.compression.pruner.patterns.PatternNInM.N"]], "patternninm (class in neural_compressor.compression.pruner.patterns)": [[166, "neural_compressor.compression.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.compression.pruner.patterns)": [[166, "neural_compressor.compression.pruner.patterns.PatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.patternnxm attribute)": [[166, "neural_compressor.compression.pruner.patterns.PatternNxM.block_size"]], "config (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[166, "neural_compressor.compression.pruner.patterns.BasePattern.config"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[166, "neural_compressor.compression.pruner.patterns.get_pattern"]], "invalid_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[166, "neural_compressor.compression.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[166, "neural_compressor.compression.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[166, "neural_compressor.compression.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[166, "neural_compressor.compression.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[166, "neural_compressor.compression.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[166, "neural_compressor.compression.pruner.patterns.BasePattern.modules"]], "neural_compressor.compression.pruner.patterns": [[166, "module-neural_compressor.compression.pruner.patterns"]], "pattern (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[166, "neural_compressor.compression.pruner.patterns.BasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns)": [[166, "neural_compressor.compression.pruner.patterns.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[166, "neural_compressor.compression.pruner.patterns.BasePattern.target_sparsity"]], "basepruner (class in neural_compressor.compression.pruner.pruners)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.compression.pruner.pruners)": [[167, "neural_compressor.compression.pruner.pruners.BasicPruner"]], "blockmaskpruner (class in neural_compressor.compression.pruner.pruners)": [[167, "neural_compressor.compression.pruner.pruners.BlockMaskPruner"]], "patternlockpruner (class in neural_compressor.compression.pruner.pruners)": [[167, "neural_compressor.compression.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.compression.pruner.pruners)": [[167, "neural_compressor.compression.pruner.pruners.ProgressivePruner"]], "retrainfreepruner (class in neural_compressor.compression.pruner.pruners)": [[167, "neural_compressor.compression.pruner.pruners.RetrainFreePruner"]], "config (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.criterion"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[167, "neural_compressor.compression.pruner.pruners.get_pruner"]], "global_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.modules"]], "neural_compressor.compression.pruner.pruners": [[167, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[167, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pattern (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.reg"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners)": [[167, "neural_compressor.compression.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.target_sparsity_ratio"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[168, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[168, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[168, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[168, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[168, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[168, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[168, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[168, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[169, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[169, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[169, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[169, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[169, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[169, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[169, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.check_key_validity"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "neural_compressor.compression.pruner.utils": [[170, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[171, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[171, "neural_compressor.conf.config.Conf"]], "distillation_conf (class in neural_compressor.conf.config)": [[171, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[171, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[171, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[171, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[171, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[171, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[171, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[171, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[172, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[172, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[172, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[172, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[173, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[174, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[174, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[174, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[174, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[174, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[174, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[174, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[174, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[175, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[175, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.ExportConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[175, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[175, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[175, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[175, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[175, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[175, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[175, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[175, "module-neural_compressor.config"]], "neural_compressor.contrib": [[176, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[177, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[178, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[178, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[179, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[179, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[180, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[180, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[181, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[181, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[181, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[182, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[182, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[182, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[183, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[183, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[183, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[183, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[184, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[185, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[185, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[186, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[186, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[186, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[187, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[187, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[188, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[188, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[188, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[188, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[188, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[189, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[189, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[189, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[189, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[189, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[190, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[190, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[190, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[190, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[190, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[190, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[190, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[190, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[190, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[191, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[191, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[191, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[191, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[191, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[192, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[193, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[193, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[194, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[194, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[194, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[195, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[195, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[195, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[195, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[195, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[195, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[195, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[196, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[197, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[197, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[198, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[198, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[198, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[199, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[199, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[199, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[199, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[199, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[199, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[199, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[199, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[199, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[200, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[201, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[202, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[202, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[203, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[203, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[203, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[203, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[203, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[203, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[203, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[203, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[203, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[203, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[204, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[205, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[205, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[206, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[206, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[206, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[206, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[206, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[206, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[206, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[206, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TRANSFORMS"], [207, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[207, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[208, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[208, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[208, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[208, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[208, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[208, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[208, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[208, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[208, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[208, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[209, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[210, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[210, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[211, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[212, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[212, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[213, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[213, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[213, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[214, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[214, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[214, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[214, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[214, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[214, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[214, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[214, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[214, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[215, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[215, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[216, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[216, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[216, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[217, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[217, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[218, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[219, "module-neural_compressor.experimental.compression.pruning"]], "prepare_pruning() (in module neural_compressor.experimental.compression.pruning)": [[219, "neural_compressor.experimental.compression.pruning.prepare_pruning"]], "save() (in module neural_compressor.experimental.compression.pruning)": [[219, "neural_compressor.experimental.compression.pruning.save"]], "neural_compressor.experimental.contrib": [[220, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[221, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[222, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[222, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[223, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[223, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[224, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[224, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[225, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[226, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[226, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[226, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[227, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[227, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[227, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[227, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[228, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[229, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[229, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[230, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[230, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[230, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[231, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[231, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[232, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[232, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[232, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[232, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[232, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[233, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[233, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[233, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[233, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[233, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[234, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[235, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[235, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[235, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[235, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[235, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[236, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[237, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[237, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[238, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[238, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[238, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[239, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[239, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[239, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[239, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[239, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[239, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[239, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[240, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[241, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[241, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[242, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[242, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[242, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[243, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[244, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[245, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[246, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[247, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[248, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[248, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[248, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[248, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[248, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[248, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[248, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[248, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [249, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[249, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[250, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[250, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[250, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[250, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[250, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[250, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[251, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[252, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[252, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[252, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[253, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[253, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[253, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[254, "module-neural_compressor.experimental.export.torch2onnx"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[254, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[254, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[255, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[255, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[256, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[257, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[257, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[257, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[257, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[257, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[257, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[257, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[257, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[257, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[258, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[258, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[259, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[260, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[260, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[260, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[260, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[260, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[260, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[260, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[260, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[261, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[261, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[261, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[261, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[261, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[262, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[262, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[262, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[262, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[262, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[263, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[264, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[264, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[264, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[264, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[264, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[264, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[264, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[264, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[264, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[264, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[264, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[264, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[264, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[264, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[264, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[264, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[264, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[264, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[264, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[264, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[264, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[264, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[264, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[264, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[264, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[264, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[265, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[265, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[266, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[266, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[267, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[267, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[268, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[268, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[269, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[270, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[270, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[270, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[271, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[271, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[271, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[271, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[272, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[272, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[272, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[272, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[272, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[273, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[273, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[274, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[274, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[275, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[276, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[276, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[277, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[277, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[278, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[278, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[278, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[279, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[279, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[279, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[279, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[279, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[280, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[281, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[282, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[282, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[282, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[282, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[282, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[283, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[283, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[283, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[283, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[283, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[283, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[283, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[284, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[284, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[284, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[284, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[284, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[285, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[286, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[287, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[287, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[287, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[287, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[287, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[287, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[288, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[288, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[288, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[288, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[288, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[288, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[288, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[289, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[290, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[290, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[291, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[291, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[291, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[291, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[291, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[291, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[291, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[292, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[292, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[293, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[293, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[294, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[294, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[295, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[295, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[296, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[296, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[296, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[296, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[296, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[297, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[297, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[298, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[299, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[299, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[300, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[300, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[301, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[301, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[302, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[302, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[302, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[303, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[304, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[305, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[305, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[305, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[305, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[305, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[305, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[305, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[305, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[305, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[306, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[306, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[306, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[306, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[306, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[306, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[306, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[307, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[307, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[308, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[308, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[308, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[308, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[308, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[309, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[310, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[310, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[310, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[310, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[310, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[310, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[310, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[310, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[310, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[311, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[311, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[312, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[313, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[313, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[313, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[313, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[313, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[313, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[313, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[313, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[314, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[314, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[314, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[314, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[314, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[315, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[315, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[315, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[315, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[315, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[316, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[317, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[317, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[317, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[317, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[317, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[317, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[317, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[317, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[317, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[317, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[317, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[317, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[317, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[317, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[317, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[317, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[317, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[317, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[317, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[317, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[317, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[317, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[317, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[317, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[317, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[317, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[317, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[317, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[317, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[317, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[317, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[317, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[317, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[317, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[317, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[317, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[317, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[317, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[317, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[317, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[317, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[317, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[317, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[317, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[317, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[317, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[317, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[317, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[317, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[317, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[317, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[317, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[317, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[317, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[317, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[318, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[318, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[319, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[319, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[320, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[321, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[321, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[322, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[322, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[322, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[323, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[323, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[324, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[324, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[325, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[325, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[326, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[326, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[326, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[326, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[326, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[326, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[326, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[326, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[326, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[326, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[326, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[326, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[326, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[326, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[326, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[326, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[326, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[326, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[327, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[327, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[327, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[327, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[327, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[328, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[328, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[328, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[328, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[328, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[328, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[328, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[328, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[328, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[329, "module-neural_compressor.profiling"]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[330, "neural_compressor.profiling.parser.factory.ParserFactory"]], "neural_compressor.profiling.parser.factory": [[330, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[331, "module-neural_compressor.profiling.parser"]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[332, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[332, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[333, "module-neural_compressor.profiling.parser.onnx_parser"]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[334, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[334, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[335, "neural_compressor.profiling.parser.parser.ProfilingParser"]], "neural_compressor.profiling.parser.parser": [[335, "module-neural_compressor.profiling.parser.parser"]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[336, "neural_compressor.profiling.parser.result.ProfilingResult"]], "neural_compressor.profiling.parser.result": [[336, "module-neural_compressor.profiling.parser.result"]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[337, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[337, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[338, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[339, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[339, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[340, "neural_compressor.profiling.profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.factory": [[340, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[341, "module-neural_compressor.profiling.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[342, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[342, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[343, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[344, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[344, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[345, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[345, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[346, "neural_compressor.profiling.profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.profiler": [[346, "module-neural_compressor.profiling.profiler.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[347, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[347, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[348, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[349, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[349, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[350, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config"]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[350, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[350, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[350, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution"]], "fit() (in module neural_compressor.quantization)": [[351, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[351, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[352, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[352, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[353, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[353, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[354, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[354, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[355, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[355, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[355, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[355, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[355, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[356, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[356, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[357, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[357, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[358, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[358, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[359, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[360, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[360, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[361, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[361, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[362, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[362, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[363, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[363, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[363, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[363, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[364, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[365, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[366, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[366, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[366, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[366, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[366, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[366, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[366, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[366, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.strategy.utils.tuning_sampler)": [[366, "neural_compressor.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_sampler": [[366, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[367, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[367, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[367, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[367, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[367, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[367, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[367, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[368, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[368, "module-neural_compressor.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[369, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[369, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[369, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[369, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[369, "module-neural_compressor.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[369, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[370, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[370, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[370, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[370, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[370, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[370, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[370, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[370, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[370, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[370, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[370, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[371, "module-neural_compressor.template"]], "callbacks (class in neural_compressor.training)": [[372, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[372, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[372, "neural_compressor.training.fit"]], "neural_compressor.training": [[372, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[372, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[373, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[373, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[374, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[375, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[375, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[375, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[375, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[375, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[375, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[375, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[375, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[375, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[375, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[376, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[377, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[377, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[378, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "neural_compressor.utils.load_huggingface": [[378, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[378, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[379, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[379, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[379, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[379, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[379, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[379, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[379, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[379, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[379, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.neural_insights_utils": [[380, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[380, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[380, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[380, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[381, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[381, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[382, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[382, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[382, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.Dequantize"]], "dequantizeweight() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.DequantizeWeight"]], "dotdict (class in neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.calculate_mse"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.compute_sparsity"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[383, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[383, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[384, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[384, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[384, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[385, "module-neural_compressor.version"]]}})