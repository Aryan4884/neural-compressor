Search.setIndex({"docnames": ["autoapi/644ec953a7dc_pruning_support/index", "autoapi/6ece06672ed3_v1_14/index", "autoapi/6f0d0f71d92e_v1_13/index", "autoapi/9e89549a08c8_v1_11/index", "autoapi/block_mask/index", "autoapi/env/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/export/utils/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index", "autoapi/neural_compressor/experimental/nas/dynast/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/modules_supernetwork/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_interface/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_supernetwork/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/pruner/criteria/index", "autoapi/neural_compressor/pruner/index", "autoapi/neural_compressor/pruner/logger/index", "autoapi/neural_compressor/pruner/patterns/index", "autoapi/neural_compressor/pruner/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/pruner/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/pruner/pruner_legacy/index", "autoapi/neural_compressor/pruner/pruner_legacy/magnitude/index", "autoapi/neural_compressor/pruner/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/pruner/pruner_legacy/pruner/index", "autoapi/neural_compressor/pruner/pruners/index", "autoapi/neural_compressor/pruner/pruning/index", "autoapi/neural_compressor/pruner/regs/index", "autoapi/neural_compressor/pruner/schedulers/index", "autoapi/neural_compressor/pruner/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/index", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index", "autoapi/neural_compressor/ux/components/configuration_wizard/index", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index", "autoapi/neural_compressor/ux/components/db_manager/utils/index", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/factory/index", "autoapi/neural_compressor/ux/components/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index", "autoapi/neural_compressor/ux/components/file_browser/index", "autoapi/neural_compressor/ux/components/graph/attribute/index", "autoapi/neural_compressor/ux/components/graph/collapser/index", "autoapi/neural_compressor/ux/components/graph/edge/index", "autoapi/neural_compressor/ux/components/graph/graph/index", "autoapi/neural_compressor/ux/components/graph/graph_reader/index", "autoapi/neural_compressor/ux/components/graph/index", "autoapi/neural_compressor/ux/components/graph/node/index", "autoapi/neural_compressor/ux/components/graph/reader/index", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index", "autoapi/neural_compressor/ux/components/index", "autoapi/neural_compressor/ux/components/jobs_management/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index", "autoapi/neural_compressor/ux/components/jobs_management/request/index", "autoapi/neural_compressor/ux/components/manage_workspace/index", "autoapi/neural_compressor/ux/components/model/domain/index", "autoapi/neural_compressor/ux/components/model/index", "autoapi/neural_compressor/ux/components/model/model/index", "autoapi/neural_compressor/ux/components/model/model_type_getter/index", "autoapi/neural_compressor/ux/components/model/onnxrt/index", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index", "autoapi/neural_compressor/ux/components/model/pytorch/index", "autoapi/neural_compressor/ux/components/model/pytorch/model/index", "autoapi/neural_compressor/ux/components/model/repository/index", "autoapi/neural_compressor/ux/components/model/shape/index", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index", "autoapi/neural_compressor/ux/components/model/tensorflow/index", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index", "autoapi/neural_compressor/ux/components/model_zoo/index", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index", "autoapi/neural_compressor/ux/components/names_mapper/index", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index", "autoapi/neural_compressor/ux/components/optimization/factory/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/optimization/index", "autoapi/neural_compressor/ux/components/optimization/pruning/index", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index", "autoapi/neural_compressor/ux/components/optimization/tune/index", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index", "autoapi/neural_compressor/ux/components/profiling/factory/index", "autoapi/neural_compressor/ux/components/profiling/index", "autoapi/neural_compressor/ux/components/profiling/profile_model/index", "autoapi/neural_compressor/ux/components/profiling/profiler/index", "autoapi/neural_compressor/ux/components/profiling/profiling/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index", "autoapi/neural_compressor/ux/inc_bench/index", "autoapi/neural_compressor/ux/index", "autoapi/neural_compressor/ux/utils/consts/index", "autoapi/neural_compressor/ux/utils/environment/index", "autoapi/neural_compressor/ux/utils/exceptions/index", "autoapi/neural_compressor/ux/utils/executor/index", "autoapi/neural_compressor/ux/utils/expiring_dict/index", "autoapi/neural_compressor/ux/utils/github_info/index", "autoapi/neural_compressor/ux/utils/hw_info/index", "autoapi/neural_compressor/ux/utils/index", "autoapi/neural_compressor/ux/utils/json_serializer/index", "autoapi/neural_compressor/ux/utils/logger/index", "autoapi/neural_compressor/ux/utils/parser/index", "autoapi/neural_compressor/ux/utils/proc/index", "autoapi/neural_compressor/ux/utils/processes/index", "autoapi/neural_compressor/ux/utils/singleton/index", "autoapi/neural_compressor/ux/utils/status_updates/index", "autoapi/neural_compressor/ux/utils/templates/index", "autoapi/neural_compressor/ux/utils/templates/metric/index", "autoapi/neural_compressor/ux/utils/templates/workdir/index", "autoapi/neural_compressor/ux/utils/utils/index", "autoapi/neural_compressor/ux/utils/workload/config/index", "autoapi/neural_compressor/ux/utils/workload/dataloader/index", "autoapi/neural_compressor/ux/utils/workload/evaluation/index", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index", "autoapi/neural_compressor/ux/utils/workload/index", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index", "autoapi/neural_compressor/ux/utils/workload/model/index", "autoapi/neural_compressor/ux/utils/workload/pruning/index", "autoapi/neural_compressor/ux/utils/workload/quantization/index", "autoapi/neural_compressor/ux/utils/workload/tuning/index", "autoapi/neural_compressor/ux/utils/yaml_utils/index", "autoapi/neural_compressor/ux/web/communication/index", "autoapi/neural_compressor/ux/web/configuration/index", "autoapi/neural_compressor/ux/web/exceptions/index", "autoapi/neural_compressor/ux/web/index", "autoapi/neural_compressor/ux/web/router/index", "autoapi/neural_compressor/ux/web/server/index", "autoapi/neural_compressor/ux/web/service/benchmark/index", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index", "autoapi/neural_compressor/ux/web/service/index", "autoapi/neural_compressor/ux/web/service/model/index", "autoapi/neural_compressor/ux/web/service/optimization/index", "autoapi/neural_compressor/ux/web/service/profiling/index", "autoapi/neural_compressor/ux/web/service/request_data_processor/index", "autoapi/neural_compressor/ux/web/service/response_generator/index", "autoapi/neural_compressor/ux/web/service/workload/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/adaptor/torch_utils/bf16_convert", "docs/source/api-doc/adaptor/torch_utils/hawq_metric", "docs/source/api-doc/adaptor/torch_utils/onnx", "docs/source/api-doc/adaptor/torch_utils/symbolic_trace", "docs/source/api-doc/adaptor/torch_utils/util", "docs/source/api-doc/algorithm", "docs/source/api-doc/apis", "docs/source/api-doc/basic_api", "docs/source/api-doc/basic_api/benchmark", "docs/source/api-doc/basic_api/config", "docs/source/api-doc/basic_api/mix_precision", "docs/source/api-doc/basic_api/objective", "docs/source/api-doc/basic_api/quantization", "docs/source/api-doc/basic_api/training", "docs/source/api-doc/common", "docs/source/api-doc/common/benchmark", "docs/source/api-doc/common/bleu", "docs/source/api-doc/common/criterion", "docs/source/api-doc/common/data", "docs/source/api-doc/common/data/dataloader", "docs/source/api-doc/common/data/datasets", "docs/source/api-doc/common/data/transforms", "docs/source/api-doc/common/metric", "docs/source/api-doc/common/model", "docs/source/api-doc/common/optimizer", "docs/source/api-doc/component", "docs/source/api-doc/component/Distillation", "docs/source/api-doc/component/MixedPrecision", "docs/source/api-doc/component/ModelConversion", "docs/source/api-doc/component/Nas", "docs/source/api-doc/component/Pruning", "docs/source/api-doc/component/Quantization", "docs/source/api-doc/component/Scheduler", "docs/source/api-doc/contrib", "docs/source/api-doc/model", "docs/source/api-doc/pythonic", "docs/source/api-doc/strategy", "docs/source/api-doc/strategy/strategy", "docs/source/api-doc/utils", "docs/source/bench", "docs/source/benchmark", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/objective", "docs/source/orchestration", "docs/source/platform_configuration", "docs/source/pruning", "docs/source/pruning_details", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/644ec953a7dc_pruning_support/index.rst", "autoapi/6ece06672ed3_v1_14/index.rst", "autoapi/6f0d0f71d92e_v1_13/index.rst", "autoapi/9e89549a08c8_v1_11/index.rst", "autoapi/block_mask/index.rst", "autoapi/env/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/export/utils/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/modules_supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_interface/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/pruner/criteria/index.rst", "autoapi/neural_compressor/pruner/index.rst", "autoapi/neural_compressor/pruner/logger/index.rst", "autoapi/neural_compressor/pruner/patterns/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/pruner/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/pruner/pruners/index.rst", "autoapi/neural_compressor/pruner/pruning/index.rst", "autoapi/neural_compressor/pruner/regs/index.rst", "autoapi/neural_compressor/pruner/schedulers/index.rst", "autoapi/neural_compressor/pruner/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index.rst", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/index.rst", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index.rst", "autoapi/neural_compressor/ux/components/db_manager/utils/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/factory/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index.rst", "autoapi/neural_compressor/ux/components/file_browser/index.rst", "autoapi/neural_compressor/ux/components/graph/attribute/index.rst", "autoapi/neural_compressor/ux/components/graph/collapser/index.rst", "autoapi/neural_compressor/ux/components/graph/edge/index.rst", "autoapi/neural_compressor/ux/components/graph/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/graph_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/node/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index.rst", "autoapi/neural_compressor/ux/components/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/request/index.rst", "autoapi/neural_compressor/ux/components/manage_workspace/index.rst", "autoapi/neural_compressor/ux/components/model/domain/index.rst", "autoapi/neural_compressor/ux/components/model/index.rst", "autoapi/neural_compressor/ux/components/model/model/index.rst", "autoapi/neural_compressor/ux/components/model/model_type_getter/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/model/index.rst", "autoapi/neural_compressor/ux/components/model/repository/index.rst", "autoapi/neural_compressor/ux/components/model/shape/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/factory/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/profile_model/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/ux/inc_bench/index.rst", "autoapi/neural_compressor/ux/index.rst", "autoapi/neural_compressor/ux/utils/consts/index.rst", "autoapi/neural_compressor/ux/utils/environment/index.rst", "autoapi/neural_compressor/ux/utils/exceptions/index.rst", "autoapi/neural_compressor/ux/utils/executor/index.rst", "autoapi/neural_compressor/ux/utils/expiring_dict/index.rst", "autoapi/neural_compressor/ux/utils/github_info/index.rst", "autoapi/neural_compressor/ux/utils/hw_info/index.rst", "autoapi/neural_compressor/ux/utils/index.rst", "autoapi/neural_compressor/ux/utils/json_serializer/index.rst", "autoapi/neural_compressor/ux/utils/logger/index.rst", "autoapi/neural_compressor/ux/utils/parser/index.rst", "autoapi/neural_compressor/ux/utils/proc/index.rst", "autoapi/neural_compressor/ux/utils/processes/index.rst", "autoapi/neural_compressor/ux/utils/singleton/index.rst", "autoapi/neural_compressor/ux/utils/status_updates/index.rst", "autoapi/neural_compressor/ux/utils/templates/index.rst", "autoapi/neural_compressor/ux/utils/templates/metric/index.rst", "autoapi/neural_compressor/ux/utils/templates/workdir/index.rst", "autoapi/neural_compressor/ux/utils/utils/index.rst", "autoapi/neural_compressor/ux/utils/workload/config/index.rst", "autoapi/neural_compressor/ux/utils/workload/dataloader/index.rst", "autoapi/neural_compressor/ux/utils/workload/evaluation/index.rst", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index.rst", "autoapi/neural_compressor/ux/utils/workload/index.rst", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index.rst", "autoapi/neural_compressor/ux/utils/workload/model/index.rst", "autoapi/neural_compressor/ux/utils/workload/pruning/index.rst", "autoapi/neural_compressor/ux/utils/workload/quantization/index.rst", "autoapi/neural_compressor/ux/utils/workload/tuning/index.rst", "autoapi/neural_compressor/ux/utils/yaml_utils/index.rst", "autoapi/neural_compressor/ux/web/communication/index.rst", "autoapi/neural_compressor/ux/web/configuration/index.rst", "autoapi/neural_compressor/ux/web/exceptions/index.rst", "autoapi/neural_compressor/ux/web/index.rst", "autoapi/neural_compressor/ux/web/router/index.rst", "autoapi/neural_compressor/ux/web/server/index.rst", "autoapi/neural_compressor/ux/web/service/benchmark/index.rst", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index.rst", "autoapi/neural_compressor/ux/web/service/index.rst", "autoapi/neural_compressor/ux/web/service/model/index.rst", "autoapi/neural_compressor/ux/web/service/optimization/index.rst", "autoapi/neural_compressor/ux/web/service/profiling/index.rst", "autoapi/neural_compressor/ux/web/service/request_data_processor/index.rst", "autoapi/neural_compressor/ux/web/service/response_generator/index.rst", "autoapi/neural_compressor/ux/web/service/workload/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/adaptor/torch_utils/bf16_convert.rst", "docs/source/api-doc/adaptor/torch_utils/hawq_metric.rst", "docs/source/api-doc/adaptor/torch_utils/onnx.rst", "docs/source/api-doc/adaptor/torch_utils/symbolic_trace.rst", "docs/source/api-doc/adaptor/torch_utils/util.rst", "docs/source/api-doc/algorithm.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/basic_api.rst", "docs/source/api-doc/basic_api/benchmark.rst", "docs/source/api-doc/basic_api/config.rst", "docs/source/api-doc/basic_api/mix_precision.rst", "docs/source/api-doc/basic_api/objective.rst", "docs/source/api-doc/basic_api/quantization.rst", "docs/source/api-doc/basic_api/training.rst", "docs/source/api-doc/common.rst", "docs/source/api-doc/common/benchmark.rst", "docs/source/api-doc/common/bleu.rst", "docs/source/api-doc/common/criterion.rst", "docs/source/api-doc/common/data.rst", "docs/source/api-doc/common/data/dataloader.rst", "docs/source/api-doc/common/data/datasets.rst", "docs/source/api-doc/common/data/transforms.rst", "docs/source/api-doc/common/metric.rst", "docs/source/api-doc/common/model.rst", "docs/source/api-doc/common/optimizer.rst", "docs/source/api-doc/component.rst", "docs/source/api-doc/component/Distillation.rst", "docs/source/api-doc/component/MixedPrecision.rst", "docs/source/api-doc/component/ModelConversion.rst", "docs/source/api-doc/component/Nas.rst", "docs/source/api-doc/component/Pruning.rst", "docs/source/api-doc/component/Quantization.rst", "docs/source/api-doc/component/Scheduler.rst", "docs/source/api-doc/contrib.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/pythonic.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/strategy/strategy.rst", "docs/source/api-doc/utils.rst", "docs/source/bench.md", "docs/source/benchmark.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/platform_configuration.md", "docs/source/pruning.md", "docs/source/pruning_details.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">644ec953a7dc_pruning_support</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6ece06672ed3_v1_14</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6f0d0f71d92e_v1_13</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">9e89549a08c8_v1_11</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">env</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_predictor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_search</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.execute_benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.benchmark_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.graph_optimization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.mixed_precision_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.profiling_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.pruning_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.quantization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.configuration_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_boundary_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.params_feeder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.pruning_config_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain_flavour</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.framework</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.project</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.pruning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.examples_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.model_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.project_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.params_interfaces</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.attribute</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.collapser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.edge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.onnxrt_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.tensorflow_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_control_queue</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.request</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.manage_workspace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model_type_getter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.shape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.frozen_pb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.meta_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.saved_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.list_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.execute_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tune_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.execute_profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profile_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.inc_bench</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.consts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.environment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.executor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.expiring_dict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.github_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.hw_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.json_serializer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.proc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.processes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.status_updates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.workdir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.yaml_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.communication</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.server</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.history_snapshot_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.request_data_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.response_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "Adaptor", "ONNX Runtime", "Torch Utils", "Bf16 Convert", "Hawq Metric", "Onnx", "Symbolic Trace", "Util", "Algorithm", "APIs", "User facing APIs", "Benchmark", "Config", "Mix Precision", "Objective", "Quantization", "Training", "Common", "Benchmark", "BLEU", "Criterion", "Data", "Dataloader", "Datasets", "Transforms", "Metric", "Model", "Optimizer", "Component(experiemental API, deprecated in 2.0)", "Distillation", "MixedPrecision", "ModelConversion", "Neural architecture search (NAS)", "Pruning", "Quantization", "Scheduler", "Contrib", "Model", "Pythonic", "Strategy", "Strategies", "Utils", "Intel\u00ae Neural Compressor Bench", "Benchmarking", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Pruning details", "Full Publications/Events (56)", "Pythonic Style Access for Configurations", "Quantization", "Turn OFF Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"pruning_support": 0, "revis": [0, 1, 2, 3, 335], "id": [0, 1, 2, 3, 96, 189, 191, 225, 235, 237, 238, 239, 240, 277, 279, 280, 281, 282, 322, 335, 359, 360, 362, 363, 364, 366, 369, 370, 371, 372, 373, 375, 376, 378, 379, 407, 408, 411, 479, 549, 589, 621, 624], "644ec953a7dc": 0, "6ece06672ed3": [0, 1], "creat": [0, 1, 2, 3, 5, 13, 41, 96, 99, 104, 116, 133, 163, 173, 175, 193, 194, 201, 211, 213, 227, 234, 238, 246, 247, 257, 258, 259, 275, 280, 314, 322, 324, 326, 327, 332, 358, 375, 385, 386, 390, 391, 472, 493, 506, 519, 523, 526, 529, 575, 591, 602, 604, 606, 607, 610, 618, 621, 622, 624], "date": [0, 1, 2, 3, 312, 463], "2022": [0, 1, 2, 3, 528, 588], "12": [0, 572, 584, 587, 627], "09": [0, 627], "17": [0, 627], "22": [0, 3, 484, 487, 627], "310141": 0, "v1": [1, 2, 3, 41, 140, 184, 185, 186, 187, 223, 239, 240, 242, 281, 282, 283, 284, 293, 579, 584, 589, 591, 620, 621, 627], "14": [1, 2, 158, 228, 230, 231, 294, 581, 627], "6f0d0f71d92e": [1, 2], "08": [1, 190, 226, 623, 627], "31": [1, 627], "07": [1, 2, 626, 627], "16": [1, 574, 575, 614, 627], "24": [1, 624, 627], "229939": 1, "update_dataload": 1, "db_session": [1, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 385, 386, 388, 390, 393], "sqlalchemi": [1, 358, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 385, 386, 388, 390, 391, 393, 582, 587], "orm": [1, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 385, 386, 388, 390, 393], "session": [1, 140, 172, 210, 293, 358, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 385, 386, 388, 390, 391, 393, 622, 624], "updat": [1, 42, 56, 68, 96, 97, 104, 109, 116, 153, 231, 235, 241, 242, 250, 269, 271, 276, 277, 283, 284, 292, 293, 294, 296, 299, 300, 301, 303, 304, 305, 306, 309, 310, 322, 342, 359, 360, 361, 362, 370, 373, 375, 376, 378, 380, 386, 388, 389, 390, 393, 463, 486, 490, 495, 498, 500, 504, 549, 572, 581, 589, 595, 600, 603, 613, 614, 615, 624], "dataload": [1, 6, 8, 11, 13, 14, 15, 39, 41, 142, 144, 145, 147, 148, 150, 153, 161, 162, 173, 184, 191, 194, 200, 211, 222, 227, 234, 244, 261, 266, 271, 274, 275, 276, 294, 305, 311, 329, 332, 340, 345, 352, 356, 367, 381, 384, 386, 391, 393, 415, 456, 469, 472, 475, 483, 494, 495, 499, 525, 528, 529, 551, 572, 577, 578, 579, 584, 585, 589, 590, 612, 618, 619, 622, 623, 626], "exist": [1, 47, 97, 133, 155, 191, 192, 238, 258, 280, 293, 324, 326, 335, 360, 380, 386, 388, 389, 426, 477, 493, 494, 589, 596, 614, 624], "databas": [1, 175, 179, 184, 213, 358, 359, 360, 361, 362, 363, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 386, 387, 388, 389, 390, 391, 463, 477, 493], "update_transform": 1, "transform": [1, 14, 38, 44, 56, 61, 62, 83, 84, 86, 125, 126, 130, 135, 136, 137, 138, 139, 145, 153, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 211, 212, 213, 214, 215, 216, 218, 220, 221, 222, 234, 253, 255, 256, 276, 352, 356, 362, 367, 381, 384, 386, 391, 393, 415, 494, 495, 496, 497, 502, 525, 526, 551, 574, 575, 577, 578, 579, 580, 584, 592, 597, 598, 599, 600, 616, 619, 622, 626, 627], "13": [2, 3, 311, 572, 587], "9e89549a08c8": [2, 3], "29": [2, 627], "41": [2, 627], "291905": 2, "11": [3, 484, 572, 587, 589, 590], "03": [3, 484, 627], "34": [3, 627], "52": [3, 627], "916541": 3, "block": [4, 61, 234, 247, 256, 261, 266, 269, 272, 295, 299, 307, 511, 586, 611, 614, 615], "mask": [4, 173, 211, 238, 254, 256, 265, 269, 271, 273, 280, 294, 299, 300, 303, 304, 306, 309, 614, 615, 627], "run_migrations_offlin": 5, "run": [5, 6, 8, 11, 13, 15, 39, 104, 140, 153, 158, 161, 162, 172, 189, 191, 210, 225, 234, 247, 250, 270, 271, 285, 306, 310, 311, 314, 315, 322, 441, 487, 509, 510, 511, 524, 529, 572, 573, 579, 582, 583, 590, 592, 594, 596, 597, 598, 600, 602, 603, 604, 606, 607, 609, 614, 616, 618, 620, 621, 622, 624, 626], "migrat": [5, 477], "offlin": [5, 339, 523, 618], "mode": [5, 6, 8, 11, 14, 19, 37, 38, 39, 41, 104, 145, 182, 191, 220, 234, 238, 280, 293, 306, 322, 324, 326, 339, 359, 486, 529, 572, 586, 587, 602, 606, 618, 619, 624], "thi": [5, 8, 37, 39, 41, 50, 56, 61, 62, 75, 80, 96, 101, 104, 109, 116, 126, 133, 135, 139, 142, 147, 152, 153, 161, 162, 172, 173, 174, 175, 176, 177, 178, 179, 180, 184, 187, 189, 190, 193, 194, 199, 200, 210, 211, 212, 213, 214, 215, 216, 218, 225, 226, 234, 235, 238, 239, 240, 242, 247, 252, 253, 260, 261, 266, 269, 271, 272, 273, 274, 275, 276, 277, 280, 281, 282, 283, 284, 285, 295, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 311, 314, 319, 338, 339, 523, 524, 525, 526, 529, 549, 572, 574, 575, 577, 578, 579, 583, 586, 588, 589, 590, 591, 592, 594, 595, 597, 598, 600, 602, 604, 606, 607, 608, 609, 610, 614, 615, 618, 619, 620, 621, 622, 623, 624], "configur": [5, 6, 8, 11, 13, 14, 39, 40, 41, 96, 104, 112, 141, 147, 153, 154, 158, 161, 162, 164, 167, 175, 178, 184, 191, 196, 213, 216, 227, 228, 231, 233, 234, 238, 244, 245, 246, 247, 249, 257, 258, 261, 266, 270, 272, 274, 275, 276, 280, 285, 294, 295, 299, 307, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 327, 329, 331, 332, 335, 337, 338, 340, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 359, 370, 381, 383, 386, 445, 447, 452, 456, 459, 462, 475, 477, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 509, 511, 525, 526, 529, 572, 575, 589, 596, 610, 611, 614, 620, 623, 624, 627], "context": [5, 13, 339, 617], "just": [5, 91, 163, 184, 187, 188, 190, 193, 194, 195, 196, 198, 201, 226, 295, 526, 599, 603, 609, 612, 618, 623, 624], "url": [5, 175, 213, 440, 507, 588], "an": [5, 13, 14, 37, 39, 56, 61, 62, 64, 96, 99, 109, 133, 135, 142, 147, 152, 153, 166, 171, 175, 179, 184, 187, 190, 194, 199, 200, 204, 209, 213, 217, 222, 226, 234, 235, 238, 239, 240, 247, 254, 257, 258, 259, 275, 276, 277, 280, 281, 282, 285, 292, 299, 306, 309, 314, 403, 408, 484, 521, 523, 525, 526, 528, 529, 549, 574, 575, 576, 581, 589, 590, 592, 596, 597, 600, 609, 611, 615, 616, 621, 622, 623, 624], "engin": [5, 249, 358, 370, 391], "though": [5, 256], "i": [5, 6, 8, 11, 13, 14, 15, 38, 39, 41, 42, 43, 47, 48, 51, 54, 56, 58, 61, 62, 64, 75, 76, 79, 85, 86, 87, 96, 97, 99, 101, 103, 104, 109, 116, 126, 133, 135, 136, 140, 142, 146, 147, 152, 153, 158, 161, 162, 163, 164, 167, 171, 172, 173, 174, 175, 176, 177, 179, 180, 182, 183, 184, 186, 187, 190, 191, 193, 194, 197, 199, 200, 201, 209, 210, 211, 212, 213, 214, 215, 218, 220, 221, 222, 223, 226, 234, 235, 238, 240, 241, 242, 244, 247, 250, 254, 256, 259, 261, 266, 270, 271, 272, 275, 276, 277, 280, 282, 283, 284, 285, 292, 295, 296, 299, 300, 306, 307, 308, 310, 311, 314, 315, 320, 321, 322, 329, 338, 339, 358, 391, 403, 423, 426, 428, 429, 431, 433, 434, 435, 436, 442, 480, 482, 484, 486, 487, 492, 494, 496, 502, 507, 509, 523, 524, 525, 526, 529, 530, 532, 538, 539, 540, 547, 549, 551, 558, 566, 567, 568, 569, 571, 572, 573, 574, 575, 577, 578, 579, 581, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 600, 602, 603, 604, 606, 607, 609, 610, 611, 612, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626], "accept": [5, 295, 523, 572, 573], "here": [5, 62, 64, 116, 238, 245, 256, 257, 280, 572, 575, 579, 580, 581, 583, 584, 589, 597, 604, 607, 609, 614, 618, 620, 621, 624], "well": [5, 161, 162, 285, 311, 526, 528, 575, 618, 620, 626], "By": [5, 235, 277, 549, 589, 591, 602, 603, 606, 624], "skip": [5, 61, 97, 295, 622, 624], "creation": [5, 355], "we": [5, 38, 61, 62, 64, 68, 80, 96, 104, 133, 135, 145, 151, 152, 172, 191, 193, 194, 210, 235, 238, 245, 256, 257, 277, 280, 316, 317, 335, 523, 525, 529, 549, 574, 579, 581, 583, 589, 596, 597, 600, 604, 607, 609, 610, 611, 612, 614, 615, 617, 618, 621, 622, 624], "don": [5, 135, 152, 299, 484, 525, 572, 624], "t": [5, 61, 62, 64, 104, 133, 135, 152, 184, 187, 190, 193, 194, 226, 240, 249, 250, 254, 275, 282, 299, 484, 493, 525, 529, 572, 577, 579, 590, 610, 624, 626], "even": [5, 56, 572, 614], "need": [5, 6, 8, 11, 13, 14, 38, 39, 56, 75, 80, 97, 99, 103, 104, 126, 133, 145, 153, 161, 162, 163, 171, 172, 175, 179, 182, 183, 184, 187, 190, 193, 194, 195, 196, 201, 209, 210, 213, 220, 221, 222, 226, 227, 234, 241, 242, 247, 254, 256, 261, 266, 275, 283, 284, 285, 291, 292, 295, 299, 311, 315, 319, 322, 338, 339, 513, 525, 529, 572, 574, 575, 577, 579, 586, 590, 592, 594, 595, 598, 602, 603, 604, 606, 607, 609, 610, 614, 617, 618, 619, 620, 623, 624, 626], "dbapi": 5, "avail": [5, 158, 289, 356, 361, 363, 364, 368, 371, 372, 377, 442, 530, 532, 538, 539, 540, 547, 551, 558, 566, 567, 568, 569, 571, 572, 580, 584, 586, 602, 606, 613, 615, 624], "call": [5, 13, 96, 116, 145, 148, 150, 200, 234, 238, 249, 250, 261, 266, 269, 271, 272, 280, 300, 304, 305, 306, 329, 358, 391, 479, 487, 488, 525, 526, 529, 572, 574, 585, 598, 600, 610, 614, 618, 622, 623], "execut": [5, 8, 11, 14, 38, 39, 41, 44, 46, 47, 49, 63, 67, 73, 76, 78, 82, 102, 138, 148, 150, 191, 200, 227, 234, 245, 246, 257, 261, 266, 271, 274, 275, 306, 311, 313, 332, 338, 339, 340, 341, 342, 359, 370, 373, 380, 386, 388, 389, 445, 447, 449, 452, 453, 456, 457, 458, 459, 461, 462, 464, 469, 472, 476, 479, 487, 488, 510, 572, 577, 578, 590, 594, 595, 602, 603, 606, 609, 610, 612, 614, 615, 618, 621, 624, 627], "emit": 5, "given": [5, 13, 14, 15, 37, 41, 61, 62, 64, 96, 98, 99, 109, 110, 140, 147, 158, 184, 187, 189, 190, 225, 226, 238, 280, 292, 293, 294, 299, 306, 311, 322, 335, 403, 409, 423, 426, 428, 429, 431, 433, 434, 436, 480, 494, 507, 526, 614, 615, 623], "string": [5, 6, 8, 37, 38, 39, 40, 41, 50, 57, 73, 96, 97, 104, 109, 110, 133, 136, 140, 153, 154, 173, 175, 192, 197, 211, 213, 227, 231, 233, 234, 235, 238, 244, 245, 246, 249, 257, 258, 259, 261, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 285, 289, 293, 294, 299, 306, 307, 308, 309, 310, 311, 324, 326, 332, 339, 352, 472, 494, 518, 589, 623], "script": [5, 235, 236, 239, 240, 277, 278, 281, 282, 341, 342, 428, 445, 447, 449, 452, 453, 455, 456, 458, 459, 461, 462, 467, 579, 586, 592, 596, 599, 600, 603, 616], "output": [5, 15, 37, 38, 39, 41, 47, 51, 53, 54, 62, 64, 68, 79, 85, 87, 92, 96, 97, 99, 103, 104, 107, 116, 133, 140, 147, 153, 155, 158, 161, 162, 189, 192, 194, 195, 199, 225, 227, 228, 230, 231, 233, 234, 235, 238, 242, 247, 248, 256, 269, 276, 277, 280, 283, 284, 285, 292, 293, 294, 299, 306, 311, 329, 330, 333, 335, 336, 339, 359, 370, 373, 380, 386, 388, 389, 423, 433, 434, 435, 449, 453, 456, 479, 487, 495, 501, 525, 529, 549, 572, 577, 578, 579, 581, 583, 585, 589, 591, 600, 609, 610, 612, 614, 617, 618, 622, 623, 624, 626], "run_migrations_onlin": 5, "onlin": [5, 523, 528, 621], "In": [5, 50, 61, 62, 109, 172, 200, 210, 234, 238, 256, 269, 271, 280, 295, 299, 306, 308, 320, 523, 525, 526, 528, 529, 572, 574, 575, 577, 578, 579, 589, 599, 602, 603, 606, 611, 612, 614, 615, 618, 619, 621, 622, 623, 624], "scenario": [5, 356, 529, 572, 573, 577, 614, 615], "associ": [5, 238, 280, 381, 382], "connect": [5, 271, 296, 370, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 572, 609, 613, 614, 615, 621], "adaptor_registri": [6, 529], "cl": [6, 39, 148, 150, 153, 175, 179, 182, 183, 184, 187, 190, 192, 197, 213, 217, 220, 221, 222, 224, 226, 259, 264, 269, 271, 273, 276, 295, 299, 305, 306, 308, 309, 322, 339], "The": [6, 8, 11, 14, 15, 32, 38, 39, 41, 47, 62, 64, 68, 73, 85, 86, 87, 96, 104, 107, 109, 113, 115, 140, 142, 145, 147, 148, 150, 153, 154, 155, 161, 162, 163, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 187, 190, 192, 194, 195, 197, 200, 201, 211, 212, 213, 214, 215, 217, 219, 220, 221, 222, 224, 226, 227, 233, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 256, 257, 258, 259, 260, 261, 264, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 292, 293, 295, 296, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 326, 327, 328, 329, 330, 332, 333, 334, 335, 338, 339, 359, 360, 362, 365, 369, 370, 373, 374, 376, 378, 379, 386, 391, 394, 396, 397, 398, 399, 400, 401, 402, 415, 422, 423, 475, 523, 525, 526, 529, 530, 532, 538, 539, 540, 547, 549, 551, 558, 566, 567, 568, 569, 571, 572, 573, 574, 575, 577, 579, 581, 583, 585, 586, 587, 589, 590, 591, 594, 595, 597, 600, 602, 603, 604, 606, 607, 609, 610, 611, 612, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626], "decor": [6, 32, 61, 62, 64, 140, 148, 150, 184, 187, 190, 197, 222, 224, 226, 241, 242, 259, 264, 269, 271, 273, 283, 284, 295, 299, 305, 306, 309, 322, 325, 339, 489, 525, 526, 529, 624], "us": [6, 8, 11, 13, 14, 32, 38, 39, 41, 42, 43, 61, 62, 64, 96, 97, 99, 107, 109, 110, 116, 142, 147, 153, 155, 161, 162, 171, 172, 173, 174, 175, 176, 177, 179, 180, 184, 187, 189, 190, 191, 192, 197, 209, 210, 211, 212, 213, 214, 215, 218, 222, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 238, 242, 243, 244, 245, 248, 250, 256, 257, 259, 261, 264, 266, 269, 271, 272, 273, 274, 275, 277, 278, 280, 284, 295, 296, 299, 305, 306, 309, 314, 316, 317, 319, 320, 321, 322, 325, 326, 330, 331, 332, 333, 334, 335, 339, 386, 391, 396, 397, 401, 403, 415, 422, 424, 449, 453, 477, 494, 496, 506, 507, 523, 524, 525, 526, 529, 549, 572, 573, 574, 575, 577, 578, 579, 581, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 600, 602, 604, 606, 607, 609, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627], "regist": [6, 32, 126, 148, 150, 175, 179, 182, 183, 184, 187, 190, 192, 197, 200, 213, 217, 220, 221, 222, 224, 226, 227, 234, 241, 242, 259, 260, 261, 262, 263, 264, 266, 269, 271, 273, 283, 284, 291, 294, 295, 296, 299, 305, 306, 308, 309, 314, 322, 325, 526, 529, 575, 579, 589, 610, 611, 624], "all": [6, 8, 13, 15, 32, 39, 41, 54, 57, 79, 91, 96, 116, 125, 130, 148, 150, 163, 164, 167, 171, 175, 179, 182, 183, 184, 187, 190, 191, 192, 197, 200, 201, 209, 213, 217, 220, 221, 222, 224, 226, 231, 234, 235, 238, 240, 241, 242, 252, 253, 254, 256, 259, 261, 262, 263, 264, 265, 266, 269, 272, 275, 277, 280, 282, 283, 284, 286, 287, 292, 295, 299, 305, 306, 307, 312, 313, 314, 315, 316, 322, 324, 325, 326, 332, 339, 343, 355, 358, 367, 384, 386, 391, 396, 397, 410, 412, 415, 416, 422, 423, 426, 428, 435, 441, 448, 450, 454, 455, 457, 460, 466, 471, 475, 484, 488, 511, 523, 528, 529, 572, 574, 575, 579, 583, 587, 592, 600, 603, 604, 607, 608, 609, 610, 612, 613, 614, 615, 616, 618, 619, 623, 624], "subclass": [6, 32, 148, 150, 168, 172, 175, 179, 182, 183, 184, 187, 190, 197, 206, 210, 213, 217, 220, 221, 222, 224, 226, 241, 242, 259, 262, 263, 264, 269, 271, 273, 283, 284, 295, 299, 305, 306, 309, 322, 325, 529], "paramet": [6, 8, 11, 13, 14, 15, 37, 38, 39, 41, 50, 51, 54, 55, 56, 57, 61, 62, 64, 68, 73, 79, 80, 83, 84, 96, 97, 99, 104, 107, 109, 110, 116, 126, 133, 134, 136, 140, 141, 142, 146, 147, 148, 150, 153, 154, 155, 158, 161, 162, 163, 172, 173, 175, 179, 182, 183, 184, 186, 187, 189, 190, 191, 192, 197, 201, 210, 211, 213, 217, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 256, 257, 258, 259, 260, 261, 264, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 289, 291, 292, 293, 294, 295, 296, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 314, 315, 319, 322, 324, 325, 326, 327, 328, 329, 332, 333, 335, 336, 338, 339, 352, 356, 361, 362, 381, 382, 383, 386, 392, 394, 403, 429, 447, 452, 456, 459, 462, 474, 479, 484, 486, 487, 493, 494, 496, 506, 507, 525, 549, 572, 574, 575, 577, 579, 586, 589, 603, 609, 610, 614, 615, 618, 621, 623, 624, 626], "framework_specific_info": [6, 8, 11, 14, 39, 41, 529], "base": [6, 8, 11, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 98, 99, 101, 102, 103, 107, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 139, 141, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 234, 235, 238, 241, 242, 243, 245, 246, 247, 249, 250, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 269, 271, 273, 274, 275, 276, 277, 280, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 303, 304, 305, 306, 308, 309, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 328, 330, 333, 334, 335, 336, 339, 344, 345, 346, 348, 349, 350, 351, 354, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 398, 399, 400, 402, 405, 407, 408, 411, 421, 423, 426, 428, 430, 431, 433, 434, 435, 436, 444, 447, 452, 456, 459, 462, 472, 476, 478, 480, 482, 486, 487, 488, 489, 492, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 507, 508, 510, 512, 516, 517, 526, 528, 529, 549, 575, 578, 579, 583, 597, 598, 600, 609, 613, 615, 621, 622, 624, 627], "object": [6, 8, 11, 13, 14, 32, 38, 39, 41, 51, 54, 55, 56, 57, 68, 73, 79, 80, 85, 86, 87, 88, 97, 98, 99, 104, 107, 110, 126, 133, 136, 141, 142, 146, 147, 148, 150, 153, 154, 155, 158, 161, 162, 163, 164, 166, 167, 171, 173, 174, 175, 179, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 204, 209, 211, 212, 213, 217, 220, 221, 222, 224, 225, 226, 227, 231, 233, 234, 235, 238, 241, 242, 243, 246, 247, 249, 257, 258, 260, 261, 262, 263, 264, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 283, 284, 285, 287, 289, 291, 292, 293, 294, 296, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 314, 322, 330, 332, 333, 334, 336, 338, 339, 356, 371, 372, 375, 378, 419, 484, 487, 494, 504, 506, 507, 511, 525, 526, 540, 549, 572, 573, 574, 575, 582, 589, 591, 612, 614, 615, 617, 618, 623, 624], "framework": [6, 8, 11, 13, 14, 39, 153, 159, 160, 164, 165, 167, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 187, 190, 192, 193, 194, 197, 202, 203, 205, 207, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 224, 226, 233, 234, 241, 242, 243, 250, 274, 275, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 320, 322, 324, 326, 332, 341, 356, 367, 384, 386, 391, 393, 395, 415, 423, 426, 428, 429, 435, 442, 444, 449, 453, 458, 461, 465, 476, 482, 494, 495, 528, 529, 572, 579, 580, 584, 585, 586, 587, 589, 590, 614, 616, 618, 622, 623, 624, 626], "layer": [6, 8, 11, 14, 38, 39, 40, 41, 62, 64, 109, 110, 111, 112, 113, 115, 116, 145, 151, 158, 192, 199, 234, 256, 261, 266, 269, 270, 272, 299, 307, 310, 330, 332, 333, 339, 506, 529, 578, 586, 614, 615, 620], "abstract": [6, 11, 13, 40, 80, 107, 116, 190, 192, 226, 227, 233, 234, 241, 242, 258, 260, 264, 269, 273, 274, 283, 284, 286, 287, 288, 295, 299, 305, 309, 322, 345, 357, 423, 434, 435, 456, 468, 486, 510, 529, 585], "quantiz": [6, 7, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 82, 86, 88, 90, 93, 101, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 139, 141, 142, 144, 145, 147, 148, 150, 151, 153, 158, 161, 162, 186, 193, 194, 200, 223, 228, 231, 232, 233, 234, 244, 275, 276, 285, 294, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 329, 330, 333, 334, 335, 338, 339, 351, 356, 386, 388, 394, 475, 483, 495, 499, 529, 540, 558, 572, 574, 575, 579, 580, 581, 583, 585, 586, 589, 590, 591, 592, 597, 599, 600, 603, 612, 616, 620, 622, 623, 624, 626], "tune_cfg": [6, 8, 11, 13, 14, 39, 41, 140, 141, 147, 162, 315, 322, 529, 624], "model": [6, 8, 11, 13, 14, 15, 28, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 110, 112, 133, 134, 140, 141, 142, 145, 146, 147, 148, 150, 151, 153, 158, 161, 162, 169, 172, 173, 175, 184, 187, 190, 191, 192, 194, 195, 200, 207, 210, 211, 213, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 248, 250, 255, 256, 257, 258, 260, 261, 266, 269, 270, 271, 272, 273, 274, 275, 276, 283, 284, 285, 295, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 314, 315, 317, 319, 320, 321, 322, 324, 326, 329, 335, 338, 339, 341, 342, 343, 345, 356, 359, 367, 370, 373, 375, 383, 384, 385, 386, 387, 388, 390, 391, 392, 394, 398, 402, 403, 408, 409, 410, 413, 414, 415, 439, 440, 442, 445, 448, 449, 450, 451, 453, 454, 455, 456, 460, 461, 466, 468, 471, 472, 475, 476, 483, 492, 494, 499, 509, 510, 514, 521, 525, 526, 528, 529, 539, 547, 573, 574, 575, 577, 578, 579, 580, 585, 586, 588, 589, 590, 592, 597, 599, 600, 603, 609, 611, 612, 613, 614, 615, 616, 618, 620, 621, 622, 623, 624, 626], "q_func": [6, 8, 11, 14, 39, 41, 161, 162, 234, 274, 275, 314, 315, 317, 319, 321, 322, 529, 624], "none": [6, 8, 11, 13, 14, 15, 37, 38, 39, 41, 42, 43, 57, 83, 96, 97, 98, 99, 104, 110, 116, 133, 134, 140, 142, 145, 147, 153, 154, 155, 158, 161, 162, 163, 165, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 184, 186, 187, 190, 191, 192, 193, 194, 200, 201, 203, 208, 209, 211, 212, 213, 214, 215, 216, 218, 223, 226, 227, 228, 230, 231, 233, 234, 235, 238, 241, 242, 243, 244, 245, 247, 249, 250, 254, 256, 257, 258, 261, 265, 266, 270, 271, 274, 275, 276, 277, 280, 283, 284, 285, 290, 292, 293, 294, 295, 305, 310, 311, 314, 315, 317, 319, 321, 322, 324, 326, 329, 330, 332, 333, 338, 339, 340, 341, 342, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 358, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 385, 386, 389, 391, 392, 393, 394, 408, 423, 426, 428, 430, 433, 434, 435, 440, 442, 447, 449, 452, 453, 456, 458, 459, 461, 462, 463, 464, 465, 468, 469, 470, 472, 474, 477, 479, 480, 482, 485, 487, 488, 492, 493, 494, 495, 496, 497, 498, 500, 502, 503, 504, 506, 507, 511, 513, 519, 529, 549, 575, 589, 618, 622, 623, 624], "do": [6, 8, 11, 14, 17, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 39, 42, 43, 71, 73, 101, 172, 173, 210, 211, 227, 228, 231, 234, 235, 238, 272, 275, 277, 280, 295, 307, 315, 338, 523, 549, 572, 575, 579, 583, 586, 587, 589, 604, 607, 614, 619, 620, 624], "calibr": [6, 7, 8, 11, 13, 14, 16, 38, 39, 42, 43, 71, 83, 84, 145, 147, 148, 150, 153, 161, 162, 233, 234, 274, 275, 276, 285, 294, 311, 334, 503, 529, 574, 575, 585, 586, 618, 624, 626], "quanit": [6, 11, 14], "post": [6, 11, 14, 91, 92, 145, 151, 158, 161, 162, 184, 187, 190, 200, 226, 231, 234, 275, 276, 311, 322, 506, 523, 528, 529, 578, 579, 581, 586, 587, 592, 598, 609, 616, 622, 624], "train": [6, 8, 11, 14, 39, 41, 50, 56, 73, 74, 116, 145, 151, 158, 161, 162, 173, 175, 190, 200, 211, 213, 226, 227, 234, 244, 245, 247, 248, 255, 257, 261, 266, 271, 272, 274, 275, 276, 305, 306, 307, 311, 322, 332, 502, 526, 528, 529, 540, 575, 577, 578, 581, 586, 590, 592, 598, 609, 612, 614, 615, 616, 621, 624, 626, 627], "dict": [6, 8, 11, 13, 14, 15, 38, 39, 41, 107, 109, 110, 116, 136, 140, 141, 142, 147, 148, 150, 155, 161, 162, 172, 175, 191, 192, 197, 210, 213, 228, 229, 231, 234, 237, 238, 239, 240, 242, 245, 247, 250, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 269, 270, 271, 272, 273, 279, 280, 281, 282, 284, 285, 286, 287, 292, 293, 294, 296, 299, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 330, 332, 333, 338, 339, 340, 342, 345, 352, 353, 354, 356, 357, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 399, 400, 403, 411, 420, 423, 430, 438, 439, 440, 442, 444, 445, 446, 447, 452, 456, 459, 462, 463, 464, 465, 467, 469, 470, 472, 479, 480, 482, 484, 486, 487, 490, 492, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 506, 507, 510, 511, 513, 515, 517, 518, 520, 525, 589, 614, 617, 622, 624], "chosen": [6, 8, 572], "tune": [6, 8, 11, 13, 14, 39, 41, 153, 158, 161, 162, 173, 175, 211, 213, 233, 234, 274, 276, 285, 295, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 339, 351, 370, 378, 379, 386, 388, 392, 415, 445, 450, 463, 475, 483, 495, 499, 529, 572, 574, 575, 579, 586, 588, 590, 609, 611, 616, 619, 620, 621, 622, 626], "load": [6, 8, 173, 175, 189, 190, 211, 213, 225, 226, 238, 248, 250, 258, 280, 285, 293, 294, 311, 338, 339, 386, 388, 467, 494, 495, 574, 602, 606, 610, 617, 618], "dataset": [6, 8, 11, 14, 39, 41, 147, 153, 161, 162, 163, 165, 166, 170, 171, 172, 184, 193, 194, 201, 203, 204, 208, 209, 210, 222, 233, 234, 238, 239, 240, 242, 244, 250, 274, 275, 276, 280, 281, 282, 283, 284, 285, 311, 332, 359, 367, 370, 373, 381, 386, 390, 391, 392, 403, 415, 492, 494, 495, 496, 526, 528, 529, 551, 574, 579, 584, 589, 597, 614, 615, 618, 620, 624, 626, 627], "option": [6, 8, 11, 14, 15, 39, 41, 96, 99, 104, 133, 153, 158, 161, 162, 163, 173, 184, 187, 190, 192, 201, 211, 226, 228, 230, 231, 234, 238, 244, 249, 250, 256, 269, 275, 276, 280, 285, 293, 294, 299, 311, 322, 324, 326, 329, 333, 335, 339, 484, 575, 583, 587, 603, 621, 623, 624, 626], "awar": [6, 8, 11, 14, 39, 41, 142, 158, 164, 167, 184, 200, 234, 244, 269, 274, 275, 276, 317, 322, 529, 578, 579, 581, 586, 590, 609, 612, 624, 627], "evalu": [6, 8, 11, 14, 39, 41, 153, 161, 162, 173, 191, 200, 211, 227, 233, 234, 235, 238, 239, 240, 241, 242, 244, 245, 246, 249, 250, 257, 258, 261, 266, 271, 272, 275, 276, 277, 280, 281, 282, 283, 284, 285, 295, 299, 306, 307, 311, 322, 332, 344, 346, 348, 350, 351, 352, 475, 483, 495, 499, 526, 529, 549, 574, 575, 577, 578, 585, 586, 589, 590, 592, 598, 600, 603, 609, 611, 614, 618, 621, 622, 624, 626], "postprocess": [6, 8, 11, 14, 39, 41, 153, 184, 187, 190, 191, 194, 222, 224, 226, 233, 234, 244, 256, 274, 275, 276, 332, 497, 502, 529, 622, 623], "metric": [6, 8, 11, 14, 39, 41, 153, 161, 162, 191, 194, 227, 233, 234, 244, 245, 246, 248, 250, 257, 258, 259, 260, 261, 266, 274, 275, 276, 285, 295, 311, 332, 352, 356, 362, 367, 381, 384, 386, 391, 415, 475, 483, 486, 491, 494, 495, 497, 513, 526, 529, 532, 547, 549, 572, 574, 575, 579, 590, 621, 622, 624, 626, 627], "measur": [6, 8, 11, 14, 39, 41, 140, 153, 191, 249, 250, 255, 276, 285, 295, 334, 513, 526, 529, 573, 577, 589, 622, 624], "iter": [6, 8, 11, 13, 14, 15, 39, 41, 99, 140, 148, 150, 153, 158, 161, 162, 166, 171, 175, 176, 179, 184, 193, 194, 204, 209, 213, 214, 217, 222, 258, 271, 273, 285, 293, 306, 309, 311, 332, 359, 487, 495, 525, 526, 529, 573, 575, 614, 615, 617, 622, 624, 626], "1": [6, 8, 11, 14, 37, 38, 39, 41, 42, 48, 61, 68, 73, 83, 96, 97, 99, 103, 107, 109, 138, 140, 145, 147, 149, 151, 152, 153, 158, 163, 165, 170, 172, 173, 174, 176, 177, 179, 180, 181, 183, 184, 186, 187, 190, 191, 192, 193, 194, 201, 203, 208, 210, 211, 212, 214, 215, 218, 219, 223, 226, 233, 234, 238, 239, 240, 242, 247, 250, 254, 256, 261, 266, 269, 271, 274, 275, 276, 280, 281, 282, 283, 284, 294, 295, 299, 306, 311, 312, 332, 342, 464, 472, 523, 525, 528, 529, 574, 575, 577, 581, 583, 584, 587, 589, 590, 593, 595, 611, 612, 613, 614, 615, 617, 618, 620, 621, 622, 623, 624, 626], "tensorboard": [6, 8, 11, 14, 39, 41, 158, 276, 329, 332, 339, 529], "fals": [6, 8, 11, 13, 14, 15, 37, 39, 41, 42, 43, 57, 65, 66, 73, 83, 86, 93, 96, 97, 99, 104, 107, 118, 125, 130, 135, 138, 139, 140, 145, 146, 147, 153, 158, 162, 163, 165, 170, 173, 175, 184, 186, 187, 190, 191, 192, 193, 194, 199, 201, 203, 208, 211, 213, 223, 226, 238, 241, 242, 247, 248, 249, 250, 254, 255, 256, 269, 276, 280, 283, 284, 292, 295, 299, 322, 332, 335, 411, 430, 479, 482, 487, 488, 494, 513, 519, 529, 575, 583, 589, 602, 606, 617, 618, 622, 623, 626], "valid": [6, 8, 11, 40, 41, 48, 53, 61, 62, 97, 98, 99, 104, 133, 175, 179, 184, 213, 238, 250, 270, 271, 280, 293, 299, 306, 310, 442, 511, 524, 526, 528, 529, 575, 577, 580, 583, 586, 588, 600, 614, 615, 618, 620], "gener": [6, 7, 8, 13, 41, 42, 43, 81, 83, 84, 101, 104, 105, 116, 133, 136, 140, 147, 161, 162, 163, 172, 175, 176, 177, 178, 184, 187, 190, 191, 201, 210, 213, 214, 215, 216, 222, 224, 226, 231, 232, 234, 235, 243, 247, 254, 261, 269, 272, 275, 277, 285, 294, 299, 307, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 340, 341, 344, 345, 346, 347, 348, 349, 350, 351, 357, 381, 386, 392, 447, 452, 456, 459, 461, 462, 467, 468, 469, 478, 487, 519, 525, 529, 572, 574, 577, 589, 590, 592, 597, 602, 604, 606, 607, 609, 611, 613, 614, 615, 616, 618, 619, 622, 623, 624], "data": [6, 8, 11, 13, 14, 15, 38, 39, 41, 49, 73, 96, 97, 99, 104, 133, 140, 142, 144, 145, 147, 151, 153, 161, 162, 191, 192, 193, 194, 228, 231, 232, 234, 250, 255, 269, 275, 276, 285, 292, 299, 311, 314, 320, 326, 328, 332, 339, 340, 342, 345, 352, 353, 354, 356, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 392, 394, 403, 419, 420, 423, 426, 430, 435, 438, 439, 440, 442, 445, 447, 452, 456, 459, 462, 464, 469, 472, 479, 492, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 506, 510, 515, 517, 518, 520, 528, 529, 547, 572, 574, 575, 579, 583, 584, 587, 589, 590, 618, 619, 620, 621, 622, 623, 624], "label": [6, 8, 41, 153, 161, 162, 173, 175, 176, 177, 178, 181, 183, 184, 186, 187, 190, 192, 194, 195, 211, 213, 214, 215, 216, 219, 223, 226, 235, 237, 241, 242, 247, 248, 276, 277, 279, 283, 284, 285, 311, 411, 525, 549, 574, 575, 589, 623], "process": [6, 8, 11, 14, 39, 41, 110, 142, 161, 162, 173, 174, 175, 179, 184, 186, 187, 190, 191, 200, 211, 212, 213, 222, 223, 224, 226, 227, 228, 231, 234, 245, 246, 249, 255, 257, 258, 261, 266, 269, 271, 272, 273, 275, 276, 285, 299, 305, 306, 307, 309, 310, 311, 313, 314, 322, 338, 339, 355, 438, 439, 442, 475, 479, 483, 486, 487, 495, 526, 529, 572, 574, 575, 577, 578, 579, 581, 593, 612, 614, 615, 618, 622, 623, 626], "result": [6, 8, 11, 14, 38, 39, 41, 96, 140, 142, 147, 161, 184, 186, 187, 190, 191, 192, 223, 226, 234, 235, 238, 239, 240, 241, 242, 247, 249, 258, 277, 280, 281, 282, 283, 284, 295, 313, 317, 322, 324, 326, 340, 342, 359, 360, 373, 374, 376, 380, 386, 389, 392, 469, 510, 513, 523, 526, 528, 549, 572, 574, 577, 579, 586, 588, 589, 597, 598, 609, 610, 611, 614, 616, 618, 621, 622, 623, 624, 627], "from": [6, 8, 11, 13, 15, 38, 39, 41, 55, 61, 62, 63, 64, 96, 97, 99, 104, 107, 109, 116, 126, 133, 134, 136, 140, 147, 153, 158, 161, 162, 163, 166, 170, 173, 174, 175, 176, 177, 178, 179, 180, 184, 185, 186, 187, 192, 193, 194, 196, 200, 201, 204, 208, 211, 212, 213, 214, 215, 216, 218, 223, 227, 229, 230, 231, 232, 234, 235, 238, 239, 240, 244, 247, 248, 249, 250, 254, 256, 259, 261, 266, 269, 270, 271, 272, 273, 275, 276, 277, 280, 281, 282, 285, 291, 292, 293, 295, 296, 299, 306, 307, 308, 309, 310, 311, 314, 316, 321, 322, 324, 326, 327, 328, 329, 332, 335, 338, 339, 357, 359, 362, 363, 364, 366, 369, 370, 371, 372, 373, 375, 376, 378, 380, 381, 383, 386, 387, 388, 389, 390, 392, 403, 408, 426, 429, 438, 439, 440, 442, 467, 472, 486, 487, 492, 494, 495, 496, 502, 511, 513, 518, 519, 523, 525, 526, 529, 549, 573, 574, 575, 577, 578, 579, 580, 581, 582, 584, 586, 589, 590, 591, 592, 596, 597, 598, 600, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624], "depend": [6, 8, 13, 41, 56, 73, 161, 162, 191, 234, 245, 257, 258, 285, 311, 524, 572, 582, 583, 617, 624], "categori": [6, 8, 41, 175, 213, 237, 238, 279, 280, 573, 575, 599], "default": [6, 8, 15, 39, 41, 91, 97, 104, 133, 140, 153, 155, 158, 161, 162, 163, 165, 173, 174, 175, 179, 184, 186, 187, 190, 192, 200, 201, 203, 211, 212, 213, 223, 226, 228, 230, 231, 234, 235, 238, 241, 242, 244, 256, 270, 276, 277, 280, 283, 284, 293, 294, 310, 324, 326, 328, 332, 335, 339, 361, 363, 364, 366, 368, 371, 372, 377, 399, 400, 403, 420, 430, 482, 484, 494, 496, 497, 501, 502, 525, 529, 549, 572, 575, 581, 583, 586, 587, 589, 590, 597, 600, 602, 606, 611, 614, 615, 617, 619, 621, 623, 624, 626], "precis": [6, 8, 11, 39, 40, 41, 42, 43, 73, 141, 161, 162, 233, 234, 238, 240, 242, 243, 274, 280, 282, 283, 284, 285, 295, 312, 313, 315, 322, 324, 326, 356, 367, 370, 371, 381, 382, 383, 384, 385, 386, 391, 415, 444, 449, 451, 452, 453, 476, 495, 498, 500, 528, 529, 540, 572, 573, 578, 579, 583, 586, 592, 598, 599, 600, 616, 617, 618, 624], "benchmark": [6, 8, 11, 41, 158, 193, 194, 234, 275, 276, 295, 339, 360, 367, 370, 380, 386, 388, 391, 392, 415, 475, 476, 486, 492, 509, 514, 528, 540, 547, 591, 592, 596, 600, 603, 609, 624, 626, 627], "int": [6, 8, 11, 13, 14, 38, 39, 41, 97, 99, 104, 133, 140, 142, 147, 163, 172, 173, 174, 179, 184, 186, 187, 190, 201, 210, 211, 212, 223, 226, 228, 230, 231, 236, 238, 242, 247, 249, 250, 259, 276, 278, 280, 283, 284, 292, 294, 295, 299, 305, 315, 333, 339, 345, 358, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 383, 385, 386, 387, 388, 389, 390, 391, 393, 437, 472, 479, 480, 482, 484, 485, 486, 487, 488, 494, 495, 497, 502, 504, 507, 519, 575, 589, 617, 623], "control": [6, 8, 11, 41, 74, 148, 150, 250, 386, 391, 525, 572, 614, 624], "step": [6, 8, 11, 41, 42, 61, 62, 86, 101, 200, 234, 269, 271, 272, 273, 295, 296, 299, 304, 305, 306, 307, 308, 309, 329, 572, 577, 578, 579, 604, 607, 609, 612, 614, 615, 617, 619, 621, 622, 624], "mini": [6, 8, 11, 41, 627], "batch": [6, 8, 11, 13, 41, 56, 61, 109, 147, 163, 165, 166, 171, 172, 184, 193, 194, 200, 201, 203, 204, 209, 210, 234, 250, 254, 256, 261, 266, 320, 329, 359, 370, 492, 572, 574, 577, 578, 612, 614, 623, 624, 627], "boolean": [6, 8, 11, 13, 41, 50, 249, 306, 494], "inspect": [6, 8, 11, 14, 41, 572, 620, 622], "tensor": [6, 8, 11, 13, 14, 15, 37, 38, 39, 41, 64, 96, 97, 99, 104, 116, 126, 133, 140, 142, 147, 184, 187, 190, 192, 226, 228, 229, 231, 256, 264, 265, 269, 271, 273, 291, 292, 293, 294, 296, 299, 300, 306, 308, 309, 319, 339, 383, 386, 394, 423, 525, 575, 614, 615, 618, 620, 622, 623, 624], "query_fw_cap": [6, 8, 11, 14, 39, 41, 529], "return": [6, 8, 11, 13, 14, 15, 38, 39, 41, 42, 43, 44, 47, 50, 51, 54, 55, 56, 57, 61, 62, 64, 68, 73, 75, 79, 83, 84, 85, 86, 87, 88, 96, 97, 99, 104, 107, 109, 110, 116, 126, 133, 136, 138, 140, 141, 142, 145, 146, 147, 148, 150, 155, 161, 162, 163, 165, 172, 175, 179, 182, 183, 184, 186, 187, 189, 190, 191, 192, 197, 201, 203, 210, 213, 217, 220, 221, 222, 223, 224, 225, 226, 227, 231, 232, 234, 235, 236, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 250, 256, 257, 258, 259, 260, 261, 264, 266, 269, 270, 271, 272, 273, 275, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 299, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 332, 335, 338, 339, 359, 360, 362, 369, 370, 371, 372, 373, 375, 376, 378, 379, 403, 406, 407, 408, 409, 440, 479, 482, 484, 486, 487, 488, 494, 497, 506, 507, 510, 525, 526, 549, 575, 579, 589, 591, 611, 618, 622, 624], "capabl": [6, 8, 11, 13, 14, 39, 40, 41, 322, 324, 326, 573, 583, 590, 600, 617, 618, 624, 626], "queri": [6, 8, 11, 13, 14, 39, 41, 104, 109, 116, 140, 254, 256, 315, 324, 326, 361, 368, 377, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 618], "query_fused_pattern": [6, 529], "fuse": [6, 13, 39, 41, 42, 43, 48, 52, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 85, 86, 87, 88, 90, 125, 129, 130, 142, 146, 147, 151, 525, 622], "pattern": [6, 40, 41, 52, 53, 55, 56, 58, 61, 62, 64, 72, 73, 86, 90, 101, 102, 103, 104, 117, 118, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 154, 158, 175, 179, 184, 213, 234, 262, 267, 271, 276, 297, 304, 305, 306, 308, 324, 326, 383, 386, 399, 408, 409, 486, 510, 529, 575, 583, 586, 610, 612, 617, 627], "conv": [6, 7, 14, 15, 16, 28, 37, 42, 43, 52, 56, 60, 65, 66, 67, 86, 103, 104, 119, 129, 151, 158, 276, 299, 525, 614, 617], "relu": [6, 68, 72, 73, 103, 117, 119, 121, 122, 127, 129, 131, 525, 583, 622], "bn": [6, 56, 73, 75, 117, 627], "inspect_tensor": [6, 8, 11, 14, 41, 529], "op_list": [6, 8, 11, 14, 41, 142, 319, 529, 622], "iteration_list": [6, 8, 11, 14, 41, 529], "inspect_typ": [6, 8, 11, 14, 41, 394, 529], "activ": [6, 7, 8, 11, 14, 15, 16, 28, 41, 104, 122, 142, 145, 147, 199, 228, 231, 294, 324, 326, 399, 529, 572, 578, 583, 610, 613, 617, 618, 622, 626], "save_to_disk": [6, 8, 11, 14, 41, 529], "strategi": [6, 8, 11, 13, 14, 39, 147, 158, 159, 175, 213, 234, 274, 276, 356, 378, 476, 494, 504, 528, 529, 539, 579, 586, 597, 609, 616, 617, 618, 619, 620, 626], "dump": [6, 8, 11, 14, 15, 39, 41, 96, 104, 191, 228, 231, 234, 292, 339, 349, 463, 484, 495, 507, 618, 622], "info": [6, 8, 11, 14, 15, 38, 42, 98, 104, 147, 184, 187, 188, 193, 194, 198, 231, 269, 275, 288, 289, 292, 293, 294, 299, 310, 333, 336, 339, 359, 360, 362, 369, 370, 373, 374, 376, 379, 479, 482, 487, 494, 510, 525, 572, 581, 591], "feed": [6, 8, 140, 172, 210, 356, 577], "list": [6, 8, 11, 13, 38, 39, 41, 47, 50, 73, 96, 97, 99, 104, 109, 116, 133, 140, 141, 142, 147, 148, 150, 158, 161, 162, 166, 173, 184, 186, 187, 189, 190, 191, 192, 204, 211, 223, 225, 226, 228, 230, 231, 234, 235, 236, 238, 239, 240, 242, 247, 249, 250, 259, 261, 266, 269, 272, 277, 278, 280, 281, 282, 283, 284, 285, 292, 293, 294, 295, 299, 307, 311, 313, 315, 319, 322, 324, 325, 326, 329, 330, 333, 352, 354, 356, 357, 359, 361, 362, 363, 364, 366, 368, 369, 370, 371, 372, 373, 374, 375, 377, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 392, 393, 394, 403, 406, 408, 409, 411, 423, 426, 429, 430, 433, 434, 435, 437, 442, 445, 447, 449, 452, 453, 456, 459, 462, 472, 479, 484, 486, 487, 488, 492, 494, 495, 496, 497, 498, 500, 501, 502, 504, 506, 513, 525, 528, 529, 549, 575, 583, 587, 592, 597, 599, 602, 603, 606, 611, 614, 617, 619, 622, 624], "op": [6, 7, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 46, 48, 50, 51, 53, 54, 56, 59, 60, 61, 62, 63, 64, 65, 66, 68, 72, 73, 75, 79, 82, 85, 86, 87, 88, 90, 96, 97, 98, 99, 101, 103, 104, 117, 118, 119, 125, 127, 128, 129, 130, 132, 133, 135, 138, 140, 141, 142, 145, 146, 147, 151, 228, 231, 293, 312, 313, 315, 317, 319, 320, 324, 325, 326, 327, 334, 383, 386, 394, 399, 400, 408, 510, 529, 572, 583, 590, 614, 618, 619, 620, 622, 624, 626], "name": [6, 8, 13, 37, 38, 39, 41, 47, 56, 57, 61, 62, 64, 73, 96, 97, 98, 99, 104, 109, 110, 126, 133, 136, 140, 141, 142, 146, 147, 148, 150, 153, 155, 158, 173, 174, 175, 178, 179, 182, 183, 184, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 211, 212, 213, 216, 217, 220, 221, 222, 224, 226, 228, 229, 230, 231, 237, 238, 241, 242, 247, 248, 250, 256, 261, 264, 266, 269, 271, 273, 275, 276, 279, 280, 283, 284, 289, 291, 292, 293, 294, 295, 296, 299, 300, 306, 308, 309, 324, 325, 326, 328, 330, 332, 333, 335, 339, 359, 363, 364, 366, 369, 370, 371, 372, 373, 375, 394, 403, 405, 423, 426, 428, 429, 435, 442, 443, 444, 445, 456, 472, 479, 482, 494, 496, 497, 518, 525, 572, 575, 579, 583, 588, 589, 591, 595, 602, 606, 610, 613, 620, 621, 622, 624, 626, 627], "fp32": [6, 8, 11, 37, 39, 40, 41, 42, 43, 73, 85, 87, 125, 130, 135, 142, 145, 147, 152, 158, 161, 162, 228, 230, 231, 242, 284, 293, 294, 295, 313, 315, 319, 322, 324, 326, 332, 338, 339, 394, 528, 529, 572, 583, 584, 589, 590, 599, 617, 618, 619, 620, 621, 622, 624, 626, 627], "contain": [6, 8, 11, 13, 39, 50, 61, 62, 64, 68, 73, 96, 104, 107, 133, 140, 142, 153, 161, 162, 173, 174, 175, 179, 184, 211, 212, 213, 227, 228, 231, 233, 234, 238, 239, 240, 244, 247, 252, 253, 261, 262, 263, 264, 266, 269, 270, 271, 272, 273, 274, 276, 280, 281, 282, 285, 299, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 332, 338, 343, 347, 355, 361, 363, 364, 366, 367, 368, 371, 372, 375, 377, 381, 386, 391, 396, 397, 401, 404, 410, 415, 416, 422, 441, 448, 450, 451, 454, 455, 457, 460, 466, 471, 475, 479, 487, 575, 577, 586, 589, 610, 614, 615, 622, 624], "str": [6, 8, 13, 14, 15, 104, 133, 134, 141, 142, 146, 147, 148, 150, 153, 163, 173, 174, 175, 179, 182, 183, 184, 186, 187, 190, 192, 196, 197, 201, 211, 212, 213, 217, 220, 221, 222, 223, 224, 226, 228, 230, 231, 232, 235, 236, 238, 240, 241, 242, 247, 249, 250, 259, 264, 276, 277, 278, 280, 282, 283, 284, 286, 287, 291, 292, 293, 294, 299, 311, 319, 324, 325, 328, 329, 332, 335, 339, 340, 341, 342, 345, 352, 353, 354, 356, 358, 359, 362, 363, 364, 366, 369, 370, 371, 372, 373, 374, 375, 378, 381, 382, 383, 385, 386, 391, 392, 393, 394, 399, 400, 403, 405, 406, 407, 408, 409, 411, 420, 421, 423, 424, 426, 428, 429, 430, 431, 433, 434, 435, 436, 438, 439, 440, 442, 444, 445, 447, 449, 452, 453, 456, 458, 459, 461, 462, 463, 464, 467, 468, 469, 472, 479, 481, 482, 484, 486, 487, 490, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 506, 507, 510, 511, 518, 519, 549, 575, 589, 617, 622, 623], "valu": [6, 8, 11, 15, 38, 39, 41, 49, 50, 56, 61, 62, 64, 83, 84, 96, 97, 99, 104, 109, 133, 135, 136, 140, 145, 147, 152, 155, 158, 161, 162, 173, 176, 177, 184, 186, 187, 190, 191, 192, 211, 214, 215, 223, 226, 234, 238, 242, 248, 249, 254, 261, 266, 269, 270, 272, 280, 284, 285, 292, 294, 295, 296, 299, 300, 303, 307, 310, 311, 314, 319, 322, 324, 326, 330, 332, 333, 339, 352, 354, 356, 361, 363, 364, 366, 368, 371, 372, 377, 381, 382, 403, 405, 444, 476, 479, 480, 484, 486, 492, 494, 497, 502, 504, 505, 507, 518, 525, 572, 575, 583, 589, 595, 611, 614, 615, 617, 618, 623, 624, 626], "ar": [6, 8, 15, 56, 61, 62, 68, 96, 99, 116, 126, 158, 173, 184, 187, 190, 200, 211, 226, 234, 235, 238, 242, 248, 250, 254, 256, 259, 261, 266, 269, 270, 271, 272, 275, 276, 277, 280, 284, 292, 299, 306, 307, 312, 313, 314, 316, 332, 338, 339, 423, 426, 428, 435, 479, 488, 523, 524, 525, 526, 529, 549, 572, 574, 575, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 592, 595, 597, 600, 603, 609, 611, 612, 613, 614, 615, 618, 619, 620, 621, 622, 623, 624, 626], "weight": [6, 8, 15, 37, 38, 41, 54, 55, 56, 73, 104, 116, 133, 135, 142, 145, 152, 228, 231, 241, 242, 256, 265, 269, 271, 273, 283, 284, 293, 294, 296, 299, 300, 301, 303, 304, 306, 308, 309, 317, 322, 324, 326, 339, 399, 504, 529, 572, 578, 581, 583, 585, 589, 611, 614, 615, 617, 618, 622, 624, 626], "bool": [6, 8, 13, 14, 15, 39, 56, 57, 73, 96, 104, 109, 133, 140, 142, 146, 147, 162, 173, 175, 184, 186, 187, 190, 211, 213, 223, 226, 228, 231, 236, 238, 242, 247, 249, 250, 256, 269, 276, 278, 280, 284, 294, 295, 299, 315, 322, 324, 325, 335, 339, 369, 403, 408, 411, 423, 426, 428, 429, 430, 431, 433, 434, 435, 436, 440, 442, 445, 463, 479, 480, 482, 487, 488, 494, 496, 497, 507, 513, 519, 575, 589, 617, 623], "save": [6, 8, 14, 38, 39, 41, 99, 104, 134, 175, 179, 184, 213, 217, 222, 228, 230, 231, 248, 258, 275, 286, 287, 288, 290, 292, 293, 294, 295, 310, 311, 315, 322, 329, 330, 333, 335, 339, 525, 529, 574, 585, 590, 591, 593, 597, 602, 606, 612, 614, 615, 618], "disk": [6, 8, 41], "memori": [6, 8, 68, 233, 234, 261, 266, 274, 295, 339, 574, 578, 590, 592, 611, 614, 615, 618, 624], "numpi": [6, 8, 11, 38, 41, 61, 62, 64, 96, 97, 99, 104, 140, 190, 226, 232, 238, 242, 247, 249, 259, 280, 284, 582, 623], "arrai": [6, 8, 11, 37, 38, 41, 97, 104, 133, 140, 184, 187, 190, 226, 238, 242, 247, 249, 259, 280, 284, 292, 294, 314, 339, 623], "node0_nam": [6, 8, 41], "weight0_nam": [6, 8, 11, 41], "bias0_nam": [6, 8, 11, 41], "node1_nam": [6, 8, 41], "weight1_nam": [6, 8, 41], "bias1_nam": [6, 8, 41], "0": [6, 8, 13, 14, 37, 38, 39, 40, 47, 84, 96, 99, 104, 133, 140, 142, 145, 149, 151, 153, 158, 163, 165, 170, 173, 176, 177, 180, 184, 186, 187, 190, 192, 193, 194, 201, 203, 208, 211, 214, 215, 218, 223, 226, 228, 231, 233, 234, 242, 247, 249, 250, 254, 256, 259, 261, 266, 269, 274, 276, 283, 284, 294, 295, 299, 309, 315, 324, 326, 479, 487, 525, 572, 575, 577, 579, 581, 583, 584, 587, 588, 589, 590, 595, 597, 602, 606, 613, 614, 615, 617, 618, 620, 621, 622, 623, 624, 626], "output0_nam": [6, 8, 41], "output1_nam": [6, 8, 41], "set_tensor": [6, 8, 11, 41, 529], "tensor_dict": [6, 8, 11, 41, 529], "set": [6, 8, 11, 13, 15, 38, 39, 40, 51, 61, 62, 90, 96, 97, 99, 104, 109, 133, 140, 147, 148, 150, 153, 155, 158, 161, 162, 163, 165, 173, 175, 178, 184, 190, 191, 196, 197, 201, 203, 211, 213, 216, 226, 227, 231, 233, 234, 238, 243, 244, 245, 247, 254, 256, 257, 261, 266, 270, 275, 276, 280, 285, 293, 295, 299, 306, 310, 311, 322, 324, 325, 326, 333, 339, 341, 381, 382, 383, 386, 403, 449, 453, 461, 482, 486, 492, 493, 495, 496, 497, 502, 506, 507, 511, 523, 526, 572, 573, 575, 579, 583, 585, 586, 587, 589, 590, 592, 594, 596, 610, 614, 617, 618, 621, 624, 626], "back": [6, 8, 11, 41, 116, 147, 190, 196, 226, 247, 301, 322, 609], "usual": [6, 8, 11, 173, 211, 234, 261, 266, 577, 612, 618], "note": [6, 8, 11, 48, 234, 238, 261, 266, 272, 280, 299, 307, 320, 375, 386, 390, 526, 572, 579, 583, 587, 594, 597, 602, 606, 609, 614, 618, 622, 624, 626], "float": [6, 8, 11, 14, 38, 39, 41, 104, 133, 142, 173, 184, 186, 187, 211, 223, 234, 235, 236, 238, 239, 240, 247, 249, 250, 261, 266, 269, 271, 272, 273, 277, 278, 280, 281, 282, 293, 294, 295, 299, 305, 306, 307, 308, 309, 314, 342, 360, 369, 378, 379, 394, 400, 455, 463, 479, 480, 484, 486, 492, 494, 495, 502, 504, 505, 513, 549, 575, 589, 617, 618, 623], "ha": [6, 8, 11, 38, 56, 57, 61, 62, 64, 68, 73, 74, 86, 96, 97, 98, 104, 116, 133, 153, 191, 234, 235, 249, 269, 271, 276, 277, 299, 306, 524, 526, 529, 549, 572, 574, 581, 586, 590, 595, 609, 615, 617, 618, 619, 621, 624], "respons": [6, 8, 11, 482, 486, 493, 506, 510, 511, 515, 517, 519, 520, 618], "int8": [6, 7, 8, 11, 17, 18, 38, 39, 40, 41, 42, 43, 81, 105, 117, 118, 119, 125, 127, 128, 129, 130, 135, 140, 142, 152, 153, 158, 186, 223, 228, 229, 230, 231, 293, 294, 315, 324, 326, 328, 394, 525, 529, 572, 573, 575, 578, 583, 594, 597, 599, 600, 603, 609, 617, 618, 619, 620, 621, 622, 623, 626], "int32": [6, 8, 11, 104, 228, 231, 575], "format": [6, 8, 11, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 47, 61, 62, 97, 140, 173, 174, 175, 179, 184, 211, 212, 213, 217, 222, 228, 231, 234, 238, 244, 247, 258, 280, 294, 319, 324, 326, 445, 484, 502, 575, 579, 581, 589, 590, 591, 592, 618], "someth": [6, 8, 11, 161, 162, 175, 213, 311], "like": [6, 8, 11, 68, 73, 90, 92, 104, 133, 140, 161, 162, 163, 175, 179, 184, 201, 213, 217, 222, 233, 234, 242, 248, 271, 274, 275, 283, 284, 293, 299, 311, 329, 524, 525, 526, 529, 572, 577, 578, 586, 597, 612, 614, 618, 620, 624], "quantize_input": [6, 8, 37, 41], "abl": [6, 8, 41, 75, 161, 162, 189, 225, 285, 311, 600, 609, 614, 618], "take": [6, 8, 41, 96, 153, 161, 162, 166, 184, 187, 190, 194, 195, 204, 226, 269, 276, 283, 284, 285, 299, 311, 314, 523, 525, 526, 572, 574, 577, 583, 609, 614, 618, 619, 623, 624, 626], "input": [6, 8, 13, 14, 15, 37, 38, 39, 41, 47, 54, 56, 57, 58, 61, 62, 64, 65, 66, 68, 73, 74, 76, 77, 79, 80, 96, 97, 99, 103, 104, 109, 110, 116, 126, 133, 134, 136, 140, 141, 142, 145, 146, 147, 151, 153, 158, 161, 162, 173, 174, 175, 177, 179, 184, 186, 187, 189, 190, 192, 194, 195, 200, 211, 212, 213, 215, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 238, 243, 250, 254, 256, 261, 266, 275, 276, 280, 283, 284, 285, 289, 291, 292, 293, 294, 299, 306, 311, 329, 339, 341, 352, 375, 380, 381, 383, 386, 387, 388, 389, 390, 423, 426, 433, 434, 435, 437, 449, 453, 458, 461, 467, 492, 495, 501, 526, 529, 572, 573, 574, 575, 577, 578, 579, 581, 583, 585, 589, 591, 592, 597, 614, 617, 618, 622, 623, 626], "scale": [6, 8, 14, 15, 37, 38, 39, 41, 56, 61, 94, 135, 145, 151, 152, 184, 186, 187, 190, 223, 226, 231, 292, 581, 618, 621, 623], "type": [6, 8, 11, 13, 14, 15, 38, 39, 40, 41, 51, 54, 55, 56, 57, 62, 64, 68, 73, 79, 85, 86, 87, 88, 90, 96, 97, 99, 104, 107, 109, 110, 116, 126, 133, 140, 141, 142, 145, 147, 148, 150, 155, 158, 162, 163, 171, 173, 175, 179, 182, 183, 184, 187, 190, 192, 197, 201, 209, 211, 213, 217, 220, 221, 222, 224, 226, 228, 231, 232, 234, 235, 236, 238, 241, 242, 244, 247, 249, 256, 259, 262, 263, 264, 269, 271, 273, 275, 277, 278, 280, 283, 284, 286, 287, 292, 293, 294, 295, 299, 305, 306, 308, 309, 310, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 335, 338, 352, 357, 371, 372, 381, 382, 384, 386, 424, 479, 482, 484, 486, 489, 490, 524, 529, 549, 572, 575, 579, 583, 586, 590, 610, 614, 618, 621, 623, 624, 626], "path": [6, 8, 14, 39, 41, 99, 104, 133, 134, 140, 154, 173, 174, 175, 179, 184, 187, 190, 211, 212, 213, 226, 227, 228, 230, 231, 233, 234, 244, 245, 246, 247, 250, 257, 258, 261, 266, 270, 272, 274, 275, 285, 292, 293, 294, 307, 310, 311, 324, 326, 329, 335, 339, 340, 345, 359, 362, 369, 370, 373, 380, 381, 386, 388, 389, 403, 409, 420, 423, 426, 428, 429, 431, 433, 434, 435, 436, 440, 447, 452, 456, 459, 462, 463, 469, 479, 487, 492, 494, 495, 504, 519, 525, 526, 529, 572, 574, 575, 579, 585, 589, 590, 591, 595, 598, 609, 612, 623, 626], "where": [6, 8, 15, 38, 61, 116, 238, 242, 254, 256, 258, 260, 269, 280, 283, 284, 299, 577, 602, 606, 610, 614, 622], "convert": [6, 8, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 60, 68, 75, 80, 91, 93, 94, 96, 97, 98, 99, 125, 130, 134, 141, 147, 173, 184, 186, 187, 189, 190, 211, 223, 225, 226, 228, 230, 234, 238, 242, 244, 258, 260, 270, 280, 284, 286, 287, 312, 326, 329, 361, 368, 377, 472, 484, 525, 532, 590, 594, 618, 619, 623], "sourc": [6, 8, 15, 41, 194, 234, 236, 244, 256, 276, 278, 332, 407, 521, 525, 528, 588, 602, 604, 606, 607, 609, 616], "destinatin": [6, 8], "anoth": [6, 8, 41, 96, 103, 104, 184, 187, 190, 226, 234, 235, 244, 277, 329, 339, 549, 577, 590, 602, 606, 623, 624], "destin": [6, 8, 15, 41, 228, 229, 234, 244], "mxnet_util": 7, "util": [7, 12, 16, 96, 99, 104, 105, 133, 134, 141, 142, 143, 144, 146, 199, 228, 234, 236, 270, 276, 278, 297, 318, 320, 344, 345, 346, 348, 350, 351, 354, 359, 370, 373, 376, 380, 381, 386, 388, 389, 391, 399, 400, 405, 407, 408, 411, 415, 421, 422, 430, 432, 456, 462, 466, 471, 475, 508, 530, 579, 592, 618, 624], "ox_util": 7, "oper": [7, 16, 38, 96, 98, 104, 140, 184, 186, 187, 223, 256, 269, 299, 315, 506, 510, 525, 572, 573, 574, 581, 609, 618, 623, 624], "argmax": [7, 16, 28], "attent": [7, 16, 28, 173, 211, 254, 256, 523, 577], "binary_op": [7, 16, 28], "concat": [7, 16, 28, 139, 479], "direct_q8": [7, 16, 28], "embed_layernorm": [7, 16, 28], "gather": [7, 13, 15, 16, 28, 269, 299, 482], "gavgpool": [7, 16, 28], "gemm": [7, 16, 28, 614], "lstm": [7, 16, 28], "matmul": [7, 14, 15, 16, 28, 40, 46, 53, 59, 67, 73, 79, 88, 103, 104, 122, 131, 231, 269, 299, 581, 583], "maxpool": [7, 16, 28, 123, 132, 583], "pad": [7, 16, 28, 65, 66, 173, 184, 187, 190, 211, 226, 254, 256, 575, 623], "pool": [7, 16, 28, 132], "resiz": [7, 16, 28, 173, 174, 179, 184, 186, 187, 190, 211, 212, 223, 226, 574, 575, 623], "split": [7, 16, 28, 38, 73, 76, 133, 184, 187, 189, 190, 225, 226, 247, 525, 623], "tf_util": 7, "graph_rewrit": [7, 105], "bf16": [7, 40, 41, 42, 43, 51, 75, 81, 85, 87, 105, 141, 158, 294, 313, 315, 324, 326, 339, 529, 532, 583, 590, 594, 599, 603, 609, 619, 624], "onnx": [7, 14, 15, 28, 37, 38, 81, 105, 134, 143, 151, 169, 207, 228, 229, 230, 231, 232, 286, 287, 292, 293, 294, 329, 337, 342, 445, 528, 529, 530, 532, 574, 580, 581, 583, 584, 586, 590, 591, 594, 599, 600, 616, 617, 624], "qdq": [7, 17, 19, 20, 21, 22, 24, 26, 27, 30, 32, 34, 36, 37, 42, 81, 105, 106, 107, 134, 147, 158, 228, 229, 230, 231, 292, 294, 529, 581, 586, 599, 600, 618], "graph_bas": [7, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 101, 102, 103, 105], "quantize_graph": [7, 105], "qat": [7, 39, 105, 106, 146, 158, 231, 234, 244, 276, 293, 578, 579, 581, 586, 618], "quantize_graph_bas": [7, 105, 106, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132], "quantize_graph_bn": [7, 105, 106], "quantize_graph_concatv2": [7, 105, 106], "quantize_graph_conv": [7, 105, 106], "quantize_graph_for_intel_cpu": [7, 105, 106], "quantize_graph_matmul": [7, 105, 106], "quantize_graph_pool": [7, 105, 106], "transform_graph": [7, 105], "bias_correct": [7, 105, 137], "graph_transform_bas": [7, 105, 135, 137, 138, 139], "insert_log": [7, 105, 137], "rerange_quantized_concat": [7, 105, 137], "graph_convert": [7, 105], "graph_converter_without_calib": [7, 105], "graph_util": [7, 105], "quantize_graph_common": [7, 105], "tf2onnx_convert": [7, 105], "torch_util": [7, 194, 234, 276], "bf16_convert": [7, 42, 43, 45, 81, 105, 143], "hawq_metr": [7, 143], "symbolic_trac": [7, 143], "tensorflow": [7, 45, 47, 69, 70, 71, 75, 81, 89, 95, 96, 97, 98, 99, 100, 104, 105, 106, 108, 111, 116, 124, 134, 137, 140, 172, 173, 174, 175, 178, 179, 180, 182, 183, 184, 187, 190, 192, 197, 210, 211, 212, 213, 216, 217, 218, 220, 221, 222, 224, 226, 228, 230, 231, 232, 233, 234, 236, 238, 241, 242, 243, 244, 274, 278, 280, 283, 284, 285, 293, 311, 320, 339, 401, 402, 414, 415, 422, 471, 472, 473, 475, 526, 528, 529, 572, 574, 577, 578, 580, 581, 583, 584, 586, 587, 590, 591, 599, 600, 614, 616, 617, 621, 624, 626], "kerasadaptor": 8, "specifi": [8, 11, 14, 15, 39, 40, 41, 73, 96, 104, 133, 161, 162, 190, 191, 226, 233, 234, 238, 241, 242, 245, 248, 250, 257, 258, 261, 266, 274, 275, 280, 283, 284, 285, 294, 300, 311, 324, 326, 338, 339, 356, 359, 362, 369, 370, 371, 373, 374, 375, 380, 381, 383, 384, 386, 388, 389, 393, 394, 395, 408, 440, 444, 445, 446, 465, 470, 486, 490, 494, 507, 511, 572, 579, 583, 589, 597, 611, 617, 618, 623, 624, 626], "function": [8, 11, 14, 37, 41, 56, 96, 104, 133, 145, 161, 162, 174, 200, 212, 233, 234, 245, 256, 257, 258, 261, 266, 272, 275, 292, 307, 330, 525, 526, 529, 572, 573, 574, 577, 578, 585, 586, 587, 589, 590, 600, 610, 614, 615, 618, 621, 622, 624], "fp32_baselin": [8, 11, 14, 39, 41, 332, 529], "boolen": [8, 14, 39, 41], "onli": [8, 11, 14, 15, 38, 39, 41, 42, 43, 47, 56, 57, 61, 62, 64, 68, 80, 96, 103, 109, 128, 132, 135, 145, 151, 152, 173, 191, 193, 194, 197, 211, 234, 244, 256, 269, 271, 292, 299, 300, 306, 316, 320, 321, 322, 494, 504, 506, 507, 529, 573, 574, 579, 581, 583, 590, 597, 610, 614, 615, 617, 622, 624, 626], "compare_label": [8, 11, 14, 39, 41, 242, 284, 589], "pipelin": [8, 11, 14, 39, 41, 227, 234, 245, 246, 257, 272, 275, 578, 612], "get_optype_wise_": [8, 41], "quantizable_op_detail": 8, "get": [8, 13, 14, 15, 38, 39, 40, 41, 61, 62, 64, 73, 96, 97, 98, 99, 104, 109, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 129, 131, 133, 136, 140, 142, 144, 147, 148, 150, 155, 158, 161, 163, 166, 184, 187, 190, 191, 197, 199, 200, 201, 204, 222, 224, 226, 231, 232, 233, 234, 243, 250, 254, 260, 261, 266, 269, 271, 273, 274, 275, 276, 292, 293, 294, 295, 296, 299, 306, 308, 309, 314, 319, 324, 326, 328, 332, 334, 336, 339, 340, 345, 352, 353, 354, 356, 359, 362, 363, 364, 366, 369, 370, 371, 372, 373, 374, 375, 380, 381, 383, 385, 386, 387, 388, 389, 390, 393, 394, 395, 398, 402, 403, 408, 420, 423, 424, 426, 428, 429, 433, 434, 435, 437, 440, 442, 444, 445, 446, 447, 452, 456, 459, 462, 463, 465, 469, 470, 472, 474, 481, 482, 486, 490, 492, 494, 495, 497, 501, 504, 506, 507, 510, 511, 515, 517, 518, 519, 520, 572, 586, 587, 595, 624, 628], "wise": [8, 15, 41, 135, 152, 269, 299, 313, 314, 315, 319, 324, 325, 383, 386, 494, 572, 586, 614, 615, 622, 624, 626], "union": [8, 41, 242, 284, 329, 484, 589], "each": [8, 14, 15, 38, 39, 40, 41, 80, 104, 109, 136, 142, 171, 175, 178, 184, 186, 187, 190, 209, 213, 216, 223, 226, 236, 238, 239, 240, 249, 250, 256, 271, 278, 280, 281, 282, 292, 293, 294, 295, 299, 306, 313, 319, 524, 529, 572, 575, 577, 578, 583, 594, 600, 603, 609, 611, 614, 615, 621, 622, 623, 624], "kei": [8, 38, 39, 41, 104, 109, 133, 136, 140, 142, 155, 234, 238, 254, 256, 259, 261, 266, 270, 272, 280, 292, 293, 299, 307, 310, 314, 322, 330, 332, 333, 339, 486, 502, 528, 572, 581, 622], "while": [8, 41, 97, 136, 256, 271, 306, 314, 529, 572, 575, 580, 584, 586, 590, 592, 597, 609, 617, 618], "detail": [8, 41, 145, 151, 184, 187, 190, 226, 254, 359, 362, 369, 370, 373, 375, 376, 378, 380, 381, 383, 386, 387, 388, 389, 390, 394, 399, 462, 467, 481, 494, 523, 524, 528, 583, 584, 585, 589, 590, 592, 600, 609, 614, 620, 621, 622, 624, 627], "kerasqueri": 8, "local_config_fil": [8, 39, 41], "querybackendcap": [8, 39, 40, 41, 529], "defin": [8, 39, 40, 41, 80, 86, 96, 104, 133, 142, 153, 161, 162, 192, 234, 245, 246, 249, 257, 258, 259, 260, 261, 266, 269, 270, 271, 272, 273, 276, 285, 293, 299, 306, 307, 308, 309, 311, 314, 329, 338, 417, 418, 419, 506, 523, 526, 529, 572, 574, 575, 577, 578, 583, 586, 589, 610, 612, 614, 615, 618, 621, 622, 624, 626], "interfac": [8, 39, 40, 80, 104, 107, 126, 136, 154, 158, 164, 167, 184, 233, 234, 249, 250, 261, 266, 274, 275, 276, 295, 322, 332, 334, 340, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 456, 462, 469, 481, 586, 600, 613, 618, 620], "adapt": [8, 39, 40, 523, 528, 575, 600, 616], "should": [8, 15, 37, 39, 40, 41, 48, 68, 73, 109, 110, 136, 153, 161, 162, 171, 173, 175, 179, 184, 187, 189, 190, 194, 195, 209, 211, 213, 217, 222, 225, 226, 231, 236, 241, 242, 271, 275, 276, 278, 283, 284, 285, 299, 306, 311, 322, 335, 339, 403, 484, 525, 526, 529, 572, 575, 579, 589, 590, 595, 604, 607, 609, 611, 615, 618, 623, 624, 626], "implement": [8, 39, 40, 41, 80, 104, 126, 135, 136, 139, 161, 162, 168, 171, 172, 173, 175, 179, 184, 206, 209, 210, 211, 213, 217, 222, 235, 241, 242, 264, 269, 273, 277, 283, 284, 285, 295, 299, 306, 307, 308, 309, 311, 317, 322, 549, 574, 575, 600, 610, 615, 620, 622, 624, 626], "inherit": [8, 39, 40, 96, 170, 190, 192, 200, 208, 226, 234, 271, 273, 306, 309, 526, 529, 575], "specif": [8, 11, 14, 39, 40, 96, 98, 109, 110, 153, 164, 167, 173, 174, 175, 176, 179, 180, 182, 183, 184, 191, 197, 211, 212, 213, 214, 218, 220, 221, 222, 234, 235, 238, 244, 245, 256, 257, 258, 276, 277, 280, 294, 300, 301, 303, 304, 305, 310, 335, 370, 381, 382, 383, 386, 394, 409, 523, 526, 529, 572, 577, 583, 585, 589, 590, 591, 592, 596, 597, 599, 603, 609, 611, 614, 617, 624, 626], "backend": [8, 15, 39, 40, 41, 151, 158, 159, 160, 164, 165, 169, 173, 174, 176, 177, 178, 179, 180, 184, 187, 190, 196, 197, 202, 203, 205, 207, 211, 212, 214, 215, 216, 217, 218, 222, 224, 226, 243, 276, 285, 286, 287, 289, 292, 320, 525, 579, 585, 586, 590, 598, 617, 618, 623, 626], "own": [8, 39, 40, 68, 171, 190, 209, 226, 295, 526, 572, 574, 575, 586, 589, 611, 621], "get_vers": [8, 40, 41], "current": [8, 13, 37, 38, 40, 41, 56, 61, 62, 64, 68, 96, 98, 104, 109, 145, 234, 244, 250, 261, 266, 269, 271, 272, 273, 292, 296, 299, 300, 301, 303, 304, 305, 306, 307, 309, 314, 315, 316, 319, 320, 322, 525, 526, 529, 572, 579, 583, 587, 589, 590, 592, 596, 609, 611, 614, 615, 618, 624], "version": [8, 13, 37, 40, 41, 47, 98, 147, 161, 228, 230, 231, 256, 276, 294, 314, 335, 442, 477, 482, 494, 523, 525, 529, 572, 583, 587, 588, 602, 604, 606, 607, 613, 616, 624], "infom": [8, 41, 193, 194, 231], "get_precis": [8, 40, 356], "support": [8, 13, 38, 39, 40, 41, 68, 75, 91, 98, 145, 151, 158, 161, 162, 163, 172, 173, 175, 179, 182, 183, 184, 186, 187, 190, 191, 192, 193, 194, 197, 200, 201, 210, 211, 213, 217, 220, 221, 222, 223, 224, 226, 234, 241, 242, 244, 249, 250, 256, 259, 261, 262, 263, 264, 266, 269, 271, 275, 276, 283, 284, 285, 289, 295, 299, 306, 311, 320, 324, 326, 332, 334, 356, 423, 426, 428, 429, 431, 433, 434, 435, 436, 442, 476, 484, 494, 521, 528, 572, 592, 597, 600, 603, 609, 615, 616, 619, 621, 624], "get_op_typ": [8, 39, 40, 41], "A": [8, 14, 38, 39, 41, 48, 50, 61, 62, 64, 68, 69, 97, 104, 107, 109, 110, 116, 133, 140, 145, 147, 148, 150, 175, 179, 184, 189, 190, 193, 194, 195, 196, 213, 217, 222, 225, 226, 227, 234, 235, 238, 239, 240, 242, 245, 257, 258, 259, 260, 261, 262, 263, 264, 266, 269, 270, 271, 272, 273, 277, 280, 281, 282, 283, 284, 285, 287, 289, 293, 296, 299, 306, 307, 308, 309, 310, 312, 313, 314, 316, 317, 319, 320, 321, 324, 327, 575, 580, 583, 589, 591, 602, 603, 606, 609, 614, 616, 623, 624, 626], "compos": [8, 39, 41, 133, 184, 187, 190, 226, 332, 623], "dictionari": [8, 15, 39, 41, 61, 62, 64, 116, 141, 142, 147, 155, 158, 189, 225, 238, 245, 247, 250, 256, 257, 258, 260, 276, 280, 292, 361, 363, 364, 366, 368, 371, 372, 377, 381, 382, 384], "which": [8, 13, 39, 41, 49, 61, 62, 74, 77, 103, 104, 109, 133, 142, 145, 153, 161, 173, 174, 175, 179, 184, 186, 187, 191, 211, 212, 213, 223, 234, 235, 238, 240, 248, 250, 258, 259, 261, 262, 263, 264, 269, 270, 271, 272, 273, 276, 277, 280, 282, 289, 292, 295, 296, 299, 300, 301, 303, 304, 305, 306, 309, 312, 314, 322, 335, 339, 492, 523, 525, 526, 529, 549, 572, 574, 575, 577, 579, 583, 586, 589, 590, 591, 593, 597, 600, 603, 609, 610, 612, 614, 615, 617, 618, 619, 620, 622, 623, 624, 626], "get_quantization_cap": [8, 39, 40, 41], "describ": [8, 39, 41, 61, 62, 250, 529, 572, 583, 622], "get_op_types_by_precis": [8, 39, 41], "per": [8, 15, 37, 38, 39, 40, 41, 145, 151, 163, 172, 191, 201, 210, 238, 250, 280, 299, 334, 339, 359, 529, 572, 613, 619, 627], "mxnetadaptor": 11, "nc_model": [11, 13, 261, 266], "config": [11, 13, 14, 15, 39, 40, 41, 107, 109, 110, 112, 116, 147, 153, 161, 162, 173, 191, 200, 211, 233, 234, 247, 255, 258, 261, 266, 269, 270, 271, 272, 273, 276, 285, 296, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 326, 327, 329, 332, 333, 338, 339, 340, 341, 344, 345, 346, 348, 350, 351, 354, 380, 386, 388, 389, 393, 394, 438, 440, 447, 449, 452, 453, 456, 458, 459, 461, 462, 469, 472, 475, 483, 494, 497, 498, 499, 500, 502, 504, 505, 507, 515, 517, 520, 526, 528, 540, 572, 573, 577, 578, 579, 581, 584, 586, 590, 591, 612, 614, 617, 618, 619, 621, 622, 624], "unimpl": [11, 14], "yet": [11, 14, 41, 299, 526, 572, 604, 607, 610], "mxnetmodel": [11, 290], "data_x": [11, 13], "loader": [11, 13, 161, 162, 275, 285, 311, 335], "acc": [11, 14, 242, 250, 284, 295, 526, 622, 627], "level": [11, 158, 276, 315, 322, 333, 336, 485, 507, 523, 624], "modelwis": 11, "opwis": 11, "save_path": [11, 14, 41, 134, 140, 228, 230, 231, 286, 287, 292, 293, 294, 329, 529, 591], "quantization_cfg": [11, 14, 41, 529], "includ": [11, 42, 43, 173, 175, 179, 182, 183, 184, 187, 190, 192, 211, 213, 217, 220, 221, 222, 224, 226, 233, 234, 238, 243, 256, 269, 273, 274, 280, 296, 299, 308, 309, 316, 322, 324, 327, 523, 524, 529, 572, 575, 587, 588, 589, 590, 592, 595, 598, 603, 614, 615, 618, 619, 622, 624], "recover_tuned_model": [11, 41], "q_config": [11, 14, 15, 37, 40, 41, 228, 231, 288, 292, 293, 529], "recov": [11, 14, 41, 145, 339, 529, 578], "mxnet": [12, 13, 168, 172, 175, 178, 179, 182, 183, 184, 187, 190, 206, 210, 213, 216, 217, 220, 221, 222, 224, 226, 233, 234, 241, 242, 274, 283, 284, 285, 290, 311, 528, 529, 574, 580, 583, 586, 587, 590, 591, 617, 624, 626], "init": [12, 16, 150, 192, 297, 322, 575, 589], "optyp": [13, 229], "enum": [13, 38, 339, 444, 476], "isiter": 13, "obj": [13, 99, 153, 172, 210, 227, 233, 234, 244, 245, 246, 257, 258, 261, 266, 270, 274, 275, 276, 285, 295, 310, 311, 332, 339], "check": [13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 56, 57, 61, 62, 73, 96, 97, 98, 99, 104, 109, 116, 140, 147, 158, 162, 175, 213, 229, 234, 244, 270, 275, 292, 295, 299, 306, 310, 314, 315, 322, 339, 381, 386, 423, 426, 428, 429, 431, 433, 434, 435, 436, 442, 445, 463, 479, 480, 482, 487, 494, 496, 524, 528, 572, 579, 587, 593, 595, 597, 604, 607, 608, 620], "whether": [13, 14, 15, 39, 41, 96, 97, 99, 109, 110, 140, 163, 171, 173, 184, 186, 187, 190, 201, 209, 211, 223, 226, 227, 234, 236, 238, 242, 256, 261, 266, 269, 271, 278, 280, 284, 295, 299, 315, 322, 332, 335, 339, 445, 529, 575, 589, 623], "true": [13, 14, 15, 37, 39, 41, 56, 57, 73, 79, 96, 97, 104, 107, 109, 138, 140, 142, 158, 162, 163, 171, 173, 175, 176, 184, 187, 189, 190, 191, 201, 209, 211, 213, 214, 225, 226, 228, 231, 236, 238, 242, 247, 254, 256, 264, 269, 278, 280, 284, 294, 295, 299, 300, 322, 324, 325, 332, 440, 479, 482, 487, 488, 494, 575, 579, 583, 589, 592, 595, 596, 617, 618, 622, 623, 624, 626], "els": [13, 56, 57, 140, 171, 209, 295, 315, 322, 479, 494, 597, 622], "ensure_list": 13, "x": [13, 48, 61, 62, 64, 68, 141, 172, 184, 187, 190, 210, 226, 250, 254, 256, 314, 579, 590, 591, 614, 618, 622, 623], "ensur": [13, 15, 184, 187, 190, 226, 272, 307, 314, 358, 391, 423, 426, 428, 435, 477, 572, 579, 581, 618, 623], "check_mx_vers": 13, "mx": 13, "__version__": 13, "combine_cap": 13, "new": [13, 50, 96, 97, 101, 104, 126, 140, 163, 175, 184, 187, 190, 191, 201, 213, 222, 224, 226, 256, 269, 270, 273, 275, 295, 299, 309, 322, 325, 385, 386, 390, 506, 524, 579, 590, 603, 609, 610, 616, 618, 620, 621, 623, 626], "combin": [13, 40, 147, 158, 161, 162, 184, 186, 187, 200, 223, 234, 275, 276, 285, 311, 339, 525, 529, 586, 612, 616, 619, 623, 624], "make_nc_model": 13, "target": [13, 38, 39, 83, 84, 96, 104, 133, 161, 192, 247, 270, 273, 295, 299, 303, 305, 309, 310, 312, 314, 407, 408, 575, 579, 614, 615, 622, 623, 624, 626], "sym_model": 13, "ctx": [13, 134], "input_desc": 13, "symbol": [13, 141, 146, 147, 235, 277, 285, 311, 525, 532, 591], "neural": [13, 39, 142, 153, 158, 184, 185, 186, 187, 190, 191, 194, 197, 200, 223, 224, 226, 228, 234, 241, 242, 244, 261, 266, 269, 272, 274, 275, 276, 283, 284, 285, 287, 289, 299, 307, 311, 317, 318, 324, 335, 398, 402, 426, 435, 474, 481, 494, 521, 524, 529, 558, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 590, 591, 593, 594, 597, 599, 600, 602, 604, 606, 607, 608, 611, 612, 616, 618, 620, 622, 623, 624, 626], "compressor": [13, 39, 153, 158, 184, 185, 186, 187, 190, 191, 194, 197, 200, 223, 224, 226, 228, 234, 241, 242, 244, 269, 272, 274, 275, 276, 283, 284, 285, 287, 289, 299, 307, 311, 318, 324, 335, 398, 402, 426, 435, 474, 481, 494, 521, 524, 526, 529, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 597, 599, 600, 602, 604, 606, 607, 608, 611, 612, 614, 616, 618, 620, 622, 623, 624, 626], "tupl": [13, 39, 41, 99, 104, 116, 147, 161, 162, 184, 186, 187, 190, 192, 223, 226, 228, 231, 238, 247, 250, 256, 280, 285, 295, 299, 311, 319, 324, 325, 326, 409, 440, 494, 513, 575, 589, 623], "symnet": 13, "arg": [13, 39, 47, 99, 173, 174, 175, 179, 184, 211, 212, 213, 233, 234, 244, 256, 266, 269, 274, 275, 286, 287, 288, 291, 294, 307, 314, 329, 333, 335, 336, 344, 346, 348, 349, 350, 351, 361, 363, 364, 366, 368, 371, 372, 377, 479, 487, 507, 574, 575, 579, 598, 618, 622, 623], "aux": 13, "descript": [13, 104, 126, 133, 231, 232, 238, 258, 280, 294, 524, 525], "ncmodel": 13, "suppli": [13, 254], "get_framework_nam": [13, 423, 426, 428, 435], "prepare_model_data": 13, "prepar": [13, 39, 147, 200, 227, 234, 261, 266, 272, 274, 381, 386, 474, 525, 528, 575, 579, 584, 618], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "exampl": [13, 109, 142, 147, 153, 158, 173, 174, 175, 179, 184, 186, 189, 190, 211, 212, 213, 223, 225, 226, 238, 239, 240, 242, 248, 272, 276, 280, 281, 282, 284, 285, 294, 295, 307, 311, 329, 367, 385, 391, 415, 439, 440, 441, 442, 487, 494, 523, 524, 528, 572, 585, 586, 592, 595, 596, 597, 600, 619, 620, 623, 624, 628], "prepare_dataload": 13, "io": [13, 528], "ndarray_to_devic": 13, "ndarrai": [13, 61, 62, 64, 96, 97, 104, 190, 226, 247, 249, 294, 314, 330, 333, 582, 623], "devic": [13, 73, 83, 84, 85, 86, 87, 88, 91, 101, 104, 125, 130, 133, 139, 142, 158, 192, 250, 276, 577, 590, 592, 595, 600, 609, 614, 617], "is_model_quant": 13, "query_quantizable_nod": 13, "node": [13, 15, 21, 23, 32, 36, 37, 38, 41, 42, 43, 44, 47, 48, 49, 50, 54, 56, 57, 58, 61, 62, 64, 68, 71, 73, 74, 76, 77, 78, 92, 96, 97, 99, 103, 104, 126, 133, 134, 136, 140, 228, 229, 231, 286, 287, 292, 293, 294, 322, 392, 405, 406, 407, 408, 409, 410, 415, 423, 426, 433, 434, 435, 472, 473, 475, 529, 572, 579, 622], "map": [13, 38, 41, 96, 99, 126, 136, 142, 190, 226, 228, 229, 231, 233, 234, 237, 238, 239, 240, 242, 247, 261, 266, 269, 271, 274, 279, 280, 281, 282, 283, 284, 299, 308, 444, 575, 579, 589, 602, 606, 614, 615, 618], "quantize_sym_model": 13, "qconfig": [13, 622], "accord": [13, 41, 96, 116, 153, 158, 161, 173, 174, 175, 179, 184, 187, 190, 211, 212, 213, 222, 224, 226, 234, 256, 273, 274, 294, 299, 300, 303, 304, 305, 309, 312, 313, 314, 315, 317, 319, 322, 324, 326, 332, 493, 526, 529, 575, 579, 614, 615, 619, 623, 624], "run_forward": 13, "b_filter": 13, "collector": [13, 142, 330, 333], "pre_batch": 13, "post_batch": 13, "forward": [13, 141, 192, 254, 256, 294, 528, 617, 618, 622], "propag": [13, 94, 116, 301], "filter": [13, 173, 174, 175, 176, 177, 178, 179, 180, 184, 211, 212, 213, 214, 215, 216, 218, 222, 234, 276, 339, 362, 403, 426, 496, 574, 575, 586, 614, 615, 622], "infer": [13, 15, 61, 62, 96, 99, 126, 133, 233, 234, 274, 293, 295, 311, 528, 529, 577, 578, 590, 609, 611, 614, 615, 616, 618, 622, 624], "collect": [13, 38, 41, 184, 187, 188, 190, 193, 194, 195, 196, 198, 222, 224, 226, 235, 240, 241, 242, 277, 282, 283, 284, 324, 325, 326, 328, 330, 333, 339, 340, 445, 469, 480, 482, 494, 495, 581, 618, 622, 624], "inform": [13, 15, 38, 41, 97, 107, 142, 161, 162, 193, 194, 195, 196, 238, 269, 271, 272, 273, 275, 280, 283, 284, 292, 296, 299, 306, 307, 308, 309, 310, 322, 356, 394, 423, 481, 482, 487, 488, 523, 524, 527, 528, 529, 530, 532, 538, 539, 540, 547, 551, 558, 566, 567, 568, 569, 571, 577, 581, 583, 591, 604, 607, 610, 614, 615, 619, 620, 622, 626, 627, 628], "dure": [13, 41, 56, 61, 62, 96, 116, 247, 250, 256, 269, 273, 275, 295, 299, 309, 488, 590, 591, 611, 612, 614, 615, 618, 622, 626], "prior": [13, 82, 314, 624], "after": [13, 15, 38, 39, 51, 72, 147, 173, 184, 186, 187, 190, 193, 194, 200, 211, 223, 226, 227, 228, 231, 234, 247, 269, 271, 272, 273, 296, 299, 306, 307, 308, 309, 315, 329, 480, 526, 572, 574, 575, 577, 578, 581, 586, 589, 602, 603, 606, 610, 611, 612, 614, 615, 618, 619, 621, 622, 623, 624], "count": [13, 258, 299, 315, 526, 575], "make_symbol_block": 13, "gluon": [13, 285, 311, 591], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "quantizable_nod": 13, "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 135, 152, 153, 163, 165, 166, 170, 171, 184, 193, 194, 201, 203, 204, 208, 209, 227, 234, 261, 266, 274, 276, 314, 322, 334, 482, 528, 577, 587, 604, 607, 616, 618, 620, 624, 627], "algorithm": [13, 147, 154, 189, 225, 235, 242, 245, 249, 257, 258, 260, 276, 277, 284, 314, 324, 326, 332, 334, 526, 529, 549, 577, 578, 583, 586, 598, 603, 614, 615, 618, 622, 626], "kl": [13, 330, 333, 334, 583, 624, 626], "minmax": [13, 583, 626], "calib_model": 13, "qsym_model": 13, "calib_data": 13, "calibdata": 13, "threshold": [13, 15, 149, 238, 269, 280, 299, 330, 333, 334, 589], "amp_convert": 13, "amp_cfg": 13, "amp": [13, 592, 599, 613], "wrap": [13, 99, 110, 116, 192, 238, 280, 352, 525, 579, 604, 607], "dataiterload": 13, "data_it": 13, "collectorbas": 13, "collect_gluon": 13, "_": [13, 161, 162, 311, 525, 526, 529, 572, 577, 579, 583, 589, 590, 591, 592, 598, 602, 604, 606, 607, 611, 614, 615, 618, 620, 621, 622, 624, 626], "arr": [13, 38, 339], "api": [13, 14, 39, 41, 64, 69, 101, 104, 116, 126, 153, 233, 234, 238, 272, 274, 276, 280, 311, 324, 325, 326, 339, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 510, 511, 524, 525, 530, 532, 538, 547, 551, 566, 567, 568, 569, 571, 581, 586, 594, 598, 599, 600, 620, 621, 624, 628], "collect_modul": 13, "m": [13, 38, 64, 142, 269, 299, 577, 587, 592, 594, 597, 600, 604, 607, 627], "b": [13, 38, 64, 68, 173, 211, 231, 575, 589, 615, 624], "o": [13, 64, 403, 587, 594, 613], "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 330, 333, 334], "8001": [13, 330, 333], "calc_kl_th_dict": 13, "quantized_dtyp": 13, "calcul": [13, 15, 38, 39, 41, 54, 142, 162, 176, 177, 192, 214, 215, 234, 239, 240, 250, 255, 256, 261, 265, 266, 269, 271, 272, 281, 282, 295, 296, 299, 307, 308, 319, 330, 333, 394, 486, 492, 575, 589, 600, 611, 614, 615, 618, 621, 624, 626], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 109, 116, 126, 148, 149, 150, 151, 152, 231, 232, 245, 247, 257, 258, 288, 290, 292, 293, 294, 359, 360, 362, 373, 374, 376, 379, 403, 463, 472, 494, 511, 529, 572, 587, 591, 602, 604, 606, 607, 610, 616, 621, 624], "up": [13, 61, 62, 64, 94, 184, 187, 190, 226, 234, 250, 261, 266, 270, 295, 380, 572, 579, 580, 583, 584, 586, 600, 604, 607, 609, 616, 617, 618, 621, 623, 626], "preprocess": [13, 173, 184, 187, 190, 211, 222, 224, 226, 227, 234, 256, 332, 579, 623], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "properti": [13, 96, 97, 98, 104, 116, 148, 150, 158, 163, 165, 173, 175, 184, 191, 192, 200, 201, 203, 211, 213, 227, 233, 234, 241, 242, 243, 244, 258, 261, 266, 274, 275, 276, 283, 284, 286, 287, 288, 290, 292, 293, 294, 295, 307, 314, 322, 324, 326, 339, 340, 358, 391, 398, 402, 407, 408, 411, 423, 426, 431, 435, 444, 447, 452, 456, 459, 462, 469, 479, 486, 487, 488, 492, 497, 501, 504, 506, 507, 588, 613], "min_max_dict": 13, "mix": [13, 41, 42, 43, 141, 285, 312, 326, 451, 452, 453, 500, 528, 529, 540, 586, 592, 598, 599, 600], "max": [13, 14, 15, 38, 41, 98, 104, 135, 152, 158, 184, 187, 190, 226, 239, 240, 276, 281, 282, 314, 339, 504, 528, 572, 587, 618, 623, 624], "post_collect": 13, "2": [13, 38, 40, 41, 42, 47, 68, 73, 99, 103, 145, 149, 151, 174, 191, 212, 238, 240, 242, 250, 264, 265, 271, 280, 282, 283, 284, 295, 299, 306, 312, 314, 525, 529, 575, 577, 583, 584, 586, 587, 588, 589, 590, 611, 613, 614, 618, 620, 621, 623, 624], "onnxruntimeadaptor": 14, "rt": 14, "smooth_quant": [14, 39, 150, 276], "alpha": [14, 38, 39, 145, 151, 248, 296, 308, 322], "5": [14, 39, 73, 145, 151, 158, 177, 186, 192, 215, 223, 238, 242, 280, 283, 284, 315, 529, 572, 575, 583, 589, 613, 614, 617, 623, 624, 626, 627], "percentil": [14, 15, 39, 145], "99": [14, 145, 627], "999": [14, 145, 626, 627], "op_typ": [14, 15, 32, 39, 96, 145, 292, 315, 319, 322, 324, 326, 327], "linear": [14, 38, 145, 151, 158, 228, 231, 269, 276, 299, 525, 577, 581, 614, 615], "scales_per_op": [14, 39, 145], "augment": [14, 15], "smooth": [14, 15, 38, 39, 145, 151, 322, 325, 615], "quant": [14, 39, 41, 145, 147, 322, 324, 326, 525, 618], "model_wrapp": [14, 15], "origin_model": [14, 148, 150], "smoothquant": [14, 39, 145, 151, 528], "fallback": [14, 39, 41, 147, 312, 313, 316, 317, 319, 320, 590, 619, 624], "spiq": [14, 39, 145, 151], "remov": [14, 15, 17, 37, 38, 39, 41, 50, 51, 54, 56, 68, 73, 74, 77, 78, 79, 90, 92, 96, 104, 109, 126, 133, 142, 192, 231, 240, 282, 292, 294, 324, 326, 359, 362, 369, 370, 373, 375, 376, 378, 380, 426, 487, 488, 495, 523, 524, 602, 606, 614, 615, 622], "outlier": [14, 15, 39], "whose": [14, 15, 38, 39, 54, 79, 145, 151, 270, 299, 585, 614, 624], "have": [14, 38, 39, 68, 77, 96, 97, 104, 140, 153, 171, 189, 193, 194, 209, 225, 235, 238, 242, 249, 269, 271, 276, 277, 280, 284, 299, 306, 322, 324, 326, 523, 524, 549, 572, 574, 575, 579, 583, 588, 589, 590, 592, 609, 611, 614, 615, 618, 624], "individu": [14, 38, 39, 61, 62, 64, 246, 247, 257, 269, 299, 523], "mainli": [14, 15, 39, 200, 234, 273, 299, 309, 615, 618], "accuraci": [14, 39, 153, 158, 161, 162, 191, 227, 233, 234, 242, 246, 247, 248, 250, 257, 261, 266, 274, 276, 283, 284, 285, 295, 311, 312, 315, 320, 322, 344, 360, 370, 380, 386, 388, 462, 486, 492, 495, 497, 513, 525, 528, 572, 574, 575, 578, 579, 580, 581, 584, 589, 590, 600, 609, 611, 612, 614, 615, 616, 617, 620, 621, 622, 626, 627], "same": [14, 38, 39, 41, 50, 61, 77, 134, 140, 145, 173, 184, 187, 190, 211, 226, 238, 261, 266, 280, 299, 315, 316, 319, 339, 529, 573, 574, 575, 577, 579, 583, 593, 597, 602, 606, 613, 617, 618, 622, 623, 624], "share": [14, 38, 39, 73, 76, 92, 103, 133, 134, 582, 583, 624], "perform": [14, 39, 56, 61, 62, 90, 153, 158, 173, 184, 185, 186, 187, 189, 191, 211, 223, 225, 233, 234, 245, 246, 248, 250, 257, 258, 261, 266, 274, 276, 295, 306, 308, 313, 315, 316, 319, 321, 344, 360, 370, 380, 386, 388, 477, 486, 495, 497, 504, 513, 525, 526, 528, 529, 572, 573, 574, 575, 576, 578, 580, 581, 584, 586, 587, 589, 590, 591, 592, 594, 598, 600, 603, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 622, 624, 626, 627], "modifi": [14, 39, 50, 56, 61, 62, 64, 75, 175, 213, 234, 261, 266, 272, 307, 473, 525, 572, 579, 583, 626], "data_load": [14, 41, 42, 43, 529], "todo": [14, 38, 173, 176, 211, 214, 238, 280, 326, 492, 625], "replac": [14, 61, 62, 79, 96, 104, 240, 282, 292, 315, 494, 579, 600, 620], "input_graph": [14, 125, 126, 130, 133, 135, 341, 449, 453, 458, 461, 468, 529], "eval": [14, 200, 234, 238, 244, 280, 525, 574, 592, 622], "func": [14, 96, 192, 275, 294, 494, 511, 626], "onnxdataload": 14, "evalut": 14, "onnxtransform": 14, "onnxmetr": 14, "evaluaton": 14, "visualizaton": 14, "f1": [14, 234, 239, 241, 242, 276, 281, 283, 284, 579, 589, 621, 627], "e": [14, 40, 64, 96, 247, 249, 275, 299, 484, 486, 511, 523, 577, 580, 584, 592, 597, 598, 602, 606, 614, 624], "g": [14, 40, 99, 247, 249, 275, 299, 486, 577, 580, 584, 592, 597, 614, 615, 620, 624], "modelproto": [14, 96, 228, 229, 231, 591], "onnxrt_qlinearopsadaptor": [14, 529], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": 15, "white_nod": 15, "cpuexecutionprovid": 15, "reduce_rang": [15, 37, 158, 276, 617], "augment_graph": 15, "activation_onli": 15, "weight_onli": 15, "add": [15, 37, 38, 46, 53, 58, 61, 62, 96, 103, 104, 109, 113, 119, 122, 140, 173, 175, 197, 211, 213, 234, 235, 242, 256, 261, 266, 270, 272, 275, 277, 283, 284, 292, 307, 310, 315, 324, 326, 352, 359, 360, 362, 369, 370, 371, 372, 373, 374, 376, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 392, 408, 494, 519, 524, 525, 549, 572, 574, 575, 579, 581, 583, 589, 590, 604, 607, 621, 622, 624], "quantization_candid": 15, "store": [15, 96, 175, 213, 238, 256, 262, 263, 264, 269, 271, 280, 296, 299, 306, 308, 309, 314, 335, 585], "part": [15, 227, 234, 238, 269, 271, 280, 306, 525, 587, 590, 604, 607], "graph": [15, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 106, 107, 108, 111, 124, 126, 130, 133, 134, 135, 137, 138, 139, 140, 172, 210, 231, 233, 276, 286, 287, 288, 292, 293, 294, 346, 348, 350, 415, 423, 426, 434, 435, 437, 447, 448, 449, 454, 455, 459, 472, 473, 475, 495, 498, 510, 525, 529, 575, 577, 579, 585, 589, 591, 592, 618, 619, 622], "get_intermediate_output": 15, "calib_mod": 15, "intermedi": [15, 38, 142, 158, 192, 525, 586, 614, 618], "dump_minmax": 15, "naiv": 15, "min": [15, 41, 104, 135, 152, 339, 572, 618, 623, 624], "dump_calibr": 15, "param": [15, 39, 40, 41, 61, 142, 145, 161, 163, 191, 197, 201, 238, 241, 242, 256, 280, 283, 284, 314, 361, 393, 494, 497, 529, 591, 624], "give": [15, 609, 624], "pair": [15, 37, 42, 101, 109, 574, 590], "across": [15, 233, 234, 243, 274, 285, 576, 614, 615], "test": [15, 190, 226, 247, 524, 528, 572, 587, 627], "first": [15, 41, 86, 101, 135, 152, 155, 173, 189, 211, 225, 227, 234, 238, 280, 312, 313, 315, 326, 403, 525, 526, 529, 572, 575, 581, 587, 590, 594, 603, 604, 607, 610, 617, 618, 619, 621, 622, 624, 626], "element": [15, 171, 209, 234, 238, 254, 256, 261, 266, 269, 272, 280, 299, 307, 339, 357, 575, 586, 589, 614], "minimum": [15, 299, 314, 600, 614, 624], "second": [15, 58, 158, 173, 211, 276, 315, 339, 403, 486, 572, 602, 606, 610, 624, 626], "maximum": [15, 48, 173, 184, 187, 190, 211, 226, 236, 256, 269, 271, 278, 299, 306, 314, 575, 614, 618, 623], "calculate_quantization_param": 15, "quantization_threshold": 15, "follow": [15, 62, 64, 73, 82, 85, 86, 87, 88, 104, 175, 179, 184, 213, 234, 235, 238, 256, 261, 266, 277, 280, 312, 523, 524, 525, 526, 529, 539, 572, 574, 575, 577, 578, 579, 581, 583, 587, 588, 589, 590, 591, 592, 593, 594, 602, 606, 612, 614, 615, 617, 618, 622, 624], "param_nam": [15, 352], "dump_tensor": 15, "both": [15, 140, 142, 256, 258, 260, 523, 526, 529, 578, 587, 593, 617, 618, 624], "calculate_scale_zeropoint": 15, "last_nod": 15, "next_nod": 15, "rmin": [15, 38, 618], "rmax": [15, 38, 618], "scheme": [15, 37, 38, 40, 147, 324, 326, 511, 529, 574, 583, 600, 624, 626], "qtype": [15, 38, 529], "quantize_rang": [15, 38], "zero": [15, 37, 38, 184, 187, 190, 226, 234, 242, 261, 266, 269, 271, 272, 284, 299, 306, 307, 339, 528, 614, 615, 618, 623, 624], "point": [15, 37, 38, 96, 186, 223, 239, 240, 259, 281, 282, 295, 314, 589, 609, 618, 623, 624], "calib_smooth": 15, "channel": [15, 37, 38, 104, 135, 145, 151, 152, 184, 186, 187, 190, 223, 226, 250, 254, 269, 299, 423, 426, 435, 529, 586, 587, 592, 594, 599, 614, 615, 623, 627], "shape_info": [15, 38], "shape": [15, 38, 96, 97, 99, 104, 116, 133, 140, 176, 177, 184, 186, 187, 190, 214, 215, 223, 226, 238, 254, 256, 269, 280, 291, 299, 415, 422, 423, 426, 435, 437, 475, 528, 572, 575, 583, 584, 623], "max_vals_per_channel": [15, 38], "activationoper": 17, "onnx_quant": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36], "onnx_nod": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 81, 95, 105], "quantize_check": [17, 20, 21, 23, 25, 27, 31, 32, 33, 34, 35], "quantizaion": [17, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36], "can": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 50, 135, 142, 145, 152, 153, 161, 162, 172, 175, 184, 187, 190, 191, 193, 194, 210, 213, 226, 234, 238, 240, 242, 254, 256, 261, 266, 269, 271, 272, 273, 276, 280, 282, 284, 285, 295, 299, 306, 307, 309, 311, 335, 445, 477, 484, 494, 525, 526, 528, 529, 572, 573, 574, 575, 577, 578, 579, 583, 586, 587, 589, 590, 591, 592, 593, 594, 596, 597, 598, 600, 602, 603, 604, 606, 607, 609, 610, 611, 612, 613, 614, 615, 617, 618, 619, 621, 622, 623, 624, 626], "done": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 525, 577, 578, 593, 609, 614, 618], "convert_check": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36], "convert_format": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36], "convers": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 48, 75, 96, 97, 234, 244, 529, 590, 618, 619], "qoper": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37], "removableactivationoper": 17, "qactivationoper": 17, "children": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 292], "initi": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 99, 110, 140, 153, 161, 162, 170, 173, 192, 200, 208, 211, 227, 234, 245, 246, 257, 258, 270, 271, 275, 276, 292, 293, 306, 311, 322, 326, 358, 381, 382, 391, 440, 472, 474, 482, 495, 502, 526, 572, 574, 575, 589, 608, 614, 615, 624], "argmaxoper": 18, "qargmaxoper": 18, "attentionoper": 19, "qattentionoper": 19, "qattent": 19, "binari": [20, 140, 242, 254, 256, 284, 582, 589, 604, 607], "binaryoper": 20, "qbinaryoper": 20, "qbinari": 20, "concatoper": 21, "cast": [21, 23, 32, 36, 37, 38, 51, 581, 619, 623], "qconcatoper": 21, "qconcat": 21, "convoper": 22, "qconvoper": 22, "qlinearconv": 22, "direct8bit": 23, "direct8bitoper": 23, "qdirectoper": 23, "qdirect": 23, "embedlayernorm": 24, "embedlayernormalizationoper": 24, "qembedlayernormalizationoper": 24, "qembedlayernorm": 24, "gatheroper": 25, "qgatheroper": 25, "qgather": 25, "globalaveragepool": 26, "globalaveragepooloper": 26, "qglobalaveragepooloper": 26, "qlinearglobalaveragepool": 26, "gemmoper": 27, "qgemmoper": 27, "qgemm": 27, "lstmoper": 29, "matmuloper": 30, "qmatmuloper": 30, "qlinearmatmul": 30, "maxpooloper": 31, "qmaxpooloper": 31, "qmaxpool": 31, "op_registri": 32, "qop_registri": 32, "padoper": 33, "qpadoper": 33, "qpad": 33, "averagepool": 34, "pooloper": 34, "qpooloper": 34, "qlinearaveragepool": 34, "resizeoper": 35, "qresizeoper": 35, "qresiz": 35, "splitoper": 36, "qsplitoper": 36, "qsplit": 36, "static": [37, 39, 41, 98, 104, 133, 144, 145, 151, 158, 232, 247, 275, 276, 292, 311, 324, 326, 352, 356, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 392, 394, 395, 423, 426, 428, 429, 431, 433, 434, 435, 436, 446, 463, 465, 470, 472, 477, 479, 484, 486, 492, 493, 495, 497, 502, 507, 511, 518, 519, 529, 581, 586, 592, 597, 598, 599, 600, 603, 609, 624, 627], "quantization_param": 37, "op_types_to_quant": 37, "fallback_list": 37, "add_qdq_pair_to_weight": 37, "optypes_to_exclude_output_qu": 37, "dedicated_qdq_pair": 37, "check_opset_vers": 37, "opset": [37, 96, 98, 99, 228, 230, 231, 294], "should_quant": 37, "quantize_model": 37, "merge_dedicated_qdq_pair": 37, "merg": [37, 102, 165, 203, 324, 326, 604, 607, 622, 624], "dedic": 37, "q": [37, 38, 42, 101, 103, 125], "dq": [37, 42, 101, 103, 125], "should_cast": 37, "insert_qdq": 37, "insert": [37, 38, 41, 42, 71, 96, 99, 101, 103, 104, 107, 126, 134, 138, 151, 228, 231, 525, 586, 592, 614, 615, 618, 619, 622], "should_convert": 37, "convert_qdq_to_operator_ori": 37, "remove_redundant_pair": 37, "redud": 37, "dtype_cast": 37, "cfg": [37, 41, 65, 66, 147, 154, 326, 332], "keep_io_typ": 37, "dtype": [37, 38, 42, 43, 96, 97, 99, 104, 133, 141, 158, 176, 177, 186, 190, 214, 215, 223, 226, 228, 231, 232, 294, 575, 581, 583, 592, 617, 622, 623, 626], "quantize_output": 37, "initializer_use_weight_qtyp": 37, "direct_int8": 37, "indic": [37, 96, 166, 171, 173, 204, 209, 211, 227, 234, 238, 254, 256, 259, 260, 280, 299, 525, 572, 582, 622], "quantize_bias_tensor": 37, "bia": [37, 41, 104, 133, 135, 228, 231, 254, 322, 622], "quantize_bia": 37, "bias_nam": [37, 231], "input_nam": [37, 61, 62, 96, 134, 158, 228, 230, 231, 294, 581], "weight_nam": [37, 300], "beta": [37, 61, 62, 64, 296], "input_scal": 37, "weight_scal": 37, "quantize_weights_per_channel": 37, "weight_qtyp": 37, "axi": [37, 38, 299], "quantize_weight_per_channel": 37, "channel_axi": [37, 107, 149, 152], "tensor_proto_to_arrai": 37, "tensorproto": [37, 38, 99], "get_bias_add_nod": 37, "last_output": 37, "quantized_bias_nam": 37, "handl": [37, 54, 55, 56, 140, 142, 145, 151, 234, 247, 248, 249, 274, 322, 336, 484, 510, 511, 525, 527, 574], "ad": [37, 38, 116, 173, 211, 235, 277, 299, 306, 314, 359, 360, 362, 369, 370, 371, 372, 373, 376, 378, 379, 572, 590, 592, 597, 600, 604, 607, 622], "reshap": [37, 55, 61, 62, 64, 67, 72, 264, 299], "nodeproto": [37, 231], "_type_": [37, 231, 291], "previou": [37, 41, 61, 73, 256, 258, 295, 299, 313, 320, 572, 620, 622, 624], "is_valid_quantize_weight": 37, "dequantize_tensor": [37, 142, 394], "value_nam": 37, "dequant": [37, 38, 51, 82, 85, 86, 87, 88, 90, 96, 119, 120, 122, 134, 142, 147, 339, 394, 525, 622], "helper": [38, 39, 41, 104, 110, 140, 142, 147, 173, 174, 175, 189, 211, 212, 213, 225, 229, 230, 231, 254, 293, 337, 488], "onnxrt": [38, 173, 175, 182, 183, 184, 187, 190, 211, 213, 220, 221, 222, 224, 226, 241, 242, 283, 284, 337, 397, 398, 413, 415, 422, 475, 529, 590], "dtype_to_nam": 38, "dtype_map": 38, "its": [38, 41, 54, 90, 96, 104, 107, 116, 142, 169, 175, 184, 187, 189, 190, 207, 213, 225, 226, 228, 229, 236, 237, 241, 242, 271, 275, 278, 279, 283, 284, 299, 306, 314, 315, 319, 324, 326, 523, 572, 575, 577, 588, 589, 590, 600, 602, 606, 609, 610, 613, 614, 615, 621, 623, 624], "represent": [38, 50, 247, 359, 360, 362, 365, 369, 370, 373, 374, 376, 378, 379, 505, 523, 525, 578, 615, 618], "quanttyp": 38, "repres": [38, 175, 180, 213, 218, 238, 240, 242, 280, 282, 284, 299, 306, 307, 308, 309, 310, 361, 363, 364, 366, 368, 371, 372, 375, 377, 492, 523, 575, 581, 618, 624], "make_quant_nod": 38, "make": [38, 62, 96, 99, 133, 134, 135, 152, 171, 209, 269, 271, 273, 299, 306, 309, 339, 358, 391, 423, 523, 524, 529, 572, 573, 574, 583, 589, 597, 602, 606, 609, 618, 619, 621, 624], "quantizelinear": [38, 96, 581], "make_dquant_nod": 38, "dequantizelinear": [38, 96, 581], "is_b_transpos": 38, "wheter": 38, "inuput": 38, "transpos": [38, 67, 134, 190, 226, 228, 230, 269, 299, 623], "split_shared_bia": 38, "float_to_float16": 38, "float16": [38, 575], "float_to_bfloat16": 38, "bfloat16": [38, 590, 592, 600, 619], "cast_tensor": 38, "remove_init_from_model_input": 38, "collate_pr": 38, "quantize_data_with_scale_zero": 38, "zero_point": [38, 231, 292, 299], "To": [38, 238, 264, 269, 273, 280, 295, 299, 309, 484, 524, 572, 575, 579, 581, 590, 593, 596, 602, 604, 606, 607, 617, 619, 620, 624, 626], "pack": [38, 55], "comput": [38, 41, 56, 61, 62, 99, 116, 142, 147, 200, 227, 234, 235, 236, 238, 239, 240, 242, 248, 277, 278, 280, 281, 282, 283, 284, 300, 303, 304, 329, 339, 549, 578, 589, 590, 592, 603, 614, 615, 618, 624], "when": [38, 47, 58, 61, 64, 97, 116, 140, 153, 158, 173, 174, 179, 182, 183, 184, 187, 190, 211, 212, 220, 221, 222, 226, 235, 236, 248, 256, 269, 270, 271, 276, 277, 278, 292, 299, 300, 306, 310, 311, 322, 492, 494, 507, 511, 523, 526, 549, 572, 574, 575, 600, 602, 603, 606, 610, 614, 615, 618, 623, 624], "uint8": [38, 158, 186, 223, 238, 280, 328, 529, 575, 583, 617, 618, 623, 626], "ab": [38, 256, 271, 296, 618], "np": [38, 97, 104, 133, 184, 187, 190, 226, 314, 579, 623], "sym": [38, 583, 626], "asym": [38, 583, 626], "calculate_scale_zp": 38, "quantize_data": 38, "necessari": [38, 227, 234, 523, 526, 591, 610, 621, 624], "trasnform": 38, "full": [38, 41, 173, 174, 175, 179, 184, 191, 211, 212, 213, 234, 324, 326, 339, 528, 572, 575, 582, 584, 587, 588, 610], "equat": [38, 240, 242, 282, 284, 618], "r": [38, 64, 135, 152, 250, 572, 587, 610, 613, 618, 627], "": [38, 40, 41, 50, 56, 64, 73, 96, 97, 99, 104, 116, 133, 135, 136, 140, 152, 154, 155, 158, 163, 172, 175, 189, 190, 191, 193, 194, 195, 201, 210, 213, 225, 226, 234, 240, 248, 250, 256, 269, 271, 272, 276, 282, 283, 284, 285, 289, 299, 306, 311, 315, 322, 339, 392, 423, 479, 480, 523, 526, 577, 579, 583, 586, 590, 597, 600, 602, 606, 609, 612, 613, 614, 615, 616, 617, 618, 620, 621, 626], "z": [38, 577], "real": [38, 39, 176, 193, 194, 214, 579, 616, 618], "origin": [38, 39, 96, 136, 147, 148, 150, 173, 190, 191, 211, 226, 234, 247, 256, 261, 266, 269, 270, 271, 272, 299, 300, 301, 303, 304, 305, 306, 307, 310, 315, 319, 328, 339, 342, 524, 575, 597, 614, 615, 618, 623, 624, 626], "quantize_data_per_channel": 38, "tensor_valu": 38, "scale_valu": 38, "zo_valu": 38, "dequantize_data_with_scale_zero": 38, "sacal": 38, "dequantize_data": 38, "valueinfo": 38, "tensor_nam": [38, 140, 292, 293, 294], "new_dtyp": 38, "quantizedvalu": 38, "new_quantized_nam": 38, "scale_nam": 38, "zero_point_nam": 38, "quantized_value_typ": 38, "quint8": 38, "linearli": 38, "intial": 38, "quantizediniti": 38, "quantized_data": 38, "quantizationmod": 38, "quantizedvaluetyp": 38, "quantformat": [38, 231], "quantize_nparrai": 38, "low": [38, 40, 41, 161, 162, 176, 177, 214, 215, 233, 234, 243, 274, 285, 529, 573, 575, 579, 590, 616, 618, 624], "high": [38, 176, 177, 214, 215, 313, 575, 587, 616, 624], "attribute_to_kwarg": 38, "attribut": [38, 56, 77, 96, 97, 98, 99, 104, 116, 133, 147, 155, 200, 274, 410, 411, 415, 475, 492, 529, 574, 583, 585, 617, 626], "kwarg": [38, 39, 41, 96, 99, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 129, 131, 153, 158, 175, 184, 187, 188, 190, 194, 195, 198, 213, 226, 233, 234, 244, 250, 256, 261, 266, 272, 274, 275, 276, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 307, 311, 324, 325, 327, 329, 333, 335, 336, 338, 339, 344, 346, 348, 349, 350, 351, 361, 363, 364, 366, 368, 371, 372, 377, 574], "make_nod": [38, 96], "find_by_nam": 38, "item_list": 38, "find": [38, 61, 62, 64, 96, 99, 140, 162, 242, 258, 259, 283, 284, 292, 314, 322, 339, 440, 510, 528, 529, 572, 595, 602, 606, 609, 610, 614, 621, 622, 624], "item": [38, 155, 189, 225, 270, 310, 322, 324, 326, 392, 480, 513, 579, 624], "get_smooth_scales_per_op": 38, "input_tensors_2_weight": 38, "input_tensors_2_weights_nod": 38, "one": [38, 41, 96, 103, 104, 109, 126, 147, 164, 167, 184, 187, 190, 191, 200, 226, 234, 235, 238, 241, 242, 244, 247, 269, 272, 273, 277, 280, 283, 284, 299, 307, 309, 313, 322, 329, 488, 526, 529, 549, 572, 577, 578, 579, 583, 584, 586, 587, 589, 590, 592, 593, 597, 598, 600, 602, 603, 606, 609, 610, 611, 612, 614, 615, 617, 618, 620, 623, 624], "mul": [38, 48, 59, 60, 61, 63, 64, 73, 119, 122, 151, 581], "correspond": [38, 41, 116, 142, 173, 211, 235, 238, 242, 269, 271, 275, 277, 280, 283, 284, 306, 314, 322, 332, 529, 549, 583, 614, 615, 617, 618, 621, 624], "paper": [38, 145, 256, 577, 614, 615], "get_smooth_scales_per_input": 38, "insert_smooth_mul_op_per_input": 38, "inupt": 38, "new_init_tensor": 38, "new_added_mul_nod": 38, "adjust_weights_per_op": 38, "adjust": [38, 250, 299, 600, 618], "adjustd": 38, "adjust_weights_per_input": 38, "insert_smooth_mul_op_per_op": 38, "befor": [38, 101, 103, 116, 151, 173, 200, 211, 227, 228, 231, 234, 261, 266, 269, 271, 272, 273, 296, 299, 305, 306, 307, 308, 309, 319, 329, 380, 524, 572, 575, 577, 578, 579, 582, 583, 587, 604, 607, 614, 618, 621, 622, 624], "name_2_nod": 38, "trt_env_setup": 38, "environ": [38, 191, 276, 442, 474, 475, 483, 507, 523, 572, 573, 602, 606, 609, 624], "variabl": [38, 116, 175, 191, 213, 234, 243, 249, 293, 308, 314, 482, 507, 572, 587, 615, 624], "tensorrt": 38, "provid": [38, 61, 62, 96, 99, 104, 116, 161, 162, 184, 187, 190, 200, 222, 224, 226, 233, 234, 238, 247, 256, 261, 266, 274, 275, 280, 285, 311, 333, 335, 403, 423, 429, 479, 488, 513, 526, 528, 529, 572, 573, 574, 578, 579, 580, 581, 586, 587, 590, 591, 592, 596, 600, 603, 609, 610, 614, 617, 618, 622, 624, 626, 627], "get_ops_recurs": 39, "prefix": [39, 140, 141, 146, 191, 234, 235, 277, 507, 592, 597, 622], "graph_info": [39, 41, 286, 287, 288, 292, 293, 294], "templateadaptor": 39, "tampl": 39, "yaml": [39, 40, 41, 155, 161, 162, 173, 175, 191, 200, 211, 213, 227, 233, 234, 244, 245, 246, 257, 258, 261, 266, 274, 275, 285, 310, 311, 338, 339, 340, 344, 345, 346, 347, 348, 350, 351, 353, 354, 438, 440, 447, 452, 456, 459, 462, 494, 505, 529, 585, 589, 611, 614, 617, 622, 623], "file": [39, 99, 104, 133, 140, 150, 154, 161, 162, 173, 174, 175, 178, 179, 184, 187, 189, 190, 196, 199, 211, 212, 213, 216, 225, 226, 227, 231, 233, 234, 238, 244, 245, 246, 247, 248, 250, 257, 258, 261, 266, 270, 272, 274, 275, 280, 285, 294, 295, 307, 310, 311, 335, 338, 339, 344, 345, 346, 347, 348, 349, 350, 351, 403, 440, 449, 453, 463, 479, 486, 487, 493, 494, 495, 507, 511, 515, 517, 519, 520, 526, 529, 572, 579, 582, 585, 588, 589, 591, 595, 604, 607, 608, 609, 610, 611, 614, 617, 622, 623], "is_fused_modul": [39, 142, 147], "_propagate_qconfig_help": [39, 142, 147], "detect": [39, 142, 147, 238, 242, 280, 283, 284, 289, 423, 426, 435, 494, 525, 572, 592, 599, 600], "calculate_hessian_trac": 39, "fp32_model": [39, 41, 140, 142, 147, 228, 231, 294, 319, 322, 339, 529], "q_model": [39, 142, 148, 150, 234, 244, 311, 322, 335, 525, 528, 574, 575, 579, 581, 584, 585, 589, 591, 618, 619], "criterion": [39, 41, 142, 158, 194, 197, 227, 234, 276, 296, 299, 306, 462, 502, 547, 577, 578, 581, 614, 615, 618, 624, 626], "enable_act": [39, 142], "hessian": [39, 142, 317, 624], "trace": [39, 141, 142, 146, 147, 228, 231, 311, 317, 525, 532, 599, 624], "loss": [39, 116, 158, 162, 192, 200, 233, 234, 242, 261, 266, 274, 276, 284, 295, 329, 577, 578, 579, 580, 584, 589, 590, 600, 612, 614, 615, 618, 624, 626], "gradient": [39, 116, 271, 294, 296, 300, 301, 586, 614, 615, 627], "amap": 39, "enabl": [39, 41, 103, 142, 158, 256, 271, 276, 306, 482, 572, 579, 587, 590, 592, 594, 597, 598, 600, 613, 614, 615, 616, 624], "error": [39, 99, 142, 235, 242, 248, 275, 277, 284, 319, 333, 336, 478, 506, 549, 589, 593, 624], "op_nam": [39, 147, 154, 158, 276, 315, 319, 322, 324, 326, 327, 394, 399, 400, 408, 409, 614, 622], "hessian_trac": [39, 142], "calib_it": [39, 145, 148, 150], "force_re_smooth": 39, "calib": 39, "now": [39, 145, 190, 226, 316, 492, 525, 526, 575, 579, 600, 617, 623, 624], "pytorchadaptor": 39, "objext": 39, "number": [39, 61, 62, 99, 142, 147, 148, 150, 163, 171, 174, 179, 184, 186, 187, 190, 201, 209, 212, 223, 226, 239, 240, 242, 249, 258, 269, 281, 282, 283, 284, 299, 300, 305, 306, 309, 314, 332, 339, 426, 482, 492, 495, 572, 573, 575, 579, 589, 614, 618, 621, 623, 624], "summari": [39, 97, 191, 234, 303, 329, 572, 604, 607, 613, 622], "optimizer_tupl": [39, 41], "criterion_tupl": [39, 41], "hook": [39, 41, 142, 161, 192, 199, 200, 227, 234, 261, 266, 294, 322, 332, 577, 578, 614, 622], "optim": [39, 41, 42, 43, 47, 51, 54, 55, 57, 68, 69, 73, 74, 79, 82, 85, 86, 87, 88, 92, 96, 110, 112, 133, 134, 154, 158, 194, 200, 227, 233, 234, 248, 260, 271, 272, 274, 276, 294, 296, 305, 306, 307, 308, 314, 322, 329, 330, 333, 340, 342, 346, 348, 350, 367, 371, 372, 378, 380, 381, 382, 383, 384, 385, 386, 388, 389, 391, 392, 394, 395, 396, 397, 398, 401, 402, 415, 469, 475, 476, 486, 492, 495, 498, 502, 509, 514, 526, 528, 547, 573, 577, 578, 579, 583, 584, 586, 587, 591, 592, 594, 596, 597, 600, 603, 613, 614, 616, 617, 618, 619, 621, 622, 624, 626], "It": [39, 47, 56, 73, 96, 161, 162, 199, 234, 240, 242, 247, 248, 259, 269, 274, 275, 282, 284, 285, 299, 311, 314, 315, 316, 319, 322, 335, 529, 572, 577, 595, 598, 603, 609, 610, 614, 615, 618, 621, 624, 626], "other": [39, 61, 62, 64, 96, 133, 145, 151, 172, 210, 240, 275, 282, 293, 335, 484, 488, 511, 523, 524, 525, 572, 583, 586, 587, 588, 591, 611, 613, 614, 618, 623, 624, 627], "is_fused_child": 39, "_post_eval_hook": [39, 622], "is_fused_op": 39, "is_last_fused_child": 39, "last": [39, 41, 86, 147, 161, 163, 201, 256, 269, 295, 296, 299, 322, 463, 572, 590, 592, 594, 599, 603, 618], "q_capabl": 39, "get_non_quant_modul": 39, "model_kwarg": 39, "non_quant_modul": 39, "custom": [39, 96, 109, 153, 247, 275, 295, 338, 381, 386, 573, 577, 578, 592, 614, 621], "keyword": 39, "custom_non_quant_dict": 39, "pytorch_ipexadaptor": 39, "intel": [39, 194, 197, 228, 234, 241, 242, 269, 272, 276, 283, 284, 299, 307, 318, 324, 335, 474, 487, 521, 523, 524, 526, 527, 529, 574, 575, 576, 577, 578, 580, 581, 583, 584, 588, 590, 591, 592, 597, 599, 600, 611, 612, 613, 614, 616, 618, 619, 620, 622, 624, 626], "extens": [39, 275, 429, 494, 526, 528, 529, 583, 586, 587, 590, 591, 593, 598, 599, 600, 604, 607, 608, 616, 624, 626], "ipex": [39, 147, 294, 586, 594, 598, 599, 627], "unspport": 39, "best": [39, 96, 162, 184, 187, 190, 226, 227, 233, 234, 245, 246, 257, 258, 274, 295, 313, 319, 322, 523, 526, 587, 592, 598, 609, 611, 618, 623, 624], "No": [39, 582, 613, 616], "pytorch_fxadaptor": 39, "fx": [39, 147, 311, 320, 586, 598, 599, 616, 618, 619, 627], "prepare_sub_graph": 39, "sub_module_list": 39, "fx_op_cfg": 39, "is_qat": [39, 146], "example_input": [39, 147, 158, 228, 231, 294, 581], "method": [39, 96, 98, 104, 116, 133, 135, 147, 166, 171, 172, 173, 175, 179, 182, 183, 184, 187, 190, 193, 194, 204, 209, 210, 211, 213, 217, 220, 221, 222, 224, 226, 234, 241, 242, 247, 250, 256, 258, 259, 260, 264, 274, 283, 284, 286, 287, 308, 324, 326, 332, 333, 335, 336, 479, 484, 488, 506, 525, 526, 528, 575, 577, 578, 589, 612, 614, 615, 618, 619, 623, 624], "sub": [39, 60, 61, 62, 80, 104, 191, 231, 234, 250, 322, 526, 624], "recurs": [39, 96, 97, 324, 326, 339], "traceabl": [39, 525], "qconfigmap": 39, "prepare_fx": 39, "dir": [39, 147, 173, 211, 338, 575, 582, 585], "convert_sub_graph": 39, "fuse_fx_model": 39, "approach": [39, 154, 158, 234, 245, 246, 247, 256, 257, 258, 276, 322, 356, 495, 502, 525, 526, 574, 575, 577, 586, 597, 609, 616, 617, 624, 626], "graphmodul": [39, 147, 525, 619], "torch": [39, 141, 142, 143, 144, 146, 147, 151, 154, 158, 192, 228, 231, 242, 250, 254, 256, 276, 284, 285, 294, 299, 311, 335, 525, 528, 530, 577, 579, 581, 590, 591, 592, 597, 600, 618, 622], "fused_model": 39, "calculate_op_sensit": [39, 41], "output_op_nam": [39, 41], "confidence_batch": [39, 41, 147, 624], "requantize_cfg": [39, 41, 147], "inc": [39, 190, 226, 335, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 502, 523, 528, 592, 599, 609, 616, 617, 620], "switch": [39, 79, 592, 622], "stage": [39, 41, 86, 312, 313, 320, 487, 577, 622, 624], "re": [39, 41, 314, 335, 587, 609], "sort": [39, 41, 96, 133, 292, 313, 319, 403, 624], "sensit": [39, 41, 271, 296, 300, 586, 614, 615], "ops_lst": 39, "pytorchqueri": 39, "3": [40, 64, 73, 109, 140, 175, 179, 184, 187, 190, 213, 217, 222, 224, 226, 238, 250, 280, 484, 525, 526, 528, 572, 574, 575, 577, 579, 581, 583, 584, 587, 589, 590, 592, 596, 600, 602, 606, 611, 614, 617, 618, 621, 623, 624, 627], "conv2d": [40, 46, 53, 54, 55, 59, 60, 65, 66, 73, 119, 129, 135, 145, 583, 622, 624], "get_fuse_pattern": [40, 41], "fusion": [40, 52, 53, 55, 58, 61, 62, 63, 64, 67, 72, 88, 90, 103, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 131, 132, 525, 529, 583], "everi": [40, 61, 62, 64, 96, 269, 271, 272, 299, 306, 307, 529, 597, 602, 606, 614, 615, 624], "set_quantization_config": 40, "organ": [40, 572, 626], "granular": [40, 529, 583, 586, 595, 614, 626], "etc": [40, 153, 189, 200, 225, 227, 233, 234, 240, 248, 249, 261, 266, 274, 276, 282, 285, 311, 338, 577, 586, 621, 624], "get_mixed_precision_combin": [40, 41], "unsupported_precis": 40, "hardwar": [40, 482, 524, 528, 529, 577, 586, 590, 609, 613, 614, 615, 616, 617], "user": [40, 104, 134, 153, 161, 162, 164, 167, 175, 178, 182, 183, 184, 190, 191, 197, 200, 213, 216, 220, 221, 222, 226, 233, 234, 247, 249, 261, 266, 272, 274, 275, 276, 285, 295, 306, 307, 310, 311, 315, 322, 329, 339, 478, 525, 526, 529, 539, 573, 577, 578, 583, 586, 589, 590, 591, 592, 593, 594, 596, 597, 598, 600, 603, 609, 611, 612, 614, 616, 618, 619, 620, 622, 623, 624, 628], "tensorflowadaptor": 41, "stock": [41, 598], "spr": 41, "graphdef": [41, 50, 51, 54, 55, 57, 61, 62, 64, 68, 73, 79, 85, 86, 87, 88, 104, 126, 133, 134, 140, 293, 472, 591], "could": [41, 61, 62, 145, 151, 161, 162, 175, 213, 275, 285, 299, 307, 311, 322, 523, 525, 578, 612, 614, 615, 618], "graph_def": [41, 47, 104, 140, 228, 230, 285, 293, 311, 437, 472, 473], "frozen": [41, 50, 285, 293, 311, 431, 434, 572, 591], "pb": [41, 153, 158, 285, 293, 311, 431, 434, 445, 528, 573, 579, 584, 591, 622, 627], "ckpt": [41, 140, 285, 293, 311, 627], "savedmodel": [41, 285, 293, 311, 627], "folder": [41, 140, 175, 180, 213, 218, 285, 311, 338, 575, 597, 602, 606, 622], "callback": [41, 261, 266, 329, 330, 332, 333, 510, 525, 612, 614, 618], "on_epoch_begin": [41, 200, 234, 261, 266, 271, 272, 300, 303, 304, 305, 306, 307, 329, 332, 577, 578, 612, 614], "on_epoch_end": [41, 200, 234, 261, 266, 271, 272, 300, 303, 304, 305, 306, 307, 329, 332, 577, 578, 612, 614], "larger": [41, 299], "better": [41, 90, 161, 162, 259, 285, 295, 311, 321, 578, 589, 590, 614, 615, 616, 618, 621, 624], "tf": [41, 99, 110, 116, 140, 172, 173, 174, 175, 179, 184, 187, 190, 210, 211, 212, 213, 226, 291, 293, 342, 572, 579, 591, 616, 619, 623], "compat": [41, 75, 140, 238, 247, 280, 293, 579, 591, 604, 607, 609, 620], "definit": [41, 104, 166, 171, 204, 209, 408, 421, 430, 479, 510], "inspect_weight_and_bia": 41, "node_list": 41, "graph_node_name_map": [41, 140], "bias": 41, "fused_node_map": 41, "pattern_map": 41, "between": [41, 135, 142, 152, 184, 187, 190, 192, 226, 239, 241, 242, 247, 249, 250, 281, 283, 284, 306, 394, 506, 510, 525, 529, 577, 581, 586, 589, 600, 615, 618, 620, 621, 623, 624], "sequenc": [41, 57, 73, 99, 173, 184, 187, 189, 190, 211, 225, 226, 235, 236, 240, 269, 277, 278, 282, 292, 299, 529, 549, 575, 583, 615, 623], "val": [41, 96, 140, 175, 178, 213, 216, 270, 310], "seq": 41, "fused_mapping_revers": 41, "fused_map": 41, "inspect_activ": 41, "local": [41, 269, 299, 306, 322, 335, 339, 354, 386, 391, 404, 424, 572, 602, 606, 615, 621], "actual": [41, 96, 242, 284, 295, 579], "4": [41, 47, 73, 153, 158, 182, 183, 184, 185, 186, 187, 190, 220, 221, 222, 223, 224, 226, 235, 236, 238, 277, 278, 280, 299, 315, 484, 523, 529, 549, 572, 573, 579, 580, 582, 583, 584, 586, 587, 589, 597, 613, 614, 623, 624, 627], "tensorflowbasemodel": [41, 293, 435], "start": [41, 184, 187, 190, 226, 235, 238, 249, 277, 280, 292, 295, 306, 312, 315, 487, 507, 587, 623, 624, 628], "quantizedv2": 41, "move": [41, 72, 525, 617, 620], "quantizedconv2d": 41, "qat_convert": 41, "quantize_recip": [41, 109, 110], "kera": [41, 64, 110, 116, 197, 288, 293, 415, 422, 432, 579, 591, 599, 600, 627], "expect": [41, 96, 116, 175, 213, 314, 342, 464, 487, 523, 524, 582, 609, 618, 624], "sequenti": [41, 171, 209, 275, 313, 316, 624], "decid": [41, 109, 110, 158, 236, 271, 276, 278, 403, 529, 620, 624], "fake": [41, 107, 145, 151, 618], "converted_model": [41, 158, 285, 590], "diagnosis_help": [41, 529], "quan_model": [41, 140], "diagnosi": [41, 140, 276, 383, 386, 392, 415, 475, 504, 510], "get_output_op_nam": 41, "qmodel": [41, 142], "oupur": 41, "mse": [41, 147, 158, 242, 276, 284, 318, 394, 400, 572, 589, 617, 620], "backup": 41, "fallen": 41, "denot": 41, "tensorflow_itexadaptor": 41, "itex": [41, 103, 228, 230], "tensorflowqueri": [41, 529], "performance_onli": [41, 42, 43, 101, 125, 130, 139, 504], "itex_mod": [41, 42, 73, 83, 101, 125, 130], "quant_mod": [41, 322, 324, 326], "get_bf16_pattern": 41, "get_eightbit_pattern": 41, "qdq_enabl": [41, 42], "eightbit": [41, 622], "generate_internal_pattern": 41, "translat": [41, 235, 236, 247, 250, 253, 255, 277, 278, 549], "intern": [41, 96, 97, 104, 142, 254, 324, 326, 478, 574, 575, 615], "express": [41, 235, 277, 523], "graphconvert": 42, "qt_config": 42, "recip": [42, 109, 158, 228, 231, 233, 234, 274, 276, 322, 581, 624], "int8_sequ": 42, "fp32_op": [42, 44, 101, 104], "bf16_op": [42, 44, 101, 104, 619], "fake_qu": [42, 82, 101, 125, 130], "new_api": [42, 43, 65, 66, 71, 73, 86, 93, 125, 130, 135], "use_bf16": [42, 43, 617], "fp32_frozen_graph": 42, "requantizeop": [42, 43], "so": [42, 43, 99, 116, 184, 187, 190, 226, 271, 329, 335, 525, 529, 582, 586, 589, 595, 597, 618, 619, 622, 623], "self": [42, 57, 86, 158, 234, 238, 261, 271, 276, 280, 295, 314, 322, 507, 529, 572, 574, 575, 586, 589, 621, 622, 624], "empti": [42, 96, 109, 238, 280, 314, 595], "without": [42, 43, 84, 96, 104, 140, 190, 226, 238, 271, 280, 306, 328, 494, 523, 572, 574, 577, 579, 589, 600, 614, 616, 617, 618, 624], "bf16_node": [42, 43], "quantize_with_qdq_pattern": 42, "newapi": [42, 88], "graphconverterwithoutcalib": 43, "recover_config": 43, "convert_without_calib": 43, "quantize_without_calib": 43, "rewrit": [44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103], "bf16convert": [44, 619], "graphrewriterbas": [44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 101, 102, 103], "do_transform": [44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 101, 102, 103, 118, 125, 126, 130, 135, 136, 138, 139], "biasadd": [46, 53, 58, 60, 73, 103, 119, 120, 122, 129, 131, 583], "convertaddtobiasaddoptim": 46, "addv2": [46, 62, 63, 64, 119, 122, 583], "layout": 47, "convertlayoutoptim": 47, "nchw": [47, 134], "nhwc": [47, 61, 62, 97, 134], "abov": [47, 96, 238, 280, 529, 614], "leakyrelu": [48, 117, 119, 121, 122, 127], "convertleakyreluoptim": 48, "below": [48, 60, 61, 62, 68, 73, 275, 313, 315, 320, 524, 525, 528, 529, 572, 574, 577, 579, 585, 589, 592, 594, 602, 603, 606, 609, 611, 612, 614, 617, 618, 621, 622, 624], "subgraph": [48, 56, 60, 61, 62, 64, 96, 99, 146, 581], "coeffici": [48, 248, 615], "less": [48, 73, 140, 339, 573, 577, 614], "than": [48, 56, 140, 173, 184, 187, 190, 211, 226, 238, 280, 295, 339, 526, 528, 573, 575, 585, 589, 611, 612, 614, 615, 618, 621, 623, 624], "small": [48, 61, 62, 63, 238, 280, 317, 526, 572, 624], "nan": 49, "random": [49, 133, 140, 158, 184, 186, 187, 190, 223, 226, 247, 260, 276, 314, 318, 333, 339, 504, 524, 526, 617, 623, 626], "convertnantorandom": 49, "const": [49, 50, 57, 58, 61, 62, 64, 76, 79, 91, 92, 96, 97, 104, 276, 359, 370, 373, 380, 386, 388, 389, 393, 475, 483, 493], "consist": [49, 57, 256, 524, 525, 572, 581, 624], "placehold": [50, 96, 171, 209], "convertplaceholdertoconst": 50, "renam": [50, 75, 96, 256, 620], "placeholderwithdefault": 50, "constant": [50, 56, 73, 96, 97, 99, 104, 133, 228, 231, 276, 292, 294, 314, 318, 324, 333, 476, 574, 583, 623], "help": [50, 96, 199, 244, 292, 356, 494, 591, 592, 598, 609, 624], "simplifi": [50, 592, 603, 609], "input_graph_def": [50, 51, 54, 55, 57, 61, 62, 64, 68, 79, 104, 133], "nodes_to_convert": 50, "strtobool": 50, "val_str": 50, "equival": [50, 77, 247], "rerewrit": 51, "dequantizecastoptim": 51, "b16": 51, "redund": [51, 85, 87, 126], "dilat": 52, "contract": 52, "dilatedcontract": 52, "spacetobatchnd": 52, "batchtospacend": 52, "inject": 53, "dummi": [53, 176, 177, 214, 215, 232, 242, 284, 386, 390, 496, 528, 572, 575, 584, 589], "injectdummybiasaddoptim": 53, "miss": [53, 96, 352, 614, 618], "behind": 53, "them": [53, 56, 104, 173, 211, 525, 574, 583, 585, 612, 614, 624], "expanddim": 54, "expanddimsoptim": 54, "next": [54, 144, 166, 204, 232, 258, 273, 309, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 526, 572, 617, 624], "featch": 55, "fetchweightfromreshapeoptim": 55, "fetch": [55, 147, 150, 166, 204, 238, 280, 575], "fold": [56, 57, 61, 62, 73, 228, 231, 294, 583], "batchnorm": [56, 61, 115, 525], "foldbatchnormnodesoptim": 56, "scale_after_norm": 56, "batchnormwithglobalnorm": 56, "nodedef": [56, 61, 62, 64, 104, 133, 136, 472], "normal": [56, 61, 62, 64, 184, 187, 190, 226, 240, 282, 494, 611, 623], "convolut": [56, 61, 62, 577, 614, 616], "multipl": [56, 61, 62, 109, 159, 160, 164, 165, 173, 174, 176, 177, 178, 179, 180, 184, 187, 190, 197, 202, 203, 205, 211, 212, 214, 215, 216, 217, 218, 222, 224, 226, 243, 271, 285, 286, 287, 289, 295, 300, 306, 313, 322, 479, 573, 575, 581, 612, 614, 621, 624], "dynam": [56, 104, 163, 201, 228, 231, 275, 294, 324, 326, 347, 529, 574, 577, 581, 586, 592, 597, 598, 599, 600, 603, 609, 616, 624, 627], "onc": [56, 104, 140, 145, 197, 273, 309, 313, 572, 574, 609, 614, 615, 616, 624, 627], "final": [56, 96, 271, 299, 306, 486, 595, 611, 614, 615, 618, 620, 624], "becom": [56, 529, 581, 615], "That": [56, 572], "mean": [56, 61, 62, 64, 145, 163, 184, 186, 187, 190, 201, 223, 226, 238, 240, 242, 248, 250, 256, 269, 280, 282, 283, 284, 292, 295, 299, 319, 525, 574, 579, 583, 589, 595, 614, 615, 618, 623, 624, 626], "opportun": [56, 61, 62], "reduc": [56, 61, 62, 264, 299, 529, 578, 590, 609, 610, 615, 616, 618, 619, 624, 626], "down": [56, 603], "addit": [56, 62, 64, 147, 161, 329, 479, 572, 577, 603, 620], "rather": [56, 585], "more": [56, 96, 133, 134, 140, 145, 151, 161, 184, 187, 190, 226, 238, 254, 256, 269, 280, 299, 322, 526, 527, 528, 572, 575, 577, 579, 584, 586, 587, 589, 590, 592, 600, 604, 607, 611, 612, 614, 615, 619, 624, 627], "expens": [56, 577, 624], "bake": 56, "identifi": [56, 61, 62, 64, 238, 280, 293, 335], "typic": [56, 109, 116, 234, 244, 275, 526, 528, 578, 580, 584, 614, 615], "simpler": 56, "form": [56, 61, 62, 64, 75, 238, 240, 280, 282, 386, 388, 487, 572, 577, 609], "spot": 56, "fusedbatchnorm": [56, 61, 75], "fusedbatchnormv3": [56, 117, 127], "_fusedbatchnormex": 56, "extend": [56, 61, 62], "futur": [56, 151, 161, 162, 193, 194, 586, 600], "newer": [56, 61, 62], "style": [56, 166, 180, 204, 218, 524, 575, 585], "rais": [56, 61, 62, 64, 75, 99, 104, 192, 235, 238, 241, 242, 269, 270, 271, 277, 280, 283, 284, 285, 299, 306, 310, 314, 494, 507, 528, 549, 614, 615], "valueerror": [56, 61, 62, 64, 75, 104, 235, 238, 242, 277, 280, 284, 549, 582], "If": [56, 61, 62, 64, 68, 75, 97, 104, 153, 161, 162, 175, 184, 187, 190, 213, 226, 238, 250, 269, 270, 271, 280, 285, 311, 312, 524, 525, 572, 573, 575, 579, 581, 587, 588, 589, 590, 595, 603, 604, 607, 609, 611, 618, 621, 622, 623, 624], "badli": [56, 61, 62, 64, 75], "duplic": [56, 61, 62, 64, 92, 102, 134, 314], "graphfoldconstantoptim": 57, "supported_op_typ": 57, "check_all_fold": 57, "been": [57, 189, 225, 235, 249, 269, 271, 277, 299, 306, 524, 526, 549, 572, 577, 590, 609], "complet": [57, 324, 326, 529, 572, 624, 626, 627], "check_const_input": 57, "node_nam": [57, 61, 62, 64, 73, 96, 104, 126, 133, 136, 140, 231, 292, 293, 374, 472], "fusebiasaddandaddoptim": 58, "columnwis": 59, "fusecolumnwisemuloptim": 59, "depthwiseconv2dn": [59, 65, 66, 119, 129, 583], "math": [60, 618], "fuseconvwithmathoptim": 60, "elimin": 60, "realdiv": [60, 63], "decompos": [61, 62], "fusedecomposedbnoptim": 61, "some": [61, 62, 109, 161, 173, 200, 211, 234, 270, 322, 494, 572, 575, 587, 589, 611, 614, 615, 618, 619, 622, 624], "normalizatin": [61, 62], "via": [61, 62, 116, 233, 234, 261, 266, 274, 511, 523, 579, 586, 592, 609], "group": [61, 62, 301, 308, 411, 586, 614, 615, 622, 623, 624, 627], "instead": [61, 62, 155, 172, 210, 339, 595, 597, 600], "singl": [61, 62, 119, 120, 126, 128, 129, 166, 173, 189, 190, 204, 211, 225, 226, 238, 247, 249, 271, 273, 280, 296, 309, 314, 375, 392, 411, 479, 513, 525, 575, 587, 614, 615], "made": [61, 62, 64, 248, 250, 317, 529, 618, 620, 624], "those": [61, 62, 68, 319, 339, 577, 578, 585, 612, 614, 615, 618, 624], "further": [61, 62, 64, 523, 590, 591, 592, 594, 603, 609], "recogn": [61, 62, 235, 277], "seen": [61, 62, 339, 529], "also": [61, 62, 172, 175, 179, 184, 190, 210, 213, 217, 222, 226, 235, 277, 295, 299, 311, 320, 321, 524, 526, 529, 549, 572, 574, 580, 584, 586, 589, 592, 597, 602, 603, 606, 609, 610, 611, 614, 618, 619, 624], "attempt": [61, 62, 335], "multipli": 61, "rsqrt": [61, 62], "varianc": [61, 135, 152], "epsilon": [61, 626], "gamma": [61, 62, 64], "OR": 61, "mul_0": 61, "appli": [61, 69, 83, 84, 88, 90, 92, 93, 94, 107, 117, 118, 119, 120, 121, 122, 125, 127, 128, 129, 130, 131, 135, 139, 200, 234, 236, 269, 271, 278, 294, 299, 303, 306, 322, 523, 572, 592, 594, 600, 609, 612, 614, 615, 618, 619, 621, 624, 626], "mul_1": 61, "insid": [61, 238, 280, 577, 578, 610, 614, 624], "end": [61, 96, 104, 140, 173, 184, 187, 189, 190, 200, 211, 225, 226, 234, 247, 271, 272, 295, 300, 304, 305, 306, 307, 313, 329, 529, 577, 578, 583, 587, 603, 611, 614, 615, 622, 623, 624], "mul_3": 61, "batchnorma": 61, "node_name_from_input": [61, 62, 64, 104, 133, 136], "strip": [61, 62, 64, 73, 77, 78, 140, 622], "off": [61, 62, 64, 524], "port": [61, 62, 64, 133, 507, 511, 572], "underli": [61, 62, 64, 248], "node_from_map": [61, 62, 64], "node_map": [61, 62, 64], "pull": [61, 62, 64, 487], "def": [61, 62, 64, 126, 158, 161, 162, 311, 525, 529, 574, 575, 577, 578, 579, 589, 618, 622, 624], "entri": [61, 62, 64, 126, 142, 145, 197, 233, 275, 357, 400, 403, 486, 494, 588], "index": [61, 62, 64, 96, 99, 109, 116, 166, 171, 175, 179, 184, 191, 204, 209, 213, 217, 222, 234, 259, 292, 295, 339, 511, 575, 589, 610], "want": [61, 62, 64, 96, 104, 171, 173, 209, 211, 271, 315, 329, 525, 529, 572, 575, 579, 587, 589, 590, 597, 609, 610, 611, 621, 622, 624], "isn": [61, 62, 64, 104], "present": [61, 62, 64, 572, 616], "values_from_const": [61, 62, 64, 104], "node_def": [61, 62, 64, 104], "extract": [61, 62, 64, 104, 175, 213, 328, 513, 575], "access": [61, 62, 64, 104, 116, 155, 335, 339, 478, 494, 507, 511, 572, 604, 607], "valid_reshape_input": [61, 62], "reshape_in0_ndef": [61, 62], "reshape_in1_ndef": [61, 62], "bypass_reshap": [61, 62], "input_node_map": [61, 62], "get_const_dim_count": [61, 62], "dimens": [61, 62, 99, 165, 184, 187, 190, 203, 226, 250, 265, 299, 314, 575, 577, 614, 623], "instancenorm": 62, "fusedecomposedinoptim": 62, "instanc": [62, 107, 109, 110, 116, 148, 150, 161, 162, 173, 191, 211, 234, 239, 240, 242, 245, 257, 258, 281, 282, 284, 285, 300, 301, 303, 304, 305, 311, 314, 322, 328, 329, 359, 398, 402, 426, 435, 502, 523, 525, 529, 572, 573, 594, 600, 626, 627], "search": [62, 64, 73, 96, 154, 161, 162, 233, 234, 235, 245, 246, 247, 249, 250, 257, 258, 259, 260, 274, 277, 314, 316, 317, 321, 381, 382, 409, 528, 549, 558, 572, 584, 586, 589, 592, 593, 603, 616, 622, 624], "contraint": [62, 64], "ani": [62, 64, 96, 116, 133, 142, 227, 234, 238, 240, 256, 280, 282, 322, 324, 325, 335, 341, 342, 344, 346, 348, 349, 350, 351, 352, 353, 354, 356, 357, 359, 360, 362, 369, 370, 371, 372, 373, 374, 376, 379, 381, 382, 392, 394, 399, 400, 403, 405, 411, 420, 423, 426, 430, 433, 434, 435, 437, 440, 442, 445, 449, 453, 455, 458, 461, 464, 467, 472, 473, 479, 480, 482, 484, 486, 487, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 510, 511, 518, 519, 523, 524, 528, 572, 574, 579, 592, 597, 610, 621], "clang": 62, "x____________": 62, "mean1": 62, "fusedop": [62, 64], "_mklfusedinstancenorm": 62, "_mkllayernorm": [62, 64], "squareddiff": 62, "mean0": 62, "mul1": 62, "constx": 62, "mul2": 62, "mul0": 62, "gelu": [63, 122], "fusegeluoptim": 63, "sqrt": 63, "erf": 63, "samll": 64, "layernorm": [64, 256], "fuselayernormoptim": 64, "remap": 64, "smaller": [64, 184, 187, 190, 226, 577, 614, 615, 623], "case": [64, 68, 172, 184, 187, 189, 190, 191, 210, 225, 226, 233, 234, 242, 261, 266, 274, 275, 284, 295, 484, 488, 494, 572, 574, 577, 578, 579, 583, 585, 589, 593, 597, 609, 610, 611, 614, 616, 618, 620, 623, 626, 627], "fusedbatcnormv3": 64, "And": [64, 200, 234, 525, 573, 595], "restrict": [64, 614, 615, 621], "2d": 64, "3d": [64, 616], "fill": [64, 361, 363, 364, 366, 368, 371, 372, 377, 572, 609, 621, 623], "f": [64, 577, 579, 618], "u": [64, 96, 135, 152, 528, 592], "d": [64, 68, 247, 577, 585, 610, 615, 627], "c": [64, 68, 175, 213, 572, 575, 582, 587, 615, 624], "h": [64, 190, 226, 579, 623], "n": [64, 174, 184, 187, 190, 212, 226, 236, 269, 278, 299, 482, 575, 577, 614, 615, 623], "v": [64, 600, 609, 626], "fusepadwithconv2doptim": 65, "excluded_op_nam": [65, 66, 154, 158, 276, 614], "itex_qdq_mod": [65, 66], "conv3d": [65, 66, 119], "fusepadwithfp32conv2doptim": 66, "fusetransposereshapeoptim": 67, "cse": [68, 92], "graphcseoptim": 68, "introduc": [68, 524, 529, 581, 583, 614, 615, 618, 620, 624], "ident": [68, 73, 74, 104, 133, 269, 299, 523, 577], "three": [68, 173, 211, 234, 261, 266, 272, 307, 313, 525, 529, 572, 574, 581, 587, 590, 603, 612, 618, 619, 621, 622, 624], "child": [68, 97, 622], "b1": 68, "c1c2": 68, "d1": [68, 339], "c1": 68, "c2": 68, "bound": [68, 190, 191, 226, 234, 238, 247, 280, 314, 589, 623], "relu6": [68, 119, 122, 583], "multi": [68, 73, 191, 234, 238, 249, 254, 256, 280, 295, 320, 352, 526, 574, 575, 586, 611, 624], "elim": [68, 73], "grappler": [69, 583], "grappleroptim": 69, "input_output_nam": 69, "opt_cfg": 69, "python": [69, 116, 140, 175, 194, 213, 234, 238, 276, 280, 339, 442, 521, 524, 525, 572, 575, 579, 587, 594, 600, 603, 609, 616, 623], "wrapper": [69, 96, 97, 98, 99, 116, 141, 172, 184, 187, 190, 192, 193, 194, 195, 196, 210, 222, 224, 226, 238, 242, 280, 283, 284, 287, 289, 293, 511, 519, 619], "leverag": [69, 526, 528, 577, 592, 609, 612, 618], "built": [69, 116, 153, 159, 160, 164, 169, 173, 174, 179, 181, 183, 184, 186, 187, 190, 194, 195, 197, 202, 205, 207, 211, 212, 217, 219, 221, 222, 223, 224, 226, 275, 276, 283, 284, 287, 291, 295, 526, 529, 575, 579, 602, 606, 611, 623, 624, 626], "convert_add_to_biasadd": [70, 81, 105], "convert_layout": [70, 81, 105], "convert_leakyrelu": [70, 81, 105], "convert_nan_to_random": [70, 81, 105], "convert_placeholder_to_const": [70, 81, 105], "dequantize_cast_optim": [70, 81, 105], "dilated_contract": [70, 81, 105], "dummy_biasadd": [70, 81, 105], "expanddims_optim": [70, 81, 105], "fetch_weight_from_reshap": [70, 81, 105], "fold_batch_norm": [70, 81, 105], "fold_const": [70, 81, 105], "fuse_biasadd_add": [70, 81, 105], "fuse_column_wise_mul": [70, 81, 105], "fuse_conv_with_math": [70, 81, 105], "fuse_decomposed_bn": [70, 81, 105], "fuse_decomposed_in": [70, 81, 105], "fuse_gelu": [70, 81, 105], "fuse_layer_norm": [70, 81, 105], "fuse_pad_with_conv": [70, 81, 105], "fuse_pad_with_fp32_conv": [70, 81, 105], "fuse_reshape_transpos": [70, 81, 105], "graph_cse_optim": [70, 81, 105], "grappler_pass": [70, 81, 105], "insert_print_nod": [70, 81, 105], "move_squeeze_after_relu": [70, 81, 105], "pre_optim": [70, 81, 105], "remove_training_nod": [70, 81, 105, 133], "rename_batch_norm": [70, 81, 105], "split_shared_input": [70, 81, 105, 133], "strip_equivalent_nod": [70, 81, 105, 140], "strip_unused_nod": [70, 81, 105, 140], "switch_optim": [70, 81, 105], "print": [71, 142, 242, 284, 294, 339, 572, 579, 589, 614, 624], "insertprintminmaxnod": 71, "pre_node_nam": 71, "post_node_nam": 71, "pass": [71, 73, 75, 96, 140, 153, 189, 225, 234, 254, 256, 261, 266, 272, 275, 307, 339, 437, 493, 506, 507, 525, 529, 573, 575, 577, 578, 579, 581, 585, 589, 610, 614, 617, 618, 619, 626], "sampl": [71, 104, 142, 163, 166, 171, 173, 174, 175, 179, 184, 186, 187, 190, 201, 204, 209, 211, 212, 213, 217, 222, 223, 226, 241, 242, 259, 283, 284, 314, 370, 426, 495, 526, 528, 575, 580, 586, 610, 618, 623, 624, 626, 627], "squeez": [72, 525], "movesqueezeafterreluoptim": 72, "match": [72, 73, 96, 104, 116, 189, 225, 238, 239, 280, 281, 292, 577, 610], "pre": [73, 110, 134, 161, 162, 173, 211, 255, 285, 294, 311, 322, 575, 577, 578, 590, 597, 614, 615, 616, 618, 622, 624], "entranc": [73, 164, 167, 184], "preoptim": 73, "get_excluded_node_nam": 73, "exclud": [73, 254, 256, 292, 529, 590, 619], "get_optimized_model": 73, "non": [73, 116, 197, 270, 339, 525, 613, 614, 624], "possibl": [73, 191, 234, 247, 312, 313, 316, 356, 423, 572, 612, 619, 624], "useless": 73, "6": [73, 572, 583, 618, 624, 627], "common": [73, 133, 188, 234, 244, 250, 258, 259, 260, 269, 275, 276, 299, 332, 487, 488, 494, 523, 575, 578, 579, 581, 585, 587, 618], "7": [73, 133, 153, 158, 295, 573, 582, 583, 587, 618, 620, 624, 627], "get_matched_nod": 73, "illustr": [73, 578], "matched_node_a_nam": 73, "has_positive_input": [73, 104], "posit": [73, 104, 190, 226, 256, 299, 523, 572, 589, 592], "neg": [73, 104], "removetrainingnodesoptim": 74, "protected_nod": [74, 133], "types_to_splic": [74, 133], "checknumer": [74, 133], "stopgradi": 74, "tranin": 74, "edg": [74, 292, 408, 410, 415, 475, 623], "fusedbatchnormv2": 75, "renamebatchnormoptim": 75, "due": [75, 614, 615, 618, 622], "histor": 75, "reason": [75, 193, 194, 316, 523, 574, 622, 624], "As": [75, 238, 280, 321, 525, 572, 574, 577, 603, 614, 615, 624], "latter": [75, 109], "former": 75, "chang": [75, 90, 135, 145, 152, 271, 273, 306, 309, 314, 317, 339, 354, 360, 463, 485, 492, 524, 574, 579, 582, 588, 589, 592, 602, 603, 606, 609, 615, 622, 623, 624], "platform": [75, 96, 339, 482, 528, 586, 592, 600, 616, 618, 627], "vnni_bf16": 75, "amx": [75, 528, 616], "instruct": [75, 572, 577, 587, 590, 604, 607, 616, 617, 618], "splitsharedinputoptim": 76, "stripequivalentnodesoptim": 77, "output_node_nam": [77, 78, 125, 126, 130, 133, 140, 293], "unus": [78, 96, 140, 247, 256, 292], "stripunusednodesoptim": 78, "input_node_nam": [78, 125, 130, 133, 140, 293], "switchoptim": 79, "condit": [79, 173, 174, 175, 179, 184, 187, 190, 211, 212, 213, 226, 313, 575, 588, 623, 624], "enter": [79, 603, 609], "freeze_fake_qu": [81, 89, 105], "freeze_valu": [81, 89, 105], "freeze_value_without_calib": [81, 89, 105], "fuse_conv_redundant_dequant": [81, 89, 105], "fuse_conv_requant": [81, 89, 105], "fuse_matmul_redundant_dequant": [81, 89, 105], "fuse_matmul_requant": [81, 89, 105], "meta_op_optim": [81, 89, 105], "post_hostconst_convert": [81, 89, 105], "post_quantized_op_cs": [81, 89, 105], "rnn_convert": [81, 89, 105], "scale_propag": [81, 89, 105], "onnx_graph": [81, 95, 105], "onnx_schema": [81, 95, 105], "tf2onnx_util": [81, 95, 105], "insert_qdq_pattern": [81, 100, 105], "merge_duplicated_qdq": [81, 100, 105], "share_qdq_y_pattern": [81, 100, 105], "freez": [82, 83, 84, 592, 614, 615], "fakequ": 82, "freezefakequantopoptim": 82, "freezevaluetransform": 83, "max_min_data": [83, 84], "postfix": [83, 84], "tensor_data": [83, 339], "th": [83, 84], "gpu": [83, 84, 91, 104, 133, 528, 573, 586, 590, 594, 600, 609, 617, 618], "generate_output_graph": [83, 84], "max_name_valu": [83, 84], "freeze_max": [83, 84], "freeze_min": [83, 84], "generate_output_graph_rang": [83, 84], "freezevaluewithoutcalibtransform": 84, "95": [84, 238, 242, 280, 283, 284, 589, 627], "do_transformation_without_calib": 84, "quantizedconv": [85, 86], "quantizeddeconv": 85, "fuseconvredundantdequantizetransform": 85, "cpu": [85, 86, 87, 88, 104, 133, 158, 250, 276, 339, 528, 573, 586, 590, 592, 594, 600, 609, 613, 616, 617, 619, 622], "_quantizedconv": 85, "_quantizeddeconv": 85, "successor": [85, 86, 87, 88], "requant": [86, 88, 622], "fuseconvrequantizetransform": 86, "two": [86, 104, 142, 175, 179, 180, 184, 191, 213, 217, 218, 222, 238, 269, 273, 275, 280, 299, 306, 309, 320, 322, 339, 525, 526, 572, 575, 577, 579, 583, 589, 590, 614, 618, 619, 621, 624, 626], "fuse_pattern": 86, "sum_pattern": 86, "quantizedmatmul": [87, 88], "fusematmulredundantdequantizetransform": 87, "_quantizedmatmul": [87, 88], "fusematmulrequantizedequantizetransform": 88, "quantizedmatmulwithbiasanddequant": 88, "fusematmulrequantizetransform": 88, "fusematmulrequantizedequantizenewapitransform": 88, "fusematmulrequantizenewapitransform": 88, "meta": [90, 175, 213, 616], "metainfochangingmemopoptim": 90, "metaop": 90, "With": [90, 295, 525, 529, 574, 597, 602, 606, 610, 611, 614, 616, 618, 621, 624, 627], "quantizev2": [90, 92, 96, 119, 120, 122, 126, 134], "hostconst": 91, "posthostconstconvert": 91, "postcseoptim": 92, "decreas": 92, "size": [92, 104, 145, 163, 165, 166, 172, 175, 179, 181, 183, 184, 186, 187, 190, 201, 203, 204, 210, 213, 217, 219, 222, 223, 226, 238, 247, 250, 256, 269, 280, 292, 295, 299, 339, 359, 369, 370, 492, 494, 495, 523, 572, 574, 575, 579, 582, 609, 610, 611, 614, 615, 623, 626, 627], "rnn": [93, 104], "quantizedrnnconvert": 93, "calibration_data": [93, 101], "rnn_detail": 93, "scalepropagationtransform": 94, "direct": [94, 269, 299, 444], "algrothim": 94, "export": [95, 158, 234, 238, 276, 280, 286, 287, 292, 293, 294, 329, 494, 528, 595, 610, 622], "onnxgraph": 96, "output_shap": [96, 97, 116], "extra_opset": 96, "output_nam": [96, 126, 134, 158, 228, 230, 231, 294, 581], "is_subgraph": 96, "graph_nam": 96, "manipul": [96, 97], "extra": [96, 240, 282], "set_config": 96, "field": [96, 104, 133, 158, 175, 213, 238, 275, 276, 280, 525, 529, 572, 579, 621, 624, 626], "is_target": 96, "make_const": 96, "np_val": 96, "skip_convers": [96, 97], "raw": [96, 97, 174, 178, 181, 212, 216, 219, 319, 584, 589, 624], "must": [96, 190, 226, 238, 242, 280, 284, 524, 525, 572, 573, 574, 587, 623], "uniqu": [96, 238, 250, 275, 280, 314, 381, 382, 618], "would": [96, 104, 299, 524, 590, 614, 615, 618], "raw_data": 96, "attr": [96, 97, 98, 99, 104, 133, 140], "output_count": 96, "op_name_scop": 96, "domain": [96, 97, 98, 99, 158, 276, 299, 356, 364, 367, 384, 386, 391, 415, 422, 423, 426, 444, 475, 476, 478, 494, 506, 511, 572, 614, 615, 624], "onnx_domain": 96, "infer_shape_dtyp": 96, "branch": [96, 140, 335, 572], "append_nod": 96, "remove_nod": [96, 104, 292], "safe_remove_nod": 96, "to_delet": 96, "delet": [96, 335, 374, 380, 381, 386, 387, 388, 389, 390, 614, 615], "third": [96, 238, 280, 572, 588], "parti": [96, 238, 280, 588, 618], "consum": [96, 574], "reset_nod": 96, "reset": [96, 142, 148, 150, 235, 241, 242, 277, 283, 284, 295, 507, 549, 589], "create_new_graph_with_same_config": 96, "clean": [96, 189, 192, 225, 359, 370, 373, 380, 381, 386, 388, 389, 390, 477, 493, 524], "is_empty_input": 96, "mai": [96, 104, 133, 140, 295, 300, 301, 303, 304, 305, 523, 524, 572, 574, 582, 588, 590, 602, 606, 613, 616, 618, 624], "place": [96, 294, 578, 587, 614, 622], "argument": [96, 234, 254, 256, 261, 266, 272, 275, 307, 341, 449, 453, 458, 461, 467, 479, 487, 507, 526], "update_node_shape_dtyp": 96, "overrid": [96, 161, 200, 234, 274, 322, 335, 339, 484], "try": [96, 171, 209, 423, 426, 435, 507, 525, 581, 618], "update_proto": [96, 97], "protobuf": [96, 97, 99], "out": [96, 133, 142, 173, 174, 175, 179, 184, 211, 212, 213, 233, 234, 256, 269, 274, 292, 299, 524, 525, 528, 575, 592, 597, 602, 603, 604, 606, 607, 609, 615, 617, 618], "structur": [96, 97, 104, 271, 306, 327, 419, 586, 608, 610, 614, 615, 618, 622, 627], "get_nod": [96, 408], "get_node_by_output": 96, "search_in_parent_graph": 96, "go": [96, 315, 583, 604, 607, 617, 623], "through": [96, 142, 153, 161, 162, 189, 225, 276, 285, 311, 315, 528, 573, 583, 585, 586, 589, 595, 611, 612, 614, 617], "nest": [96, 97, 155], "parent": [96, 104, 265, 271, 273, 292, 306, 309, 622], "get_node_by_output_in_current_graph": 96, "get_node_by_nam": [96, 472], "set_node_by_nam": 96, "is_const": [96, 97], "get_tensor_valu": [96, 97, 622], "as_list": [96, 97], "get_dtyp": 96, "set_dtyp": 96, "copy_dtyp": 96, "src_name": 96, "dst_name": 96, "copi": [96, 133, 158, 270, 276, 339], "get_shap": 96, "get_rank": 96, "len": [96, 142, 158, 184, 187, 190, 226, 314, 575, 579, 623], "set_shap": 96, "copy_shap": 96, "add_graph_output": 96, "topological_sort": [96, 292], "topolog": [96, 292], "make_graph": 96, "doc": [96, 269, 299, 324, 325, 326, 339, 589, 604, 607], "graphproto": [96, 97], "text": [96, 99, 184, 187, 189, 190, 225, 226, 235, 240, 272, 277, 282, 307, 549, 588, 598, 616, 623, 627], "make_model": 96, "graph_doc": 96, "tfqdq_to_onnxqdq": 96, "make_onnx_graph_io": 96, "tensor_value_info": 96, "dump_graph": [96, 104], "debug": [96, 333, 336, 396, 397, 401, 572, 602, 606, 610, 624], "dump_node_statist": 96, "include_attr": 96, "include_subgraph": 96, "counter": [96, 99], "within": [96, 98, 233, 234, 238, 274, 280, 293, 306, 314, 523, 525, 590, 602, 606, 609, 616], "remove_input": 96, "to_be_remov": 96, "input_index": [96, 292], "effici": [96, 145, 151, 526, 574, 577, 592, 612, 616], "otherwis": [96, 97, 162, 175, 184, 187, 190, 213, 226, 322, 523, 575, 604, 607, 617, 623], "look": [96, 528, 529, 583, 589, 626], "old_input": 96, "insert_new_node_on_input": 96, "scalar": [96, 97, 161, 162, 285, 311, 589, 618], "wa": [96, 133, 162, 463, 529, 572, 616, 624], "add_graph_input": 96, "order": [96, 147, 235, 236, 256, 275, 277, 278, 294, 313, 314, 315, 319, 320, 326, 328, 423, 426, 435, 496, 525, 549, 589, 614, 617, 622, 624], "matter": [96, 171, 209, 619], "assum": [96, 189, 225, 238, 259, 280, 529, 583, 609], "main": [96, 145, 161, 197, 272, 307, 322, 474, 511, 525, 579, 584, 596, 598, 610, 615, 618], "insert_node_on_output": 96, "produc": [96, 577], "goe": 96, "insert_new_node_on_output": 96, "find_output_consum": 96, "replace_all_input": 96, "new_input": 96, "_output_to_consum": 96, "determin": [96, 296, 299, 306, 334, 507, 523, 525, 615], "impact": [96, 313, 316, 317, 319, 320, 620, 624], "replace_input": 96, "extract_sub_graph_nod": 96, "outputs_nam": 96, "input_check": 96, "remove_unused_input": 96, "output_id": 96, "delete_unused_nod": 96, "safe_to_remove_nod": 96, "safe": [96, 116, 334, 524], "convert_qdq_nod": 96, "q_node": 96, "dq_node": 96, "delete_qdq_nod": 96, "onnxnod": 97, "data_format": [97, 175, 179, 184, 186, 187, 213, 217, 222, 223], "output_dtyp": 97, "get_value_attr": 97, "get_onnx_attr": 97, "child_nam": 97, "is_nhwc": 97, "is_scalar": 97, "is_graph_input": 97, "is_graph_input_default_const": 97, "is_whil": 97, "get_attr": 97, "get_attr_valu": 97, "get_attr_int": 97, "get_attr_str": 97, "encod": [97, 238, 247, 256, 280, 623], "utf": [97, 189, 225], "8": [97, 107, 158, 189, 225, 276, 484, 525, 583, 587, 614, 616, 624, 627], "set_attr": 97, "set_attr_onnx": 97, "need_skip": 97, "possibli": [97, 256], "scalar_to_dim1": 97, "set_tensor_valu": 97, "new_val": 97, "get_body_graph": 97, "bodi": [97, 523], "set_body_graph_as_attr": 97, "attr_nam": 97, "get_implicit_input": 97, "implicit": 97, "being": [97, 142, 238, 250, 275, 280, 294, 411], "schema": 98, "onnxopschema": 98, "since_vers": 98, "from_onnx_schema": 98, "construct": [98, 173, 176, 177, 180, 184, 187, 188, 193, 194, 195, 196, 198, 211, 214, 215, 218, 283, 284, 287, 289, 293, 332, 523, 575, 579, 615, 624], "has_attribut": 98, "get_schema": 98, "max_inclusive_opset_vers": 98, "get_max_supported_opset_vers": 98, "packag": [98, 314, 347, 355, 361, 363, 364, 366, 367, 368, 371, 372, 375, 377, 396, 397, 401, 404, 410, 412, 415, 416, 422, 441, 443, 448, 451, 454, 455, 457, 460, 466, 471, 475, 509, 529, 572, 582, 587, 609, 610, 616, 620, 624], "set_nam": 99, "find_opset": 99, "assert_error": 99, "bool_val": 99, "error_msg": 99, "messag": [99, 138, 494, 506, 511, 624], "map_numpy_to_onnx_dtyp": 99, "np_dtype": 99, "map_onnx_to_numpy_typ": 99, "onnx_typ": 99, "add_port_to_nam": 99, "nr": 99, "get_tensorflow_node_attr": 99, "pars": [99, 133, 136, 147, 173, 174, 186, 190, 211, 212, 223, 226, 256, 300, 341, 352, 357, 380, 381, 383, 386, 387, 388, 389, 392, 445, 449, 453, 458, 461, 467, 486, 494, 502, 513, 623], "get_tensorflow_tensor_shap": 99, "get_tensorflow_node_shape_attr": 99, "map_tensorflow_dtyp": 99, "get_tensorflow_tensor_data": 99, "convert_tensorflow_tensor_to_onnx": 99, "read_tensorflow_node_attr": 99, "read": [99, 140, 175, 178, 190, 213, 216, 226, 234, 261, 266, 270, 272, 307, 409, 413, 414, 575, 619, 621], "infer_onnx_shape_dtyp": 99, "opset_vers": [99, 134, 158, 228, 230, 231, 294, 581], "input_shap": [99, 116, 177, 215, 291, 423, 426, 435, 574, 575], "input_dtyp": 99, "sometim": [99, 104, 133, 525, 614, 618], "make_onnx_shap": 99, "seqtyp": 99, "tensor_dtyp": 99, "around": 99, "signifi": 99, "make_onnx_inputs_output": 99, "elem_typ": 99, "datatyp": [99, 104, 133, 158, 316, 619, 624], "save_protobuf": 99, "as_text": 99, "is_onnx_domain": 99, "is_list_or_tupl": 99, "are_shapes_equ": 99, "src": [99, 158, 610], "dest": 99, "equal": [99, 135, 140, 152, 339, 589, 615], "get_subgraphs_from_onnx": 99, "model_proto": 99, "over": [99, 175, 179, 184, 213, 217, 222, 238, 242, 280, 284, 292, 314, 580, 584, 586, 589, 600, 609, 617, 624], "df": [99, 247, 293, 294], "initialize_name_count": 99, "avoid": [99, 173, 211, 293, 525, 622], "conflict": [99, 582], "make_nam": 99, "get_index_from_strided_slice_of_shap": 99, "outputs_to_valu": 99, "stride": [99, 184, 187, 190, 226, 300, 623], "slice": 99, "compute_const_folding_using_tf": 99, "const_node_valu": 99, "graph_output": 99, "generategraphwithqdqpattern": 101, "op_wise_config": [101, 125, 130, 324, 325], "quantized_nod": 101, "quantizaiton": 101, "mergeduplicatedqdqoptim": 102, "y": [103, 190, 226, 314, 595, 623], "shareqdqforitexypatternoptim": 103, "break": [103, 579], "graphanalyz": 104, "extend_engin": 104, "analyz": [104, 133, 293, 614, 615, 621, 622], "under": [104, 116, 175, 213, 338, 526, 572, 575, 588, 589, 592, 597, 598, 609, 612, 614, 615, 618, 622, 624], "singleton": [104, 276, 339, 475, 483], "getter": [104, 200, 227, 234, 258, 261, 266, 274, 275, 294, 424], "_graph": 104, "retrun": 104, "get_graph_input_output": 104, "doesn": [104, 184, 187, 190, 226, 275, 493, 529, 579, 610, 626], "know": [104, 193, 194, 227, 234, 261, 266, 480, 579, 620], "clearli": 104, "similar": [104, 256, 617, 624, 626], "featur": [104, 142, 158, 173, 174, 186, 190, 192, 211, 212, 223, 226, 256, 276, 524, 528, 573, 574, 576, 577, 590, 591, 592, 596, 597, 600, 609, 615, 616, 620, 623], "summarize_graph": 104, "py": [104, 140, 142, 236, 238, 239, 240, 271, 278, 280, 281, 282, 306, 510, 525, 529, 572, 579, 587, 594, 596, 597, 598, 604, 607, 618, 620, 622], "writtern": 104, "googl": [104, 528, 590, 616], "query_fusion_pattern_nod": 104, "public": [104, 523, 604, 607], "aggreg": [104, 488], "statu": [104, 359, 370, 373, 378, 380, 386, 388, 389, 477, 490, 506, 519, 523, 574, 611], "pleas": [104, 142, 145, 151, 173, 174, 175, 178, 179, 184, 211, 212, 213, 216, 234, 261, 266, 269, 271, 272, 296, 299, 307, 525, 526, 527, 528, 529, 572, 573, 575, 578, 579, 587, 589, 590, 592, 593, 597, 600, 614, 615, 619, 620, 621, 624], "_search_pattern": 104, "remove_node_with_single_input_output": 104, "rebuild": [104, 593, 602, 606], "except": [104, 276, 339, 475, 483, 484, 494, 509, 519], "fail": [104, 488, 525], "replace_const_nod": 104, "new_const_nod": 104, "target_nod": 104, "old_constant_node_nam": 104, "replace_al": 104, "outdat": 104, "replace_constant_graph_with_constant_nod": 104, "new_nod": 104, "old_end_node_nam": 104, "replace_single_nod": 104, "old_output_node_nam": 104, "old_output_nam": [104, 292], "old_input_node_nam": 104, "old_input_nam": [104, 292], "top": [104, 190, 226, 233, 234, 242, 261, 266, 274, 283, 284, 589, 609, 623, 627], "bottom": [104, 572], "replace_nod": 104, "old_node_nam": 104, "output_nodes_nam": 104, "node_name_detail": 104, "add_nod": [104, 292, 408], "start_node_nam": 104, "end_node_nam": 104, "get_frame_info": 104, "frame": 104, "ordereddict": [104, 322, 328, 381, 386, 495], "parent_frame_detail": 104, "parse_graph": 104, "outputnod": 104, "graphrewriterhelp": 104, "encapsul": [104, 161, 162, 285, 311, 591], "compare_node_attr": 104, "node_a": 104, "node_b": 104, "compar": [104, 142, 242, 284, 295, 322, 572, 578, 589, 615, 618, 621, 622, 624], "create_nod": [104, 133], "create_constant_nod": [104, 133], "set_attr_dtyp": [104, 133], "set_attr_tensor": [104, 133], "set_attr_type_list": [104, 133], "set_attr_string_list": [104, 133], "set_attr_str": [104, 133], "set_attr_int_list": 104, "set_attr_int": [104, 133], "set_attr_float": [104, 133], "set_attr_bool": [104, 133], "generate_int32_bias_for_conv": 104, "bias_tensor": 104, "channel_s": 104, "max_input": 104, "min_input": 104, "max_filter_tensor": [104, 339], "min_filter_tensor": [104, 339], "activation_rang": 104, "weights_rang": 104, "127": [104, 176, 177, 214, 215, 575, 618], "rang": [104, 176, 177, 190, 214, 215, 226, 238, 247, 280, 329, 528, 529, 575, 577, 578, 579, 612, 614, 615, 618, 623], "int32_bia": 104, "generate_int32_bias_for_matmul": 104, "weights_tensor": 104, "input_rang": 104, "max_filter_valu": 104, "min_filter_valu": 104, "gen_valid_sampling_log": 104, "log_path": 104, "log": [104, 138, 191, 234, 261, 266, 333, 336, 342, 359, 370, 373, 380, 386, 388, 389, 445, 479, 485, 486, 487, 488, 493, 507, 525, 572, 600, 621, 622, 624], "analysis_rnn_model": 104, "quantize_lay": [105, 106, 108], "fake_quant": [105, 106, 108], "quantize_config": [105, 106, 108], "quantize_help": [105, 106, 108], "quantize_wrapp": [105, 106, 108], "fuse_qdq_bn": [105, 106, 124], "fuse_qdq_concatv2": [105, 106, 124], "fuse_qdq_conv": [105, 106, 124], "fuse_qdq_deconv": [105, 106, 124], "fuse_qdq_in": [105, 106, 124], "fuse_qdq_matmul": [105, 106, 124], "fuse_qdq_pool": [105, 106, 124], "optimize_qdq": [105, 106, 124], "optimize_lay": [106, 108, 111], "quantize_layer_add": [106, 108, 111], "quantize_layer_bas": [106, 108, 111, 113, 115], "quantize_layer_bn": [106, 108, 111], "fakequantizebas": 107, "abc": [107, 240, 282, 423, 486, 529, 622, 624], "get_config": [107, 116, 520], "serial": [107, 173, 211, 392, 399, 400, 430, 482, 484, 496, 497, 501, 502], "fakequant": 107, "classmethod": [107, 116, 148, 150, 262, 263, 264, 324, 325, 327, 335, 481, 515, 517, 520], "from_config": [107, 116], "instanti": [107, 335, 612], "requir": [107, 116, 200, 234, 238, 250, 275, 280, 293, 295, 312, 315, 322, 341, 343, 352, 355, 410, 416, 423, 426, 428, 435, 441, 448, 449, 450, 451, 453, 454, 455, 457, 460, 461, 466, 471, 475, 525, 529, 572, 573, 574, 578, 579, 583, 590, 591, 593, 603, 609, 613, 614, 615, 618, 620, 621, 622, 624, 626], "per_channel": [107, 133, 583, 626], "num_bit": 107, "symmetr": [107, 618, 623, 624], "narrow_rang": 107, "quantizeconfig": [109, 110, 116], "There": [109, 242, 275, 284, 313, 572, 577, 583, 586, 589, 590, 592, 624, 626], "global": [109, 158, 269, 276, 299, 300, 301, 303, 304, 305, 306, 339, 507, 525, 614, 615, 617, 624], "add_quantize_recip": 109, "layer_nam": [109, 269, 299], "For": [109, 151, 175, 189, 190, 200, 213, 225, 226, 234, 238, 239, 240, 242, 247, 269, 272, 280, 281, 282, 284, 285, 299, 307, 311, 315, 322, 484, 523, 525, 527, 529, 572, 578, 579, 581, 583, 586, 592, 594, 595, 597, 600, 614, 619, 622, 624, 626, 627], "conv5_block3_3_conv": 109, "flase": 109, "conv5_block3_3_add": 109, "query_lay": 109, "layer_recip": 109, "remove_lay": 109, "get_quantize_recip": 109, "is_empti": 109, "clear_quantize_recip": 109, "clear": [109, 171, 209, 235, 241, 242, 250, 277, 283, 284, 529, 549, 583, 589], "class": [110, 147, 259, 285, 311, 417, 418, 525, 526, 574, 575, 577, 589, 600, 611, 612, 620, 622, 624, 626], "init_quantize_config": 110, "begin": [110, 200, 234, 261, 266, 271, 272, 296, 300, 304, 305, 306, 307, 329, 577, 578, 614, 624], "model_nam": [110, 250, 369, 375, 494], "special": [110, 295, 525, 574, 589, 611], "qat_clone_funct": 110, "leav": [110, 603], "quantizewrapp": [110, 116], "wrapped_lay": 110, "config_quantizable_lay": 112, "quantizelayeradd": 113, "quantizelayerbas": [113, 114, 115], "quantizelay": 114, "quantizelayerbatchnorm": 115, "quantizewrapperbas": 116, "trainabl": 116, "sublay": 116, "trainable_weight": 116, "track": [116, 322, 609, 621], "descent": 116, "non_trainable_weight": 116, "thei": [116, 191, 234, 256, 299, 335, 523, 577, 583, 589, 590, 597, 611, 614, 615], "manual": [116, 175, 213, 575, 592, 598, 600, 603], "add_loss": 116, "regular": [116, 235, 270, 277, 308, 614], "eager": [116, 272, 307, 341, 449, 453, 461, 579, 586, 618, 619, 622, 627], "gradienttap": 116, "tensorshap": 116, "compute_output_shap": 116, "caus": [116, 593, 614, 615], "state": [116, 142, 241, 242, 254, 256, 283, 284, 294, 324, 327, 595, 614, 615], "happen": 116, "later": [116, 145, 151, 622], "integ": [116, 227, 234, 238, 242, 259, 269, 271, 273, 280, 284, 299, 306, 309, 529, 618, 624], "query_input_index": 116, "design": [116, 172, 194, 195, 200, 210, 234, 249, 274, 283, 284, 315, 526, 597, 600, 614, 615, 618], "logic": [116, 161, 162, 322, 506, 626], "live": 116, "output_obj": 116, "fusenodestartwithfusedbatchnormv3": [117, 127], "quantizenodebas": [117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 131, 132], "_quantizedfusedbatchnorm": 117, "apply_newly_bn_relu_fus": [117, 127], "match_node_nam": [117, 119, 120, 121, 122, 127, 129, 131], "apply_newly_bn_leakyrelu_fus": [117, 127], "get_longest_fus": [117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 131, 132], "longest": [117, 118, 119, 120, 121, 122, 123, 127, 129, 131, 184, 187, 189, 190, 225, 226, 623], "apply_the_transform": [117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 131, 132], "concatv2": [118, 128, 139, 583], "fusenodestartwithconcatv2": [118, 128], "quantizedconcatv2": [118, 128], "fusenodestartwithconv2d": [119, 129], "apply_conv3d_add_addn_relu_fus": 119, "addn": [119, 129, 583], "apply_conv3d_add_addn_fus": 119, "apply_conv3d_add_relu_fus": 119, "apply_conv3d_add_fus": 119, "apply_conv3d_single_fus": 119, "apply_newly_conv_biasadd_relu_fus": 119, "elu": [119, 122], "sigmoid": [119, 122], "apply_newly_conv_biasadd_fus": 119, "apply_newly_conv_single_fus": 119, "apply_newly_conv_biasadd_addn_relu_fus": 119, "apply_conv_biasadd_hardswish_fus": 119, "hardswish": 119, "apply_newly_conv_biasadd_swishf32_fus": 119, "swishf32": 119, "swish_f32": 119, "apply_newly_conv_biasadd_addn_fus": 119, "patter": 119, "conv2dbackpropinput": 120, "conv3dbackpropinputv2": 120, "fusenodestartwithdeconv2d": 120, "apply_single_deconv2d_fus": 120, "apply_deconv2d_biasadd_fus": 120, "apply_single_deconv3d_fus": 120, "apply_deconv3d_biasadd_fus": 120, "fusedinstancenorm": 121, "fusenodestartwithfusedinstancenorm": 121, "apply_newly_in_relu_fus": 121, "batchmatmul": 122, "batchmatmulv2": 122, "fusenodestartwithmatmul": [122, 131], "apply_matmul_biasadd_relu_fus": [122, 131], "tanh": 122, "apply_matmul_biasadd_fus": [122, 131], "apply_batchmatmulv2_fus": 122, "apply_batchmatmulv2_mul_add_fus": 122, "avgpool": [123, 132, 583], "fusenodestartwithpool": [123, 132], "optimizeqdqgraph": 125, "op_wise_sequ": [125, 130], "quantizegraphbas": [125, 126, 130], "get_quantized_nod": 125, "quantizegraph": 126, "register_transform": 126, "virtual": [126, 136, 616], "deriv": [126, 200, 227, 234, 269, 271, 273, 296, 299, 306, 308, 309], "remove_dead_nod": 126, "longer": [126, 173, 184, 187, 190, 211, 226, 575, 623], "eightbitize_single_input_tensor_nod": 126, "original_nod": 126, "add_op_funct": 126, "add_output_graph_nod": 126, "output_nod": [126, 369], "remove_redundant_quant": 126, "old_graph": 126, "create_nodes_map": 126, "apply_conv_single_fus": 129, "apply_conv_biasadd_relu_fus": 129, "apply_conv_biasadd_fus": 129, "apply_conv_biasadd_addn_relu_fus": 129, "quantizegraphforintel": 130, "itself": [132, 286, 287, 288, 290, 292, 293, 597], "herlper": 133, "quantizegraphhelp": 133, "sever": [133, 184, 187, 190, 226, 273, 309, 526, 572, 577, 578, 586, 590, 602, 606, 614, 615, 617, 623, 624, 626], "staticmethod": 133, "get_sorted_graph": 133, "reorder": [133, 254, 256], "easier": [133, 134, 572, 602, 606, 609, 616], "in_graph": [133, 140], "ouput": 133, "prune": [133, 158, 200, 234, 262, 263, 264, 266, 267, 269, 270, 271, 273, 275, 276, 294, 296, 297, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 329, 339, 350, 357, 370, 376, 386, 388, 415, 423, 435, 450, 475, 483, 494, 499, 528, 558, 579, 580, 583, 584, 586, 612, 616, 618, 626], "aren": 133, "uncondition": 133, "copy_attr": 133, "attr_valu": 133, "unique_node_name_from_input": 133, "ensure_tensor_name_has_port": 133, "sure": [133, 269, 271, 273, 299, 306, 309, 423, 572, 573], "explicit": [133, 523], "generate_quantized_weight_nod": 133, "host_op_typ": 133, "input_nod": [133, 369], "weight_bit": 133, "enter_nod": 133, "tensorflowqdqtoonnxqdqconvert": 134, "shape_overrid": 134, "inputs_as_nchw": [134, 228, 230], "default_opset_vers": 134, "duplicate_tf_quantizev2_nod": 134, "tf_graph_optim": 134, "transpose_input": 134, "request": [134, 403, 415, 416, 417, 438, 439, 442, 463, 475, 479, 506, 508, 510, 511, 515, 517, 518, 520, 572, 618], "correct": [135, 152, 238, 239, 240, 242, 270, 280, 281, 282, 283, 284, 310, 322, 444, 523, 572, 592], "biascorrect": 135, "fp32_graph": 135, "weight_empir": 135, "graphtransformbas": [135, 136, 138, 139], "Will": [135, 164, 167, 184, 507, 577, 586], "our": [135, 526, 528, 581, 610, 621], "task": [135, 173, 180, 211, 218, 242, 256, 283, 284, 322, 575, 577, 578, 586, 589, 614, 615], "close": [135, 152], "w_int8": [135, 152], "w_fp32": [135, 152], "ratio": [135, 152, 184, 186, 187, 190, 223, 226, 234, 261, 266, 269, 271, 272, 273, 299, 303, 306, 307, 309, 575, 614, 615, 623, 627], "differ": [135, 145, 148, 150, 152, 166, 175, 190, 192, 204, 213, 226, 233, 234, 235, 241, 242, 249, 257, 258, 260, 263, 269, 274, 275, 277, 283, 284, 295, 299, 334, 523, 525, 526, 549, 572, 574, 575, 577, 579, 580, 581, 585, 586, 589, 591, 602, 606, 611, 614, 618, 622, 623, 624], "minim": [135, 152, 314, 577, 580, 584, 589, 602, 606, 614, 615, 618, 624], "round": [135, 152, 618], "scale_c": [135, 152], "shift": [135, 152, 184, 186, 187, 223, 610, 623], "notic": [135, 152, 191, 234, 588, 620], "empir": [135, 152], "solut": [135, 152, 247, 528, 529, 582, 594, 598, 603, 616, 624], "graphtransform": 136, "input_pb": [136, 138, 139], "parse_input_pb": 136, "pbdef": 136, "generate_input_map": 136, "get_node_name_from_input": 136, "insertlog": 138, "node_name_list": 138, "show_nam": 138, "show_op": 138, "first_n": 138, "summar": [138, 577], "1024": [138, 175, 213, 595], "dump_fp32": 138, "rerang": 139, "rerangequantizedconcat": 139, "rerange_quant": 139, "version1_lt_version2": [140, 339], "version1": [140, 339], "version2": [140, 339], "version1_gt_version2": [140, 339], "greater": [140, 339], "version1_eq_version2": [140, 339], "version1_gte_version2": [140, 339], "version1_lte_version2": [140, 339], "disable_random": 140, "seed": [140, 158, 247, 249, 260, 276, 333, 339, 504, 626], "disabl": [140, 482, 511, 523, 609, 619], "read_graph": 140, "in_graph_is_binari": 140, "write_graph": 140, "out_graph_def": 140, "out_graph_fil": 140, "write": [140, 182, 183, 184, 220, 221, 222, 238, 280, 339, 579, 585, 592, 622], "is_ckpt_format": 140, "model_path": [140, 292, 409, 424, 429, 494], "is_saved_model_format": 140, "saved_model": [140, 234, 244, 293, 415, 422, 432], "get_estimator_graph": 140, "estim": [140, 142, 242, 245, 246, 250, 257, 258, 284, 293, 624], "input_fn": [140, 293], "get_tensor_by_nam": 140, "try_cnt": 140, "consid": [140, 242, 283, 284, 321, 523, 577, 610, 624], "import": [140, 153, 158, 234, 244, 247, 276, 285, 295, 300, 311, 329, 339, 525, 526, 528, 573, 574, 575, 577, 578, 579, 581, 584, 589, 590, 591, 592, 596, 598, 611, 612, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624], "scope": [140, 200, 234, 291, 614], "suffix": 140, "time": [140, 158, 184, 187, 190, 226, 242, 254, 276, 283, 284, 295, 314, 339, 480, 486, 487, 492, 507, 579, 582, 597, 599, 602, 606, 609, 610, 611, 614, 615, 616, 618, 621, 622, 623, 624], "got": [140, 582, 622], "iterator_sess_run": 140, "sess": [140, 293], "iter_op": [140, 293], "feed_dict": [140, 172, 210], "output_tensor": [140, 293], "integr": [140, 192, 529, 572, 610], "makeiter": 140, "predict": [140, 153, 184, 187, 190, 194, 195, 226, 235, 239, 240, 241, 242, 248, 250, 276, 277, 281, 282, 283, 284, 526, 549, 577, 589, 600, 622, 623], "pred": [140, 241, 242, 283, 284, 589], "collate_tf_pr": 140, "collat": [140, 147], "tbe": 140, "get_input_output_node_nam": 140, "fix_ref_type_of_graph_def": 140, "fix": [140, 173, 211, 271, 306, 524, 575, 596, 615, 624], "ref": 140, "tool": [140, 228, 230, 339, 528, 529, 602, 606, 616, 618], "strip_unused_lib": 140, "offici": [140, 235, 239, 240, 277, 281, 282, 523, 572, 589], "r1": 140, "15": [140, 249, 583, 627], "get_graph_def": 140, "auto_input_output": 140, "get_model_input_shap": 140, "inout": 140, "get_tensor_val_from_graph_nod": 140, "tensor_v": 140, "int8_node_name_revers": 140, "revers": [140, 572], "tf_diagnosis_help": 140, "generate_feed_dict": 140, "input_tensor": [140, 293, 294], "bf16modulewrapp": 141, "nn": [141, 142, 147, 158, 192, 228, 231, 250, 254, 256, 276, 285, 294, 311, 335, 525, 577, 581, 591, 622], "bf16modul": 141, "mixed_precision_model": 141, "bf16_symbolic_trac": 141, "fx_sub_module_list": 141, "_description_": 141, "node_collector": 142, "record": [142, 147, 173, 174, 175, 179, 181, 183, 184, 192, 199, 211, 212, 213, 219, 295, 313, 575, 621, 622, 624], "hook_fn_act": 142, "inp": 142, "outp": 142, "hessiantrac": 142, "refer": [142, 145, 151, 173, 211, 234, 235, 236, 241, 242, 261, 266, 269, 271, 272, 277, 278, 283, 284, 296, 299, 307, 525, 529, 549, 573, 574, 575, 578, 579, 585, 587, 588, 589, 590, 592, 597, 600, 611, 614, 617, 620, 623, 624], "yao": 142, "zhewei": 142, "et": [142, 256], "al": [142, 256], "pyhessian": 142, "network": [142, 247, 250, 271, 296, 299, 317, 526, 572, 577, 578, 581, 613, 616, 618, 624], "2020": 142, "ieee": [142, 590], "confer": [142, 615], "big": 142, "dong": 142, "zhen": 142, "hawq": [142, 317, 532, 624], "v2": [142, 317, 579, 587, 598, 620, 624, 627], "advanc": [142, 503, 523, 528, 618, 626], "system": [142, 191, 335, 339, 482, 509, 510, 573, 595, 614], "33": [142, 247, 627], "18518": 142, "18529": 142, "http": [142, 173, 175, 211, 213, 235, 236, 238, 239, 240, 256, 269, 271, 272, 277, 278, 280, 281, 282, 296, 299, 307, 519, 525, 528, 572, 575, 584, 587, 588, 598, 604, 607, 620], "github": [142, 173, 211, 235, 236, 239, 240, 269, 272, 277, 278, 281, 282, 299, 307, 438, 440, 481, 524, 528, 572, 575, 580, 584, 587, 588, 598, 604, 607, 620], "com": [142, 173, 211, 235, 236, 239, 240, 269, 272, 277, 278, 281, 282, 299, 307, 487, 523, 528, 572, 575, 584, 587, 588, 592, 598, 620, 621, 627], "openvinotoolkit": 142, "nncf": 142, "blob": [142, 235, 236, 239, 240, 269, 277, 278, 281, 282, 299, 598], "develop": [142, 295, 494, 524, 525, 587, 590, 592, 598, 609, 616, 618, 619, 621], "mse_metric_gap": [142, 394], "fp32_tensor": [142, 394], "euclidean": [142, 394, 577], "distanc": [142, 394, 577], "get_fused_map": 142, "weight_to_op": 142, "get_devic": 142, "register_act_grad_hook": 142, "append": [142, 147, 148, 150, 158, 275, 292, 314, 324, 326, 525, 578, 612], "reset_act_gradient_and_hook": 142, "get_param": [142, 190, 226], "get_vthv_weight": 142, "num_sampl": [142, 242, 283, 284], "vthv": 142, "get_weight_trac": 142, "op_name_to_trac": 142, "get_act_trac": 142, "res_dict": 142, "get_act_gap": 142, "gap": [142, 581, 591], "get_avg_trac": 142, "averag": [142, 238, 239, 240, 242, 280, 281, 282, 283, 284, 589, 624], "compare_weight": 142, "float_dict": 142, "quantized_dict": 142, "usag": [142, 172, 210, 234, 238, 244, 275, 280, 295, 494, 572, 575, 579, 580, 589, 592, 600, 611, 617, 623], "wt_compare_dict": 142, "float_model": 142, "state_dict": [142, 256, 579, 622], "compute_error": 142, "weight_dict": 142, "hawq_top": 142, "modul": [143, 228, 234, 251, 252, 253, 257, 267, 268, 298, 302, 483, 491, 499, 525, 572, 574, 577, 581, 586, 589, 591, 614, 617, 619, 622], "dataread": [144, 232], "sample_s": 144, "100": [144, 145, 153, 158, 175, 179, 184, 213, 238, 247, 276, 280, 573, 575, 579, 585, 617, 618, 623, 624, 626, 627], "ortq": [144, 232], "get_next": [144, 232], "torchsmoothqu": 145, "traced_model": [145, 146], "accur": [145, 151], "larg": [145, 151, 238, 280, 528, 574, 577, 614, 615, 627], "languag": [145, 151, 235, 256, 277, 523, 549, 616], "free": [145, 151, 161, 162, 311, 322, 523, 528, 589, 598, 603, 611, 621], "absorb": [145, 151], "inplac": 145, "you": [145, 171, 173, 209, 211, 238, 254, 256, 271, 280, 524, 525, 572, 575, 579, 581, 587, 588, 589, 592, 594, 595, 597, 602, 606, 609, 610, 614, 620, 621, 622], "convtranspose2d": 145, "balanc": [145, 181, 183, 184, 219, 613], "difficulti": 145, "Not": [145, 191, 200, 234, 261, 266, 324, 325, 326, 339, 478, 526], "architectur": [145, 191, 245, 246, 256, 257, 258, 260, 528, 558, 572, 573, 577, 614, 615, 616], "orig": 145, "benefit": [145, 612, 614], "graphtrac": 145, "trace_and_fuse_sub_graph": 146, "get_embedding_contigu": 147, "embed": [147, 256], "contigu": [147, 614], "collate_torch_pr": 147, "collate_result": 147, "input2tupl": 147, "append_attr": 147, "fx_model": 147, "fx_white_list": 147, "generate_activation_observ": 147, "observ": [147, 621, 622, 624], "what": [147, 171, 209, 306, 329, 523, 572], "check_cfg_and_qconfig": 147, "op_infos_from_cfg": 147, "output_tensor_ids_op_nam": 147, "paser_cfg": 147, "ops_nam": 147, "get_quantizable_ops_from_cfg": 147, "input_tensor_ids_op_nam": 147, "auto_copi": 147, "fetch_modul": 147, "set_modul": 147, "new_modul": 147, "simple_infer": 147, "get_example_input": 147, "example_inp": 147, "get_fallback_ord": 147, "fall": 147, "confid": 147, "ordered_op": 147, "get_mse_order_per_fp32": 147, "influenc": 147, "fallback_ord": 147, "get_mse_order_per_int8": 147, "get_torch_vers": 147, "algorithm_registri": [148, 150], "algorithm_typ": [148, 150], "locat": [148, 150, 190, 226, 579, 595, 602, 606, 609, 618, 620, 623, 626], "registr": [148, 150, 175, 179, 182, 183, 184, 187, 190, 197, 213, 217, 220, 221, 222, 224, 226, 264], "support_algorithm": [148, 150], "algorithmschedul": [148, 150], "conf": [148, 150, 153, 158, 161, 162, 191, 234, 243, 244, 261, 266, 275, 276, 285, 286, 287, 292, 293, 294, 295, 300, 301, 303, 304, 305, 311, 314, 315, 317, 319, 321, 322, 324, 326, 329, 502, 505, 525, 526, 528, 573, 577, 584, 585, 590, 591, 612, 618, 619, 621, 624], "phase": [148, 150, 275, 306, 307, 526, 614, 615, 618, 619, 624], "adaptor": [148, 150, 200, 234, 328, 332, 528, 539, 586, 619, 620, 622], "append_algorithm": [148, 150], "reset_exec_algorithm": [148, 150], "fastbiascorrect": [149, 152], "fast_bias_correct": [150, 276], "weight_correct": [150, 276], "kernel": [151, 482, 529, 613, 614, 624], "weightcorrect": 152, "ep": [152, 590], "1e": [152, 626], "05": [152, 238, 242, 280, 283, 284, 487, 589, 627], "conf_fname_or_obj": [153, 191, 200, 227, 233, 234, 243, 244, 245, 246, 257, 258, 261, 266, 274, 275, 276], "goal": [153, 162, 227, 233, 234, 261, 266, 274, 276, 285, 295, 305, 311, 322, 495, 574, 612, 618, 624], "prefer": [153, 233, 234, 274, 276, 285, 311], "space": [153, 161, 162, 233, 234, 240, 245, 247, 249, 257, 258, 259, 260, 274, 276, 282, 285, 295, 306, 311, 312, 314, 315, 316, 317, 319, 321, 322, 324, 326, 494, 523, 524, 526, 529, 614, 618, 626], "batch_siz": [153, 163, 165, 170, 171, 172, 173, 174, 179, 184, 193, 194, 201, 203, 208, 209, 210, 211, 212, 228, 231, 250, 255, 276, 294, 345, 359, 370, 472, 495, 526, 574, 575, 579, 581, 585, 592, 618], "collate_fn": [153, 163, 165, 166, 170, 184, 193, 194, 201, 203, 204, 208, 276, 575], "last_batch": [153, 163, 165, 170, 172, 184, 193, 194, 201, 203, 208, 210, 276], "rollov": [153, 163, 165, 170, 172, 184, 193, 194, 201, 203, 208, 210, 276], "sampler": [153, 163, 165, 167, 170, 184, 193, 194, 201, 203, 205, 208, 222, 234, 276, 324, 325, 579], "batch_sampl": [153, 163, 165, 170, 184, 193, 194, 201, 203, 208, 276], "num_work": [153, 163, 165, 170, 184, 193, 194, 201, 203, 208, 250, 276, 618], "pin_memori": [153, 163, 165, 170, 184, 193, 194, 201, 203, 208, 276], "shuffl": [153, 163, 165, 170, 184, 193, 194, 201, 203, 208, 276, 618], "metric_cl": [153, 194, 195, 241, 242, 276, 283, 284], "mani": [153, 249, 250, 276, 295, 312, 313, 587, 624, 626], "alwai": [153, 194, 195, 238, 276, 280, 283, 284, 589], "user_metr": [153, 194, 195, 276, 283, 284], "sub_class": [153, 276], "basemetr": [153, 241, 242, 276, 283, 284], "postprocess_cl": [153, 184, 187, 188, 194, 198, 276], "fit": [153, 158, 285, 299, 311, 314, 525, 528, 573, 574, 575, 579, 584, 585, 589, 590, 591, 614, 615, 618, 619], "b_dataload": [153, 158, 191, 234, 573], "b_func": [153, 191, 234, 573], "benchmarkconfig": [153, 158, 573], "cores_per_inst": [153, 158, 359, 495, 573, 617], "num_of_inst": [153, 158, 495, 573, 617], "eval_dataload": [153, 158, 161, 162, 200, 233, 234, 244, 275, 285, 311, 314, 315, 317, 319, 321, 322, 528, 573, 584, 585, 624], "prunerv2": 154, "target_spars": [154, 158, 276, 299, 329, 614, 617, 626], "pruning_typ": [154, 158, 276, 329, 614], "start_step": [154, 158, 271, 276, 306, 329, 614, 617], "end_step": [154, 158, 271, 276, 306, 329, 614, 617], "pruning_scop": [154, 158, 276, 614], "pruning_frequ": [154, 158, 276, 306, 614], "min_sparsity_ratio_per_op": [154, 158, 276, 299, 614], "max_sparsity_ratio_per_op": [154, 158, 276, 299, 306, 614], "sparsity_decay_typ": [154, 158, 276, 614], "pruning_op_typ": [154, 158, 276, 614], "reg_typ": 154, "criterion_reduce_typ": 154, "resume_from_pruned_checkpoint": 154, "similiar": [154, 158, 276], "cfg_fname": 154, "parser": [154, 276, 352, 357, 475, 479, 483, 513], "quantization_conf": 154, "dotdict": [154, 295, 310], "pruning_conf": 154, "graph_optimization_conf": [154, 233, 234], "mixedprecision_conf": 154, "benchmark_conf": 154, "distillation_conf": [154, 227, 234], "nasconfig": [154, 234, 246, 257, 258, 526], "search_spac": [154, 245, 257, 258, 259, 260], "search_algorithm": [154, 234, 257, 258, 276, 526], "na": [154, 234, 276, 289, 558, 586], "procedur": [154, 299, 315, 526], "deep_get": [155, 295], "dot": [155, 494, 590, 618], "eg": [155, 175, 179, 184, 213, 217, 222, 575, 617], "person": [155, 523, 616], "john": 155, "deep": [155, 528, 529, 574, 586, 587, 590, 592, 594, 597, 598, 600, 603, 609, 616, 618, 624, 627], "deep_set": [155, 295], "sex": [155, 523], "male": 155, "notat": 155, "check_valu": 158, "supported_typ": 158, "supported_valu": 158, "_datatyp": 158, "random_se": [158, 314, 329, 378, 504, 626], "1978": 158, "workspac": [158, 276, 293, 294, 329, 338, 339, 380, 381, 386, 388, 389, 390, 420, 493, 495, 504, 591], "default_workspac": 158, "resume_from": [158, 339], "warmup": [158, 495, 573, 617], "inter_num_of_thread": [158, 617], "intra_num_of_thread": [158, 617], "accuracycriterion": [158, 462, 624], "higher_is_bett": [158, 589, 624, 626], "rel": [158, 295, 617, 624, 626, 627], "tolerable_loss": [158, 624], "01": [158, 613, 617, 624, 626, 627], "accuracy_criterion": [158, 276, 295, 611, 617, 624, 626], "absolut": [158, 242, 248, 284, 296, 300, 303, 487, 589, 613, 614, 615, 618, 624], "tuningcriterion": [158, 276, 611, 621, 624], "basic": [158, 189, 225, 245, 257, 269, 276, 299, 318, 322, 324, 325, 329, 586, 587, 617, 621], "strategy_kwarg": [158, 621, 624], "timeout": [158, 162, 276, 322, 504, 617, 624, 626], "max_trial": [158, 276, 504, 624], "tuning_criterion": [158, 276, 611, 621, 624], "earli": [158, 276, 618, 624, 626], "stop": [158, 162, 276, 292, 315, 322, 463, 487, 624, 626], "exit": [158, 276, 313, 572, 590, 626], "see": [158, 184, 187, 190, 226, 235, 238, 254, 277, 280, 523, 525, 527, 572, 588, 602, 603, 606, 609, 610, 622, 624, 627], "concret": [158, 161, 322, 624], "posttrainingquantconfig": [158, 276, 311, 525, 528, 574, 584, 591, 618, 619, 621, 624], "auto": [158, 276, 312, 339, 525, 592, 595, 597, 599, 600], "quant_format": [158, 228, 231, 276, 294, 581], "calibration_sampling_s": [158, 276], "op_type_list": [158, 276, 617, 624], "op_name_list": [158, 276, 624], "excluded_precis": [158, 276, 590, 619], "quant_level": [158, 276, 624], "use_distributed_tun": [158, 276], "_basequantizationconfig": [158, 276], "quantizationawaretrainingconfig": [158, 276, 525, 578, 618, 619, 624], "deepcopi": [158, 276], "model_origin": [158, 276, 619], "qat_op_name_list": [158, 276], "compression_manag": [158, 276, 329, 525, 577, 578, 612, 614, 618], "prepare_compress": [158, 276, 329, 525, 577, 578, 612, 614, 618], "weightpruningconfig": [158, 276, 329, 612, 614], "pruning_config": [158, 276, 614], "9": [158, 249, 276, 525, 587, 614, 615, 617, 624, 626], "snip_momentum": [158, 276, 296, 614], "4x1": [158, 265, 276, 299, 614, 627], "98": [158, 276, 614, 617, 627], "exp": [158, 276, 614, 615], "local_config": [158, 276, 300, 301, 303, 304, 305, 310], "update_config": [158, 266, 276, 307], "10": [158, 175, 213, 238, 276, 280, 314, 472, 528, 572, 573, 575, 587, 614, 617, 623, 624, 627], "weight_compress": [158, 276, 617, 626], "knowledgedistillationlossconfig": [158, 578, 612], "temperatur": [158, 192, 626], "loss_typ": [158, 192, 626], "ce": [158, 192, 626], "loss_weight": [158, 192, 626], "knowledg": [158, 192, 227, 234, 578, 580, 584, 586, 591, 626], "distil": [158, 192, 199, 200, 234, 276, 329, 528, 558, 580, 584, 586, 612, 626], "distillationconfig": [158, 276, 577, 578, 612], "comb": [158, 578], "distillation_criterion": [158, 578, 612], "d_conf": [158, 578, 612], "teacher_model": [158, 192, 227, 234, 276, 577, 578], "q_conf": [158, 578], "intermediatelayersknowledgedistillationlossconfig": 158, "layer_map": [158, 192], "add_origin_loss": [158, 192], "selfknowledgedistillationlossconfig": [158, 276, 577], "distil_loss": [158, 276, 577], "crossentropyloss": [158, 192, 276, 577], "sgd": [158, 197, 276, 577, 617, 626], "lr": [158, 276, 577, 579], "0001": [158, 276, 577, 617], "learning_r": [158, 276, 617, 626], "callabl": [158, 240, 276, 282, 329, 490, 494, 510, 511], "teacher": [158, 192, 227, 234, 256, 276, 577, 578, 627], "altern": [158, 276], "mixedprecisionconfig": [158, 285, 590], "mixedprecis": [158, 234, 243, 285, 348, 452, 500, 558], "mix_precis": [158, 276, 590], "exportconfig": 158, "dynamic_ax": [158, 228, 231, 294, 581], "onnxqlinear2qdqconfig": 158, "onnxqlinear2qdq": 158, "torch2onnxconfig": [158, 581], "qdq_op_fp32_bia": [158, 228, 231, 581], "torch2onnx": [158, 228, 234, 276], "tf2onnxconfig": 158, "tf2onnx": [158, 228, 234, 276], "sigopt": [159, 160, 276, 616], "tpe": [159, 160, 276], "sigopttunestrategi": 161, "q_dataload": [161, 162, 314, 315, 317, 319, 321, 322, 585, 624], "eval_func": [161, 162, 200, 233, 234, 244, 275, 285, 295, 311, 314, 315, 317, 319, 321, 322, 525, 574, 575, 577, 578, 579, 619, 624, 626], "q_hook": [161, 162, 314, 315, 317, 319, 321, 322], "tunestrategi": [161, 162, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 624], "hpo": 161, "mandatori": [161, 162, 311, 626], "yield": [161, 162, 171, 193, 194, 209, 285, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 574, 618, 624], "taken": [161, 162, 285, 311], "reserv": [161, 162, 200, 234, 275, 300], "tuner": [161, 162, 233, 234, 274, 285, 311], "higher": [161, 162, 259, 285, 311, 312, 525, 577, 581, 589, 614, 615, 618, 621, 624], "pseudo": [161, 162, 311, 622], "code": [161, 162, 191, 234, 244, 252, 253, 256, 272, 275, 311, 381, 386, 404, 422, 487, 488, 519, 520, 525, 528, 529, 572, 574, 575, 577, 578, 579, 585, 586, 588, 589, 592, 594, 596, 597, 598, 600, 603, 609, 611, 612, 614, 616, 617, 618, 621, 622, 623], "resum": [161, 162, 317, 321, 322, 329, 335], "params_to_tune_config": 161, "next_tune_cfg": [161, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 624], "travers": [161, 162, 312, 313, 315, 316, 322, 624], "get_acc_target": 161, "base_acc": 161, "ceiterion": 161, "constraint": [161, 233, 234, 274, 292, 621, 624, 626], "create_exp": 161, "acc_target": 161, "experi": [161, 523, 592, 621, 624], "fefin": 162, "tpetunestrategi": 162, "add_loss_to_tuned_history_and_find_best": 162, "tuning_history_list": 162, "histori": [162, 314, 322, 338, 339, 379, 386, 388, 392, 445, 463, 513, 609, 624], "object_evalu": 162, "alredi": 162, "calculate_loss": 162, "acc_diff": 162, "lat_diff": 162, "trials_count": [162, 315, 322], "either": [162, 238, 280, 322, 590, 593, 597, 612, 617, 618], "met": [162, 322, 526, 583, 590, 618, 622], "reach": [162, 269, 273, 295, 299, 309, 322, 524, 528, 574, 614, 615, 624], "basedatalod": [163, 201], "basedataload": [163, 165, 168, 169, 170, 172, 184, 201, 203, 206, 207, 208, 210], "_generate_dataload": [163, 201], "drop": [163, 201, 238, 270, 280, 590, 603, 614, 615, 627], "incomplet": [163, 201, 324, 326, 335], "discard": [163, 201], "dispatch": [164, 167, 184, 586], "unifi": [164, 167, 184, 233, 234, 274, 486, 529, 574, 585, 586, 591], "default_col": [165, 203], "outer": [165, 203], "defaultdataload": [165, 169, 172, 184, 203, 207, 210], "base_dataload": [165, 167, 168, 169, 170, 172, 184, 203, 205, 206, 207, 208, 210, 222, 234], "drop_last": [166, 171, 204, 209], "iterablefetch": [166, 204], "indexfetch": [166, 204], "default_dataload": [167, 169, 172, 205, 207, 210, 222, 234], "fetcher": [167, 205, 222, 234], "mxnet_dataload": [167, 205, 222, 234], "onnxrt_dataload": [167, 205, 222, 234], "pytorch_dataload": [167, 205, 222, 234], "tensorflow_dataload": [167, 205, 222, 234, 472], "mxnetdataload": [168, 206], "onnxruntim": [169, 175, 179, 182, 183, 184, 207, 213, 217, 220, 221, 222, 234, 243, 398, 402, 529, 584, 586, 587, 617], "onnxrtbertdataload": [169, 207], "bert": [169, 172, 173, 184, 187, 190, 207, 210, 211, 226, 528, 575, 577, 589, 597, 623, 627], "varient": [169, 207], "onnxrtdataload": [169, 207], "pytorchdataload": [170, 208], "data_sourc": [171, 209, 332], "__iter__": [171, 175, 179, 184, 209, 213, 217, 222, 574, 575], "iterablesampl": [171, 209], "squential": [171, 209], "your": [171, 173, 209, 211, 238, 280, 524, 572, 575, 579, 581, 587, 588, 592, 595, 596, 597, 602, 603, 604, 606, 607, 609, 614, 621, 622, 624], "iterabledataset": [171, 174, 175, 177, 178, 179, 184, 209, 212, 213, 215, 216, 217, 222], "indexdataset": [171, 209], "__getitem__": [171, 175, 179, 184, 187, 190, 209, 213, 217, 222, 224, 226, 575], "__len__": [171, 175, 179, 184, 209, 213, 217, 222, 575], "inter": [171, 175, 179, 184, 209, 213, 217, 222], "retriev": [171, 209, 488], "act": [171, 209, 523], "sequentialsampl": [171, 209], "batchsampl": [171, 209], "tfdatadataload": [172, 210], "tensorflow1": [172, 210], "coupl": [172, 210], "satisfi": [172, 210, 587], "tf1": [172, 210, 591], "although": [172, 210, 621], "pytorch": [172, 173, 175, 178, 179, 182, 183, 184, 187, 190, 192, 197, 199, 210, 211, 213, 216, 217, 220, 221, 222, 224, 226, 228, 231, 232, 233, 234, 241, 242, 243, 267, 269, 272, 274, 276, 283, 284, 285, 294, 299, 307, 311, 320, 333, 335, 339, 342, 415, 422, 445, 455, 475, 525, 526, 528, 529, 574, 577, 578, 580, 581, 583, 586, 587, 590, 591, 592, 594, 597, 598, 599, 600, 609, 614, 616, 617, 620, 624, 626], "tensorflowbertdataload": [172, 210], "tensorflowmodelzoobertdataload": [172, 210], "zoo": [172, 190, 210, 226, 528, 580, 584, 627], "tensorflowdataload": [172, 210, 472], "directli": [172, 210, 238, 242, 270, 280, 284, 322, 581, 589, 596, 617, 618, 622], "pytorchbertdataset": [173, 211], "model_typ": [173, 211, 293, 394, 424, 575], "tensordataset": [173, 211, 575], "repo": [173, 211, 522, 575, 580, 602, 604, 606, 607, 628], "link": [173, 211, 572, 575, 602, 606, 609], "huggingfac": [173, 211, 335, 575, 580, 584, 597, 598, 599, 600], "easi": [173, 211, 234, 274, 572, 574, 581, 616, 618, 621], "classifi": [173, 211, 242, 283, 284, 315, 575, 577, 614], "squad": [173, 184, 187, 190, 211, 226, 239, 240, 242, 281, 282, 283, 284, 575, 589, 623, 627], "distilbert": [173, 211, 528, 575, 616, 627], "xlnet": [173, 211, 575], "xlm": [173, 211, 575, 627], "101": [173, 211, 242, 283, 284, 589, 627], "2043": [173, 211], "2001": [173, 211], "onnxrtbertdataset": [173, 211], "data_dir": [173, 211, 575], "model_name_or_path": [173, 211, 335, 575, 597, 598], "max_seq_length": [173, 184, 187, 190, 211, 226, 575, 623], "128": [173, 176, 177, 184, 187, 190, 211, 214, 215, 226, 575, 618, 623], "do_lower_cas": [173, 184, 187, 189, 190, 211, 225, 226, 575, 623], "mrpc": [173, 211, 242, 284, 575, 589, 597, 627], "dynamic_length": [173, 211, 575], "student": [173, 192, 199, 211, 227, 234, 575, 577, 578, 627], "shortcut": [173, 211, 575], "select": [173, 211, 246, 250, 257, 308, 320, 525, 526, 572, 586, 587, 609, 615, 618, 622, 624], "length": [173, 184, 187, 190, 211, 226, 235, 238, 256, 277, 280, 528, 549, 575, 589, 616, 618, 623], "token": [173, 184, 187, 190, 211, 222, 224, 226, 234, 235, 236, 256, 276, 277, 278, 335, 507, 511, 549, 572, 575, 589, 621, 623, 624], "truncat": [173, 184, 187, 190, 211, 226, 575, 623], "shorter": [173, 184, 187, 190, 211, 226, 575, 623], "lowercas": [173, 211, 575], "fine": [173, 211, 306, 575, 595, 616, 618], "choic": [173, 211, 529, 572, 575, 589], "qqp": [173, 211, 575, 589, 627], "qnli": [173, 211, 575, 589, 627], "rte": [173, 211, 575, 589, 627], "st": [173, 211, 575, 589], "cola": [173, 211, 575, 589, 627], "mnli": [173, 211, 575, 589, 627], "wnli": [173, 211, 575, 589, 627], "mobilebert": [173, 211, 575, 577, 627], "roberta": [173, 211, 575, 627], "uncas": [173, 184, 187, 190, 211, 226, 575, 623, 627], "load_and_cache_exampl": [173, 211], "cach": [173, 211, 235, 277, 335, 424, 511, 549, 582, 618], "convert_examples_to_featur": [173, 190, 211, 226], "max_length": [173, 211], "label_list": [173, 211, 242, 284], "output_mod": [173, 211], "classif": [173, 190, 211, 226, 242, 272, 283, 284, 307, 577, 584, 589, 598, 616], "pad_token": [173, 211], "pad_token_segment_id": [173, 211], "mask_padding_with_zero": [173, 211], "inputfeatur": [173, 190, 211, 226], "input_id": [173, 190, 211, 226], "vocabulari": [173, 184, 187, 189, 190, 211, 225, 226, 256, 623], "attention_mask": [173, 211], "NOT": [173, 211, 583, 587], "token_type_id": [173, 211], "segment": [173, 211, 236, 238, 278, 280], "portion": [173, 211], "problem": [173, 211, 242, 249, 284, 589, 590, 610], "regress": [173, 211], "seq_length": [173, 211], "to_json_str": [173, 211], "json": [173, 174, 184, 187, 190, 211, 212, 226, 349, 467, 469, 477, 484, 494, 575, 591, 610, 623], "tensorflowbertdataset": [173, 211], "root": [173, 174, 175, 178, 179, 184, 211, 212, 213, 216, 242, 248, 284, 286, 287, 288, 290, 292, 293, 294, 329, 511, 574, 575, 579, 589, 626], "label_fil": [173, 184, 187, 190, 211, 226, 575, 623], "tfrecord": [173, 174, 175, 179, 184, 211, 212, 213, 217, 222, 575], "guid": [173, 211, 525, 528, 575, 577, 587, 592, 600, 609, 628], "parsedecodebert": [173, 211], "tensorflowmodelzoobertdataset": [173, 174, 211, 212], "num_cor": [173, 174, 178, 179, 184, 211, 212, 216, 575], "28": [173, 174, 178, 179, 184, 211, 212, 216, 575, 627], "coco": [174, 179, 181, 183, 184, 185, 187, 212, 219, 238, 242, 280, 284, 589], "parsedecodecoco": [174, 212], "cocorecorddataset": [174, 179, 184, 212], "directori": [174, 175, 179, 184, 212, 213, 293, 335, 338, 339, 403, 456, 477, 494, 507, 575, 579, 582, 602, 604, 606, 607, 622], "interleav": [174, 179, 184, 212, 575], "parallel": [174, 179, 184, 212, 575], "cocoraw": [174, 212, 574, 575], "img_dir": [174, 212, 575], "val2017": [174, 212, 575], "anno_dir": [174, 212, 575], "annot": [174, 212, 238, 280, 575, 589], "instances_val2017": [174, 212, 575], "arrang": [174, 175, 178, 179, 184, 212, 213, 216, 306, 575, 614], "wai": [174, 175, 178, 179, 184, 212, 213, 216, 526, 572, 574, 575, 589, 592, 595, 610, 612, 614, 615, 618, 624, 626], "jpg": [174, 178, 180, 212, 216, 218, 575], "imag": [174, 175, 178, 180, 184, 186, 187, 190, 212, 213, 216, 218, 223, 226, 238, 250, 280, 492, 572, 575, 579, 617, 622, 623, 627], "coconpi": [174, 212, 575], "npy_dir": [174, 212, 575], "npy": [174, 212, 575], "tensorflowdataset": [175, 213], "pytorchdataset": [175, 213], "mxnetdataset": [175, 213], "onnxrtqldataset": [175, 213], "qlinear": [175, 182, 213, 220, 242, 284, 292, 529, 581, 599, 627], "onnxrtitdataset": [175, 213], "IT": [175, 182, 213, 220, 616], "pytorchmxnetwrapdataset": [175, 213], "datafunc": [175, 213], "pytorchmxnetwrapfunct": [175, 190, 213, 226], "framework_dataset": [175, 213], "convent": [175, 213, 238, 280, 577], "imageclassifi": [175, 213], "choos": [175, 213, 321, 572, 586, 587, 597, 620, 624, 626], "tensorflow_itex": [175, 178, 179, 180, 182, 183, 184, 213, 216, 217, 218, 220, 221, 222, 617], "onnxrt_qdq": [175, 179, 182, 183, 184, 213, 217, 220, 221, 222, 617], "onnxrt_qlinearop": [175, 179, 182, 183, 184, 190, 213, 217, 220, 221, 222, 226, 617], "onnxrt_integerop": [175, 179, 182, 183, 184, 190, 213, 217, 220, 221, 222, 226, 617], "pytorch_ipex": [175, 179, 182, 183, 184, 213, 217, 220, 221, 222, 617, 626], "pytorch_fx": [175, 179, 182, 183, 184, 213, 217, 220, 221, 222, 617], "dataset_registri": [175, 179, 184, 213, 217, 222], "dataset_typ": [175, 179, 184, 213, 217, 222, 233, 234, 244, 274, 362], "dataset_format": [175, 179, 184, 213, 217, 222], "raw_imag": [175, 179, 184, 213, 217, 222], "overwrit": [175, 179, 184, 213, 217, 222, 602, 606], "download_url": [175, 213], "filenam": [175, 213, 248, 339, 340, 440, 456, 463, 469, 479, 487, 575], "md5": [175, 213], "download": [175, 213, 335, 415, 438, 439, 441, 442, 475, 572, 575, 587, 620], "address": [175, 213, 511, 523, 572, 590, 616], "gen_bar_updat": [175, 213], "progress": [175, 213, 273, 299, 306, 309, 603, 609, 615], "bar": [175, 213, 572, 609], "check_integr": [175, 213], "fpath": [175, 213], "checksum": [175, 213], "calculate_md5": [175, 213], "chunk_siz": [175, 213], "cifar10": [175, 213, 575], "cifar100": [175, 213, 575], "automat": [175, 178, 184, 185, 186, 187, 213, 216, 223, 233, 234, 243, 250, 274, 525, 528, 572, 573, 575, 586, 590, 592, 594, 597, 598, 600, 602, 603, 604, 606, 607, 609, 612, 615, 623, 624], "www": [175, 213, 575, 627], "toronto": [175, 213, 575], "edu": [175, 213, 575], "kriz": [175, 213, 575], "cifar": [175, 213, 575, 627], "tar": [175, 213, 575, 604, 607], "gz": [175, 213, 575, 604, 607], "subset": [175, 178, 213, 216, 575], "internet": [175, 213, 572, 575], "put": [175, 213, 575, 577, 614], "alreadi": [175, 189, 191, 213, 225, 480, 507, 529, 572, 575, 586, 604, 607, 624], "again": [175, 213, 575, 619], "load_meta": [175, 213], "pytorchcifar10": [175, 213], "mxnetcifar10": [175, 213], "tensorflowcifar10": [175, 213], "pytorchcifar100": [175, 213], "mxnetcifar100": [175, 213], "tensorflowcifar100": [175, 213], "mnist": [175, 213, 575, 579], "nation": [175, 213, 523], "institut": [175, 213], "standard": [175, 184, 187, 190, 213, 226, 335, 581, 589, 623, 624], "technologi": [175, 213, 613], "fashionmnist": [175, 213, 575], "npz": [175, 213, 575], "idx1": [175, 213, 575], "ubyt": [175, 213, 575], "idx3": [175, 213, 575], "t10k": [175, 213, 575], "class_to_idx": [175, 213], "read_data": [175, 213], "pytorchmnist": [175, 213], "mxnetmnist": [175, 213], "tensorflowmnist": [175, 213], "pytorchfashionmnist": [175, 213], "mxnetfashionmnist": [175, 213], "tensorflowfashionmnist": [175, 213], "imagefold": [175, 213, 575, 579], "subfold": [175, 213], "belong": [175, 213, 231, 289, 618], "class_1": [175, 213, 575], "xxx": [175, 213, 524, 575], "png": [175, 213, 575], "xxy": [175, 213, 575], "xxz": [175, 213, 575], "class_n": [175, 213, 575], "123": [175, 213, 575, 623], "nsdf3": [175, 213, 575], "asd932_": [175, 213, 575], "mxnetimagefold": [175, 213], "tensorflowtfrecorddataset": [175, 213], "tensorflowimagerecord": [175, 179, 184, 213], "imagenet": [175, 178, 179, 184, 186, 187, 213, 216, 223, 250, 526, 572, 598, 622, 623, 626, 627], "000": [175, 179, 184, 213, 528, 575], "001": [175, 179, 184, 213, 575, 579, 626], "099": [175, 179, 184, 213, 575], "tensorflowvocrecord": [175, 213], "pascal": [175, 213], "voc": [175, 213, 242, 284], "2012": [175, 213], "00000": [175, 213], "00004": [175, 213], "00001": [175, 213], "00003": [175, 213], "dummydataset": [176, 177, 214, 215], "float32": [176, 177, 190, 214, 215, 226, 238, 280, 492, 529, 573, 575, 618, 623], "stand_norm": [176, 177, 214, 215, 575], "dummy_v2": [177, 215, 574, 575], "sparse_dummy_v2": [177, 215, 575], "label_shap": [177, 215, 575], "sparsedummydataset": [177, 215], "dense_shap": [177, 215, 575], "sparse_ratio": [177, 215, 575], "imagenetraw": [178, 216, 575], "data_path": [178, 216, 575], "image_list": [178, 216, 575], "img1": [178, 216, 575], "img2": [178, 216, 575], "imgx": [178, 216, 575], "val_map": [178, 216, 575], "txt": [178, 216, 487, 572, 575, 587], "pytorchimagenetraw": [178, 216], "mxnetimagenetraw": [178, 216], "tensorflowimagenetraw": [178, 216], "inteltensorflow": [178, 180, 216, 218, 587], "tensorflowimagenetdataset": [178, 216], "onnxrtimagenetdataset": [178, 216], "bert_dataset": [179, 184, 217, 222, 234, 276], "coco_dataset": [179, 184, 217, 222, 234, 276], "dummy_dataset": [179, 184, 217, 222, 234, 276], "dummy_dataset_v2": [179, 184, 217, 222, 234, 276], "imagenet_dataset": [179, 184, 217, 222, 234, 276], "style_transfer_dataset": [179, 184, 217, 222, 234, 276], "transfer": [180, 218, 227, 234, 575, 577, 578], "styletransferdataset": [180, 218], "content_fold": [180, 218, 575], "style_fold": [180, 218, 575], "crop_ratio": [180, 218, 575], "resize_shap": [180, 218, 575], "256": [180, 184, 186, 187, 218, 223, 575, 579, 623], "image_format": [180, 218, 575], "holder": [180, 218, 575], "labelbalancecocorecordfilt": [181, 183, 184, 219], "labelbalancecocorawfilt": [181, 219], "tensorflowfilt": [182, 220], "onnxrtqlfilt": [182, 220], "onnxrtitfilt": [182, 220], "pytorchfilt": [182, 220], "mxnetfilt": [182, 220], "filter_registri": [182, 183, 184, 220, 221, 222], "filter_typ": [182, 183, 184, 220, 221, 222], "__call__": [182, 183, 184, 220, 221, 222], "coco_filt": [183, 184, 221, 222, 234, 276], "imagenet_transform": [184, 187, 222, 224, 234, 276], "transform_cl": [184, 187, 190, 222, 224, 226], "basetransform": [184, 185, 186, 187, 190, 222, 223, 224, 226], "composetransform": [184, 187, 190, 226], "transform_list": [184, 187, 190, 226, 623], "togeth": [184, 187, 190, 226, 269, 275, 299, 577, 587, 596, 616, 622, 623], "transform_registri": [184, 187, 190, 222, 224, 226], "transform_typ": [184, 187, 190, 222, 224, 226], "user_postprocess": [184, 187, 188, 194, 198], "labelshift": [184, 186, 187, 223, 497, 623], "label_shift": [184, 186, 187, 223, 623], "bilinearimagenettransform": [184, 186, 187, 223], "height": [184, 186, 187, 190, 223, 226, 250, 269, 299, 579, 614, 623, 626], "width": [184, 186, 187, 190, 223, 226, 250, 269, 299, 579, 618, 623, 626], "central_fract": [184, 186, 187, 223, 623], "875": [184, 186, 187, 223, 623], "mean_valu": [184, 186, 187, 223, 623], "seri": [184, 186, 187, 223, 528, 587, 623], "applic": [184, 186, 187, 223, 478, 507, 509, 511, 572, 581, 592, 609, 616, 622, 623], "fraction": [184, 186, 187, 223, 623], "crop": [184, 186, 187, 190, 223, 226, 575, 623], "std": [184, 186, 187, 190, 223, 226, 250, 623], "tensorflowresizecropimagenettransform": [184, 186, 187, 223], "random_crop": [184, 186, 187, 223, 623], "resize_sid": [184, 186, 187, 223, 623], "resize_method": [184, 186, 187, 223], "bilinear": [184, 186, 187, 190, 223, 226, 623], "random_flip_left_right": [184, 186, 187, 223, 623], "channels_last": [184, 186, 187, 223, 592], "subpixel": [184, 186, 187, 223], "rgb": [184, 186, 187, 223], "desir": [184, 186, 187, 190, 223, 226, 256, 623], "flip": [184, 186, 187, 190, 223, 226, 623], "left": [184, 186, 187, 190, 223, 226, 299, 572, 603, 609, 623], "right": [184, 186, 187, 223, 238, 280, 492, 523, 525, 572, 609, 623], "tfsquadv1posttransform": [184, 187, 190, 226], "vocab_fil": [184, 187, 189, 190, 225, 226, 623], "n_best_siz": [184, 187, 190, 226, 623], "20": [184, 187, 190, 226, 249, 250, 587, 613, 623, 626, 627], "384": [184, 187, 190, 226, 623], "max_query_length": [184, 187, 190, 226, 623], "64": [184, 187, 190, 226, 526, 623, 627], "max_answer_length": [184, 187, 190, 226, 623], "30": [184, 187, 190, 226, 580, 584, 586, 623, 627], "doc_strid": [184, 187, 190, 226, 623], "total": [184, 187, 190, 226, 242, 271, 273, 283, 284, 293, 294, 295, 299, 306, 309, 315, 575, 615, 623], "nbest_predict": [184, 187, 190, 226, 623], "wordpiec": [184, 187, 189, 190, 225, 226, 623], "question": [184, 187, 190, 226, 239, 240, 281, 282, 523, 524, 529, 587, 592, 623, 627], "answer": [184, 187, 190, 226, 239, 240, 281, 282, 523, 623, 627], "becaus": [184, 187, 190, 226, 238, 269, 280, 299, 525, 614, 618, 623, 624], "lower": [184, 187, 189, 190, 225, 226, 240, 282, 315, 494, 578, 614, 615, 616, 618, 623, 624], "long": [184, 187, 190, 226, 582, 623], "document": [184, 187, 190, 226, 524, 579, 590, 594, 604, 607, 608, 620, 623], "chunk": [184, 187, 190, 226, 623], "how": [184, 187, 190, 226, 227, 234, 249, 250, 269, 296, 299, 306, 524, 525, 527, 529, 572, 574, 575, 577, 578, 579, 585, 603, 604, 607, 608, 609, 614, 615, 618, 623, 624, 626], "much": [184, 187, 190, 226, 227, 234, 296, 577, 603, 614, 615, 623], "process_result": [184, 187, 190, 226], "get_postprocess_result": [184, 187, 190, 226], "tfsquadv1modelzooposttransform": [184, 187, 190, 226], "squadv1": [184, 187, 190, 226, 623], "tensorflowresizewithratio": [184, 187, 190, 226], "min_dim": [184, 187, 190, 226, 623], "800": [184, 187, 190, 226, 623], "max_dim": [184, 187, 190, 226, 623], "1365": [184, 187, 190, 226, 623, 627], "constant_valu": [184, 187, 190, 226], "aspect": [184, 186, 187, 190, 223, 226, 623], "side": [184, 187, 190, 226, 256, 572, 575, 603, 623], "exce": [184, 187, 190, 226, 623], "resizetftransform": [184, 187, 190, 226], "interpol": [184, 187, 190, 226, 306, 589, 615, 623], "nearest": [184, 187, 190, 226, 623], "bicub": [184, 187, 190, 226, 623], "rescaletftransform": [184, 187, 190, 226], "normalizetftransform": [184, 187, 190, 226], "rescal": [184, 187, 190, 226, 623], "deviat": [184, 187, 190, 226, 623], "broadcast": [184, 187, 190, 226, 579, 623], "parsedecodecocotransform": [184, 185, 187], "experiment": [184, 185, 187, 276, 472, 526, 549, 575, 578, 579, 581, 617, 620, 623], "decod": [184, 185, 186, 187, 223, 235, 256, 277, 549, 589, 623], "quantizedinput": [186, 223, 623], "parsedecodeimagenet": [186, 223, 623], "proto": [186, 190, 223, 226, 623], "parsedecodeimagenettransform": [186, 223], "onnxbilinearimagenettransform": [186, 223], "onnxresizecropimagenettransform": [186, 223], "std_valu": [186, 223], "229": [186, 223, 627], "224": [186, 223, 250, 528, 574, 575, 579, 581, 584, 592, 623, 626, 627], "225": [186, 223, 627], "resizewithaspectratio": [186, 223], "87": [186, 223, 627], "inter_pol": [186, 223], "cv2": [186, 223], "inter_area": [186, 223], "convert_to_unicod": [189, 225], "unicod": [189, 225, 235, 277], "load_vocab": [189, 225], "convert_by_vocab": [189, 225], "vocab": [189, 225, 256], "whitespace_token": [189, 225], "whitespac": [189, 225, 240, 282], "piec": [189, 225, 235, 277, 549, 581, 589], "fulltoken": [189, 225], "tokenzi": [189, 225], "convert_tokens_to_id": [189, 225], "convert_ids_to_token": [189, 225], "basictoken": [189, 225], "punctuat": [189, 225, 235, 240, 277, 282], "wordpiecetoken": [189, 225], "unk_token": [189, 225], "unk": [189, 225], "max_input_chars_per_word": [189, 225], "200": [189, 225, 525, 624], "word": [189, 225, 235, 277, 549, 589], "greedi": [189, 225], "unaff": [189, 225], "un": [189, 225], "aff": [189, 225], "separ": [189, 225, 510, 523, 572, 585, 588, 612, 617], "concat_gener": [190, 226], "tensorflowtransform": [190, 226], "mxnettransform": [190, 226], "pytorchtransform": [190, 226], "onnxrtqltransform": [190, 226], "onnxrtittransform": [190, 226], "tensorflowwrapfunct": [190, 226], "transform_func": [190, 226], "pytorchmxnettransform": [190, 226], "get_torchvision_map": [190, 226], "torchvis": [190, 226, 250, 572, 580, 584, 592, 598], "croptoboundingbox": [190, 226, 623], "offset_height": [190, 226, 623], "offset_width": [190, 226, 623], "target_height": [190, 226, 623], "target_width": [190, 226, 623], "box": [190, 226, 238, 242, 280, 283, 284, 314, 525, 572, 589, 592, 603, 609, 622, 623, 624], "vertic": [190, 226, 269, 299, 623], "coordin": [190, 226, 314, 623], "corner": [190, 226, 529, 623], "horizont": [190, 226, 623], "mxnetcroptoboundingbox": [190, 226], "onnxrtcroptoboundingbox": [190, 226], "tensorflowcroptoboundingbox": [190, 226], "resizewithratio": [190, 226, 623], "perm": [190, 226, 623], "permut": [190, 226, 299, 623], "tensorflowtranspos": [190, 226], "mxnettranspos": [190, 226], "pytorchtranspos": [190, 226], "randomverticalflip": [190, 226, 623], "randomli": [190, 226, 260, 314, 321, 526, 623, 624], "tensorflowrandomverticalflip": [190, 226], "randomhorizontalflip": [190, 226, 623], "tensorflowrandomhorizontalflip": [190, 226], "toarrai": [190, 226, 623], "pil": [190, 226, 623], "casttftransform": [190, 226], "castonnxtransform": [190, 226], "castpytorchtransform": [190, 226], "centercroptftransform": [190, 226], "center": [190, 226, 527, 528, 587, 623, 624], "paddedcentercroptransform": [190, 226], "crop_pad": [190, 226], "resizepytorchtransform": [190, 226], "randomcroptftransform": [190, 226], "randomresizedcroppytorchtransform": [190, 226], "randomresizedcropmxnettransform": [190, 226], "randomresizedcroptftransform": [190, 226], "pramet": [190, 226], "rescalekeraspretraintransform": [190, 226], "rescaletransform": [190, 226], "alignimagechanneltransform": [190, 226], "dim": [190, 226, 264, 299, 314, 623], "align": [190, 226, 272, 523, 623], "w": [190, 226, 250, 614, 615, 623], "pytorchalignimagechannel": [190, 226], "tondarraytransform": [190, 226], "resizemxnettransform": [190, 226], "resizetransform": [190, 226], "cropresizetftransform": [190, 226], "boundari": [190, 226, 392, 623], "area": [190, 226, 238, 280, 589, 623], "pytorchcropresizetransform": [190, 226], "mxnetcropresizetransform": [190, 226], "cropresizetransform": [190, 226], "centercroptransform": [190, 226], "mxnetnormalizetransform": [190, 226], "pytorchnormalizetransform": [190, 226], "normalizetransform": [190, 226], "randomcroptransform": [190, 226], "randomresizedcroptransform": [190, 226], "get_final_text": [190, 226], "pred_text": [190, 226], "orig_text": [190, 226], "project": [190, 226, 256, 359, 362, 367, 369, 370, 373, 380, 381, 385, 386, 387, 388, 389, 390, 391, 415, 522, 523, 524, 616, 621, 624, 628], "squadexampl": [190, 226], "qas_id": [190, 226], "question_text": [190, 226], "doc_token": [190, 226], "orig_answer_text": [190, 226], "start_posit": [190, 226], "end_posit": [190, 226], "is_imposs": [190, 226], "simpl": [190, 226, 572, 587, 621, 624], "unique_id": [190, 226], "example_index": [190, 226], "doc_span_index": [190, 226], "token_to_orig_map": [190, 226], "token_is_max_context": [190, 226], "input_mask": [190, 226, 306], "segment_id": [190, 226], "read_squad_exampl": [190, 226], "input_fil": [190, 226], "output_fn": [190, 226], "inputbatch": [190, 226], "collecttransform": [190, 226], "10833": [190, 226], "tfmodelzoocollecttransform": [190, 226], "parsedecodevoctransform": [190, 226], "set_env_var": 191, "env_var": 191, "overwrite_exist": 191, "env": [191, 479, 487], "set_all_env_var": 191, "physic": [191, 523, 573], "core": [191, 234, 249, 339, 359, 572, 573, 588, 602, 606, 613, 627], "get_architectur": 191, "get_threads_per_cor": 191, "thread": [191, 234, 510, 572, 574, 613], "get_thread": 191, "get_physical_id": 191, "socket": [191, 339, 482, 511, 613, 627], "get_core_id": 191, "get_bounded_thread": 191, "core_id": 191, "bind": 191, "command": [191, 234, 256, 329, 359, 370, 373, 380, 386, 388, 389, 456, 479, 487, 507, 572, 579, 592, 594, 597, 602, 606, 610], "unnecessari": [191, 234], "summary_benchmark": [191, 234], "call_on": [191, 234, 479], "cmd": [191, 234, 487, 610], "log_fil": [191, 234], "window": [191, 234, 573, 609, 610], "config_inst": [191, 234], "trigger": [191, 234, 271, 306, 524], "generate_prefix": [191, 234], "core_list": [191, 234], "numactl": [191, 234, 595, 603], "run_inst": [191, 234], "critet": 192, "tensorflowcrossentropyloss": 192, "pytorchcrossentropyloss": 192, "tensorflowknowledgedistillationloss": 192, "pytorchknowledgedistillationloss": 192, "pytorchintermediatelayersknowledgedistillationloss": 192, "tensorflowcriterion": 192, "pytorchcriterion": 192, "criterion_cl": 192, "criterion_registri": 192, "criterion_typ": 192, "registry_criterion": 192, "param_dict": [192, 197, 247], "tensorflowsparsecategoricalcrossentropi": 192, "sparsecategoricalcrossentropyloss": 192, "knowledgedistillationframework": 192, "student_model": [192, 227, 234], "knowledgedistillationloss": [192, 626], "teacher_model_forward": 192, "notimplementederror": [192, 241, 242, 283, 284], "teacher_student_loss_c": 192, "student_output": [192, 200, 234, 329, 577, 578], "teacher_output": [192, 200, 227, 234, 329], "student_targets_loss_c": 192, "groud": 192, "truth": [192, 239, 240, 281, 282], "loss_cal": 192, "loss_cal_sloss": 192, "student_loss": [192, 200, 234, 329, 577, 578], "softcrossentropi": 192, "logit": [192, 577], "ground": [192, 239, 240, 281, 282], "kullbackleiblerdiverg": 192, "pytorchknowledgedistillationlosswrapp": 192, "tensorflowknowledgedistillationlosswrapp": 192, "tensorflowknowledgedistillationlossextern": 192, "intermediatelayersknowledgedistillationloss": [192, 502], "init_loss_func": 192, "init_feature_match": 192, "student_featur": 192, "teacher_featur": 192, "matcher": [192, 610], "clear_featur": 192, "register_hooks_for_model": 192, "attributeerror": 192, "remove_all_hook": 192, "pytorch_linear_feature_match": 192, "pytorchintermediatelayersknowledgedistillationlosswrapp": 192, "selfknowledgedistillationloss": [192, 502], "selfknowledg": 192, "pytorchselfknowledgedistillationloss": 192, "l2diverg": 192, "feature1": 192, "feature2": 192, "pytorchselfknowledgedistillationlosswrapp": 192, "setter": [193, 194], "calib_dataload": [193, 194, 234, 274, 275, 294, 311, 525, 528, 574, 575, 584, 585, 589, 618, 619], "known": [193, 194, 314, 581, 614, 622, 624], "open": [194, 234, 276, 332, 487, 521, 523, 528, 572, 581, 582, 604, 607, 610, 616], "librari": [194, 234, 276, 521, 524, 528, 587, 594, 603, 609, 616, 618], "recommend": [194, 195, 283, 284, 529, 575, 581, 583, 600, 603, 608, 610, 614, 617, 624], "set_backend": 196, "tensorflowoptim": 197, "pytorchoptim": 197, "optimizer_cl": 197, "allow": [197, 292, 314, 335, 511, 572, 577, 579, 589, 590, 617, 626], "optimizer_registri": 197, "optimizer_typ": 197, "cross": [197, 241, 242, 283, 284, 585, 624], "tensorflowsgd": 197, "tensorflowadamw": 197, "tensorflow_addon": 197, "adamw": 197, "tensorflowadam": 197, "adam": [197, 626], "pytorchsgd": 197, "record_output": 199, "output_process": 199, "get_activ": 199, "shot": [200, 234, 271, 273, 296, 309, 526, 586, 614, 615, 616], "train_func": [200, 234, 275, 579, 618], "train_dataload": [200, 234, 614], "prepare_qat": [200, 234], "pre_process": [200, 227, 234, 245, 257, 261, 266, 274, 579], "compress": [200, 234, 261, 266, 276, 295, 329, 521, 528, 577, 586, 609, 611, 612, 614, 615, 616, 618], "post_process": [200, 234], "on_train_begin": [200, 234, 261, 266, 271, 272, 305, 306, 307, 329, 525, 577, 578, 612, 614, 618], "Be": [200, 234, 238, 280, 300, 304, 305], "epoch": [200, 227, 234, 261, 266, 271, 272, 300, 303, 304, 305, 306, 307, 329, 577, 578, 579, 612, 614, 626], "on_train_end": [200, 234, 261, 266, 271, 272, 305, 306, 307, 329, 577, 578, 612, 614, 618], "pre_epoch_begin": [200, 234, 261, 266], "post_epoch_end": [200, 234, 261, 266], "on_step_begin": [200, 234, 261, 266, 271, 272, 296, 300, 303, 304, 305, 306, 307, 329, 332, 577, 578, 612, 614], "batch_id": [200, 234, 300, 303, 304, 305, 329], "on_batch_begin": [200, 234, 261, 266], "on_after_compute_loss": [200, 234, 261, 266, 329, 577, 578, 612], "on_before_optimizer_step": [200, 234, 271, 272, 296, 301, 305, 306, 307, 308, 329, 577, 578, 612, 614], "on_after_optimizer_step": [200, 234, 271, 272, 296, 306, 307, 308, 329, 614], "on_before_ev": [200, 234, 271, 272, 306, 307], "on_after_ev": [200, 234, 271, 272, 306, 307], "on_post_grad": [200, 234], "on_step_end": [200, 234, 261, 266, 271, 272, 300, 303, 304, 305, 306, 307, 329, 332, 577, 578, 612, 614], "on_batch_end": [200, 234, 261, 266], "register_hook": [200, 234], "input_arg": [200, 234], "input_kwarg": [200, 234], "tensorflowimagefold": 213, "compon": [227, 234, 245, 257, 261, 266, 274, 275, 276, 329, 475, 510, 513, 525, 579, 587, 588, 592, 609, 612, 613], "relat": [227, 234, 238, 252, 253, 261, 266, 269, 280, 308, 332, 422, 425, 427, 432, 512, 515, 516, 517, 520, 592, 626], "_epoch_ran": [227, 234], "ran": [227, 234], "eval_frequ": [227, 234], "frequenc": [227, 234, 271, 306, 613, 614, 626], "term": [227, 234, 306, 308, 524, 577, 588, 589, 611, 612, 624], "best_scor": [227, 234], "best_model": [227, 234], "found": [227, 234, 245, 246, 257, 258, 292, 314, 320, 478, 494, 511, 528, 572, 590, 597, 624], "train_cfg": [227, 234, 332], "evaluation_distribut": [227, 234, 261, 266], "train_distribut": [227, 234, 261, 266], "on_post_forward": [227, 234], "deprec": [227, 234, 494, 604, 607, 623], "init_train_cfg": [227, 234], "create_criterion": [227, 234], "create_optim": [227, 234], "disil": [227, 234], "generate_hook": [227, 234, 261, 266], "qlinear2qdq": [228, 234, 276], "torch_to_fp32_onnx": [228, 231], "do_constant_fold": [228, 231, 294], "verbos": [228, 231, 247, 248, 249, 294, 314], "int8_model": [228, 230, 231, 529], "ax": [228, 231, 294], "torch_to_int8_onnx": [228, 231], "u8s8": [228, 231], "optionl": [228, 231], "qdq_op_int32_bia": [228, 231, 581], "qdq_op_fp32_bias_qdq": [228, 231, 581], "onnx_qlinear_to_qdq": [228, 229], "input_name_to_nod": [228, 229, 292], "qlinearop": [228, 229, 586, 600, 618], "tf_to_fp32_onnx": [228, 230], "tf_to_int8_onnx": [228, 230], "check_model": 229, "update_weight_bia": 231, "fp32_onnx_path": [231, 232], "wegiht": 231, "set_data_typ": 231, "weight_typ": 231, "activation_typ": 231, "get_node_map": 231, "module_node_map": 231, "get_quantizable_onnx_op": 231, "quantize_nod": 231, "build_scale_map": 231, "int8_scale_info": 231, "scale_zp_dict": 231, "set_scale_info": 231, "int8_onnx_model": 231, "int8_onnx_path": 231, "recalculate_bia": 231, "recalcul": [231, 299], "remove_nodes_by_nam": 231, "sub_graph_with_int32_bia": 231, "a_info": 231, "b_info": 231, "qdq_fp32_bia": 231, "excut": 231, "qdq_int32_bia": 231, "qdq_fp32_bias_qdq": 231, "onnx2numpy_dtyp": 232, "onnx_node_typ": 232, "dummydataread": 232, "achiev": [233, 234, 274, 581, 589, 612, 614, 615, 616, 618, 622, 624], "variou": [233, 234, 243, 274, 285, 586, 592, 615, 617], "dl": [233, 234, 243, 261, 266, 274, 285, 585, 596, 609, 616], "bring": [233, 234, 274, 603, 618], "work": [233, 234, 261, 266, 274, 527, 574, 577, 604, 607, 614, 615, 619, 620, 622], "sinc": [233, 234, 235, 261, 266, 274, 277, 335, 463, 549, 577, 581, 587, 589, 603, 609, 612], "vari": [233, 234, 261, 266, 274, 613, 627], "roc": [233, 234, 242, 261, 266, 274, 284], "criteria": [233, 234, 261, 266, 269, 271, 274, 276, 297, 320, 525, 609], "footprint": [233, 234, 261, 266, 274, 295, 578, 611, 614, 615, 617], "flexibl": [233, 234, 261, 266, 274, 577, 614, 615], "set_config_by_model": [233, 234, 243], "model_obj": [233, 234, 243], "popular": [234, 276, 521, 528, 529, 577, 580, 581, 584, 614, 618, 624], "techniqu": [234, 276, 521, 528, 586, 592, 612, 614, 615, 617, 618, 626], "bleu": [234, 236, 241, 255, 276, 278, 283, 589], "bleu_util": [234, 241, 276, 283], "coco_label_map": [234, 241, 276, 283], "coco_tool": [234, 241, 276, 283], "evaluate_squad": [234, 241, 276, 283], "dynast": [234, 257, 276], "supernetwork": [234, 247, 250, 251, 257], "dynas_manag": [234, 250, 251, 257], "dynas_predictor": [234, 250, 251, 257], "dynas_search": [234, 251, 257], "dynas_util": [234, 249, 251, 257], "basic_na": [234, 257, 276], "dyna": [234, 247, 248, 249, 250, 251, 257, 276, 526, 586, 617], "nas_util": [234, 257, 276], "pruning_recip": [234, 276], "tile_pattern": [234, 262, 263], "pytorch_prun": [234, 276, 307], "logger": [234, 267, 276, 297, 330, 333, 339, 475, 479, 483], "prune_util": [234, 267, 276], "pruner": [234, 261, 266, 267, 269, 272, 276, 502, 505, 614, 626], "schedul": [234, 267, 271, 276, 297, 303, 306, 308, 322, 329, 558, 612], "graph_optim": [234, 243, 276, 346, 415, 450, 454, 455, 475, 483, 499], "mixed_precis": [234, 276, 348, 415, 450, 475, 483, 499], "model_convers": [234, 276], "pruning_v2": [234, 276], "quantconf": [234, 274, 285, 311], "qfunc": [234, 274], "routinu": [234, 274], "distributed_execut": [234, 274], "pruningconf": [234, 261, 266], "pruning_func": [234, 261, 266], "update_items_for_all_prun": [234, 261, 272], "howev": [234, 261, 266, 272, 307, 581, 614], "still": [234, 261, 266, 272, 307, 618, 619], "analys": [234, 261, 266, 272], "generate_prun": [234, 261, 266], "flow": [234, 239, 240, 261, 266, 281, 282, 525, 526], "dens": [234, 261, 266, 273, 309, 614, 615, 627], "spars": [234, 261, 266, 271, 306, 575, 614, 615, 616], "get_sparsity_ratio": [234, 261, 266, 269, 272, 299, 307], "sparsiti": [234, 261, 265, 266, 269, 271, 272, 273, 293, 294, 299, 303, 304, 305, 306, 307, 309, 339, 528, 575, 586, 614, 627], "elementwise_over_matmul_gemm_conv": [234, 261, 266, 272, 307], "elementwise_over_al": [234, 261, 266, 272, 307], "blockwise_over_matmul_gemm_conv": [234, 261, 266, 272, 307], "graphoptim": [234, 243, 346, 447, 498], "privat": [234, 243, 523], "member": [234, 243, 523, 529], "modelconvers": [234, 244, 558], "unicoderegex": [235, 277], "hoc": [235, 277], "hack": [235, 277], "nondigit_punct_r": [235, 277], "compil": [235, 277, 613], "preced": [235, 277], "digit": [235, 277, 616], "punct_nondigit_r": [235, 277], "symbol_r": [235, 277], "property_char": [235, 277], "join": [235, 277], "bleu_token": [235, 277], "mose": [235, 277], "smt": [235, 277], "mosesdecod": [235, 277], "master": [235, 236, 239, 240, 269, 272, 277, 278, 281, 282, 299, 307, 322], "mteval": [235, 277], "v14": [235, 277], "pl": [235, 277], "l954": [235, 277], "l983": [235, 277], "bilingu": [235, 277, 549], "understudi": [235, 277, 549], "score": [235, 236, 238, 239, 240, 242, 255, 269, 271, 277, 278, 280, 281, 282, 283, 284, 296, 299, 306, 308, 313, 317, 320, 332, 525, 549, 589, 611, 614, 615, 621, 624], "qualiti": [235, 277, 549], "machin": [235, 253, 277, 354, 549, 572, 581, 587, 595, 609, 616, 622], "natur": [235, 277, 549], "approxim": [235, 236, 277, 278, 549, 589], "glue": [235, 242, 277, 284, 549, 575, 589, 598], "ngram": [235, 277, 549, 589], "breviti": [235, 236, 277, 278, 549, 589], "penalti": [235, 236, 277, 278, 549, 589], "doe": [235, 238, 247, 277, 280, 312, 320, 549, 575, 589, 620, 623], "beam": [235, 277, 549, 589], "occur": [235, 277, 549], "bleu_scor": [235, 236, 277, 278, 549], "tensor2tensor": [236, 256, 278], "bleu_hook": [236, 278], "compute_bleu": [236, 255, 278], "reference_corpu": [236, 278], "translation_corpu": [236, 278], "max_ord": [236, 278], "use_bp": [236, 278], "against": [236, 278], "gram": [236, 278], "flag": [236, 278, 329, 504], "pycocotool": [238, 280, 582, 587], "object_detect": [238, 280], "noth": [238, 280, 487, 624], "thu": [238, 280, 618], "cannot": [238, 280, 482, 525, 581, 582, 622], "slim": [238, 280, 291, 293, 591], "jonathanhuang": [238, 280], "image_id": [238, 280, 589], "groundtruth": [238, 280], "invok": [238, 280], "groundtruth_dict": [238, 280], "exportgroundtruthtococo": [238, 280], "groundtruth_boxes_list": [238, 280], "groundtruth_classes_list": [238, 280], "max_num_class": [238, 280], "output_path": [238, 280, 292, 487], "detections_list": [238, 280], "exportdetectionstococo": [238, 280], "detection_boxes_list": [238, 280], "detection_scores_list": [238, 280], "detection_classes_list": [238, 280], "cocowrapp": [238, 280], "loadannot": [238, 280], "cocoevalwrapp": [238, 280], "agnostic_mod": [238, 280], "computemetr": [238, 280], "detection_typ": [238, 280], "bbox": [238, 280, 525, 589], "hold": [238, 280, 292, 314, 575], "datastructur": [238, 280], "mscoco": [238, 280], "org": [238, 256, 271, 280, 296, 524, 525, 572, 587, 604, 607], "replic": [238, 280], "behavior": [238, 280, 523, 524, 529, 583, 591, 622, 626], "extern": [238, 280, 292, 572], "storag": [238, 280, 528, 584, 589], "category_id": [238, 280], "iou_typ": [238, 280], "iou_thr": [238, 242, 280, 283, 284, 589], "map_point": [238, 242, 280, 283, 284, 589], "cocoev": [238, 280], "Then": [238, 280, 322, 572, 602, 604, 606, 607, 624], "getcategori": [238, 280], "getagnosticmod": [238, 280], "agnost": [238, 280, 577], "getcategoryidlist": [238, 280], "accumul": [238, 280, 313, 324, 325, 624], "p": [238, 280, 572, 610], "include_metrics_per_categori": [238, 280], "all_metrics_per_categori": [238, 280], "summeri": [238, 280], "per_category_ap": [238, 280], "care": [238, 280], "hand": [238, 280, 526, 572], "pollut": [238, 280], "mldash": [238, 280], "summary_metr": [238, 280], "iou": [238, 242, 280, 284], "increment": [238, 254, 256, 280, 313, 624], "50iou": [238, 280], "50": [238, 240, 249, 280, 282, 526, 627], "75iou": [238, 280], "75": [238, 280, 627], "32": [238, 280, 579, 585, 613, 614, 627], "pixel": [238, 280, 623], "medium": [238, 280, 616], "96": [238, 280, 627], "10000": [238, 280, 314], "recal": [238, 240, 242, 280, 282, 284], "bycategori": [238, 280], "supercategori": [238, 280], "backward": [238, 280, 329, 577, 578, 579, 612, 614, 618, 620], "performancebycategori": [238, 280], "regardless": [238, 280, 523], "category_stat": [238, 280], "exportsingleimagegroundtruthtococo": [238, 280], "next_annotation_id": [238, 280], "category_id_set": [238, 280], "groundtruth_box": [238, 280], "groundtruth_class": [238, 280], "groundtruth_mask": [238, 280], "groundtruth_is_crowd": [238, 280], "ingest": [238, 280], "ones": [238, 280, 615], "exportsingleimagedetectionstococo": [238, 280], "assign": [238, 280, 294, 322, 339, 380, 381, 386, 387, 388, 389, 572, 579, 617], "continu": [238, 269, 280, 299, 315, 526, 610, 614], "num_gt_box": [238, 280], "num_detect": [238, 242, 280, 283, 284, 589, 626], "image_height": [238, 280], "image_width": [238, 280], "detection_mask": [238, 280], "crowd": [238, 280], "exportsingleimagedetectionboxestococo": [238, 280], "detection_box": [238, 280, 626], "detection_scor": [238, 280, 626], "detection_class": [238, 280, 626], "exporsingleimagedetectionboxestococo": [238, 280], "exportsingleimagedetectionmaskstococo": [238, 280], "allenai": [239, 240, 281, 282], "bi": [239, 240, 281, 282], "att": [239, 240, 281, 282], "f1_score": [239, 240, 281, 282], "ground_truth": [239, 240, 281, 282], "metric_max_over_ground_truth": [239, 240, 281, 282], "metric_fn": [239, 240, 281, 282], "exact_match_scor": [239, 281], "exact": [239, 281], "articl": [239, 240, 281, 282], "paragraph": [239, 240, 281, 282], "qa": [239, 240, 281, 282], "cantain": [239, 240, 281, 282], "normalize_answ": [240, 282], "newlin": [240, 282], "tab": [240, 282, 383, 386, 392, 510, 609, 622], "harmon": [240, 242, 282, 284], "answer_start": [240, 282], "177": [240, 282], "denver": [240, 282], "bronco": [240, 282], "nfl": [240, 282], "team": [240, 282, 523, 619], "afc": [240, 282], "super": [240, 247, 250, 282, 526], "bowl": [240, 282], "56be4db0acb8001400a502ec": [240, 282], "percentag": [240, 248, 282, 626], "single_output": [241, 242, 283, 284], "hvd": [241, 242, 283, 284, 579], "sample_weight": [241, 242, 283, 284], "metric_registri": [241, 242, 283, 284], "metric_typ": [241, 242, 283, 284], "decorator_metr": [241, 242, 283, 284], "tensorflowmetr": [242, 284], "maintain": [242, 284, 523, 524, 528, 591, 592, 604, 607, 614, 620], "pytorchmetr": [242, 284], "mxnetmetr": [242, 284], "onnxrtqlmetr": [242, 284], "onnxrtitmetr": [242, 284], "wrappytorchmetr": [242, 284], "wrapmxnetmetr": [242, 284], "wraponnxrtmetr": [242, 284], "proport": [242, 284], "were": [242, 283, 284, 595], "pred_list": [242, 284], "pytorchloss": [242, 284], "least": [242, 272, 284, 299, 307, 488, 614, 615, 624], "sum": [242, 284, 577], "mae": [242, 284, 589], "magnitud": [242, 276, 284, 296, 297, 301, 302, 586, 614, 615, 627], "numer": [242, 284, 590, 616, 618], "rmse": [242, 248, 284, 589, 624], "squar": [242, 248, 284, 319, 589, 624], "tensorflowtopk": [242, 283, 284], "k": [242, 283, 284, 589, 614], "among": [242, 283, 284, 603], "most": [242, 283, 284, 314, 572, 590, 614, 618, 624], "outcom": [242, 283, 284], "num_correct": [242, 283, 284], "generaltopk": [242, 283, 284], "cocomapv2": [242, 283, 284, 589], "anno_path": [242, 283, 284, 589], "map_kei": [242, 283, 284], "detectionboxes_precis": [242, 283, 284], "output_index_map": [242, 283, 284, 589], "tensorflowmap": [242, 284], "tensorflowcocomap": [242, 284], "tensorflowvocmap": [242, 284], "squadf1": [242, 283, 284, 589], "miou": [242, 284], "num_class": [242, 284], "21": [242, 284, 597, 598, 616, 627], "intersect": [242, 284, 529, 589], "hist": [242, 284, 334], "onnxrtglu": [242, 284], "dlrm": [242, 284], "basicna": [245, 257], "model_build": [245, 257, 258], "nasbas": [245, 246, 257, 258, 526], "conf_fnam": [245, 257], "init_by_cfg": [245, 257], "init_for_search": [246, 257], "select_model_arch": [246, 257, 258], "create_acc_predictor": [246, 257], "predictor": [246, 247, 248, 250, 257, 526], "create_macs_predictor": [246, 257], "mac": [246, 248, 250, 255, 257, 526, 610], "create_latency_predictor": [246, 257], "latenc": [246, 247, 248, 250, 255, 257, 492, 621, 624], "init_cfg": [246, 257], "manag": [247, 248, 249, 250, 322, 332, 358, 391, 393, 416, 477, 493, 584, 592, 593, 603], "parametermanag": [247, 250], "hot": 247, "pymoo": [247, 249, 250, 572], "process_param_dict": 247, "upper": [247, 249, 609], "vector": [247, 258, 260], "onehot_gener": 247, "in_arrai": 247, "onehot": 247, "account": [247, 523, 621, 624], "depth": [247, 324, 326, 577, 619], "input_arrai": 247, "elast": 247, "mapper": [247, 380, 443, 444], "random_sampl": [247, 314], "subnetwork": [247, 250], "trial_limit": 247, "100000": 247, "translate2param": 247, "pymoo_vector": 247, "translate2pymoo": 247, "import_csv": 247, "filepath": 247, "column_nam": 247, "drop_dupl": 247, "panda": 247, "datafram": [247, 293, 294], "csv": [247, 250, 494, 526, 572], "purpos": [247, 583, 590, 609, 617], "subnet": [247, 250], "column": [247, 572, 614], "set_se": 247, "create_training_set": 247, "train_with_al": 247, "sklearn": 247, "transformerltencod": 247, "default_alpha": 248, "cost_factor": 248, "default_cost_factor": 248, "max_iter": 248, "default_max_iter": 248, "regressor": 248, "get_paramet": 248, "get_metr": [248, 332, 356], "mape": 248, "kendal": 248, "rank": [248, 579], "correl": 248, "spearman": 248, "searcher": [248, 260], "searchalgomanag": 249, "nsga2": [249, 526], "optuna": 249, "configure_nsga2": 249, "popul": [249, 526], "num_ev": [249, 526], "1000": [249, 492, 626], "warm_pop": 249, "crossover_prob": 249, "crossover_eta": 249, "mutation_prob": 249, "02": [249, 627], "mutation_eta": 249, "configure_ag": 249, "ag": [249, 523], "run_search": 249, "save_histori": 249, "previous": [249, 574], "problemmultiobject": 249, "evaluation_interfac": 249, "evaluationinterfac": [249, 250], "param_count": 249, "param_upperbound": 249, "supernet": [249, 250, 252, 253, 526], "ofa": [249, 250, 572], "mobilenetv3": [249, 250, 526], "45": [249, 525, 627], "get_mac": 250, "input_s": 250, "measure_lat": 250, "warmup_step": 250, "measure_step": 250, "resolut": 250, "warm": [250, 295], "runner": [250, 610], "ofarunn": 250, "acc_predictor": 250, "macs_predictor": 250, "latency_predictor": 250, "datasetpath": 250, "resnet50": [250, 528, 579, 584, 592, 596, 618, 621, 627], "w1": 250, "ilsvrc2012": [250, 526], "estimate_accuracy_top1": 250, "subnet_cfg": 250, "top1": [250, 618], "estimate_mac": 250, "estimate_lat": 250, "validate_top1": 250, "validate_mac": 250, "flop": 250, "fvcore": [250, 572], "get_subnet": 250, "transformerltrunn": 250, "checkpoint_path": [250, 255], "predictor_mod": 250, "csv_path": 250, "written": 250, "eval_subnet": 250, "clear_csv": 250, "evaluationinterfaceresnet50": 250, "evaluationinterfacemobilenetv3": 250, "evaluationinterfacetransformerlt": 250, "get_torchvision_model": 250, "torchvisionrefer": 250, "dataset_path": [250, 255, 495, 526], "baselin": [250, 295, 322, 332, 621, 622], "subprocess": [250, 487, 510], "machine_transl": [251, 252, 257], "transformer_interfac": [251, 252, 253], "lt": [253, 526, 575, 613, 627], "get_incremental_st": 254, "incremental_st": [254, 256], "set_incremental_st": 254, "multiheadattentionsup": 254, "super_embed_dim": 254, "num_head": 254, "is_encod": 254, "super_kdim": 254, "super_vdim": 254, "dropout": [254, 256], "add_bias_kv": [254, 256], "add_zero_attn": [254, 256], "self_attent": 254, "encoder_decoder_attent": 254, "out_dim": 254, "qkv_dim": 254, "head": [254, 256, 614], "key_padding_mask": 254, "need_weight": 254, "static_kv": 254, "attn_mask": [254, 256], "timestep": 254, "bytetensor": [254, 256], "src_len": [254, 256], "reorder_incremental_st": 254, "new_ord": [254, 256], "buffer": [254, 293], "compute_lat": 255, "get_model_paramet": 255, "compute_mac": 255, "transformersupernetwork": 256, "fairseq": 256, "vaswani": 256, "2017": 256, "arxiv": [256, 271, 296], "1706": 256, "03762": 256, "transformerencod": 256, "transformerdecod": 256, "line": [256, 486, 487, 507, 572, 579, 586, 592, 597, 598, 614, 622], "encoder_config": 256, "embed_token": 256, "encoder_lay": 256, "transformerencoderlay": 256, "argpars": [256, 609], "namespac": 256, "src_token": 256, "src_length": 256, "longtensor": 256, "sentenc": 256, "encoder_out": 256, "embed_dim": 256, "encoder_padding_mask": 256, "reorder_encoder_out": 256, "rearrang": 256, "max_posit": 256, "upgrade_state_dict_nam": 256, "upgrad": 256, "old": [256, 272, 339, 620], "decoder_config": 256, "no_encoder_attn": 256, "decoder_lay": 256, "transformerdecoderlay": 256, "attend": 256, "prev_output_token": 256, "tgt_len": 256, "forc": [256, 335, 619], "extract_featur": 256, "output_lay": 256, "layer_idx": 256, "ffn": 256, "residu": 256, "suggest": [256, 260, 314, 525, 621], "learn": [256, 528, 529, 574, 575, 581, 585, 586, 587, 590, 592, 594, 597, 598, 600, 603, 604, 607, 609, 615, 616, 618, 622, 624], "robust": 256, "encoder_normalize_befor": 256, "norm": 256, "layer_norm": 256, "self_attn_layer_norm": 256, "final_layer_norm": 256, "seq_len": 256, "t_tgt": 256, "t_src": 256, "decoder_normalize_befor": 256, "prev_self_attn_st": 256, "prev_attn_st": 256, "self_attn_mask": 256, "self_attn_padding_mask": 256, "builder": [258, 293], "propos": [258, 299, 526, 529, 577, 590, 614], "res_save_path": 258, "count_model_paramet": 258, "load_search_result": 258, "dump_search_result": 258, "params_vec2params_dict": [258, 260], "paras_vec": 258, "find_best_model_arch": 258, "lie": [258, 526], "pareto": [258, 259, 526], "front": [258, 259, 526], "metrics_convers": 258, "init_search_cfg": 258, "nas_registri": 259, "nas_method": 259, "create_search_space_pool": 259, "idx": [259, 292, 575], "enumer": [259, 329, 343, 444, 450, 476, 529, 577, 578, 579, 612, 614, 622], "find_pareto_front": 259, "n_point": 259, "n_metric": 259, "n_pareto_point": 259, "get_feedback": 260, "feedback": 260, "para_vec": 260, "gridsearch": 260, "grid": [260, 526], "whole": [260, 509, 572, 618], "exhaust": [260, 276, 318, 321, 617], "randomsearch": 260, "42": [260, 613, 627], "bayesianoptimizationsearch": 260, "bayesian": [260, 276, 316, 318, 526, 617], "indices2params_vec": 260, "tfpruningcallback": [261, 266], "input_model": [261, 266, 591, 622], "pure": [261, 266, 590], "s_output": [261, 266], "s_loss": [261, 266], "t_output": [261, 266], "support_pattern": [262, 263, 264], "pattern_registri": 264, "pattern_typ": 264, "patternbas": [264, 265], "mask_shap": [264, 265], "is_contigu": 264, "compute_spars": [264, 265, 339], "abs_sum": 264, "abs_max": 264, "tile": 265, "tilepatternbas": 265, "nxm": [265, 269, 299, 306, 615], "matrix": [265, 528, 600, 615], "repeat_mask": 265, "ori_shap": 265, "repeat": [265, 624], "tilepattern_1x1": 265, "1x1": [265, 577, 614], "unstructur": [265, 586, 614, 615, 627], "tilepattern_2x2": 265, "2x2": 265, "tilepattern_1x16": 265, "1x16": 265, "tilepattern_4x1": 265, "tilepattern_1x2": 265, "1x2": 265, "register_pattern": [269, 299], "registri": [269, 271, 273, 296, 299, 306, 308, 309, 526], "get_pattern": [269, 299], "assertionerror": [269, 270, 271, 285, 299, 306, 310], "unit": [269, 299, 486, 494, 524], "is_glob": [269, 299], "contrast": [269, 299, 623], "get_mask": [269, 299], "target_sparsity_ratio": [269, 271, 299, 306], "pre_mask": [269, 299], "max_sparsity_ratio_per_lay": [269, 271, 617], "get_masks_glob": [269, 299], "get_mask_singl": 269, "exact_sparsity_ratio": [269, 299], "obtain": [269, 270, 273, 299, 307, 308, 309, 310, 525, 581, 615, 621, 624], "get_block_size_dict": [269, 299], "get_masks_loc": [269, 299], "calul": [269, 299], "ration": [269, 299], "get_pattern_lock_mask": [269, 299], "lock": [269, 299, 304, 305, 586, 612, 614, 615], "patternnxm": [269, 299], "kept": [269, 299], "block_siz": [269, 299], "hidden": [269, 299, 494, 529, 614], "block_size_1": [269, 299], "block_size_2": [269, 299], "keep_pre_mask": [269, 299], "keep": [269, 270, 310, 315, 525, 529, 608, 609, 620, 624], "unchang": [269, 299], "patternninm": [269, 299], "md": [269, 299, 579], "check_config": [270, 310], "prune_config": [270, 310], "everyth": [270, 310, 597], "reset_non_value_to_default": 270, "undefin": [270, 310], "process_and_check_config": [270, 310], "obejct": 270, "process_config": [270, 310], "parse_to_prun": [270, 310], "parse_not_to_prun": 270, "register_prun": [271, 306], "get_prun": [271, 306], "module_nam": [271, 273, 296, 306, 308, 309, 339, 494], "cuurent": [271, 306], "current_sparsity_ratio": [271, 306], "global_step": [271, 306], "update_frequency_on_step": [271, 617], "mask_weight": [271, 306], "formal": [271, 306], "local_step": [271, 272, 306, 307], "judg": 271, "Or": 271, "simpli": [271, 579, 591, 592, 594, 597, 609], "check_is_pruned_step": [271, 306], "update_scor": 271, "magnitudeprun": 271, "snipprun": 271, "snip": [271, 296, 586, 614, 615, 627], "1810": [271, 296], "02340": [271, 296], "snipmomentumprun": 271, "moreoev": 271, "momentum": [271, 296, 586, 614, 615, 626], "patternlockprun": [271, 304, 306], "templat": [272, 276, 307, 362, 381, 386, 475, 483, 520, 572, 614], "tree": [272, 307, 324, 326, 357, 386, 388], "nlp": [272, 307, 597, 614, 615, 618], "huggingface_model": [272, 307], "config_file_path": [272, 307], "pruner_info": [272, 307], "register_schedul": [273, 309], "get_schedul": [273, 309], "gradual": [273, 309, 614, 615], "update_sparsity_ratio": [273, 309], "aggressive_ratio": 273, "current_prune_step": [273, 309], "total_prune_step": [273, 309], "oneshotschedul": [273, 309], "aggress": 273, "iterativeschedul": [273, 309], "target_ratio": [273, 309], "server": [275, 276, 415, 422, 474, 475, 482, 483, 491, 494, 505, 507, 509, 572, 609], "seper": 275, "opt_model": 275, "fulli": [275, 618], "meet": [275, 295, 312, 313, 315, 320, 322, 525, 581, 611, 616, 617, 618, 622, 624], "saniti": 275, "illeg": 275, "sync": 275, "accordingli": [275, 303, 600], "contrib": 276, "base_model": [276, 287, 288, 290, 292, 293, 294], "keras_model": [276, 287], "mxnet_model": [276, 287], "nets_factori": [276, 287], "onnx_model": [276, 287, 426], "tensorflow_model": [276, 287], "torch_model": [276, 287], "pruner_legaci": [276, 297], "gradient_sensit": [276, 297, 302], "group_lasso": [276, 297, 302], "pattern_lock": [276, 297, 302], "reg": [276, 297, 306], "tuning_sampl": [276, 318, 324], "tuning_spac": [276, 318, 324, 325, 327], "tuning_struct": [276, 318, 324, 325, 326], "auto_mixed_precis": [276, 318], "conserv": [276, 318], "hawq_v2": [276, 318], "mse_v2": [276, 318], "collect_layer_histogram": [276, 333], "create_obj_from_config": [276, 333], "kl_diverg": [276, 333], "load_huggingfac": [276, 333], "ux": 276, "config_gener": [276, 415, 475], "configuration_wizard": [276, 415, 475], "db_manag": [276, 415, 475, 513], "file_brows": [276, 415, 475], "jobs_manag": [276, 415, 475], "model_zoo": [276, 415, 475], "names_mapp": [276, 415, 475], "profil": [276, 349, 367, 374, 376, 386, 389, 391, 392, 415, 423, 431, 475, 476, 486, 492, 509, 514], "manage_workspac": [276, 415, 475], "workload": [276, 344, 345, 346, 348, 350, 351, 354, 376, 381, 386, 446, 463, 470, 475, 477, 483, 493, 494, 509, 512, 514, 515, 516, 517, 616], "executor": [276, 342, 475, 483], "expiring_dict": [276, 475, 483], "github_info": [276, 475, 483], "hw_info": [276, 475, 483], "json_seri": [276, 345, 399, 400, 405, 407, 408, 411, 421, 430, 456, 462, 475, 482, 483, 492, 495, 496, 497, 498, 500, 501, 502, 503, 504], "proc": [276, 475, 483], "status_upd": [276, 475, 483], "yaml_util": [276, 475, 483], "web": [276, 474, 475, 528, 572, 622], "servic": [276, 475, 508, 509, 528, 609, 613], "commun": [276, 475, 509, 510, 511, 523, 572], "router": [276, 475, 509], "inc_bench": [276, 475, 572, 584], "set_random_se": [276, 333, 339, 504], "set_tensorboard": [276, 339], "set_workspac": [276, 339, 495, 504], "eval_metr": [285, 311], "hybirdblock": [285, 311], "paramt": [285, 311], "basemodel": [286, 287, 288, 290, 292, 293, 294], "plai": [286, 287, 614, 616], "role": [286, 287, 614], "node_typ": [286, 287], "kerasmodel": [288, 433], "get_model_fwk_nam": 289, "fwk": 289, "net": 291, "factori": [291, 396, 415, 450, 466, 471, 475, 486, 490], "tfslimnetsfactori": 291, "model_func": 291, "arg_scop": 291, "onnxmodel": [292, 426], "is_large_model": 292, "2gb": 292, "ort": 292, "about": [292, 296, 394, 423, 479, 481, 482, 487, 488, 523, 572, 574, 619, 627], "output_name_to_nod": 292, "ir_vers": 292, "opset_import": 292, "nodes_to_remov": 292, "nodes_to_add": 292, "add_initi": 292, "get_initi": 292, "remove_initi": 292, "init_to_remov": 292, "set_initi": 292, "get_children": 292, "get_par": 292, "find_node_by_nam": 292, "new_nodes_list": 292, "find_nodes_by_initi": 292, "get_scale_zero": 292, "save_model_to_fil": 292, "use_external_data_format": 292, "replace_node_input": 292, "new_input_nam": 292, "replace_input_of_all_nod": 292, "white_optyp": 292, "black_optyp": 292, "replace_node_output": 292, "new_output_nam": 292, "replace_output_of_all_nod": 292, "remove_unused_const": 292, "enable_subgraph": 292, "get_nodes_chain": 292, "start_nod": 292, "stop_nod": 292, "result_chain": 292, "chain": 292, "add_tensors_to_output": 292, "remove_tensors_from_output": 292, "match_first_par": 292, "parent_op_typ": 292, "match_par": 292, "return_indic": 292, "match_parent_path": 292, "parent_input_index": 292, "get_model_typ": [293, 424], "validate_graph_nod": 293, "validate_and_inference_input_output": 293, "input_tensor_nam": 293, "output_tensor_nam": 293, "graph_sess": 293, "graph_def_sess": 293, "frozen_pb_sess": 293, "load_saved_model": 293, "saved_model_tag": 293, "serv": [293, 511, 519], "signatur": 293, "saved_model_dir": 293, "tag": [293, 335, 481, 494, 622], "metagraphdef": 293, "keras_sess": 293, "slim_sess": 293, "checkpoint_sess": 293, "estimator_sess": 293, "saved_model_sess": 293, "renturn": 293, "workspace_path": [293, 294, 479, 494], "tensorflowsavedmodelmodel": 293, "get_all_weight_nam": [293, 294], "update_weight": [293, 294, 304], "new_tensor": [293, 294], "get_weight": [293, 294], "wight": 293, "report_spars": [293, 294], "total_spars": [293, 294], "build_saved_model": 293, "savedmodelbuild": 293, "protocol": 293, "asset": 293, "tensorflowqatmodel": 293, "frozen_graph_def": 293, "tensorflowcheckpointmodel": 293, "checkpoint": [293, 338, 591], "issu": [293, 523, 524, 527, 572, 587, 618, 622], "tensorflowmodel": [293, 402, 431, 433, 434, 435, 436], "pytorchbasemodel": 294, "register_forward_pre_hook": 294, "remove_hook": 294, "generate_forward_pre_hook": 294, "update_gradi": 294, "grad_nam": 294, "new_grad": 294, "grad": 294, "prune_weights_": 294, "get_input": 294, "get_gradi": 294, "pytorchmodel": [294, 300, 301, 303, 304, 305], "quantized_state_dict": 294, "load_quantized_state_dict": 294, "stat_dict": 294, "export_to_jit": 294, "jit": [294, 592, 594, 599, 622], "export_to_fp32_onnx": 294, "rand": [294, 592], "stdout": 294, "export_to_bf16_onnx": 294, "export_to_int8_onnx": 294, "s8s8": 294, "pytorchfxmodel": 294, "ipexmodel": 294, "driven": [295, 528, 590, 609, 611, 622], "objective_registri": 295, "objective_custom_registri": 295, "obj_cl": 295, "eural_compressor": 295, "objective_cl": 295, "user_object": 295, "__class__": 295, "__name__": 295, "objective_cfg": 295, "usr_cfg": 295, "user_obj_cfg": 295, "easili": [295, 529, 593, 597, 609, 611, 614, 615], "sart": 295, "result_list": 295, "loop": [295, 329, 525, 526, 583, 621, 624], "durat": [295, 322, 359, 370, 373, 380, 386, 388, 389, 479, 621], "peak": [295, 611], "alloc": 295, "models": [295, 611, 617], "multiobject": [295, 504], "metric_criterion": 295, "metric_weight": 295, "obj_criterion": 295, "obj_weight": 295, "is_measur": 295, "accuracy_target": 295, "accuracy_meet": 295, "verifi": 295, "accuracy_meet_req": 295, "last_result": 295, "check_result": 295, "set_model": 295, "best_result": 295, "tune_data": 295, "acc1": 295, "obj1": 295, "obj2": 295, "acc2": 295, "register_criterion": 296, "get_criterion": 296, "pruningcriterion": 296, "magnitudecriterion": 296, "criterion_class": 296, "magtinud": 296, "gradientcriterion": 296, "snipcriterion": 296, "product": [296, 586, 590, 592, 593, 609, 613, 616, 618, 621, 624], "snipmomentumcriterion": 296, "mechan": [296, 621], "preserv": 296, "basepattern": [299, 308], "keep_mask_lay": 299, "invalid_lay": 299, "reduce_tensor": 299, "along": [299, 487, 587], "unprun": 299, "get_single_mask_per_target_ratio": 299, "return_dict": 299, "zero_cnt": 299, "total_cnt": 299, "check_layer_valid": 299, "get_reduced_masks_from_data": 299, "update_residual_cnt": 299, "get_sparsity_ratio_each_lay": 299, "sparsity_ratio": 299, "cnt": 299, "sparsityinfo": 299, "adjust_ratio": 299, "key_new_spars": 299, "max_sparsity_ratio": 299, "min_sparsity_ratio": 299, "final_target_sparsity_ratio": 299, "examin": [299, 614], "adjust_sparsity_ratio": 299, "block_wis": 299, "get_sparsity_ratio_progress": 299, "reshape_orig_to_pattern": 299, "s1": 299, "s2": 299, "reshape_reduced_to_orig": 299, "orig_shap": 299, "reduce_scor": 299, "get_mask_per_threshold": 299, "cur_target_sparsity_ratio": 299, "keep_exact_sparsity_ratio": 299, "remain": [299, 597], "count_new_masked_cnt": 299, "new_added_mask": 299, "update_new_added_mask": 299, "cur_mask": 299, "bacaus": 299, "update_progressive_mask": 299, "progressive_step": 299, "progressive_config": 299, "update_progressive_masks_linear": 299, "update_progressive_masks_scor": 299, "update_progressive_masks_loc": 299, "update_progressive_masks_glob": 299, "get_least_ninm_mask_from_data": 299, "elementwis": [299, 300], "sparisti": 299, "get_ele_mask_per_threshold": 299, "least_ninm_mask": 299, "least_m_in_m_mask": 299, "gradientsensitivityprun": 300, "global_config": [300, 301, 303, 304, 305, 310], "overwritten": [300, 301, 303, 304, 305, 597], "elementwise_prun": 300, "parse_weight_nam": 300, "weight_name_pattern": 300, "compute_mask": [300, 303, 304], "prune_weight": 300, "update_importance_elementwis": 300, "update_importance_ab": 300, "update_importance_weight": 300, "prune_by_import": 300, "num_inst": 300, "lasso": [301, 308, 586, 614, 615], "grouplassoprun": 301, "basicmagnitudeprun": [301, 303], "legaci": 302, "pruner_registri": 305, "clase": 305, "update_spars": 305, "parse_valid_pruner_typ": 306, "baseprun": 306, "show": [306, 339, 523, 572, 577, 579, 595, 610, 614, 624], "mask_weights_gener": 306, "update_mask": 306, "basicprun": 306, "proce": 306, "regul": 306, "set_global_step": 306, "progressiveprun": 306, "grain": [306, 616], "improv": [306, 314, 524, 592, 609, 610, 614, 615, 618, 619, 624, 627], "interv": [306, 615], "check_progressive_valid": 306, "check_is_pruned_progressive_step": 306, "update_masks_progress": 306, "print_progressive_spars": 306, "register_reg": 308, "regulariz": 308, "get_reg_typ": 308, "get_reg": 308, "basereg": 308, "grouplasso": 308, "coeff": 308, "reg_term": 308, "coeffient": 308, "pruningschedul": 309, "init_ratio": 309, "init_sparsity_ratio": 309, "reset_none_to_default": 310, "update_param": [310, 361], "process_weight_config": 310, "default_config": 310, "pruners_info": 310, "process_yaml_config": 310, "check_key_valid": 310, "template_config": 310, "user_config": 310, "generate_pruner_config": 310, "calib_func": [311, 619], "entir": [311, 525, 614, 615], "ptq": [311, 525, 579, 586, 618, 622, 624], "val_dataload": [311, 618], "automixedprecisiontunestrategi": 312, "rule": [312, 592, 614, 615], "tri": [312, 313, 507, 624], "tune_config": [312, 313, 314, 315, 316, 317, 319, 320, 321, 322], "basictunestrategi": [313, 322], "polici": [313, 319, 523, 528, 613, 626, 628], "distributed_next_tune_cfg_lst": [313, 322], "comm": [313, 322], "One": [313, 572, 575, 579, 586, 614, 615, 616, 624], "tuning_config_list": 313, "ii": [313, 624], "bayesiantunestrategi": 314, "come": [314, 528, 624], "discret": [314, 624], "gaussian": [314, 624], "posterior": [314, 624], "black": [314, 624], "maxim": [314, 614, 615, 624], "acq_max": 314, "ac": 314, "gp": 314, "y_max": 314, "n_warmup": 314, "n_iter": 314, "acquisit": 314, "relev": 314, "limit": [314, 339, 528, 577, 614, 622], "acq": 314, "randomst": 314, "scipi": 314, "x_max": 314, "targetspac": 314, "pbound": 314, "9527": [314, 626], "params_to_arrai": 314, "array_to_param": 314, "amort": 314, "keyerror": 314, "get_target": 314, "num": [314, 339, 589], "_kei": 314, "bayesianoptim": 314, "promis": [314, 578, 614, 615], "gen_next_param": 314, "conservativetunestrategi": 315, "o0": [315, 624], "who": [315, 523, 624], "quantifi": 315, "quant_queu": 315, "prioriti": [315, 624], "fp16": [315, 324, 326, 590, 618], "trail": 315, "exhaustivetunestrategi": 316, "perspect": [316, 624], "hawq_v2tunestrategi": 317, "msetunestrategi": 319, "mse_impact_lst": 319, "best_qmodel": 319, "current_best_model": 319, "ordered_op_name_typ": 319, "mse_v2tunestrategi": 320, "revert": [320, 328, 624], "highest": [320, 624], "lowest": [320, 614, 615, 624], "until": [320, 322, 526, 624], "randomtunestrategi": 321, "strategy_registri": [322, 624], "evaluation_result": [322, 579], "meet_acc_req": 322, "eval_r": 322, "master_worker_handl": 322, "matster": 322, "worker": [322, 618], "send": [322, 463, 506, 511, 524], "wait": [322, 506, 602, 606, 609], "receiv": [322, 335, 621], "sender": 322, "mpi": 322, "comun": 322, "slave_worker_handl": 322, "slave": 322, "tune_cfg_lst": 322, "distributed_travers": 322, "disribut": 322, "apply_all_tuning_recip": 322, "tunabl": 322, "apply_recipe_one_by_on": 322, "set_param_for_pre_quantization_algo": 322, "algo_schedul": 322, "algo": [322, 332], "set_param_for_post_quantization_algo": 322, "pre_optimized_model": 322, "initial_tuning_cfg": 322, "quant_mode_wise_item": 322, "initial_op_tuning_cfg": [322, 324, 325], "op_item_dtype_dict": 322, "show_baseline_info": 322, "displai": [322, 324, 325, 326, 339, 410, 423, 609], "initial_best_acc": 322, "set_tuning_spac": 322, "setup_resum": 322, "set_q_func": 322, "update_best_op_tuning_cfg": 322, "op_tuning_cfg": 322, "deploy_config": 322, "deploy": [322, 576, 592, 609], "tuningsampl": [324, 325], "tuningspac": [324, 325, 326], "tuning_order_lst": [324, 325], "tuningord": [324, 325], "opwisetuningsampl": [324, 325], "tuning_items_prior": [324, 325], "op_dtype_dict": [324, 325], "get_opwise_candid": [324, 325], "optypewisetuningsampl": [324, 325], "optuningconfig": [324, 325, 326, 327], "fallbacktuningsampl": [324, 325], "op_dtyp": [324, 325], "skip_first": [324, 325], "op_quant_mod": [324, 327], "get_stat": [324, 327], "from_stat": [324, 327], "tuningitem": [324, 326], "item_typ": [324, 326], "get_options_nam": [324, 326], "get_option_by_nam": [324, 326], "option_nam": [324, 326], "get_detail": [324, 326], "query_item_opt": [324, 326], "op_name_typ": [324, 326], "method_nam": [324, 326], "method_v": [324, 326], "get_default_config": [324, 326], "op_tuning_config": [324, 326], "get_item_by_path": [324, 326], "get_default_full_path": [324, 326], "op_path": [324, 326], "new_path": [324, 326], "query_quant_mode_item_by_full_path": [324, 326], "query_items_by_quant_mod": [324, 326], "get_op_default_path_by_pattern": [324, 326], "tuningsamplerregistri": 325, "modelwisetuningsampl": 325, "smoothquantsampl": 325, "hyperparamet": [325, 621, 624], "get_op_mode_by_query_ord": 326, "query_ord": 326, "pattern_to_intern": 326, "default_dtyp": 326, "pattern_to_path": 326, "quant_mode_from_pattern": 326, "internal_pattern": 326, "initial_tuning_cfg_with_quant_mod": 326, "step1": 326, "step2": 326, "step3": 326, "step4": 326, "step5": 326, "ordereddefaultdict": 328, "extract_data_typ": 328, "data_typ": 328, "sign": [328, 524, 572, 618, 621], "unsign": 328, "reverted_data_typ": 328, "signed_flag": 328, "get_adaptor_nam": 328, "compressionmanag": 329, "uesd": 329, "deal": 329, "commpon": 329, "train_loop": [329, 612], "path_to_sav": 329, "num_warm": 329, "num_iter": 329, "orchestr": [329, 528, 586], "layerhistogramcollector": [330, 333], "histogram": [330, 333, 339, 383, 386, 394, 622], "layer_tensor": [330, 333], "include_lay": [330, 333], "diverg": [330, 333, 334, 577, 624], "get_func_from_config": 332, "func_dict": 332, "get_preprocess": 332, "get_postprocess": 332, "get_algorithm": 332, "create_dataset": 332, "cfg_preprocess": 332, "cfg_filter": 332, "create_dataload": 332, "dataloader_cfg": 332, "create_eval_func": 332, "postprocess_cfg": 332, "create_train_func": 332, "Their": 332, "auxiliari": 333, "msg": [333, 336], "warn": [333, 336, 572], "warin": [333, 336], "alia": [333, 336, 594, 599], "fatal": [333, 336], "probabl": 334, "expand_quantized_bin": 334, "quantized_bin": 334, "reference_bin": 334, "expand": 334, "bin": [334, 339], "safe_entropi": 334, "reference_distr_p": 334, "p_sum": 334, "candidate_distr_q": 334, "q_sum": 334, "entropi": [334, 624], "get_threshold": 334, "hist_edg": 334, "min_val": 334, "max_val": 334, "quantized_typ": 334, "num_quantized_bin": 334, "255": [334, 618], "pretrain": [335, 592, 598], "optimizedmodel": 335, "from_pretrain": 335, "repositori": [335, 415, 420, 422, 475, 481, 604, 607], "hug": [335, 528, 616], "face": [335, 523, 528, 539, 592, 596, 616, 620], "hub": [335, 487, 528, 580, 584, 600], "host": [335, 579], "cache_dir": 335, "force_download": 335, "resume_download": 335, "commit": [335, 523, 524], "git": [335, 572, 587], "artifact": 335, "co": [335, 615], "save_for_huggingface_upstream": 335, "output_dir": [335, 487, 597, 598], "get_logg": 336, "checkpoint_dir": 338, "history_cfg": 338, "best_configur": 338, "best_model_weight": 338, "pt": [338, 591, 616, 619], "snapshot": [338, 392, 513], "cfg_from_fil": 339, "yaml_fil": [339, 575, 579, 589], "lazyimport": 339, "lazi": 339, "till": [339, 624], "decorat": 339, "time_limit": 339, "get_siz": [339, 494], "fault_tolerant_fil": 339, "temporari": [339, 523], "equal_dict": 339, "d2": 339, "compare_kei": 339, "ignore_kei": 339, "ignor": [339, 575], "cpuinfo": 339, "vnni": [339, 580, 584, 586, 617, 618], "cores_per_socket": 339, "get_number_of_socket": [339, 482], "dump_elapsed_tim": [339, 529], "customized_msg": 339, "elaps": 339, "combine_histogram": 339, "old_hist": 339, "get_tensor_histogram": 339, "2048": 339, "get_all_fp32_data": 339, "get_tuning_histori": 339, "tuning_history_path": [339, 463], "str2arrai": 339, "dequantizeweight": 339, "weight_tensor": 339, "scale_info": 339, "captureoutputtofil": 339, "tmp_file_path": 339, "stream": 339, "sy": [339, 595], "stderr": 339, "captur": 339, "statist": 339, "header": [339, 440, 519, 582], "field_nam": 339, "output_handl": 339, "printer": 339, "print_stat": 339, "global_st": 339, "load_data_from_pkl": 339, "pkl": 339, "dump_data_to_loc": 339, "set_resume_from": 339, "show_memory_info": 339, "hint": 339, "project_data": [340, 446, 447, 452, 456, 459, 462, 469], "benchmark_data": 340, "workdir": [340, 456, 469, 475, 479, 483, 491], "config_filenam": [340, 456, 469], "configuration_data": [340, 447, 452, 456, 459, 462], "generate_config": [340, 447, 452, 456, 459, 462, 469], "dataloaderinterfac": [340, 456, 469], "dataloader_data": [340, 352, 381, 386, 456, 469], "parse_arg": [341, 449, 453, 458, 461, 467], "benchmark_mod": [341, 486], "set_eager_execut": [341, 449, 453, 461], "request_id": [342, 445, 463, 464, 479, 487], "asd": [342, 464], "benchmark_id": [342, 359, 360, 370], "benchmark_result_upd": 342, "benchmark_result_update_pytorch_script": 342, "neural_coder_perform": 342, "neural_coder_tim": 342, "pytorch_script_bench_optim": 342, "command_line_of_script": 342, "pytorch_script_bench_original_model": 342, "execute_real_benchmark": 342, "project_detail": [342, 375, 445, 464], "benchmark_detail": 342, "benchmark_model": [343, 415, 475], "execute_benchmark": [343, 415, 475], "benchmarkconfiggener": 344, "configgener": [344, 345, 346, 348, 349, 350, 351], "generate_evaluation_config": [344, 346, 348, 350, 351], "generate_accuracy_config": 344, "generate_performance_config": 344, "workload_directori": 345, "configuration_path": 345, "jsonseri": [345, 399, 400, 405, 407, 408, 411, 421, 430, 456, 462, 482, 484, 492, 495, 496, 497, 498, 500, 501, 502, 503, 504], "get_predefined_config_path": [345, 494], "predefin": [345, 381, 385, 386, 494], "generate_model_config": 345, "generate_dataloader_config": 345, "graphoptimizationconfiggener": 346, "generate_graph_optimization_config": 346, "benchmark_config_gener": [347, 415, 475], "graph_optimization_config_gener": [347, 415, 475], "mixed_precision_config_gener": [347, 415, 475], "profiling_config_gener": [347, 415, 475], "pruning_config_gener": [347, 415, 475], "quantization_config_gener": [347, 415, 475], "mixedprecisionconfiggener": 348, "generate_mixed_precision_config": 348, "profilingconfiggener": 349, "pruningconfiggener": 350, "generate_pruning_config": 350, "quantizationconfiggener": 351, "generate_tuning_config": 351, "generate_quantization_config": 351, "configurationpars": 352, "input_data": [352, 357, 574], "parse_evaluation_data": 352, "evaluation_data": 352, "parse_transform": 352, "transforms_data": [352, 381, 386], "parse_dataload": 352, "parse_metr": 352, "metric_data": 352, "get_param_typ": 352, "param_group": 352, "parse_valu": 352, "required_typ": 352, "parse_list_valu": 352, "parse_multidim_list": 352, "dimension": 352, "normalize_string_list": 352, "string_list": 352, "bracket": 352, "get_predefined_configur": 354, "update_config_to_machine_specif": 354, "configuration_pars": [355, 415, 475], "get_boundary_nod": [355, 415, 475], "get_configur": [355, 415, 475], "params_feed": [355, 415, 475], "pruning_config_pars": [355, 415, 475], "feeder": 356, "get_framework": [356, 429], "get_domain": 356, "get_model": [356, 429, 515], "get_dataload": 356, "get_transform": 356, "get_object": 356, "get_strategi": 356, "get_quantization_approach": 356, "get_possible_valu": 356, "pruningconfigpars": 357, "generate_tre": 357, "parse_entri": 357, "bench": [358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 445, 474, 592], "dbmanag": [358, 391], "database_loc": [358, 391], "log_level": [358, 391, 485], "initialize_databas": [358, 391], "create_sqlalchemy_engin": [358, 391], "create_al": [358, 391], "tabl": [358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 381, 382, 391], "project_id": [359, 362, 369, 370, 373, 375, 381, 385, 386], "model_id": [359, 369, 370, 373], "dataset_id": [359, 362, 370, 373, 381, 385, 386], "warmup_iter": 359, "number_of_inst": 359, "execution_command": [359, 370, 373], "benchark": 359, "delete_benchmark": [359, 380, 386], "benchmark_nam": 359, "update_statu": [359, 370, 373], "execution_statu": [359, 370, 373], "executionstatu": [359, 370, 373, 380, 386, 388, 389, 476, 493], "update_dur": [359, 370, 373], "update_execution_command": [359, 370, 373, 380, 386, 388, 389], "update_log_path": [359, 370, 373, 386, 389], "update_config_path": [359, 370], "update_dataset": [359, 370, 373], "update_batch_s": [359, 370], "update_mod": 359, "update_cores_per_inst": 359, "update_number_of_inst": 359, "clean_statu": [359, 370, 373, 380, 386, 388, 389, 493], "status_to_clean": [359, 370, 373, 380, 386, 388, 389, 493], "build_info": [359, 360, 362, 369, 370, 373, 374, 376, 379], "benchmark_result": [359, 367, 391, 415], "benchmarkresult": [359, 360], "update_accuraci": 360, "update_perform": 360, "list_by_framework": [361, 368, 377], "framework_id": [361, 368, 369, 377, 393], "query_to_list": [361, 368, 377], "dataloaders_queri": 361, "dataloader_id": 361, "fill_dictionari": [361, 363, 364, 366, 368, 371, 372, 377], "dataset_nam": [362, 381, 386], "template_path": 362, "delete_dataset": [362, 381, 386], "update_template_path": 362, "get_domain_id": 363, "domain_nam": 363, "domainflavour": [364, 476], "db": [364, 371, 372, 392, 393], "get_domain_flavour_id": 364, "domain_flavour_nam": 364, "flavour": [364, 384, 386, 444, 476], "get_framework_id": 366, "framework_nam": [366, 442, 482], "domain_flavour": [367, 391, 415, 421, 494], "optimization_typ": [367, 370, 391, 415], "profiling_result": [367, 373, 391, 415], "pruning_detail": [367, 370, 391, 415], "tuning_detail": [367, 370, 391, 415], "tuning_histori": [367, 370, 386, 388, 391, 415, 450, 475], "metrics_queri": 368, "precision_id": [369, 370, 371, 372], "domain_id": [369, 377], "domain_flavour_id": 369, "supports_profil": [369, 423, 431], "supports_graph": [369, 423], "supports_prun": [369, 423, 435], "delete_model": [369, 386, 387], "optimization_type_id": 370, "sampling_s": [370, 495, 626], "tuning_details_id": [370, 378], "pruning_details_id": [370, 376], "diagnosis_config": 370, "delete_optim": [370, 386, 388], "optimization_id": [370, 371, 386, 388, 445], "optimization_nam": [370, 371, 385, 386], "update_optimized_model": [370, 386, 388], "optimized_model_id": 370, "update_sampling_s": 370, "update_precis": 370, "update_tuning_detail": 370, "update_pruning_detail": 370, "pin_accuracy_benchmark": [370, 386, 388], "pin": [370, 386, 388, 602, 606], "pin_performance_benchmark": [370, 386, 388], "get_optimization_by_project_and_model": 370, "unpin_benchmark": 370, "db_connect": 370, "unpin": 370, "optimizationtyp": [370, 371, 476], "tuningdetail": [370, 378, 462], "tuninghistori": [370, 379, 463], "pruningdetail": [370, 376], "optimized_model": 370, "get_pinned_benchmark": 370, "list_for_precis": 371, "precision_nam": [371, 372], "get_optimization_type_for_precis": 371, "get_optimization_type_id": 371, "get_optimization_type_by_nam": 371, "get_optimization_type_by_id": 371, "get_precision_id": 372, "get_precision_by_nam": 372, "get_precision_by_id": 372, "num_thread": 373, "delete_profil": [373, 386, 389], "profiling_id": [373, 374, 386, 389, 464], "profiling_nam": 373, "update_num_thread": 373, "profilingresult": [373, 374], "total_execution_tim": 374, "accelerator_execution_tim": 374, "cpu_execution_tim": 374, "op_run": 374, "op_defin": 374, "get_result": 374, "bulk_add": 374, "params_interfac": [374, 380, 381, 383, 385, 386, 387, 388, 389, 391, 415, 475, 513], "profilingresultaddparamsinterfac": [374, 386, 389, 392], "bulk": [374, 386, 389], "delete_result": 374, "create_project": [375, 385, 386, 390], "delete_project": [375, 386, 390], "project_nam": [375, 381, 386], "get_model_by_nam": 375, "list_project": [375, 386, 390], "update_not": 375, "pruning_details_data": 376, "delete_pruning_detail": 376, "list_by_domain": 377, "transforms_queri": 377, "accuracy_criterion_typ": 378, "accuracy_criterion_threshold": 378, "exit_polici": [378, 626], "tuning_details_data": 378, "delete_tuning_detail": 378, "update_tuning_histori": 378, "tuning_history_id": 378, "minimal_accuraci": 379, "baseline_accuraci": 379, "baseline_perform": 379, "last_tune_accuraci": 379, "last_tune_perform": 379, "best_tune_accuraci": 379, "best_tune_perform": 379, "benchmarkapiinterfac": [380, 386], "get_benchmark_detail": [380, 386], "list_benchmark": [380, 386], "update_benchmark_accuraci": [380, 386], "update_benchmark_perform": [380, 386], "update_benchmark_statu": [380, 386], "update_benchmark_dur": [380, 386], "update_path": [380, 386, 388], "add_benchmark": [380, 386], "add_result": [380, 386, 389], "edit_benchmark": [380, 386], "edit": [380, 386, 388, 389, 392, 523], "parse_benchmark_data": [380, 386], "benchmarkaddparamsinterfac": [380, 386, 392], "parse_benchmark_edit_data": [380, 386], "benchmarkeditparamsinterfac": [380, 386, 392], "before_delete_benchmark_entri": 380, "sqlite3": 380, "db_model": [380, 391, 415, 475], "datasetapiinterfac": [381, 386], "get_dataset_detail": [381, 386], "list_dataset": [381, 386], "add_dataset": [381, 386], "set_template_path": [381, 386], "parsed_dataset_data": [381, 386], "datasetaddparamsinterfac": [381, 386, 392], "check_if_custom_metric_or_dataload": [381, 386], "dataset_data": [381, 386, 446, 447, 452, 456, 459, 462, 496], "generate_custom_templ": [381, 386], "dataloader_path": [381, 386], "generate_templ": [381, 386], "template_typ": [381, 386], "parse_dataset_data": [381, 386], "get_predefined_dataset": [381, 386], "prepare_predefined_dataload": [381, 386], "prepare_predefined_transform": [381, 386], "set_database_vers": [381, 382], "version_num": [381, 382], "alembic_vers": [381, 382], "initialize_associ": [381, 382], "initialize_precision_optimization_types_associ": [381, 382], "search_in_list_of_dict_for_unique_valu": [381, 382], "list_of_dict": [381, 382], "search_in_list_of_dict": [381, 382], "diagnosisapiinterfac": [383, 386], "get_op_list": [383, 386, 394], "get_op_detail": [383, 386, 394], "generate_optim": [383, 386], "model_wise_param": [383, 386], "parse_optimization_data": [383, 386, 388], "diagnosisoptimizationparamsinterfac": [383, 386, 392], "parse_op_wise_config": [383, 386], "op_wise_param": [383, 386], "parse_wise_paramet": [383, 386], "params_per_typ": [383, 386], "set_op_wise_pattern_precis": [383, 386], "parse_model_wise_config": [383, 386], "dictionariesapiinterfac": [384, 386], "dictonari": [384, 386], "list_domain": [384, 386], "list_domain_flavour": [384, 386], "list_optimization_typ": [384, 386], "list_optimization_types_for_precis": [384, 386], "list_precis": [384, 386], "list_dataload": [384, 386], "list_dataloaders_by_framework": [384, 386], "list_transform": [384, 386], "list_transforms_by_framework": [384, 386], "list_transforms_by_domain": [384, 386], "list_metr": [384, 386], "list_metrics_by_framework": [384, 386], "examplesapiinterfac": [385, 386], "get_optimization_data": [385, 386], "optimizationaddparamsinterfac": [385, 386, 388, 392], "benchmark_api_interfac": [386, 391, 415], "dataset_api_interfac": [386, 391, 415], "diagnosis_api_interfac": [386, 391, 415], "dictionaries_api_interfac": [386, 391, 415], "examples_api_interfac": [386, 391, 415], "model_api_interfac": [386, 391, 415], "optimization_api_interfac": [386, 391, 415], "profiling_api_interfac": [386, 391, 415], "project_api_interfac": [386, 391, 415], "modelapiinterfac": [386, 387], "add_model": [386, 387, 390], "get_model_detail": [386, 387], "list_model": [386, 387, 415, 441, 475], "parse_model_data": [386, 387], "modeladdparamsinterfac": [386, 387, 392], "optimizationapiinterfac": [386, 388], "get_optimization_detail": [386, 388], "list_optim": [386, 388], "update_optimization_statu": [386, 388], "update_optimization_dur": [386, 388], "add_optim": [386, 388], "add_quantization_optim": [386, 388], "optimization_data": [386, 388, 446, 447, 452, 456, 459, 462], "add_pruning_optim": [386, 388], "add_standard_optim": [386, 388], "edit_optim": [386, 388], "get_pruning_detail": [386, 388], "gat": [386, 388], "edit_tuning_detail": [386, 388], "parsed_optimization_data": [386, 388], "optimizationeditparamsinterfac": [386, 388, 392], "edit_pruning_detail": [386, 388], "pruning_data": [386, 388], "add_tuning_histori": [386, 388], "parse_tuning_histori": [386, 388], "tuninghistoryinterfac": [386, 388, 392, 513], "parse_optimization_edit_data": [386, 388], "load_pruning_details_config": [386, 388, 494], "profilingapiinterfac": [386, 389], "get_profiling_detail": [386, 389], "list_profil": [386, 389], "update_profiling_statu": [386, 389], "update_profiling_dur": [386, 389], "add_profil": [386, 389], "edit_profil": [386, 389], "bulk_add_result": [386, 389], "parse_profiling_data": [386, 389], "profilingaddparamsinterfac": [386, 389, 392], "parse_profiling_result_data": [386, 389], "parse_profiling_edit_data": [386, 389], "profilingeditparamsinterfac": [386, 389, 392], "projectapiinterfac": [386, 390], "get_project_detail": [386, 390], "add_dummy_dataset": [386, 390], "update_project_not": [386, 390], "db_oper": [391, 415, 475], "parse_nod": 392, "tuninghistoryiteminterfac": [392, 513], "update_dataloaders_param": 393, "dataloaders_to_upd": 393, "framework_dataloaders_config": 393, "get_framework_dataloaders_config": 393, "get_framework_transforms_config": 393, "get_tensors_info": [394, 423], "load_quantization_config": 394, "calculate_ms": 394, "input_model_tensor": 394, "optimized_model_tensor": 394, "op_detail": [394, 396, 415, 475], "opdetail": [394, 399], "get_histogram_data": 394, "draw": [394, 621, 624], "diagnosisfactori": 395, "get_diagnosi": 395, "onnx_diagnosi": [396, 415, 475], "onnxrt_diagnosi": [396, 397, 415], "tensorflow_diagnosi": [396, 415, 475], "op_entri": [396, 415, 475], "onnxrtdiagnosi": 398, "onnxrtmodel": [398, 426], "serialization_typ": [399, 400, 430, 482, 484, 496, 497, 501, 502], "oppattern": 399, "pattern_data": 399, "opweight": 399, "weights_data": 399, "opactiv": 399, "op_activ": 399, "opentri": 400, "activation_min": 400, "activation_max": 400, "tensorflowdiagnosi": 402, "browser": [403, 572, 602, 606], "get_directory_entri": 403, "get_requested_path": 403, "get_non_hidden_directory_entri": 403, "create_dir_entri": 403, "direntri": 403, "create_file_entri": 403, "create_entri": 403, "is_directori": 403, "sort_entri": 403, "should_show_fil": 403, "should_show_only_model_fil": 403, "get_setting_valu": 403, "get_filter_valu": 403, "filter_requested_entri": 403, "filter_nam": 403, "is_directory_entri": 403, "is_model_or_directory_entri": 403, "shown": [403, 526, 572, 574, 577, 589, 603, 611, 612, 624], "is_dataset_or_directory_entri": 403, "brows": 404, "filesystem": [404, 494, 519], "attribute_typ": 405, "expanded_group": [406, 409], "add_edg": 408, "source_id": 408, "target_id": 408, "highlight_pattern": 408, "highlight": [408, 411, 525, 572], "get_target_nod": 408, "reader": [409, 410, 415, 475], "graphread": 409, "find_pattern_in_graph": [409, 510], "onnxrt_read": [410, 412, 415], "tensorflow_read": [410, 412, 415], "collaps": [410, 415, 475, 572], "graph_read": [410, 415, 475], "groupnod": 411, "group_nam": 411, "onnxrtread": 413, "tensorflowread": 414, "jobs_control_queu": [415, 416, 475], "frozen_pb": [415, 422, 432], "meta_graph": [415, 422, 432], "model_type_gett": [415, 422, 475], "download_config": [415, 440, 441, 475], "download_model": [415, 440, 441, 475], "optimize_model": [415, 448, 450, 451, 454, 457], "neural_coder_optim": [415, 450, 475], "tune_model": [415, 450, 460], "execute_optim": [415, 450, 475], "tensorflow_profil": [415, 466, 475], "execute_profil": [415, 466, 475], "profile_model": [415, 466, 468, 472, 475], "job": [416, 490], "_jobscontrolqueu": 417, "queu": 417, "jobsmanag": 417, "_jobsmmanag": 418, "_job": 418, "get_default_path": 420, "shape_elements_ord": [423, 426, 435, 494], "get_input_nod": [423, 433, 434, 435], "get_output_nod": [423, 433, 434, 435], "ensure_supported_path": 423, "get_model_graph": [423, 426, 434, 435, 510], "supports_path": [423, 426, 428, 431, 433, 434, 436], "guard_requirements_instal": [423, 426, 428, 435], "instal": [423, 426, 428, 435, 442, 579, 582, 584, 592, 594, 597, 600, 604, 607, 609, 610, 613, 628], "nc_model_inst": [426, 435], "filtered_input_nod": 426, "remove_number_of_samples_from_shap": 426, "pytorchscriptmodel": 428, "modelrepositori": 429, "get_framework_from_path": [429, 494], "get_supported_framework": 429, "is_model_path": 429, "trust": [430, 572], "frozenpbmodel": 431, "metagraphmodel": 434, "metagraph": 434, "savedmodelmodel": 436, "get_input_shap": 437, "fix_dynamic_shap": 437, "resourc": [440, 577, 614], "download_yaml_config": 440, "model_info": 440, "download_fil": 440, "download_path": 440, "report_progress": 440, "unpack_arch": 440, "archive_path": 440, "unpack": 440, "archiv": 440, "get_yaml_url": 440, "model_src_dir": 440, "yaml_relative_loc": 440, "get_available_model": 442, "check_vers": 442, "framework_vers": 442, "supported_vers": 442, "validate_model_list": 442, "model_list": 442, "get_framework_module_nam": 442, "get_installed_framework": 442, "mappingdirect": 444, "namesmapp": 444, "framework_map": 444, "domain_map": 444, "domain_flavour_map": 444, "precision_map": 444, "map_nam": 444, "parameter_typ": 444, "execute_optimization_pytorch_script": 445, "execute_optimization_regular": 445, "parse_model_data_to_bench_nam": 445, "parse_log": 445, "optimization_detail": 445, "check_if_collect_tuning_histori": 445, "optimizationfactori": 446, "get_optim": 446, "optimization_script": [447, 452, 456, 459, 462], "optimize_graph": [449, 453], "output_graph": [449, 453, 458, 461], "optimize_graph_config": [449, 453], "optimize_pt_script": 455, "output_model_nam": 456, "output_model_dir": 456, "optimizationinterfac": 456, "optimization_workdir": 463, "watcher": 463, "process_succeed": 463, "signal": [463, 494], "was_history_file_chang": 463, "history_file_modification_tim": 463, "modif": [463, 529, 574, 583, 597], "send_history_snapshot": 463, "execute_real_profil": 464, "profiling_detail": 464, "profilerfactori": [465, 470], "get_profil": [465, 470], "profiling_data": [465, 469, 470, 472, 492], "load_profiling_detail": 467, "json_path": 467, "config_path": 469, "initialize_graph": 472, "tf_modul": 472, "create_tf_config": 472, "num_warmup": 472, "convert_nodes_to_list": 472, "build_dataload": 472, "delete_assign": 473, "wsgi": 474, "prepare_environ": 474, "app": [475, 509], "history_snapshot_pars": [475, 509, 514], "request_data_processor": [475, 509, 514], "response_gener": [475, 509, 514, 515, 517, 520], "status": [476, 488, 493], "ensure_workdir_exists_and_writ": 477, "clean_workloads_wip_statu": 477, "wip": [477, 627], "workloads_list": 477, "migrate_databas": 477, "latest": [477, 487, 587, 616, 620], "alemb": [477, 582, 587], "notfoundexcept": [478, 507, 508], "accessdeniedexcept": 478, "deni": 478, "clienterrorexcept": 478, "internalexcept": 478, "subject": [479, 506, 588], "send_respons": 479, "log_nam": 479, "additional_log_nam": [479, 487], "shell": [479, 487, 622], "process_dur": 479, "cwd": [479, 487], "universal_newlin": [479, 487], "startupinfo": [479, 487], "creationflag": [479, 487], "ignore_exit_cod": [479, 487], "pid": [479, 487], "env_arg": 479, "ncprocess": [479, 488], "refresh_workdir": 479, "is_multi_command": 479, "expir": 480, "expiringdictitem": 480, "expires_at": 480, "is_expir": 480, "expiringdict": 480, "initial_valu": 480, "ttl": 480, "120": 480, "userdict": 480, "githubinfo": 481, "releas": [481, 494, 528, 587, 598, 600, 602, 606, 608, 628], "hw": 482, "hwinfo": 482, "get_distribut": 482, "distibut": 482, "get_bios_vers": 482, "bio": [482, 613], "is_turbo_boost_en": 482, "turbo": [482, 613], "boost": [482, 590, 593, 609, 616], "get_kernel_vers": 482, "get_framework_info": 482, "get_framework_dependency_info": 482, "subdepend": 482, "serializ": 484, "serialize_item": 484, "datetim": 484, "throw": 484, "typeerror": 484, "2016": 484, "84913": 484, "04": [484, 587, 613, 627], "08t11": 484, "084913": 484, "change_log_level": 485, "optimizationpars": 486, "performancepars": 486, "update_parti": 486, "partial": [486, 618], "parsed_result": 486, "summarize_parti": 486, "summarize_valu": 486, "accuracypars": 486, "benchmarkparserfactori": 486, "get_pars": 486, "profilingpars": 486, "unify_tim": 486, "string_valu": 486, "micro": 486, "125": [486, 627], "6m": 486, "microsecond": 486, "docker": 487, "aibt_tensorflow": 487, "cento": [487, 587], "7_3_mkldnn_tensorflow": 487, "111224": 487, "pull_imag": 487, "0c750a01": 487, "90e0": 487, "4aa8": 487, "99fe": 487, "a194d55a2046": 487, "time_start": 487, "2018": 487, "17t14": 487, "47": [487, 627], "352502": 487, "time_stop": 487, "25": [487, 627], "110410": 487, "info_path": 487, "runtim": [487, 528, 529, 530, 574, 580, 583, 586, 590, 594, 599, 600, 617], "tail": 487, "is_ok": [487, 488], "popen": 487, "remove_log": 487, "properli": 488, "rtype": 488, "return_code_al": 488, "remove_successful_log": 488, "success": [488, 506, 587], "get_status_update_funct": 490, "job_typ": 490, "sent": 492, "throughput": 492, "acc_input_model": 492, "acc_optimized_model": 492, "size_input_model": 492, "size_optimized_model": 492, "path_optimized_model": 492, "optimization_tim": 492, "insert_data": 492, "calculate_throughput": 492, "readi": 492, "ensure_working_path_exist": 493, "clean_log": 493, "workdir_path": 493, "is_hidden": 494, "get_dataset_path": 494, "get_file_extens": 494, "lead": [494, 577, 590, 614, 615], "is_dataset_fil": 494, "normalize_domain": 494, "underscor": 494, "normalize_framework": 494, "normalize_str": 494, "string_to_norm": 494, "get_model_zoo_config_path": 494, "model_dict": 494, "get_model_zoo_model_path": 494, "check_modul": 494, "get_module_vers": 494, "mb": 494, "add_unit": 494, "load_model_config": 494, "load_dataloader_config": 494, "load_transforms_config": 494, "load_transforms_filter_config": 494, "meaning": [494, 612], "load_precisions_config": 494, "get_default_pruning_config_path": 494, "load_model_wise_param": 494, "load_metrics_config": 494, "get_metrics_dict": 494, "load_help_nc_param": 494, "replace_with_valu": 494, "file_path": 494, "verify_file_path": 494, "determine_ip": 494, "ip": 494, "is_development_env": 494, "nc_mode": 494, "filter_transform": 494, "parse_bool_valu": 494, "release_tag": 494, "get_shape_from_transform": 494, "get_height_width_from_s": 494, "parse_to_string_list": 494, "parse_to_float_list": 494, "export_to_csv": 494, "parse_vers": 494, "string_vers": 494, "remove_dataload": 495, "datalad": 495, "remove_accuracy_metr": 495, "set_evaluation_dataload": 495, "udpat": 495, "set_evaluation_dataset_path": 495, "get_performance_config": 495, "set_performance_cores_per_inst": 495, "get_performance_cores_per_inst": 495, "set_performance_num_of_inst": 495, "get_performance_num_of_inst": 495, "set_accuracy_and_performance_batch_s": 495, "set_quantization_dataload": 495, "set_quantization_dataset_path": 495, "set_quantization_batch_s": 495, "set_accuracy_go": 495, "accuracy_go": 495, "set_accuracy_metr": 495, "set_transform": 495, "process_transform": 495, "set_quantization_approach": 495, "set_input": 495, "set_output": 495, "set_quantization_sampling_s": 495, "set_performance_warmup": 495, "set_performance_iter": 495, "set_optimization_precis": 495, "yaml_path": 495, "is_dummi": 496, "labelbal": [496, 574, 575], "set_transforms_from_list": 496, "transforms_list": 496, "set_dataset": 496, "postprocessschema": 497, "get_label_shift_valu": 497, "set_accuracy_postprocess_transform": 497, "set_precis": [498, 500], "sgdoptim": 502, "adamwoptim": 502, "adamoptim": 502, "crossentropylosscriterion": 502, "sparsecategoricalcrossentropycriterion": 502, "knowledgedistillationlosscriterion": 502, "set_postprocess_transform": 502, "weightcompressionapproach": 502, "initialize_prun": 502, "pruner_dict_list": 502, "serialize_prun": 502, "parse_dict_value_to_float": 502, "parse_dict_value_to_int": 502, "wiseconfigdetail": 503, "wiseconfig": 503, "acccriterion": 504, "exitpolici": 504, "set_timeout": 504, "set_max_tri": 504, "trial": [504, 624], "set_performance_onli": 504, "float_represent": 505, "dumper": 505, "pruner_represent": 505, "outsid": 506, "create_simple_respons": 506, "gui": [506, 507, 511, 528, 572, 586, 587], "messagequeu": 506, "queue": [506, 511], "post_failur": 506, "failur": [506, 525], "post_success": 506, "post_error": 506, "global_config_directori": 507, "set_up": 507, "determine_values_from_environ": 507, "get_command_line_arg": 507, "determine_server_port": 507, "max_ports_tri": 507, "port_default": 507, "determine_gui_port": 507, "client": [507, 572], "server_port": 507, "unless": [507, 583], "is_port_taken": 507, "determine_log_level": 507, "determine_url_prefix": 507, "get_url": 507, "dump_token_to_fil": 507, "servicenotfoundexcept": 508, "unknown": 508, "connector": 510, "routingdefinit": 510, "rout": 510, "realtimeroutingdefinit": 510, "realtim": 510, "deferredroutingdefinit": 510, "deferredsubprocessroutingdefinit": 510, "spawn": 510, "get_system_info": 510, "endpoint": 511, "run_serv": 511, "webserv": 511, "get_tls_arg": 511, "tl": [511, 572], "block_ifram": 511, "werkzeug": [511, 519], "ifram": 511, "csp": 511, "block_snif": 511, "mime": 511, "snif": 511, "require_api_token": 511, "author": [511, 588], "j": [511, 524, 528, 627], "handle_api_cal": 511, "subpath": 511, "allow_api_cal": 511, "page_not_found": 511, "disable_cach": 511, "build_paramet": 511, "flask": [511, 572], "web_socket_publish": 511, "web_socket": 511, "flask_socketio": 511, "socketio": [511, 572], "benchmarkservic": 512, "workloadservic": [512, 516, 517, 520], "historysnapshotpars": 513, "history_snapshot": 513, "provide_perform": 513, "parse_history_snapshot": 513, "parse_history_item": 513, "history_item": 513, "extract_accuraci": 513, "extract_perform": 513, "modelservic": 515, "optimizationservic": 516, "profilingservic": 517, "generate_csv": 517, "processor": [518, 528, 590, 613, 616, 618, 619, 627], "requestdataprocessor": 518, "get_string_valu": 518, "responsegener": 519, "serve_from_filesystem": 519, "mimetyp": 519, "as_attach": 519, "add_refresh": 519, "refresh_tim": 519, "refresh": [519, 602, 606], "from_except": 519, "get_status_code_for_except": 519, "get_code_templ": 520, "get_output": 520, "welcom": [522, 523, 524, 528, 628], "interest": [523, 528, 622], "foster": 523, "particip": 523, "harass": 523, "everyon": 523, "ethnic": 523, "characterist": 523, "gender": 523, "educ": 523, "socio": 523, "econom": 523, "appear": [523, 572, 603, 609], "race": 523, "religion": 523, "sexual": 523, "orient": 523, "contribut": [523, 528], "inclus": 523, "Being": 523, "respect": [523, 583, 614, 615, 626], "viewpoint": 523, "gracefulli": 523, "critic": 523, "focus": [523, 529], "empathi": 523, "toward": [523, 577], "unaccept": 523, "imageri": 523, "unwelcom": 523, "troll": 523, "insult": 523, "derogatori": 523, "comment": [523, 575, 589, 623], "polit": 523, "attack": 523, "publish": [523, 588, 590, 610], "electron": 523, "permiss": 523, "inappropri": 523, "profession": 523, "clarifi": 523, "appropri": 523, "fair": 523, "action": [523, 604, 607], "reject": 523, "wiki": 523, "ban": 523, "temporarili": 523, "perman": 523, "deem": 523, "threaten": 523, "offens": 523, "harm": 523, "mail": 523, "social": [523, 528, 616], "media": [523, 528, 616], "appoint": 523, "event": [523, 622], "abus": 523, "report": [523, 524, 572, 621], "contact": [523, 620, 621], "complaint": 523, "review": [523, 524], "investig": 523, "circumst": [523, 617], "oblig": 523, "confidenti": [523, 572], "regard": [523, 619], "incid": 523, "good": [523, 618, 624], "faith": 523, "repercuss": 523, "leadership": 523, "faq": [523, 528], "page": [523, 524, 528], "view": [524, 528, 572, 580, 600, 609, 620], "pylint": 524, "flake8": 524, "autopep8": 524, "cover": [524, 585, 616], "adopt": [524, 592], "certif": [524, 572], "agre": 524, "bug": 524, "jira": 524, "ticket": 524, "potenti": [524, 526], "risk": 524, "pr": [524, 589, 604, 607, 620], "reproduc": 524, "submit": [524, 616], "intend": 524, "collabor": [524, 594, 600], "adher": 524, "toolkit": [525, 528, 587, 592, 600, 616], "tracer": 525, "resolv": [525, 527], "floatfunct": 525, "cat": [525, 595], "10004": [525, 526, 529, 574, 577, 578, 581, 583, 586, 590, 612, 617, 626], "neural_compressor": [525, 526, 528, 549, 573, 574, 575, 577, 578, 579, 581, 584, 585, 589, 590, 591, 611, 612, 614, 617, 618, 619, 620, 621, 623, 624, 626], "conduct": [525, 597, 609], "imper": 525, "therefor": [525, 615, 618, 620], "lot": 525, "might": [525, 572, 624], "successfulli": [525, 579, 616], "proxi": 525, "tutori": [525, 600, 616], "prototyp": 525, "html": [525, 604, 607], "untrac": 525, "ssd": [525, 627], "resnet34": [525, 627], "r34": 525, "bboxes_labels_scor": 525, "prob": 525, "max_output": 525, "zip": 525, "dbox": 525, "dlabel": 525, "dscore": 525, "decode_singl": 525, "autom": [526, 592, 609, 610], "artifici": 526, "ann": 526, "par": 526, "outperform": 526, "4x": [526, 618], "figur": [526, 602, 603, 606, 614], "inner": 526, "evolutionari": 526, "cycl": 526, "conclud": 526, "simplest": [526, 595], "launcher": [526, 528, 577, 578, 600, 614], "agent": 526, "ofa_mbv3_d234_e346_k357_w1": 526, "250": 526, "results_csv_path": 526, "search_result": 526, "aim": [526, 528, 592, 615, 624], "wmt": 526, "en": 526, "de": 526, "guidelin": [527, 528], "mainstream": 528, "showcas": 528, "broad": [528, 586, 598], "wide": [528, 580, 590, 615, 618, 627], "xeon": [528, 587, 588, 590, 613, 616, 618, 619, 627], "scalabl": [528, 587, 590, 613, 616, 618, 619, 627], "flex": [528, 587], "amd": [528, 586, 587, 627], "arm": [528, 586, 587, 627], "nvidia": [528, 586, 587, 614, 618, 627], "stabl": [528, 572, 587, 616], "diffus": [528, 616, 627], "gpt": [528, 627], "vision": [528, 584, 596], "coder": [528, 586, 593, 594, 597, 600, 603, 616], "cloud": [528, 616], "marketplac": [528, 610, 616], "amazon": [528, 592, 600], "azur": [528, 616], "softwar": [528, 588, 590, 613, 616, 620], "alibaba": [528, 599, 606, 607, 616], "tencent": [528, 616], "taco": 528, "ai": [528, 592, 616, 619], "ecosystem": [528, 616], "lightn": [528, 599], "visit": [528, 627], "websit": [528, 587], "pip": [528, 572, 579, 582, 584, 587, 594, 597, 602, 604, 606, 607, 620], "wget": [528, 584], "googleapi": [528, 584], "v1_6": [528, 584], "mobilenet_v1_1": [528, 584], "0_224_frozen": [528, 584], "quick": [528, 583, 626], "overview": 528, "workflow": [528, 577, 587, 590, 604, 607, 622], "notebook": 528, "oneapi": [528, 587, 616], "analyt": [528, 587, 616], "jupyterlab": [528, 592, 598, 600, 602, 606], "visual": [528, 600, 609, 621, 622, 624], "studio": [528, 600, 609], "topic": 528, "soon": 528, "busi": [528, 616], "jan": [528, 616], "2023": [528, 627], "blog": [528, 616], "enhanc": [528, 592, 616, 619], "4th": [528, 616], "gen": [528, 590, 616, 619], "neurip": [528, 616], "fast": [528, 616], "oct": [528, 616], "quala": [528, 616], "minilm": [528, 616, 627], "legal": [528, 628], "secur": [528, 613, 616, 628], "idea": [528, 615, 624], "feel": 528, "bridg": [529, 586], "vanilla": [529, 586], "abcadaptor": 529, "__init__": [529, 574, 575, 589, 624], "he": 529, "besid": [529, 577], "past": 529, "effect": [529, 614, 615], "mainten": 529, "difficult": 529, "abil": [529, 575, 583], "fragment": 529, "semant": [529, 583], "microsoft": 529, "mla": [529, 618], "explor": 529, "nightli": [572, 587], "pypi": [572, 587, 604, 607], "conda": [572, 582, 587, 595, 603, 620], "forg": [572, 582, 587], "clone": [572, 587, 602, 606], "cd": [572, 579, 587], "setup": [572, 583, 587, 604, 607, 614], "ui": 572, "5000": 572, "338174d13706855fc6924cec7b3a8ae8": 572, "listen": 572, "firewal": 572, "8080": 572, "tf_enable_onednn_opt": [572, 587], "cert": 572, "path_to_cert": 572, "crt": 572, "path_to_private_kei": 572, "encrypt": 572, "insecur": 572, "expos": 572, "forfeit": 572, "threat": 572, "button": [572, 586, 603, 609], "click": [572, 584, 586, 592, 593, 600, 603, 609, 616, 622], "pop": [572, 609], "recognit": [572, 579, 622], "few": [572, 616, 624], "finish": [572, 603], "synthet": 572, "plu": 572, "icon": 572, "section": [572, 577, 578, 609, 614, 617, 626], "unfold": 572, "On": [572, 618], "panel": [572, 604, 607, 609], "navig": 572, "trash": 572, "visibl": 572, "cursor": 572, "prompt": [572, 579], "confirm": 572, "pencil": 572, "light": [572, 578], "blue": 572, "color": 572, "row": [572, 614], "arrow": 572, "checkbox": 572, "chart": [572, 618, 621, 622], "offer": [572, 575], "conveni": 572, "variat": 572, "yellow": 572, "remind": 572, "autograd": 572, "numba": 572, "pictur": 572, "ilsvrc": 572, "hour": [572, 624], "dialog": 572, "cryptographi": 572, "linux": [573, 603, 609], "x86_64": 573, "aarch64": 573, "often": [574, 577, 612, 614, 615], "encount": 574, "lack": 574, "faster": [574, 576, 616, 627], "hard": 574, "treat": 574, "manner": [574, 577, 591], "post_training_static_qu": [574, 575, 617, 624], "300": [574, 575], "output_model": [574, 622], "customis": [574, 575], "ensp": [575, 589, 623], "imagerecord": [575, 579, 626], "image_nam": 575, "cocorecord": 575, "gt": [575, 581, 623], "int64": 575, "style_transf": 575, "content": 575, "tfrecorddataset": 575, "helloworld": [575, 623], "aid": 576, "increas": [576, 586, 592, 609, 624], "infrastructur": 576, "deploi": [577, 624], "power": [577, 603, 613], "mobil": [577, 627], "softmax": 577, "l": [577, 622, 624], "kd": 577, "kullback": 577, "leibler": 577, "patient": 577, "compact": [577, 595, 614, 615], "ia": 577, "attach": 577, "shallow": 577, "deepest": 577, "deeper": 577, "acceler": [577, 592, 600, 609, 614, 615, 616, 619, 624], "10006": [577, 578], "training_func_for_nc": [577, 578], "huge": [578, 615], "bit": [578, 590, 616, 618], "heavi": 578, "booster": 578, "degrad": 578, "retrain": [578, 614, 615], "incorpor": [578, 624], "novel": [578, 592, 603, 609], "horovod": 579, "builtin": 579, "program": [579, 588, 590, 592, 609], "addition": [579, 624], "enable_eager_execut": 579, "yaml_file_path": 579, "evaluation_time_cost": 579, "partit": 579, "distributedsampl": 579, "train_sampl": 579, "train_dataset": 579, "num_replica": 579, "train_load": 579, "train_kwarg": 579, "adadelta": 579, "distributedoptim": 579, "named_paramet": 579, "broadcast_paramet": 579, "root_rank": 579, "broadcast_optimizer_st": 579, "set_epoch": 579, "batch_idx": 579, "zero_grad": [579, 614], "nll_loss": 579, "log_interv": 579, "0f": 579, "tloss": 579, "6f": 579, "dry_run": 579, "test_func": 579, "num_of_process": 579, "002": 579, "ssh": [579, 609], "readm": 579, "exactli": [579, 593], "resnet50_v1": 579, "topk": [579, 589], "resizecropimagenet": [579, 623], "realiz": [579, 589, 611, 619, 621], "tow": 579, "situat": 579, "node1": 579, "node2": 579, "TO": [579, 594], "your_node1_nam": 579, "your_node2_nam": 579, "resnet50_fp32_pretrained_model": 579, "nc_resnet50_v1": 579, "resnet": [579, 584, 627], "varieti": [580, 617, 624], "demonstr": [580, 592, 614, 615, 622], "10k": [580, 584], "speedup": [580, 584, 586, 618], "2x": [580, 584, 586, 613], "exchang": 581, "hope": 581, "briefli": [581, 614], "matur": 581, "major": [581, 585, 618], "reus": 581, "inc_model": [581, 591], "fp32_onnx_config": 581, "randn": 581, "int8_onnx_config": 581, "matmulintegertofloat": 581, "matmulinteg": 581, "incompat": 582, "88": [582, 621, 627], "80": [582, 622, 627], "pyobject": 582, "reinstal": 582, "importerror": 582, "libgl": 582, "apt": [582, 587, 595, 603], "yum": [582, 587], "opencv": [582, 603], "pend": 582, "27": [582, 587, 627], "friendli": [583, 626], "dive": 583, "let": [583, 597, 617, 626], "syntax": 583, "up1": 583, "up2": 583, "valid_mixed_precis": 583, "per_tensor": [583, 626], "grappler_optim": 583, "constfold": 583, "arithmet": 583, "debug_stripp": 583, "jupyt": [584, 600, 602, 603, 606], "lab": [584, 602, 603, 604, 606, 607], "concept": [585, 621], "custom_metr": 585, "explicitli": 585, "refin": [585, 615], "These": 586, "420": 586, "geomean": 586, "snippet": 586, "upload": [586, 604, 607], "qintegerop": [586, 618], "plan": 586, "uninstal": [587, 609], "frequent": 587, "ask": 587, "consolid": 587, "eas": [587, 594, 616], "streamlin": 587, "scienc": 587, "anaconda": 587, "suit": [587, 610, 622], "esri": 587, "formerli": 587, "skylak": 587, "cascad": 587, "lake": [587, 590, 616], "cooper": [587, 590, 616], "ic": [587, 614, 616], "sapphir": 587, "rapid": 587, "hbm": 587, "arctic": 587, "sound": 587, "pont": 587, "vecchio": 587, "ubuntu": [587, 613], "fortensorflow": 587, "forpytorch": 587, "onednn": [587, 618], "apach": 588, "copyright": 588, "accompani": 588, "research": 588, "wish": 588, "bibtex": 588, "misc": 588, "feng": 588, "tian": 588, "hanwen": 588, "haihao": 588, "shen": 588, "suyu": 588, "chen": 588, "titl": [588, 610], "howpublish": 588, "year": 588, "logo": [588, 613], "atom": 588, "phi": 588, "pentium": 588, "vtune": 588, "corpor": [588, 613], "subsidiari": [588, 613], "brand": [588, 613], "claim": [588, 613], "popularli": 589, "industri": [589, 616], "label_map": 589, "decis": 589, "ap": 589, "curv": 589, "turn": [589, 603], "target_boxes_num": 589, "str_label": 589, "int_label": 589, "inturn": 589, "cocomap": 589, "vocmap": 589, "categor": 589, "multiclass": 589, "multilabel": 589, "multi_metr": 589, "newmetr": 589, "reflect": [589, 613, 623], "recent": 590, "growth": [590, 615], "complex": [590, 615], "significantli": [590, 614, 615], "half": [590, 600], "sixteen": 590, "bandwidth": 590, "launch": [590, 610], "3rd": [590, 616, 618, 619], "codenam": 590, "x86": 590, "avx512": [590, 618], "vcvtne2ps2bf16": 590, "vcvtneps2bf16": 590, "vdpbf16p": 590, "onnxrt_cuda_ep": 590, "avx512_bf16": 590, "consequ": 590, "cuda": [590, 592, 594], "persist": 591, "brought": [591, 593, 600, 618], "tf2": 591, "h5": 591, "onnx_ml_pb2": 591, "hybridblock": 591, "0000": 591, "saved_result": 591, "subsequ": [592, 609], "acquir": 592, "analysi": [592, 609, 621], "heurist": [592, 609], "great": 592, "facilit": 592, "autocast": 592, "simultan": [592, 612, 617], "my_model": 592, "no_grad": 592, "memory_format": 592, "112": [592, 627], "plugin": [592, 610], "aw": [592, 600, 616, 627], "sagemak": [592, 600], "inlin": [592, 597, 600], "neural_cod": [592, 594, 596, 597, 598, 600], "superbench": 592, "enjoi": [593, 597, 600], "reload": [593, 610], "modern": 594, "democrat": [594, 616], "programm": [594, 600, 609], "nano_bf16_channels_last": 594, "resnet18": [594, 627], "nano_bf16_ipex_channels_last": 594, "nano_bf16_ipex": 594, "nano_bf16": 594, "nano_fp32_channels_last": 594, "nano_fp32_ipex_channels_last": 594, "nano_fp32_ipex": 594, "nano_gpu_to_cpu": 594, "nano_int8": 594, "nano_jit_bf16_channels_last": 594, "nano_jit_bf16_ipex_channels_last": 594, "nano_jit_bf16_ipex": 594, "nano_jit_bf16": 594, "nano_jit_fp32_channels_last": 594, "nano_jit_fp32_ipex_channels_last": 594, "nano_jit_fp32_ipex": 594, "nano_jit_fp32": 594, "nano_onnxruntime_fp32": 594, "nano_onnxruntime_int8_qlinear": 594, "openvino": 594, "nano_openvino_fp32": 594, "nano_openvino_int8": 594, "bc": [595, 603], "conda_prefix": 595, "echo": 595, "tradit": [595, 615], "libjemalloc": 595, "libiomp5": 595, "home": 595, "lib": 595, "ld_preload": 595, "malloc_conf": 595, "oversize_threshold": 595, "background_thread": 595, "metadata_thp": 595, "dirty_decay_m": 595, "9000000000": 595, "muzzy_decay_m": 595, "kmp_affin": 595, "kmp_blocktim": 595, "dnnl_primitive_cache_capac": 595, "cpufreq": 595, "scaling_governor": 595, "powersav": 595, "sudo": 595, "tee": 595, "pytorch_jit_script": [596, 599], "pytorch_channels_last": [596, 599], "run_bench": 596, "patch": [596, 609], "patch_path": 596, "your_patch_path": 596, "sweep": 596, "sweep_object": 596, "bench_config": 596, "bench_featur": 596, "sai": 597, "run_glu": [597, 598], "requisit": 597, "task_nam": [597, 598], "do_ev": [597, 598], "run_glue_optim": 597, "opt": 597, "static_ipex": 597, "auto_qu": 598, "v4": [598, 627], "albert": [598, 627], "sst2": 598, "alexnet": [598, 627], "pytorch_amp": 599, "optimize_for_infer": 599, "pytorch_jit_trac": 599, "pytorch_jit_script_ofi": 599, "pytorch_jit_trace_ofi": 599, "torchdynamo": 599, "pytorch_torchdynamo_jit_script": 599, "pytorch_torchdynamo_jit_trac": 599, "pytorch_torchdynamo_jit_script_ofi": 599, "pytorch_torchdynamo_jit_trace_ofi": 599, "pytorch_inc_bf16": 599, "pytorch_inc_static_quant_fx": 599, "pytorch_inc_static_quant_ipex": 599, "pytorch_inc_dynamic_qu": 599, "pytorch_ipex_fp32": 599, "pytorch_ipex_bf16": 599, "pytorch_ipex_int8_static_qu": 599, "pytorch_ipex_int8_dynamic_qu": 599, "blade": 599, "disc": 599, "pytorch_aliblad": 599, "pytorch_lightning_bf16_cpu": 599, "tensorflow_amp": 599, "keras_amp": 599, "tensorflow_inc": 599, "keras_inc": 599, "onnx_inc_static_quant_qlinear": 599, "onnx_inc_static_quant_qdq": 599, "onnx_inc_dynamic_qu": 599, "optimum": [599, 600], "pytorch_inc_huggingface_optimum_stat": 599, "pytorch_inc_huggingface_optimum_dynam": 599, "intel_extension_for_transform": 599, "bigdl": [599, 600], "nano": [599, 600], "nano_": 599, "inc_auto": 599, "delight": 600, "announc": 600, "trainer": 600, "500": 600, "speed": [600, 615, 616, 618], "innov": [600, 616], "isa": 600, "xpu": 600, "delta": 600, "acc_delta": 600, "int8_acc": 600, "fp32_acc": 600, "ext": [602, 604, 606, 607, 608], "nodej": [602, 606], "jlpm": [602, 606], "yarn": [602, 606], "npm": [602, 603, 606], "lieu": [602, 606], "labextens": [602, 603, 606], "typescript": [602, 606], "watch": [602, 606], "termin": [602, 603, 606], "immedi": [602, 606], "rebuilt": [602, 606], "dev": [602, 606], "symlink": [602, 606], "blank": 603, "cell": 603, "gain": [603, 612, 616], "mkl": 603, "jemalloc": 603, "pip3": 603, "headless": 603, "pyproject": [604, 607], "toml": [604, 607], "twine": [604, 607], "whl": [604, 607], "dist": [604, 607], "sdist": [604, 607], "bdist_wheel": [604, 607], "frontend": [604, 607], "login": [604, 607, 621], "cut": [604, 607], "fork": [604, 607], "admin_github_token": [604, 607], "pypi_token": [604, 607], "npm_token": [604, 607], "secret": [604, 607], "draft": [604, 607], "changelog": [604, 607, 608], "pkg": [604, 607], "bot": [604, 607], "pick": [604, 607, 610], "feedstock": [604, 607], "hatch": 607, "notabl": 608, "vscode": [608, 610], "daili": 609, "advantag": [609, 617], "remot": 609, "market": 609, "sidebar": 609, "hover": 609, "diff": 609, "manifest": 610, "declar": 610, "palett": 610, "veri": [610, 618, 624], "registercommand": 610, "amodio": 610, "tsl": 610, "dbaeumer": 610, "eslint": 610, "press": 610, "f5": 610, "ctrl": [610, 627], "hello": 610, "world": 610, "breakpoint": 610, "consol": 610, "relaunch": 610, "toolbar": 610, "node_modul": 610, "viewlet": 610, "dropdown": 610, "startup": 610, "bundl": 610, "multi_object": 611, "arbitrari": 612, "p_conf": 612, "platinum": [613, 627], "8358": 613, "manufactur": 613, "m50cyp2sbstd": 613, "se5c620": 613, "86b": 613, "0005": 613, "2202160810": 613, "microcod": 613, "0xd000332": 613, "irq": 613, "60ghz": 613, "6chz": 613, "perf": 613, "512gb": 613, "16x32gb": 613, "ddr4": 613, "3200": 613, "mt": 613, "nic": 613, "1x": 613, "ethernet": 613, "100mb": 613, "i350": 613, "gigabit": 613, "drive": 613, "intel_ssdsckkb48": 613, "447": 613, "1g": 613, "factor": [613, 627], "publicli": 613, "degre": 613, "mark": 613, "trademark": 613, "art": [614, 615], "increasingli": [614, 615], "crucial": [614, 615], "salient": [614, 615], "nonzero": [614, 615], "irregular": [614, 615], "anywher": [614, 615], "2in4": 614, "amper": 614, "oc": 614, "kh": 614, "kw": 614, "fastform": 614, "finetun": [614, 615], "downstream": [614, 615], "formula": [614, 615], "exemplifi": 614, "complement": 614, "pruner1": 614, "layer1": 614, "layer3": 614, "rate": [614, 618], "pruner2": 614, "snip_momentum_progress": 614, "layer2": 614, "num_train_epoch": 614, "lr_schedul": 614, "mention": 614, "cv": [614, 615], "grown": 615, "unpreced": 615, "cube": 615, "discourag": 615, "penal": 615, "l2": 615, "parametr": 615, "namhoon": 615, "lee": 615, "thalaiyasingam": 615, "ajanthan": 615, "philip": 615, "torr": 615, "2019": 615, "mleffici": 616, "dec": 616, "wechat": 616, "deepen": 616, "foundat": 616, "intellig": 616, "vmware": 616, "applianc": 616, "bitnami": 616, "nov": 616, "signific": [616, 618], "sota": 616, "plug": 616, "twitter": 616, "linkedin": 616, "zone": 616, "land": 616, "gcp": 616, "pat": 616, "keynot": 616, "intelon": 616, "sep": 616, "deliv": 616, "chines": 616, "aug": 616, "purif": 616, "sacrif": 616, "jun": 616, "partner": 616, "apr": 616, "feb": 616, "joint": 616, "msft": 616, "bilibili": 616, "gestalt": 616, "ml": 616, "doubl": 616, "mlperf": [616, 627], "reconstruct": 616, "abound": 616, "lpot": [616, 620], "mar": 616, "nextplatform": 616, "cern": 616, "gan": 616, "3dgan": 616, "iml": 616, "workshop": 616, "asplo": 616, "18": [616, 627], "highli": 616, "intelcaff": 616, "aris": 617, "tell": 617, "henc": 617, "onnxrt_qoper": 617, "post_training_dynamic_qu": [617, 624], "quant_aware_train": 617, "initial_spars": [617, 626], "prune_typ": [617, 626], "basic_magnitud": [617, 626], "start_epoch": [617, 626], "end_epoch": [617, 626], "update_frequ": 617, "prune_domain": 617, "tile_pattern_1x1": 617, "graph_optimization_level": 617, "disable_al": 617, "invent": 618, "int4": 618, "cost": 618, "theoret": 618, "affin": 618, "zeropoint": 618, "asymmetr": [618, 624], "overflow": 618, "solv": [618, 620], "fbgemm": 618, "unseen": 618, "enough": 618, "peopl": 618, "emul": 618, "mimic": 618, "fact": 618, "ultim": 618, "pain": 618, "lossi": 618, "understand": [618, 622], "philosophi": 618, "val_dataset": 618, "ping_memori": 618, "val_load": 618, "avg": 618, "ON": 619, "postposttrainingquantconfig": 619, "bf16wrapper": 619, "retrac": 619, "site": 620, "assist": 620, "comparison": [620, 622], "sed": 620, "your_script": 620, "backbon": 621, "interact": 621, "sigopt_api_token": [621, 624], "sigopt_project_id": [621, 624], "sigopt_experiment_id": 621, "nc": [621, 624], "certain": 621, "suffici": 621, "ordinari": 621, "capac": 621, "sigopt_experiment_nam": [621, 624], "mobilenet": [621, 627], "8266": 621, "8372": 621, "2132": 621, "83": [621, 627], "7495": 621, "8299": 621, "8294": 621, "85": [621, 627], "0837": 621, "8291": 621, "4469": 621, "discov": 622, "why": 622, "valuabl": 622, "instrument": 622, "writer": 622, "_pre_eval_hook": 622, "submodul": 622, "whitelist": 622, "_recordingobserv": 622, "output_tensors_dict": 622, "current_it": 622, "_observer_forward_hook": 622, "activation_post_process": 622, "_add_observer_": 622, "named_children": 622, "leaf": 622, "add_modul": 622, "register_forward_hook": 622, "dump_tim": 622, "summarywrit": 622, "_acc": 622, "tune_": 622, "add_graph": 622, "get_observer_dict": 622, "observer_dict": 622, "is_quant": 622, "add_histogram": 622, "bind_al": 622, "logdir_spec": 622, "tune_0_acc0": 622, "tune_1": 622, "tune_1_acc0": 622, "79": [622, 627], "four": 622, "baseline_acc_0": 622, "776": 622, "tune_1_acc_0": 622, "095": 622, "runs_v3": 622, "image_recognit": 622, "run_tuning_dump_tensor": 622, "sh": 622, "inceptionv3": 622, "v0": 622, "cg": 622, "conv0": 622, "op_wis": [622, 626], "bash": 622, "run_tun": 622, "topologi": 622, "inception_v3": 622, "dataset_loc": 622, "inceptionv3_fp32_pretrained_model": 622, "nc_inceptionv3": 622, "inceptionv3_dump_tensor": 622, "poor": 622, "disappear": 622, "centercrop": 623, "randomresizedcrop": 623, "randomcrop": 623, "cropres": 623, "decodeimag": 623, "jpeg": 623, "encodejp": 623, "alignimagechannel": 623, "68": [623, 627], "116": 623, "78": [623, 627], "103": 623, "94": [623, 627], "017": 623, "bilinearimagenet": [623, 626], "totensor": 623, "topilimag": 623, "padding_mod": 623, "border": 623, "colorjitt": 623, "bright": 623, "satur": 623, "hue": 623, "jitter": 623, "tondarrai": 623, "quickli": 624, "human": 624, "post_training_auto_qu": 624, "iii": 624, "classic": 624, "primari": 624, "spent": 624, "hawq_v2_loss": 624, "model_loss": 624, "compli": 624, "focu": 624, "short": 624, "never": 624, "loglevel": 624, "endlessli": 624, "smbo": 624, "appl": 624, "surrog": 624, "divid": 624, "quantil": 624, "x1": 624, "x2": 624, "densiti": 624, "parzen": 624, "greatest": 624, "dai": 624, "abctunestrategi": 624, "overridden": 624, "mobilenet_v1": 626, "onnxrt_integ": 626, "onnxrt_qlinear": 626, "image_tensor": 626, "subsect": 626, "model_wis": 626, "conv1": 626, "hyper": 626, "40": [626, 627], "06": [626, 627], "beta_1": 626, "beta_2": 626, "sparsecategoricalcrossentropi": 626, "reduct": 626, "sum_over_batch_s": 626, "from_logit": 626, "54": [626, 627], "19": [626, 627], "90": [626, 627], "nesterov": 626, "weight_decai": 626, "overal": 626, "8380": 627, "performancethroughput": 627, "sec": 627, "86": 627, "00": 627, "170": 627, "44": 627, "93": 627, "69": 627, "82x": 627, "92": 627, "63": 627, "39": 627, "85x": 627, "61": 627, "83x": 627, "densenet": 627, "121": 627, "73": 627, "72": 627, "89": 627, "274": 627, "148": 627, "161": 627, "76": 627, "132": 627, "35": 627, "39x": 627, "169": 627, "74": 627, "38": 627, "65": 627, "36": 627, "191": 627, "118": 627, "61x": 627, "cnn": 627, "incept": 627, "37": 627, "81": 627, "55": 627, "84x": 627, "resnet101": 627, "57": 627, "21x": 627, "43": 627, "70x": 627, "26": 627, "59": 627, "51": 627, "70": 627, "14x": 627, "139": 627, "955": 627, "328": 627, "91x": 627, "97": 627, "709": 627, "282": 627, "51x": 627, "v3": 627, "71": 627, "337": 627, "160": 627, "11x": 627, "77": 627, "438": 627, "204": 627, "223": 627, "105": 627, "12x": 627, "10x": 627, "1347": 627, "439": 627, "07x": 627, "56": 627, "1192": 627, "492": 627, "42x": 627, "91": 627, "412": 627, "376": 627, "662": 627, "397": 627, "66x": 627, "299": 627, "23": 627, "154": 627, "67": 627, "93x": 627, "476": 627, "227": 627, "fashion": 627, "2734": 627, "1299": 627, "498": 627, "178": 627, "79x": 627, "46": 627, "427": 627, "173": 627, "47x": 627, "resnetv2": 627, "194": 627, "146": 627, "33x": 627, "48": 627, "237": 627, "187": 627, "27x": 627, "152": 627, "155": 627, "38x": 627, "302": 627, "215": 627, "40x": 627, "346": 627, "312": 627, "277": 627, "60x": 627, "273": 627, "31x": 627, "66": 627, "18x": 627, "82": 627, "53x": 627, "24x": 627, "vgg16": 627, "219": 627, "vgg19": 627, "193": 627, "11506": 627, "9665": 627, "19x": 627, "xception": 627, "262": 627, "137": 627, "58": 627, "barthez": 627, "143": 627, "02x": 627, "84": 627, "20x": 627, "209": 627, "08x": 627, "221": 627, "sst": 627, "stsb": 627, "218": 627, "16x": 627, "62": 627, "57x": 627, "55x": 627, "56x": 627, "53": 627, "89x": 627, "blendcnn": 627, "4885": 627, "60": 627, "3715": 627, "camembert": 627, "206": 627, "09x": 627, "deberta": 627, "366": 627, "197": 627, "399": 627, "flaubert": 627, "592": 627, "385": 627, "54x": 627, "wikitext": 627, "hubert": 627, "446": 627, "181": 627, "46x": 627, "layoutlm": 627, "longform": 627, "49": 627, "mbart": 627, "625": 627, "451": 627, "lvwerra": 627, "pegasu": 627, "samsum": 627, "peleenet": 627, "402": 627, "29x": 627, "pokemon": 627, "275": 627, "334": 627, "48x": 627, "reform": 627, "crime": 627, "punish": 627, "162": 627, "153": 627, "06x": 627, "657": 627, "327": 627, "01x": 627, "812": 627, "344": 627, "36x": 627, "360": 627, "23x": 627, "resnext101": 627, "32x8d": 627, "182": 627, "207": 627, "squeezebert": 627, "195": 627, "150": 627, "30x": 627, "75x": 627, "transfo": 627, "xl": 627, "41x": 627, "wave2vec2": 627, "22x": 627, "102": 627, "00x": 627, "115": 627, "17x": 627, "yolo": 627, "232": 627, "28x": 627, "664": 627, "329": 627, "832": 627, "338": 627, "433": 627, "164": 627, "63x": 627, "836": 627, "1396": 627, "463": 627, "90x": 627, "159": 627, "32x": 627, "968": 627, "473": 627, "05x": 627, "958": 627, "477": 627, "arcfac": 627, "126": 627, "78x": 627, "298": 627, "124": 627, "624": 627, "254": 627, "45x": 627, "caffenet": 627, "1432": 627, "540": 627, "65x": 627, "1460": 627, "357": 627, "265": 627, "35x": 627, "86x": 627, "524": 627, "duc": 627, "efficientnet": 627, "1211": 627, "758": 627, "856": 627, "762": 627, "emot": 627, "ferplu": 627, "925": 627, "694": 627, "fcn": 627, "25x": 627, "googlenet": 627, "771": 627, "571": 627, "763": 627, "579": 627, "hf": 627, "156": 627, "multilingu": 627, "99x": 627, "199": 627, "104": 627, "73x": 627, "449": 627, "74x": 627, "l12": 627, "h384": 627, "466": 627, "247": 627, "88x": 627, "l6": 627, "523": 627, "354": 627, "183": 627, "107": 627, "spanbert": 627, "208": 627, "795": 627, "600": 627, "780": 627, "591": 627, "515": 627, "15x": 627, "2370": 627, "1526": 627, "2216": 627, "1506": 627, "2078": 627, "1028": 627, "1762": 627, "76x": 627, "mobilenetv2": 627, "2615": 627, "1645": 627, "59x": 627, "2461": 627, "1674": 627, "766": 627, "431": 627, "77x": 627, "575": 627, "430": 627, "34x": 627, "747": 627, "564": 627, "594": 627, "590": 627, "643": 627, "253": 627, "shufflenet": 627, "2354": 627, "1461": 627, "1850": 627, "1368": 627, "squeezenet": 627, "2484": 627, "1912": 627, "2526": 627, "1911": 627, "710": 627, "549": 627, "622": 627, "497": 627, "652": 627, "507": 627, "573": 627, "470": 627, "527": 627, "396": 627, "68x": 627, "tini": 627, "647": 627, "514": 627, "26x": 627, "ultrafac": 627, "314": 627, "50x": 627, "304": 627, "316": 627, "315": 627, "119": 627, "zfnet": 627, "462": 627, "268": 627, "72x": 627, "465": 627, "62x": 627, "436": 627, "270": 627, "429": 627, "92x": 627, "94x": 627, "331": 627, "242": 627, "37x": 627, "98x": 627, "taskdataset": 627, "accuracyspars": 627, "ratiospars": 627, "commentsbalanc": 627, "unbalanc": 627, "classificationimagenet": 627, "76top": 627, "13top": 627, "magnitudepost": 627, "magnitudequant": 627, "answeringsquad": 627, "34f1": 627, "2x1": 627, "lassounbalanc": 627, "classificationmnli": 627, "mm": 627, "allbalanc": 627, "classificationsst": 627, "32accuraci": 627, "sensitivitybalanc": 627, "classificationqqp": 627, "classificationqnli": 627, "54accuraci": 627, "em": 627, "87f1": 627, "momentumunbalanc": 627, "momentumbalanc": 627, "90f1": 627, "59f1": 627, "23f1": 627, "classificationmrpc": 627, "52f1": 627, "26f1": 627, "61accuraci": 627, "7965": 627, "wideresnet40": 627, "9522": 627, "8178": 627, "0213": 627, "8235": 627, "027": 627, "5494": 627, "7153": 627, "5540": 627, "0046": 627, "5523": 627, "0029": 627, "vgg": 627, "7022": 627, "7415": 627, "7025": 627, "0003": 627, "6739": 627, "7399": 627, "6845": 627, "0106": 627, "7034": 627, "8382": 627, "bilstm": 627, "8314": 627, "9403": 627, "9048": 627, "0734": 627, "7323": 627, "8256": 627, "8084": 627, "8814": 627, "7442": 627, "8371": 627, "0119": 627, "0115": 627, "tinybert": 627, "8018": 627, "8044": 627, "8363": 627, "8411": 627, "8025": 627, "8074": 627, "0007": 627, "0030": 627, "8626": 627, "8213": 627, "9091": 627, "8782": 627, "8684": 627, "8259": 627, "0058": 627, "distilroberta": 627, "6057": 627, "6455": 627, "6187": 627, "0130": 627, "c6i": 627, "2xlarg": 627, "c6a": 627, "c6g": 627, "a100cuda": 627}, "objects": {"": [[0, 0, 0, "-", "644ec953a7dc_pruning_support"], [1, 0, 0, "-", "6ece06672ed3_v1_14"], [2, 0, 0, "-", "6f0d0f71d92e_v1_13"], [3, 0, 0, "-", "9e89549a08c8_v1_11"], [4, 0, 0, "-", "block_mask"], [5, 0, 0, "-", "env"], [276, 0, 0, "-", "neural_compressor"]], "6ece06672ed3_v1_14": [[1, 1, 1, "ece06672ed3_v1_14.update_dataloaders", "update_dataloaders"], [1, 1, 1, "ece06672ed3_v1_14.update_transformations", "update_transformations"]], "env": [[5, 1, 1, "", "run_migrations_offline"], [5, 1, 1, "", "run_migrations_online"]], "neural_compressor": [[276, 2, 1, "", "Benchmark"], [276, 2, 1, "", "DistillationConfig"], [276, 2, 1, "", "PostTrainingQuantConfig"], [276, 2, 1, "", "QuantizationAwareTrainingConfig"], [276, 2, 1, "", "WeightPruningConfig"], [7, 0, 0, "-", "adaptor"], [150, 0, 0, "-", "algorithm"], [153, 0, 0, "-", "benchmark"], [156, 0, 0, "-", "conf"], [158, 0, 0, "-", "config"], [159, 0, 0, "-", "contrib"], [184, 0, 0, "-", "data"], [234, 0, 0, "-", "experimental"], [283, 0, 0, "-", "metric"], [285, 0, 0, "-", "mix_precision"], [287, 0, 0, "-", "model"], [295, 0, 0, "-", "objective"], [297, 0, 0, "-", "pruner"], [311, 0, 0, "-", "quantization"], [276, 1, 1, "", "set_random_seed"], [276, 1, 1, "", "set_tensorboard"], [276, 1, 1, "", "set_workspace"], [318, 0, 0, "-", "strategy"], [329, 0, 0, "-", "training"], [333, 0, 0, "-", "utils"], [475, 0, 0, "-", "ux"], [521, 0, 0, "-", "version"]], "neural_compressor.Benchmark": [[276, 3, 1, "", "dataloader"], [276, 3, 1, "", "metric"], [276, 3, 1, "", "postprocess"]], "neural_compressor.DistillationConfig": [[276, 4, 1, "", "criterion"], [276, 4, 1, "", "optimizer"], [276, 4, 1, "", "teacher_model"]], "neural_compressor.PostTrainingQuantConfig": [[276, 4, 1, "", "approach"], [276, 4, 1, "", "tuning_criterion"]], "neural_compressor.QuantizationAwareTrainingConfig": [[276, 4, 1, "", "approach"]], "neural_compressor.WeightPruningConfig": [[276, 4, 1, "", "weight_compression"]], "neural_compressor.adaptor": [[6, 0, 0, "-", "adaptor"], [8, 0, 0, "-", "keras"], [9, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [16, 0, 0, "-", "ox_utils"], [39, 0, 0, "-", "pytorch"], [40, 0, 0, "-", "query"], [41, 0, 0, "-", "tensorflow"], [105, 0, 0, "-", "tf_utils"], [143, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[6, 2, 1, "", "Adaptor"], [6, 1, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.adaptor.Adaptor": [[6, 3, 1, "", "convert"], [6, 3, 1, "", "evaluate"], [6, 3, 1, "", "inspect_tensor"], [6, 3, 1, "", "quantize"], [6, 3, 1, "", "quantize_input"], [6, 3, 1, "", "query_fused_patterns"], [6, 3, 1, "", "query_fw_capability"], [6, 3, 1, "", "save"], [6, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.keras": [[8, 2, 1, "", "KerasAdaptor"], [8, 2, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras.KerasAdaptor": [[8, 3, 1, "", "convert"], [8, 3, 1, "", "evaluate"], [8, 3, 1, "", "get_optype_wise_ability"], [8, 3, 1, "", "inspect_tensor"], [8, 3, 1, "", "quantize"], [8, 3, 1, "", "quantize_input"], [8, 3, 1, "", "query_fw_capability"], [8, 3, 1, "", "save"], [8, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.keras.KerasQuery": [[8, 3, 1, "", "get_op_types"], [8, 3, 1, "", "get_op_types_by_precision"], [8, 3, 1, "", "get_precisions"], [8, 3, 1, "", "get_quantization_capability"], [8, 3, 1, "", "get_version"]], "neural_compressor.adaptor.keras_utils": [[10, 0, 0, "-", "quantizer"]], "neural_compressor.adaptor.mxnet": [[11, 2, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet.MxNetAdaptor": [[11, 3, 1, "", "evaluate"], [11, 3, 1, "", "inspect_tensor"], [11, 3, 1, "", "quantize"], [11, 3, 1, "", "query_fw_capability"], [11, 3, 1, "", "recover_tuned_model"], [11, 3, 1, "", "set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 2, 1, "", "CalibCollector"], [13, 2, 1, "", "CalibData"], [13, 2, 1, "", "CollectorBase"], [13, 2, 1, "", "DataIterLoader"], [13, 2, 1, "", "DataLoaderWrap"], [13, 2, 1, "", "NameCollector"], [13, 2, 1, "", "OpType"], [13, 2, 1, "", "TensorCollector"], [13, 1, 1, "", "amp_convert"], [13, 1, 1, "", "calib_model"], [13, 1, 1, "", "check_mx_version"], [13, 1, 1, "", "combine_capabilities"], [13, 1, 1, "", "create_data_example"], [13, 1, 1, "", "distribute_calib_tensors"], [13, 1, 1, "", "ensure_list"], [13, 1, 1, "", "fuse"], [13, 1, 1, "", "get_framework_name"], [13, 1, 1, "", "is_model_quantized"], [13, 1, 1, "", "isiterable"], [13, 1, 1, "", "make_module"], [13, 1, 1, "", "make_nc_model"], [13, 1, 1, "", "make_symbol_block"], [13, 1, 1, "", "ndarray_to_device"], [13, 1, 1, "", "parse_tune_config"], [13, 1, 1, "", "prepare_dataloader"], [13, 1, 1, "", "prepare_model"], [13, 1, 1, "", "prepare_model_data"], [13, 1, 1, "", "quantize_sym_model"], [13, 1, 1, "", "query_quantizable_nodes"], [13, 1, 1, "", "run_forward"]], "neural_compressor.adaptor.mxnet_utils.util.CalibCollector": [[13, 3, 1, "", "calc_kl_th_dict"], [13, 3, 1, "", "collect_gluon"]], "neural_compressor.adaptor.mxnet_utils.util.CalibData": [[13, 4, 1, "", "min_max_dict"], [13, 3, 1, "", "post_collect"]], "neural_compressor.adaptor.mxnet_utils.util.CollectorBase": [[13, 3, 1, "", "collect_gluon"], [13, 3, 1, "", "collect_module"], [13, 3, 1, "", "post_batch"], [13, 3, 1, "", "pre_batch"]], "neural_compressor.adaptor.mxnet_utils.util.NameCollector": [[13, 3, 1, "", "collect_gluon"]], "neural_compressor.adaptor.mxnet_utils.util.TensorCollector": [[13, 3, 1, "", "collect_gluon"], [13, 3, 1, "", "pre_batch"]], "neural_compressor.adaptor.onnxrt": [[14, 2, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 2, 1, "", "ONNXRT_QDQAdaptor"], [14, 2, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 2, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor": [[14, 3, 1, "", "evaluate"], [14, 3, 1, "", "inspect_tensor"], [14, 3, 1, "", "quantize"], [14, 3, 1, "", "query_fw_capability"], [14, 3, 1, "", "recover"], [14, 3, 1, "", "save"], [14, 3, 1, "", "smooth_quant"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [28, 0, 0, "-", "operators"], [37, 0, 0, "-", "quantizer"], [38, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 2, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment": [[15, 3, 1, "", "augment_graph"], [15, 3, 1, "", "calculate_quantization_params"], [15, 3, 1, "", "calculate_scale_zeropoint"], [15, 3, 1, "", "calib_smooth"], [15, 3, 1, "", "dump_calibration"], [15, 3, 1, "", "dump_minmax"], [15, 3, 1, "", "dump_tensor"], [15, 3, 1, "", "get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.operators": [[17, 0, 0, "-", "activation"], [18, 0, 0, "-", "argmax"], [19, 0, 0, "-", "attention"], [20, 0, 0, "-", "binary_op"], [21, 0, 0, "-", "concat"], [22, 0, 0, "-", "conv"], [23, 0, 0, "-", "direct_q8"], [24, 0, 0, "-", "embed_layernorm"], [25, 0, 0, "-", "gather"], [26, 0, 0, "-", "gavgpool"], [27, 0, 0, "-", "gemm"], [29, 0, 0, "-", "lstm"], [30, 0, 0, "-", "matmul"], [31, 0, 0, "-", "maxpool"], [32, 0, 0, "-", "ops"], [33, 0, 0, "-", "pad"], [34, 0, 0, "-", "pooling"], [35, 0, 0, "-", "resize"], [36, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[17, 2, 1, "", "ActivationOperator"], [17, 2, 1, "", "QActivationOperator"], [17, 2, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator": [[17, 3, 1, "", "convert"], [17, 3, 1, "", "convert_check"], [17, 3, 1, "", "quantize"], [17, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator": [[17, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator": [[17, 3, 1, "", "quantize"], [17, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[18, 2, 1, "", "ArgMaxOperator"], [18, 2, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator": [[18, 3, 1, "", "convert"], [18, 3, 1, "", "convert_check"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[19, 2, 1, "", "AttentionOperator"], [19, 2, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator": [[19, 3, 1, "", "convert"], [19, 3, 1, "", "convert_check"], [19, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator": [[19, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[20, 2, 1, "", "BinaryOperator"], [20, 2, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator": [[20, 3, 1, "", "convert"], [20, 3, 1, "", "convert_check"], [20, 3, 1, "", "quantize"], [20, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator": [[20, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[21, 2, 1, "", "ConcatOperator"], [21, 2, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator": [[21, 3, 1, "", "cast"], [21, 3, 1, "", "convert"], [21, 3, 1, "", "convert_check"], [21, 3, 1, "", "quantize"], [21, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator": [[21, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[22, 2, 1, "", "ConvOperator"], [22, 2, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator": [[22, 3, 1, "", "convert"], [22, 3, 1, "", "convert_check"], [22, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator": [[22, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[23, 2, 1, "", "Direct8BitOperator"], [23, 2, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator": [[23, 3, 1, "", "cast"], [23, 3, 1, "", "convert"], [23, 3, 1, "", "convert_check"], [23, 3, 1, "", "quantize"], [23, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[24, 2, 1, "", "EmbedLayerNormalizationOperator"], [24, 2, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator": [[24, 3, 1, "", "convert"], [24, 3, 1, "", "convert_check"], [24, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator": [[24, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[25, 2, 1, "", "GatherOperator"], [25, 2, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator": [[25, 3, 1, "", "convert"], [25, 3, 1, "", "convert_check"], [25, 3, 1, "", "quantize"], [25, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[26, 2, 1, "", "GlobalAveragePoolOperator"], [26, 2, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator": [[26, 3, 1, "", "convert"], [26, 3, 1, "", "convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator": [[26, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[27, 2, 1, "", "GemmOperator"], [27, 2, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator": [[27, 3, 1, "", "convert"], [27, 3, 1, "", "convert_check"], [27, 3, 1, "", "quantize"], [27, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator": [[27, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[29, 2, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator": [[29, 3, 1, "", "convert"], [29, 3, 1, "", "convert_check"], [29, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[30, 2, 1, "", "MatMulOperator"], [30, 2, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator": [[30, 3, 1, "", "convert"], [30, 3, 1, "", "convert_check"], [30, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator": [[30, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[31, 2, 1, "", "MaxPoolOperator"], [31, 2, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator": [[31, 3, 1, "", "convert"], [31, 3, 1, "", "convert_check"], [31, 3, 1, "", "quantize"], [31, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[32, 2, 1, "", "Operator"], [32, 2, 1, "", "QOperator"], [32, 1, 1, "", "op_registry"], [32, 1, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.ops.Operator": [[32, 3, 1, "", "cast"], [32, 3, 1, "", "convert"], [32, 3, 1, "", "convert_check"], [32, 3, 1, "", "quantize"], [32, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.ops.QOperator": [[32, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[33, 2, 1, "", "PadOperator"], [33, 2, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator": [[33, 3, 1, "", "convert"], [33, 3, 1, "", "convert_check"], [33, 3, 1, "", "quantize"], [33, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[34, 2, 1, "", "PoolOperator"], [34, 2, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator": [[34, 3, 1, "", "convert"], [34, 3, 1, "", "convert_check"], [34, 3, 1, "", "quantize"], [34, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator": [[34, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[35, 2, 1, "", "QResizeOperator"], [35, 2, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator": [[35, 3, 1, "", "convert"], [35, 3, 1, "", "convert_check"], [35, 3, 1, "", "quantize"], [35, 3, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.split": [[36, 2, 1, "", "QSplitOperator"], [36, 2, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator": [[36, 3, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator": [[36, 3, 1, "", "cast"], [36, 3, 1, "", "convert"], [36, 3, 1, "", "convert_check"], [36, 3, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.quantizer": [[37, 2, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer.Quantizer": [[37, 3, 1, "", "check_opset_version"], [37, 3, 1, "", "convert_qdq_to_operator_oriented"], [37, 3, 1, "", "dequantize_tensor"], [37, 3, 1, "", "dtype_cast"], [37, 3, 1, "", "get_bias_add_nodes"], [37, 3, 1, "", "insert_qdq"], [37, 3, 1, "", "is_valid_quantize_weight"], [37, 3, 1, "", "merge_dedicated_qdq_pair"], [37, 3, 1, "", "quantize_bias"], [37, 3, 1, "", "quantize_bias_tensor"], [37, 3, 1, "", "quantize_inputs"], [37, 3, 1, "", "quantize_model"], [37, 3, 1, "", "quantize_outputs"], [37, 3, 1, "", "quantize_weight_per_channel"], [37, 3, 1, "", "quantize_weights_per_channel"], [37, 3, 1, "", "remove_redundant_pairs"], [37, 3, 1, "", "should_cast"], [37, 3, 1, "", "should_convert"], [37, 3, 1, "", "should_quantize"], [37, 3, 1, "", "tensor_proto_to_array"]], "neural_compressor.adaptor.ox_utils.util": [[38, 2, 1, "", "QuantFormat"], [38, 2, 1, "", "QuantType"], [38, 2, 1, "", "QuantizationMode"], [38, 2, 1, "", "QuantizedInitializer"], [38, 2, 1, "", "QuantizedValue"], [38, 2, 1, "", "QuantizedValueType"], [38, 2, 1, "", "ValueInfo"], [38, 1, 1, "", "adjust_weights_per_input"], [38, 1, 1, "", "adjust_weights_per_op"], [38, 1, 1, "", "attribute_to_kwarg"], [38, 1, 1, "", "calculate_scale_zp"], [38, 1, 1, "", "cast_tensor"], [38, 1, 1, "", "collate_preds"], [38, 1, 1, "", "dequantize_data"], [38, 1, 1, "", "dequantize_data_with_scale_zero"], [38, 1, 1, "", "dtype_to_name"], [38, 1, 1, "", "find_by_name"], [38, 1, 1, "", "float_to_bfloat16"], [38, 1, 1, "", "float_to_float16"], [38, 1, 1, "", "get_smooth_scales_per_input"], [38, 1, 1, "", "get_smooth_scales_per_op"], [38, 1, 1, "", "insert_smooth_mul_op_per_input"], [38, 1, 1, "", "insert_smooth_mul_op_per_op"], [38, 1, 1, "", "is_B_transposed"], [38, 1, 1, "", "make_dquant_node"], [38, 1, 1, "", "make_quant_node"], [38, 1, 1, "", "quantize_data"], [38, 1, 1, "", "quantize_data_per_channel"], [38, 1, 1, "", "quantize_data_with_scale_zero"], [38, 1, 1, "", "quantize_nparray"], [38, 1, 1, "", "remove_init_from_model_input"], [38, 1, 1, "", "split_shared_bias"], [38, 1, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.pytorch": [[39, 2, 1, "", "PyTorchAdaptor"], [39, 2, 1, "", "PyTorchQuery"], [39, 2, 1, "", "PyTorch_FXAdaptor"], [39, 2, 1, "", "PyTorch_IPEXAdaptor"], [39, 2, 1, "", "TemplateAdaptor"], [39, 1, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.pytorch.PyTorchAdaptor": [[39, 3, 1, "", "evaluate"], [39, 3, 1, "", "get_non_quant_modules"], [39, 3, 1, "", "is_fused_child"], [39, 3, 1, "", "is_fused_op"], [39, 3, 1, "", "is_last_fused_child"], [39, 3, 1, "", "quantize"], [39, 3, 1, "", "query_fw_capability"], [39, 3, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorchQuery": [[39, 3, 1, "", "get_op_types"], [39, 3, 1, "", "get_op_types_by_precision"], [39, 3, 1, "", "get_quantization_capability"]], "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor": [[39, 3, 1, "", "calculate_op_sensitivity"], [39, 3, 1, "", "convert_sub_graph"], [39, 3, 1, "", "evaluate"], [39, 3, 1, "", "fuse_fx_model"], [39, 3, 1, "", "prepare_sub_graph"], [39, 3, 1, "", "quantize"], [39, 3, 1, "", "query_fw_capability"], [39, 3, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor": [[39, 3, 1, "", "evaluate"], [39, 3, 1, "", "quantize"], [39, 3, 1, "", "query_fw_capability"], [39, 3, 1, "", "save"]], "neural_compressor.adaptor.pytorch.TemplateAdaptor": [[39, 3, 1, "", "calculate_hessian_trace"], [39, 3, 1, "", "is_fused_module"], [39, 3, 1, "", "smooth_quant"]], "neural_compressor.adaptor.query": [[40, 2, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.query.QueryBackendCapability": [[40, 3, 1, "", "get_fuse_patterns"], [40, 3, 1, "", "get_mixed_precision_combination"], [40, 3, 1, "", "get_op_types"], [40, 3, 1, "", "get_precisions"], [40, 3, 1, "", "get_quantization_capability"], [40, 3, 1, "", "get_version"], [40, 3, 1, "", "set_quantization_config"]], "neural_compressor.adaptor.tensorflow": [[41, 2, 1, "", "TensorFlowAdaptor"], [41, 2, 1, "", "TensorflowQuery"], [41, 2, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor": [[41, 3, 1, "", "calculate_op_sensitivity"], [41, 3, 1, "", "convert"], [41, 3, 1, "", "diagnosis_helper"], [41, 3, 1, "", "evaluate"], [41, 3, 1, "", "fused_node_mapping"], [41, 3, 1, "", "get_optype_wise_ability"], [41, 3, 1, "", "get_output_op_names"], [41, 3, 1, "", "inspect_activation"], [41, 3, 1, "", "inspect_tensor"], [41, 3, 1, "", "inspect_weight_and_bias"], [41, 3, 1, "", "qat_convert"], [41, 3, 1, "", "quantize"], [41, 3, 1, "", "quantize_input"], [41, 3, 1, "", "query_fw_capability"], [41, 3, 1, "", "recover_tuned_model"], [41, 3, 1, "", "save"], [41, 3, 1, "", "set_tensor"], [41, 3, 1, "", "train"]], "neural_compressor.adaptor.tensorflow.TensorflowQuery": [[41, 3, 1, "", "generate_internal_patterns"], [41, 3, 1, "", "get_bf16_patterns"], [41, 3, 1, "", "get_eightbit_patterns"], [41, 3, 1, "", "get_fuse_patterns"], [41, 3, 1, "", "get_mixed_precision_combination"], [41, 3, 1, "", "get_op_types"], [41, 3, 1, "", "get_op_types_by_precision"], [41, 3, 1, "", "get_quantization_capability"], [41, 3, 1, "", "get_version"]], "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor": [[41, 3, 1, "", "quantize"]], "neural_compressor.adaptor.tf_utils": [[42, 0, 0, "-", "graph_converter"], [43, 0, 0, "-", "graph_converter_without_calib"], [81, 0, 0, "-", "graph_rewriter"], [104, 0, 0, "-", "graph_util"], [106, 0, 0, "-", "quantize_graph"], [133, 0, 0, "-", "quantize_graph_common"], [134, 0, 0, "-", "tf2onnx_converter"], [137, 0, 0, "-", "transform_graph"], [140, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[42, 2, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter": [[42, 3, 1, "", "bf16_convert"], [42, 3, 1, "", "convert"], [42, 3, 1, "", "quantize"], [42, 3, 1, "", "quantize_with_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[43, 2, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib": [[43, 3, 1, "", "bf16_convert"], [43, 3, 1, "", "convert_without_calib"], [43, 3, 1, "", "quantize_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[45, 0, 0, "-", "bf16"], [70, 0, 0, "-", "generic"], [80, 0, 0, "-", "graph_base"], [89, 0, 0, "-", "int8"], [95, 0, 0, "-", "onnx"], [100, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[44, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[44, 2, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert": [[44, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[46, 0, 0, "-", "convert_add_to_biasadd"], [47, 0, 0, "-", "convert_layout"], [48, 0, 0, "-", "convert_leakyrelu"], [49, 0, 0, "-", "convert_nan_to_random"], [50, 0, 0, "-", "convert_placeholder_to_const"], [51, 0, 0, "-", "dequantize_cast_optimizer"], [52, 0, 0, "-", "dilated_contraction"], [53, 0, 0, "-", "dummy_biasadd"], [54, 0, 0, "-", "expanddims_optimizer"], [55, 0, 0, "-", "fetch_weight_from_reshape"], [56, 0, 0, "-", "fold_batch_norm"], [57, 0, 0, "-", "fold_constant"], [58, 0, 0, "-", "fuse_biasadd_add"], [59, 0, 0, "-", "fuse_column_wise_mul"], [60, 0, 0, "-", "fuse_conv_with_math"], [61, 0, 0, "-", "fuse_decomposed_bn"], [62, 0, 0, "-", "fuse_decomposed_in"], [63, 0, 0, "-", "fuse_gelu"], [64, 0, 0, "-", "fuse_layer_norm"], [65, 0, 0, "-", "fuse_pad_with_conv"], [66, 0, 0, "-", "fuse_pad_with_fp32_conv"], [67, 0, 0, "-", "fuse_reshape_transpose"], [68, 0, 0, "-", "graph_cse_optimizer"], [69, 0, 0, "-", "grappler_pass"], [71, 0, 0, "-", "insert_print_node"], [72, 0, 0, "-", "move_squeeze_after_relu"], [73, 0, 0, "-", "pre_optimize"], [74, 0, 0, "-", "remove_training_nodes"], [75, 0, 0, "-", "rename_batch_norm"], [76, 0, 0, "-", "split_shared_input"], [77, 0, 0, "-", "strip_equivalent_nodes"], [78, 0, 0, "-", "strip_unused_nodes"], [79, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[46, 2, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer": [[46, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[47, 2, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer": [[47, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[48, 2, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer": [[48, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[49, 2, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom": [[49, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[50, 2, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst": [[50, 3, 1, "", "do_transformation"], [50, 3, 1, "", "strtobool"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[51, 2, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer": [[51, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[52, 2, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction": [[52, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[53, 2, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer": [[53, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[54, 2, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer": [[54, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[55, 2, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer": [[55, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[56, 2, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer": [[56, 3, 1, "", "do_transformation"], [56, 3, 1, "", "scale_after_normalization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[57, 2, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer": [[57, 3, 1, "", "check_all_folded"], [57, 3, 1, "", "check_const_inputs"], [57, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[58, 2, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer": [[58, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[59, 2, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer": [[59, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[60, 2, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer": [[60, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[61, 2, 1, "", "FuseDecomposedBNOptimizer"], [61, 1, 1, "", "bypass_reshape"], [61, 1, 1, "", "get_const_dim_count"], [61, 1, 1, "", "node_from_map"], [61, 1, 1, "", "node_name_from_input"], [61, 1, 1, "", "valid_reshape_inputs"], [61, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer": [[61, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[62, 2, 1, "", "FuseDecomposedINOptimizer"], [62, 1, 1, "", "bypass_reshape"], [62, 1, 1, "", "get_const_dim_count"], [62, 1, 1, "", "node_from_map"], [62, 1, 1, "", "node_name_from_input"], [62, 1, 1, "", "valid_reshape_inputs"], [62, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer": [[62, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[63, 2, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer": [[63, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[64, 2, 1, "", "FuseLayerNormOptimizer"], [64, 1, 1, "", "node_from_map"], [64, 1, 1, "", "node_name_from_input"], [64, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer": [[64, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[65, 2, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer": [[65, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[66, 2, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer": [[66, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[67, 2, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer": [[67, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[68, 2, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer": [[68, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[69, 2, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer": [[69, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[71, 2, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode": [[71, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[72, 2, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer": [[72, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[73, 2, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization": [[73, 3, 1, "", "get_excluded_node_names"], [73, 3, 1, "", "get_matched_nodes"], [73, 3, 1, "", "get_optimized_model"], [73, 3, 1, "", "has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[74, 2, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer": [[74, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[75, 2, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer": [[75, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[76, 2, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer": [[76, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[77, 2, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer": [[77, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[78, 2, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer": [[78, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[79, 2, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer": [[79, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[80, 2, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase": [[80, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[82, 0, 0, "-", "freeze_fake_quant"], [83, 0, 0, "-", "freeze_value"], [84, 0, 0, "-", "freeze_value_without_calib"], [85, 0, 0, "-", "fuse_conv_redundant_dequantize"], [86, 0, 0, "-", "fuse_conv_requantize"], [87, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [88, 0, 0, "-", "fuse_matmul_requantize"], [90, 0, 0, "-", "meta_op_optimizer"], [91, 0, 0, "-", "post_hostconst_converter"], [92, 0, 0, "-", "post_quantized_op_cse"], [93, 0, 0, "-", "rnn_convert"], [94, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[82, 2, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer": [[82, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[83, 2, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer": [[83, 3, 1, "", "do_transformation"], [83, 3, 1, "", "generate_output_graph"], [83, 3, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[84, 2, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer": [[84, 3, 1, "", "do_transformation_without_calib"], [84, 3, 1, "", "generate_output_graph"], [84, 3, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[85, 2, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer": [[85, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[86, 2, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer": [[86, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[87, 2, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer": [[87, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[88, 2, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [88, 2, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [88, 2, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [88, 2, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer": [[88, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer": [[88, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer": [[88, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer": [[88, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[90, 2, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer": [[90, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[91, 2, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter": [[91, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[92, 2, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer": [[92, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[93, 2, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter": [[93, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[94, 2, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer": [[94, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[96, 0, 0, "-", "onnx_graph"], [97, 0, 0, "-", "onnx_node"], [98, 0, 0, "-", "onnx_schema"], [99, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[96, 2, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph": [[96, 3, 1, "", "add_graph_input"], [96, 3, 1, "", "add_graph_output"], [96, 3, 1, "", "append_node"], [96, 3, 1, "", "convert_qdq_nodes"], [96, 3, 1, "", "copy_dtype"], [96, 3, 1, "", "copy_shape"], [96, 3, 1, "", "create_new_graph_with_same_config"], [96, 3, 1, "", "delete_qdq_nodes"], [96, 3, 1, "", "delete_unused_nodes"], [96, 3, 1, "", "dump_graph"], [96, 3, 1, "", "dump_node_statistics"], [96, 4, 1, "", "extra_opset"], [96, 3, 1, "", "extract_sub_graph_nodes"], [96, 3, 1, "", "find_output_consumers"], [96, 3, 1, "", "get_dtype"], [96, 3, 1, "", "get_node_by_name"], [96, 3, 1, "", "get_node_by_output"], [96, 3, 1, "", "get_node_by_output_in_current_graph"], [96, 3, 1, "", "get_nodes"], [96, 3, 1, "", "get_rank"], [96, 3, 1, "", "get_shape"], [96, 3, 1, "", "get_tensor_value"], [96, 4, 1, "", "input_names"], [96, 3, 1, "", "insert_new_node_on_input"], [96, 3, 1, "", "insert_new_node_on_output"], [96, 3, 1, "", "insert_node_on_output"], [96, 3, 1, "", "is_const"], [96, 3, 1, "", "is_empty_input"], [96, 3, 1, "", "is_target"], [96, 3, 1, "", "make_const"], [96, 3, 1, "", "make_graph"], [96, 3, 1, "", "make_model"], [96, 3, 1, "", "make_node"], [96, 3, 1, "", "make_onnx_graph_io"], [96, 4, 1, "", "opset"], [96, 3, 1, "", "remove_input"], [96, 3, 1, "", "remove_node"], [96, 3, 1, "", "replace_all_inputs"], [96, 3, 1, "", "replace_input"], [96, 3, 1, "", "replace_inputs"], [96, 3, 1, "", "reset_nodes"], [96, 3, 1, "", "safe_remove_nodes"], [96, 3, 1, "", "safe_to_remove_nodes"], [96, 3, 1, "", "set_config"], [96, 3, 1, "", "set_dtype"], [96, 3, 1, "", "set_node_by_name"], [96, 3, 1, "", "set_shape"], [96, 3, 1, "", "topological_sort"], [96, 3, 1, "", "update_node_shape_dtype"], [96, 3, 1, "", "update_proto"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[97, 2, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode": [[97, 4, 1, "", "attr"], [97, 3, 1, "", "child_name"], [97, 4, 1, "", "data_format"], [97, 4, 1, "", "domain"], [97, 3, 1, "", "get_attr"], [97, 3, 1, "", "get_attr_int"], [97, 3, 1, "", "get_attr_str"], [97, 3, 1, "", "get_attr_value"], [97, 3, 1, "", "get_body_graphs"], [97, 3, 1, "", "get_implicit_inputs"], [97, 3, 1, "", "get_onnx_attrs"], [97, 3, 1, "", "get_tensor_value"], [97, 3, 1, "", "get_value_attr"], [97, 4, 1, "", "input"], [97, 4, 1, "", "inputs"], [97, 3, 1, "", "is_const"], [97, 3, 1, "", "is_graph_input"], [97, 3, 1, "", "is_graph_input_default_const"], [97, 3, 1, "", "is_nhwc"], [97, 3, 1, "", "is_scalar"], [97, 3, 1, "", "is_while"], [97, 4, 1, "", "name"], [97, 3, 1, "", "need_skip"], [97, 4, 1, "", "op"], [97, 4, 1, "", "output"], [97, 4, 1, "", "output_dtypes"], [97, 4, 1, "", "output_shapes"], [97, 3, 1, "", "scalar_to_dim1"], [97, 3, 1, "", "set_attr"], [97, 3, 1, "", "set_attr_onnx"], [97, 3, 1, "", "set_body_graph_as_attr"], [97, 3, 1, "", "set_tensor_value"], [97, 4, 1, "", "skip_conversion"], [97, 4, 1, "", "summary"], [97, 4, 1, "", "type"], [97, 3, 1, "", "update_proto"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[98, 2, 1, "", "OnnxOpSchema"], [98, 1, 1, "", "get_max_supported_opset_version"], [98, 1, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema": [[98, 4, 1, "", "attributes"], [98, 4, 1, "", "domain"], [98, 3, 1, "", "from_onnx_schema"], [98, 3, 1, "", "has_attribute"], [98, 4, 1, "", "name"], [98, 4, 1, "", "since_version"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[99, 2, 1, "", "SeqType"], [99, 1, 1, "", "add_port_to_name"], [99, 1, 1, "", "are_shapes_equal"], [99, 1, 1, "", "assert_error"], [99, 1, 1, "", "compute_const_folding_using_tf"], [99, 1, 1, "", "convert_tensorflow_tensor_to_onnx"], [99, 1, 1, "", "find_opset"], [99, 1, 1, "", "get_index_from_strided_slice_of_shape"], [99, 1, 1, "", "get_subgraphs_from_onnx"], [99, 1, 1, "", "get_tensorflow_node_attr"], [99, 1, 1, "", "get_tensorflow_node_shape_attr"], [99, 1, 1, "", "get_tensorflow_tensor_data"], [99, 1, 1, "", "get_tensorflow_tensor_shape"], [99, 1, 1, "", "infer_onnx_shape_dtype"], [99, 1, 1, "", "initialize_name_counter"], [99, 1, 1, "", "is_list_or_tuple"], [99, 1, 1, "", "is_onnx_domain"], [99, 1, 1, "", "make_onnx_inputs_outputs"], [99, 1, 1, "", "make_onnx_shape"], [99, 1, 1, "", "map_numpy_to_onnx_dtype"], [99, 1, 1, "", "map_onnx_to_numpy_type"], [99, 1, 1, "", "map_tensorflow_dtype"], [99, 1, 1, "", "read_tensorflow_node_attrs"], [99, 1, 1, "", "save_protobuf"], [99, 1, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[101, 0, 0, "-", "insert_qdq_pattern"], [102, 0, 0, "-", "merge_duplicated_qdq"], [103, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[101, 2, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern": [[101, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[102, 2, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer": [[102, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[103, 2, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer": [[103, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_util": [[104, 2, 1, "", "GraphAnalyzer"], [104, 2, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer": [[104, 3, 1, "", "add_node"], [104, 3, 1, "", "dump_graph"], [104, 3, 1, "", "get_frame_info"], [104, 3, 1, "", "get_graph_input_output"], [104, 4, 1, "", "graph"], [104, 3, 1, "", "has_positive_input"], [104, 3, 1, "", "parse_graph"], [104, 3, 1, "", "query_fusion_pattern_nodes"], [104, 3, 1, "", "remove_node"], [104, 3, 1, "", "remove_node_with_single_input_output"], [104, 3, 1, "", "replace_const_node"], [104, 3, 1, "", "replace_constant_graph_with_constant_node"], [104, 3, 1, "", "replace_node"], [104, 3, 1, "", "replace_single_node"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper": [[104, 3, 1, "", "analysis_rnn_model"], [104, 3, 1, "", "compare_node_attr"], [104, 3, 1, "", "create_constant_node"], [104, 3, 1, "", "create_node"], [104, 3, 1, "", "gen_valid_sampling_log"], [104, 3, 1, "", "generate_int32_bias_for_conv"], [104, 3, 1, "", "generate_int32_bias_for_matmul"], [104, 3, 1, "", "node_name_from_input"], [104, 3, 1, "", "set_attr_bool"], [104, 3, 1, "", "set_attr_dtype"], [104, 3, 1, "", "set_attr_float"], [104, 3, 1, "", "set_attr_int"], [104, 3, 1, "", "set_attr_int_list"], [104, 3, 1, "", "set_attr_string"], [104, 3, 1, "", "set_attr_string_list"], [104, 3, 1, "", "set_attr_tensor"], [104, 3, 1, "", "set_attr_type_list"], [104, 3, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[108, 0, 0, "-", "qat"], [124, 0, 0, "-", "qdq"], [126, 0, 0, "-", "quantize_graph_base"], [127, 0, 0, "-", "quantize_graph_bn"], [128, 0, 0, "-", "quantize_graph_concatv2"], [129, 0, 0, "-", "quantize_graph_conv"], [130, 0, 0, "-", "quantize_graph_for_intel_cpu"], [131, 0, 0, "-", "quantize_graph_matmul"], [132, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[107, 0, 0, "-", "fake_quantize"], [109, 0, 0, "-", "quantize_config"], [110, 0, 0, "-", "quantize_helper"], [111, 0, 0, "-", "quantize_layers"], [116, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[107, 2, 1, "", "FakeQuantize"], [107, 2, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize": [[107, 3, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase": [[107, 3, 1, "", "from_config"], [107, 3, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[109, 2, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig": [[109, 3, 1, "", "add_quantize_recipe"], [109, 3, 1, "", "clear_quantize_recipe"], [109, 3, 1, "", "get_quantize_recipe"], [109, 3, 1, "", "is_empty"], [109, 3, 1, "", "query_layer"], [109, 3, 1, "", "remove_layer"], [109, 3, 1, "", "remove_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[110, 1, 1, "", "init_quantize_config"], [110, 1, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[112, 0, 0, "-", "optimize_layer"], [113, 0, 0, "-", "quantize_layer_add"], [114, 0, 0, "-", "quantize_layer_base"], [115, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[112, 1, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[113, 2, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[114, 2, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[115, 2, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[116, 2, 1, "", "QuantizeWrapper"], [116, 2, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper": [[116, 3, 1, "", "build"], [116, 3, 1, "", "call"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase": [[116, 3, 1, "", "build"], [116, 3, 1, "", "call"], [116, 3, 1, "", "compute_output_shape"], [116, 3, 1, "", "from_config"], [116, 3, 1, "", "get_config"], [116, 4, 1, "", "losses"], [116, 4, 1, "", "non_trainable_weights"], [116, 3, 1, "", "query_input_index"], [116, 4, 1, "", "trainable"], [116, 4, 1, "", "trainable_weights"], [116, 4, 1, "", "updates"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[117, 0, 0, "-", "fuse_qdq_bn"], [118, 0, 0, "-", "fuse_qdq_concatv2"], [119, 0, 0, "-", "fuse_qdq_conv"], [120, 0, 0, "-", "fuse_qdq_deconv"], [121, 0, 0, "-", "fuse_qdq_in"], [122, 0, 0, "-", "fuse_qdq_matmul"], [123, 0, 0, "-", "fuse_qdq_pooling"], [125, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[117, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3": [[117, 3, 1, "", "apply_newly_bn_leakyrelu_fusion"], [117, 3, 1, "", "apply_newly_bn_relu_fusion"], [117, 3, 1, "", "apply_the_transform"], [117, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[118, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2": [[118, 3, 1, "", "apply_the_transform"], [118, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[119, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d": [[119, 3, 1, "", "apply_conv3d_add_addn_fusion"], [119, 3, 1, "", "apply_conv3d_add_addn_relu_fusion"], [119, 3, 1, "", "apply_conv3d_add_fusion"], [119, 3, 1, "", "apply_conv3d_add_relu_fusion"], [119, 3, 1, "", "apply_conv3d_single_fusion"], [119, 3, 1, "", "apply_conv_biasadd_hardswish_fusion"], [119, 3, 1, "", "apply_newly_conv_biasadd_addn_fusion"], [119, 3, 1, "", "apply_newly_conv_biasadd_addn_relu_fusion"], [119, 3, 1, "", "apply_newly_conv_biasadd_fusion"], [119, 3, 1, "", "apply_newly_conv_biasadd_relu_fusion"], [119, 3, 1, "", "apply_newly_conv_biasadd_swishf32_fusion"], [119, 3, 1, "", "apply_newly_conv_single_fusion"], [119, 3, 1, "", "apply_the_transform"], [119, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[120, 2, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d": [[120, 3, 1, "", "apply_deconv2d_biasadd_fusion"], [120, 3, 1, "", "apply_deconv3d_biasadd_fusion"], [120, 3, 1, "", "apply_single_deconv2d_fusion"], [120, 3, 1, "", "apply_single_deconv3d_fusion"], [120, 3, 1, "", "apply_the_transform"], [120, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[121, 2, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm": [[121, 3, 1, "", "apply_newly_in_relu_fusion"], [121, 3, 1, "", "apply_the_transform"], [121, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[122, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul": [[122, 3, 1, "", "apply_batchmatmulv2_fusion"], [122, 3, 1, "", "apply_batchmatmulv2_mul_add_fusion"], [122, 3, 1, "", "apply_matmul_biasadd_fusion"], [122, 3, 1, "", "apply_matmul_biasadd_relu_fusion"], [122, 3, 1, "", "apply_the_transform"], [122, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[123, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling": [[123, 3, 1, "", "apply_the_transform"], [123, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[125, 2, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph": [[125, 3, 1, "", "do_transform"], [125, 3, 1, "", "get_quantized_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[126, 2, 1, "", "QuantizeGraphBase"], [126, 2, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase": [[126, 3, 1, "", "do_transform"], [126, 3, 1, "", "register_transformer"], [126, 3, 1, "", "remove_dead_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase": [[126, 3, 1, "", "add_output_graph_node"], [126, 3, 1, "", "apply_the_transform"], [126, 3, 1, "", "create_nodes_map"], [126, 3, 1, "", "eightbitize_single_input_tensor_node"], [126, 3, 1, "", "get_longest_fuse"], [126, 3, 1, "", "remove_redundant_quantization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[127, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3": [[127, 3, 1, "", "apply_newly_bn_leakyrelu_fusion"], [127, 3, 1, "", "apply_newly_bn_relu_fusion"], [127, 3, 1, "", "apply_the_transform"], [127, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[128, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2": [[128, 3, 1, "", "apply_the_transform"], [128, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[129, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d": [[129, 3, 1, "", "apply_conv_biasadd_addn_relu_fusion"], [129, 3, 1, "", "apply_conv_biasadd_fusion"], [129, 3, 1, "", "apply_conv_biasadd_relu_fusion"], [129, 3, 1, "", "apply_conv_single_fusion"], [129, 3, 1, "", "apply_the_transform"], [129, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[130, 2, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel": [[130, 3, 1, "", "do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[131, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul": [[131, 3, 1, "", "apply_matmul_biasadd_fusion"], [131, 3, 1, "", "apply_matmul_biasadd_relu_fusion"], [131, 3, 1, "", "apply_the_transform"], [131, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[132, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling": [[132, 3, 1, "", "apply_the_transform"], [132, 3, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[133, 2, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper": [[133, 3, 1, "", "copy_attr"], [133, 3, 1, "", "create_constant_node"], [133, 3, 1, "", "create_node"], [133, 3, 1, "", "ensure_tensor_name_has_port"], [133, 3, 1, "", "generate_quantized_weight_node"], [133, 3, 1, "", "get_sorted_graph"], [133, 3, 1, "", "node_name_from_input"], [133, 3, 1, "", "remove_training_nodes"], [133, 3, 1, "", "set_attr_bool"], [133, 3, 1, "", "set_attr_dtype"], [133, 3, 1, "", "set_attr_float"], [133, 3, 1, "", "set_attr_int"], [133, 3, 1, "", "set_attr_string"], [133, 3, 1, "", "set_attr_string_list"], [133, 3, 1, "", "set_attr_tensor"], [133, 3, 1, "", "set_attr_type_list"], [133, 3, 1, "", "split_shared_inputs"], [133, 3, 1, "", "unique_node_name_from_input"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[134, 2, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter": [[134, 3, 1, "", "convert"], [134, 3, 1, "", "duplicate_tf_quantizev2_nodes"], [134, 3, 1, "", "tf_graph_optimize"], [134, 3, 1, "", "transpose_inputs"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[135, 0, 0, "-", "bias_correction"], [136, 0, 0, "-", "graph_transform_base"], [138, 0, 0, "-", "insert_logging"], [139, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[135, 2, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection": [[135, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[136, 2, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase": [[136, 3, 1, "", "do_transformation"], [136, 3, 1, "", "generate_input_map"], [136, 3, 1, "", "get_node_name_from_input"], [136, 3, 1, "", "node_name_from_input"], [136, 3, 1, "", "parse_input_pb"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[138, 2, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging": [[138, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[139, 2, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat": [[139, 3, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.util": [[140, 1, 1, "", "collate_tf_preds"], [140, 1, 1, "", "disable_random"], [140, 1, 1, "", "fix_ref_type_of_graph_def"], [140, 1, 1, "", "generate_feed_dict"], [140, 1, 1, "", "get_estimator_graph"], [140, 1, 1, "", "get_graph_def"], [140, 1, 1, "", "get_input_output_node_names"], [140, 1, 1, "", "get_model_input_shape"], [140, 1, 1, "", "get_tensor_by_name"], [140, 1, 1, "", "get_tensor_val_from_graph_node"], [140, 1, 1, "", "int8_node_name_reverse"], [140, 1, 1, "", "is_ckpt_format"], [140, 1, 1, "", "is_saved_model_format"], [140, 1, 1, "", "iterator_sess_run"], [140, 1, 1, "", "read_graph"], [140, 1, 1, "", "strip_equivalent_nodes"], [140, 1, 1, "", "strip_unused_nodes"], [140, 1, 1, "", "tf_diagnosis_helper"], [140, 1, 1, "", "version1_eq_version2"], [140, 1, 1, "", "version1_gt_version2"], [140, 1, 1, "", "version1_gte_version2"], [140, 1, 1, "", "version1_lt_version2"], [140, 1, 1, "", "version1_lte_version2"], [140, 1, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[141, 0, 0, "-", "bf16_convert"], [142, 0, 0, "-", "hawq_metric"], [144, 0, 0, "-", "onnx"], [145, 0, 0, "-", "smooth_quant"], [146, 0, 0, "-", "symbolic_trace"], [147, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[141, 2, 1, "", "BF16ModuleWrapper"], [141, 1, 1, "", "Convert"], [141, 1, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper": [[141, 3, 1, "", "forward"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[142, 2, 1, "", "HessianTrace"], [142, 2, 1, "", "Node_collector"], [142, 1, 1, "", "compare_weights"], [142, 1, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace": [[142, 3, 1, "", "get_act_gap"], [142, 3, 1, "", "get_act_traces"], [142, 3, 1, "", "get_avg_traces"], [142, 3, 1, "", "get_device"], [142, 3, 1, "", "get_fused_mapping"], [142, 3, 1, "", "get_params"], [142, 3, 1, "", "get_vtHv_weight"], [142, 3, 1, "", "get_weight_traces"], [142, 3, 1, "", "is_fused_module"], [142, 3, 1, "", "mse_metric_gap"], [142, 3, 1, "", "register_act_grad_hooks"], [142, 3, 1, "", "reset_act_gradient_and_hooks"]], "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector": [[142, 3, 1, "", "hook_fn_act"], [142, 3, 1, "", "remove"]], "neural_compressor.adaptor.torch_utils.onnx": [[144, 2, 1, "", "DataReader"]], "neural_compressor.adaptor.torch_utils.onnx.DataReader": [[144, 3, 1, "", "get_next"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[145, 2, 1, "", "GraphTrace"], [145, 2, 1, "", "TorchSmoothQuant"]], "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant": [[145, 3, 1, "", "recover"], [145, 3, 1, "", "transform"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[146, 1, 1, "", "symbolic_trace"], [146, 1, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.util": [[147, 1, 1, "", "append_attr"], [147, 1, 1, "", "auto_copy"], [147, 1, 1, "", "check_cfg_and_qconfig"], [147, 1, 1, "", "collate_torch_preds"], [147, 1, 1, "", "fetch_module"], [147, 1, 1, "", "generate_activation_observer"], [147, 1, 1, "", "get_embedding_contiguous"], [147, 1, 1, "", "get_example_input"], [147, 1, 1, "", "get_fallback_order"], [147, 1, 1, "", "get_mse_order_per_fp32"], [147, 1, 1, "", "get_mse_order_per_int8"], [147, 1, 1, "", "get_quantizable_ops_from_cfgs"], [147, 1, 1, "", "get_torch_version"], [147, 1, 1, "", "input2tuple"], [147, 1, 1, "", "is_fused_module"], [147, 1, 1, "", "paser_cfgs"], [147, 1, 1, "", "set_module"], [147, 1, 1, "", "simple_inference"]], "neural_compressor.algorithm": [[150, 2, 1, "", "ALGORITHMS"], [150, 2, 1, "", "Algorithm"], [150, 2, 1, "", "AlgorithmScheduler"], [148, 0, 0, "-", "algorithm"], [150, 1, 1, "", "algorithm_registry"], [149, 0, 0, "-", "fast_bias_correction"], [151, 0, 0, "-", "smooth_quant"], [152, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.ALGORITHMS": [[150, 3, 1, "", "support_algorithms"]], "neural_compressor.algorithm.AlgorithmScheduler": [[150, 4, 1, "", "adaptor"], [150, 3, 1, "", "append_algorithm"], [150, 4, 1, "", "calib_iter"], [150, 4, 1, "", "dataloader"], [150, 4, 1, "", "origin_model"], [150, 4, 1, "", "q_model"], [150, 3, 1, "", "reset_exec_algorithms"]], "neural_compressor.algorithm.algorithm": [[148, 2, 1, "", "ALGORITHMS"], [148, 2, 1, "", "Algorithm"], [148, 2, 1, "", "AlgorithmScheduler"], [148, 1, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.algorithm.ALGORITHMS": [[148, 3, 1, "", "support_algorithms"]], "neural_compressor.algorithm.algorithm.AlgorithmScheduler": [[148, 4, 1, "", "adaptor"], [148, 3, 1, "", "append_algorithm"], [148, 4, 1, "", "calib_iter"], [148, 4, 1, "", "dataloader"], [148, 4, 1, "", "origin_model"], [148, 4, 1, "", "q_model"], [148, 3, 1, "", "reset_exec_algorithms"]], "neural_compressor.algorithm.fast_bias_correction": [[149, 2, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[151, 2, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[152, 2, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[153, 2, 1, "", "Benchmark"], [153, 1, 1, "", "fit"]], "neural_compressor.benchmark.Benchmark": [[153, 3, 1, "", "dataloader"], [153, 3, 1, "", "metric"], [153, 3, 1, "", "postprocess"]], "neural_compressor.conf": [[154, 0, 0, "-", "config"], [155, 0, 0, "-", "dotdict"], [157, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[154, 2, 1, "", "Benchmark_Conf"], [154, 2, 1, "", "Conf"], [154, 2, 1, "", "Distillation_Conf"], [154, 2, 1, "", "Graph_Optimization_Conf"], [154, 2, 1, "", "MixedPrecision_Conf"], [154, 2, 1, "", "NASConfig"], [154, 2, 1, "", "PrunerV2"], [154, 2, 1, "", "Pruning_Conf"], [154, 2, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[155, 2, 1, "", "DotDict"], [155, 1, 1, "", "deep_get"], [155, 1, 1, "", "deep_set"]], "neural_compressor.config": [[158, 2, 1, "", "AccuracyCriterion"], [158, 2, 1, "", "BenchmarkConfig"], [158, 2, 1, "", "DistillationConfig"], [158, 2, 1, "", "ExportConfig"], [158, 2, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [158, 2, 1, "", "KnowledgeDistillationLossConfig"], [158, 2, 1, "", "MixedPrecisionConfig"], [158, 2, 1, "", "ONNXQlinear2QDQConfig"], [158, 2, 1, "", "Options"], [158, 2, 1, "", "PostTrainingQuantConfig"], [158, 2, 1, "", "QuantizationAwareTrainingConfig"], [158, 2, 1, "", "SelfKnowledgeDistillationLossConfig"], [158, 2, 1, "", "TF2ONNXConfig"], [158, 2, 1, "", "Torch2ONNXConfig"], [158, 2, 1, "", "TuningCriterion"], [158, 2, 1, "", "WeightPruningConfig"], [158, 1, 1, "", "check_value"]], "neural_compressor.config.AccuracyCriterion": [[158, 4, 1, "", "absolute"], [158, 4, 1, "", "criterion"], [158, 4, 1, "", "higher_is_better"], [158, 4, 1, "", "relative"], [158, 4, 1, "", "tolerable_loss"]], "neural_compressor.config.BenchmarkConfig": [[158, 4, 1, "", "backend"], [158, 4, 1, "", "cores_per_instance"], [158, 4, 1, "", "inputs"], [158, 4, 1, "", "inter_num_of_threads"], [158, 4, 1, "", "intra_num_of_threads"], [158, 4, 1, "", "iteration"], [158, 4, 1, "", "num_of_instance"], [158, 4, 1, "", "outputs"], [158, 4, 1, "", "warmup"]], "neural_compressor.config.DistillationConfig": [[158, 4, 1, "", "criterion"], [158, 4, 1, "", "optimizer"], [158, 4, 1, "", "teacher_model"]], "neural_compressor.config.ExportConfig": [[158, 4, 1, "", "dtype"], [158, 4, 1, "", "dynamic_axes"], [158, 4, 1, "", "example_inputs"], [158, 4, 1, "", "input_names"], [158, 4, 1, "", "opset_version"], [158, 4, 1, "", "output_names"], [158, 4, 1, "", "quant_format"]], "neural_compressor.config.Options": [[158, 4, 1, "", "random_seed"], [158, 4, 1, "", "resume_from"], [158, 4, 1, "", "tensorboard"], [158, 4, 1, "", "workspace"]], "neural_compressor.config.PostTrainingQuantConfig": [[158, 4, 1, "", "approach"], [158, 4, 1, "", "tuning_criterion"]], "neural_compressor.config.QuantizationAwareTrainingConfig": [[158, 4, 1, "", "approach"]], "neural_compressor.config.TuningCriterion": [[158, 4, 1, "", "max_trials"], [158, 4, 1, "", "objective"], [158, 4, 1, "", "strategy"], [158, 4, 1, "", "strategy_kwargs"], [158, 4, 1, "", "timeout"]], "neural_compressor.config.WeightPruningConfig": [[158, 4, 1, "", "weight_compression"]], "neural_compressor.contrib": [[160, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[161, 0, 0, "-", "sigopt"], [162, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[161, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy": [[161, 3, 1, "", "create_exp"], [161, 3, 1, "", "get_acc_target"], [161, 3, 1, "", "next_tune_cfg"], [161, 3, 1, "", "params_to_tune_configs"], [161, 3, 1, "", "traverse"]], "neural_compressor.contrib.strategy.tpe": [[162, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy": [[162, 3, 1, "", "add_loss_to_tuned_history_and_find_best"], [162, 3, 1, "", "calculate_loss"], [162, 3, 1, "", "object_evaluation"], [162, 3, 1, "", "stop"], [162, 3, 1, "", "traverse"]], "neural_compressor.data": [[184, 2, 1, "", "BaseTransform"], [184, 2, 1, "", "BilinearImagenetTransform"], [184, 2, 1, "", "COCORecordDataset"], [184, 2, 1, "", "ComposeTransform"], [184, 2, 1, "", "DataLoader"], [184, 2, 1, "", "Dataset"], [184, 2, 1, "", "Datasets"], [184, 2, 1, "", "DefaultDataLoader"], [184, 2, 1, "", "FILTERS"], [184, 2, 1, "", "Filter"], [184, 2, 1, "", "IterableDataset"], [184, 2, 1, "", "LabelBalanceCOCORecordFilter"], [184, 2, 1, "", "LabelShift"], [184, 2, 1, "", "NormalizeTFTransform"], [184, 2, 1, "", "ParseDecodeCocoTransform"], [184, 2, 1, "", "Postprocess"], [184, 2, 1, "", "RescaleTFTransform"], [184, 2, 1, "", "ResizeTFTransform"], [184, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [184, 2, 1, "", "TFSquadV1PostTransform"], [184, 2, 1, "", "TRANSFORMS"], [184, 2, 1, "", "TensorflowImageRecord"], [184, 2, 1, "", "TensorflowResizeCropImagenetTransform"], [184, 2, 1, "", "TensorflowResizeWithRatio"], [167, 0, 0, "-", "dataloaders"], [184, 1, 1, "", "dataset_registry"], [179, 0, 0, "-", "datasets"], [184, 1, 1, "", "filter_registry"], [183, 0, 0, "-", "filters"], [184, 1, 1, "", "transform_registry"], [187, 0, 0, "-", "transforms"]], "neural_compressor.data.DefaultDataLoader": [[184, 3, 1, "", "batch"], [184, 4, 1, "", "dataloader"]], "neural_compressor.data.TFSquadV1PostTransform": [[184, 3, 1, "", "get_postprocess_result"], [184, 3, 1, "", "process_result"]], "neural_compressor.data.TRANSFORMS": [[184, 3, 1, "", "register"]], "neural_compressor.data.dataloaders": [[167, 2, 1, "", "DataLoader"], [163, 0, 0, "-", "base_dataloader"], [164, 0, 0, "-", "dataloader"], [165, 0, 0, "-", "default_dataloader"], [166, 0, 0, "-", "fetcher"], [168, 0, 0, "-", "mxnet_dataloader"], [169, 0, 0, "-", "onnxrt_dataloader"], [170, 0, 0, "-", "pytorch_dataloader"], [171, 0, 0, "-", "sampler"], [172, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[163, 2, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader": [[163, 3, 1, "", "batch"], [163, 4, 1, "", "batch_size"]], "neural_compressor.data.dataloaders.dataloader": [[164, 2, 1, "", "DataLoader"]], "neural_compressor.data.dataloaders.default_dataloader": [[165, 2, 1, "", "DefaultDataLoader"], [165, 1, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader": [[165, 3, 1, "", "batch"], [165, 4, 1, "", "dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[166, 2, 1, "", "Fetcher"], [166, 2, 1, "", "IndexFetcher"], [166, 2, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[168, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[169, 2, 1, "", "ONNXRTBertDataLoader"], [169, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[170, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[171, 2, 1, "", "BatchSampler"], [171, 2, 1, "", "IterableSampler"], [171, 2, 1, "", "Sampler"], [171, 2, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[172, 2, 1, "", "TFDataDataLoader"], [172, 2, 1, "", "TensorflowBertDataLoader"], [172, 2, 1, "", "TensorflowDataLoader"], [172, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[172, 3, 1, "", "batch"]], "neural_compressor.data.datasets": [[179, 2, 1, "", "COCORecordDataset"], [179, 2, 1, "", "Dataset"], [179, 2, 1, "", "Datasets"], [179, 2, 1, "", "IterableDataset"], [179, 2, 1, "", "TensorflowImageRecord"], [173, 0, 0, "-", "bert_dataset"], [174, 0, 0, "-", "coco_dataset"], [175, 0, 0, "-", "dataset"], [179, 1, 1, "", "dataset_registry"], [176, 0, 0, "-", "dummy_dataset"], [177, 0, 0, "-", "dummy_dataset_v2"], [178, 0, 0, "-", "imagenet_dataset"], [180, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[173, 2, 1, "", "InputFeatures"], [173, 2, 1, "", "ONNXRTBertDataset"], [173, 2, 1, "", "ParseDecodeBert"], [173, 2, 1, "", "PytorchBertDataset"], [173, 2, 1, "", "TensorflowBertDataset"], [173, 2, 1, "", "TensorflowModelZooBertDataset"], [173, 1, 1, "", "convert_examples_to_features"], [173, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset.InputFeatures": [[173, 3, 1, "", "to_json_string"]], "neural_compressor.data.datasets.coco_dataset": [[174, 2, 1, "", "COCONpy"], [174, 2, 1, "", "COCORaw"], [174, 2, 1, "", "COCORecordDataset"], [174, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[175, 2, 1, "", "CIFAR10"], [175, 2, 1, "", "CIFAR100"], [175, 2, 1, "", "Dataset"], [175, 2, 1, "", "Datasets"], [175, 2, 1, "", "FashionMNIST"], [175, 2, 1, "", "ImageFolder"], [175, 2, 1, "", "IterableDataset"], [175, 2, 1, "", "MNIST"], [175, 2, 1, "", "MXNetCIFAR10"], [175, 2, 1, "", "MXNetCIFAR100"], [175, 2, 1, "", "MXNetDatasets"], [175, 2, 1, "", "MXNetFashionMNIST"], [175, 2, 1, "", "MXNetImageFolder"], [175, 2, 1, "", "MXNetMNIST"], [175, 2, 1, "", "ONNXRTITDatasets"], [175, 2, 1, "", "ONNXRTQLDatasets"], [175, 2, 1, "", "PyTorchDatasets"], [175, 2, 1, "", "PytorchCIFAR10"], [175, 2, 1, "", "PytorchCIFAR100"], [175, 2, 1, "", "PytorchFashionMNIST"], [175, 2, 1, "", "PytorchMNIST"], [175, 2, 1, "", "PytorchMxnetWrapDataset"], [175, 2, 1, "", "PytorchMxnetWrapFunction"], [175, 2, 1, "", "Tensorflow"], [175, 2, 1, "", "TensorflowCIFAR10"], [175, 2, 1, "", "TensorflowCIFAR100"], [175, 2, 1, "", "TensorflowDatasets"], [175, 2, 1, "", "TensorflowFashionMNIST"], [175, 2, 1, "", "TensorflowImageRecord"], [175, 2, 1, "", "TensorflowMNIST"], [175, 2, 1, "", "TensorflowTFRecordDataset"], [175, 2, 1, "", "TensorflowVOCRecord"], [175, 1, 1, "", "calculate_md5"], [175, 1, 1, "", "check_integrity"], [175, 1, 1, "", "dataset_registry"], [175, 1, 1, "", "download_url"], [175, 5, 1, "", "framework_datasets"], [175, 1, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dataset.CIFAR10": [[175, 3, 1, "", "download"], [175, 3, 1, "", "load_meta"]], "neural_compressor.data.datasets.dataset.FashionMNIST": [[175, 3, 1, "", "read_data"]], "neural_compressor.data.datasets.dataset.MNIST": [[175, 4, 1, "", "class_to_idx"], [175, 3, 1, "", "download"], [175, 3, 1, "", "read_data"]], "neural_compressor.data.datasets.dummy_dataset": [[176, 2, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[177, 2, 1, "", "DummyDataset"], [177, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[178, 2, 1, "", "ImagenetRaw"], [178, 2, 1, "", "MXNetImagenetRaw"], [178, 2, 1, "", "ONNXRTImagenetDataset"], [178, 2, 1, "", "PytorchImagenetRaw"], [178, 2, 1, "", "TensorflowImagenetDataset"], [178, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[180, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[183, 2, 1, "", "FILTERS"], [183, 2, 1, "", "Filter"], [183, 2, 1, "", "LabelBalanceCOCORecordFilter"], [181, 0, 0, "-", "coco_filter"], [182, 0, 0, "-", "filter"], [183, 1, 1, "", "filter_registry"]], "neural_compressor.data.filters.coco_filter": [[181, 2, 1, "", "LabelBalanceCOCORawFilter"], [181, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[182, 2, 1, "", "FILTERS"], [182, 2, 1, "", "Filter"], [182, 2, 1, "", "MXNetFilters"], [182, 2, 1, "", "ONNXRTITFilters"], [182, 2, 1, "", "ONNXRTQLFilters"], [182, 2, 1, "", "PyTorchFilters"], [182, 2, 1, "", "TensorflowFilters"], [182, 1, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[187, 2, 1, "", "BaseTransform"], [187, 2, 1, "", "BilinearImagenetTransform"], [187, 2, 1, "", "ComposeTransform"], [187, 2, 1, "", "LabelShift"], [187, 2, 1, "", "NormalizeTFTransform"], [187, 2, 1, "", "ParseDecodeCocoTransform"], [187, 2, 1, "", "Postprocess"], [187, 2, 1, "", "RescaleTFTransform"], [187, 2, 1, "", "ResizeTFTransform"], [187, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [187, 2, 1, "", "TFSquadV1PostTransform"], [187, 2, 1, "", "TRANSFORMS"], [187, 2, 1, "", "TensorflowResizeCropImagenetTransform"], [187, 2, 1, "", "TensorflowResizeWithRatio"], [185, 0, 0, "-", "coco_transform"], [186, 0, 0, "-", "imagenet_transform"], [188, 0, 0, "-", "postprocess"], [189, 0, 0, "-", "tokenization"], [190, 0, 0, "-", "transform"], [187, 1, 1, "", "transform_registry"]], "neural_compressor.data.transforms.TFSquadV1PostTransform": [[187, 3, 1, "", "get_postprocess_result"], [187, 3, 1, "", "process_result"]], "neural_compressor.data.transforms.TRANSFORMS": [[187, 3, 1, "", "register"]], "neural_compressor.data.transforms.coco_transform": [[185, 2, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[186, 2, 1, "", "BilinearImagenetTransform"], [186, 2, 1, "", "LabelShift"], [186, 2, 1, "", "ONNXResizeCropImagenetTransform"], [186, 2, 1, "", "OnnxBilinearImagenetTransform"], [186, 2, 1, "", "ParseDecodeImagenet"], [186, 2, 1, "", "ParseDecodeImagenetTransform"], [186, 2, 1, "", "QuantizedInput"], [186, 2, 1, "", "ResizeWithAspectRatio"], [186, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.postprocess": [[188, 2, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[189, 2, 1, "", "BasicTokenizer"], [189, 2, 1, "", "FullTokenizer"], [189, 2, 1, "", "WordpieceTokenizer"], [189, 1, 1, "", "convert_by_vocab"], [189, 1, 1, "", "convert_to_unicode"], [189, 1, 1, "", "load_vocab"], [189, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.tokenization.BasicTokenizer": [[189, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.tokenization.FullTokenizer": [[189, 3, 1, "", "convert_ids_to_tokens"], [189, 3, 1, "", "convert_tokens_to_ids"], [189, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.tokenization.WordpieceTokenizer": [[189, 3, 1, "", "tokenize"]], "neural_compressor.data.transforms.transform": [[190, 2, 1, "", "AlignImageChannelTransform"], [190, 2, 1, "", "BaseTransform"], [190, 2, 1, "", "CastONNXTransform"], [190, 2, 1, "", "CastPyTorchTransform"], [190, 2, 1, "", "CastTFTransform"], [190, 2, 1, "", "CenterCropTFTransform"], [190, 2, 1, "", "CenterCropTransform"], [190, 2, 1, "", "CollectTransform"], [190, 2, 1, "", "ComposeTransform"], [190, 2, 1, "", "CropResizeTFTransform"], [190, 2, 1, "", "CropResizeTransform"], [190, 2, 1, "", "CropToBoundingBox"], [190, 2, 1, "", "InputFeatures"], [190, 2, 1, "", "MXNetCropResizeTransform"], [190, 2, 1, "", "MXNetCropToBoundingBox"], [190, 2, 1, "", "MXNetNormalizeTransform"], [190, 2, 1, "", "MXNetTransforms"], [190, 2, 1, "", "MXNetTranspose"], [190, 2, 1, "", "NormalizeTFTransform"], [190, 2, 1, "", "NormalizeTransform"], [190, 2, 1, "", "ONNXRTCropToBoundingBox"], [190, 2, 1, "", "ONNXRTITTransforms"], [190, 2, 1, "", "ONNXRTQLTransforms"], [190, 2, 1, "", "PaddedCenterCropTransform"], [190, 2, 1, "", "ParseDecodeVocTransform"], [190, 2, 1, "", "PyTorchAlignImageChannel"], [190, 2, 1, "", "PyTorchCropResizeTransform"], [190, 2, 1, "", "PyTorchNormalizeTransform"], [190, 2, 1, "", "PyTorchTransforms"], [190, 2, 1, "", "PyTorchTranspose"], [190, 2, 1, "", "PytorchMxnetTransform"], [190, 2, 1, "", "PytorchMxnetWrapFunction"], [190, 2, 1, "", "RandomCropTFTransform"], [190, 2, 1, "", "RandomCropTransform"], [190, 2, 1, "", "RandomHorizontalFlip"], [190, 2, 1, "", "RandomResizedCropMXNetTransform"], [190, 2, 1, "", "RandomResizedCropPytorchTransform"], [190, 2, 1, "", "RandomResizedCropTFTransform"], [190, 2, 1, "", "RandomResizedCropTransform"], [190, 2, 1, "", "RandomVerticalFlip"], [190, 2, 1, "", "RescaleKerasPretrainTransform"], [190, 2, 1, "", "RescaleTFTransform"], [190, 2, 1, "", "RescaleTransform"], [190, 2, 1, "", "ResizeMXNetTransform"], [190, 2, 1, "", "ResizePytorchTransform"], [190, 2, 1, "", "ResizeTFTransform"], [190, 2, 1, "", "ResizeTransform"], [190, 2, 1, "", "ResizeWithRatio"], [190, 2, 1, "", "SquadExample"], [190, 2, 1, "", "TFModelZooCollectTransform"], [190, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [190, 2, 1, "", "TFSquadV1PostTransform"], [190, 2, 1, "", "TRANSFORMS"], [190, 2, 1, "", "TensorflowCropToBoundingBox"], [190, 2, 1, "", "TensorflowRandomHorizontalFlip"], [190, 2, 1, "", "TensorflowRandomVerticalFlip"], [190, 2, 1, "", "TensorflowResizeWithRatio"], [190, 2, 1, "", "TensorflowTransform"], [190, 2, 1, "", "TensorflowTransforms"], [190, 2, 1, "", "TensorflowTranspose"], [190, 2, 1, "", "TensorflowWrapFunction"], [190, 2, 1, "", "ToArray"], [190, 2, 1, "", "ToNDArrayTransform"], [190, 2, 1, "", "Transforms"], [190, 2, 1, "", "Transpose"], [190, 1, 1, "", "convert_examples_to_features"], [190, 1, 1, "", "get_final_text"], [190, 1, 1, "", "get_torchvision_map"], [190, 1, 1, "", "read_squad_examples"], [190, 1, 1, "", "transform_registry"]], "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform": [[190, 3, 1, "", "get_params"]], "neural_compressor.data.transforms.transform.RandomResizedCropTransform": [[190, 3, 1, "", "get_params"]], "neural_compressor.data.transforms.transform.TFSquadV1PostTransform": [[190, 3, 1, "", "get_postprocess_result"], [190, 3, 1, "", "process_result"]], "neural_compressor.data.transforms.transform.TRANSFORMS": [[190, 3, 1, "", "register"]], "neural_compressor.experimental": [[234, 2, 1, "", "Benchmark"], [234, 2, 1, "", "Component"], [234, 2, 1, "", "Distillation"], [234, 2, 1, "", "Graph_Optimization"], [234, 2, 1, "", "MixedPrecision"], [234, 2, 1, "", "ModelConversion"], [234, 2, 1, "", "NAS"], [234, 2, 1, "", "Pruning"], [234, 2, 1, "", "Quantization"], [191, 0, 0, "-", "benchmark"], [194, 0, 0, "-", "common"], [200, 0, 0, "-", "component"], [222, 0, 0, "-", "data"], [227, 0, 0, "-", "distillation"], [228, 0, 0, "-", "export"], [233, 0, 0, "-", "graph_optimization"], [241, 0, 0, "-", "metric"], [243, 0, 0, "-", "mixed_precision"], [244, 0, 0, "-", "model_conversion"], [257, 0, 0, "-", "nas"], [261, 0, 0, "-", "pruning"], [262, 0, 0, "-", "pruning_recipes"], [266, 0, 0, "-", "pruning_v2"], [267, 0, 0, "-", "pytorch_pruner"], [274, 0, 0, "-", "quantization"], [275, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.Benchmark": [[234, 4, 1, "", "b_dataloader"], [234, 4, 1, "", "b_func"], [234, 3, 1, "", "call_one"], [234, 3, 1, "", "config_instance"], [234, 3, 1, "", "generate_prefix"], [234, 4, 1, "", "metric"], [234, 4, 1, "", "model"], [234, 4, 1, "", "postprocess"], [234, 4, 1, "", "results"], [234, 3, 1, "", "run_instance"], [234, 3, 1, "", "summary_benchmark"]], "neural_compressor.experimental.Component": [[234, 4, 1, "", "eval_dataloader"], [234, 4, 1, "", "eval_func"], [234, 3, 1, "", "execute"], [234, 4, 1, "", "model"], [234, 3, 1, "", "on_after_compute_loss"], [234, 3, 1, "", "on_after_eval"], [234, 3, 1, "", "on_after_optimizer_step"], [234, 3, 1, "", "on_batch_begin"], [234, 3, 1, "", "on_batch_end"], [234, 3, 1, "", "on_before_eval"], [234, 3, 1, "", "on_before_optimizer_step"], [234, 3, 1, "", "on_epoch_begin"], [234, 3, 1, "", "on_epoch_end"], [234, 3, 1, "", "on_post_grad"], [234, 3, 1, "", "on_step_begin"], [234, 3, 1, "", "on_step_end"], [234, 3, 1, "", "on_train_begin"], [234, 3, 1, "", "on_train_end"], [234, 3, 1, "", "post_epoch_end"], [234, 3, 1, "", "post_process"], [234, 3, 1, "", "pre_epoch_begin"], [234, 3, 1, "", "pre_process"], [234, 3, 1, "", "prepare"], [234, 3, 1, "", "prepare_qat"], [234, 3, 1, "", "register_hook"], [234, 4, 1, "", "train_dataloader"], [234, 4, 1, "", "train_func"]], "neural_compressor.experimental.Distillation": [[234, 6, 1, "", "_epoch_ran"], [234, 6, 1, "", "best_model"], [234, 6, 1, "", "best_score"], [234, 3, 1, "", "create_criterion"], [234, 3, 1, "", "create_optimizer"], [234, 4, 1, "", "criterion"], [234, 6, 1, "", "eval_frequency"], [234, 4, 1, "", "evaluation_distributed"], [234, 3, 1, "", "execute"], [234, 3, 1, "", "generate_hooks"], [234, 3, 1, "", "init_train_cfg"], [234, 3, 1, "", "on_post_forward"], [234, 4, 1, "", "optimizer"], [234, 3, 1, "", "pre_process"], [234, 3, 1, "", "prepare"], [234, 4, 1, "", "student_model"], [234, 4, 1, "", "teacher_model"], [234, 4, 1, "", "train_cfg"], [234, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.Graph_Optimization": [[234, 3, 1, "", "dataset"], [234, 4, 1, "", "eval_dataloader"], [234, 4, 1, "", "eval_func"], [234, 4, 1, "", "input"], [234, 4, 1, "", "metric"], [234, 4, 1, "", "model"], [234, 4, 1, "", "output"], [234, 4, 1, "", "postprocess"], [234, 4, 1, "", "precisions"], [234, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.MixedPrecision": [[234, 4, 1, "", "precisions"], [234, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.ModelConversion": [[234, 3, 1, "", "dataset"], [234, 4, 1, "", "destination"], [234, 4, 1, "", "eval_dataloader"], [234, 4, 1, "", "eval_func"], [234, 4, 1, "", "metric"], [234, 4, 1, "", "model"], [234, 4, 1, "", "postprocess"], [234, 4, 1, "", "source"]], "neural_compressor.experimental.Pruning": [[234, 6, 1, "", "conf"], [234, 4, 1, "", "evaluation_distributed"], [234, 3, 1, "", "execute"], [234, 3, 1, "", "generate_hooks"], [234, 3, 1, "", "generate_pruners"], [234, 3, 1, "", "get_sparsity_ratio"], [234, 3, 1, "", "pre_process"], [234, 3, 1, "", "prepare"], [234, 6, 1, "", "pruners"], [234, 4, 1, "", "pruning_func"], [234, 4, 1, "", "train_distributed"], [234, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.Quantization": [[234, 4, 1, "", "calib_dataloader"], [234, 3, 1, "", "dataset"], [234, 3, 1, "", "distributed_execute"], [234, 3, 1, "", "execute"], [234, 4, 1, "", "metric"], [234, 4, 1, "", "model"], [234, 4, 1, "", "objective"], [234, 4, 1, "", "postprocess"], [234, 3, 1, "", "pre_process"], [234, 4, 1, "", "q_func"]], "neural_compressor.experimental.benchmark": [[191, 2, 1, "", "Benchmark"], [191, 1, 1, "", "get_architecture"], [191, 1, 1, "", "get_bounded_threads"], [191, 1, 1, "", "get_core_ids"], [191, 1, 1, "", "get_physical_ids"], [191, 1, 1, "", "get_threads"], [191, 1, 1, "", "get_threads_per_core"], [191, 1, 1, "", "set_all_env_var"], [191, 1, 1, "", "set_env_var"]], "neural_compressor.experimental.benchmark.Benchmark": [[191, 4, 1, "", "b_dataloader"], [191, 4, 1, "", "b_func"], [191, 3, 1, "", "call_one"], [191, 3, 1, "", "config_instance"], [191, 3, 1, "", "generate_prefix"], [191, 4, 1, "", "metric"], [191, 4, 1, "", "model"], [191, 4, 1, "", "postprocess"], [191, 4, 1, "", "results"], [191, 3, 1, "", "run_instance"], [191, 3, 1, "", "summary_benchmark"]], "neural_compressor.experimental.common": [[194, 2, 1, "", "DataLoader"], [194, 2, 1, "", "Metric"], [194, 2, 1, "", "Model"], [194, 2, 1, "", "Postprocess"], [192, 0, 0, "-", "criterion"], [193, 0, 0, "-", "dataloader"], [195, 0, 0, "-", "metric"], [196, 0, 0, "-", "model"], [197, 0, 0, "-", "optimizer"], [198, 0, 0, "-", "postprocess"], [199, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[192, 2, 1, "", "Criterions"], [192, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [192, 2, 1, "", "KnowledgeDistillationFramework"], [192, 2, 1, "", "KnowledgeDistillationLoss"], [192, 2, 1, "", "PyTorchCriterions"], [192, 2, 1, "", "PyTorchCrossEntropyLoss"], [192, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [192, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [192, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [192, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [192, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [192, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [192, 2, 1, "", "SelfKnowledgeDistillationLoss"], [192, 2, 1, "", "TensorFlowCrossEntropyLoss"], [192, 2, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [192, 2, 1, "", "TensorflowCriterions"], [192, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [192, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [192, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [192, 1, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.criterion.Criterions": [[192, 3, 1, "", "register"]], "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss": [[192, 3, 1, "", "clear_features"], [192, 3, 1, "", "init_feature_matcher"], [192, 3, 1, "", "init_loss_funcs"], [192, 3, 1, "", "loss_cal"], [192, 3, 1, "", "loss_cal_sloss"], [192, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework": [[192, 4, 1, "", "student_model"], [192, 4, 1, "", "teacher_model"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss": [[192, 3, 1, "", "loss_cal"], [192, 3, 1, "", "loss_cal_sloss"], [192, 3, 1, "", "student_targets_loss_cal"], [192, 3, 1, "", "teacher_model_forward"], [192, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss": [[192, 3, 1, "", "init_feature_matcher"], [192, 3, 1, "", "init_loss_funcs"], [192, 3, 1, "", "loss_cal"], [192, 3, 1, "", "loss_cal_sloss"], [192, 3, 1, "", "register_hooks_for_models"], [192, 3, 1, "", "remove_all_hooks"], [192, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss": [[192, 3, 1, "", "KullbackLeiblerDivergence"], [192, 3, 1, "", "SoftCrossEntropy"], [192, 3, 1, "", "student_targets_loss_cal"], [192, 3, 1, "", "teacher_model_forward"], [192, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss": [[192, 3, 1, "", "KullbackLeiblerDivergence"], [192, 3, 1, "", "L2Divergence"], [192, 3, 1, "", "SoftCrossEntropy"], [192, 3, 1, "", "init_loss_funcs"], [192, 3, 1, "", "loss_cal"], [192, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss": [[192, 3, 1, "", "init_loss_funcs"], [192, 3, 1, "", "loss_cal"], [192, 3, 1, "", "loss_cal_sloss"], [192, 3, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss": [[192, 3, 1, "", "SoftCrossEntropy"], [192, 3, 1, "", "student_targets_loss_cal"], [192, 3, 1, "", "teacher_model_forward"], [192, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal": [[192, 3, 1, "", "student_targets_loss_cal"], [192, 3, 1, "", "teacher_model_forward"], [192, 3, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.dataloader": [[193, 2, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[195, 2, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[196, 2, 1, "", "Model"], [196, 1, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[197, 2, 1, "", "Optimizers"], [197, 2, 1, "", "PyTorchOptimizers"], [197, 2, 1, "", "PyTorchSGD"], [197, 2, 1, "", "TensorFlowAdam"], [197, 2, 1, "", "TensorFlowAdamW"], [197, 2, 1, "", "TensorFlowSGD"], [197, 2, 1, "", "TensorflowOptimizers"], [197, 1, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.optimizer.Optimizers": [[197, 3, 1, "", "register"]], "neural_compressor.experimental.common.postprocess": [[198, 2, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[199, 1, 1, "", "get_activation"], [199, 1, 1, "", "record_output"]], "neural_compressor.experimental.component": [[200, 2, 1, "", "Component"]], "neural_compressor.experimental.component.Component": [[200, 4, 1, "", "eval_dataloader"], [200, 4, 1, "", "eval_func"], [200, 3, 1, "", "execute"], [200, 4, 1, "", "model"], [200, 3, 1, "", "on_after_compute_loss"], [200, 3, 1, "", "on_after_eval"], [200, 3, 1, "", "on_after_optimizer_step"], [200, 3, 1, "", "on_batch_begin"], [200, 3, 1, "", "on_batch_end"], [200, 3, 1, "", "on_before_eval"], [200, 3, 1, "", "on_before_optimizer_step"], [200, 3, 1, "", "on_epoch_begin"], [200, 3, 1, "", "on_epoch_end"], [200, 3, 1, "", "on_post_grad"], [200, 3, 1, "", "on_step_begin"], [200, 3, 1, "", "on_step_end"], [200, 3, 1, "", "on_train_begin"], [200, 3, 1, "", "on_train_end"], [200, 3, 1, "", "post_epoch_end"], [200, 3, 1, "", "post_process"], [200, 3, 1, "", "pre_epoch_begin"], [200, 3, 1, "", "pre_process"], [200, 3, 1, "", "prepare"], [200, 3, 1, "", "prepare_qat"], [200, 3, 1, "", "register_hook"], [200, 4, 1, "", "train_dataloader"], [200, 4, 1, "", "train_func"]], "neural_compressor.experimental.data": [[222, 2, 1, "", "BaseTransform"], [222, 2, 1, "", "Dataset"], [222, 2, 1, "", "Datasets"], [222, 2, 1, "", "FILTERS"], [222, 2, 1, "", "Filter"], [222, 2, 1, "", "IterableDataset"], [222, 2, 1, "", "TRANSFORMS"], [205, 0, 0, "-", "dataloaders"], [222, 1, 1, "", "dataset_registry"], [217, 0, 0, "-", "datasets"], [222, 1, 1, "", "filter_registry"], [221, 0, 0, "-", "filters"], [222, 1, 1, "", "transform_registry"], [224, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.TRANSFORMS": [[222, 3, 1, "", "register"]], "neural_compressor.experimental.data.dataloaders": [[201, 0, 0, "-", "base_dataloader"], [202, 0, 0, "-", "dataloader"], [203, 0, 0, "-", "default_dataloader"], [204, 0, 0, "-", "fetcher"], [206, 0, 0, "-", "mxnet_dataloader"], [207, 0, 0, "-", "onnxrt_dataloader"], [208, 0, 0, "-", "pytorch_dataloader"], [209, 0, 0, "-", "sampler"], [210, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[201, 2, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader": [[201, 3, 1, "", "batch"], [201, 4, 1, "", "batch_size"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[203, 2, 1, "", "DefaultDataLoader"], [203, 1, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader": [[203, 3, 1, "", "batch"], [203, 4, 1, "", "dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[204, 2, 1, "", "Fetcher"], [204, 2, 1, "", "IndexFetcher"], [204, 2, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[206, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[207, 2, 1, "", "ONNXRTBertDataLoader"], [207, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[208, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[209, 2, 1, "", "BatchSampler"], [209, 2, 1, "", "IterableSampler"], [209, 2, 1, "", "Sampler"], [209, 2, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[210, 2, 1, "", "TFDataDataLoader"], [210, 2, 1, "", "TensorflowBertDataLoader"], [210, 2, 1, "", "TensorflowDataLoader"], [210, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[210, 3, 1, "", "batch"]], "neural_compressor.experimental.data.datasets": [[217, 2, 1, "", "Dataset"], [217, 2, 1, "", "Datasets"], [217, 2, 1, "", "IterableDataset"], [211, 0, 0, "-", "bert_dataset"], [212, 0, 0, "-", "coco_dataset"], [213, 0, 0, "-", "dataset"], [217, 1, 1, "", "dataset_registry"], [214, 0, 0, "-", "dummy_dataset"], [215, 0, 0, "-", "dummy_dataset_v2"], [216, 0, 0, "-", "imagenet_dataset"], [218, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[211, 2, 1, "", "InputFeatures"], [211, 2, 1, "", "ONNXRTBertDataset"], [211, 2, 1, "", "ParseDecodeBert"], [211, 2, 1, "", "PytorchBertDataset"], [211, 2, 1, "", "TensorflowBertDataset"], [211, 2, 1, "", "TensorflowModelZooBertDataset"], [211, 1, 1, "", "convert_examples_to_features"], [211, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures": [[211, 3, 1, "", "to_json_string"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[212, 2, 1, "", "COCONpy"], [212, 2, 1, "", "COCORaw"], [212, 2, 1, "", "COCORecordDataset"], [212, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[213, 2, 1, "", "CIFAR10"], [213, 2, 1, "", "CIFAR100"], [213, 2, 1, "", "Dataset"], [213, 2, 1, "", "Datasets"], [213, 2, 1, "", "FashionMNIST"], [213, 2, 1, "", "ImageFolder"], [213, 2, 1, "", "IterableDataset"], [213, 2, 1, "", "MNIST"], [213, 2, 1, "", "MXNetCIFAR10"], [213, 2, 1, "", "MXNetCIFAR100"], [213, 2, 1, "", "MXNetDatasets"], [213, 2, 1, "", "MXNetFashionMNIST"], [213, 2, 1, "", "MXNetImageFolder"], [213, 2, 1, "", "MXNetMNIST"], [213, 2, 1, "", "ONNXRTITDatasets"], [213, 2, 1, "", "ONNXRTQLDatasets"], [213, 2, 1, "", "PyTorchDatasets"], [213, 2, 1, "", "PytorchCIFAR10"], [213, 2, 1, "", "PytorchCIFAR100"], [213, 2, 1, "", "PytorchFashionMNIST"], [213, 2, 1, "", "PytorchMNIST"], [213, 2, 1, "", "PytorchMxnetWrapDataset"], [213, 2, 1, "", "PytorchMxnetWrapFunction"], [213, 2, 1, "", "TensorflowCIFAR10"], [213, 2, 1, "", "TensorflowCIFAR100"], [213, 2, 1, "", "TensorflowDatasets"], [213, 2, 1, "", "TensorflowFashionMNIST"], [213, 2, 1, "", "TensorflowImageFolder"], [213, 2, 1, "", "TensorflowImageRecord"], [213, 2, 1, "", "TensorflowMNIST"], [213, 2, 1, "", "TensorflowTFRecordDataset"], [213, 2, 1, "", "TensorflowVOCRecord"], [213, 1, 1, "", "calculate_md5"], [213, 1, 1, "", "check_integrity"], [213, 1, 1, "", "dataset_registry"], [213, 1, 1, "", "download_url"], [213, 5, 1, "", "framework_datasets"], [213, 1, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset.CIFAR10": [[213, 3, 1, "", "download"], [213, 3, 1, "", "load_meta"]], "neural_compressor.experimental.data.datasets.dataset.FashionMNIST": [[213, 3, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dataset.MNIST": [[213, 4, 1, "", "class_to_idx"], [213, 3, 1, "", "download"], [213, 3, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[214, 2, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[215, 2, 1, "", "DummyDataset"], [215, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[216, 2, 1, "", "ImagenetRaw"], [216, 2, 1, "", "MXNetImagenetRaw"], [216, 2, 1, "", "ONNXRTImagenetDataset"], [216, 2, 1, "", "PytorchImagenetRaw"], [216, 2, 1, "", "TensorflowImagenetDataset"], [216, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[218, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[221, 2, 1, "", "FILTERS"], [221, 2, 1, "", "Filter"], [219, 0, 0, "-", "coco_filter"], [220, 0, 0, "-", "filter"], [221, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.filters.coco_filter": [[219, 2, 1, "", "LabelBalanceCOCORawFilter"], [219, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[220, 2, 1, "", "FILTERS"], [220, 2, 1, "", "Filter"], [220, 2, 1, "", "MXNetFilters"], [220, 2, 1, "", "ONNXRTITFilters"], [220, 2, 1, "", "ONNXRTQLFilters"], [220, 2, 1, "", "PyTorchFilters"], [220, 2, 1, "", "TensorflowFilters"], [220, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[224, 2, 1, "", "BaseTransform"], [224, 2, 1, "", "TRANSFORMS"], [223, 0, 0, "-", "imagenet_transform"], [225, 0, 0, "-", "tokenization"], [226, 0, 0, "-", "transform"], [224, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.TRANSFORMS": [[224, 3, 1, "", "register"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[223, 2, 1, "", "BilinearImagenetTransform"], [223, 2, 1, "", "LabelShift"], [223, 2, 1, "", "ONNXResizeCropImagenetTransform"], [223, 2, 1, "", "OnnxBilinearImagenetTransform"], [223, 2, 1, "", "ParseDecodeImagenet"], [223, 2, 1, "", "ParseDecodeImagenetTransform"], [223, 2, 1, "", "QuantizedInput"], [223, 2, 1, "", "ResizeWithAspectRatio"], [223, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[225, 2, 1, "", "BasicTokenizer"], [225, 2, 1, "", "FullTokenizer"], [225, 2, 1, "", "WordpieceTokenizer"], [225, 1, 1, "", "convert_by_vocab"], [225, 1, 1, "", "convert_to_unicode"], [225, 1, 1, "", "load_vocab"], [225, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer": [[225, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer": [[225, 3, 1, "", "convert_ids_to_tokens"], [225, 3, 1, "", "convert_tokens_to_ids"], [225, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer": [[225, 3, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[226, 2, 1, "", "AlignImageChannelTransform"], [226, 2, 1, "", "BaseTransform"], [226, 2, 1, "", "CastONNXTransform"], [226, 2, 1, "", "CastPyTorchTransform"], [226, 2, 1, "", "CastTFTransform"], [226, 2, 1, "", "CenterCropTFTransform"], [226, 2, 1, "", "CenterCropTransform"], [226, 2, 1, "", "CollectTransform"], [226, 2, 1, "", "ComposeTransform"], [226, 2, 1, "", "CropResizeTFTransform"], [226, 2, 1, "", "CropResizeTransform"], [226, 2, 1, "", "CropToBoundingBox"], [226, 2, 1, "", "InputFeatures"], [226, 2, 1, "", "MXNetCropResizeTransform"], [226, 2, 1, "", "MXNetCropToBoundingBox"], [226, 2, 1, "", "MXNetNormalizeTransform"], [226, 2, 1, "", "MXNetTransforms"], [226, 2, 1, "", "MXNetTranspose"], [226, 2, 1, "", "NormalizeTFTransform"], [226, 2, 1, "", "NormalizeTransform"], [226, 2, 1, "", "ONNXRTCropToBoundingBox"], [226, 2, 1, "", "ONNXRTITTransforms"], [226, 2, 1, "", "ONNXRTQLTransforms"], [226, 2, 1, "", "PaddedCenterCropTransform"], [226, 2, 1, "", "ParseDecodeVocTransform"], [226, 2, 1, "", "PyTorchAlignImageChannel"], [226, 2, 1, "", "PyTorchCropResizeTransform"], [226, 2, 1, "", "PyTorchNormalizeTransform"], [226, 2, 1, "", "PyTorchTransforms"], [226, 2, 1, "", "PyTorchTranspose"], [226, 2, 1, "", "PytorchMxnetTransform"], [226, 2, 1, "", "PytorchMxnetWrapFunction"], [226, 2, 1, "", "RandomCropTFTransform"], [226, 2, 1, "", "RandomCropTransform"], [226, 2, 1, "", "RandomHorizontalFlip"], [226, 2, 1, "", "RandomResizedCropMXNetTransform"], [226, 2, 1, "", "RandomResizedCropPytorchTransform"], [226, 2, 1, "", "RandomResizedCropTFTransform"], [226, 2, 1, "", "RandomResizedCropTransform"], [226, 2, 1, "", "RandomVerticalFlip"], [226, 2, 1, "", "RescaleKerasPretrainTransform"], [226, 2, 1, "", "RescaleTFTransform"], [226, 2, 1, "", "RescaleTransform"], [226, 2, 1, "", "ResizeMXNetTransform"], [226, 2, 1, "", "ResizePytorchTransform"], [226, 2, 1, "", "ResizeTFTransform"], [226, 2, 1, "", "ResizeTransform"], [226, 2, 1, "", "ResizeWithRatio"], [226, 2, 1, "", "SquadExample"], [226, 2, 1, "", "TFModelZooCollectTransform"], [226, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [226, 2, 1, "", "TFSquadV1PostTransform"], [226, 2, 1, "", "TRANSFORMS"], [226, 2, 1, "", "TensorflowCropToBoundingBox"], [226, 2, 1, "", "TensorflowRandomHorizontalFlip"], [226, 2, 1, "", "TensorflowRandomVerticalFlip"], [226, 2, 1, "", "TensorflowResizeWithRatio"], [226, 2, 1, "", "TensorflowTransform"], [226, 2, 1, "", "TensorflowTransforms"], [226, 2, 1, "", "TensorflowTranspose"], [226, 2, 1, "", "TensorflowWrapFunction"], [226, 2, 1, "", "ToArray"], [226, 2, 1, "", "ToNDArrayTransform"], [226, 2, 1, "", "Transforms"], [226, 2, 1, "", "Transpose"], [226, 1, 1, "", "convert_examples_to_features"], [226, 1, 1, "", "get_final_text"], [226, 1, 1, "", "get_torchvision_map"], [226, 1, 1, "", "read_squad_examples"], [226, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform": [[226, 3, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform": [[226, 3, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform": [[226, 3, 1, "", "get_postprocess_result"], [226, 3, 1, "", "process_result"]], "neural_compressor.experimental.data.transforms.transform.TRANSFORMS": [[226, 3, 1, "", "register"]], "neural_compressor.experimental.distillation": [[227, 2, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[227, 6, 1, "", "_epoch_ran"], [227, 6, 1, "", "best_model"], [227, 6, 1, "", "best_score"], [227, 3, 1, "", "create_criterion"], [227, 3, 1, "", "create_optimizer"], [227, 4, 1, "", "criterion"], [227, 6, 1, "", "eval_frequency"], [227, 4, 1, "", "evaluation_distributed"], [227, 3, 1, "", "execute"], [227, 3, 1, "", "generate_hooks"], [227, 3, 1, "", "init_train_cfg"], [227, 3, 1, "", "on_post_forward"], [227, 4, 1, "", "optimizer"], [227, 3, 1, "", "pre_process"], [227, 3, 1, "", "prepare"], [227, 4, 1, "", "student_model"], [227, 4, 1, "", "teacher_model"], [227, 4, 1, "", "train_cfg"], [227, 4, 1, "", "train_distributed"]], "neural_compressor.experimental.export": [[228, 1, 1, "", "onnx_qlinear_to_qdq"], [229, 0, 0, "-", "qlinear2qdq"], [230, 0, 0, "-", "tf2onnx"], [228, 1, 1, "", "tf_to_fp32_onnx"], [228, 1, 1, "", "tf_to_int8_onnx"], [231, 0, 0, "-", "torch2onnx"], [228, 1, 1, "", "torch_to_fp32_onnx"], [228, 1, 1, "", "torch_to_int8_onnx"], [232, 0, 0, "-", "utils"]], "neural_compressor.experimental.export.qlinear2qdq": [[229, 1, 1, "", "check_model"], [229, 1, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[230, 1, 1, "", "tf_to_fp32_onnx"], [230, 1, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[231, 1, 1, "", "build_scale_mapping"], [231, 1, 1, "", "get_node_mapping"], [231, 1, 1, "", "get_quantizable_onnx_ops"], [231, 1, 1, "", "qdq_fp32_bias"], [231, 1, 1, "", "qdq_fp32_bias_qdq"], [231, 1, 1, "", "qdq_int32_bias"], [231, 1, 1, "", "recalculate_bias"], [231, 1, 1, "", "remove_nodes_by_name"], [231, 1, 1, "", "set_data_type"], [231, 1, 1, "", "set_scale_info"], [231, 1, 1, "", "sub_graph_with_int32_bias"], [231, 1, 1, "", "torch_to_fp32_onnx"], [231, 1, 1, "", "torch_to_int8_onnx"], [231, 1, 1, "", "update_weight_bias"]], "neural_compressor.experimental.export.utils": [[232, 2, 1, "", "DummyDataReader"], [232, 1, 1, "", "ONNX2Numpy_dtype"]], "neural_compressor.experimental.export.utils.DummyDataReader": [[232, 3, 1, "", "get_next"]], "neural_compressor.experimental.graph_optimization": [[233, 2, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.graph_optimization.Graph_Optimization": [[233, 3, 1, "", "dataset"], [233, 4, 1, "", "eval_dataloader"], [233, 4, 1, "", "eval_func"], [233, 4, 1, "", "input"], [233, 4, 1, "", "metric"], [233, 4, 1, "", "model"], [233, 4, 1, "", "output"], [233, 4, 1, "", "postprocess"], [233, 4, 1, "", "precisions"], [233, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.metric": [[241, 2, 1, "", "BaseMetric"], [241, 2, 1, "", "METRICS"], [549, 0, 0, "-", "bleu"], [236, 0, 0, "-", "bleu_util"], [237, 0, 0, "-", "coco_label_map"], [238, 0, 0, "-", "coco_tools"], [239, 0, 0, "-", "evaluate_squad"], [240, 0, 0, "-", "f1"], [242, 0, 0, "-", "metric"], [241, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.BaseMetric": [[241, 4, 1, "", "hvd"], [241, 4, 1, "", "metric"], [241, 3, 1, "", "reset"], [241, 3, 1, "", "result"], [241, 3, 1, "", "update"]], "neural_compressor.experimental.metric.METRICS": [[241, 6, 1, "", "metrics"], [241, 3, 1, "", "register"]], "neural_compressor.experimental.metric.bleu": [[549, 2, 1, "", "BLEU"], [235, 2, 1, "", "UnicodeRegex"], [235, 1, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[549, 6, 1, "", "labels"], [549, 6, 1, "", "predictions"], [549, 3, 1, "", "reset"], [549, 3, 1, "", "result"], [549, 3, 1, "", "update"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[235, 6, 1, "", "nondigit_punct_re"], [235, 3, 1, "", "property_chars"], [235, 6, 1, "", "punct_nondigit_re"], [235, 6, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[236, 1, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[238, 2, 1, "", "COCOEvalWrapper"], [238, 2, 1, "", "COCOWrapper"], [238, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [238, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [238, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper": [[238, 3, 1, "", "ComputeMetrics"], [238, 3, 1, "", "GetAgnosticMode"], [238, 3, 1, "", "GetCategory"], [238, 3, 1, "", "GetCategoryIdList"], [238, 3, 1, "", "accumulate"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[238, 3, 1, "", "LoadAnnotations"], [238, 6, 1, "", "dataset"], [238, 6, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[239, 1, 1, "", "evaluate"], [239, 1, 1, "", "exact_match_score"], [239, 1, 1, "", "f1_score"], [239, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[240, 1, 1, "", "evaluate"], [240, 1, 1, "", "f1_score"], [240, 1, 1, "", "metric_max_over_ground_truths"], [240, 1, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[242, 2, 1, "", "Accuracy"], [242, 2, 1, "", "BaseMetric"], [242, 2, 1, "", "COCOmAPv2"], [242, 2, 1, "", "F1"], [242, 2, 1, "", "GeneralTopK"], [242, 2, 1, "", "Loss"], [242, 2, 1, "", "MAE"], [242, 2, 1, "", "METRICS"], [242, 2, 1, "", "MSE"], [242, 2, 1, "", "MXNetMetrics"], [242, 2, 1, "", "ONNXRTGLUE"], [242, 2, 1, "", "ONNXRTITMetrics"], [242, 2, 1, "", "ONNXRTQLMetrics"], [242, 2, 1, "", "PyTorchLoss"], [242, 2, 1, "", "PyTorchMetrics"], [242, 2, 1, "", "RMSE"], [242, 2, 1, "", "ROC"], [242, 2, 1, "", "SquadF1"], [242, 2, 1, "", "TensorflowCOCOMAP"], [242, 2, 1, "", "TensorflowMAP"], [242, 2, 1, "", "TensorflowMetrics"], [242, 2, 1, "", "TensorflowTopK"], [242, 2, 1, "", "TensorflowVOCMAP"], [242, 2, 1, "", "WrapMXNetMetric"], [242, 2, 1, "", "WrapONNXRTMetric"], [242, 2, 1, "", "WrapPyTorchMetric"], [242, 2, 1, "", "mIOU"], [242, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[242, 6, 1, "", "label_list"], [242, 6, 1, "", "pred_list"], [242, 3, 1, "", "reset"], [242, 3, 1, "", "result"], [242, 6, 1, "", "sample"], [242, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.BaseMetric": [[242, 4, 1, "", "hvd"], [242, 4, 1, "", "metric"], [242, 3, 1, "", "reset"], [242, 3, 1, "", "result"], [242, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.COCOmAPv2": [[242, 3, 1, "", "reset"], [242, 3, 1, "", "result"], [242, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.F1": [[242, 3, 1, "", "reset"], [242, 3, 1, "", "result"], [242, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[242, 6, 1, "", "k"], [242, 6, 1, "", "num_correct"], [242, 6, 1, "", "num_sample"], [242, 3, 1, "", "reset"], [242, 3, 1, "", "result"], [242, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.Loss": [[242, 3, 1, "", "reset"], [242, 3, 1, "", "result"], [242, 6, 1, "", "sample"], [242, 6, 1, "", "sum"], [242, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MAE": [[242, 6, 1, "", "compare_label"], [242, 6, 1, "", "label_list"], [242, 6, 1, "", "pred_list"], [242, 3, 1, "", "reset"], [242, 3, 1, "", "result"], [242, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.METRICS": [[242, 6, 1, "", "metrics"], [242, 3, 1, "", "register"]], "neural_compressor.experimental.metric.metric.MSE": [[242, 6, 1, "", "compare_label"], [242, 6, 1, "", "label_list"], [242, 6, 1, "", "pred_list"], [242, 3, 1, "", "reset"], [242, 3, 1, "", "result"], [242, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[242, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTGLUE": [[242, 3, 1, "", "reset"], [242, 3, 1, "", "result"], [242, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[242, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[242, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchLoss": [[242, 3, 1, "", "compute"], [242, 3, 1, "", "reset"], [242, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[242, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[242, 6, 1, "", "mse"], [242, 3, 1, "", "reset"], [242, 3, 1, "", "result"], [242, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ROC": [[242, 3, 1, "", "reset"], [242, 3, 1, "", "result"], [242, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.SquadF1": [[242, 3, 1, "", "reset"], [242, 3, 1, "", "result"], [242, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMAP": [[242, 3, 1, "", "reset"], [242, 3, 1, "", "result"], [242, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[242, 6, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[242, 6, 1, "", "k"], [242, 6, 1, "", "num_correct"], [242, 6, 1, "", "num_sample"], [242, 3, 1, "", "reset"], [242, 3, 1, "", "result"], [242, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapMXNetMetric": [[242, 3, 1, "", "reset"], [242, 3, 1, "", "result"], [242, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapONNXRTMetric": [[242, 3, 1, "", "reset"], [242, 3, 1, "", "result"], [242, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapPyTorchMetric": [[242, 3, 1, "", "reset"], [242, 3, 1, "", "result"], [242, 3, 1, "", "update"]], "neural_compressor.experimental.metric.metric.mIOU": [[242, 3, 1, "", "reset"], [242, 3, 1, "", "result"], [242, 3, 1, "", "update"]], "neural_compressor.experimental.mixed_precision": [[243, 2, 1, "", "MixedPrecision"]], "neural_compressor.experimental.mixed_precision.MixedPrecision": [[243, 4, 1, "", "precisions"], [243, 3, 1, "", "set_config_by_model"]], "neural_compressor.experimental.model_conversion": [[244, 2, 1, "", "ModelConversion"]], "neural_compressor.experimental.model_conversion.ModelConversion": [[244, 3, 1, "", "dataset"], [244, 4, 1, "", "destination"], [244, 4, 1, "", "eval_dataloader"], [244, 4, 1, "", "eval_func"], [244, 4, 1, "", "metric"], [244, 4, 1, "", "model"], [244, 4, 1, "", "postprocess"], [244, 4, 1, "", "source"]], "neural_compressor.experimental.nas": [[257, 2, 1, "", "BasicNAS"], [257, 2, 1, "", "DyNAS"], [257, 2, 1, "", "NAS"], [245, 0, 0, "-", "basic_nas"], [246, 0, 0, "-", "dynas"], [251, 0, 0, "-", "dynast"], [258, 0, 0, "-", "nas"], [259, 0, 0, "-", "nas_utils"], [260, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.BasicNAS": [[257, 3, 1, "", "estimate"], [257, 3, 1, "", "execute"], [257, 3, 1, "", "init_by_cfg"], [257, 3, 1, "", "pre_process"]], "neural_compressor.experimental.nas.DyNAS": [[257, 3, 1, "", "create_acc_predictor"], [257, 3, 1, "", "create_latency_predictor"], [257, 3, 1, "", "create_macs_predictor"], [257, 3, 1, "", "estimate"], [257, 3, 1, "", "init_cfg"], [257, 3, 1, "", "init_for_search"], [257, 3, 1, "", "search"], [257, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.basic_nas": [[245, 2, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.basic_nas.BasicNAS": [[245, 3, 1, "", "estimate"], [245, 3, 1, "", "execute"], [245, 3, 1, "", "init_by_cfg"], [245, 3, 1, "", "pre_process"]], "neural_compressor.experimental.nas.dynas": [[246, 2, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.dynas.DyNAS": [[246, 3, 1, "", "create_acc_predictor"], [246, 3, 1, "", "create_latency_predictor"], [246, 3, 1, "", "create_macs_predictor"], [246, 3, 1, "", "estimate"], [246, 3, 1, "", "init_cfg"], [246, 3, 1, "", "init_for_search"], [246, 3, 1, "", "search"], [246, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.dynast": [[247, 0, 0, "-", "dynas_manager"], [248, 0, 0, "-", "dynas_predictor"], [249, 0, 0, "-", "dynas_search"], [250, 0, 0, "-", "dynas_utils"], [252, 0, 0, "-", "supernetwork"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[247, 2, 1, "", "ParameterManager"], [247, 2, 1, "", "TransformerLTEncoding"]], "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager": [[247, 3, 1, "", "create_training_set"], [247, 3, 1, "", "import_csv"], [247, 3, 1, "", "onehot_generic"], [247, 3, 1, "", "process_param_dict"], [247, 3, 1, "", "random_sample"], [247, 3, 1, "", "random_samples"], [247, 3, 1, "", "set_seed"], [247, 3, 1, "", "translate2param"], [247, 3, 1, "", "translate2pymoo"]], "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding": [[247, 3, 1, "", "create_training_set"], [247, 3, 1, "", "import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[248, 2, 1, "", "Predictor"]], "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor": [[248, 3, 1, "", "get_metrics"], [248, 3, 1, "", "get_parameters"], [248, 3, 1, "", "load"], [248, 3, 1, "", "predict"], [248, 3, 1, "", "save"], [248, 3, 1, "", "train"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[249, 2, 1, "", "ProblemMultiObjective"], [249, 2, 1, "", "SearchAlgoManager"]], "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager": [[249, 3, 1, "", "configure_age"], [249, 3, 1, "", "configure_nsga2"], [249, 3, 1, "", "run_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[250, 2, 1, "", "EvaluationInterface"], [250, 2, 1, "", "EvaluationInterfaceMobileNetV3"], [250, 2, 1, "", "EvaluationInterfaceResNet50"], [250, 2, 1, "", "EvaluationInterfaceTransformerLT"], [250, 2, 1, "", "OFARunner"], [250, 2, 1, "", "Runner"], [250, 2, 1, "", "TorchVisionReference"], [250, 2, 1, "", "TransformerLTRunner"], [250, 1, 1, "", "get_macs"], [250, 1, 1, "", "get_torchvision_model"], [250, 1, 1, "", "measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface": [[250, 3, 1, "", "clear_csv"], [250, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3": [[250, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50": [[250, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT": [[250, 3, 1, "", "clear_csv"], [250, 3, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner": [[250, 3, 1, "", "estimate_accuracy_top1"], [250, 3, 1, "", "estimate_latency"], [250, 3, 1, "", "estimate_macs"], [250, 3, 1, "", "get_subnet"], [250, 3, 1, "", "measure_latency"], [250, 3, 1, "", "validate_macs"], [250, 3, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference": [[250, 3, 1, "", "measure_latency"], [250, 3, 1, "", "validate_macs"], [250, 3, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner": [[250, 3, 1, "", "measure_latency"], [250, 3, 1, "", "validate_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[253, 0, 0, "-", "machine_translation"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[254, 0, 0, "-", "modules_supernetwork"], [255, 0, 0, "-", "transformer_interface"], [256, 0, 0, "-", "transformer_supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[254, 2, 1, "", "MultiheadAttentionSuper"], [254, 1, 1, "", "get_incremental_state"], [254, 1, 1, "", "set_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper": [[254, 3, 1, "", "forward"], [254, 3, 1, "", "reorder_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[255, 1, 1, "", "compute_bleu"], [255, 1, 1, "", "compute_latency"], [255, 1, 1, "", "compute_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[256, 2, 1, "", "TransformerDecoder"], [256, 2, 1, "", "TransformerDecoderLayer"], [256, 2, 1, "", "TransformerEncoder"], [256, 2, 1, "", "TransformerEncoderLayer"], [256, 2, 1, "", "TransformerSuperNetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder": [[256, 3, 1, "", "extract_features"], [256, 3, 1, "", "forward"], [256, 3, 1, "", "max_positions"], [256, 3, 1, "", "output_layer"], [256, 3, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer": [[256, 3, 1, "", "forward"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder": [[256, 3, 1, "", "forward"], [256, 3, 1, "", "max_positions"], [256, 3, 1, "", "reorder_encoder_out"], [256, 3, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer": [[256, 3, 1, "", "forward"], [256, 3, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.nas": [[258, 2, 1, "", "NAS"], [258, 2, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas.NASBase": [[258, 3, 1, "", "count_model_parameters"], [258, 3, 1, "", "dump_search_results"], [258, 3, 1, "", "estimate"], [258, 3, 1, "", "find_best_model_archs"], [258, 3, 1, "", "init_search_cfg"], [258, 3, 1, "", "load_search_results"], [258, 3, 1, "", "metrics_conversion"], [258, 4, 1, "", "model_builder"], [258, 3, 1, "", "params_vec2params_dict"], [258, 3, 1, "", "search"], [258, 4, 1, "", "search_algorithm"], [258, 4, 1, "", "search_space"], [258, 3, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.nas_utils": [[259, 1, 1, "", "create_search_space_pool"], [259, 1, 1, "", "find_pareto_front"], [259, 1, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[260, 2, 1, "", "BayesianOptimizationSearcher"], [260, 2, 1, "", "GridSearcher"], [260, 2, 1, "", "RandomSearcher"], [260, 2, 1, "", "Searcher"]], "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher": [[260, 3, 1, "", "get_feedback"], [260, 3, 1, "", "indices2params_vec"], [260, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.GridSearcher": [[260, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.RandomSearcher": [[260, 3, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.Searcher": [[260, 3, 1, "", "get_feedback"], [260, 3, 1, "", "params_vec2params_dict"], [260, 3, 1, "", "suggest"]], "neural_compressor.experimental.pruning": [[261, 2, 1, "", "Pruning"], [261, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[261, 6, 1, "", "conf"], [261, 4, 1, "", "evaluation_distributed"], [261, 3, 1, "", "execute"], [261, 3, 1, "", "generate_hooks"], [261, 3, 1, "", "generate_pruners"], [261, 3, 1, "", "get_sparsity_ratio"], [261, 3, 1, "", "pre_process"], [261, 3, 1, "", "prepare"], [261, 6, 1, "", "pruners"], [261, 4, 1, "", "pruning_func"], [261, 4, 1, "", "train_distributed"], [261, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pruning.TfPruningCallback": [[261, 3, 1, "", "on_after_compute_loss"], [261, 3, 1, "", "on_batch_begin"], [261, 3, 1, "", "on_batch_end"], [261, 3, 1, "", "on_epoch_begin"], [261, 3, 1, "", "on_epoch_end"], [261, 3, 1, "", "on_step_begin"], [261, 3, 1, "", "on_step_end"], [261, 3, 1, "", "on_train_begin"], [261, 3, 1, "", "on_train_end"], [261, 3, 1, "", "post_epoch_end"], [261, 3, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pruning_recipes": [[262, 2, 1, "", "PATTERNS"], [263, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.PATTERNS": [[262, 6, 1, "", "patterns"], [262, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns": [[263, 2, 1, "", "PATTERNS"], [264, 0, 0, "-", "pattern"], [265, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS": [[263, 6, 1, "", "patterns"], [263, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[264, 2, 1, "", "PATTERNS"], [264, 2, 1, "", "PatternBase"], [264, 1, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[264, 6, 1, "", "patterns"], [264, 3, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase": [[264, 3, 1, "", "compute_sparsity"], [264, 3, 1, "", "reduce"], [264, 3, 1, "", "reshape"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[265, 2, 1, "", "TilePatternBase"], [265, 2, 1, "", "TilePattern_1x1"], [265, 2, 1, "", "TilePattern_1x16"], [265, 2, 1, "", "TilePattern_1x2"], [265, 2, 1, "", "TilePattern_2x2"], [265, 2, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase": [[265, 3, 1, "", "compute_sparsity"], [265, 3, 1, "", "repeat_mask"]], "neural_compressor.experimental.pruning_v2": [[266, 2, 1, "", "Pruning"], [266, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[266, 6, 1, "", "conf"], [266, 4, 1, "", "evaluation_distributed"], [266, 3, 1, "", "execute"], [266, 3, 1, "", "generate_hooks"], [266, 3, 1, "", "get_sparsity_ratio"], [266, 3, 1, "", "pre_process"], [266, 3, 1, "", "prepare"], [266, 6, 1, "", "pruners"], [266, 4, 1, "", "pruning_func"], [266, 4, 1, "", "train_distributed"], [266, 3, 1, "", "update_config"]], "neural_compressor.experimental.pruning_v2.TfPruningCallback": [[266, 3, 1, "", "on_after_compute_loss"], [266, 3, 1, "", "on_batch_begin"], [266, 3, 1, "", "on_batch_end"], [266, 3, 1, "", "on_epoch_begin"], [266, 3, 1, "", "on_epoch_end"], [266, 3, 1, "", "on_step_begin"], [266, 3, 1, "", "on_step_end"], [266, 3, 1, "", "on_train_begin"], [266, 3, 1, "", "on_train_end"], [266, 3, 1, "", "post_epoch_end"], [266, 3, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pytorch_pruner": [[268, 0, 0, "-", "logger"], [269, 0, 0, "-", "patterns"], [270, 0, 0, "-", "prune_utils"], [271, 0, 0, "-", "pruner"], [272, 0, 0, "-", "pruning"], [273, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[269, 2, 1, "", "Pattern"], [269, 2, 1, "", "PatternNInM"], [269, 2, 1, "", "PatternNxM"], [269, 1, 1, "", "get_pattern"], [269, 1, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[269, 3, 1, "", "get_block_size_dict"], [269, 3, 1, "", "get_mask_single"], [269, 3, 1, "", "get_masks"], [269, 3, 1, "", "get_masks_global"], [269, 3, 1, "", "get_masks_local"], [269, 3, 1, "", "get_pattern_lock_masks"], [269, 3, 1, "", "get_sparsity_ratio"], [269, 6, 1, "", "is_global"], [269, 6, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[269, 6, 1, "", "M"], [269, 6, 1, "", "N"], [269, 3, 1, "", "get_masks_global"], [269, 3, 1, "", "get_pattern_lock_masks"], [269, 3, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[269, 6, 1, "", "block_size"], [269, 3, 1, "", "get_block_size_dict"], [269, 3, 1, "", "get_masks_global"], [269, 3, 1, "", "get_pattern_lock_masks"], [269, 3, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[270, 1, 1, "", "check_config"], [270, 1, 1, "", "parse_not_to_prune"], [270, 1, 1, "", "parse_to_prune"], [270, 1, 1, "", "process_and_check_config"], [270, 1, 1, "", "process_config"], [270, 1, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[271, 2, 1, "", "MagnitudePruner"], [271, 2, 1, "", "PatternLockPruner"], [271, 2, 1, "", "Pruner"], [271, 2, 1, "", "SnipMomentumPruner"], [271, 2, 1, "", "SnipPruner"], [271, 1, 1, "", "get_pruner"], [271, 1, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner": [[271, 3, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner": [[271, 3, 1, "", "on_after_optimizer_step"], [271, 3, 1, "", "on_step_begin"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[271, 3, 1, "", "check_is_pruned_step"], [271, 6, 1, "", "config"], [271, 6, 1, "", "current_sparsity_ratio"], [271, 6, 1, "", "end_step"], [271, 6, 1, "", "global_step"], [271, 3, 1, "", "mask_weights"], [271, 6, 1, "", "masks"], [271, 6, 1, "", "max_sparsity_ratio_per_layer"], [271, 6, 1, "", "modules"], [271, 3, 1, "", "on_after_eval"], [271, 3, 1, "", "on_after_optimizer_step"], [271, 3, 1, "", "on_before_eval"], [271, 3, 1, "", "on_before_optimizer_step"], [271, 3, 1, "", "on_epoch_begin"], [271, 3, 1, "", "on_epoch_end"], [271, 3, 1, "", "on_step_begin"], [271, 3, 1, "", "on_step_end"], [271, 3, 1, "", "on_train_begin"], [271, 3, 1, "", "on_train_end"], [271, 6, 1, "", "pattern"], [271, 6, 1, "", "scheduler"], [271, 6, 1, "", "scores"], [271, 6, 1, "", "start_step"], [271, 6, 1, "", "target_sparsity_ratio"], [271, 6, 1, "", "update_frequency_on_step"], [271, 3, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner": [[271, 3, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner": [[271, 3, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[272, 2, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[272, 6, 1, "", "config_file_path"], [272, 3, 1, "", "get_sparsity_ratio"], [272, 6, 1, "", "model"], [272, 3, 1, "", "on_after_eval"], [272, 3, 1, "", "on_after_optimizer_step"], [272, 3, 1, "", "on_before_eval"], [272, 3, 1, "", "on_before_optimizer_step"], [272, 3, 1, "", "on_epoch_begin"], [272, 3, 1, "", "on_epoch_end"], [272, 3, 1, "", "on_step_begin"], [272, 3, 1, "", "on_step_end"], [272, 3, 1, "", "on_train_begin"], [272, 3, 1, "", "on_train_end"], [272, 3, 1, "", "prepare"], [272, 6, 1, "", "pruner_info"], [272, 6, 1, "", "pruners"], [272, 3, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[273, 2, 1, "", "IterativeScheduler"], [273, 2, 1, "", "OneshotScheduler"], [273, 2, 1, "", "Scheduler"], [273, 1, 1, "", "get_scheduler"], [273, 1, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler": [[273, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler": [[273, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[273, 6, 1, "", "config"], [273, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.quantization": [[274, 2, 1, "", "Quantization"]], "neural_compressor.experimental.quantization.Quantization": [[274, 4, 1, "", "calib_dataloader"], [274, 3, 1, "", "dataset"], [274, 3, 1, "", "distributed_execute"], [274, 3, 1, "", "execute"], [274, 4, 1, "", "metric"], [274, 4, 1, "", "model"], [274, 4, 1, "", "objective"], [274, 4, 1, "", "postprocess"], [274, 3, 1, "", "pre_process"], [274, 4, 1, "", "q_func"]], "neural_compressor.experimental.scheduler": [[275, 2, 1, "", "Scheduler"]], "neural_compressor.experimental.scheduler.Scheduler": [[275, 3, 1, "", "append"], [275, 3, 1, "", "combine"], [275, 4, 1, "", "eval_func"], [275, 4, 1, "", "model"], [275, 4, 1, "", "train_func"]], "neural_compressor.metric": [[283, 2, 1, "", "BaseMetric"], [283, 2, 1, "", "COCOmAPv2"], [283, 2, 1, "", "GeneralTopK"], [283, 2, 1, "", "METRICS"], [283, 2, 1, "", "Metric"], [283, 2, 1, "", "SquadF1"], [283, 2, 1, "", "TensorflowTopK"], [277, 0, 0, "-", "bleu"], [278, 0, 0, "-", "bleu_util"], [279, 0, 0, "-", "coco_label_map"], [280, 0, 0, "-", "coco_tools"], [281, 0, 0, "-", "evaluate_squad"], [282, 0, 0, "-", "f1"], [284, 0, 0, "-", "metric"], [283, 1, 1, "", "metric_registry"]], "neural_compressor.metric.BaseMetric": [[283, 4, 1, "", "hvd"], [283, 4, 1, "", "metric"], [283, 3, 1, "", "reset"], [283, 3, 1, "", "result"], [283, 3, 1, "", "update"]], "neural_compressor.metric.COCOmAPv2": [[283, 3, 1, "", "reset"], [283, 3, 1, "", "result"], [283, 3, 1, "", "update"]], "neural_compressor.metric.GeneralTopK": [[283, 6, 1, "", "k"], [283, 6, 1, "", "num_correct"], [283, 6, 1, "", "num_sample"], [283, 3, 1, "", "reset"], [283, 3, 1, "", "result"], [283, 3, 1, "", "update"]], "neural_compressor.metric.METRICS": [[283, 6, 1, "", "metrics"], [283, 3, 1, "", "register"]], "neural_compressor.metric.SquadF1": [[283, 3, 1, "", "reset"], [283, 3, 1, "", "result"], [283, 3, 1, "", "update"]], "neural_compressor.metric.TensorflowTopK": [[283, 6, 1, "", "k"], [283, 6, 1, "", "num_correct"], [283, 6, 1, "", "num_sample"], [283, 3, 1, "", "reset"], [283, 3, 1, "", "result"], [283, 3, 1, "", "update"]], "neural_compressor.metric.bleu": [[277, 2, 1, "", "BLEU"], [277, 2, 1, "", "UnicodeRegex"], [277, 1, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[277, 6, 1, "", "labels"], [277, 6, 1, "", "predictions"], [277, 3, 1, "", "reset"], [277, 3, 1, "", "result"], [277, 3, 1, "", "update"]], "neural_compressor.metric.bleu.UnicodeRegex": [[277, 6, 1, "", "nondigit_punct_re"], [277, 3, 1, "", "property_chars"], [277, 6, 1, "", "punct_nondigit_re"], [277, 6, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[278, 1, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[280, 2, 1, "", "COCOEvalWrapper"], [280, 2, 1, "", "COCOWrapper"], [280, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [280, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [280, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOEvalWrapper": [[280, 3, 1, "", "ComputeMetrics"], [280, 3, 1, "", "GetAgnosticMode"], [280, 3, 1, "", "GetCategory"], [280, 3, 1, "", "GetCategoryIdList"], [280, 3, 1, "", "accumulate"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[280, 3, 1, "", "LoadAnnotations"], [280, 6, 1, "", "dataset"], [280, 6, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[281, 1, 1, "", "evaluate"], [281, 1, 1, "", "exact_match_score"], [281, 1, 1, "", "f1_score"], [281, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[282, 1, 1, "", "evaluate"], [282, 1, 1, "", "f1_score"], [282, 1, 1, "", "metric_max_over_ground_truths"], [282, 1, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[284, 2, 1, "", "Accuracy"], [284, 2, 1, "", "BaseMetric"], [284, 2, 1, "", "COCOmAPv2"], [284, 2, 1, "", "F1"], [284, 2, 1, "", "GeneralTopK"], [284, 2, 1, "", "Loss"], [284, 2, 1, "", "MAE"], [284, 2, 1, "", "METRICS"], [284, 2, 1, "", "MSE"], [284, 2, 1, "", "MXNetMetrics"], [284, 2, 1, "", "Metric"], [284, 2, 1, "", "ONNXRTGLUE"], [284, 2, 1, "", "ONNXRTITMetrics"], [284, 2, 1, "", "ONNXRTQLMetrics"], [284, 2, 1, "", "PyTorchLoss"], [284, 2, 1, "", "PyTorchMetrics"], [284, 2, 1, "", "RMSE"], [284, 2, 1, "", "ROC"], [284, 2, 1, "", "SquadF1"], [284, 2, 1, "", "TensorflowCOCOMAP"], [284, 2, 1, "", "TensorflowMAP"], [284, 2, 1, "", "TensorflowMetrics"], [284, 2, 1, "", "TensorflowTopK"], [284, 2, 1, "", "TensorflowVOCMAP"], [284, 2, 1, "", "WrapMXNetMetric"], [284, 2, 1, "", "WrapONNXRTMetric"], [284, 2, 1, "", "WrapPyTorchMetric"], [284, 2, 1, "", "mIOU"], [284, 1, 1, "", "metric_registry"]], "neural_compressor.metric.metric.Accuracy": [[284, 6, 1, "", "label_list"], [284, 6, 1, "", "pred_list"], [284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 6, 1, "", "sample"], [284, 3, 1, "", "update"]], "neural_compressor.metric.metric.BaseMetric": [[284, 4, 1, "", "hvd"], [284, 4, 1, "", "metric"], [284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.metric.metric.COCOmAPv2": [[284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.metric.metric.F1": [[284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.metric.metric.GeneralTopK": [[284, 6, 1, "", "k"], [284, 6, 1, "", "num_correct"], [284, 6, 1, "", "num_sample"], [284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.metric.metric.Loss": [[284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 6, 1, "", "sample"], [284, 6, 1, "", "sum"], [284, 3, 1, "", "update"]], "neural_compressor.metric.metric.MAE": [[284, 6, 1, "", "compare_label"], [284, 6, 1, "", "label_list"], [284, 6, 1, "", "pred_list"], [284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.metric.metric.METRICS": [[284, 6, 1, "", "metrics"], [284, 3, 1, "", "register"]], "neural_compressor.metric.metric.MSE": [[284, 6, 1, "", "compare_label"], [284, 6, 1, "", "label_list"], [284, 6, 1, "", "pred_list"], [284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.metric.metric.MXNetMetrics": [[284, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTGLUE": [[284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[284, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[284, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchLoss": [[284, 3, 1, "", "compute"], [284, 3, 1, "", "reset"], [284, 3, 1, "", "update"]], "neural_compressor.metric.metric.PyTorchMetrics": [[284, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[284, 6, 1, "", "mse"], [284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.metric.metric.ROC": [[284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.metric.metric.SquadF1": [[284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.metric.metric.TensorflowMAP": [[284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.metric.metric.TensorflowMetrics": [[284, 6, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[284, 6, 1, "", "k"], [284, 6, 1, "", "num_correct"], [284, 6, 1, "", "num_sample"], [284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapMXNetMetric": [[284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapONNXRTMetric": [[284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.metric.metric.WrapPyTorchMetric": [[284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.metric.metric.mIOU": [[284, 3, 1, "", "reset"], [284, 3, 1, "", "result"], [284, 3, 1, "", "update"]], "neural_compressor.mix_precision": [[285, 1, 1, "", "fit"]], "neural_compressor.model": [[287, 2, 1, "", "BaseModel"], [287, 2, 1, "", "Model"], [286, 0, 0, "-", "base_model"], [288, 0, 0, "-", "keras_model"], [289, 0, 0, "-", "model"], [290, 0, 0, "-", "mxnet_model"], [291, 0, 0, "-", "nets_factory"], [292, 0, 0, "-", "onnx_model"], [293, 0, 0, "-", "tensorflow_model"], [294, 0, 0, "-", "torch_model"]], "neural_compressor.model.BaseModel": [[287, 3, 1, "", "export"], [287, 3, 1, "", "framework"], [287, 4, 1, "", "graph_info"], [287, 4, 1, "", "model"], [287, 3, 1, "", "save"]], "neural_compressor.model.base_model": [[286, 2, 1, "", "BaseModel"]], "neural_compressor.model.base_model.BaseModel": [[286, 3, 1, "", "export"], [286, 3, 1, "", "framework"], [286, 4, 1, "", "graph_info"], [286, 4, 1, "", "model"], [286, 3, 1, "", "save"]], "neural_compressor.model.keras_model": [[288, 2, 1, "", "KerasModel"]], "neural_compressor.model.keras_model.KerasModel": [[288, 3, 1, "", "framework"], [288, 4, 1, "", "graph_info"], [288, 4, 1, "", "model"], [288, 4, 1, "", "q_config"], [288, 3, 1, "", "save"]], "neural_compressor.model.model": [[289, 2, 1, "", "Model"], [289, 1, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[290, 2, 1, "", "MXNetModel"]], "neural_compressor.model.mxnet_model.MXNetModel": [[290, 3, 1, "", "framework"], [290, 4, 1, "", "model"], [290, 3, 1, "", "save"]], "neural_compressor.model.nets_factory": [[291, 2, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.nets_factory.TFSlimNetsFactory": [[291, 3, 1, "", "register"]], "neural_compressor.model.onnx_model": [[292, 2, 1, "", "ONNXModel"]], "neural_compressor.model.onnx_model.ONNXModel": [[292, 3, 1, "", "add_initializer"], [292, 3, 1, "", "add_initializers"], [292, 3, 1, "", "add_node"], [292, 3, 1, "", "add_nodes"], [292, 3, 1, "", "add_tensors_to_outputs"], [292, 3, 1, "", "export"], [292, 3, 1, "", "find_node_by_name"], [292, 3, 1, "", "find_nodes_by_initializer"], [292, 3, 1, "", "framework"], [292, 3, 1, "", "get_children"], [292, 3, 1, "", "get_initializer"], [292, 3, 1, "", "get_nodes_chain"], [292, 3, 1, "", "get_parent"], [292, 3, 1, "", "get_parents"], [292, 3, 1, "", "get_scale_zero"], [292, 3, 1, "", "graph"], [292, 4, 1, "", "graph_info"], [292, 3, 1, "", "initializer"], [292, 3, 1, "", "input"], [292, 4, 1, "", "input_name_to_nodes"], [292, 3, 1, "", "ir_version"], [292, 4, 1, "", "is_large_model"], [292, 3, 1, "", "match_first_parent"], [292, 3, 1, "", "match_parent"], [292, 3, 1, "", "match_parent_path"], [292, 4, 1, "", "model"], [292, 4, 1, "", "model_path"], [292, 3, 1, "", "nodes"], [292, 3, 1, "", "opset_import"], [292, 3, 1, "", "output"], [292, 4, 1, "", "output_name_to_node"], [292, 4, 1, "", "q_config"], [292, 3, 1, "", "remove_initializer"], [292, 3, 1, "", "remove_initializers"], [292, 3, 1, "", "remove_node"], [292, 3, 1, "", "remove_nodes"], [292, 3, 1, "", "remove_tensors_from_outputs"], [292, 3, 1, "", "remove_unused_constant"], [292, 3, 1, "", "replace_input_of_all_nodes"], [292, 3, 1, "", "replace_node_input"], [292, 3, 1, "", "replace_node_output"], [292, 3, 1, "", "replace_output_of_all_nodes"], [292, 3, 1, "", "save"], [292, 3, 1, "", "save_model_to_file"], [292, 3, 1, "", "set_initializer"], [292, 3, 1, "", "topological_sort"], [292, 3, 1, "", "update"]], "neural_compressor.model.tensorflow_model": [[293, 2, 1, "", "TensorflowBaseModel"], [293, 2, 1, "", "TensorflowCheckpointModel"], [293, 2, 1, "", "TensorflowModel"], [293, 2, 1, "", "TensorflowQATModel"], [293, 2, 1, "", "TensorflowSavedModelModel"], [293, 1, 1, "", "checkpoint_session"], [293, 1, 1, "", "estimator_session"], [293, 1, 1, "", "frozen_pb_session"], [293, 1, 1, "", "get_model_type"], [293, 1, 1, "", "graph_def_session"], [293, 1, 1, "", "graph_session"], [293, 1, 1, "", "keras_session"], [293, 1, 1, "", "load_saved_model"], [293, 1, 1, "", "saved_model_session"], [293, 1, 1, "", "slim_session"], [293, 1, 1, "", "validate_and_inference_input_output"], [293, 1, 1, "", "validate_graph_node"]], "neural_compressor.model.tensorflow_model.TensorflowBaseModel": [[293, 3, 1, "", "export"], [293, 3, 1, "", "framework"], [293, 4, 1, "", "graph"], [293, 4, 1, "", "graph_def"], [293, 4, 1, "", "graph_info"], [293, 4, 1, "", "input_node_names"], [293, 4, 1, "", "input_tensor"], [293, 4, 1, "", "input_tensor_names"], [293, 4, 1, "", "iter_op"], [293, 4, 1, "", "model"], [293, 4, 1, "", "model_type"], [293, 4, 1, "", "name"], [293, 4, 1, "", "output_node_names"], [293, 4, 1, "", "output_tensor"], [293, 4, 1, "", "output_tensor_names"], [293, 4, 1, "", "q_config"], [293, 3, 1, "", "save"], [293, 4, 1, "", "sess"], [293, 4, 1, "", "weights"], [293, 4, 1, "", "workspace_path"]], "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel": [[293, 4, 1, "", "graph_def"], [293, 4, 1, "", "model"]], "neural_compressor.model.tensorflow_model.TensorflowQATModel": [[293, 4, 1, "", "frozen_graph_def"], [293, 4, 1, "", "model"], [293, 3, 1, "", "save"]], "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel": [[293, 3, 1, "", "build_saved_model"], [293, 3, 1, "", "get_all_weight_names"], [293, 3, 1, "", "get_weight"], [293, 4, 1, "", "model"], [293, 3, 1, "", "report_sparsity"], [293, 3, 1, "", "save"], [293, 3, 1, "", "update_weights"]], "neural_compressor.model.torch_model": [[294, 2, 1, "", "IPEXModel"], [294, 2, 1, "", "PyTorchBaseModel"], [294, 2, 1, "", "PyTorchFXModel"], [294, 2, 1, "", "PyTorchModel"]], "neural_compressor.model.torch_model.IPEXModel": [[294, 3, 1, "", "save"], [294, 4, 1, "", "workspace_path"]], "neural_compressor.model.torch_model.PyTorchBaseModel": [[294, 3, 1, "", "forward"], [294, 4, 1, "", "fp32_model"], [294, 3, 1, "", "framework"], [294, 3, 1, "", "generate_forward_pre_hook"], [294, 3, 1, "", "get_all_weight_names"], [294, 3, 1, "", "get_gradient"], [294, 3, 1, "", "get_inputs"], [294, 3, 1, "", "get_weight"], [294, 4, 1, "", "model"], [294, 3, 1, "", "prune_weights_"], [294, 3, 1, "", "register_forward_pre_hook"], [294, 3, 1, "", "remove_hooks"], [294, 3, 1, "", "report_sparsity"], [294, 3, 1, "", "update_gradient"], [294, 3, 1, "", "update_weights"]], "neural_compressor.model.torch_model.PyTorchModel": [[294, 3, 1, "", "export"], [294, 3, 1, "", "export_to_bf16_onnx"], [294, 3, 1, "", "export_to_fp32_onnx"], [294, 3, 1, "", "export_to_int8_onnx"], [294, 3, 1, "", "export_to_jit"], [294, 4, 1, "", "graph_info"], [294, 3, 1, "", "load_quantized_state_dict"], [294, 3, 1, "", "quantized_state_dict"], [294, 3, 1, "", "save"], [294, 4, 1, "", "workspace_path"]], "neural_compressor.objective": [[295, 2, 1, "", "Accuracy"], [295, 2, 1, "", "Footprint"], [295, 2, 1, "", "ModelSize"], [295, 2, 1, "", "MultiObjective"], [295, 2, 1, "", "Objective"], [295, 2, 1, "", "Performance"], [295, 1, 1, "", "objective_custom_registry"], [295, 1, 1, "", "objective_registry"]], "neural_compressor.objective.Accuracy": [[295, 3, 1, "", "end"], [295, 3, 1, "", "start"]], "neural_compressor.objective.Footprint": [[295, 3, 1, "", "end"], [295, 3, 1, "", "start"]], "neural_compressor.objective.ModelSize": [[295, 3, 1, "", "end"], [295, 3, 1, "", "start"]], "neural_compressor.objective.MultiObjective": [[295, 3, 1, "", "accuracy_meet_req"], [295, 3, 1, "", "accuracy_meets"], [295, 4, 1, "", "accuracy_target"], [295, 4, 1, "", "baseline"], [295, 3, 1, "", "best_result"], [295, 3, 1, "", "compare"], [295, 3, 1, "", "end"], [295, 3, 1, "", "evaluate"], [295, 3, 1, "", "reset"], [295, 3, 1, "", "result"], [295, 3, 1, "", "set_model"], [295, 3, 1, "", "start"]], "neural_compressor.objective.Objective": [[295, 3, 1, "", "end"], [295, 4, 1, "", "model"], [295, 3, 1, "", "reset"], [295, 3, 1, "", "result"], [295, 3, 1, "", "result_list"], [295, 3, 1, "", "start"]], "neural_compressor.objective.Performance": [[295, 3, 1, "", "end"], [295, 3, 1, "", "start"]], "neural_compressor.pruner": [[296, 0, 0, "-", "criteria"], [298, 0, 0, "-", "logger"], [299, 0, 0, "-", "patterns"], [302, 0, 0, "-", "pruner_legacy"], [306, 0, 0, "-", "pruners"], [307, 0, 0, "-", "pruning"], [308, 0, 0, "-", "regs"], [309, 0, 0, "-", "schedulers"], [310, 0, 0, "-", "utils"]], "neural_compressor.pruner.criteria": [[296, 2, 1, "", "GradientCriterion"], [296, 2, 1, "", "MagnitudeCriterion"], [296, 2, 1, "", "PruningCriterion"], [296, 2, 1, "", "SnipCriterion"], [296, 2, 1, "", "SnipMomentumCriterion"], [296, 1, 1, "", "get_criterion"], [296, 1, 1, "", "register_criterion"]], "neural_compressor.pruner.criteria.GradientCriterion": [[296, 3, 1, "", "on_before_optimizer_step"], [296, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.MagnitudeCriterion": [[296, 3, 1, "", "on_step_begin"], [296, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.PruningCriterion": [[296, 3, 1, "", "on_after_optimizer_step"], [296, 3, 1, "", "on_before_optimizer_step"], [296, 3, 1, "", "on_step_begin"], [296, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.SnipCriterion": [[296, 3, 1, "", "on_before_optimizer_step"], [296, 6, 1, "", "scores"]], "neural_compressor.pruner.criteria.SnipMomentumCriterion": [[296, 3, 1, "", "on_before_optimizer_step"], [296, 6, 1, "", "scores"]], "neural_compressor.pruner.patterns": [[299, 2, 1, "", "BasePattern"], [299, 2, 1, "", "PatternNInM"], [299, 2, 1, "", "PatternNxM"], [299, 1, 1, "", "get_pattern"], [299, 1, 1, "", "register_pattern"]], "neural_compressor.pruner.patterns.BasePattern": [[299, 3, 1, "", "adjust_ratio"], [299, 3, 1, "", "check_layer_validity"], [299, 6, 1, "", "config"], [299, 3, 1, "", "get_block_size_dict"], [299, 3, 1, "", "get_masks"], [299, 3, 1, "", "get_masks_global"], [299, 3, 1, "", "get_masks_local"], [299, 3, 1, "", "get_pattern_lock_masks"], [299, 3, 1, "", "get_reduced_masks_from_data"], [299, 3, 1, "", "get_single_mask_per_target_ratio"], [299, 3, 1, "", "get_sparsity_ratio"], [299, 3, 1, "", "get_sparsity_ratio_each_layer"], [299, 6, 1, "", "invalid_layers"], [299, 6, 1, "", "is_global"], [299, 6, 1, "", "keep_mask_layers"], [299, 6, 1, "", "max_sparsity_ratio_per_op"], [299, 6, 1, "", "min_sparsity_ratio_per_op"], [299, 6, 1, "", "modules"], [299, 6, 1, "", "pattern"], [299, 3, 1, "", "reduce_tensor"], [299, 6, 1, "", "target_sparsity"], [299, 3, 1, "", "update_residual_cnt"]], "neural_compressor.pruner.patterns.PatternNInM": [[299, 6, 1, "", "M"], [299, 6, 1, "", "N"], [299, 3, 1, "", "check_layer_validity"], [299, 3, 1, "", "get_ele_mask_per_threshold"], [299, 3, 1, "", "get_least_ninm_mask_from_data"], [299, 3, 1, "", "get_masks_global"], [299, 3, 1, "", "get_pattern_lock_masks"], [299, 3, 1, "", "get_reduced_masks_from_data"], [299, 3, 1, "", "get_sparsity_ratio"], [299, 3, 1, "", "reduce_scores"], [299, 3, 1, "", "reshape_orig_to_pattern"], [299, 3, 1, "", "reshape_reduced_to_orig"]], "neural_compressor.pruner.patterns.PatternNxM": [[299, 6, 1, "", "block_size"], [299, 3, 1, "", "check_layer_validity"], [299, 3, 1, "", "count_new_masked_cnts"], [299, 3, 1, "", "get_block_size_dict"], [299, 3, 1, "", "get_mask_per_threshold"], [299, 3, 1, "", "get_masks_global"], [299, 3, 1, "", "get_pattern_lock_masks"], [299, 3, 1, "", "get_reduced_masks_from_data"], [299, 3, 1, "", "get_sparsity_ratio"], [299, 3, 1, "", "get_sparsity_ratio_progressive"], [299, 3, 1, "", "reduce_scores"], [299, 3, 1, "", "reshape_orig_to_pattern"], [299, 3, 1, "", "reshape_reduced_to_orig"], [299, 3, 1, "", "update_new_added_masks"], [299, 3, 1, "", "update_progressive_masks"], [299, 3, 1, "", "update_progressive_masks_global"], [299, 3, 1, "", "update_progressive_masks_linear"], [299, 3, 1, "", "update_progressive_masks_local"], [299, 3, 1, "", "update_progressive_masks_scores"]], "neural_compressor.pruner.pruner_legacy": [[300, 0, 0, "-", "gradient_sensitivity"], [301, 0, 0, "-", "group_lasso"], [303, 0, 0, "-", "magnitude"], [304, 0, 0, "-", "pattern_lock"], [305, 0, 0, "-", "pruner"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity": [[300, 2, 1, "", "GradientSensitivityPruner"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner": [[300, 3, 1, "", "compute_mask"], [300, 3, 1, "", "on_epoch_begin"], [300, 3, 1, "", "on_epoch_end"], [300, 3, 1, "", "on_step_begin"], [300, 3, 1, "", "on_step_end"], [300, 3, 1, "", "parse_weight_name"], [300, 3, 1, "", "prune_by_importance"], [300, 3, 1, "", "prune_weight"], [300, 3, 1, "", "update_importance_abs"], [300, 3, 1, "", "update_importance_elementwise"], [300, 3, 1, "", "update_importance_weighted"]], "neural_compressor.pruner.pruner_legacy.group_lasso": [[301, 2, 1, "", "GroupLassoPruner"]], "neural_compressor.pruner.pruner_legacy.group_lasso.GroupLassoPruner": [[301, 3, 1, "", "on_before_optimizer_step"]], "neural_compressor.pruner.pruner_legacy.magnitude": [[303, 2, 1, "", "BasicMagnitudePruner"]], "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner": [[303, 3, 1, "", "compute_mask"], [303, 3, 1, "", "on_epoch_begin"], [303, 3, 1, "", "on_epoch_end"], [303, 3, 1, "", "on_step_begin"], [303, 3, 1, "", "on_step_end"]], "neural_compressor.pruner.pruner_legacy.pattern_lock": [[304, 2, 1, "", "PatternLockPruner"]], "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner": [[304, 3, 1, "", "compute_mask"], [304, 3, 1, "", "on_epoch_begin"], [304, 3, 1, "", "on_epoch_end"], [304, 3, 1, "", "on_step_begin"], [304, 3, 1, "", "on_step_end"], [304, 3, 1, "", "update_weights"]], "neural_compressor.pruner.pruner_legacy.pruner": [[305, 2, 1, "", "Pruner"], [305, 1, 1, "", "pruner_registry"]], "neural_compressor.pruner.pruner_legacy.pruner.Pruner": [[305, 3, 1, "", "on_before_optimizer_step"], [305, 3, 1, "", "on_epoch_begin"], [305, 3, 1, "", "on_epoch_end"], [305, 3, 1, "", "on_step_begin"], [305, 3, 1, "", "on_step_end"], [305, 3, 1, "", "on_train_begin"], [305, 3, 1, "", "on_train_end"], [305, 3, 1, "", "update_sparsity"]], "neural_compressor.pruner.pruners": [[306, 2, 1, "", "BasePruner"], [306, 2, 1, "", "BasicPruner"], [306, 2, 1, "", "PatternLockPruner"], [306, 2, 1, "", "ProgressivePruner"], [306, 1, 1, "", "get_pruner"], [306, 1, 1, "", "parse_valid_pruner_types"], [306, 1, 1, "", "register_pruner"]], "neural_compressor.pruner.pruners.BasePruner": [[306, 3, 1, "", "check_is_pruned_step"], [306, 6, 1, "", "config"], [306, 6, 1, "", "current_sparsity_ratio"], [306, 6, 1, "", "end_step"], [306, 6, 1, "", "global_step"], [306, 3, 1, "", "mask_weights"], [306, 3, 1, "", "mask_weights_general"], [306, 6, 1, "", "masks"], [306, 6, 1, "", "max_sparsity_ratio_per_op"], [306, 6, 1, "", "modules"], [306, 3, 1, "", "on_after_eval"], [306, 3, 1, "", "on_after_optimizer_step"], [306, 3, 1, "", "on_before_eval"], [306, 3, 1, "", "on_before_optimizer_step"], [306, 3, 1, "", "on_epoch_begin"], [306, 3, 1, "", "on_epoch_end"], [306, 3, 1, "", "on_step_begin"], [306, 3, 1, "", "on_step_end"], [306, 3, 1, "", "on_train_begin"], [306, 3, 1, "", "on_train_end"], [306, 6, 1, "", "pattern"], [306, 6, 1, "", "pruning_frequency"], [306, 6, 1, "", "scheduler"], [306, 6, 1, "", "scores"], [306, 6, 1, "", "start_step"], [306, 6, 1, "", "target_sparsity_ratio"], [306, 3, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.BasicPruner": [[306, 6, 1, "", "criterion"], [306, 3, 1, "", "on_after_optimizer_step"], [306, 3, 1, "", "on_before_optimizer_step"], [306, 6, 1, "", "pattern"], [306, 6, 1, "", "reg"], [306, 6, 1, "", "scheduler"], [306, 3, 1, "", "set_global_step"], [306, 3, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.PatternLockPruner": [[306, 3, 1, "", "on_after_optimizer_step"], [306, 3, 1, "", "update_masks"]], "neural_compressor.pruner.pruners.ProgressivePruner": [[306, 3, 1, "", "check_is_pruned_progressive_step"], [306, 3, 1, "", "check_progressive_validity"], [306, 3, 1, "", "on_after_optimizer_step"], [306, 3, 1, "", "on_before_optimizer_step"], [306, 3, 1, "", "on_step_begin"], [306, 3, 1, "", "print_progressive_sparsity"], [306, 3, 1, "", "update_masks_progressive"]], "neural_compressor.pruner.pruning": [[307, 2, 1, "", "Pruning"]], "neural_compressor.pruner.pruning.Pruning": [[307, 6, 1, "", "config_file_path"], [307, 3, 1, "", "get_sparsity_ratio"], [307, 4, 1, "id0", "model"], [307, 3, 1, "", "on_after_eval"], [307, 3, 1, "", "on_after_optimizer_step"], [307, 3, 1, "", "on_before_eval"], [307, 3, 1, "", "on_before_optimizer_step"], [307, 3, 1, "", "on_epoch_begin"], [307, 3, 1, "", "on_epoch_end"], [307, 3, 1, "", "on_step_begin"], [307, 3, 1, "", "on_step_end"], [307, 3, 1, "", "on_train_begin"], [307, 3, 1, "", "on_train_end"], [307, 6, 1, "", "pruner_info"], [307, 6, 1, "", "pruners"], [307, 3, 1, "", "update_config"]], "neural_compressor.pruner.regs": [[308, 2, 1, "", "BaseReg"], [308, 2, 1, "", "GroupLasso"], [308, 1, 1, "", "get_reg"], [308, 1, 1, "", "get_reg_type"], [308, 1, 1, "", "register_reg"]], "neural_compressor.pruner.regs.BaseReg": [[308, 3, 1, "", "on_after_optimizer_step"], [308, 3, 1, "", "on_before_optimizer_step"]], "neural_compressor.pruner.regs.GroupLasso": [[308, 6, 1, "", "alpha"], [308, 3, 1, "", "on_after_optimizer_step"], [308, 3, 1, "", "on_before_optimizer_step"], [308, 6, 1, "", "reg_terms"]], "neural_compressor.pruner.schedulers": [[309, 2, 1, "", "IterativeScheduler"], [309, 2, 1, "", "OneshotScheduler"], [309, 2, 1, "", "PruningScheduler"], [309, 1, 1, "", "get_scheduler"], [309, 1, 1, "", "register_scheduler"]], "neural_compressor.pruner.schedulers.IterativeScheduler": [[309, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.schedulers.OneshotScheduler": [[309, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.schedulers.PruningScheduler": [[309, 6, 1, "", "config"], [309, 3, 1, "", "update_sparsity_ratio"]], "neural_compressor.pruner.utils": [[310, 1, 1, "", "check_config"], [310, 1, 1, "", "check_key_validity"], [310, 1, 1, "", "generate_pruner_config"], [310, 1, 1, "", "parse_to_prune"], [310, 1, 1, "", "process_and_check_config"], [310, 1, 1, "", "process_config"], [310, 1, 1, "", "process_weight_config"], [310, 1, 1, "", "process_yaml_config"], [310, 1, 1, "", "reset_none_to_default"], [310, 1, 1, "", "update_params"]], "neural_compressor.quantization": [[311, 1, 1, "", "fit"]], "neural_compressor.strategy": [[312, 0, 0, "-", "auto_mixed_precision"], [313, 0, 0, "-", "basic"], [314, 0, 0, "-", "bayesian"], [315, 0, 0, "-", "conservative"], [316, 0, 0, "-", "exhaustive"], [317, 0, 0, "-", "hawq_v2"], [319, 0, 0, "-", "mse"], [320, 0, 0, "-", "mse_v2"], [321, 0, 0, "-", "random"], [322, 0, 0, "-", "strategy"], [324, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto_mixed_precision": [[312, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy": [[312, 3, 1, "", "next_tune_cfg"], [312, 3, 1, "", "traverse"]], "neural_compressor.strategy.basic": [[313, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.basic.BasicTuneStrategy": [[313, 3, 1, "", "distributed_next_tune_cfg_lst"], [313, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian": [[314, 2, 1, "", "BayesianOptimization"], [314, 2, 1, "", "BayesianTuneStrategy"], [314, 2, 1, "", "TargetSpace"], [314, 1, 1, "", "acq_max"]], "neural_compressor.strategy.bayesian.BayesianOptimization": [[314, 3, 1, "", "gen_next_params"], [314, 4, 1, "", "max"], [314, 4, 1, "", "res"], [314, 4, 1, "", "space"], [314, 3, 1, "", "suggest"]], "neural_compressor.strategy.bayesian.BayesianTuneStrategy": [[314, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian.TargetSpace": [[314, 3, 1, "", "array_to_params"], [314, 4, 1, "", "bounds"], [314, 4, 1, "", "dim"], [314, 4, 1, "", "empty"], [314, 3, 1, "", "get_target"], [314, 4, 1, "", "keys"], [314, 3, 1, "", "max"], [314, 4, 1, "", "params"], [314, 3, 1, "", "params_to_array"], [314, 3, 1, "", "random_sample"], [314, 3, 1, "", "register"], [314, 3, 1, "", "res"], [314, 4, 1, "", "target"]], "neural_compressor.strategy.conservative": [[315, 2, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative.ConservativeTuneStrategy": [[315, 3, 1, "", "next_tune_cfg"], [315, 3, 1, "", "stop"], [315, 3, 1, "", "traverse"]], "neural_compressor.strategy.exhaustive": [[316, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy": [[316, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.hawq_v2": [[317, 2, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy": [[317, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse": [[319, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse.MSETuneStrategy": [[319, 3, 1, "", "mse_impact_lst"], [319, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse_v2": [[320, 2, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy": [[320, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.random": [[321, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.random.RandomTuneStrategy": [[321, 3, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.strategy": [[322, 2, 1, "", "TuneStrategy"], [322, 1, 1, "", "strategy_registry"]], "neural_compressor.strategy.strategy.TuneStrategy": [[322, 3, 1, "", "apply_all_tuning_recipes"], [322, 3, 1, "", "apply_recipe_one_by_one"], [322, 3, 1, "", "deploy_config"], [322, 3, 1, "", "distributed_next_tune_cfg_lst"], [322, 3, 1, "", "distributed_traverse"], [322, 4, 1, "", "evaluation_result"], [322, 3, 1, "", "initial_best_acc"], [322, 3, 1, "", "initial_tuning_cfg"], [322, 3, 1, "", "master_worker_handle"], [322, 3, 1, "", "meet_acc_req"], [322, 3, 1, "", "next_tune_cfg"], [322, 3, 1, "", "set_param_for_post_quantization_algos"], [322, 3, 1, "", "set_param_for_pre_quantization_algos"], [322, 3, 1, "", "set_q_func"], [322, 3, 1, "", "set_tuning_space"], [322, 3, 1, "", "setup_resume"], [322, 3, 1, "", "show_baseline_info"], [322, 3, 1, "", "slave_worker_handle"], [322, 3, 1, "", "stop"], [322, 3, 1, "", "traverse"], [322, 3, 1, "", "update_best_op_tuning_cfg"]], "neural_compressor.strategy.utils": [[324, 2, 1, "", "FallbackTuningSampler"], [324, 2, 1, "", "OpTuningConfig"], [324, 2, 1, "", "OpTypeWiseTuningSampler"], [324, 2, 1, "", "OpWiseTuningSampler"], [324, 2, 1, "", "TuningItem"], [324, 2, 1, "", "TuningSampler"], [324, 2, 1, "", "TuningSpace"], [323, 0, 0, "-", "constant"], [325, 0, 0, "-", "tuning_sampler"], [326, 0, 0, "-", "tuning_space"], [327, 0, 0, "-", "tuning_structs"], [328, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.OpTuningConfig": [[324, 3, 1, "", "from_state"], [324, 3, 1, "", "get_state"]], "neural_compressor.strategy.utils.OpWiseTuningSampler": [[324, 3, 1, "", "get_opwise_candidate"]], "neural_compressor.strategy.utils.TuningItem": [[324, 3, 1, "", "append"], [324, 3, 1, "", "get_details"], [324, 3, 1, "", "get_option_by_name"], [324, 3, 1, "", "get_options_name"], [324, 4, 1, "", "options"], [324, 3, 1, "", "remove"]], "neural_compressor.strategy.utils.TuningSpace": [[324, 3, 1, "", "get_default_config"], [324, 3, 1, "", "get_default_full_path"], [324, 3, 1, "", "get_item_by_path"], [324, 3, 1, "", "get_op_default_path_by_pattern"], [324, 3, 1, "", "query_item_option"], [324, 3, 1, "", "query_items_by_quant_mode"], [324, 3, 1, "", "query_quant_mode_item_by_full_path"]], "neural_compressor.strategy.utils.tuning_sampler": [[325, 2, 1, "", "FallbackTuningSampler"], [325, 2, 1, "", "ModelWiseTuningSampler"], [325, 2, 1, "", "OpTypeWiseTuningSampler"], [325, 2, 1, "", "OpWiseTuningSampler"], [325, 2, 1, "", "SmoothQuantSampler"], [325, 2, 1, "", "TuningOrder"], [325, 2, 1, "", "TuningSampler"], [325, 2, 1, "", "TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler": [[325, 3, 1, "", "get_opwise_candidate"]], "neural_compressor.strategy.utils.tuning_sampler.TuningSamplerRegistry": [[325, 3, 1, "", "register"]], "neural_compressor.strategy.utils.tuning_space": [[326, 2, 1, "", "TuningItem"], [326, 2, 1, "", "TuningSpace"], [326, 1, 1, "", "get_op_mode_by_query_order"], [326, 1, 1, "", "initial_tuning_cfg_with_quant_mode"], [326, 1, 1, "", "pattern_to_internal"], [326, 1, 1, "", "pattern_to_path"], [326, 1, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_space.TuningItem": [[326, 3, 1, "", "append"], [326, 3, 1, "", "get_details"], [326, 3, 1, "", "get_option_by_name"], [326, 3, 1, "", "get_options_name"], [326, 4, 1, "", "options"], [326, 3, 1, "", "remove"]], "neural_compressor.strategy.utils.tuning_space.TuningSpace": [[326, 3, 1, "", "get_default_config"], [326, 3, 1, "", "get_default_full_path"], [326, 3, 1, "", "get_item_by_path"], [326, 3, 1, "", "get_op_default_path_by_pattern"], [326, 3, 1, "", "query_item_option"], [326, 3, 1, "", "query_items_by_quant_mode"], [326, 3, 1, "", "query_quant_mode_item_by_full_path"]], "neural_compressor.strategy.utils.tuning_structs": [[327, 2, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig": [[327, 3, 1, "", "from_state"], [327, 3, 1, "", "get_state"]], "neural_compressor.strategy.utils.utility": [[328, 2, 1, "", "OrderedDefaultDict"], [328, 1, 1, "", "extract_data_type"], [328, 1, 1, "", "get_adaptor_name"], [328, 1, 1, "", "reverted_data_type"]], "neural_compressor.training": [[329, 2, 1, "", "CompressionManager"], [329, 1, 1, "", "prepare_compression"]], "neural_compressor.training.CompressionManager": [[329, 2, 1, "", "CallBacks"], [329, 3, 1, "", "export"], [329, 3, 1, "", "save"]], "neural_compressor.training.CompressionManager.CallBacks": [[329, 3, 1, "", "on_after_compute_loss"], [329, 3, 1, "", "on_after_optimizer_step"], [329, 3, 1, "", "on_before_optimizer_step"], [329, 3, 1, "", "on_epoch_begin"], [329, 3, 1, "", "on_epoch_end"], [329, 3, 1, "", "on_step_begin"], [329, 3, 1, "", "on_step_end"], [329, 3, 1, "", "on_train_begin"], [329, 3, 1, "", "on_train_end"]], "neural_compressor.utils": [[333, 2, 1, "", "LayerHistogramCollector"], [330, 0, 0, "-", "collect_layer_histogram"], [331, 0, 0, "-", "constant"], [332, 0, 0, "-", "create_obj_from_config"], [333, 1, 1, "", "debug"], [333, 1, 1, "", "error"], [333, 1, 1, "", "fatal"], [333, 1, 1, "", "info"], [334, 0, 0, "-", "kl_divergence"], [335, 0, 0, "-", "load_huggingface"], [333, 1, 1, "", "log"], [336, 0, 0, "-", "logger"], [337, 0, 0, "-", "options"], [338, 0, 0, "-", "pytorch"], [333, 1, 1, "", "set_random_seed"], [339, 0, 0, "-", "utility"], [333, 1, 1, "", "warn"], [333, 1, 1, "", "warning"]], "neural_compressor.utils.LayerHistogramCollector": [[333, 3, 1, "", "collect"]], "neural_compressor.utils.collect_layer_histogram": [[330, 2, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector": [[330, 3, 1, "", "collect"]], "neural_compressor.utils.create_obj_from_config": [[332, 1, 1, "", "create_dataloader"], [332, 1, 1, "", "create_dataset"], [332, 1, 1, "", "create_eval_func"], [332, 1, 1, "", "create_train_func"], [332, 1, 1, "", "get_algorithm"], [332, 1, 1, "", "get_func_from_config"], [332, 1, 1, "", "get_metrics"], [332, 1, 1, "", "get_postprocess"], [332, 1, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[334, 2, 1, "", "KL_Divergence"]], "neural_compressor.utils.kl_divergence.KL_Divergence": [[334, 3, 1, "", "expand_quantized_bins"], [334, 3, 1, "", "get_threshold"], [334, 3, 1, "", "safe_entropy"]], "neural_compressor.utils.load_huggingface": [[335, 2, 1, "", "OptimizedModel"], [335, 1, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.load_huggingface.OptimizedModel": [[335, 3, 1, "", "from_pretrained"]], "neural_compressor.utils.logger": [[336, 2, 1, "", "Logger"], [336, 1, 1, "", "debug"], [336, 1, 1, "", "error"], [336, 1, 1, "", "fatal"], [336, 1, 1, "", "info"], [336, 1, 1, "", "log"], [336, 1, 1, "", "warn"], [336, 1, 1, "", "warning"]], "neural_compressor.utils.logger.Logger": [[336, 3, 1, "", "get_logger"]], "neural_compressor.utils.options": [[337, 2, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[338, 1, 1, "", "load"]], "neural_compressor.utils.utility": [[339, 2, 1, "", "CaptureOutputToFile"], [339, 2, 1, "", "CpuInfo"], [339, 1, 1, "", "Dequantize"], [339, 1, 1, "", "DequantizeWeight"], [339, 2, 1, "", "GLOBAL_STATE"], [339, 2, 1, "", "LazyImport"], [339, 2, 1, "", "MODE"], [339, 2, 1, "", "Statistics"], [339, 1, 1, "", "combine_histogram"], [339, 1, 1, "", "compute_sparsity"], [339, 1, 1, "", "dump_data_to_local"], [339, 1, 1, "", "dump_elapsed_time"], [339, 1, 1, "", "equal_dicts"], [339, 1, 1, "", "fault_tolerant_file"], [339, 1, 1, "", "get_all_fp32_data"], [339, 1, 1, "", "get_size"], [339, 1, 1, "", "get_tensor_histogram"], [339, 1, 1, "", "get_tuning_history"], [339, 1, 1, "", "load_data_from_pkl"], [339, 1, 1, "", "recover"], [339, 1, 1, "", "set_random_seed"], [339, 1, 1, "", "set_resume_from"], [339, 1, 1, "", "set_tensorboard"], [339, 1, 1, "", "set_workspace"], [339, 1, 1, "", "show_memory_info"], [339, 1, 1, "", "singleton"], [339, 1, 1, "", "str2array"], [339, 1, 1, "", "time_limit"], [339, 1, 1, "", "version1_eq_version2"], [339, 1, 1, "", "version1_gt_version2"], [339, 1, 1, "", "version1_gte_version2"], [339, 1, 1, "", "version1_lt_version2"], [339, 1, 1, "", "version1_lte_version2"]], "neural_compressor.utils.utility.CpuInfo": [[339, 4, 1, "", "bf16"], [339, 4, 1, "", "cores_per_socket"], [339, 3, 1, "", "get_number_of_sockets"], [339, 4, 1, "", "vnni"]], "neural_compressor.utils.utility.Statistics": [[339, 3, 1, "", "print_stat"]], "neural_compressor.ux": [[415, 0, 0, "-", "components"], [474, 0, 0, "-", "inc_bench"], [483, 0, 0, "-", "utils"], [509, 0, 0, "-", "web"]], "neural_compressor.ux.components": [[343, 0, 0, "-", "benchmark"], [347, 0, 0, "-", "config_generator"], [355, 0, 0, "-", "configuration_wizard"], [391, 0, 0, "-", "db_manager"], [396, 0, 0, "-", "diagnosis"], [404, 0, 0, "-", "file_browser"], [410, 0, 0, "-", "graph"], [416, 0, 0, "-", "jobs_management"], [420, 0, 0, "-", "manage_workspace"], [422, 0, 0, "-", "model"], [441, 0, 0, "-", "model_zoo"], [443, 0, 0, "-", "names_mapper"], [450, 0, 0, "-", "optimization"], [466, 0, 0, "-", "profiling"]], "neural_compressor.ux.components.benchmark": [[343, 2, 1, "", "Benchmarks"], [340, 0, 0, "-", "benchmark"], [341, 0, 0, "-", "benchmark_model"], [342, 0, 0, "-", "execute_benchmark"]], "neural_compressor.ux.components.benchmark.benchmark": [[340, 2, 1, "", "Benchmark"], [340, 2, 1, "", "DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark.Benchmark": [[340, 4, 1, "", "config_filename"], [340, 4, 1, "", "configuration_data"], [340, 3, 1, "", "execute"], [340, 3, 1, "", "generate_config"], [340, 4, 1, "", "workdir"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[341, 1, 1, "", "benchmark_model"], [341, 1, 1, "", "parse_args"], [341, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[342, 1, 1, "", "benchmark_result_update"], [342, 1, 1, "", "benchmark_result_update_pytorch_script"], [342, 1, 1, "", "execute_benchmark"], [342, 1, 1, "", "execute_real_benchmark"], [342, 1, 1, "", "pytorch_script_bench_optimizations"], [342, 1, 1, "", "pytorch_script_bench_original_model"]], "neural_compressor.ux.components.config_generator": [[344, 0, 0, "-", "benchmark_config_generator"], [345, 0, 0, "-", "config_generator"], [346, 0, 0, "-", "graph_optimization_config_generator"], [348, 0, 0, "-", "mixed_precision_config_generator"], [349, 0, 0, "-", "profiling_config_generator"], [350, 0, 0, "-", "pruning_config_generator"], [351, 0, 0, "-", "quantization_config_generator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[344, 2, 1, "", "BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator": [[344, 3, 1, "", "generate"], [344, 3, 1, "", "generate_accuracy_config"], [344, 3, 1, "", "generate_evaluation_config"], [344, 3, 1, "", "generate_performance_config"]], "neural_compressor.ux.components.config_generator.config_generator": [[345, 2, 1, "", "ConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator": [[345, 3, 1, "", "generate"], [345, 3, 1, "", "generate_dataloader_config"], [345, 3, 1, "", "generate_model_config"], [345, 3, 1, "", "get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[346, 2, 1, "", "GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator": [[346, 3, 1, "", "generate"], [346, 3, 1, "", "generate_evaluation_config"], [346, 3, 1, "", "generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[348, 2, 1, "", "MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator": [[348, 3, 1, "", "generate"], [348, 3, 1, "", "generate_evaluation_config"], [348, 3, 1, "", "generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[349, 2, 1, "", "ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator": [[349, 3, 1, "", "generate"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[350, 2, 1, "", "PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator": [[350, 3, 1, "", "generate"], [350, 3, 1, "", "generate_evaluation_config"], [350, 3, 1, "", "generate_pruning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[351, 2, 1, "", "QuantizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator": [[351, 3, 1, "", "generate"], [351, 3, 1, "", "generate_evaluation_config"], [351, 3, 1, "", "generate_quantization_config"], [351, 3, 1, "", "generate_tuning_config"]], "neural_compressor.ux.components.configuration_wizard": [[352, 0, 0, "-", "configuration_parser"], [353, 0, 0, "-", "get_boundary_nodes"], [354, 0, 0, "-", "get_configuration"], [356, 0, 0, "-", "params_feeder"], [357, 0, 0, "-", "pruning_config_parser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[352, 2, 1, "", "ConfigurationParser"], [352, 1, 1, "", "normalize_string_list"], [352, 1, 1, "", "parse_list_value"], [352, 1, 1, "", "parse_multidim_list"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser": [[352, 3, 1, "", "get_param_type"], [352, 3, 1, "", "parse"], [352, 3, 1, "", "parse_dataloader"], [352, 3, 1, "", "parse_evaluation_data"], [352, 3, 1, "", "parse_metric"], [352, 3, 1, "", "parse_transforms"], [352, 3, 1, "", "parse_value"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[353, 1, 1, "", "get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[354, 1, 1, "", "get_predefined_configuration"], [354, 1, 1, "", "update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[356, 2, 1, "", "Feeder"], [356, 1, 1, "", "get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder": [[356, 3, 1, "", "feed"], [356, 3, 1, "", "get_dataloaders"], [356, 3, 1, "", "get_domains"], [356, 3, 1, "", "get_frameworks"], [356, 3, 1, "", "get_metrics"], [356, 3, 1, "", "get_models"], [356, 3, 1, "", "get_objectives"], [356, 3, 1, "", "get_precisions"], [356, 3, 1, "", "get_quantization_approaches"], [356, 3, 1, "", "get_strategies"], [356, 3, 1, "", "get_transforms"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[357, 2, 1, "", "PruningConfigParser"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser": [[357, 3, 1, "", "generate_tree"], [357, 3, 1, "", "parse"], [357, 3, 1, "", "parse_entry"]], "neural_compressor.ux.components.db_manager": [[391, 2, 1, "", "DBManager"], [358, 0, 0, "-", "db_manager"], [367, 0, 0, "-", "db_models"], [386, 0, 0, "-", "db_operations"], [392, 0, 0, "-", "params_interfaces"], [393, 0, 0, "-", "utils"]], "neural_compressor.ux.components.db_manager.DBManager": [[391, 3, 1, "", "create_all"], [391, 3, 1, "", "create_sqlalchemy_engine"], [391, 4, 1, "", "engine"], [391, 3, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[358, 2, 1, "", "DBManager"]], "neural_compressor.ux.components.db_manager.db_manager.DBManager": [[358, 3, 1, "", "create_all"], [358, 3, 1, "", "create_sqlalchemy_engine"], [358, 4, 1, "", "engine"], [358, 3, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_models": [[359, 0, 0, "-", "benchmark"], [360, 0, 0, "-", "benchmark_result"], [361, 0, 0, "-", "dataloader"], [362, 0, 0, "-", "dataset"], [363, 0, 0, "-", "domain"], [364, 0, 0, "-", "domain_flavour"], [365, 0, 0, "-", "example"], [366, 0, 0, "-", "framework"], [368, 0, 0, "-", "metric"], [369, 0, 0, "-", "model"], [370, 0, 0, "-", "optimization"], [371, 0, 0, "-", "optimization_type"], [372, 0, 0, "-", "precision"], [373, 0, 0, "-", "profiling"], [374, 0, 0, "-", "profiling_result"], [375, 0, 0, "-", "project"], [376, 0, 0, "-", "pruning_details"], [377, 0, 0, "-", "transform"], [378, 0, 0, "-", "tuning_details"], [379, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[359, 2, 1, "", "Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark": [[359, 3, 1, "", "add"], [359, 3, 1, "", "build_info"], [359, 3, 1, "", "clean_status"], [359, 3, 1, "", "delete_benchmark"], [359, 3, 1, "", "details"], [359, 3, 1, "", "list"], [359, 3, 1, "", "update_batch_size"], [359, 3, 1, "", "update_config_path"], [359, 3, 1, "", "update_cores_per_instance"], [359, 3, 1, "", "update_dataset"], [359, 3, 1, "", "update_duration"], [359, 3, 1, "", "update_execution_command"], [359, 3, 1, "", "update_log_path"], [359, 3, 1, "", "update_mode"], [359, 3, 1, "", "update_number_of_instance"], [359, 3, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[360, 2, 1, "", "BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult": [[360, 3, 1, "", "add"], [360, 3, 1, "", "build_info"], [360, 3, 1, "", "update_accuracy"], [360, 3, 1, "", "update_performance"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[361, 2, 1, "", "Dataloader"], [361, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader": [[361, 3, 1, "", "list"], [361, 3, 1, "", "list_by_framework"], [361, 3, 1, "", "query_to_list"], [361, 3, 1, "", "update_params"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[362, 2, 1, "", "Dataset"]], "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset": [[362, 3, 1, "", "add"], [362, 3, 1, "", "build_info"], [362, 3, 1, "", "delete_dataset"], [362, 3, 1, "", "details"], [362, 3, 1, "", "list"], [362, 3, 1, "", "update_template_path"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[363, 2, 1, "", "Domain"], [363, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain.Domain": [[363, 3, 1, "", "get_domain_id"], [363, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[364, 2, 1, "", "DomainFlavour"], [364, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour": [[364, 3, 1, "", "get_domain_flavour_id"], [364, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.example": [[365, 2, 1, "", "Example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[366, 2, 1, "", "Framework"], [366, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.framework.Framework": [[366, 3, 1, "", "get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[368, 2, 1, "", "Metric"], [368, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric.Metric": [[368, 3, 1, "", "list"], [368, 3, 1, "", "list_by_framework"], [368, 3, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[369, 2, 1, "", "Model"]], "neural_compressor.ux.components.db_manager.db_models.model.Model": [[369, 3, 1, "", "add"], [369, 3, 1, "", "build_info"], [369, 3, 1, "", "delete_model"], [369, 3, 1, "", "details"], [369, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[370, 2, 1, "", "Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization": [[370, 3, 1, "", "add"], [370, 3, 1, "", "build_info"], [370, 3, 1, "", "clean_status"], [370, 3, 1, "", "delete_optimization"], [370, 3, 1, "", "details"], [370, 3, 1, "", "get_optimization_by_project_and_model"], [370, 3, 1, "", "get_pinned_benchmarks"], [370, 3, 1, "", "list"], [370, 3, 1, "", "pin_accuracy_benchmark"], [370, 3, 1, "", "pin_performance_benchmark"], [370, 3, 1, "", "unpin_benchmark"], [370, 3, 1, "", "update_batch_size"], [370, 3, 1, "", "update_config_path"], [370, 3, 1, "", "update_dataset"], [370, 3, 1, "", "update_duration"], [370, 3, 1, "", "update_execution_command"], [370, 3, 1, "", "update_log_path"], [370, 3, 1, "", "update_optimized_model"], [370, 3, 1, "", "update_precision"], [370, 3, 1, "", "update_pruning_details"], [370, 3, 1, "", "update_sampling_size"], [370, 3, 1, "", "update_status"], [370, 3, 1, "", "update_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[371, 2, 1, "", "OptimizationType"], [371, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType": [[371, 3, 1, "", "add"], [371, 3, 1, "", "get_optimization_type_by_id"], [371, 3, 1, "", "get_optimization_type_by_name"], [371, 3, 1, "", "get_optimization_type_for_precision"], [371, 3, 1, "", "get_optimization_type_id"], [371, 3, 1, "", "list"], [371, 3, 1, "", "list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[372, 2, 1, "", "Precision"], [372, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision.Precision": [[372, 3, 1, "", "add"], [372, 3, 1, "", "get_precision_by_id"], [372, 3, 1, "", "get_precision_by_name"], [372, 3, 1, "", "get_precision_id"], [372, 3, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[373, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling": [[373, 3, 1, "", "add"], [373, 3, 1, "", "build_info"], [373, 3, 1, "", "clean_status"], [373, 3, 1, "", "delete_profiling"], [373, 3, 1, "", "details"], [373, 3, 1, "", "list"], [373, 3, 1, "", "update_dataset"], [373, 3, 1, "", "update_duration"], [373, 3, 1, "", "update_execution_command"], [373, 3, 1, "", "update_log_path"], [373, 3, 1, "", "update_num_threads"], [373, 3, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[374, 2, 1, "", "ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult": [[374, 3, 1, "", "add"], [374, 3, 1, "", "build_info"], [374, 3, 1, "", "bulk_add"], [374, 3, 1, "", "delete_results"], [374, 3, 1, "", "get_results"]], "neural_compressor.ux.components.db_manager.db_models.project": [[375, 2, 1, "", "Project"]], "neural_compressor.ux.components.db_manager.db_models.project.Project": [[375, 3, 1, "", "create_project"], [375, 3, 1, "", "delete_project"], [375, 3, 1, "", "get_model_by_name"], [375, 3, 1, "", "list_projects"], [375, 3, 1, "", "project_details"], [375, 3, 1, "", "update_notes"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[376, 2, 1, "", "PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails": [[376, 3, 1, "", "add"], [376, 3, 1, "", "build_info"], [376, 3, 1, "", "delete_pruning_details"], [376, 3, 1, "", "update"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[377, 2, 1, "", "Transform"], [377, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.transform.Transform": [[377, 3, 1, "", "list"], [377, 3, 1, "", "list_by_domain"], [377, 3, 1, "", "list_by_framework"], [377, 3, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[378, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails": [[378, 3, 1, "", "add"], [378, 3, 1, "", "delete_tuning_details"], [378, 3, 1, "", "update"], [378, 3, 1, "", "update_tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[379, 2, 1, "", "TuningHistory"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory": [[379, 3, 1, "", "add"], [379, 3, 1, "", "build_info"]], "neural_compressor.ux.components.db_manager.db_operations": [[386, 2, 1, "", "BenchmarkAPIInterface"], [386, 2, 1, "", "DatasetAPIInterface"], [386, 2, 1, "", "DiagnosisAPIInterface"], [386, 2, 1, "", "DictionariesAPIInterface"], [386, 2, 1, "", "ExamplesAPIInterface"], [386, 2, 1, "", "ModelAPIInterface"], [386, 2, 1, "", "OptimizationAPIInterface"], [386, 2, 1, "", "ProfilingAPIInterface"], [386, 2, 1, "", "ProjectAPIInterface"], [380, 0, 0, "-", "benchmark_api_interface"], [381, 0, 0, "-", "dataset_api_interface"], [382, 0, 0, "-", "db_operations"], [383, 0, 0, "-", "diagnosis_api_interface"], [384, 0, 0, "-", "dictionaries_api_interface"], [385, 0, 0, "-", "examples_api_interface"], [387, 0, 0, "-", "model_api_interface"], [388, 0, 0, "-", "optimization_api_interface"], [389, 0, 0, "-", "profiling_api_interface"], [390, 0, 0, "-", "project_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface": [[386, 3, 1, "", "add_benchmark"], [386, 3, 1, "", "add_result"], [386, 3, 1, "", "clean_status"], [386, 3, 1, "", "delete_benchmark"], [386, 3, 1, "", "edit_benchmark"], [386, 3, 1, "", "get_benchmark_details"], [386, 3, 1, "", "list_benchmarks"], [386, 3, 1, "", "parse_benchmark_data"], [386, 3, 1, "", "parse_benchmark_edit_data"], [386, 3, 1, "", "update_benchmark_accuracy"], [386, 3, 1, "", "update_benchmark_duration"], [386, 3, 1, "", "update_benchmark_performance"], [386, 3, 1, "", "update_benchmark_status"], [386, 3, 1, "", "update_execution_command"], [386, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface": [[386, 3, 1, "", "add_dataset"], [386, 3, 1, "", "check_if_custom_metric_or_dataloader"], [386, 3, 1, "", "dataloader_path"], [386, 3, 1, "", "delete_dataset"], [386, 3, 1, "", "generate_custom_template"], [386, 3, 1, "", "generate_template"], [386, 3, 1, "", "get_dataset_details"], [386, 3, 1, "", "get_predefined_dataset"], [386, 3, 1, "", "list_datasets"], [386, 3, 1, "", "parse_dataset_data"], [386, 3, 1, "", "prepare_predefined_dataloader"], [386, 3, 1, "", "prepare_predefined_transform"], [386, 3, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface": [[386, 3, 1, "", "generate_optimization"], [386, 3, 1, "", "get_op_details"], [386, 3, 1, "", "get_op_list"], [386, 3, 1, "", "histogram"], [386, 3, 1, "", "model_wise_params"], [386, 3, 1, "", "parse_model_wise_config"], [386, 3, 1, "", "parse_op_wise_config"], [386, 3, 1, "", "parse_optimization_data"], [386, 3, 1, "", "parse_wise_parameters"], [386, 3, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface": [[386, 3, 1, "", "list_dataloaders"], [386, 3, 1, "", "list_dataloaders_by_framework"], [386, 3, 1, "", "list_domain_flavours"], [386, 3, 1, "", "list_domains"], [386, 3, 1, "", "list_metrics"], [386, 3, 1, "", "list_metrics_by_framework"], [386, 3, 1, "", "list_optimization_types"], [386, 3, 1, "", "list_optimization_types_for_precision"], [386, 3, 1, "", "list_precisions"], [386, 3, 1, "", "list_transforms"], [386, 3, 1, "", "list_transforms_by_domain"], [386, 3, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface": [[386, 3, 1, "", "create_project"], [386, 3, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface": [[386, 3, 1, "", "add_model"], [386, 3, 1, "", "delete_model"], [386, 3, 1, "", "get_model_details"], [386, 3, 1, "", "list_models"], [386, 3, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface": [[386, 3, 1, "", "add_optimization"], [386, 3, 1, "", "add_pruning_optimization"], [386, 3, 1, "", "add_quantization_optimization"], [386, 3, 1, "", "add_standard_optimization"], [386, 3, 1, "", "add_tuning_history"], [386, 3, 1, "", "clean_status"], [386, 3, 1, "", "delete_optimization"], [386, 3, 1, "", "edit_optimization"], [386, 3, 1, "", "edit_pruning_details"], [386, 3, 1, "", "edit_tuning_details"], [386, 3, 1, "", "get_optimization_details"], [386, 3, 1, "", "get_pruning_details"], [386, 3, 1, "", "list_optimizations"], [386, 3, 1, "", "load_pruning_details_config"], [386, 3, 1, "", "parse_optimization_data"], [386, 3, 1, "", "parse_optimization_edit_data"], [386, 3, 1, "", "parse_tuning_history"], [386, 3, 1, "", "pin_accuracy_benchmark"], [386, 3, 1, "", "pin_performance_benchmark"], [386, 3, 1, "", "update_execution_command"], [386, 3, 1, "", "update_optimization_duration"], [386, 3, 1, "", "update_optimization_status"], [386, 3, 1, "", "update_optimized_model"], [386, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface": [[386, 3, 1, "", "add_profiling"], [386, 3, 1, "", "add_result"], [386, 3, 1, "", "bulk_add_results"], [386, 3, 1, "", "clean_status"], [386, 3, 1, "", "delete_profiling"], [386, 3, 1, "", "edit_profiling"], [386, 3, 1, "", "get_profiling_details"], [386, 3, 1, "", "list_profilings"], [386, 3, 1, "", "parse_profiling_data"], [386, 3, 1, "", "parse_profiling_edit_data"], [386, 3, 1, "", "parse_profiling_result_data"], [386, 3, 1, "", "update_execution_command"], [386, 3, 1, "", "update_log_path"], [386, 3, 1, "", "update_profiling_duration"], [386, 3, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface": [[386, 3, 1, "", "add_dummy_dataset"], [386, 3, 1, "", "add_model"], [386, 3, 1, "", "create_project"], [386, 3, 1, "", "delete_project"], [386, 3, 1, "", "get_project_details"], [386, 3, 1, "", "list_projects"], [386, 3, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[380, 2, 1, "", "BenchmarkAPIInterface"], [380, 1, 1, "", "before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface": [[380, 3, 1, "", "add_benchmark"], [380, 3, 1, "", "add_result"], [380, 3, 1, "", "clean_status"], [380, 3, 1, "", "delete_benchmark"], [380, 3, 1, "", "edit_benchmark"], [380, 3, 1, "", "get_benchmark_details"], [380, 3, 1, "", "list_benchmarks"], [380, 3, 1, "", "parse_benchmark_data"], [380, 3, 1, "", "parse_benchmark_edit_data"], [380, 3, 1, "", "update_benchmark_accuracy"], [380, 3, 1, "", "update_benchmark_duration"], [380, 3, 1, "", "update_benchmark_performance"], [380, 3, 1, "", "update_benchmark_status"], [380, 3, 1, "", "update_execution_command"], [380, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[381, 2, 1, "", "DatasetAPIInterface"], [381, 1, 1, "", "initialize_associations"], [381, 1, 1, "", "initialize_precision_optimization_types_association"], [381, 1, 1, "", "search_in_list_of_dict"], [381, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [381, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface": [[381, 3, 1, "", "add_dataset"], [381, 3, 1, "", "check_if_custom_metric_or_dataloader"], [381, 3, 1, "", "dataloader_path"], [381, 3, 1, "", "delete_dataset"], [381, 3, 1, "", "generate_custom_template"], [381, 3, 1, "", "generate_template"], [381, 3, 1, "", "get_dataset_details"], [381, 3, 1, "", "get_predefined_dataset"], [381, 3, 1, "", "list_datasets"], [381, 3, 1, "", "parse_dataset_data"], [381, 3, 1, "", "prepare_predefined_dataloader"], [381, 3, 1, "", "prepare_predefined_transform"], [381, 3, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[382, 1, 1, "", "initialize_associations"], [382, 1, 1, "", "initialize_precision_optimization_types_association"], [382, 1, 1, "", "search_in_list_of_dict"], [382, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [382, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[383, 2, 1, "", "DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface": [[383, 3, 1, "", "generate_optimization"], [383, 3, 1, "", "get_op_details"], [383, 3, 1, "", "get_op_list"], [383, 3, 1, "", "histogram"], [383, 3, 1, "", "model_wise_params"], [383, 3, 1, "", "parse_model_wise_config"], [383, 3, 1, "", "parse_op_wise_config"], [383, 3, 1, "", "parse_optimization_data"], [383, 3, 1, "", "parse_wise_parameters"], [383, 3, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[384, 2, 1, "", "DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface": [[384, 3, 1, "", "list_dataloaders"], [384, 3, 1, "", "list_dataloaders_by_framework"], [384, 3, 1, "", "list_domain_flavours"], [384, 3, 1, "", "list_domains"], [384, 3, 1, "", "list_metrics"], [384, 3, 1, "", "list_metrics_by_framework"], [384, 3, 1, "", "list_optimization_types"], [384, 3, 1, "", "list_optimization_types_for_precision"], [384, 3, 1, "", "list_precisions"], [384, 3, 1, "", "list_transforms"], [384, 3, 1, "", "list_transforms_by_domain"], [384, 3, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[385, 2, 1, "", "ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface": [[385, 3, 1, "", "create_project"], [385, 3, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[387, 2, 1, "", "ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface": [[387, 3, 1, "", "add_model"], [387, 3, 1, "", "delete_model"], [387, 3, 1, "", "get_model_details"], [387, 3, 1, "", "list_models"], [387, 3, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[388, 2, 1, "", "OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface": [[388, 3, 1, "", "add_optimization"], [388, 3, 1, "", "add_pruning_optimization"], [388, 3, 1, "", "add_quantization_optimization"], [388, 3, 1, "", "add_standard_optimization"], [388, 3, 1, "", "add_tuning_history"], [388, 3, 1, "", "clean_status"], [388, 3, 1, "", "delete_optimization"], [388, 3, 1, "", "edit_optimization"], [388, 3, 1, "", "edit_pruning_details"], [388, 3, 1, "", "edit_tuning_details"], [388, 3, 1, "", "get_optimization_details"], [388, 3, 1, "", "get_pruning_details"], [388, 3, 1, "", "list_optimizations"], [388, 3, 1, "", "load_pruning_details_config"], [388, 3, 1, "", "parse_optimization_data"], [388, 3, 1, "", "parse_optimization_edit_data"], [388, 3, 1, "", "parse_tuning_history"], [388, 3, 1, "", "pin_accuracy_benchmark"], [388, 3, 1, "", "pin_performance_benchmark"], [388, 3, 1, "", "update_execution_command"], [388, 3, 1, "", "update_optimization_duration"], [388, 3, 1, "", "update_optimization_status"], [388, 3, 1, "", "update_optimized_model"], [388, 3, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[389, 2, 1, "", "ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface": [[389, 3, 1, "", "add_profiling"], [389, 3, 1, "", "add_result"], [389, 3, 1, "", "bulk_add_results"], [389, 3, 1, "", "clean_status"], [389, 3, 1, "", "delete_profiling"], [389, 3, 1, "", "edit_profiling"], [389, 3, 1, "", "get_profiling_details"], [389, 3, 1, "", "list_profilings"], [389, 3, 1, "", "parse_profiling_data"], [389, 3, 1, "", "parse_profiling_edit_data"], [389, 3, 1, "", "parse_profiling_result_data"], [389, 3, 1, "", "update_execution_command"], [389, 3, 1, "", "update_log_path"], [389, 3, 1, "", "update_profiling_duration"], [389, 3, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[390, 2, 1, "", "ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface": [[390, 3, 1, "", "add_dummy_dataset"], [390, 3, 1, "", "add_model"], [390, 3, 1, "", "create_project"], [390, 3, 1, "", "delete_project"], [390, 3, 1, "", "get_project_details"], [390, 3, 1, "", "list_projects"], [390, 3, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[392, 2, 1, "", "BenchmarkAddParamsInterface"], [392, 2, 1, "", "BenchmarkEditParamsInterface"], [392, 2, 1, "", "DatasetAddParamsInterface"], [392, 2, 1, "", "DiagnosisOptimizationParamsInterface"], [392, 2, 1, "", "ModelAddParamsInterface"], [392, 2, 1, "", "OptimizationAddParamsInterface"], [392, 2, 1, "", "OptimizationEditParamsInterface"], [392, 2, 1, "", "ProfilingAddParamsInterface"], [392, 2, 1, "", "ProfilingEditParamsInterface"], [392, 2, 1, "", "ProfilingResultAddParamsInterface"], [392, 2, 1, "", "TuningHistoryInterface"], [392, 2, 1, "", "TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface": [[392, 3, 1, "", "parse_nodes"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface": [[392, 3, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface": [[392, 3, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.utils": [[393, 1, 1, "", "get_framework_dataloaders_config"], [393, 1, 1, "", "get_framework_transforms_config"], [393, 1, 1, "", "update_dataloaders_params"]], "neural_compressor.ux.components.diagnosis": [[394, 0, 0, "-", "diagnosis"], [395, 0, 0, "-", "factory"], [397, 0, 0, "-", "onnx_diagnosis"], [399, 0, 0, "-", "op_details"], [400, 0, 0, "-", "op_entry"], [401, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[394, 2, 1, "", "Diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis": [[394, 3, 1, "", "calculate_mse"], [394, 3, 1, "", "get_histogram_data"], [394, 3, 1, "", "get_op_details"], [394, 3, 1, "", "get_op_list"], [394, 3, 1, "", "get_tensors_info"], [394, 3, 1, "", "load_quantization_config"], [394, 3, 1, "", "mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.factory": [[395, 2, 1, "", "DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory": [[395, 3, 1, "", "get_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[398, 0, 0, "-", "onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[398, 2, 1, "", "OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis": [[398, 4, 1, "", "model"]], "neural_compressor.ux.components.diagnosis.op_details": [[399, 2, 1, "", "OpActivation"], [399, 2, 1, "", "OpDetails"], [399, 2, 1, "", "OpPattern"], [399, 2, 1, "", "OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details.OpDetails": [[399, 3, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.op_entry": [[400, 2, 1, "", "OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry.OpEntry": [[400, 3, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[402, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[402, 2, 1, "", "TensorflowDiagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis": [[402, 4, 1, "", "model"]], "neural_compressor.ux.components.file_browser": [[403, 0, 0, "-", "file_browser"]], "neural_compressor.ux.components.file_browser.file_browser": [[403, 1, 1, "", "create_dir_entry"], [403, 1, 1, "", "create_entry"], [403, 1, 1, "", "create_file_entry"], [403, 1, 1, "", "filter_requested_entries"], [403, 1, 1, "", "get_directory_entries"], [403, 1, 1, "", "get_filter_value"], [403, 1, 1, "", "get_non_hidden_directory_entries"], [403, 1, 1, "", "get_requested_path"], [403, 1, 1, "", "get_setting_value"], [403, 1, 1, "", "is_dataset_or_directory_entry"], [403, 1, 1, "", "is_directory_entry"], [403, 1, 1, "", "is_model_or_directory_entry"], [403, 1, 1, "", "should_show_files"], [403, 1, 1, "", "should_show_only_model_files"], [403, 1, 1, "", "sort_entries"]], "neural_compressor.ux.components.graph": [[405, 0, 0, "-", "attribute"], [406, 0, 0, "-", "collapser"], [407, 0, 0, "-", "edge"], [408, 0, 0, "-", "graph"], [409, 0, 0, "-", "graph_reader"], [411, 0, 0, "-", "node"], [412, 0, 0, "-", "reader"]], "neural_compressor.ux.components.graph.attribute": [[405, 2, 1, "", "Attribute"]], "neural_compressor.ux.components.graph.collapser": [[406, 2, 1, "", "Collapser"]], "neural_compressor.ux.components.graph.collapser.Collapser": [[406, 3, 1, "", "collapse"]], "neural_compressor.ux.components.graph.edge": [[407, 2, 1, "", "Edge"]], "neural_compressor.ux.components.graph.edge.Edge": [[407, 4, 1, "", "source"], [407, 4, 1, "", "target"]], "neural_compressor.ux.components.graph.graph": [[408, 2, 1, "", "Graph"]], "neural_compressor.ux.components.graph.graph.Graph": [[408, 3, 1, "", "add_edge"], [408, 3, 1, "", "add_node"], [408, 4, 1, "", "edges"], [408, 3, 1, "", "get_node"], [408, 3, 1, "", "get_target_nodes"], [408, 3, 1, "", "highlight_pattern"], [408, 4, 1, "", "nodes"]], "neural_compressor.ux.components.graph.graph_reader": [[409, 2, 1, "", "GraphReader"]], "neural_compressor.ux.components.graph.graph_reader.GraphReader": [[409, 3, 1, "", "find_pattern_in_graph"], [409, 3, 1, "", "read"]], "neural_compressor.ux.components.graph.node": [[411, 2, 1, "", "GroupNode"], [411, 2, 1, "", "Node"]], "neural_compressor.ux.components.graph.reader": [[413, 0, 0, "-", "onnxrt_reader"], [414, 0, 0, "-", "tensorflow_reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[413, 2, 1, "", "OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader": [[413, 3, 1, "", "read"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[414, 2, 1, "", "TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader": [[414, 3, 1, "", "read"]], "neural_compressor.ux.components.jobs_management": [[417, 0, 0, "-", "jobs_control_queue"], [418, 0, 0, "-", "jobs_manager"], [419, 0, 0, "-", "request"]], "neural_compressor.ux.components.manage_workspace": [[420, 1, 1, "", "get_default_path"]], "neural_compressor.ux.components.model": [[421, 0, 0, "-", "domain"], [423, 0, 0, "-", "model"], [424, 0, 0, "-", "model_type_getter"], [425, 0, 0, "-", "onnxrt"], [427, 0, 0, "-", "pytorch"], [429, 0, 0, "-", "repository"], [430, 0, 0, "-", "shape"], [432, 0, 0, "-", "tensorflow"]], "neural_compressor.ux.components.model.domain": [[421, 2, 1, "", "Domain"]], "neural_compressor.ux.components.model.model": [[423, 2, 1, "", "Model"]], "neural_compressor.ux.components.model.model.Model": [[423, 4, 1, "", "domain"], [423, 3, 1, "", "ensure_supported_path"], [423, 3, 1, "", "get_framework_name"], [423, 3, 1, "", "get_input_nodes"], [423, 3, 1, "", "get_model_graph"], [423, 3, 1, "", "get_output_nodes"], [423, 3, 1, "", "get_tensors_info"], [423, 3, 1, "", "guard_requirements_installed"], [423, 4, 1, "", "input_shape"], [423, 4, 1, "", "shape_elements_order"], [423, 4, 1, "", "supports_graph"], [423, 3, 1, "", "supports_path"], [423, 4, 1, "", "supports_profiling"], [423, 4, 1, "", "supports_pruning"]], "neural_compressor.ux.components.model.model_type_getter": [[424, 1, 1, "", "get_model_type"]], "neural_compressor.ux.components.model.onnxrt": [[426, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.onnxrt.model": [[426, 2, 1, "", "OnnxrtModel"], [426, 1, 1, "", "remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel": [[426, 4, 1, "", "domain"], [426, 4, 1, "", "filtered_input_nodes"], [426, 3, 1, "", "get_framework_name"], [426, 3, 1, "", "get_model_graph"], [426, 3, 1, "", "guard_requirements_installed"], [426, 4, 1, "", "input_shape"], [426, 4, 1, "", "nc_model_instance"], [426, 4, 1, "", "shape_elements_order"], [426, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.pytorch": [[428, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.pytorch.model": [[428, 2, 1, "", "PyTorchScriptModel"]], "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel": [[428, 3, 1, "", "get_framework_name"], [428, 3, 1, "", "guard_requirements_installed"], [428, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.repository": [[429, 2, 1, "", "ModelRepository"]], "neural_compressor.ux.components.model.repository.ModelRepository": [[429, 3, 1, "", "get_framework_from_path"], [429, 3, 1, "", "get_frameworks"], [429, 3, 1, "", "get_model"], [429, 3, 1, "", "get_supported_frameworks"], [429, 3, 1, "", "is_model_path"]], "neural_compressor.ux.components.model.shape": [[430, 2, 1, "", "Shape"]], "neural_compressor.ux.components.model.shape.Shape": [[430, 3, 1, "", "serialize"]], "neural_compressor.ux.components.model.tensorflow": [[431, 0, 0, "-", "frozen_pb"], [433, 0, 0, "-", "keras"], [434, 0, 0, "-", "meta_graph"], [435, 0, 0, "-", "model"], [436, 0, 0, "-", "saved_model"], [437, 0, 0, "-", "utils"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[431, 2, 1, "", "FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel": [[431, 3, 1, "", "supports_path"], [431, 4, 1, "", "supports_profiling"]], "neural_compressor.ux.components.model.tensorflow.keras": [[433, 2, 1, "", "KerasModel"]], "neural_compressor.ux.components.model.tensorflow.keras.KerasModel": [[433, 3, 1, "", "get_input_nodes"], [433, 3, 1, "", "get_output_nodes"], [433, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[434, 2, 1, "", "MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel": [[434, 3, 1, "", "get_input_nodes"], [434, 3, 1, "", "get_model_graph"], [434, 3, 1, "", "get_output_nodes"], [434, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.model": [[435, 2, 1, "", "TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel": [[435, 3, 1, "", "get_framework_name"], [435, 3, 1, "", "get_input_nodes"], [435, 3, 1, "", "get_model_graph"], [435, 3, 1, "", "get_output_nodes"], [435, 3, 1, "", "guard_requirements_installed"], [435, 4, 1, "", "input_shape"], [435, 4, 1, "", "nc_model_instance"], [435, 4, 1, "", "shape_elements_order"], [435, 4, 1, "", "supports_pruning"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[436, 2, 1, "", "SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel": [[436, 3, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.utils": [[437, 1, 1, "", "get_input_shape"]], "neural_compressor.ux.components.model_zoo": [[438, 0, 0, "-", "download_config"], [439, 0, 0, "-", "download_model"], [440, 0, 0, "-", "downloader"], [442, 0, 0, "-", "list_models"]], "neural_compressor.ux.components.model_zoo.download_config": [[438, 1, 1, "", "download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[439, 1, 1, "", "download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[440, 2, 1, "", "Downloader"]], "neural_compressor.ux.components.model_zoo.downloader.Downloader": [[440, 3, 1, "", "download"], [440, 3, 1, "", "download_config"], [440, 3, 1, "", "download_file"], [440, 3, 1, "", "download_model"], [440, 3, 1, "", "download_yaml_config"], [440, 3, 1, "", "get_yaml_url"], [440, 3, 1, "", "unpack_archive"]], "neural_compressor.ux.components.model_zoo.list_models": [[442, 1, 1, "", "check_version"], [442, 1, 1, "", "get_available_models"], [442, 1, 1, "", "get_framework_module_name"], [442, 1, 1, "", "get_installed_frameworks"], [442, 1, 1, "", "list_models"], [442, 1, 1, "", "validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[444, 0, 0, "-", "names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[444, 2, 1, "", "MappingDirection"], [444, 2, 1, "", "NamesMapper"]], "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper": [[444, 4, 1, "", "domain_flavour_mappings"], [444, 4, 1, "", "domain_mappings"], [444, 4, 1, "", "framework_mappings"], [444, 3, 1, "", "map_name"], [444, 4, 1, "", "precision_mappings"]], "neural_compressor.ux.components.optimization": [[450, 2, 1, "", "Optimizations"], [445, 0, 0, "-", "execute_optimization"], [446, 0, 0, "-", "factory"], [448, 0, 0, "-", "graph_optimizer"], [451, 0, 0, "-", "mixed_precision"], [454, 0, 0, "-", "neural_coder_optimization"], [456, 0, 0, "-", "optimization"], [457, 0, 0, "-", "pruning"], [460, 0, 0, "-", "tune"], [463, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.optimization.execute_optimization": [[445, 1, 1, "", "check_if_collect_tuning_history"], [445, 1, 1, "", "execute_optimization"], [445, 1, 1, "", "execute_optimization_pytorch_script"], [445, 1, 1, "", "execute_optimization_regular"], [445, 1, 1, "", "parse_logs"], [445, 1, 1, "", "parse_model_data_to_bench_names"]], "neural_compressor.ux.components.optimization.factory": [[446, 2, 1, "", "OptimizationFactory"]], "neural_compressor.ux.components.optimization.factory.OptimizationFactory": [[446, 3, 1, "", "get_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[447, 0, 0, "-", "graph_optimization"], [449, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[447, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization": [[447, 4, 1, "", "configuration_data"], [447, 3, 1, "", "execute"], [447, 3, 1, "", "generate_config"], [447, 4, 1, "", "optimization_script"], [447, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[449, 1, 1, "", "optimize_graph"], [449, 1, 1, "", "optimize_graph_config"], [449, 1, 1, "", "parse_args"], [449, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.mixed_precision": [[452, 0, 0, "-", "mixed_precision"], [453, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[452, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision": [[452, 4, 1, "", "configuration_data"], [452, 3, 1, "", "execute"], [452, 3, 1, "", "generate_config"], [452, 4, 1, "", "optimization_script"], [452, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[453, 1, 1, "", "optimize_graph"], [453, 1, 1, "", "optimize_graph_config"], [453, 1, 1, "", "parse_args"], [453, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[455, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[455, 1, 1, "", "optimize_pt_script"]], "neural_compressor.ux.components.optimization.optimization": [[456, 2, 1, "", "DataloaderInterface"], [456, 2, 1, "", "Optimization"], [456, 2, 1, "", "OptimizationInterface"]], "neural_compressor.ux.components.optimization.optimization.Optimization": [[456, 4, 1, "", "command"], [456, 4, 1, "", "config_filename"], [456, 4, 1, "", "configuration_data"], [456, 3, 1, "", "execute"], [456, 3, 1, "", "generate_config"], [456, 4, 1, "", "optimization_script"], [456, 4, 1, "", "output_model_dir"], [456, 4, 1, "", "output_model_name"], [456, 4, 1, "", "parameters"], [456, 4, 1, "", "workdir"]], "neural_compressor.ux.components.optimization.pruning": [[458, 0, 0, "-", "optimize_model"], [459, 0, 0, "-", "pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[458, 1, 1, "", "optimize_model"], [458, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[459, 2, 1, "", "Pruning"]], "neural_compressor.ux.components.optimization.pruning.pruning.Pruning": [[459, 4, 1, "", "configuration_data"], [459, 3, 1, "", "execute"], [459, 3, 1, "", "generate_config"], [459, 4, 1, "", "optimization_script"], [459, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tune": [[461, 0, 0, "-", "tune_model"], [462, 0, 0, "-", "tuning"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[461, 1, 1, "", "parse_args"], [461, 1, 1, "", "set_eager_execution"], [461, 1, 1, "", "tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[462, 2, 1, "", "AccuracyCriterion"], [462, 2, 1, "", "Tuning"], [462, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.optimization.tune.tuning.Tuning": [[462, 4, 1, "", "configuration_data"], [462, 3, 1, "", "execute"], [462, 3, 1, "", "generate_config"], [462, 4, 1, "", "optimization_script"], [462, 4, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tuning_history": [[463, 2, 1, "", "TuningHistory"], [463, 2, 1, "", "Watcher"], [463, 1, 1, "", "tuning_history"], [463, 1, 1, "", "tuning_history_path"]], "neural_compressor.ux.components.optimization.tuning_history.TuningHistory": [[463, 3, 1, "", "send_history_snapshot"]], "neural_compressor.ux.components.optimization.tuning_history.Watcher": [[463, 3, 1, "", "history_file_modification_time"], [463, 3, 1, "", "stop"], [463, 3, 1, "", "was_history_file_changed"]], "neural_compressor.ux.components.profiling": [[464, 0, 0, "-", "execute_profiling"], [465, 0, 0, "-", "factory"], [467, 0, 0, "-", "profile_model"], [468, 0, 0, "-", "profiler"], [469, 0, 0, "-", "profiling"], [471, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.ux.components.profiling.execute_profiling": [[464, 1, 1, "", "execute_profiling"], [464, 1, 1, "", "execute_real_profiling"]], "neural_compressor.ux.components.profiling.factory": [[465, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.factory.ProfilerFactory": [[465, 3, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.profile_model": [[467, 1, 1, "", "load_profiling_details"], [467, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.profiling.profiler": [[468, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.profiler.Profiler": [[468, 3, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.profiling": [[469, 2, 1, "", "DataloaderInterface"], [469, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.profiling.profiling.Profiling": [[469, 4, 1, "", "config_filename"], [469, 4, 1, "", "config_path"], [469, 3, 1, "", "execute"], [469, 3, 1, "", "generate_config"], [469, 4, 1, "", "profiling_data"], [469, 4, 1, "", "workdir"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[470, 0, 0, "-", "factory"], [472, 0, 0, "-", "profiler"], [473, 0, 0, "-", "utils"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[470, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory": [[470, 3, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[472, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler": [[472, 3, 1, "", "build_dataloader"], [472, 3, 1, "", "convert_nodes_to_list"], [472, 3, 1, "", "create_tf_config"], [472, 3, 1, "", "get_node_by_name"], [472, 3, 1, "", "initialize_graph"], [472, 3, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[473, 1, 1, "", "delete_assign"]], "neural_compressor.ux.inc_bench": [[474, 1, 1, "", "main"], [474, 1, 1, "", "prepare_environment"]], "neural_compressor.ux.utils": [[476, 0, 0, "-", "consts"], [477, 0, 0, "-", "environment"], [478, 0, 0, "-", "exceptions"], [479, 0, 0, "-", "executor"], [480, 0, 0, "-", "expiring_dict"], [481, 0, 0, "-", "github_info"], [482, 0, 0, "-", "hw_info"], [484, 0, 0, "-", "json_serializer"], [485, 0, 0, "-", "logger"], [486, 0, 0, "-", "parser"], [487, 0, 0, "-", "proc"], [488, 0, 0, "-", "processes"], [489, 0, 0, "-", "singleton"], [490, 0, 0, "-", "status_updates"], [491, 0, 0, "-", "templates"], [494, 0, 0, "-", "utils"], [499, 0, 0, "-", "workload"], [505, 0, 0, "-", "yaml_utils"]], "neural_compressor.ux.utils.consts": [[476, 2, 1, "", "DomainFlavours"], [476, 2, 1, "", "Domains"], [476, 2, 1, "", "ExecutionStatus"], [476, 2, 1, "", "Frameworks"], [476, 2, 1, "", "OptimizationTypes"], [476, 2, 1, "", "Precisions"], [476, 2, 1, "", "Strategies"]], "neural_compressor.ux.utils.environment": [[477, 2, 1, "", "Environment"]], "neural_compressor.ux.utils.environment.Environment": [[477, 3, 1, "", "clean_workloads_wip_status"], [477, 3, 1, "", "ensure_workdir_exists_and_writeable"], [477, 3, 1, "", "migrate_database"]], "neural_compressor.ux.utils.exceptions": [[478, 7, 1, "", "AccessDeniedException"], [478, 7, 1, "", "ClientErrorException"], [478, 7, 1, "", "InternalException"], [478, 7, 1, "", "NotFoundException"]], "neural_compressor.ux.utils.executor": [[479, 2, 1, "", "Executor"]], "neural_compressor.ux.utils.executor.Executor": [[479, 4, 1, "", "additional_log_names"], [479, 3, 1, "", "call"], [479, 3, 1, "", "call_one"], [479, 3, 1, "", "is_multi_commands"], [479, 4, 1, "", "log_name"], [479, 4, 1, "", "process_duration"], [479, 3, 1, "", "refresh_workdir"], [479, 4, 1, "", "request_id"], [479, 4, 1, "", "workdir"]], "neural_compressor.ux.utils.expiring_dict": [[480, 2, 1, "", "ExpiringDict"], [480, 2, 1, "", "ExpiringDictItem"]], "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem": [[480, 3, 1, "", "is_expired"]], "neural_compressor.ux.utils.github_info": [[481, 2, 1, "", "GithubInfo"]], "neural_compressor.ux.utils.github_info.GithubInfo": [[481, 3, 1, "", "tag"]], "neural_compressor.ux.utils.hw_info": [[482, 2, 1, "", "HWInfo"], [482, 1, 1, "", "get_bios_version"], [482, 1, 1, "", "get_distribution"], [482, 1, 1, "", "get_framework_dependency_info"], [482, 1, 1, "", "get_framework_info"], [482, 1, 1, "", "get_kernel_version"], [482, 1, 1, "", "get_number_of_sockets"], [482, 1, 1, "", "is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info.HWInfo": [[482, 3, 1, "", "initialize"], [482, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.json_serializer": [[484, 2, 1, "", "JsonSerializer"]], "neural_compressor.ux.utils.json_serializer.JsonSerializer": [[484, 3, 1, "", "serialize"], [484, 3, 1, "", "serialize_item"]], "neural_compressor.ux.utils.logger": [[485, 1, 1, "", "change_log_level"]], "neural_compressor.ux.utils.parser": [[486, 2, 1, "", "AccuracyParser"], [486, 2, 1, "", "BenchmarkParserFactory"], [486, 2, 1, "", "OptimizationParser"], [486, 2, 1, "", "Parser"], [486, 2, 1, "", "PerformanceParser"], [486, 2, 1, "", "ProfilingParser"]], "neural_compressor.ux.utils.parser.AccuracyParser": [[486, 4, 1, "", "patterns"], [486, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.BenchmarkParserFactory": [[486, 3, 1, "", "get_parser"]], "neural_compressor.ux.utils.parser.OptimizationParser": [[486, 4, 1, "", "patterns"], [486, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.Parser": [[486, 4, 1, "", "patterns"], [486, 3, 1, "", "process"]], "neural_compressor.ux.utils.parser.PerformanceParser": [[486, 4, 1, "", "patterns"], [486, 3, 1, "", "process"], [486, 3, 1, "", "summarize_partial"], [486, 3, 1, "", "summarize_value"], [486, 3, 1, "", "update_partial"]], "neural_compressor.ux.utils.parser.ProfilingParser": [[486, 4, 1, "", "patterns"], [486, 3, 1, "", "process"], [486, 3, 1, "", "unify_time"]], "neural_compressor.ux.utils.proc": [[487, 2, 1, "", "Proc"]], "neural_compressor.ux.utils.proc.Proc": [[487, 4, 1, "", "info"], [487, 4, 1, "", "info_path"], [487, 4, 1, "", "is_ok"], [487, 4, 1, "", "output"], [487, 4, 1, "", "output_path"], [487, 3, 1, "", "remove_logs"], [487, 3, 1, "", "run"], [487, 4, 1, "", "tail"]], "neural_compressor.ux.utils.processes": [[488, 2, 1, "", "NCProcesses"]], "neural_compressor.ux.utils.processes.NCProcesses": [[488, 4, 1, "", "is_ok"], [488, 3, 1, "", "remove_successful_logs"], [488, 3, 1, "", "return_code_all"]], "neural_compressor.ux.utils.singleton": [[489, 2, 1, "", "Singleton"]], "neural_compressor.ux.utils.status_updates": [[490, 1, 1, "", "get_status_update_function"]], "neural_compressor.ux.utils.templates": [[492, 0, 0, "-", "metric"], [493, 0, 0, "-", "workdir"]], "neural_compressor.ux.utils.templates.metric": [[492, 2, 1, "", "Metric"]], "neural_compressor.ux.utils.templates.metric.Metric": [[492, 4, 1, "", "acc_input_model"], [492, 4, 1, "", "acc_optimized_model"], [492, 4, 1, "", "accuracy"], [492, 3, 1, "", "calculate_throughput"], [492, 3, 1, "", "insert_data"], [492, 4, 1, "", "latency"], [492, 4, 1, "", "optimization_time"], [492, 4, 1, "", "path_optimized_model"], [492, 4, 1, "", "profiling_data"], [492, 4, 1, "", "size_input_model"], [492, 4, 1, "", "size_optimized_model"], [492, 4, 1, "", "throughput"]], "neural_compressor.ux.utils.templates.workdir": [[493, 2, 1, "", "Workdir"]], "neural_compressor.ux.utils.templates.workdir.Workdir": [[493, 3, 1, "", "clean_logs"], [493, 3, 1, "", "clean_status"], [493, 3, 1, "", "ensure_working_path_exists"]], "neural_compressor.ux.utils.utils": [[494, 1, 1, "", "check_module"], [494, 1, 1, "", "deprecated"], [494, 1, 1, "", "determine_ip"], [494, 1, 1, "", "export_to_csv"], [494, 1, 1, "", "filter_transforms"], [494, 1, 1, "", "get_dataset_path"], [494, 1, 1, "", "get_default_pruning_config_path"], [494, 1, 1, "", "get_file_extension"], [494, 1, 1, "", "get_framework_from_path"], [494, 1, 1, "", "get_height_width_from_size"], [494, 1, 1, "", "get_metrics_dict"], [494, 1, 1, "", "get_model_zoo_config_path"], [494, 1, 1, "", "get_model_zoo_model_path"], [494, 1, 1, "", "get_module_version"], [494, 1, 1, "", "get_predefined_config_path"], [494, 1, 1, "", "get_shape_from_transforms"], [494, 1, 1, "", "get_size"], [494, 1, 1, "", "is_dataset_file"], [494, 1, 1, "", "is_development_env"], [494, 1, 1, "", "is_hidden"], [494, 1, 1, "", "load_dataloader_config"], [494, 1, 1, "", "load_help_nc_params"], [494, 1, 1, "", "load_metrics_config"], [494, 1, 1, "", "load_model_config"], [494, 1, 1, "", "load_model_wise_params"], [494, 1, 1, "", "load_precisions_config"], [494, 1, 1, "", "load_pruning_details_config"], [494, 1, 1, "", "load_transforms_config"], [494, 1, 1, "", "load_transforms_filter_config"], [494, 1, 1, "", "normalize_domain"], [494, 1, 1, "", "normalize_framework"], [494, 1, 1, "", "normalize_string"], [494, 1, 1, "", "parse_bool_value"], [494, 1, 1, "", "parse_to_float_list"], [494, 1, 1, "", "parse_to_string_list"], [494, 1, 1, "", "parse_version"], [494, 1, 1, "", "release_tag"], [494, 1, 1, "", "replace_with_values"], [494, 1, 1, "", "verify_file_path"]], "neural_compressor.ux.utils.workload": [[495, 0, 0, "-", "config"], [496, 0, 0, "-", "dataloader"], [497, 0, 0, "-", "evaluation"], [498, 0, 0, "-", "graph_optimization"], [500, 0, 0, "-", "mixed_precision"], [501, 0, 0, "-", "model"], [502, 0, 0, "-", "pruning"], [503, 0, 0, "-", "quantization"], [504, 0, 0, "-", "tuning"]], "neural_compressor.ux.utils.workload.config": [[495, 2, 1, "", "Config"]], "neural_compressor.ux.utils.workload.config.Config": [[495, 3, 1, "", "dump"], [495, 3, 1, "", "get_performance_configs"], [495, 3, 1, "", "get_performance_cores_per_instance"], [495, 3, 1, "", "get_performance_num_of_instance"], [495, 3, 1, "", "initialize"], [495, 3, 1, "", "load"], [495, 3, 1, "", "process_transform"], [495, 3, 1, "", "remove_accuracy_metric"], [495, 3, 1, "", "remove_dataloader"], [495, 3, 1, "", "set_accuracy_and_performance_batch_sizes"], [495, 3, 1, "", "set_accuracy_goal"], [495, 3, 1, "", "set_accuracy_metric"], [495, 3, 1, "", "set_evaluation_dataloader"], [495, 3, 1, "", "set_evaluation_dataset_path"], [495, 3, 1, "", "set_inputs"], [495, 3, 1, "", "set_optimization_precision"], [495, 3, 1, "", "set_outputs"], [495, 3, 1, "", "set_performance_cores_per_instance"], [495, 3, 1, "", "set_performance_iterations"], [495, 3, 1, "", "set_performance_num_of_instance"], [495, 3, 1, "", "set_performance_warmup"], [495, 3, 1, "", "set_quantization_approach"], [495, 3, 1, "", "set_quantization_batch_size"], [495, 3, 1, "", "set_quantization_dataloader"], [495, 3, 1, "", "set_quantization_dataset_path"], [495, 3, 1, "", "set_quantization_sampling_size"], [495, 3, 1, "", "set_transform"], [495, 3, 1, "", "set_workspace"]], "neural_compressor.ux.utils.workload.dataloader": [[496, 2, 1, "", "Dataloader"], [496, 2, 1, "", "Dataset"], [496, 2, 1, "", "Filter"], [496, 2, 1, "", "LabelBalance"], [496, 2, 1, "", "Transform"]], "neural_compressor.ux.utils.workload.dataloader.Dataloader": [[496, 3, 1, "", "serialize"], [496, 3, 1, "", "set_dataset"], [496, 3, 1, "", "set_transforms_from_list"]], "neural_compressor.ux.utils.workload.dataloader.Dataset": [[496, 3, 1, "", "is_dummy"], [496, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.dataloader.Transform": [[496, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation": [[497, 2, 1, "", "Accuracy"], [497, 2, 1, "", "Configs"], [497, 2, 1, "", "Evaluation"], [497, 2, 1, "", "Metric"], [497, 2, 1, "", "Performance"], [497, 2, 1, "", "Postprocess"], [497, 2, 1, "", "PostprocessSchema"]], "neural_compressor.ux.utils.workload.evaluation.Evaluation": [[497, 3, 1, "", "set_accuracy_postprocess_transforms"]], "neural_compressor.ux.utils.workload.evaluation.Metric": [[497, 4, 1, "", "name"], [497, 4, 1, "", "param"], [497, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema": [[497, 3, 1, "", "get_label_shift_value"]], "neural_compressor.ux.utils.workload.graph_optimization": [[498, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization": [[498, 3, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.mixed_precision": [[500, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision": [[500, 3, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.model": [[501, 2, 1, "", "Model"]], "neural_compressor.ux.utils.workload.model.Model": [[501, 4, 1, "", "inputs"], [501, 4, 1, "", "outputs"], [501, 3, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.pruning": [[502, 2, 1, "", "AdamOptimizer"], [502, 2, 1, "", "AdamWOptimizer"], [502, 2, 1, "", "Approach"], [502, 2, 1, "", "Criterion"], [502, 2, 1, "", "CrossEntropyLossCriterion"], [502, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [502, 2, 1, "", "KnowledgeDistillationLossCriterion"], [502, 2, 1, "", "Optimizer"], [502, 2, 1, "", "Pruning"], [502, 2, 1, "", "SGDOptimizer"], [502, 2, 1, "", "SelfKnowledgeDistillationLoss"], [502, 2, 1, "", "SparseCategoricalCrossentropyCriterion"], [502, 2, 1, "", "Train"], [502, 2, 1, "", "WeightCompressionApproach"], [502, 1, 1, "", "parse_dict_value_to_float"], [502, 1, 1, "", "parse_dict_value_to_int"]], "neural_compressor.ux.utils.workload.pruning.Train": [[502, 3, 1, "", "serialize"], [502, 3, 1, "", "set_postprocess_transforms"]], "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach": [[502, 3, 1, "", "initialize_pruners"], [502, 3, 1, "", "serialize"], [502, 3, 1, "", "serialize_pruner"]], "neural_compressor.ux.utils.workload.quantization": [[503, 2, 1, "", "Advance"], [503, 2, 1, "", "Calibration"], [503, 2, 1, "", "Quantization"], [503, 2, 1, "", "WiseConfig"], [503, 2, 1, "", "WiseConfigDetails"]], "neural_compressor.ux.utils.workload.tuning": [[504, 2, 1, "", "AccCriterion"], [504, 2, 1, "", "Diagnosis"], [504, 2, 1, "", "ExitPolicy"], [504, 2, 1, "", "MultiObjectives"], [504, 2, 1, "", "Strategy"], [504, 2, 1, "", "Tuning"], [504, 2, 1, "", "Workspace"]], "neural_compressor.ux.utils.workload.tuning.MultiObjectives": [[504, 4, 1, "", "objective"], [504, 4, 1, "", "weight"]], "neural_compressor.ux.utils.workload.tuning.Tuning": [[504, 3, 1, "", "set_max_trials"], [504, 3, 1, "", "set_performance_only"], [504, 3, 1, "", "set_random_seed"], [504, 3, 1, "", "set_timeout"], [504, 3, 1, "", "set_workspace"]], "neural_compressor.ux.utils.yaml_utils": [[505, 1, 1, "", "float_representer"], [505, 1, 1, "", "pruner_representer"]], "neural_compressor.ux.web": [[506, 0, 0, "-", "communication"], [507, 0, 0, "-", "configuration"], [508, 0, 0, "-", "exceptions"], [510, 0, 0, "-", "router"], [511, 0, 0, "-", "server"], [514, 0, 0, "-", "service"]], "neural_compressor.ux.web.communication": [[506, 2, 1, "", "Message"], [506, 2, 1, "", "MessageQueue"], [506, 2, 1, "", "Request"], [506, 2, 1, "", "Response"], [506, 1, 1, "", "create_simple_response"]], "neural_compressor.ux.web.communication.Message": [[506, 4, 1, "", "data"], [506, 4, 1, "", "status"], [506, 4, 1, "", "subject"]], "neural_compressor.ux.web.communication.MessageQueue": [[506, 3, 1, "", "get"], [506, 3, 1, "", "post_error"], [506, 3, 1, "", "post_failure"], [506, 3, 1, "", "post_success"]], "neural_compressor.ux.web.configuration": [[507, 2, 1, "", "Configuration"]], "neural_compressor.ux.web.configuration.Configuration": [[507, 3, 1, "", "determine_gui_port"], [507, 3, 1, "", "determine_log_level"], [507, 3, 1, "", "determine_server_port"], [507, 3, 1, "", "determine_url_prefix"], [507, 3, 1, "", "determine_values_from_environment"], [507, 3, 1, "", "dump_token_to_file"], [507, 3, 1, "", "get_command_line_args"], [507, 3, 1, "", "get_url"], [507, 4, 1, "", "global_config_directory"], [507, 3, 1, "", "is_port_taken"], [507, 3, 1, "", "set_up"]], "neural_compressor.ux.web.exceptions": [[508, 2, 1, "", "ServiceNotFoundException"]], "neural_compressor.ux.web.router": [[510, 2, 1, "", "DeferredRoutingDefinition"], [510, 2, 1, "", "DeferredSubprocessRoutingDefinition"], [510, 2, 1, "", "RealtimeRoutingDefinition"], [510, 2, 1, "", "Router"], [510, 2, 1, "", "RoutingDefinition"], [510, 1, 1, "", "find_pattern_in_graph"], [510, 1, 1, "", "get_model_graph"], [510, 1, 1, "", "get_system_info"]], "neural_compressor.ux.web.router.Router": [[510, 3, 1, "", "handle"]], "neural_compressor.ux.web.server": [[511, 1, 1, "", "allow_api_call"], [511, 1, 1, "", "block_iframe"], [511, 1, 1, "", "block_sniffing"], [511, 1, 1, "", "build_parameters"], [511, 1, 1, "", "disable_cache"], [511, 1, 1, "", "get_tls_args"], [511, 1, 1, "", "handle_api_call"], [511, 1, 1, "", "page_not_found"], [511, 1, 1, "", "require_api_token"], [511, 1, 1, "", "root"], [511, 1, 1, "", "run_server"], [511, 1, 1, "", "web_socket_publisher"]], "neural_compressor.ux.web.service": [[512, 0, 0, "-", "benchmark"], [513, 0, 0, "-", "history_snapshot_parser"], [515, 0, 0, "-", "model"], [516, 0, 0, "-", "optimization"], [517, 0, 0, "-", "profiling"], [518, 0, 0, "-", "request_data_processor"], [519, 0, 0, "-", "response_generator"], [520, 0, 0, "-", "workload"]], "neural_compressor.ux.web.service.benchmark": [[512, 2, 1, "", "BenchmarkService"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[513, 2, 1, "", "HistorySnapshotParser"]], "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser": [[513, 3, 1, "", "extract_accuracy"], [513, 3, 1, "", "extract_performance"], [513, 3, 1, "", "parse_history_item"], [513, 3, 1, "", "parse_history_snapshot"]], "neural_compressor.ux.web.service.model": [[515, 2, 1, "", "ModelService"]], "neural_compressor.ux.web.service.model.ModelService": [[515, 3, 1, "", "get_model"]], "neural_compressor.ux.web.service.optimization": [[516, 2, 1, "", "OptimizationService"]], "neural_compressor.ux.web.service.profiling": [[517, 2, 1, "", "ProfilingService"]], "neural_compressor.ux.web.service.profiling.ProfilingService": [[517, 3, 1, "", "generate_csv"]], "neural_compressor.ux.web.service.request_data_processor": [[518, 2, 1, "", "RequestDataProcessor"]], "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor": [[518, 3, 1, "", "get_string_value"]], "neural_compressor.ux.web.service.response_generator": [[519, 2, 1, "", "ResponseGenerator"]], "neural_compressor.ux.web.service.response_generator.ResponseGenerator": [[519, 3, 1, "", "add_refresh"], [519, 3, 1, "", "from_exception"], [519, 3, 1, "", "get_status_code_for_exception"], [519, 3, 1, "", "serve_from_filesystem"]], "neural_compressor.ux.web.service.workload": [[520, 2, 1, "", "WorkloadService"]], "neural_compressor.ux.web.service.workload.WorkloadService": [[520, 3, 1, "", "get_code_template"], [520, 3, 1, "", "get_config"], [520, 3, 1, "", "get_output"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property", "5": "py:data", "6": "py:attribute", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"], "6": ["py", "attribute", "Python attribute"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"644ec953a7dc_pruning_support": 0, "6ece06672ed3_v1_14": 1, "modul": [1, 5, 6, 8, 11, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 107, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 158, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 185, 186, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 223, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 254, 255, 256, 258, 259, 260, 261, 264, 265, 266, 269, 270, 271, 272, 273, 274, 275, 277, 278, 280, 281, 282, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 392, 393, 394, 395, 398, 399, 400, 402, 403, 405, 406, 407, 408, 409, 411, 413, 414, 420, 421, 423, 424, 426, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 442, 444, 445, 446, 447, 449, 452, 453, 455, 456, 458, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 549], "content": [1, 5, 6, 7, 8, 11, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 107, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 398, 399, 400, 402, 403, 405, 406, 407, 408, 409, 411, 413, 414, 420, 421, 423, 424, 426, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 442, 444, 445, 446, 447, 449, 450, 452, 453, 455, 456, 458, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 528, 549, 562, 572], "function": [1, 5, 6, 13, 32, 38, 39, 61, 62, 64, 98, 99, 110, 112, 140, 141, 142, 146, 147, 148, 150, 153, 155, 158, 165, 173, 175, 179, 182, 183, 184, 187, 189, 190, 191, 192, 194, 196, 197, 199, 203, 211, 213, 217, 220, 221, 222, 224, 225, 226, 228, 229, 230, 231, 232, 235, 236, 238, 239, 240, 241, 242, 250, 254, 255, 259, 264, 269, 270, 271, 273, 276, 277, 278, 280, 281, 282, 283, 284, 285, 289, 293, 295, 296, 299, 305, 306, 308, 309, 310, 311, 314, 322, 326, 328, 329, 332, 333, 335, 336, 338, 339, 341, 342, 352, 353, 354, 356, 361, 363, 364, 366, 368, 371, 372, 377, 380, 381, 382, 393, 403, 420, 424, 426, 437, 438, 439, 442, 445, 449, 453, 455, 458, 461, 463, 464, 467, 473, 474, 482, 485, 490, 494, 502, 505, 506, 510, 511, 579], "6f0d0f71d92e_v1_13": 2, "9e89549a08c8_v1_11": 3, "block_mask": 4, "env": 5, "neural_compressor": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521], "adaptor": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 529, 530], "class": [6, 8, 11, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 107, 109, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 141, 142, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 238, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 254, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 269, 271, 272, 273, 274, 275, 276, 277, 280, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 339, 340, 343, 344, 345, 346, 348, 349, 350, 351, 352, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 398, 399, 400, 402, 405, 406, 407, 408, 409, 411, 413, 414, 421, 423, 426, 428, 429, 430, 431, 433, 434, 435, 436, 440, 444, 446, 447, 450, 452, 456, 459, 462, 463, 465, 468, 469, 470, 472, 476, 477, 479, 480, 481, 482, 484, 486, 487, 488, 489, 492, 493, 495, 496, 497, 498, 500, 501, 502, 503, 504, 506, 507, 508, 510, 512, 513, 515, 516, 517, 518, 519, 520, 529, 549, 562], "subpackag": [7, 16, 81, 105, 106, 108, 159, 184, 222, 234, 251, 252, 257, 262, 276, 297, 318, 391, 396, 410, 415, 422, 450, 466, 475, 483, 509], "submodul": [7, 12, 16, 28, 45, 70, 81, 89, 95, 100, 105, 106, 108, 111, 124, 137, 143, 150, 160, 167, 179, 183, 187, 194, 205, 217, 221, 224, 228, 234, 241, 251, 253, 257, 263, 267, 276, 283, 287, 297, 302, 318, 324, 333, 343, 347, 355, 367, 386, 391, 396, 397, 401, 404, 410, 412, 415, 416, 422, 425, 427, 432, 441, 443, 448, 450, 451, 454, 457, 460, 466, 471, 475, 483, 491, 499, 509, 514], "packag": [7, 28, 150, 167, 179, 183, 184, 187, 194, 205, 217, 221, 222, 224, 228, 234, 241, 257, 262, 263, 276, 283, 287, 302, 318, 324, 333, 343, 386, 391, 450, 562, 602, 604, 606, 607], "kera": [8, 433], "keras_util": [9, 10], "quantiz": [10, 37, 274, 311, 503, 525, 528, 545, 564, 578, 584, 587, 598, 609, 617, 618, 619, 627], "mxnet": [11, 575, 589, 618, 623, 627], "mxnet_util": [12, 13], "util": [13, 38, 140, 147, 232, 310, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 393, 437, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 532, 537, 571], "onnxrt": [14, 425, 426, 575, 589, 623], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "calibr": 15, "oper": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "activ": 17, "argmax": 18, "attent": 19, "binary_op": 20, "concat": 21, "conv": 22, "direct_q8": 23, "embed_layernorm": 24, "gather": 25, "gavgpool": 26, "gemm": 27, "lstm": 29, "matmul": 30, "maxpool": 31, "op": 32, "pad": 33, "pool": 34, "resiz": 35, "split": 36, "pytorch": [39, 338, 427, 428, 575, 579, 589, 618, 619, 622, 623, 627], "queri": [40, 529], "tensorflow": [41, 431, 432, 433, 434, 435, 436, 437, 575, 579, 589, 618, 619, 622, 623, 627], "tf_util": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140], "graph_convert": 42, "graph_converter_without_calib": 43, "graph_rewrit": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "bf16": [44, 45, 533], "bf16_convert": [44, 141], "gener": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79], "convert_add_to_biasadd": 46, "convert_layout": 47, "convert_leakyrelu": 48, "convert_nan_to_random": 49, "convert_placeholder_to_const": 50, "dequantize_cast_optim": 51, "dilated_contract": 52, "dummy_biasadd": 53, "expanddims_optim": 54, "fetch_weight_from_reshap": 55, "fold_batch_norm": 56, "fold_const": 57, "fuse_biasadd_add": 58, "fuse_column_wise_mul": 59, "fuse_conv_with_math": 60, "fuse_decomposed_bn": 61, "fuse_decomposed_in": 62, "fuse_gelu": 63, "fuse_layer_norm": 64, "fuse_pad_with_conv": 65, "fuse_pad_with_fp32_conv": 66, "fuse_reshape_transpos": 67, "graph_cse_optim": 68, "grappler_pass": 69, "insert_print_nod": 71, "move_squeeze_after_relu": 72, "pre_optim": 73, "remove_training_nod": 74, "rename_batch_norm": 75, "split_shared_input": 76, "strip_equivalent_nod": 77, "strip_unused_nod": 78, "switch_optim": 79, "graph_bas": 80, "int8": [82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 581, 627], "freeze_fake_qu": 82, "freeze_valu": 83, "freeze_value_without_calib": 84, "fuse_conv_redundant_dequant": 85, "fuse_conv_requant": 86, "fuse_matmul_redundant_dequant": 87, "fuse_matmul_requant": 88, "meta_op_optim": 90, "post_hostconst_convert": 91, "post_quantized_op_cs": 92, "rnn_convert": 93, "scale_propag": 94, "onnx": [95, 96, 97, 98, 99, 144, 531, 535, 587, 618, 627], "onnx_graph": 96, "onnx_nod": 97, "onnx_schema": 98, "tf2onnx_util": 99, "qdq": [100, 101, 102, 103, 117, 118, 119, 120, 121, 122, 123, 124, 125, 627], "insert_qdq_pattern": 101, "merge_duplicated_qdq": 102, "share_qdq_y_pattern": 103, "graph_util": 104, "quantize_graph": [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132], "qat": [107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 627], "fake_quant": 107, "quantize_config": 109, "quantize_help": 110, "quantize_lay": [111, 112, 113, 114, 115], "optimize_lay": 112, "quantize_layer_add": 113, "quantize_layer_bas": 114, "quantize_layer_bn": 115, "quantize_wrapp": 116, "fuse_qdq_bn": 117, "fuse_qdq_concatv2": 118, "fuse_qdq_conv": 119, "fuse_qdq_deconv": 120, "fuse_qdq_in": 121, "fuse_qdq_matmul": 122, "fuse_qdq_pool": 123, "optimize_qdq": 125, "quantize_graph_bas": 126, "quantize_graph_bn": 127, "quantize_graph_concatv2": 128, "quantize_graph_conv": 129, "quantize_graph_for_intel_cpu": 130, "quantize_graph_matmul": 131, "quantize_graph_pool": 132, "quantize_graph_common": 133, "tf2onnx_convert": 134, "transform_graph": [135, 136, 137, 138, 139], "bias_correct": 135, "graph_transform_bas": 136, "insert_log": 138, "rerange_quantized_concat": 139, "torch_util": [141, 142, 143, 144, 145, 146, 147, 199], "hawq_metr": 142, "smooth_quant": [145, 151], "symbolic_trac": 146, "algorithm": [148, 149, 150, 151, 152, 538, 624], "fast_bias_correct": 149, "weight_correct": 152, "benchmark": [153, 191, 340, 341, 342, 343, 359, 512, 541, 548, 572, 573, 617], "conf": [154, 155, 156, 157], "config": [154, 158, 495, 542, 574, 575, 611], "dotdict": 155, "pythonic_config": 157, "contrib": [159, 160, 161, 162, 566], "strategi": [160, 161, 162, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 569, 570, 621, 624], "sigopt": [161, 621, 624], "tpe": [162, 624], "data": [163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 551, 580], "dataload": [163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 193, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 361, 496, 552, 574, 575], "base_dataload": [163, 201], "default_dataload": [165, 203], "fetcher": [166, 204], "attribut": [167, 175, 184, 213, 222, 234, 262, 287, 333, 405, 523], "mxnet_dataload": [168, 206], "onnxrt_dataload": [169, 207], "pytorch_dataload": [170, 208], "sampler": [171, 209], "tensorflow_dataload": [172, 210], "dataset": [173, 174, 175, 176, 177, 178, 179, 180, 211, 212, 213, 214, 215, 216, 217, 218, 362, 553, 572, 575, 585], "bert_dataset": [173, 211], "coco_dataset": [174, 212], "dummy_dataset": [176, 214], "dummy_dataset_v2": [177, 215], "imagenet_dataset": [178, 216], "style_transfer_dataset": [180, 218], "filter": [181, 182, 183, 219, 220, 221], "coco_filt": [181, 219], "transform": [185, 186, 187, 188, 189, 190, 223, 224, 225, 226, 377, 554, 585, 623], "coco_transform": 185, "imagenet_transform": [186, 223], "postprocess": [188, 198], "token": [189, 225], "experiment": [191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275], "common": [192, 193, 194, 195, 196, 197, 198, 199, 525, 547, 582], "criterion": [192, 550], "metric": [195, 235, 236, 237, 238, 239, 240, 241, 242, 277, 278, 279, 280, 281, 282, 283, 284, 368, 492, 534, 555, 585, 589], "model": [196, 286, 287, 288, 289, 290, 291, 292, 293, 294, 369, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 501, 515, 556, 567, 572, 581, 584, 587, 591, 598, 627], "optim": [197, 370, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 516, 557, 572, 599, 609, 612], "compon": [200, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 558], "distil": [227, 559, 577, 578, 617, 627], "export": [228, 229, 230, 231, 232, 581], "qlinear2qdq": 229, "tf2onnx": 230, "torch2onnx": 231, "graph_optim": [233, 447, 448, 449, 498], "bleu": [235, 277, 549], "bleu_util": [236, 278], "coco_label_map": [237, 279], "coco_tool": [238, 280], "evaluate_squad": [239, 281], "f1": [240, 282], "mixed_precis": [243, 451, 452, 453, 500], "model_convers": 244, "na": [245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 526, 562, 572, 617], "basic_na": 245, "dyna": 246, "dynast": [247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "dynas_manag": 247, "dynas_predictor": 248, "dynas_search": 249, "dynas_util": 250, "supernetwork": [252, 253, 254, 255, 256], "machine_transl": [253, 254, 255, 256], "modules_supernetwork": 254, "transformer_interfac": 255, "transformer_supernetwork": 256, "nas_util": 259, "search_algorithm": 260, "prune": [261, 272, 307, 457, 458, 459, 502, 563, 572, 614, 615, 617, 627], "pruning_recip": [262, 263, 264, 265], "pattern": [263, 264, 265, 269, 299, 614, 615], "tile_pattern": 265, "pruning_v2": 266, "pytorch_prun": [267, 268, 269, 270, 271, 272, 273], "logger": [268, 298, 336, 485], "prune_util": 270, "pruner": [271, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310], "schedul": [273, 275, 309, 565, 614, 615], "mix_precis": 285, "base_model": 286, "keras_model": 288, "mxnet_model": 290, "nets_factori": 291, "onnx_model": 292, "tensorflow_model": 293, "torch_model": 294, "object": [295, 544, 611], "criteria": [296, 614, 615, 624], "pruner_legaci": [300, 301, 302, 303, 304, 305], "gradient_sensit": 300, "group_lasso": 301, "magnitud": 303, "pattern_lock": 304, "reg": 308, "auto_mixed_precis": 312, "basic": [313, 526, 624], "bayesian": [314, 624], "conserv": [315, 624], "exhaust": [316, 624], "hawq_v2": [317, 624], "mse": [319, 624], "mse_v2": [320, 624], "random": [321, 624], "constant": [323, 331], "tuning_sampl": 325, "tuning_spac": 326, "tuning_struct": 327, "train": [329, 525, 546, 579, 618], "collect_layer_histogram": 330, "create_obj_from_config": 332, "kl_diverg": 334, "load_huggingfac": 335, "option": [337, 572, 579, 597], "ux": [340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520], "benchmark_model": 341, "execute_benchmark": 342, "config_gener": [344, 345, 346, 347, 348, 349, 350, 351], "benchmark_config_gener": 344, "graph_optimization_config_gener": 346, "mixed_precision_config_gener": 348, "profiling_config_gener": 349, "pruning_config_gener": 350, "quantization_config_gener": 351, "configuration_wizard": [352, 353, 354, 355, 356, 357], "configuration_pars": 352, "get_boundary_nod": 353, "get_configur": 354, "params_feed": 356, "pruning_config_pars": 357, "db_manag": [358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393], "db_model": [359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379], "benchmark_result": 360, "domain": [363, 421], "domain_flavour": 364, "exampl": [365, 525, 526, 529, 573, 574, 575, 577, 578, 579, 580, 581, 590, 591, 594, 598, 611, 612, 614, 615, 618, 622, 627], "framework": [366, 574, 575, 581, 583, 591, 617], "optimization_typ": 371, "precis": [372, 543, 590, 619], "profil": [373, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 517, 572], "profiling_result": 374, "project": [375, 572], "pruning_detail": 376, "tuning_detail": 378, "tuning_histori": [379, 463], "db_oper": [380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390], "benchmark_api_interfac": 380, "dataset_api_interfac": 381, "diagnosis_api_interfac": 383, "dictionaries_api_interfac": 384, "examples_api_interfac": 385, "model_api_interfac": 387, "optimization_api_interfac": 388, "profiling_api_interfac": 389, "project_api_interfac": 390, "params_interfac": 392, "diagnosi": [394, 395, 396, 397, 398, 399, 400, 401, 402, 572], "factori": [395, 446, 465, 470], "onnx_diagnosi": [397, 398], "onnxrt_diagnosi": 398, "op_detail": 399, "op_entri": 400, "tensorflow_diagnosi": [401, 402], "file_brows": [403, 404], "graph": [405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 572], "collaps": 406, "edg": 407, "graph_read": 409, "node": 411, "reader": [412, 413, 414], "onnxrt_read": 413, "tensorflow_read": 414, "jobs_manag": [416, 417, 418, 419], "jobs_control_queu": 417, "request": [419, 524], "manage_workspac": 420, "model_type_gett": 424, "repositori": 429, "shape": 430, "frozen_pb": 431, "meta_graph": 434, "saved_model": 436, "model_zoo": [438, 439, 440, 441, 442], "download_config": 438, "download_model": 439, "download": 440, "list_model": 442, "names_mapp": [443, 444], "execute_optim": 445, "optimize_model": [449, 453, 455, 458], "neural_coder_optim": [454, 455], "tune": [460, 461, 462, 504, 618, 624], "tune_model": 461, "execute_profil": 464, "profile_model": 467, "tensorflow_profil": [470, 471, 472, 473], "inc_bench": 474, "const": 476, "environ": [477, 587, 595], "except": [478, 508], "executor": 479, "expiring_dict": 480, "github_info": 481, "hw_info": 482, "json_seri": 484, "parser": 486, "proc": 487, "process": [488, 624], "singleton": 489, "status_upd": 490, "templat": [491, 492, 493, 524], "workdir": 493, "workload": [495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 520], "evalu": [497, 579], "yaml_util": 505, "web": [506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520], "commun": 506, "configur": [507, 579, 583, 613, 617, 621, 626], "router": 510, "server": 511, "servic": [512, 513, 514, 515, 516, 517, 518, 519, 520], "history_snapshot_pars": 513, "request_data_processor": 518, "response_gener": 519, "version": 521, "intel": [522, 528, 572, 586, 587, 595, 603, 609, 627, 628], "neural": [522, 525, 526, 528, 562, 572, 586, 587, 592, 596, 598, 603, 609, 614, 615, 621, 628], "compressor": [522, 525, 528, 572, 586, 587, 603, 609, 621, 628], "document": [522, 528, 628], "section": [522, 628], "contributor": [523, 524], "coven": [523, 524], "code": [523, 524, 526, 610], "conduct": [523, 524], "our": 523, "pledg": 523, "standard": 523, "respons": 523, "scope": [523, 615], "enforc": 523, "contribut": [524, 602, 606], "guidelin": 524, "pull": 524, "checklist": 524, "support": [524, 525, 526, 529, 573, 574, 575, 577, 578, 579, 581, 583, 586, 587, 589, 590, 591, 593, 594, 598, 599, 611, 612, 614, 617, 618, 622, 623, 626], "fx": 525, "introduct": [525, 526, 529, 572, 573, 574, 575, 577, 578, 579, 581, 583, 586, 589, 590, 591, 609, 611, 612, 614, 615, 617, 618, 621, 622, 623, 624, 626], "mode": [525, 627], "matrix": [525, 526, 529, 573, 574, 575, 577, 578, 579, 581, 583, 586, 589, 590, 591, 594, 611, 612, 614, 617, 618, 622, 626], "get": [525, 526, 528, 529, 573, 574, 575, 577, 578, 579, 583, 584, 589, 590, 592, 603, 610, 611, 612, 614, 617, 618, 622, 626], "start": [525, 526, 528, 529, 572, 573, 574, 575, 577, 578, 579, 583, 584, 589, 590, 592, 593, 597, 603, 611, 612, 614, 617, 618, 622, 626], "post": [525, 618], "static": [525, 618], "dynam": [525, 526, 618], "awar": [525, 618], "note": [525, 620], "detail": [525, 572, 615], "problem": 525, "architectur": [526, 562, 576, 586, 587], "search": [526, 562, 609], "api": [526, 528, 529, 539, 540, 558, 573, 574, 575, 577, 578, 579, 584, 585, 589, 590, 592, 596, 610, 611, 612, 614, 617], "usag": [526, 598, 609, 622, 624], "1": [526, 572, 579, 582, 585, 609, 627], "python": [526, 528, 568, 584, 589, 592, 596, 597, 604, 607, 617], "yaml": [526, 574, 575, 579, 583, 626], "2": [526, 558, 572, 579, 582, 585, 609, 627], "onli": 526, "advanc": 526, "custom": [526, 572, 589, 624], "secur": [527, 572, 579], "polici": [527, 624], "report": 527, "vulner": 527, "instal": [528, 572, 587, 593, 595, 602, 603, 606], "from": [528, 572, 587], "pypi": [528, 598], "select": [528, 603], "public": [528, 616], "event": [528, 616], "addit": 528, "research": 528, "collabor": 528, "work": [529, 618], "flow": [529, 618], "background": [529, 609], "ad": 529, "new": [529, 572, 604, 607, 624], "backend": 529, "capabl": 529, "implement": 529, "onnxrtadaptor": 529, "runtim": [531, 587, 618, 627], "torch": [532, 627], "convert": 533, "hawq": 534, "symbol": 536, "trace": 536, "user": [540, 574, 575, 579, 585, 617, 625, 626], "face": [540, 585], "mix": [543, 590, 619], "basedataload": 552, "experiement": 558, "deprec": 558, "0": [558, 627], "mixedprecis": 560, "modelconvers": 561, "bench": [572, 596], "tabl": 572, "binari": [572, 587], "sourc": [572, 587], "home": 572, "screen": 572, "creat": [572, 574], "predefin": 572, "displai": 572, "list": [572, 580, 623], "remov": 572, "develop": [572, 602, 606], "tab": 572, "wizard": 572, "edit": 572, "entri": 572, "inform": [572, 588], "demo": 572, "system": [572, 587, 613], "file": [574, 575, 583, 626], "specif": [574, 575], "design": [576, 624], "workflow": 576, "knowledg": [577, 627], "intermedi": 577, "layer": 577, "self": 577, "distribut": [579, 598], "infer": 579, "featur": [579, 583, 586, 598, 599, 603, 617, 618, 622, 626], "pure": 579, "defin": 579, "horovodrun": 579, "execut": 579, "releas": [580, 604, 607, 620], "fp32": 581, "appendix": 581, "frequent": 582, "ask": 582, "question": 582, "build": [582, 589], "issu": [582, 620], "3": [582, 593, 609, 616], "quick": [584, 597], "sampl": 584, "jupyterlab": [584, 603], "extens": [584, 592, 602, 603, 606, 609, 610, 627], "gui": 584, "valid": [584, 587, 627], "incompat": [585, 620], "chang": [585, 608, 610, 620], "between": 585, "v1": 585, "built": [585, 587, 589], "infrastructur": 586, "linux": 587, "prerequisit": 587, "ai": 587, "kit": 587, "window": 587, "requir": [587, 602, 606], "hardwar": [587, 627], "cpu": [587, 595, 627], "base": 587, "64": 587, "compat": 587, "processor": 587, "gpu": 587, "": [587, 610], "xe": 587, "multipl": [587, 611, 627], "vendor": 587, "through": [587, 627], "softwar": 587, "legal": 588, "licens": 588, "citat": 588, "trademark": 588, "singl": [589, 611], "multi": 589, "coder": [592, 596, 598, 609], "what": [592, 610], "do": 592, "we": 592, "offer": 592, "jupyt": [592, 593, 604, 607], "lab": [592, 593], "launcher": [592, 597], "contact": 592, "aw": 593, "amazon": 593, "sagemak": 593, "For": 593, "studio": 593, "notebook": 593, "instanc": 593, "guid": [593, 625], "bigdl": 594, "nano": 594, "platform": [595, 621], "best": [595, 603], "perform": [595, 621], "set": [595, 609], "mkl": 595, "openmp": 595, "jemalloc": 595, "numa": 595, "control": 595, "variabl": 595, "frequenc": 595, "govern": 595, "enabl": [596, 603, 609], "superbench": 596, "argument": 597, "v0": 600, "4": [600, 609, 616], "highlight": 600, "other": 600, "changelog": [601, 605], "neural_compressor_ext_lab": [602, 604], "uninstal": [602, 606], "auto": [603, 609, 619], "Or": 603, "let": 603, "u": 603, "help": 603, "you": 603, "pre": 603, "requisit": 603, "make": [604, 607, 610], "manual": [604, 607], "npm": [604, 607], "autom": [604, 607], "publish": [604, 607], "conda": [604, 607], "forg": [604, 607], "neural_compressor_ext_lab_alibaba": [606, 607], "log": 608, "unreleas": 608, "vscode": 609, "open": 609, "icon": 609, "5": 609, "welcom": 610, "your": 610, "v": 610, "folder": 610, "setup": 610, "up": 610, "run": 610, "straight": 610, "awai": 610, "explor": 610, "test": 610, "go": 610, "further": 610, "orchestr": 612, "One": 612, "shot": 612, "network": [614, 615], "type": 615, "sparsiti": 615, "decai": 615, "regular": 615, "refer": [615, 618], "full": 616, "56": 616, "2023": 616, "2022": 616, "34": 616, "2021": 616, "15": 616, "2018": 616, "2020": 616, "style": 617, "access": 617, "fundament": 618, "scheme": 618, "ipex": 618, "approach": 618, "accuraci": [618, 624], "turn": 619, "off": 619, "dure": 619, "known": 620, "prepar": 621, "benefit": 621, "comparison": 621, "differ": 621, "tensorboard": 622, "space": 624, "exit": 624, "11": 627, "13": 627, "ptq": 627, "9": 627}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"644ec953a7dc_pruning_support": [[0, "module-644ec953a7dc_pruning_support"]], "6ece06672ed3_v1_14": [[1, "module-6ece06672ed3_v1_14"]], "Module Contents": [[1, "module-contents"], [5, "module-contents"], [6, "module-contents"], [8, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [107, "module-contents"], [109, "module-contents"], [110, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [158, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [180, "module-contents"], [181, "module-contents"], [182, "module-contents"], [185, "module-contents"], [186, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [203, "module-contents"], [204, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [223, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [229, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [235, "module-contents"], [236, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [245, "module-contents"], [246, "module-contents"], [247, "module-contents"], [248, "module-contents"], [249, "module-contents"], [250, "module-contents"], [254, "module-contents"], [255, "module-contents"], [256, "module-contents"], [258, "module-contents"], [259, "module-contents"], [260, "module-contents"], [261, "module-contents"], [264, "module-contents"], [265, "module-contents"], [266, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [273, "module-contents"], [274, "module-contents"], [275, "module-contents"], [277, "module-contents"], [278, "module-contents"], [280, "module-contents"], [281, "module-contents"], [282, "module-contents"], [284, "module-contents"], [285, "module-contents"], [286, "module-contents"], [288, "module-contents"], [289, "module-contents"], [290, "module-contents"], [291, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [295, "module-contents"], [296, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [309, "module-contents"], [310, "module-contents"], [311, "module-contents"], [312, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [319, "module-contents"], [320, "module-contents"], [321, "module-contents"], [322, "module-contents"], [325, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [332, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [371, "module-contents"], [372, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [392, "module-contents"], [393, "module-contents"], [394, "module-contents"], [395, "module-contents"], [398, "module-contents"], [399, "module-contents"], [400, "module-contents"], [402, "module-contents"], [403, "module-contents"], [405, "module-contents"], [406, "module-contents"], [407, "module-contents"], [408, "module-contents"], [409, "module-contents"], [411, "module-contents"], [413, "module-contents"], [414, "module-contents"], [420, "module-contents"], [421, "module-contents"], [423, "module-contents"], [424, "module-contents"], [426, "module-contents"], [428, "module-contents"], [429, "module-contents"], [430, "module-contents"], [431, "module-contents"], [433, "module-contents"], [434, "module-contents"], [435, "module-contents"], [436, "module-contents"], [437, "module-contents"], [438, "module-contents"], [439, "module-contents"], [440, "module-contents"], [442, "module-contents"], [444, "module-contents"], [445, "module-contents"], [446, "module-contents"], [447, "module-contents"], [449, "module-contents"], [452, "module-contents"], [453, "module-contents"], [455, "module-contents"], [456, "module-contents"], [458, "module-contents"], [459, "module-contents"], [461, "module-contents"], [462, "module-contents"], [463, "module-contents"], [464, "module-contents"], [465, "module-contents"], [467, "module-contents"], [468, "module-contents"], [469, "module-contents"], [470, "module-contents"], [472, "module-contents"], [473, "module-contents"], [474, "module-contents"], [476, "module-contents"], [477, "module-contents"], [478, "module-contents"], [479, "module-contents"], [480, "module-contents"], [481, "module-contents"], [482, "module-contents"], [484, "module-contents"], [485, "module-contents"], [486, "module-contents"], [487, "module-contents"], [488, "module-contents"], [489, "module-contents"], [490, "module-contents"], [492, "module-contents"], [493, "module-contents"], [494, "module-contents"], [495, "module-contents"], [496, "module-contents"], [497, "module-contents"], [498, "module-contents"], [500, "module-contents"], [501, "module-contents"], [502, "module-contents"], [503, "module-contents"], [504, "module-contents"], [505, "module-contents"], [506, "module-contents"], [507, "module-contents"], [508, "module-contents"], [510, "module-contents"], [511, "module-contents"], [512, "module-contents"], [513, "module-contents"], [515, "module-contents"], [516, "module-contents"], [517, "module-contents"], [518, "module-contents"], [519, "module-contents"], [520, "module-contents"], [549, "module-contents"]], "Functions": [[1, "functions"], [5, "functions"], [6, "functions"], [13, "functions"], [32, "functions"], [38, "functions"], [39, "functions"], [61, "functions"], [62, "functions"], [64, "functions"], [98, "functions"], [99, "functions"], [110, "functions"], [112, "functions"], [140, "functions"], [141, "functions"], [142, "functions"], [146, "functions"], [147, "functions"], [148, "functions"], [150, "functions"], [153, "functions"], [155, "functions"], [158, "functions"], [165, "functions"], [173, "functions"], [175, "functions"], [179, "functions"], [182, "functions"], [183, "functions"], [184, "functions"], [187, "functions"], [189, "functions"], [190, "functions"], [191, "functions"], [192, "functions"], [194, "functions"], [196, "functions"], [197, "functions"], [199, "functions"], [203, "functions"], [211, "functions"], [213, "functions"], [217, "functions"], [220, "functions"], [221, "functions"], [222, "functions"], [224, "functions"], [225, "functions"], [226, "functions"], [228, "functions"], [229, "functions"], [230, "functions"], [231, "functions"], [232, "functions"], [235, "functions"], [236, "functions"], [238, "functions"], [239, "functions"], [240, "functions"], [241, "functions"], [242, "functions"], [250, "functions"], [254, "functions"], [255, "functions"], [259, "functions"], [264, "functions"], [269, "functions"], [270, "functions"], [271, "functions"], [273, "functions"], [276, "functions"], [277, "functions"], [278, "functions"], [280, "functions"], [281, "functions"], [282, "functions"], [283, "functions"], [284, "functions"], [285, "functions"], [289, "functions"], [293, "functions"], [295, "functions"], [296, "functions"], [299, "functions"], [305, "functions"], [306, "functions"], [308, "functions"], [309, "functions"], [310, "functions"], [311, "functions"], [314, "functions"], [322, "functions"], [326, "functions"], [328, "functions"], [329, "functions"], [332, "functions"], [333, "functions"], [335, "functions"], [336, "functions"], [338, "functions"], [339, "functions"], [341, "functions"], [342, "functions"], [352, "functions"], [353, "functions"], [354, "functions"], [356, "functions"], [361, "functions"], [363, "functions"], [364, "functions"], [366, "functions"], [368, "functions"], [371, "functions"], [372, "functions"], [377, "functions"], [380, "functions"], [381, "functions"], [382, "functions"], [393, "functions"], [403, "functions"], [420, "functions"], [424, "functions"], [426, "functions"], [437, "functions"], [438, "functions"], [439, "functions"], [442, "functions"], [445, "functions"], [449, "functions"], [453, "functions"], [455, "functions"], [458, "functions"], [461, "functions"], [463, "functions"], [464, "functions"], [467, "functions"], [473, "functions"], [474, "functions"], [482, "functions"], [485, "functions"], [490, "functions"], [494, "functions"], [502, "functions"], [505, "functions"], [506, "functions"], [510, "functions"], [511, "functions"]], "6f0d0f71d92e_v1_13": [[2, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[3, "module-9e89549a08c8_v1_11"]], "block_mask": [[4, "module-block_mask"]], "env": [[5, "module-env"]], "neural_compressor.adaptor.adaptor": [[6, "module-neural_compressor.adaptor.adaptor"]], "Classes": [[6, "classes"], [8, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [107, "classes"], [109, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [138, "classes"], [139, "classes"], [141, "classes"], [142, "classes"], [144, "classes"], [145, "classes"], [148, "classes"], [149, "classes"], [150, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [158, "classes"], [161, "classes"], [162, "classes"], [163, "classes"], [164, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [171, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [177, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [200, "classes"], [201, "classes"], [203, "classes"], [204, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [238, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [254, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [260, "classes"], [261, "classes"], [262, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [269, "classes"], [271, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [280, "classes"], [283, "classes"], [284, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [293, "classes"], [294, "classes"], [295, "classes"], [296, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [309, "classes"], [312, "classes"], [313, "classes"], [314, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [319, "classes"], [320, "classes"], [321, "classes"], [322, "classes"], [324, "classes"], [325, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [339, "classes"], [340, "classes"], [343, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [348, "classes"], [349, "classes"], [350, "classes"], [351, "classes"], [352, "classes"], [356, "classes"], [357, "classes"], [358, "classes"], [359, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [366, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [371, "classes"], [372, "classes"], [373, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [386, "classes"], [387, "classes"], [388, "classes"], [389, "classes"], [390, "classes"], [391, "classes"], [392, "classes"], [394, "classes"], [395, "classes"], [398, "classes"], [399, "classes"], [400, "classes"], [402, "classes"], [405, "classes"], [406, "classes"], [407, "classes"], [408, "classes"], [409, "classes"], [411, "classes"], [413, "classes"], [414, "classes"], [421, "classes"], [423, "classes"], [426, "classes"], [428, "classes"], [429, "classes"], [430, "classes"], [431, "classes"], [433, "classes"], [434, "classes"], [435, "classes"], [436, "classes"], [440, "classes"], [444, "classes"], [446, "classes"], [447, "classes"], [450, "classes"], [452, "classes"], [456, "classes"], [459, "classes"], [462, "classes"], [463, "classes"], [465, "classes"], [468, "classes"], [469, "classes"], [470, "classes"], [472, "classes"], [476, "classes"], [477, "classes"], [479, "classes"], [480, "classes"], [481, "classes"], [482, "classes"], [484, "classes"], [486, "classes"], [487, "classes"], [488, "classes"], [489, "classes"], [492, "classes"], [493, "classes"], [495, "classes"], [496, "classes"], [497, "classes"], [498, "classes"], [500, "classes"], [501, "classes"], [502, "classes"], [503, "classes"], [504, "classes"], [506, "classes"], [507, "classes"], [508, "classes"], [510, "classes"], [512, "classes"], [513, "classes"], [515, "classes"], [516, "classes"], [517, "classes"], [518, "classes"], [519, "classes"], [520, "classes"], [549, "classes"], [562, "classes"]], "neural_compressor.adaptor": [[7, "module-neural_compressor.adaptor"]], "Subpackages": [[7, "subpackages"], [16, "subpackages"], [81, "subpackages"], [105, "subpackages"], [106, "subpackages"], [108, "subpackages"], [159, "subpackages"], [184, "subpackages"], [222, "subpackages"], [234, "subpackages"], [251, "subpackages"], [252, "subpackages"], [257, "subpackages"], [262, "subpackages"], [276, "subpackages"], [297, "subpackages"], [318, "subpackages"], [391, "subpackages"], [396, "subpackages"], [410, "subpackages"], [415, "subpackages"], [422, "subpackages"], [450, "subpackages"], [466, "subpackages"], [475, "subpackages"], [483, "subpackages"], [509, "subpackages"]], "Submodules": [[7, "submodules"], [12, "submodules"], [16, "submodules"], [28, "submodules"], [45, "submodules"], [70, "submodules"], [81, "submodules"], [89, "submodules"], [95, "submodules"], [100, "submodules"], [105, "submodules"], [106, "submodules"], [108, "submodules"], [111, "submodules"], [124, "submodules"], [137, "submodules"], [143, "submodules"], [150, "submodules"], [160, "submodules"], [167, "submodules"], [179, "submodules"], [183, "submodules"], [187, "submodules"], [194, "submodules"], [205, "submodules"], [217, "submodules"], [221, "submodules"], [224, "submodules"], [228, "submodules"], [234, "submodules"], [241, "submodules"], [251, "submodules"], [253, "submodules"], [257, "submodules"], [263, "submodules"], [267, "submodules"], [276, "submodules"], [283, "submodules"], [287, "submodules"], [297, "submodules"], [302, "submodules"], [318, "submodules"], [324, "submodules"], [333, "submodules"], [343, "submodules"], [347, "submodules"], [355, "submodules"], [367, "submodules"], [386, "submodules"], [391, "submodules"], [396, "submodules"], [397, "submodules"], [401, "submodules"], [404, "submodules"], [410, "submodules"], [412, "submodules"], [415, "submodules"], [416, "submodules"], [422, "submodules"], [425, "submodules"], [427, "submodules"], [432, "submodules"], [441, "submodules"], [443, "submodules"], [448, "submodules"], [450, "submodules"], [451, "submodules"], [454, "submodules"], [457, "submodules"], [460, "submodules"], [466, "submodules"], [471, "submodules"], [475, "submodules"], [483, "submodules"], [491, "submodules"], [499, "submodules"], [509, "submodules"], [514, "submodules"]], "Package Contents": [[7, "package-contents"], [28, "package-contents"], [150, "package-contents"], [167, "package-contents"], [179, "package-contents"], [183, "package-contents"], [184, "package-contents"], [187, "package-contents"], [194, "package-contents"], [205, "package-contents"], [217, "package-contents"], [221, "package-contents"], [222, "package-contents"], [224, "package-contents"], [228, "package-contents"], [234, "package-contents"], [241, "package-contents"], [257, "package-contents"], [262, "package-contents"], [263, "package-contents"], [276, "package-contents"], [283, "package-contents"], [287, "package-contents"], [302, "package-contents"], [318, "package-contents"], [324, "package-contents"], [333, "package-contents"], [343, "package-contents"], [386, "package-contents"], [391, "package-contents"], [450, "package-contents"], [562, "package-contents"]], "neural_compressor.adaptor.keras": [[8, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils": [[9, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[10, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[16, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[17, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[18, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[19, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[20, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[21, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[22, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[23, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[24, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[25, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[28, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[29, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[30, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[31, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[32, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[33, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[34, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[35, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[36, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[37, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[38, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[39, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[40, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[41, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[42, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[43, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[44, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[104, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[105, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[106, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[107, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[134, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[135, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[136, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[137, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[138, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[139, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[140, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[141, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[142, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[143, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.onnx": [[144, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[145, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[146, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[147, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[148, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[149, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[150, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[151, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[152, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[153, "module-neural_compressor.benchmark"]], "neural_compressor.conf.config": [[154, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[155, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[156, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[157, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[158, "module-neural_compressor.config"]], "neural_compressor.contrib": [[159, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[160, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[161, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[162, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[163, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[164, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[165, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[166, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[167, "module-neural_compressor.data.dataloaders"]], "Attributes": [[167, "attributes"], [175, "attributes"], [184, "attributes"], [213, "attributes"], [222, "attributes"], [234, "attributes"], [262, "attributes"], [287, "attributes"], [333, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[168, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[169, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[170, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[171, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[172, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[173, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[174, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[175, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[176, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[177, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[178, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[179, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[180, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[181, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[182, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[183, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[184, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[185, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[186, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[187, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[188, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[189, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[190, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[191, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[192, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[193, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[194, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[195, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[196, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[197, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[198, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[199, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[200, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[201, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[202, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[203, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[204, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[205, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[206, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[207, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[208, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[209, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[210, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[211, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[212, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[213, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[214, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[215, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[216, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[217, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[218, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[219, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[220, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[221, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[222, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[223, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[224, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[225, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[226, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[227, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[228, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[229, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[230, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[231, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.export.utils": [[232, "module-neural_compressor.experimental.export.utils"]], "neural_compressor.experimental.graph_optimization": [[233, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[234, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[235, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[236, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[237, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[238, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[239, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[240, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[241, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[242, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[243, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[244, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[245, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[246, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[247, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[248, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[249, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[250, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "neural_compressor.experimental.nas.dynast": [[251, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[252, "module-neural_compressor.experimental.nas.dynast.supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[253, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[254, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[255, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[256, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"]], "neural_compressor.experimental.nas": [[257, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[258, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[259, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[260, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruning": [[261, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[262, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[263, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[264, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[265, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[266, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[267, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[268, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[269, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[270, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[271, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[272, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[273, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[274, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[275, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[276, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[277, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[278, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[279, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[280, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[281, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[282, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[283, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[284, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[285, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[286, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[287, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[288, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[289, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[290, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[291, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[292, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[293, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[294, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[295, "module-neural_compressor.objective"]], "neural_compressor.pruner.criteria": [[296, "module-neural_compressor.pruner.criteria"]], "neural_compressor.pruner": [[297, "module-neural_compressor.pruner"]], "neural_compressor.pruner.logger": [[298, "module-neural_compressor.pruner.logger"]], "neural_compressor.pruner.patterns": [[299, "module-neural_compressor.pruner.patterns"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity": [[300, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"]], "neural_compressor.pruner.pruner_legacy.group_lasso": [[301, "module-neural_compressor.pruner.pruner_legacy.group_lasso"]], "neural_compressor.pruner.pruner_legacy": [[302, "module-neural_compressor.pruner.pruner_legacy"]], "neural_compressor.pruner.pruner_legacy.magnitude": [[303, "module-neural_compressor.pruner.pruner_legacy.magnitude"]], "neural_compressor.pruner.pruner_legacy.pattern_lock": [[304, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"]], "neural_compressor.pruner.pruner_legacy.pruner": [[305, "module-neural_compressor.pruner.pruner_legacy.pruner"]], "neural_compressor.pruner.pruners": [[306, "module-neural_compressor.pruner.pruners"]], "neural_compressor.pruner.pruning": [[307, "module-neural_compressor.pruner.pruning"]], "neural_compressor.pruner.regs": [[308, "module-neural_compressor.pruner.regs"]], "neural_compressor.pruner.schedulers": [[309, "module-neural_compressor.pruner.schedulers"]], "neural_compressor.pruner.utils": [[310, "module-neural_compressor.pruner.utils"]], "neural_compressor.quantization": [[311, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto_mixed_precision": [[312, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[313, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[314, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[315, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[316, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[317, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[318, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[319, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[320, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[321, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[322, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[323, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[324, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[325, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[326, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[327, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[328, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.training": [[329, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[330, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[331, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[332, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[333, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[334, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[335, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[336, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[337, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[338, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[339, "module-neural_compressor.utils.utility"]], "neural_compressor.ux.components.benchmark.benchmark": [[340, "module-neural_compressor.ux.components.benchmark.benchmark"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[341, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[342, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "neural_compressor.ux.components.benchmark": [[343, "module-neural_compressor.ux.components.benchmark"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[344, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "neural_compressor.ux.components.config_generator.config_generator": [[345, "module-neural_compressor.ux.components.config_generator.config_generator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[346, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[347, "module-neural_compressor.ux.components.config_generator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[348, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[349, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[350, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[351, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[352, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[353, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[354, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "neural_compressor.ux.components.configuration_wizard": [[355, "module-neural_compressor.ux.components.configuration_wizard"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[356, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[357, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "neural_compressor.ux.components.db_manager.db_manager": [[358, "module-neural_compressor.ux.components.db_manager.db_manager"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[359, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[360, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[361, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[362, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[363, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[364, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "neural_compressor.ux.components.db_manager.db_models.example": [[365, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[366, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[367, "module-neural_compressor.ux.components.db_manager.db_models"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[368, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "neural_compressor.ux.components.db_manager.db_models.model": [[369, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[370, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[371, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[372, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[373, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[374, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "neural_compressor.ux.components.db_manager.db_models.project": [[375, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[376, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[377, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[378, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[379, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[380, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[381, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[382, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[383, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[384, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[385, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[386, "module-neural_compressor.ux.components.db_manager.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[387, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[388, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[389, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[390, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[391, "module-neural_compressor.ux.components.db_manager"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[392, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "neural_compressor.ux.components.db_manager.utils": [[393, "module-neural_compressor.ux.components.db_manager.utils"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[394, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[395, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[396, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[397, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[398, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[399, "module-neural_compressor.ux.components.diagnosis.op_details"]], "neural_compressor.ux.components.diagnosis.op_entry": [[400, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[401, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[402, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.file_browser.file_browser": [[403, "module-neural_compressor.ux.components.file_browser.file_browser"]], "neural_compressor.ux.components.file_browser": [[404, "module-neural_compressor.ux.components.file_browser"]], "neural_compressor.ux.components.graph.attribute": [[405, "module-neural_compressor.ux.components.graph.attribute"]], "neural_compressor.ux.components.graph.collapser": [[406, "module-neural_compressor.ux.components.graph.collapser"]], "neural_compressor.ux.components.graph.edge": [[407, "module-neural_compressor.ux.components.graph.edge"]], "neural_compressor.ux.components.graph.graph": [[408, "module-neural_compressor.ux.components.graph.graph"]], "neural_compressor.ux.components.graph.graph_reader": [[409, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[410, "module-neural_compressor.ux.components.graph"]], "neural_compressor.ux.components.graph.node": [[411, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[412, "module-neural_compressor.ux.components.graph.reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[413, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[414, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[415, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[416, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[417, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[418, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[419, "module-neural_compressor.ux.components.jobs_management.request"]], "neural_compressor.ux.components.manage_workspace": [[420, "module-neural_compressor.ux.components.manage_workspace"]], "neural_compressor.ux.components.model.domain": [[421, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[422, "module-neural_compressor.ux.components.model"]], "neural_compressor.ux.components.model.model": [[423, "module-neural_compressor.ux.components.model.model"]], "neural_compressor.ux.components.model.model_type_getter": [[424, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[425, "module-neural_compressor.ux.components.model.onnxrt"]], "neural_compressor.ux.components.model.onnxrt.model": [[426, "module-neural_compressor.ux.components.model.onnxrt.model"]], "neural_compressor.ux.components.model.pytorch": [[427, "module-neural_compressor.ux.components.model.pytorch"]], "neural_compressor.ux.components.model.pytorch.model": [[428, "module-neural_compressor.ux.components.model.pytorch.model"]], "neural_compressor.ux.components.model.repository": [[429, "module-neural_compressor.ux.components.model.repository"]], "neural_compressor.ux.components.model.shape": [[430, "module-neural_compressor.ux.components.model.shape"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[431, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[432, "module-neural_compressor.ux.components.model.tensorflow"]], "neural_compressor.ux.components.model.tensorflow.keras": [[433, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[434, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "neural_compressor.ux.components.model.tensorflow.model": [[435, "module-neural_compressor.ux.components.model.tensorflow.model"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[436, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "neural_compressor.ux.components.model.tensorflow.utils": [[437, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "neural_compressor.ux.components.model_zoo.download_config": [[438, "module-neural_compressor.ux.components.model_zoo.download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[439, "module-neural_compressor.ux.components.model_zoo.download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[440, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[441, "module-neural_compressor.ux.components.model_zoo"]], "neural_compressor.ux.components.model_zoo.list_models": [[442, "module-neural_compressor.ux.components.model_zoo.list_models"]], "neural_compressor.ux.components.names_mapper": [[443, "module-neural_compressor.ux.components.names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[444, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "neural_compressor.ux.components.optimization.execute_optimization": [[445, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "neural_compressor.ux.components.optimization.factory": [[446, "module-neural_compressor.ux.components.optimization.factory"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[447, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[448, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[449, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "neural_compressor.ux.components.optimization": [[450, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[451, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[452, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[453, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[454, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[455, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "neural_compressor.ux.components.optimization.optimization": [[456, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[457, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[458, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[459, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[460, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[461, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[462, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "neural_compressor.ux.components.optimization.tuning_history": [[463, "module-neural_compressor.ux.components.optimization.tuning_history"]], "neural_compressor.ux.components.profiling.execute_profiling": [[464, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "neural_compressor.ux.components.profiling.factory": [[465, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[466, "module-neural_compressor.ux.components.profiling"]], "neural_compressor.ux.components.profiling.profile_model": [[467, "module-neural_compressor.ux.components.profiling.profile_model"]], "neural_compressor.ux.components.profiling.profiler": [[468, "module-neural_compressor.ux.components.profiling.profiler"]], "neural_compressor.ux.components.profiling.profiling": [[469, "module-neural_compressor.ux.components.profiling.profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[470, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[471, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[472, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[473, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "neural_compressor.ux.inc_bench": [[474, "module-neural_compressor.ux.inc_bench"]], "neural_compressor.ux": [[475, "module-neural_compressor.ux"]], "neural_compressor.ux.utils.consts": [[476, "module-neural_compressor.ux.utils.consts"]], "neural_compressor.ux.utils.environment": [[477, "module-neural_compressor.ux.utils.environment"]], "neural_compressor.ux.utils.exceptions": [[478, "module-neural_compressor.ux.utils.exceptions"]], "neural_compressor.ux.utils.executor": [[479, "module-neural_compressor.ux.utils.executor"]], "neural_compressor.ux.utils.expiring_dict": [[480, "module-neural_compressor.ux.utils.expiring_dict"]], "neural_compressor.ux.utils.github_info": [[481, "module-neural_compressor.ux.utils.github_info"]], "neural_compressor.ux.utils.hw_info": [[482, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[483, "module-neural_compressor.ux.utils"]], "neural_compressor.ux.utils.json_serializer": [[484, "module-neural_compressor.ux.utils.json_serializer"]], "neural_compressor.ux.utils.logger": [[485, "module-neural_compressor.ux.utils.logger"]], "neural_compressor.ux.utils.parser": [[486, "module-neural_compressor.ux.utils.parser"]], "neural_compressor.ux.utils.proc": [[487, "module-neural_compressor.ux.utils.proc"]], "neural_compressor.ux.utils.processes": [[488, "module-neural_compressor.ux.utils.processes"]], "neural_compressor.ux.utils.singleton": [[489, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.status_updates": [[490, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[491, "module-neural_compressor.ux.utils.templates"]], "neural_compressor.ux.utils.templates.metric": [[492, "module-neural_compressor.ux.utils.templates.metric"]], "neural_compressor.ux.utils.templates.workdir": [[493, "module-neural_compressor.ux.utils.templates.workdir"]], "neural_compressor.ux.utils.utils": [[494, "module-neural_compressor.ux.utils.utils"]], "neural_compressor.ux.utils.workload.config": [[495, "module-neural_compressor.ux.utils.workload.config"]], "neural_compressor.ux.utils.workload.dataloader": [[496, "module-neural_compressor.ux.utils.workload.dataloader"]], "neural_compressor.ux.utils.workload.evaluation": [[497, "module-neural_compressor.ux.utils.workload.evaluation"]], "neural_compressor.ux.utils.workload.graph_optimization": [[498, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[499, "module-neural_compressor.ux.utils.workload"]], "neural_compressor.ux.utils.workload.mixed_precision": [[500, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "neural_compressor.ux.utils.workload.model": [[501, "module-neural_compressor.ux.utils.workload.model"]], "neural_compressor.ux.utils.workload.pruning": [[502, "module-neural_compressor.ux.utils.workload.pruning"]], "neural_compressor.ux.utils.workload.quantization": [[503, "module-neural_compressor.ux.utils.workload.quantization"]], "neural_compressor.ux.utils.workload.tuning": [[504, "module-neural_compressor.ux.utils.workload.tuning"]], "neural_compressor.ux.utils.yaml_utils": [[505, "module-neural_compressor.ux.utils.yaml_utils"]], "neural_compressor.ux.web.communication": [[506, "module-neural_compressor.ux.web.communication"]], "neural_compressor.ux.web.configuration": [[507, "module-neural_compressor.ux.web.configuration"]], "neural_compressor.ux.web.exceptions": [[508, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[509, "module-neural_compressor.ux.web"]], "neural_compressor.ux.web.router": [[510, "module-neural_compressor.ux.web.router"]], "neural_compressor.ux.web.server": [[511, "module-neural_compressor.ux.web.server"]], "neural_compressor.ux.web.service.benchmark": [[512, "module-neural_compressor.ux.web.service.benchmark"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[513, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[514, "module-neural_compressor.ux.web.service"]], "neural_compressor.ux.web.service.model": [[515, "module-neural_compressor.ux.web.service.model"]], "neural_compressor.ux.web.service.optimization": [[516, "module-neural_compressor.ux.web.service.optimization"]], "neural_compressor.ux.web.service.profiling": [[517, "module-neural_compressor.ux.web.service.profiling"]], "neural_compressor.ux.web.service.request_data_processor": [[518, "module-neural_compressor.ux.web.service.request_data_processor"]], "neural_compressor.ux.web.service.response_generator": [[519, "module-neural_compressor.ux.web.service.response_generator"]], "neural_compressor.ux.web.service.workload": [[520, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[521, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[522, "intel-neural-compressor-documentation"], [628, "intel-neural-compressor-documentation"]], "Sections": [[522, "sections"], [628, "sections"]], "Contributor Covenant Code of Conduct": [[523, "contributor-covenant-code-of-conduct"], [524, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[523, "our-pledge"]], "Our Standards": [[523, "our-standards"]], "Our Responsibilities": [[523, "our-responsibilities"]], "Scope": [[523, "scope"]], "Enforcement": [[523, "enforcement"]], "Attribution": [[523, "attribution"]], "Contribution Guidelines": [[524, "contribution-guidelines"]], "Pull Request Checklist": [[524, "pull-request-checklist"]], "Pull Request Template": [[524, "pull-request-template"]], "Support": [[524, "support"]], "FX": [[525, "fx"]], "Introduction": [[525, "introduction"], [526, "introduction"], [529, "introduction"], [572, "introduction"], [573, "introduction"], [574, "introduction"], [575, "introduction"], [577, "introduction"], [578, "introduction"], [579, "introduction"], [581, "introduction"], [583, "introduction"], [586, "introduction"], [589, "introduction"], [590, "introduction"], [591, "introduction"], [611, "introduction"], [612, "introduction"], [614, "introduction"], [615, "introduction"], [617, "introduction"], [621, "introduction"], [622, "introduction"], [623, "introduction"], [624, "introduction"], [626, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[525, "fx-mode-support-matrix-in-neural-compressor"]], "Get Start": [[525, "get-start"]], "Post Training Static Quantization": [[525, "post-training-static-quantization"], [618, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[525, "post-training-dynamic-quantization"], [618, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[525, "quantization-aware-training"]], "Examples": [[525, "examples"], [526, "examples"], [573, "examples"], [574, "examples"], [575, "examples"], [577, "examples"], [578, "examples"], [579, "examples"], [580, "examples"], [581, "examples"], [590, "examples"], [591, "examples"], [612, "examples"], [614, "examples"], [618, "examples"], [622, "examples"]], "Note": [[525, "note"]], "Details": [[525, "details"]], "Common Problem": [[525, "common-problem"]], "Dynamic Quantization": [[525, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[525, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[526, "neural-architecture-search"]], "Basic NAS": [[526, "basic-nas"]], "Dynamic NAS": [[526, "dynamic-nas"]], "NAS Support Matrix": [[526, "nas-support-matrix"]], "Get Started with NAS API": [[526, "get-started-with-nas-api"]], "Basic Usage": [[526, "basic-usage"]], "1. Python code + YAML": [[526, "python-code-yaml"]], "2. Python code only": [[526, "python-code-only"]], "Advanced Usage (Custom NAS)": [[526, "advanced-usage-custom-nas"]], "Security Policy": [[527, "security-policy"]], "Report a Vulnerability": [[527, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[528, "intel-neural-compressor"], [609, "intel-neural-compressor"]], "Installation": [[528, "installation"], [587, "installation"], [603, "installation"]], "Install from pypi": [[528, "install-from-pypi"]], "Getting Started": [[528, "getting-started"], [584, "getting-started"]], "Quantization with Python API": [[528, "quantization-with-python-api"], [584, "quantization-with-python-api"]], "Documentation": [[528, "documentation"]], "Selected Publications/Events": [[528, "selected-publications-events"]], "Additional Content": [[528, "additional-content"]], "Research Collaborations": [[528, "research-collaborations"]], "Adaptor": [[529, "adaptor"], [530, "adaptor"]], "Adaptor Support Matrix": [[529, "adaptor-support-matrix"]], "Working Flow": [[529, "working-flow"], [618, "working-flow"]], "Get Start with Adaptor API": [[529, "get-start-with-adaptor-api"]], "Query API": [[529, "query-api"]], "Background": [[529, "background"]], "Query API Introduction": [[529, "query-api-introduction"]], "Example of Adding a New Backend Support": [[529, "example-of-adding-a-new-backend-support"]], "Capability": [[529, "capability"]], "Implement ONNXRTAdaptor Class": [[529, "implement-onnxrtadaptor-class"]], "ONNX Runtime": [[531, "onnx-runtime"]], "Torch Utils": [[532, "torch-utils"]], "Bf16 Convert": [[533, "bf16-convert"]], "Hawq Metric": [[534, "hawq-metric"]], "Onnx": [[535, "onnx"]], "Symbolic Trace": [[536, "symbolic-trace"]], "Util": [[537, "util"]], "Algorithm": [[538, "algorithm"]], "APIs": [[539, "apis"]], "User facing APIs": [[540, "user-facing-apis"]], "Benchmark": [[541, "benchmark"], [548, "benchmark"], [617, "benchmark"]], "Config": [[542, "config"]], "Mix Precision": [[543, "mix-precision"]], "Objective": [[544, "objective"], [611, "objective"]], "Quantization": [[545, "quantization"], [564, "quantization"], [617, "quantization"], [618, "quantization"]], "Training": [[546, "training"]], "Common": [[547, "common"]], "BLEU": [[549, "module-neural_compressor.experimental.metric.bleu"]], "Criterion": [[550, "criterion"]], "Data": [[551, "data"]], "Dataloader": [[552, "dataloader"]], "BaseDataLoader": [[552, "basedataloader"]], "dataloaders": [[552, "dataloaders"]], "Datasets": [[553, "datasets"]], "Transforms": [[554, "transforms"]], "Metric": [[555, "metric"]], "Model": [[556, "model"], [567, "model"], [591, "model"]], "Optimizer": [[557, "optimizer"]], "Component(experiemental API, deprecated in 2.0)": [[558, "component-experiemental-api-deprecated-in-2-0"]], "Distillation": [[559, "distillation"], [577, "distillation"], [617, "distillation"]], "MixedPrecision": [[560, "mixedprecision"]], "ModelConversion": [[561, "modelconversion"]], "Neural architecture search (NAS)": [[562, "neural-architecture-search-nas"]], "Pruning": [[563, "pruning"], [572, "pruning"], [614, "pruning"], [617, "pruning"]], "Scheduler": [[565, "scheduler"]], "Contrib": [[566, "contrib"]], "Pythonic": [[568, "pythonic"]], "Strategy": [[569, "strategy"]], "Strategies": [[570, "strategies"]], "Utils": [[571, "utils"]], "Intel\u00ae Neural Compressor Bench": [[572, "intel-neural-compressor-bench"]], "Table of Contents": [[572, "table-of-contents"]], "Install Intel\u00ae Neural Compressor with Bench": [[572, "install-intel-neural-compressor-with-bench"]], "Option 1: Install from Binary": [[572, "option-1-install-from-binary"]], "Option 2: Install from Source": [[572, "option-2-install-from-source"]], "Start the Intel\u00ae Neural Compressor Bench": [[572, "start-the-intel-neural-compressor-bench"]], "Home Screen": [[572, "home-screen"]], "Create New Project": [[572, "create-new-project"]], "Predefined Model": [[572, "predefined-model"]], "Custom Model": [[572, "custom-model"]], "Display Model Graph": [[572, "display-model-graph"]], "Project List": [[572, "project-list"]], "Remove Project": [[572, "remove-project"]], "Develop Project": [[572, "develop-project"]], "Optimization Tab": [[572, "optimization-tab"]], "Optimization Table": [[572, "optimization-table"]], "Optimization Wizard": [[572, "optimization-wizard"]], "Editing Optimization Entries": [[572, "editing-optimization-entries"]], "Optimization Details": [[572, "optimization-details"]], "Benchmark Tab": [[572, "benchmark-tab"]], "Benchmark Table": [[572, "benchmark-table"]], "Benchmark Wizard": [[572, "benchmark-wizard"]], "Editing Benchmark Entries": [[572, "editing-benchmark-entries"]], "Benchmark Details": [[572, "benchmark-details"]], "Profiling Tab": [[572, "profiling-tab"]], "Profiling Table": [[572, "profiling-table"]], "Profiling Wizard": [[572, "profiling-wizard"]], "Editing Profiling Entries": [[572, "editing-profiling-entries"]], "Profiling Details": [[572, "profiling-details"]], "Diagnosis Tab": [[572, "diagnosis-tab"]], "Dataset Tab": [[572, "dataset-tab"]], "Dataset List": [[572, "dataset-list"]], "Dataset Wizard": [[572, "dataset-wizard"]], "Dataset Details": [[572, "dataset-details"]], "Custom Dataset": [[572, "custom-dataset"]], "Project Information": [[572, "project-information"]], "NAS demo": [[572, "nas-demo"]], "System Information": [[572, "system-information"]], "Security": [[572, "security"], [579, "security"]], "Benchmarking": [[573, "benchmarking"]], "Benchmark Support Matrix": [[573, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[573, "get-started-with-benchmark-api"]], "DataLoader": [[574, "dataloader"]], "Supported Framework Dataloader Matrix": [[574, "supported-framework-dataloader-matrix"]], "Get Start with Dataloader API": [[574, "get-start-with-dataloader-api"]], "Config Dataloader in a Yaml File": [[574, "config-dataloader-in-a-yaml-file"]], "Create a User-specific Dataloader": [[574, "create-a-user-specific-dataloader"]], "Dataset": [[575, "dataset"]], "Supported Framework Dataset Matrix": [[575, "supported-framework-dataset-matrix"]], "TensorFlow": [[575, "tensorflow"], [589, "tensorflow"], [623, "tensorflow"]], "PyTorch": [[575, "pytorch"], [589, "pytorch"], [619, "pytorch"]], "MXNet": [[575, "mxnet"], [589, "mxnet"], [623, "mxnet"]], "ONNXRT": [[575, "onnxrt"], [589, "onnxrt"], [623, "onnxrt"]], "Get start with Dataset API": [[575, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[575, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[575, "user-specific-dataset"]], "Design": [[576, "design"], [624, "design"], [624, "id1"], [624, "id3"], [624, "id5"], [624, "id7"], [624, "id9"], [624, "id11"], [624, "id13"], [624, "id15"], [624, "id17"]], "Architecture": [[576, "architecture"], [586, "architecture"]], "Workflow": [[576, "workflow"]], "Knowledge Distillation": [[577, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[577, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[577, "self-distillation"]], "Distillation Support Matrix": [[577, "distillation-support-matrix"]], "Get Started with Distillation API": [[577, "get-started-with-distillation-api"]], "Distillation for Quantization": [[578, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[578, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[578, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[579, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[579, "supported-feature-matrix"], [583, "supported-feature-matrix"], [586, "supported-feature-matrix"], [617, "supported-feature-matrix"], [618, "supported-feature-matrix"], [622, "supported-feature-matrix"], [626, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[579, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[579, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[579, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[579, "horovodrun-execution"]], "PyTorch Examples:": [[579, "pytorch-examples"]], "TensorFlow Examples:": [[579, "tensorflow-examples"]], "Example List": [[580, "example-list"]], "Release Data": [[580, "release-data"]], "Export": [[581, "export"]], "Supported Framework Model Matrix": [[581, "supported-framework-model-matrix"], [591, "supported-framework-model-matrix"]], "FP32 Model Export": [[581, "fp32-model-export"]], "INT8 Model Export": [[581, "int8-model-export"]], "Appendix": [[581, "appendix"]], "Frequently Asked Questions": [[582, "frequently-asked-questions"]], "Common Build Issues": [[582, "common-build-issues"]], "Issue 1:": [[582, "issue-1"]], "Issue 2:": [[582, "issue-2"]], "Issue 3:": [[582, "issue-3"]], "Framework YAML Configuration Files": [[583, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[583, "get-started-with-framework-yaml-files"]], "Quick Samples": [[584, "quick-samples"]], "Quantization with JupyterLab Extension": [[584, "quantization-with-jupyterlab-extension"]], "Quantization with GUI": [[584, "quantization-with-gui"]], "Validated Models": [[584, "validated-models"], [627, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[585, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[585, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[585, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[586, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[587, "linux-installation"]], "Prerequisites": [[587, "prerequisites"], [587, "id1"]], "Install from Binary": [[587, "install-from-binary"], [587, "id2"]], "Install from Source": [[587, "install-from-source"], [587, "id3"]], "Install from AI Kit": [[587, "install-from-ai-kit"]], "Windows Installation": [[587, "windows-installation"]], "System Requirements": [[587, "system-requirements"]], "Validated Hardware Environment": [[587, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[587, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[587, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[587, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[587, "validated-software-environment"]], "Legal Information": [[588, "legal-information"]], "License": [[588, "license"]], "Citation": [[588, "citation"]], "Trademarks": [[588, "trademarks"]], "Metrics": [[589, "metrics"]], "Supported Built-in Metric Matrix": [[589, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[589, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[589, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[589, "build-custom-metric-with-python-api"]], "Mixed Precision": [[590, "mixed-precision"]], "Mixed Precision Support Matrix": [[590, "mixed-precision-support-matrix"]], "Get Started with Mixed Precision API": [[590, "get-started-with-mixed-precision-api"]], "Neural Coder": [[592, "neural-coder"], [609, "neural-coder"], [609, "id1"]], "What do we offer?": [[592, "what-do-we-offer"]], "Getting Started!": [[592, "getting-started"], [603, "getting-started"]], "Jupyter Lab Extension": [[592, "jupyter-lab-extension"]], "Python Launcher": [[592, "python-launcher"], [597, "python-launcher"]], "Python API": [[592, "python-api"]], "Contact": [[592, "contact"]], "AWS Amazon SageMaker Support": [[593, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[593, "start-jupyter-lab-3"]], "For SageMaker Studio": [[593, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[593, "for-sagemaker-notebook-instance"]], "Installation Guide": [[593, "installation-guide"]], "BigDL Nano Support": [[594, "bigdl-nano-support"]], "Example": [[594, "example"], [598, "example"], [611, "example"]], "Support Matrix": [[594, "support-matrix"]], "Intel CPU Platforms: Best Performance Setting": [[595, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[595, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[595, "install-numa-controller"]], "Environment Variables": [[595, "environment-variables"]], "Frequency Governers": [[595, "frequency-governers"]], "Neural Coder as Python API": [[596, "neural-coder-as-python-api"]], "Enable": [[596, "enable"]], "Bench": [[596, "bench"]], "SuperBench": [[596, "superbench"]], "Quick-Start": [[597, "quick-start"]], "Launcher Arguments (Optional)": [[597, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[598, "neural-coder-for-quantization"]], "Features Supported": [[598, "features-supported"]], "Models Supported": [[598, "models-supported"]], "Usage": [[598, "usage"], [622, "usage"], [622, "id1"], [624, "usage"], [624, "id2"], [624, "id4"], [624, "id6"], [624, "id8"], [624, "id10"], [624, "id12"], [624, "id14"], [624, "id16"], [624, "id18"]], "PyPI distribution:": [[598, "pypi-distribution"]], "Supported Optimization Features": [[599, "supported-optimization-features"]], "v0.4": [[600, "v0-4"]], "Highlights": [[600, "highlights"]], "Others": [[600, "others"]], "Changelog": [[601, "changelog"], [605, "changelog"]], "neural_compressor_ext_lab": [[602, "neural-compressor-ext-lab"]], "Requirements": [[602, "requirements"], [606, "requirements"]], "Install": [[602, "install"], [606, "install"]], "Uninstall": [[602, "uninstall"], [606, "uninstall"]], "Contributing": [[602, "contributing"], [606, "contributing"]], "Development install": [[602, "development-install"], [606, "development-install"]], "Development uninstall": [[602, "development-uninstall"], [606, "development-uninstall"]], "Packaging the extension": [[602, "packaging-the-extension"], [606, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[603, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[603, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[603, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[603, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[604, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[604, "manual-release"], [607, "manual-release"]], "Python package": [[604, "python-package"], [607, "python-package"]], "NPM package": [[604, "npm-package"], [607, "npm-package"]], "Automated releases with the Jupyter Releaser": [[604, "automated-releases-with-the-jupyter-releaser"], [607, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[604, "publishing-to-conda-forge"], [607, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[606, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[607, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[608, "change-log"]], "[Unreleased]": [[608, "unreleased"]], "Background Introduction": [[609, "background-introduction"]], "Neural Coder Extension in VSCode": [[609, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[609, "neural-coder-extension-usage"]], "1. Open": [[609, "open"]], "2. Search": [[609, "search"]], "3. Setting": [[609, "setting"]], "4. Icon": [[609, "icon"]], "5. optimization (quantization)": [[609, "optimization-quantization"]], "5.1 Enable": [[609, "enable"]], "5.2 Auto": [[609, "auto"]], "Welcome to your VS Code Extension": [[610, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[610, "what-s-in-the-folder"]], "Setup": [[610, "setup"]], "Get up and running straight away": [[610, "get-up-and-running-straight-away"]], "Make changes": [[610, "make-changes"]], "Explore the API": [[610, "explore-the-api"]], "Run tests": [[610, "run-tests"]], "Go further": [[610, "go-further"]], "Single Objective": [[611, "single-objective"]], "Multiple Objectives": [[611, "multiple-objectives"]], "Objective Support Matrix": [[611, "objective-support-matrix"]], "Get Started with Objective API": [[611, "get-started-with-objective-api"]], "Config Single Objective": [[611, "config-single-objective"]], "Config Multiple Objectives": [[611, "config-multiple-objectives"]], "Optimization Orchestration": [[612, "optimization-orchestration"]], "One-shot": [[612, "one-shot"]], "Orchestration Support Matrix": [[612, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[612, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[613, "system-configuration"]], "Neural Network Pruning": [[614, "neural-network-pruning"], [615, "neural-network-pruning"]], "Pruning Patterns": [[614, "pruning-patterns"], [615, "pruning-patterns"]], "Pruning Criteria": [[614, "pruning-criteria"], [615, "pruning-criteria"]], "Pruning Schedule": [[614, "pruning-schedule"], [615, "pruning-schedule"]], "Pruning Support Matrix": [[614, "pruning-support-matrix"]], "Get Started with Pruning API": [[614, "get-started-with-pruning-api"]], "Pruning details": [[615, "pruning-details"]], "Pruning Type": [[615, "pruning-type"]], "Pruning Scope": [[615, "pruning-scope"]], "Sparsity Decay Type": [[615, "sparsity-decay-type"]], "Regularization": [[615, "regularization"]], "Pruning Examples": [[615, "pruning-examples"]], "Reference": [[615, "reference"], [618, "reference"]], "Full Publications/Events (56)": [[616, "full-publications-events-56"]], "2023 (3)": [[616, "id1"]], "2022 (34)": [[616, "id2"]], "2021 (15)": [[616, "id3"]], "2018 - 2020 (4)": [[616, "id4"]], "Pythonic Style Access for Configurations": [[617, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[617, "pythonic-api-for-user-configurations"], [617, "id1"]], "Pythonic API for Framework Configurations": [[617, "pythonic-api-for-framework-configurations"], [617, "id2"]], "Get Started with Pythonic API for Configurations": [[617, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[617, "nas"]], "Quantization Introduction": [[618, "quantization-introduction"]], "Quantization Fundamentals": [[618, "quantization-fundamentals"]], "Quantization Support Matrix": [[618, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[618, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[618, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[618, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[618, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[618, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[618, "quantization-approaches"]], "Quantization Aware Training": [[618, "quantization-aware-training"]], "Accuracy Aware Tuning": [[618, "accuracy-aware-tuning"]], "Get Started": [[618, "get-started"]], "Turn OFF Auto Mixed Precision during Quantization": [[619, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[619, "tensorflow"]], "Release": [[620, "release"]], "Release Notes": [[620, "release-notes"]], "Known Issues": [[620, "known-issues"]], "Incompatible Changes": [[620, "incompatible-changes"]], "SigOpt Strategy": [[621, "sigopt-strategy"]], "Preparation": [[621, "preparation"]], "SigOpt Platform": [[621, "sigopt-platform"]], "Neural Compressor Configuration": [[621, "neural-compressor-configuration"]], "Performance": [[621, "performance"]], "Benefit of SigOpt Strategy": [[621, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[621, "performance-comparison-of-different-strategies"]], "TensorBoard": [[622, "tensorboard"]], "Get Started with TensorBoard": [[622, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[622, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[622, "tensorflow-tensorboard"]], "PyTorch Examples": [[622, "pytorch-examples"]], "TensorFlow Examples": [[622, "tensorflow-examples"]], "Transform": [[623, "transform"]], "Transform Support List": [[623, "transform-support-list"]], "Pytorch": [[623, "pytorch"]], "Tuning Strategies": [[624, "tuning-strategies"]], "Strategy Design": [[624, "strategy-design"]], "Tuning Space": [[624, "tuning-space"]], "Exit Policy": [[624, "exit-policy"]], "Accuracy Criteria": [[624, "accuracy-criteria"]], "Tuning Process": [[624, "tuning-process"]], "Tuning Algorithms": [[624, "tuning-algorithms"]], "Conservative Tuning": [[624, "conservative-tuning"]], "Basic": [[624, "basic"]], "MSE": [[624, "mse"]], "MSE_V2": [[624, "mse-v2"]], "HAWQ_V2": [[624, "hawq-v2"]], "Bayesian": [[624, "bayesian"]], "Exhaustive": [[624, "exhaustive"]], "Random": [[624, "random"]], "SigOpt": [[624, "sigopt"]], "TPE": [[624, "tpe"]], "Customize a New Tuning Strategy": [[624, "customize-a-new-tuning-strategy"]], "User Guide": [[625, "user-guide"]], "User YAML Configuration Files": [[626, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[626, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[627, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.11.0": [[627, "tensorflow-models-with-intel-tensorflow-2-11-0"]], "PyTorch Models with Torch 1.13.0+cpu in PTQ Mode": [[627, "pytorch-models-with-torch-1-13-0-cpu-in-ptq-mode"]], "PyTorch Models with Torch 1.13.0+cpu in QAT Mode": [[627, "pytorch-models-with-torch-1-13-0-cpu-in-qat-mode"]], "PyTorch Models with Torch and Intel\u00ae Extension for PyTorch* 1.13.0+cpu": [[627, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-13-0-cpu"]], "ONNX Models with ONNX Runtime 1.13.1": [[627, "onnx-models-with-onnx-runtime-1-13-1"]], "MXNet Models with MXNet 1.9.1": [[627, "mxnet-models-with-mxnet-1-9-1"]], "Validated Pruning Examples": [[627, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[627, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[627, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"644ec953a7dc_pruning_support": [[0, "module-644ec953a7dc_pruning_support"]], "module": [[0, "module-644ec953a7dc_pruning_support"], [1, "module-6ece06672ed3_v1_14"], [2, "module-6f0d0f71d92e_v1_13"], [3, "module-9e89549a08c8_v1_11"], [4, "module-block_mask"], [5, "module-env"], [6, "module-neural_compressor.adaptor.adaptor"], [7, "module-neural_compressor.adaptor"], [8, "module-neural_compressor.adaptor.keras"], [9, "module-neural_compressor.adaptor.keras_utils"], [10, "module-neural_compressor.adaptor.keras_utils.quantizer"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils"], [17, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [18, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [19, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [20, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [21, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [22, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [23, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [24, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [25, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [28, "module-neural_compressor.adaptor.ox_utils.operators"], [29, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [30, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [31, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [32, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [33, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [34, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [35, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [36, "module-neural_compressor.adaptor.ox_utils.operators.split"], [37, "module-neural_compressor.adaptor.ox_utils.quantizer"], [38, "module-neural_compressor.adaptor.ox_utils.util"], [39, "module-neural_compressor.adaptor.pytorch"], [40, "module-neural_compressor.adaptor.query"], [41, "module-neural_compressor.adaptor.tensorflow"], [42, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [43, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [44, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [104, "module-neural_compressor.adaptor.tf_utils.graph_util"], [105, "module-neural_compressor.adaptor.tf_utils"], [106, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [107, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [134, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [135, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [136, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [137, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [138, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [139, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [140, "module-neural_compressor.adaptor.tf_utils.util"], [141, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [142, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [143, "module-neural_compressor.adaptor.torch_utils"], [144, "module-neural_compressor.adaptor.torch_utils.onnx"], [145, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [146, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [147, "module-neural_compressor.adaptor.torch_utils.util"], [148, "module-neural_compressor.algorithm.algorithm"], [149, "module-neural_compressor.algorithm.fast_bias_correction"], [150, "module-neural_compressor.algorithm"], [151, "module-neural_compressor.algorithm.smooth_quant"], [152, "module-neural_compressor.algorithm.weight_correction"], [153, "module-neural_compressor.benchmark"], [154, "module-neural_compressor.conf.config"], [155, "module-neural_compressor.conf.dotdict"], [156, "module-neural_compressor.conf"], [157, "module-neural_compressor.conf.pythonic_config"], [158, "module-neural_compressor.config"], [159, "module-neural_compressor.contrib"], [160, "module-neural_compressor.contrib.strategy"], [161, "module-neural_compressor.contrib.strategy.sigopt"], [162, "module-neural_compressor.contrib.strategy.tpe"], [163, "module-neural_compressor.data.dataloaders.base_dataloader"], [164, "module-neural_compressor.data.dataloaders.dataloader"], [165, "module-neural_compressor.data.dataloaders.default_dataloader"], [166, "module-neural_compressor.data.dataloaders.fetcher"], [167, "module-neural_compressor.data.dataloaders"], [168, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [169, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [170, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [171, "module-neural_compressor.data.dataloaders.sampler"], [172, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [173, "module-neural_compressor.data.datasets.bert_dataset"], [174, "module-neural_compressor.data.datasets.coco_dataset"], [175, "module-neural_compressor.data.datasets.dataset"], [176, "module-neural_compressor.data.datasets.dummy_dataset"], [177, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [178, "module-neural_compressor.data.datasets.imagenet_dataset"], [179, "module-neural_compressor.data.datasets"], [180, "module-neural_compressor.data.datasets.style_transfer_dataset"], [181, "module-neural_compressor.data.filters.coco_filter"], [182, "module-neural_compressor.data.filters.filter"], [183, "module-neural_compressor.data.filters"], [184, "module-neural_compressor.data"], [185, "module-neural_compressor.data.transforms.coco_transform"], [186, "module-neural_compressor.data.transforms.imagenet_transform"], [187, "module-neural_compressor.data.transforms"], [188, "module-neural_compressor.data.transforms.postprocess"], [189, "module-neural_compressor.data.transforms.tokenization"], [190, "module-neural_compressor.data.transforms.transform"], [191, "module-neural_compressor.experimental.benchmark"], [192, "module-neural_compressor.experimental.common.criterion"], [193, "module-neural_compressor.experimental.common.dataloader"], [194, "module-neural_compressor.experimental.common"], [195, "module-neural_compressor.experimental.common.metric"], [196, "module-neural_compressor.experimental.common.model"], [197, "module-neural_compressor.experimental.common.optimizer"], [198, "module-neural_compressor.experimental.common.postprocess"], [199, "module-neural_compressor.experimental.common.torch_utils"], [200, "module-neural_compressor.experimental.component"], [201, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [202, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [203, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [204, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [205, "module-neural_compressor.experimental.data.dataloaders"], [206, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [207, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [208, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [209, "module-neural_compressor.experimental.data.dataloaders.sampler"], [210, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [211, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [212, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [213, "module-neural_compressor.experimental.data.datasets.dataset"], [214, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [215, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [216, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [217, "module-neural_compressor.experimental.data.datasets"], [218, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [219, "module-neural_compressor.experimental.data.filters.coco_filter"], [220, "module-neural_compressor.experimental.data.filters.filter"], [221, "module-neural_compressor.experimental.data.filters"], [222, "module-neural_compressor.experimental.data"], [223, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [224, "module-neural_compressor.experimental.data.transforms"], [225, "module-neural_compressor.experimental.data.transforms.tokenization"], [226, "module-neural_compressor.experimental.data.transforms.transform"], [227, "module-neural_compressor.experimental.distillation"], [228, "module-neural_compressor.experimental.export"], [229, "module-neural_compressor.experimental.export.qlinear2qdq"], [230, "module-neural_compressor.experimental.export.tf2onnx"], [231, "module-neural_compressor.experimental.export.torch2onnx"], [232, "module-neural_compressor.experimental.export.utils"], [233, "module-neural_compressor.experimental.graph_optimization"], [234, "module-neural_compressor.experimental"], [235, "module-neural_compressor.experimental.metric.bleu"], [236, "module-neural_compressor.experimental.metric.bleu_util"], [237, "module-neural_compressor.experimental.metric.coco_label_map"], [238, "module-neural_compressor.experimental.metric.coco_tools"], [239, "module-neural_compressor.experimental.metric.evaluate_squad"], [240, "module-neural_compressor.experimental.metric.f1"], [241, "module-neural_compressor.experimental.metric"], [242, "module-neural_compressor.experimental.metric.metric"], [243, "module-neural_compressor.experimental.mixed_precision"], [244, "module-neural_compressor.experimental.model_conversion"], [245, "module-neural_compressor.experimental.nas.basic_nas"], [246, "module-neural_compressor.experimental.nas.dynas"], [247, "module-neural_compressor.experimental.nas.dynast.dynas_manager"], [248, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"], [249, "module-neural_compressor.experimental.nas.dynast.dynas_search"], [250, "module-neural_compressor.experimental.nas.dynast.dynas_utils"], [251, "module-neural_compressor.experimental.nas.dynast"], [252, "module-neural_compressor.experimental.nas.dynast.supernetwork"], [253, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"], [254, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"], [255, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"], [256, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"], [257, "module-neural_compressor.experimental.nas"], [258, "module-neural_compressor.experimental.nas.nas"], [259, "module-neural_compressor.experimental.nas.nas_utils"], [260, "module-neural_compressor.experimental.nas.search_algorithms"], [261, "module-neural_compressor.experimental.pruning"], [262, "module-neural_compressor.experimental.pruning_recipes"], [263, "module-neural_compressor.experimental.pruning_recipes.patterns"], [264, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [265, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [266, "module-neural_compressor.experimental.pruning_v2"], [267, "module-neural_compressor.experimental.pytorch_pruner"], [268, "module-neural_compressor.experimental.pytorch_pruner.logger"], [269, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [270, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [271, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [272, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [273, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [274, "module-neural_compressor.experimental.quantization"], [275, "module-neural_compressor.experimental.scheduler"], [276, "module-neural_compressor"], [277, "module-neural_compressor.metric.bleu"], [278, "module-neural_compressor.metric.bleu_util"], [279, "module-neural_compressor.metric.coco_label_map"], [280, "module-neural_compressor.metric.coco_tools"], [281, "module-neural_compressor.metric.evaluate_squad"], [282, "module-neural_compressor.metric.f1"], [283, "module-neural_compressor.metric"], [284, "module-neural_compressor.metric.metric"], [285, "module-neural_compressor.mix_precision"], [286, "module-neural_compressor.model.base_model"], [287, "module-neural_compressor.model"], [288, "module-neural_compressor.model.keras_model"], [289, "module-neural_compressor.model.model"], [290, "module-neural_compressor.model.mxnet_model"], [291, "module-neural_compressor.model.nets_factory"], [292, "module-neural_compressor.model.onnx_model"], [293, "module-neural_compressor.model.tensorflow_model"], [294, "module-neural_compressor.model.torch_model"], [295, "module-neural_compressor.objective"], [296, "module-neural_compressor.pruner.criteria"], [297, "module-neural_compressor.pruner"], [298, "module-neural_compressor.pruner.logger"], [299, "module-neural_compressor.pruner.patterns"], [300, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"], [301, "module-neural_compressor.pruner.pruner_legacy.group_lasso"], [302, "module-neural_compressor.pruner.pruner_legacy"], [303, "module-neural_compressor.pruner.pruner_legacy.magnitude"], [304, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"], [305, "module-neural_compressor.pruner.pruner_legacy.pruner"], [306, "module-neural_compressor.pruner.pruners"], [307, "module-neural_compressor.pruner.pruning"], [308, "module-neural_compressor.pruner.regs"], [309, "module-neural_compressor.pruner.schedulers"], [310, "module-neural_compressor.pruner.utils"], [311, "module-neural_compressor.quantization"], [312, "module-neural_compressor.strategy.auto_mixed_precision"], [313, "module-neural_compressor.strategy.basic"], [314, "module-neural_compressor.strategy.bayesian"], [315, "module-neural_compressor.strategy.conservative"], [316, "module-neural_compressor.strategy.exhaustive"], [317, "module-neural_compressor.strategy.hawq_v2"], [318, "module-neural_compressor.strategy"], [319, "module-neural_compressor.strategy.mse"], [320, "module-neural_compressor.strategy.mse_v2"], [321, "module-neural_compressor.strategy.random"], [322, "module-neural_compressor.strategy.strategy"], [323, "module-neural_compressor.strategy.utils.constant"], [324, "module-neural_compressor.strategy.utils"], [325, "module-neural_compressor.strategy.utils.tuning_sampler"], [326, "module-neural_compressor.strategy.utils.tuning_space"], [327, "module-neural_compressor.strategy.utils.tuning_structs"], [328, "module-neural_compressor.strategy.utils.utility"], [329, "module-neural_compressor.training"], [330, "module-neural_compressor.utils.collect_layer_histogram"], [331, "module-neural_compressor.utils.constant"], [332, "module-neural_compressor.utils.create_obj_from_config"], [333, "module-neural_compressor.utils"], [334, "module-neural_compressor.utils.kl_divergence"], [335, "module-neural_compressor.utils.load_huggingface"], [336, "module-neural_compressor.utils.logger"], [337, "module-neural_compressor.utils.options"], [338, "module-neural_compressor.utils.pytorch"], [339, "module-neural_compressor.utils.utility"], [340, "module-neural_compressor.ux.components.benchmark.benchmark"], [341, "module-neural_compressor.ux.components.benchmark.benchmark_model"], [342, "module-neural_compressor.ux.components.benchmark.execute_benchmark"], [343, "module-neural_compressor.ux.components.benchmark"], [344, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"], [345, "module-neural_compressor.ux.components.config_generator.config_generator"], [346, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"], [347, "module-neural_compressor.ux.components.config_generator"], [348, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"], [349, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"], [350, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"], [351, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"], [352, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"], [353, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"], [354, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"], [355, "module-neural_compressor.ux.components.configuration_wizard"], [356, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"], [357, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"], [358, "module-neural_compressor.ux.components.db_manager.db_manager"], [359, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"], [360, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"], [361, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"], [362, "module-neural_compressor.ux.components.db_manager.db_models.dataset"], [363, "module-neural_compressor.ux.components.db_manager.db_models.domain"], [364, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"], [365, "module-neural_compressor.ux.components.db_manager.db_models.example"], [366, "module-neural_compressor.ux.components.db_manager.db_models.framework"], [367, "module-neural_compressor.ux.components.db_manager.db_models"], [368, "module-neural_compressor.ux.components.db_manager.db_models.metric"], [369, "module-neural_compressor.ux.components.db_manager.db_models.model"], [370, "module-neural_compressor.ux.components.db_manager.db_models.optimization"], [371, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"], [372, "module-neural_compressor.ux.components.db_manager.db_models.precision"], [373, "module-neural_compressor.ux.components.db_manager.db_models.profiling"], [374, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"], [375, "module-neural_compressor.ux.components.db_manager.db_models.project"], [376, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"], [377, "module-neural_compressor.ux.components.db_manager.db_models.transform"], [378, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"], [379, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"], [380, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"], [381, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"], [382, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"], [383, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"], [384, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"], [385, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"], [386, "module-neural_compressor.ux.components.db_manager.db_operations"], [387, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"], [388, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"], [389, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"], [390, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"], [391, "module-neural_compressor.ux.components.db_manager"], [392, "module-neural_compressor.ux.components.db_manager.params_interfaces"], [393, "module-neural_compressor.ux.components.db_manager.utils"], [394, "module-neural_compressor.ux.components.diagnosis.diagnosis"], [395, "module-neural_compressor.ux.components.diagnosis.factory"], [396, "module-neural_compressor.ux.components.diagnosis"], [397, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"], [398, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"], [399, "module-neural_compressor.ux.components.diagnosis.op_details"], [400, "module-neural_compressor.ux.components.diagnosis.op_entry"], [401, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"], [402, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"], [403, "module-neural_compressor.ux.components.file_browser.file_browser"], [404, "module-neural_compressor.ux.components.file_browser"], [405, "module-neural_compressor.ux.components.graph.attribute"], [406, "module-neural_compressor.ux.components.graph.collapser"], [407, "module-neural_compressor.ux.components.graph.edge"], [408, "module-neural_compressor.ux.components.graph.graph"], [409, "module-neural_compressor.ux.components.graph.graph_reader"], [410, "module-neural_compressor.ux.components.graph"], [411, "module-neural_compressor.ux.components.graph.node"], [412, "module-neural_compressor.ux.components.graph.reader"], [413, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"], [414, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"], [415, "module-neural_compressor.ux.components"], [416, "module-neural_compressor.ux.components.jobs_management"], [417, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"], [418, "module-neural_compressor.ux.components.jobs_management.jobs_manager"], [419, "module-neural_compressor.ux.components.jobs_management.request"], [420, "module-neural_compressor.ux.components.manage_workspace"], [421, "module-neural_compressor.ux.components.model.domain"], [422, "module-neural_compressor.ux.components.model"], [423, "module-neural_compressor.ux.components.model.model"], [424, "module-neural_compressor.ux.components.model.model_type_getter"], [425, "module-neural_compressor.ux.components.model.onnxrt"], [426, "module-neural_compressor.ux.components.model.onnxrt.model"], [427, "module-neural_compressor.ux.components.model.pytorch"], [428, "module-neural_compressor.ux.components.model.pytorch.model"], [429, "module-neural_compressor.ux.components.model.repository"], [430, "module-neural_compressor.ux.components.model.shape"], [431, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"], [432, "module-neural_compressor.ux.components.model.tensorflow"], [433, "module-neural_compressor.ux.components.model.tensorflow.keras"], [434, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"], [435, "module-neural_compressor.ux.components.model.tensorflow.model"], [436, "module-neural_compressor.ux.components.model.tensorflow.saved_model"], [437, "module-neural_compressor.ux.components.model.tensorflow.utils"], [438, "module-neural_compressor.ux.components.model_zoo.download_config"], [439, "module-neural_compressor.ux.components.model_zoo.download_model"], [440, "module-neural_compressor.ux.components.model_zoo.downloader"], [441, "module-neural_compressor.ux.components.model_zoo"], [442, "module-neural_compressor.ux.components.model_zoo.list_models"], [443, "module-neural_compressor.ux.components.names_mapper"], [444, "module-neural_compressor.ux.components.names_mapper.names_mapper"], [445, "module-neural_compressor.ux.components.optimization.execute_optimization"], [446, "module-neural_compressor.ux.components.optimization.factory"], [447, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"], [448, "module-neural_compressor.ux.components.optimization.graph_optimizer"], [449, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"], [450, "module-neural_compressor.ux.components.optimization"], [451, "module-neural_compressor.ux.components.optimization.mixed_precision"], [452, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"], [453, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"], [454, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"], [455, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"], [456, "module-neural_compressor.ux.components.optimization.optimization"], [457, "module-neural_compressor.ux.components.optimization.pruning"], [458, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"], [459, "module-neural_compressor.ux.components.optimization.pruning.pruning"], [460, "module-neural_compressor.ux.components.optimization.tune"], [461, "module-neural_compressor.ux.components.optimization.tune.tune_model"], [462, "module-neural_compressor.ux.components.optimization.tune.tuning"], [463, "module-neural_compressor.ux.components.optimization.tuning_history"], [464, "module-neural_compressor.ux.components.profiling.execute_profiling"], [465, "module-neural_compressor.ux.components.profiling.factory"], [466, "module-neural_compressor.ux.components.profiling"], [467, "module-neural_compressor.ux.components.profiling.profile_model"], [468, "module-neural_compressor.ux.components.profiling.profiler"], [469, "module-neural_compressor.ux.components.profiling.profiling"], [470, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"], [471, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"], [472, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"], [473, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"], [474, "module-neural_compressor.ux.inc_bench"], [475, "module-neural_compressor.ux"], [476, "module-neural_compressor.ux.utils.consts"], [477, "module-neural_compressor.ux.utils.environment"], [478, "module-neural_compressor.ux.utils.exceptions"], [479, "module-neural_compressor.ux.utils.executor"], [480, "module-neural_compressor.ux.utils.expiring_dict"], [481, "module-neural_compressor.ux.utils.github_info"], [482, "module-neural_compressor.ux.utils.hw_info"], [483, "module-neural_compressor.ux.utils"], [484, "module-neural_compressor.ux.utils.json_serializer"], [485, "module-neural_compressor.ux.utils.logger"], [486, "module-neural_compressor.ux.utils.parser"], [487, "module-neural_compressor.ux.utils.proc"], [488, "module-neural_compressor.ux.utils.processes"], [489, "module-neural_compressor.ux.utils.singleton"], [490, "module-neural_compressor.ux.utils.status_updates"], [491, "module-neural_compressor.ux.utils.templates"], [492, "module-neural_compressor.ux.utils.templates.metric"], [493, "module-neural_compressor.ux.utils.templates.workdir"], [494, "module-neural_compressor.ux.utils.utils"], [495, "module-neural_compressor.ux.utils.workload.config"], [496, "module-neural_compressor.ux.utils.workload.dataloader"], [497, "module-neural_compressor.ux.utils.workload.evaluation"], [498, "module-neural_compressor.ux.utils.workload.graph_optimization"], [499, "module-neural_compressor.ux.utils.workload"], [500, "module-neural_compressor.ux.utils.workload.mixed_precision"], [501, "module-neural_compressor.ux.utils.workload.model"], [502, "module-neural_compressor.ux.utils.workload.pruning"], [503, "module-neural_compressor.ux.utils.workload.quantization"], [504, "module-neural_compressor.ux.utils.workload.tuning"], [505, "module-neural_compressor.ux.utils.yaml_utils"], [506, "module-neural_compressor.ux.web.communication"], [507, "module-neural_compressor.ux.web.configuration"], [508, "module-neural_compressor.ux.web.exceptions"], [509, "module-neural_compressor.ux.web"], [510, "module-neural_compressor.ux.web.router"], [511, "module-neural_compressor.ux.web.server"], [512, "module-neural_compressor.ux.web.service.benchmark"], [513, "module-neural_compressor.ux.web.service.history_snapshot_parser"], [514, "module-neural_compressor.ux.web.service"], [515, "module-neural_compressor.ux.web.service.model"], [516, "module-neural_compressor.ux.web.service.optimization"], [517, "module-neural_compressor.ux.web.service.profiling"], [518, "module-neural_compressor.ux.web.service.request_data_processor"], [519, "module-neural_compressor.ux.web.service.response_generator"], [520, "module-neural_compressor.ux.web.service.workload"], [521, "module-neural_compressor.version"], [549, "module-neural_compressor.experimental.metric.bleu"]], "6ece06672ed3_v1_14": [[1, "module-6ece06672ed3_v1_14"]], "update_dataloaders() (in module 6ece06672ed3_v1_14)": [[1, "ece06672ed3_v1_14.update_dataloaders"]], "update_transformations() (in module 6ece06672ed3_v1_14)": [[1, "ece06672ed3_v1_14.update_transformations"]], "6f0d0f71d92e_v1_13": [[2, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[3, "module-9e89549a08c8_v1_11"]], "block_mask": [[4, "module-block_mask"]], "env": [[5, "module-env"]], "run_migrations_offline() (in module env)": [[5, "env.run_migrations_offline"]], "run_migrations_online() (in module env)": [[5, "env.run_migrations_online"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[6, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[6, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "convert() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.convert"]], "evaluate() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.evaluate"]], "inspect_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.inspect_tensor"]], "neural_compressor.adaptor.adaptor": [[6, "module-neural_compressor.adaptor.adaptor"]], "quantize() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.quantize_input"]], "query_fused_patterns() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.query_fused_patterns"]], "query_fw_capability() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.save"]], "set_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.set_tensor"]], "neural_compressor.adaptor": [[7, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[8, "neural_compressor.adaptor.keras.KerasQuery"]], "convert() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.convert"]], "evaluate() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.evaluate"]], "get_op_types() (neural_compressor.adaptor.keras.kerasquery method)": [[8, "neural_compressor.adaptor.keras.KerasQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.keras.kerasquery method)": [[8, "neural_compressor.adaptor.keras.KerasQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.get_optype_wise_ability"]], "get_precisions() (neural_compressor.adaptor.keras.kerasquery method)": [[8, "neural_compressor.adaptor.keras.KerasQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.keras.kerasquery method)": [[8, "neural_compressor.adaptor.keras.KerasQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.keras.kerasquery method)": [[8, "neural_compressor.adaptor.keras.KerasQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.inspect_tensor"]], "neural_compressor.adaptor.keras": [[8, "module-neural_compressor.adaptor.keras"]], "quantize() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.set_tensor"]], "neural_compressor.adaptor.keras_utils": [[9, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[10, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "evaluate() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor.evaluate"]], "inspect_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor.inspect_tensor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "quantize() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor.recover_tuned_model"]], "set_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor.set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calc_kl_th_dict() (neural_compressor.adaptor.mxnet_utils.util.calibcollector method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector.calc_kl_th_dict"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.calibcollector method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.namecollector method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.tensorcollector method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector.collect_gluon"]], "collect_module() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.collect_module"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "min_max_dict (neural_compressor.adaptor.mxnet_utils.util.calibdata property)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData.min_max_dict"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "post_batch() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.post_batch"]], "post_collect() (neural_compressor.adaptor.mxnet_utils.util.calibdata method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData.post_collect"]], "pre_batch() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.pre_batch"]], "pre_batch() (neural_compressor.adaptor.mxnet_utils.util.tensorcollector method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector.pre_batch"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "evaluate() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.evaluate"]], "inspect_tensor() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.inspect_tensor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "quantize() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.query_fw_capability"]], "recover() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.recover"]], "save() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.save"]], "smooth_quant() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.smooth_quant"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "augment_graph() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.augment_graph"]], "calculate_quantization_params() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_quantization_params"]], "calculate_scale_zeropoint() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_scale_zeropoint"]], "calib_smooth() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calib_smooth"]], "dump_calibration() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_calibration"]], "dump_minmax() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_minmax"]], "dump_tensor() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_tensor"]], "get_intermediate_outputs() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[16, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.activation.qactivationoperator method)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[17, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.quantize"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.activation.removableactivationoperator method)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.quantize_check"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.activation.removableactivationoperator method)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator.quantize_check"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[18, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[18, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.argmax.argmaxoperator method)": [[18, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.argmax.argmaxoperator method)": [[18, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[18, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[19, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[19, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[19, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.attention.qattentionoperator method)": [[19, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[19, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[19, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[19, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.quantize"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[20, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[20, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[20, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.binary_op.qbinaryoperator method)": [[20, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[20, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[20, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[20, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[20, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.quantize_check"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.concat.qconcatoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[21, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.quantize_check"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[22, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[22, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[22, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.conv.qconvoperator method)": [[22, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[22, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[22, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[22, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.quantize"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[23, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.quantize_check"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[24, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[24, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[24, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.qembedlayernormalizationoperator method)": [[24, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[24, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[24, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[24, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.quantize"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[25, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[25, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[25, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[25, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[25, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[25, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[25, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.quantize_check"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[26, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[26, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gavgpool.globalaveragepooloperator method)": [[26, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gavgpool.qglobalaveragepooloperator method)": [[26, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gavgpool.globalaveragepooloperator method)": [[26, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[27, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[27, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[27, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gemm.qgemmoperator method)": [[27, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[27, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[27, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[27, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.quantize_check"]], "neural_compressor.adaptor.ox_utils.operators": [[28, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[29, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[29, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[29, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[29, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[29, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.quantize"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[30, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[30, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[30, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.matmul.qmatmuloperator method)": [[30, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[30, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[30, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[30, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.quantize"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[31, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[31, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[31, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[31, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[31, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[31, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[31, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.quantize_check"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.ops.qoperator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[32, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.quantize_check"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[33, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[33, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[33, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[33, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[33, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[33, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[33, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.quantize_check"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[34, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[34, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pooling.qpooloperator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[34, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.quantize_check"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[35, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[35, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[35, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[35, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[35, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[35, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[35, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.quantize_check"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[36, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[36, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[36, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.split.qsplitoperator method)": [[36, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[36, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[36, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.split": [[36, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[36, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.quantize"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "check_opset_version() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.check_opset_version"]], "convert_qdq_to_operator_oriented() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.convert_qdq_to_operator_oriented"]], "dequantize_tensor() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.dequantize_tensor"]], "dtype_cast() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.dtype_cast"]], "get_bias_add_nodes() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.get_bias_add_nodes"]], "insert_qdq() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.insert_qdq"]], "is_valid_quantize_weight() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.is_valid_quantize_weight"]], "merge_dedicated_qdq_pair() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.merge_dedicated_qdq_pair"]], "neural_compressor.adaptor.ox_utils.quantizer": [[37, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "quantize_bias() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_bias"]], "quantize_bias_tensor() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_bias_tensor"]], "quantize_inputs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_inputs"]], "quantize_model() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_model"]], "quantize_outputs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_outputs"]], "quantize_weight_per_channel() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_weight_per_channel"]], "quantize_weights_per_channel() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_weights_per_channel"]], "remove_redundant_pairs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.remove_redundant_pairs"]], "should_cast() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_cast"]], "should_convert() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_convert"]], "should_quantize() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_quantize"]], "tensor_proto_to_array() (neural_compressor.adaptor.ox_utils.quantizer.quantizer static method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.tensor_proto_to_array"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "adjust_weights_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_input"]], "adjust_weights_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_op"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "get_smooth_scales_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_input"]], "get_smooth_scales_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_op"]], "insert_smooth_mul_op_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_input"]], "insert_smooth_mul_op_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_op"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[38, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[39, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[39, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "calculate_hessian_trace() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[39, "neural_compressor.adaptor.pytorch.TemplateAdaptor.calculate_hessian_trace"]], "calculate_op_sensitivity() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.calculate_op_sensitivity"]], "convert_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.convert_sub_graph"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.evaluate"]], "fuse_fx_model() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.fuse_fx_model"]], "get_non_quant_modules() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.get_non_quant_modules"]], "get_op_types() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types_by_precision"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[39, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "get_quantization_capability() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_quantization_capability"]], "is_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_child"]], "is_fused_module() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[39, "neural_compressor.adaptor.pytorch.TemplateAdaptor.is_fused_module"]], "is_fused_op() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_op"]], "is_last_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_last_fused_child"]], "neural_compressor.adaptor.pytorch": [[39, "module-neural_compressor.adaptor.pytorch"]], "prepare_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.prepare_sub_graph"]], "quantize() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.save"]], "smooth_quant() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[39, "neural_compressor.adaptor.pytorch.TemplateAdaptor.smooth_quant"]], "train() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.train"]], "train() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.train"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability"]], "get_fuse_patterns() (neural_compressor.adaptor.query.querybackendcapability method)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.query.querybackendcapability method)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.query.querybackendcapability method)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability.get_op_types"]], "get_precisions() (neural_compressor.adaptor.query.querybackendcapability method)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.query.querybackendcapability method)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.query.querybackendcapability method)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability.get_version"]], "neural_compressor.adaptor.query": [[40, "module-neural_compressor.adaptor.query"]], "set_quantization_config() (neural_compressor.adaptor.query.querybackendcapability method)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability.set_quantization_config"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[41, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "calculate_op_sensitivity() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.calculate_op_sensitivity"]], "convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.convert"]], "diagnosis_helper() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.diagnosis_helper"]], "evaluate() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.evaluate"]], "fused_node_mapping() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.fused_node_mapping"]], "generate_internal_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.generate_internal_patterns"]], "get_bf16_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_bf16_patterns"]], "get_eightbit_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_eightbit_patterns"]], "get_fuse_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.get_optype_wise_ability"]], "get_output_op_names() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.get_output_op_names"]], "get_quantization_capability() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_version"]], "inspect_activation() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_activation"]], "inspect_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_tensor"]], "inspect_weight_and_bias() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_weight_and_bias"]], "neural_compressor.adaptor.tensorflow": [[41, "module-neural_compressor.adaptor.tensorflow"]], "qat_convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.qat_convert"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflow_itexadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.set_tensor"]], "train() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.train"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[42, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "bf16_convert() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[42, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.bf16_convert"]], "convert() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[42, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.convert"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[42, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "quantize() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[42, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.quantize"]], "quantize_with_qdq_pattern() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[42, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.quantize_with_qdq_pattern"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[43, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "bf16_convert() (neural_compressor.adaptor.tf_utils.graph_converter_without_calib.graphconverterwithoutcalib method)": [[43, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib.bf16_convert"]], "convert_without_calib() (neural_compressor.adaptor.tf_utils.graph_converter_without_calib.graphconverterwithoutcalib method)": [[43, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib.convert_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[43, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "quantize_without_calib() (neural_compressor.adaptor.tf_utils.graph_converter_without_calib.graphconverterwithoutcalib method)": [[43, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib.quantize_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[44, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.bf16convert method)": [[44, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[44, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[46, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.convertaddtobiasaddoptimizer method)": [[46, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[47, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.convertlayoutoptimizer method)": [[47, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[48, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.convertleakyreluoptimizer method)": [[48, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.convertnantorandom method)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "strtobool() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.strtobool"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.dequantizecastoptimizer method)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.dilatedcontraction method)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.injectdummybiasaddoptimizer method)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.expanddimsoptimizer method)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.fetchweightfromreshapeoptimizer method)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "scale_after_normalization() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.scale_after_normalization"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "check_all_folded() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_all_folded"]], "check_const_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_const_inputs"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.fusebiasaddandaddoptimizer method)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.fusecolumnwisemuloptimizer method)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.fuseconvwithmathoptimizer method)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.fusedecomposedbnoptimizer method)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer.do_transformation"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.fusedecomposedinoptimizer method)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer.do_transformation"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.fusegeluoptimizer method)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.fuselayernormoptimizer method)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.fusepadwithconv2doptimizer method)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.fusepadwithfp32conv2doptimizer method)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.fusetransposereshapeoptimizer method)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.graphcseoptimizer method)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.grappleroptimizer method)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.insertprintminmaxnode method)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.movesqueezeafterreluoptimizer method)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "get_excluded_node_names() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.get_excluded_node_names"]], "get_matched_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.get_matched_nodes"]], "get_optimized_model() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.get_optimized_model"]], "has_positive_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.removetrainingnodesoptimizer method)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.renamebatchnormoptimizer method)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.splitsharedinputoptimizer method)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.stripequivalentnodesoptimizer method)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.stripunusednodesoptimizer method)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.switchoptimizer method)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.graphrewriterbase method)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.freezefakequantopoptimizer method)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.do_transformation"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "do_transformation_without_calib() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.do_transformation_without_calib"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.fuseconvredundantdequantizetransformer method)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.fuseconvrequantizetransformer method)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.fusematmulredundantdequantizetransformer method)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizenewapitransformer method)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizetransformer method)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizenewapitransformer method)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizetransformer method)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.metainfochangingmemopoptimizer method)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.posthostconstconverter method)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.postcseoptimizer method)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.quantizedrnnconverter method)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.scalepropagationtransformer method)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "add_graph_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.add_graph_input"]], "add_graph_output() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.add_graph_output"]], "append_node() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.append_node"]], "convert_qdq_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.convert_qdq_nodes"]], "copy_dtype() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.copy_dtype"]], "copy_shape() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.copy_shape"]], "create_new_graph_with_same_config() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.create_new_graph_with_same_config"]], "delete_qdq_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.delete_qdq_nodes"]], "delete_unused_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.delete_unused_nodes"]], "dump_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.dump_graph"]], "dump_node_statistics() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.dump_node_statistics"]], "extra_opset (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph property)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.extra_opset"]], "extract_sub_graph_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.extract_sub_graph_nodes"]], "find_output_consumers() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.find_output_consumers"]], "get_dtype() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_dtype"]], "get_node_by_name() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_node_by_name"]], "get_node_by_output() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_node_by_output"]], "get_node_by_output_in_current_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_node_by_output_in_current_graph"]], "get_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_nodes"]], "get_rank() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_rank"]], "get_shape() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_shape"]], "get_tensor_value() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_tensor_value"]], "input_names (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph property)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.input_names"]], "insert_new_node_on_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.insert_new_node_on_input"]], "insert_new_node_on_output() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.insert_new_node_on_output"]], "insert_node_on_output() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.insert_node_on_output"]], "is_const() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.is_const"]], "is_empty_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.is_empty_input"]], "is_target() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.is_target"]], "make_const() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.make_const"]], "make_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.make_graph"]], "make_model() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.make_model"]], "make_node() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.make_node"]], "make_onnx_graph_io() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.make_onnx_graph_io"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "opset (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph property)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.opset"]], "remove_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.remove_input"]], "remove_node() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.remove_node"]], "replace_all_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.replace_all_inputs"]], "replace_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.replace_input"]], "replace_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.replace_inputs"]], "reset_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.reset_nodes"]], "safe_remove_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.safe_remove_nodes"]], "safe_to_remove_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.safe_to_remove_nodes"]], "set_config() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.set_config"]], "set_dtype() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.set_dtype"]], "set_node_by_name() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.set_node_by_name"]], "set_shape() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.set_shape"]], "topological_sort() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.topological_sort"]], "update_node_shape_dtype() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.update_node_shape_dtype"]], "update_proto() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.update_proto"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "attr (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.attr"]], "child_name() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.child_name"]], "data_format (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.data_format"]], "domain (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.domain"]], "get_attr() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_attr"]], "get_attr_int() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_attr_int"]], "get_attr_str() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_attr_str"]], "get_attr_value() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_attr_value"]], "get_body_graphs() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_body_graphs"]], "get_implicit_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_implicit_inputs"]], "get_onnx_attrs() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_onnx_attrs"]], "get_tensor_value() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_tensor_value"]], "get_value_attr() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_value_attr"]], "input (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.input"]], "inputs (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.inputs"]], "is_const() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.is_const"]], "is_graph_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.is_graph_input"]], "is_graph_input_default_const() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.is_graph_input_default_const"]], "is_nhwc() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.is_nhwc"]], "is_scalar() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.is_scalar"]], "is_while() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.is_while"]], "name (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.name"]], "need_skip() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.need_skip"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "op (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.op"]], "output (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.output"]], "output_dtypes (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.output_dtypes"]], "output_shapes (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.output_shapes"]], "scalar_to_dim1() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.scalar_to_dim1"]], "set_attr() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.set_attr"]], "set_attr_onnx() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.set_attr_onnx"]], "set_body_graph_as_attr() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.set_body_graph_as_attr"]], "set_tensor_value() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.set_tensor_value"]], "skip_conversion (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.skip_conversion"]], "summary (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.summary"]], "type (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.type"]], "update_proto() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.update_proto"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "attributes (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.onnxopschema property)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema.attributes"]], "domain (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.onnxopschema property)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema.domain"]], "from_onnx_schema() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.onnxopschema static method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema.from_onnx_schema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "has_attribute() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.onnxopschema method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema.has_attribute"]], "name (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.onnxopschema property)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema.name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "since_version (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.onnxopschema property)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema.since_version"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.generategraphwithqdqpattern method)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.mergeduplicatedqdqoptimizer method)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.shareqdqforitexypatternoptimizer method)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "add_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.add_node"]], "analysis_rnn_model() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.analysis_rnn_model"]], "compare_node_attr() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.compare_node_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_node"]], "dump_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.dump_graph"]], "gen_valid_sampling_log() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.gen_valid_sampling_log"]], "generate_int32_bias_for_conv() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.generate_int32_bias_for_conv"]], "generate_int32_bias_for_matmul() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.generate_int32_bias_for_matmul"]], "get_frame_info() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.get_frame_info"]], "get_graph_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.get_graph_input_output"]], "graph (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer property)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.graph"]], "has_positive_input() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_util": [[104, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.node_name_from_input"]], "parse_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.parse_graph"]], "query_fusion_pattern_nodes() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.query_fusion_pattern_nodes"]], "remove_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node"]], "remove_node_with_single_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node_with_single_input_output"]], "replace_const_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_const_node"]], "replace_constant_graph_with_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_constant_graph_with_constant_node"]], "replace_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_node"]], "replace_single_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_single_node"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int"]], "set_attr_int_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int_list"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_type_list"]], "values_from_const() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.values_from_const"]], "neural_compressor.adaptor.tf_utils": [[105, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[106, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[107, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[107, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase class method)": [[107, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantize method)": [[107, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize.get_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase method)": [[107, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[107, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "add_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.add_quantize_recipe"]], "clear_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.clear_quantize_recipe"]], "get_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.get_quantize_recipe"]], "is_empty() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.is_empty"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "query_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.query_layer"]], "remove_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layer"]], "remove_layers() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layers"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[110, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[110, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.build"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.build"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.call"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.call"]], "compute_output_shape() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.compute_output_shape"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase class method)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.get_config"]], "losses (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.losses"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "non_trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.non_trainable_weights"]], "query_input_index() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.query_input_index"]], "trainable (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable"]], "trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable_weights"]], "updates (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.updates"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_newly_bn_leakyrelu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_leakyrelu_fusion"]], "apply_newly_bn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "apply_conv3d_add_addn_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_addn_fusion"]], "apply_conv3d_add_addn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_addn_relu_fusion"]], "apply_conv3d_add_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_fusion"]], "apply_conv3d_add_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_relu_fusion"]], "apply_conv3d_single_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_single_fusion"]], "apply_conv_biasadd_hardswish_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_hardswish_fusion"]], "apply_newly_conv_biasadd_addn_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_addn_fusion"]], "apply_newly_conv_biasadd_addn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_addn_relu_fusion"]], "apply_newly_conv_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_fusion"]], "apply_newly_conv_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_relu_fusion"]], "apply_newly_conv_biasadd_swishf32_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_swishf32_fusion"]], "apply_newly_conv_single_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_single_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "apply_deconv2d_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_deconv2d_biasadd_fusion"]], "apply_deconv3d_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_deconv3d_biasadd_fusion"]], "apply_single_deconv2d_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_single_deconv2d_fusion"]], "apply_single_deconv3d_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_single_deconv3d_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "apply_newly_in_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.apply_newly_in_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "apply_batchmatmulv2_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_fusion"]], "apply_batchmatmulv2_mul_add_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_mul_add_fusion"]], "apply_matmul_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_fusion"]], "apply_matmul_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.optimizeqdqgraph method)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph.do_transform"]], "get_quantized_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.optimizeqdqgraph method)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph.get_quantized_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "add_output_graph_node() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.add_output_graph_node"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.apply_the_transform"]], "create_nodes_map() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.create_nodes_map"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.do_transform"]], "eightbitize_single_input_tensor_node() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.eightbitize_single_input_tensor_node"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "register_transformer() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.register_transformer"]], "remove_dead_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.remove_dead_nodes"]], "remove_redundant_quantization() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.remove_redundant_quantization"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_newly_bn_leakyrelu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_leakyrelu_fusion"]], "apply_newly_bn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "apply_conv_biasadd_addn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_addn_relu_fusion"]], "apply_conv_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_fusion"]], "apply_conv_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_relu_fusion"]], "apply_conv_single_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_single_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.quantizegraphforintel method)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel.do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "apply_matmul_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_fusion"]], "apply_matmul_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "copy_attr() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.copy_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_node"]], "ensure_tensor_name_has_port() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.ensure_tensor_name_has_port"]], "generate_quantized_weight_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.generate_quantized_weight_node"]], "get_sorted_graph() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.get_sorted_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.node_name_from_input"]], "remove_training_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.remove_training_nodes"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_int"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_type_list"]], "split_shared_inputs() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.split_shared_inputs"]], "unique_node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.unique_node_name_from_input"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[134, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "convert() (neural_compressor.adaptor.tf_utils.tf2onnx_converter.tensorflowqdqtoonnxqdqconverter method)": [[134, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter.convert"]], "duplicate_tf_quantizev2_nodes() (neural_compressor.adaptor.tf_utils.tf2onnx_converter.tensorflowqdqtoonnxqdqconverter method)": [[134, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter.duplicate_tf_quantizev2_nodes"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[134, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "tf_graph_optimize() (neural_compressor.adaptor.tf_utils.tf2onnx_converter.tensorflowqdqtoonnxqdqconverter method)": [[134, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter.tf_graph_optimize"]], "transpose_inputs() (neural_compressor.adaptor.tf_utils.tf2onnx_converter.tensorflowqdqtoonnxqdqconverter method)": [[134, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter.transpose_inputs"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[135, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.biascorrection method)": [[135, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[135, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[136, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[136, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.do_transformation"]], "generate_input_map() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[136, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.generate_input_map"]], "get_node_name_from_input() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[136, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.get_node_name_from_input"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[136, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[136, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.node_name_from_input"]], "parse_input_pb() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[136, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.parse_input_pb"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[137, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[138, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.insertlogging method)": [[138, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[138, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[139, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.rerangequantizedconcat method)": [[139, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[139, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[140, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[141, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[141, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[141, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "forward() (neural_compressor.adaptor.torch_utils.bf16_convert.bf16modulewrapper method)": [[141, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper.forward"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[141, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "get_act_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_act_gap"]], "get_act_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_act_traces"]], "get_avg_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_avg_traces"]], "get_device() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_device"]], "get_fused_mapping() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_fused_mapping"]], "get_params() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_params"]], "get_vthv_weight() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_vtHv_weight"]], "get_weight_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_weight_traces"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "hook_fn_act() (neural_compressor.adaptor.torch_utils.hawq_metric.node_collector method)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector.hook_fn_act"]], "is_fused_module() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.is_fused_module"]], "mse_metric_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.mse_metric_gap"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[142, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "register_act_grad_hooks() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.register_act_grad_hooks"]], "remove() (neural_compressor.adaptor.torch_utils.hawq_metric.node_collector method)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector.remove"]], "reset_act_gradient_and_hooks() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.reset_act_gradient_and_hooks"]], "neural_compressor.adaptor.torch_utils": [[143, "module-neural_compressor.adaptor.torch_utils"]], "datareader (class in neural_compressor.adaptor.torch_utils.onnx)": [[144, "neural_compressor.adaptor.torch_utils.onnx.DataReader"]], "get_next() (neural_compressor.adaptor.torch_utils.onnx.datareader method)": [[144, "neural_compressor.adaptor.torch_utils.onnx.DataReader.get_next"]], "neural_compressor.adaptor.torch_utils.onnx": [[144, "module-neural_compressor.adaptor.torch_utils.onnx"]], "graphtrace (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[145, "neural_compressor.adaptor.torch_utils.smooth_quant.GraphTrace"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[145, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[145, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "recover() (neural_compressor.adaptor.torch_utils.smooth_quant.torchsmoothquant method)": [[145, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant.recover"]], "transform() (neural_compressor.adaptor.torch_utils.smooth_quant.torchsmoothquant method)": [[145, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant.transform"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[146, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[146, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[146, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "neural_compressor.adaptor.torch_utils.util": [[147, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[148, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[148, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[148, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "adaptor (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[148, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.adaptor"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[148, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "append_algorithm() (neural_compressor.algorithm.algorithm.algorithmscheduler method)": [[148, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.append_algorithm"]], "calib_iter (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[148, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.calib_iter"]], "dataloader (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[148, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.dataloader"]], "neural_compressor.algorithm.algorithm": [[148, "module-neural_compressor.algorithm.algorithm"]], "origin_model (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[148, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.origin_model"]], "q_model (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[148, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.q_model"]], "reset_exec_algorithms() (neural_compressor.algorithm.algorithm.algorithmscheduler method)": [[148, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.reset_exec_algorithms"]], "support_algorithms() (neural_compressor.algorithm.algorithm.algorithms class method)": [[148, "neural_compressor.algorithm.algorithm.ALGORITHMS.support_algorithms"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[149, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[149, "module-neural_compressor.algorithm.fast_bias_correction"]], "algorithms (class in neural_compressor.algorithm)": [[150, "neural_compressor.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm)": [[150, "neural_compressor.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm)": [[150, "neural_compressor.algorithm.AlgorithmScheduler"]], "adaptor (neural_compressor.algorithm.algorithmscheduler property)": [[150, "neural_compressor.algorithm.AlgorithmScheduler.adaptor"]], "algorithm_registry() (in module neural_compressor.algorithm)": [[150, "neural_compressor.algorithm.algorithm_registry"]], "append_algorithm() (neural_compressor.algorithm.algorithmscheduler method)": [[150, "neural_compressor.algorithm.AlgorithmScheduler.append_algorithm"]], "calib_iter (neural_compressor.algorithm.algorithmscheduler property)": [[150, "neural_compressor.algorithm.AlgorithmScheduler.calib_iter"]], "dataloader (neural_compressor.algorithm.algorithmscheduler property)": [[150, "neural_compressor.algorithm.AlgorithmScheduler.dataloader"]], "neural_compressor.algorithm": [[150, "module-neural_compressor.algorithm"]], "origin_model (neural_compressor.algorithm.algorithmscheduler property)": [[150, "neural_compressor.algorithm.AlgorithmScheduler.origin_model"]], "q_model (neural_compressor.algorithm.algorithmscheduler property)": [[150, "neural_compressor.algorithm.AlgorithmScheduler.q_model"]], "reset_exec_algorithms() (neural_compressor.algorithm.algorithmscheduler method)": [[150, "neural_compressor.algorithm.AlgorithmScheduler.reset_exec_algorithms"]], "support_algorithms() (neural_compressor.algorithm.algorithms class method)": [[150, "neural_compressor.algorithm.ALGORITHMS.support_algorithms"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[151, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[151, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[152, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[152, "module-neural_compressor.algorithm.weight_correction"]], "benchmark (class in neural_compressor.benchmark)": [[153, "neural_compressor.benchmark.Benchmark"]], "dataloader() (neural_compressor.benchmark.benchmark method)": [[153, "neural_compressor.benchmark.Benchmark.dataloader"]], "fit() (in module neural_compressor.benchmark)": [[153, "neural_compressor.benchmark.fit"]], "metric() (neural_compressor.benchmark.benchmark method)": [[153, "neural_compressor.benchmark.Benchmark.metric"]], "neural_compressor.benchmark": [[153, "module-neural_compressor.benchmark"]], "postprocess() (neural_compressor.benchmark.benchmark method)": [[153, "neural_compressor.benchmark.Benchmark.postprocess"]], "benchmark_conf (class in neural_compressor.conf.config)": [[154, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[154, "neural_compressor.conf.config.Conf"]], "distillation_conf (class in neural_compressor.conf.config)": [[154, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[154, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[154, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[154, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[154, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[154, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[154, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[154, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[155, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[155, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[155, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[155, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[156, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[157, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[158, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[158, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[158, "neural_compressor.config.DistillationConfig"]], "exportconfig (class in neural_compressor.config)": [[158, "neural_compressor.config.ExportConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[158, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[158, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mixedprecisionconfig (class in neural_compressor.config)": [[158, "neural_compressor.config.MixedPrecisionConfig"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[158, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[158, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[158, "neural_compressor.config.PostTrainingQuantConfig"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[158, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[158, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[158, "neural_compressor.config.TF2ONNXConfig"]], "torch2onnxconfig (class in neural_compressor.config)": [[158, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[158, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[158, "neural_compressor.config.WeightPruningConfig"]], "absolute (neural_compressor.config.accuracycriterion property)": [[158, "neural_compressor.config.AccuracyCriterion.absolute"]], "approach (neural_compressor.config.posttrainingquantconfig property)": [[158, "neural_compressor.config.PostTrainingQuantConfig.approach"]], "approach (neural_compressor.config.quantizationawaretrainingconfig property)": [[158, "neural_compressor.config.QuantizationAwareTrainingConfig.approach"]], "backend (neural_compressor.config.benchmarkconfig property)": [[158, "neural_compressor.config.BenchmarkConfig.backend"]], "check_value() (in module neural_compressor.config)": [[158, "neural_compressor.config.check_value"]], "cores_per_instance (neural_compressor.config.benchmarkconfig property)": [[158, "neural_compressor.config.BenchmarkConfig.cores_per_instance"]], "criterion (neural_compressor.config.accuracycriterion property)": [[158, "neural_compressor.config.AccuracyCriterion.criterion"]], "criterion (neural_compressor.config.distillationconfig property)": [[158, "neural_compressor.config.DistillationConfig.criterion"]], "dtype (neural_compressor.config.exportconfig property)": [[158, "neural_compressor.config.ExportConfig.dtype"]], "dynamic_axes (neural_compressor.config.exportconfig property)": [[158, "neural_compressor.config.ExportConfig.dynamic_axes"]], "example_inputs (neural_compressor.config.exportconfig property)": [[158, "neural_compressor.config.ExportConfig.example_inputs"]], "higher_is_better (neural_compressor.config.accuracycriterion property)": [[158, "neural_compressor.config.AccuracyCriterion.higher_is_better"]], "input_names (neural_compressor.config.exportconfig property)": [[158, "neural_compressor.config.ExportConfig.input_names"]], "inputs (neural_compressor.config.benchmarkconfig property)": [[158, "neural_compressor.config.BenchmarkConfig.inputs"]], "inter_num_of_threads (neural_compressor.config.benchmarkconfig property)": [[158, "neural_compressor.config.BenchmarkConfig.inter_num_of_threads"]], "intra_num_of_threads (neural_compressor.config.benchmarkconfig property)": [[158, "neural_compressor.config.BenchmarkConfig.intra_num_of_threads"]], "iteration (neural_compressor.config.benchmarkconfig property)": [[158, "neural_compressor.config.BenchmarkConfig.iteration"]], "max_trials (neural_compressor.config.tuningcriterion property)": [[158, "neural_compressor.config.TuningCriterion.max_trials"]], "neural_compressor.config": [[158, "module-neural_compressor.config"]], "num_of_instance (neural_compressor.config.benchmarkconfig property)": [[158, "neural_compressor.config.BenchmarkConfig.num_of_instance"]], "objective (neural_compressor.config.tuningcriterion property)": [[158, "neural_compressor.config.TuningCriterion.objective"]], "opset_version (neural_compressor.config.exportconfig property)": [[158, "neural_compressor.config.ExportConfig.opset_version"]], "optimizer (neural_compressor.config.distillationconfig property)": [[158, "neural_compressor.config.DistillationConfig.optimizer"]], "output_names (neural_compressor.config.exportconfig property)": [[158, "neural_compressor.config.ExportConfig.output_names"]], "outputs (neural_compressor.config.benchmarkconfig property)": [[158, "neural_compressor.config.BenchmarkConfig.outputs"]], "quant_format (neural_compressor.config.exportconfig property)": [[158, "neural_compressor.config.ExportConfig.quant_format"]], "random_seed (neural_compressor.config.options property)": [[158, "neural_compressor.config.Options.random_seed"]], "relative (neural_compressor.config.accuracycriterion property)": [[158, "neural_compressor.config.AccuracyCriterion.relative"]], "resume_from (neural_compressor.config.options property)": [[158, "neural_compressor.config.Options.resume_from"]], "strategy (neural_compressor.config.tuningcriterion property)": [[158, "neural_compressor.config.TuningCriterion.strategy"]], "strategy_kwargs (neural_compressor.config.tuningcriterion property)": [[158, "neural_compressor.config.TuningCriterion.strategy_kwargs"]], "teacher_model (neural_compressor.config.distillationconfig property)": [[158, "neural_compressor.config.DistillationConfig.teacher_model"]], "tensorboard (neural_compressor.config.options property)": [[158, "neural_compressor.config.Options.tensorboard"]], "timeout (neural_compressor.config.tuningcriterion property)": [[158, "neural_compressor.config.TuningCriterion.timeout"]], "tolerable_loss (neural_compressor.config.accuracycriterion property)": [[158, "neural_compressor.config.AccuracyCriterion.tolerable_loss"]], "tuning_criterion (neural_compressor.config.posttrainingquantconfig property)": [[158, "neural_compressor.config.PostTrainingQuantConfig.tuning_criterion"]], "warmup (neural_compressor.config.benchmarkconfig property)": [[158, "neural_compressor.config.BenchmarkConfig.warmup"]], "weight_compression (neural_compressor.config.weightpruningconfig property)": [[158, "neural_compressor.config.WeightPruningConfig.weight_compression"]], "workspace (neural_compressor.config.options property)": [[158, "neural_compressor.config.Options.workspace"]], "neural_compressor.contrib": [[159, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[160, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[161, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "create_exp() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[161, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.create_exp"]], "get_acc_target() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[161, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.get_acc_target"]], "neural_compressor.contrib.strategy.sigopt": [[161, "module-neural_compressor.contrib.strategy.sigopt"]], "next_tune_cfg() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[161, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.next_tune_cfg"]], "params_to_tune_configs() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[161, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.params_to_tune_configs"]], "traverse() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[161, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.traverse"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[162, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "add_loss_to_tuned_history_and_find_best() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[162, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.add_loss_to_tuned_history_and_find_best"]], "calculate_loss() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[162, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.calculate_loss"]], "neural_compressor.contrib.strategy.tpe": [[162, "module-neural_compressor.contrib.strategy.tpe"]], "object_evaluation() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[162, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.object_evaluation"]], "stop() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[162, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.stop"]], "traverse() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[162, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.traverse"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[163, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.data.dataloaders.base_dataloader.basedataloader method)": [[163, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.data.dataloaders.base_dataloader.basedataloader property)": [[163, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.data.dataloaders.base_dataloader": [[163, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[164, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[164, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[165, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.data.dataloaders.default_dataloader.defaultdataloader method)": [[165, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.data.dataloaders.default_dataloader.defaultdataloader property)": [[165, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[165, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[165, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[166, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[166, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[166, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[166, "module-neural_compressor.data.dataloaders.fetcher"]], "dataloader (class in neural_compressor.data.dataloaders)": [[167, "neural_compressor.data.dataloaders.DataLoader"]], "neural_compressor.data.dataloaders": [[167, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[168, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[168, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[169, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[169, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[169, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[170, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[170, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[171, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[171, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[171, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[171, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[171, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[172, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[172, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[172, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[172, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[172, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[172, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[173, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[173, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[173, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[173, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[173, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[173, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[173, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[173, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[173, "module-neural_compressor.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.data.datasets.bert_dataset.inputfeatures method)": [[173, "neural_compressor.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[174, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[174, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[174, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[174, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[174, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.data.datasets.dataset.mnist property)": [[175, "neural_compressor.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.data.datasets.dataset.cifar10 method)": [[175, "neural_compressor.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.data.datasets.dataset.mnist method)": [[175, "neural_compressor.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[175, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.data.datasets.dataset.cifar10 method)": [[175, "neural_compressor.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.data.datasets.dataset": [[175, "module-neural_compressor.data.datasets.dataset"]], "read_data() (neural_compressor.data.datasets.dataset.fashionmnist method)": [[175, "neural_compressor.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.data.datasets.dataset.mnist method)": [[175, "neural_compressor.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[176, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[176, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[177, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[177, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[177, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[178, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[178, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[178, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[178, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[178, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[178, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[178, "module-neural_compressor.data.datasets.imagenet_dataset"]], "cocorecorddataset (class in neural_compressor.data.datasets)": [[179, "neural_compressor.data.datasets.COCORecordDataset"]], "dataset (class in neural_compressor.data.datasets)": [[179, "neural_compressor.data.datasets.Dataset"]], "datasets (class in neural_compressor.data.datasets)": [[179, "neural_compressor.data.datasets.Datasets"]], "iterabledataset (class in neural_compressor.data.datasets)": [[179, "neural_compressor.data.datasets.IterableDataset"]], "tensorflowimagerecord (class in neural_compressor.data.datasets)": [[179, "neural_compressor.data.datasets.TensorflowImageRecord"]], "dataset_registry() (in module neural_compressor.data.datasets)": [[179, "neural_compressor.data.datasets.dataset_registry"]], "neural_compressor.data.datasets": [[179, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[180, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[180, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[181, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[181, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[181, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[182, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[182, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[182, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[182, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[182, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[182, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[182, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[182, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[182, "module-neural_compressor.data.filters.filter"]], "filters (class in neural_compressor.data.filters)": [[183, "neural_compressor.data.filters.FILTERS"]], "filter (class in neural_compressor.data.filters)": [[183, "neural_compressor.data.filters.Filter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters)": [[183, "neural_compressor.data.filters.LabelBalanceCOCORecordFilter"]], "filter_registry() (in module neural_compressor.data.filters)": [[183, "neural_compressor.data.filters.filter_registry"]], "neural_compressor.data.filters": [[183, "module-neural_compressor.data.filters"]], "basetransform (class in neural_compressor.data)": [[184, "neural_compressor.data.BaseTransform"]], "bilinearimagenettransform (class in neural_compressor.data)": [[184, "neural_compressor.data.BilinearImagenetTransform"]], "cocorecorddataset (class in neural_compressor.data)": [[184, "neural_compressor.data.COCORecordDataset"]], "composetransform (class in neural_compressor.data)": [[184, "neural_compressor.data.ComposeTransform"]], "dataloader (class in neural_compressor.data)": [[184, "neural_compressor.data.DataLoader"]], "dataset (class in neural_compressor.data)": [[184, "neural_compressor.data.Dataset"]], "datasets (class in neural_compressor.data)": [[184, "neural_compressor.data.Datasets"]], "defaultdataloader (class in neural_compressor.data)": [[184, "neural_compressor.data.DefaultDataLoader"]], "filters (class in neural_compressor.data)": [[184, "neural_compressor.data.FILTERS"]], "filter (class in neural_compressor.data)": [[184, "neural_compressor.data.Filter"]], "iterabledataset (class in neural_compressor.data)": [[184, "neural_compressor.data.IterableDataset"]], "labelbalancecocorecordfilter (class in neural_compressor.data)": [[184, "neural_compressor.data.LabelBalanceCOCORecordFilter"]], "labelshift (class in neural_compressor.data)": [[184, "neural_compressor.data.LabelShift"]], "normalizetftransform (class in neural_compressor.data)": [[184, "neural_compressor.data.NormalizeTFTransform"]], "parsedecodecocotransform (class in neural_compressor.data)": [[184, "neural_compressor.data.ParseDecodeCocoTransform"]], "postprocess (class in neural_compressor.data)": [[184, "neural_compressor.data.Postprocess"]], "rescaletftransform (class in neural_compressor.data)": [[184, "neural_compressor.data.RescaleTFTransform"]], "resizetftransform (class in neural_compressor.data)": [[184, "neural_compressor.data.ResizeTFTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data)": [[184, "neural_compressor.data.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data)": [[184, "neural_compressor.data.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data)": [[184, "neural_compressor.data.TRANSFORMS"]], "tensorflowimagerecord (class in neural_compressor.data)": [[184, "neural_compressor.data.TensorflowImageRecord"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data)": [[184, "neural_compressor.data.TensorflowResizeCropImagenetTransform"]], "tensorflowresizewithratio (class in neural_compressor.data)": [[184, "neural_compressor.data.TensorflowResizeWithRatio"]], "batch() (neural_compressor.data.defaultdataloader method)": [[184, "neural_compressor.data.DefaultDataLoader.batch"]], "dataloader (neural_compressor.data.defaultdataloader property)": [[184, "neural_compressor.data.DefaultDataLoader.dataloader"]], "dataset_registry() (in module neural_compressor.data)": [[184, "neural_compressor.data.dataset_registry"]], "filter_registry() (in module neural_compressor.data)": [[184, "neural_compressor.data.filter_registry"]], "get_postprocess_result() (neural_compressor.data.tfsquadv1posttransform method)": [[184, "neural_compressor.data.TFSquadV1PostTransform.get_postprocess_result"]], "neural_compressor.data": [[184, "module-neural_compressor.data"]], "process_result() (neural_compressor.data.tfsquadv1posttransform method)": [[184, "neural_compressor.data.TFSquadV1PostTransform.process_result"]], "register() (neural_compressor.data.transforms method)": [[184, "neural_compressor.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data)": [[184, "neural_compressor.data.transform_registry"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[185, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[185, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[186, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[186, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[186, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[186, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[186, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[186, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[186, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[186, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[186, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[186, "module-neural_compressor.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.data.transforms)": [[187, "neural_compressor.data.transforms.BaseTransform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms)": [[187, "neural_compressor.data.transforms.BilinearImagenetTransform"]], "composetransform (class in neural_compressor.data.transforms)": [[187, "neural_compressor.data.transforms.ComposeTransform"]], "labelshift (class in neural_compressor.data.transforms)": [[187, "neural_compressor.data.transforms.LabelShift"]], "normalizetftransform (class in neural_compressor.data.transforms)": [[187, "neural_compressor.data.transforms.NormalizeTFTransform"]], "parsedecodecocotransform (class in neural_compressor.data.transforms)": [[187, "neural_compressor.data.transforms.ParseDecodeCocoTransform"]], "postprocess (class in neural_compressor.data.transforms)": [[187, "neural_compressor.data.transforms.Postprocess"]], "rescaletftransform (class in neural_compressor.data.transforms)": [[187, "neural_compressor.data.transforms.RescaleTFTransform"]], "resizetftransform (class in neural_compressor.data.transforms)": [[187, "neural_compressor.data.transforms.ResizeTFTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms)": [[187, "neural_compressor.data.transforms.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms)": [[187, "neural_compressor.data.transforms.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms)": [[187, "neural_compressor.data.transforms.TRANSFORMS"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms)": [[187, "neural_compressor.data.transforms.TensorflowResizeCropImagenetTransform"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms)": [[187, "neural_compressor.data.transforms.TensorflowResizeWithRatio"]], "get_postprocess_result() (neural_compressor.data.transforms.tfsquadv1posttransform method)": [[187, "neural_compressor.data.transforms.TFSquadV1PostTransform.get_postprocess_result"]], "neural_compressor.data.transforms": [[187, "module-neural_compressor.data.transforms"]], "process_result() (neural_compressor.data.transforms.tfsquadv1posttransform method)": [[187, "neural_compressor.data.transforms.TFSquadV1PostTransform.process_result"]], "register() (neural_compressor.data.transforms.transforms method)": [[187, "neural_compressor.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data.transforms)": [[187, "neural_compressor.data.transforms.transform_registry"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[188, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[188, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[189, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[189, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[189, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[189, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[189, "neural_compressor.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[189, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[189, "neural_compressor.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[189, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[189, "module-neural_compressor.data.transforms.tokenization"]], "tokenize() (neural_compressor.data.transforms.tokenization.basictokenizer method)": [[189, "neural_compressor.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[189, "neural_compressor.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.data.transforms.tokenization.wordpiecetokenizer method)": [[189, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[189, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.TRANSFORMS"], [190, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.data.transforms.transform.randomresizedcroptftransform method)": [[190, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.data.transforms.transform.randomresizedcroptransform method)": [[190, "neural_compressor.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.data.transforms.transform.tfsquadv1posttransform method)": [[190, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[190, "module-neural_compressor.data.transforms.transform"]], "process_result() (neural_compressor.data.transforms.transform.tfsquadv1posttransform method)": [[190, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.data.transforms.transform.transforms method)": [[190, "neural_compressor.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[190, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[191, "neural_compressor.experimental.benchmark.Benchmark"]], "b_dataloader (neural_compressor.experimental.benchmark.benchmark property)": [[191, "neural_compressor.experimental.benchmark.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark.benchmark property)": [[191, "neural_compressor.experimental.benchmark.Benchmark.b_func"]], "call_one() (neural_compressor.experimental.benchmark.benchmark method)": [[191, "neural_compressor.experimental.benchmark.Benchmark.call_one"]], "config_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[191, "neural_compressor.experimental.benchmark.Benchmark.config_instance"]], "generate_prefix() (neural_compressor.experimental.benchmark.benchmark method)": [[191, "neural_compressor.experimental.benchmark.Benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[191, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[191, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[191, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[191, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[191, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[191, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "metric (neural_compressor.experimental.benchmark.benchmark property)": [[191, "neural_compressor.experimental.benchmark.Benchmark.metric"]], "model (neural_compressor.experimental.benchmark.benchmark property)": [[191, "neural_compressor.experimental.benchmark.Benchmark.model"]], "neural_compressor.experimental.benchmark": [[191, "module-neural_compressor.experimental.benchmark"]], "postprocess (neural_compressor.experimental.benchmark.benchmark property)": [[191, "neural_compressor.experimental.benchmark.Benchmark.postprocess"]], "results (neural_compressor.experimental.benchmark.benchmark property)": [[191, "neural_compressor.experimental.benchmark.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[191, "neural_compressor.experimental.benchmark.Benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[191, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[191, "neural_compressor.experimental.benchmark.set_env_var"]], "summary_benchmark() (neural_compressor.experimental.benchmark.benchmark method)": [[191, "neural_compressor.experimental.benchmark.Benchmark.summary_benchmark"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "l2divergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.L2Divergence"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.SoftCrossEntropy"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "clear_features() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.clear_features"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[192, "neural_compressor.experimental.common.criterion.criterion_registry"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.init_loss_funcs"]], "loss_cal() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal_sloss"]], "neural_compressor.experimental.common.criterion": [[192, "module-neural_compressor.experimental.common.criterion"]], "register() (neural_compressor.experimental.common.criterion.criterions method)": [[192, "neural_compressor.experimental.common.criterion.Criterions.register"]], "register_hooks_for_models() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.register_hooks_for_models"]], "remove_all_hooks() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.remove_all_hooks"]], "student_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[192, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.student_model"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[192, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.student_targets_loss_cal"]], "teacher_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[192, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.teacher_model"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[192, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_model_forward"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[192, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[192, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_student_loss_cal"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[193, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[193, "module-neural_compressor.experimental.common.dataloader"]], "dataloader (class in neural_compressor.experimental.common)": [[194, "neural_compressor.experimental.common.DataLoader"]], "metric (class in neural_compressor.experimental.common)": [[194, "neural_compressor.experimental.common.Metric"]], "model (class in neural_compressor.experimental.common)": [[194, "neural_compressor.experimental.common.Model"]], "postprocess (class in neural_compressor.experimental.common)": [[194, "neural_compressor.experimental.common.Postprocess"]], "neural_compressor.experimental.common": [[194, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[195, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[195, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[196, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[196, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[196, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[197, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[197, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[197, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[197, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[197, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[197, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[197, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[197, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[197, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "register() (neural_compressor.experimental.common.optimizer.optimizers method)": [[197, "neural_compressor.experimental.common.optimizer.Optimizers.register"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[198, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[198, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[199, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[199, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[199, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[200, "neural_compressor.experimental.component.Component"]], "eval_dataloader (neural_compressor.experimental.component.component property)": [[200, "neural_compressor.experimental.component.Component.eval_dataloader"]], "eval_func (neural_compressor.experimental.component.component property)": [[200, "neural_compressor.experimental.component.Component.eval_func"]], "execute() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.execute"]], "model (neural_compressor.experimental.component.component property)": [[200, "neural_compressor.experimental.component.Component.model"]], "neural_compressor.experimental.component": [[200, "module-neural_compressor.experimental.component"]], "on_after_compute_loss() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.on_after_compute_loss"]], "on_after_eval() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.on_after_optimizer_step"]], "on_batch_begin() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.on_batch_end"]], "on_before_eval() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.on_epoch_end"]], "on_post_grad() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.post_process"]], "pre_epoch_begin() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.pre_process"]], "prepare() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.prepare"]], "prepare_qat() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.prepare_qat"]], "register_hook() (neural_compressor.experimental.component.component method)": [[200, "neural_compressor.experimental.component.Component.register_hook"]], "train_dataloader (neural_compressor.experimental.component.component property)": [[200, "neural_compressor.experimental.component.Component.train_dataloader"]], "train_func (neural_compressor.experimental.component.component property)": [[200, "neural_compressor.experimental.component.Component.train_func"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[201, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader method)": [[201, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader property)": [[201, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[201, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[202, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[203, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader method)": [[203, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader property)": [[203, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[203, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[203, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[204, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[204, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[204, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[204, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[205, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[206, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[206, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[207, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[207, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[207, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[208, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[208, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[209, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[209, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[209, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[209, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[209, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[210, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[210, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[210, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[210, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[210, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[210, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[211, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[211, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[211, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[211, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[211, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[211, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[211, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[211, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[211, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.experimental.data.datasets.bert_dataset.inputfeatures method)": [[211, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[212, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[212, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[212, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[212, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[212, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.experimental.data.datasets.dataset.mnist property)": [[213, "neural_compressor.experimental.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[213, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[213, "neural_compressor.experimental.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[213, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[213, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.experimental.data.datasets.dataset": [[213, "module-neural_compressor.experimental.data.datasets.dataset"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.fashionmnist method)": [[213, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[213, "neural_compressor.experimental.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[214, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[214, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[215, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[215, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[215, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[216, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[216, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[216, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[216, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[216, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[216, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[216, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "dataset (class in neural_compressor.experimental.data.datasets)": [[217, "neural_compressor.experimental.data.datasets.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets)": [[217, "neural_compressor.experimental.data.datasets.Datasets"]], "iterabledataset (class in neural_compressor.experimental.data.datasets)": [[217, "neural_compressor.experimental.data.datasets.IterableDataset"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets)": [[217, "neural_compressor.experimental.data.datasets.dataset_registry"]], "neural_compressor.experimental.data.datasets": [[217, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[218, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[218, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[219, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[219, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[219, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[220, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[220, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[220, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[220, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[220, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[220, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[220, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[220, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[220, "module-neural_compressor.experimental.data.filters.filter"]], "filters (class in neural_compressor.experimental.data.filters)": [[221, "neural_compressor.experimental.data.filters.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters)": [[221, "neural_compressor.experimental.data.filters.Filter"]], "filter_registry() (in module neural_compressor.experimental.data.filters)": [[221, "neural_compressor.experimental.data.filters.filter_registry"]], "neural_compressor.experimental.data.filters": [[221, "module-neural_compressor.experimental.data.filters"]], "basetransform (class in neural_compressor.experimental.data)": [[222, "neural_compressor.experimental.data.BaseTransform"]], "dataset (class in neural_compressor.experimental.data)": [[222, "neural_compressor.experimental.data.Dataset"]], "datasets (class in neural_compressor.experimental.data)": [[222, "neural_compressor.experimental.data.Datasets"]], "filters (class in neural_compressor.experimental.data)": [[222, "neural_compressor.experimental.data.FILTERS"]], "filter (class in neural_compressor.experimental.data)": [[222, "neural_compressor.experimental.data.Filter"]], "iterabledataset (class in neural_compressor.experimental.data)": [[222, "neural_compressor.experimental.data.IterableDataset"]], "transforms (class in neural_compressor.experimental.data)": [[222, "neural_compressor.experimental.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.experimental.data)": [[222, "neural_compressor.experimental.data.dataset_registry"]], "filter_registry() (in module neural_compressor.experimental.data)": [[222, "neural_compressor.experimental.data.filter_registry"]], "neural_compressor.experimental.data": [[222, "module-neural_compressor.experimental.data"]], "register() (neural_compressor.experimental.data.transforms method)": [[222, "neural_compressor.experimental.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data)": [[222, "neural_compressor.experimental.data.transform_registry"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[223, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[223, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[223, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[223, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[223, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[223, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[223, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[223, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[223, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[223, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.experimental.data.transforms)": [[224, "neural_compressor.experimental.data.transforms.BaseTransform"]], "transforms (class in neural_compressor.experimental.data.transforms)": [[224, "neural_compressor.experimental.data.transforms.TRANSFORMS"]], "neural_compressor.experimental.data.transforms": [[224, "module-neural_compressor.experimental.data.transforms"]], "register() (neural_compressor.experimental.data.transforms.transforms method)": [[224, "neural_compressor.experimental.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms)": [[224, "neural_compressor.experimental.data.transforms.transform_registry"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[225, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[225, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[225, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[225, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[225, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[225, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[225, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[225, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[225, "module-neural_compressor.experimental.data.transforms.tokenization"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.basictokenizer method)": [[225, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[225, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.wordpiecetokenizer method)": [[225, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[225, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [226, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptftransform method)": [[226, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptransform method)": [[226, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[226, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[226, "module-neural_compressor.experimental.data.transforms.transform"]], "process_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[226, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.experimental.data.transforms.transform.transforms method)": [[226, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[226, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[227, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[227, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[227, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[227, "neural_compressor.experimental.distillation.Distillation.best_score"]], "create_criterion() (neural_compressor.experimental.distillation.distillation method)": [[227, "neural_compressor.experimental.distillation.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation.distillation method)": [[227, "neural_compressor.experimental.distillation.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation.distillation property)": [[227, "neural_compressor.experimental.distillation.Distillation.criterion"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[227, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "evaluation_distributed (neural_compressor.experimental.distillation.distillation property)": [[227, "neural_compressor.experimental.distillation.Distillation.evaluation_distributed"]], "execute() (neural_compressor.experimental.distillation.distillation method)": [[227, "neural_compressor.experimental.distillation.Distillation.execute"]], "generate_hooks() (neural_compressor.experimental.distillation.distillation method)": [[227, "neural_compressor.experimental.distillation.Distillation.generate_hooks"]], "init_train_cfg() (neural_compressor.experimental.distillation.distillation method)": [[227, "neural_compressor.experimental.distillation.Distillation.init_train_cfg"]], "neural_compressor.experimental.distillation": [[227, "module-neural_compressor.experimental.distillation"]], "on_post_forward() (neural_compressor.experimental.distillation.distillation method)": [[227, "neural_compressor.experimental.distillation.Distillation.on_post_forward"]], "optimizer (neural_compressor.experimental.distillation.distillation property)": [[227, "neural_compressor.experimental.distillation.Distillation.optimizer"]], "pre_process() (neural_compressor.experimental.distillation.distillation method)": [[227, "neural_compressor.experimental.distillation.Distillation.pre_process"]], "prepare() (neural_compressor.experimental.distillation.distillation method)": [[227, "neural_compressor.experimental.distillation.Distillation.prepare"]], "student_model (neural_compressor.experimental.distillation.distillation property)": [[227, "neural_compressor.experimental.distillation.Distillation.student_model"]], "teacher_model (neural_compressor.experimental.distillation.distillation property)": [[227, "neural_compressor.experimental.distillation.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation.distillation property)": [[227, "neural_compressor.experimental.distillation.Distillation.train_cfg"]], "train_distributed (neural_compressor.experimental.distillation.distillation property)": [[227, "neural_compressor.experimental.distillation.Distillation.train_distributed"]], "neural_compressor.experimental.export": [[228, "module-neural_compressor.experimental.export"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export)": [[228, "neural_compressor.experimental.export.onnx_qlinear_to_qdq"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export)": [[228, "neural_compressor.experimental.export.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export)": [[228, "neural_compressor.experimental.export.tf_to_int8_onnx"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export)": [[228, "neural_compressor.experimental.export.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export)": [[228, "neural_compressor.experimental.export.torch_to_int8_onnx"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[229, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[229, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[229, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[230, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[230, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[230, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "build_scale_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[231, "neural_compressor.experimental.export.torch2onnx.build_scale_mapping"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[231, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[231, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[231, "module-neural_compressor.experimental.export.torch2onnx"]], "qdq_fp32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[231, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias"]], "qdq_fp32_bias_qdq() (in module neural_compressor.experimental.export.torch2onnx)": [[231, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias_qdq"]], "qdq_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[231, "neural_compressor.experimental.export.torch2onnx.qdq_int32_bias"]], "recalculate_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[231, "neural_compressor.experimental.export.torch2onnx.recalculate_bias"]], "remove_nodes_by_name() (in module neural_compressor.experimental.export.torch2onnx)": [[231, "neural_compressor.experimental.export.torch2onnx.remove_nodes_by_name"]], "set_data_type() (in module neural_compressor.experimental.export.torch2onnx)": [[231, "neural_compressor.experimental.export.torch2onnx.set_data_type"]], "set_scale_info() (in module neural_compressor.experimental.export.torch2onnx)": [[231, "neural_compressor.experimental.export.torch2onnx.set_scale_info"]], "sub_graph_with_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[231, "neural_compressor.experimental.export.torch2onnx.sub_graph_with_int32_bias"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[231, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[231, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "update_weight_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[231, "neural_compressor.experimental.export.torch2onnx.update_weight_bias"]], "dummydatareader (class in neural_compressor.experimental.export.utils)": [[232, "neural_compressor.experimental.export.utils.DummyDataReader"]], "onnx2numpy_dtype() (in module neural_compressor.experimental.export.utils)": [[232, "neural_compressor.experimental.export.utils.ONNX2Numpy_dtype"]], "get_next() (neural_compressor.experimental.export.utils.dummydatareader method)": [[232, "neural_compressor.experimental.export.utils.DummyDataReader.get_next"]], "neural_compressor.experimental.export.utils": [[232, "module-neural_compressor.experimental.export.utils"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[233, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "dataset() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[233, "neural_compressor.experimental.graph_optimization.Graph_Optimization.dataset"]], "eval_dataloader (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[233, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_dataloader"]], "eval_func (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[233, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_func"]], "input (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[233, "neural_compressor.experimental.graph_optimization.Graph_Optimization.input"]], "metric (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[233, "neural_compressor.experimental.graph_optimization.Graph_Optimization.metric"]], "model (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[233, "neural_compressor.experimental.graph_optimization.Graph_Optimization.model"]], "neural_compressor.experimental.graph_optimization": [[233, "module-neural_compressor.experimental.graph_optimization"]], "output (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[233, "neural_compressor.experimental.graph_optimization.Graph_Optimization.output"]], "postprocess (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[233, "neural_compressor.experimental.graph_optimization.Graph_Optimization.postprocess"]], "precisions (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[233, "neural_compressor.experimental.graph_optimization.Graph_Optimization.precisions"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[233, "neural_compressor.experimental.graph_optimization.Graph_Optimization.set_config_by_model"]], "benchmark (class in neural_compressor.experimental)": [[234, "neural_compressor.experimental.Benchmark"]], "component (class in neural_compressor.experimental)": [[234, "neural_compressor.experimental.Component"]], "distillation (class in neural_compressor.experimental)": [[234, "neural_compressor.experimental.Distillation"]], "graph_optimization (class in neural_compressor.experimental)": [[234, "neural_compressor.experimental.Graph_Optimization"]], "mixedprecision (class in neural_compressor.experimental)": [[234, "neural_compressor.experimental.MixedPrecision"]], "modelconversion (class in neural_compressor.experimental)": [[234, "neural_compressor.experimental.ModelConversion"]], "nas (class in neural_compressor.experimental)": [[234, "neural_compressor.experimental.NAS"]], "pruning (class in neural_compressor.experimental)": [[234, "neural_compressor.experimental.Pruning"]], "quantization (class in neural_compressor.experimental)": [[234, "neural_compressor.experimental.Quantization"]], "_epoch_ran (neural_compressor.experimental.distillation attribute)": [[234, "neural_compressor.experimental.Distillation._epoch_ran"]], "b_dataloader (neural_compressor.experimental.benchmark property)": [[234, "neural_compressor.experimental.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark property)": [[234, "neural_compressor.experimental.Benchmark.b_func"]], "best_model (neural_compressor.experimental.distillation attribute)": [[234, "neural_compressor.experimental.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation attribute)": [[234, "neural_compressor.experimental.Distillation.best_score"]], "calib_dataloader (neural_compressor.experimental.quantization property)": [[234, "neural_compressor.experimental.Quantization.calib_dataloader"]], "call_one() (neural_compressor.experimental.benchmark method)": [[234, "neural_compressor.experimental.Benchmark.call_one"]], "conf (neural_compressor.experimental.pruning attribute)": [[234, "neural_compressor.experimental.Pruning.conf"]], "config_instance() (neural_compressor.experimental.benchmark method)": [[234, "neural_compressor.experimental.Benchmark.config_instance"]], "create_criterion() (neural_compressor.experimental.distillation method)": [[234, "neural_compressor.experimental.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation method)": [[234, "neural_compressor.experimental.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation property)": [[234, "neural_compressor.experimental.Distillation.criterion"]], "dataset() (neural_compressor.experimental.graph_optimization method)": [[234, "neural_compressor.experimental.Graph_Optimization.dataset"]], "dataset() (neural_compressor.experimental.modelconversion method)": [[234, "neural_compressor.experimental.ModelConversion.dataset"]], "dataset() (neural_compressor.experimental.quantization method)": [[234, "neural_compressor.experimental.Quantization.dataset"]], "destination (neural_compressor.experimental.modelconversion property)": [[234, "neural_compressor.experimental.ModelConversion.destination"]], "distributed_execute() (neural_compressor.experimental.quantization method)": [[234, "neural_compressor.experimental.Quantization.distributed_execute"]], "eval_dataloader (neural_compressor.experimental.component property)": [[234, "neural_compressor.experimental.Component.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.graph_optimization property)": [[234, "neural_compressor.experimental.Graph_Optimization.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.modelconversion property)": [[234, "neural_compressor.experimental.ModelConversion.eval_dataloader"]], "eval_frequency (neural_compressor.experimental.distillation attribute)": [[234, "neural_compressor.experimental.Distillation.eval_frequency"]], "eval_func (neural_compressor.experimental.component property)": [[234, "neural_compressor.experimental.Component.eval_func"]], "eval_func (neural_compressor.experimental.graph_optimization property)": [[234, "neural_compressor.experimental.Graph_Optimization.eval_func"]], "eval_func (neural_compressor.experimental.modelconversion property)": [[234, "neural_compressor.experimental.ModelConversion.eval_func"]], "evaluation_distributed (neural_compressor.experimental.distillation property)": [[234, "neural_compressor.experimental.Distillation.evaluation_distributed"]], "evaluation_distributed (neural_compressor.experimental.pruning property)": [[234, "neural_compressor.experimental.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.component method)": [[234, "neural_compressor.experimental.Component.execute"]], "execute() (neural_compressor.experimental.distillation method)": [[234, "neural_compressor.experimental.Distillation.execute"]], "execute() (neural_compressor.experimental.pruning method)": [[234, "neural_compressor.experimental.Pruning.execute"]], "execute() (neural_compressor.experimental.quantization method)": [[234, "neural_compressor.experimental.Quantization.execute"]], "generate_hooks() (neural_compressor.experimental.distillation method)": [[234, "neural_compressor.experimental.Distillation.generate_hooks"]], "generate_hooks() (neural_compressor.experimental.pruning method)": [[234, "neural_compressor.experimental.Pruning.generate_hooks"]], "generate_prefix() (neural_compressor.experimental.benchmark method)": [[234, "neural_compressor.experimental.Benchmark.generate_prefix"]], "generate_pruners() (neural_compressor.experimental.pruning method)": [[234, "neural_compressor.experimental.Pruning.generate_pruners"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning method)": [[234, "neural_compressor.experimental.Pruning.get_sparsity_ratio"]], "init_train_cfg() (neural_compressor.experimental.distillation method)": [[234, "neural_compressor.experimental.Distillation.init_train_cfg"]], "input (neural_compressor.experimental.graph_optimization property)": [[234, "neural_compressor.experimental.Graph_Optimization.input"]], "metric (neural_compressor.experimental.benchmark property)": [[234, "neural_compressor.experimental.Benchmark.metric"]], "metric (neural_compressor.experimental.graph_optimization property)": [[234, "neural_compressor.experimental.Graph_Optimization.metric"]], "metric (neural_compressor.experimental.modelconversion property)": [[234, "neural_compressor.experimental.ModelConversion.metric"]], "metric (neural_compressor.experimental.quantization property)": [[234, "neural_compressor.experimental.Quantization.metric"]], "model (neural_compressor.experimental.benchmark property)": [[234, "neural_compressor.experimental.Benchmark.model"]], "model (neural_compressor.experimental.component property)": [[234, "neural_compressor.experimental.Component.model"]], "model (neural_compressor.experimental.graph_optimization property)": [[234, "neural_compressor.experimental.Graph_Optimization.model"]], "model (neural_compressor.experimental.modelconversion property)": [[234, "neural_compressor.experimental.ModelConversion.model"]], "model (neural_compressor.experimental.quantization property)": [[234, "neural_compressor.experimental.Quantization.model"]], "neural_compressor.experimental": [[234, "module-neural_compressor.experimental"]], "objective (neural_compressor.experimental.quantization property)": [[234, "neural_compressor.experimental.Quantization.objective"]], "on_after_compute_loss() (neural_compressor.experimental.component method)": [[234, "neural_compressor.experimental.Component.on_after_compute_loss"]], "on_after_eval() (neural_compressor.experimental.component method)": [[234, "neural_compressor.experimental.Component.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.component method)": [[234, "neural_compressor.experimental.Component.on_after_optimizer_step"]], "on_batch_begin() (neural_compressor.experimental.component method)": [[234, "neural_compressor.experimental.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component method)": [[234, "neural_compressor.experimental.Component.on_batch_end"]], "on_before_eval() (neural_compressor.experimental.component method)": [[234, "neural_compressor.experimental.Component.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.component method)": [[234, "neural_compressor.experimental.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component method)": [[234, "neural_compressor.experimental.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component method)": [[234, "neural_compressor.experimental.Component.on_epoch_end"]], "on_post_forward() (neural_compressor.experimental.distillation method)": [[234, "neural_compressor.experimental.Distillation.on_post_forward"]], "on_post_grad() (neural_compressor.experimental.component method)": [[234, "neural_compressor.experimental.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component method)": [[234, "neural_compressor.experimental.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component method)": [[234, "neural_compressor.experimental.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component method)": [[234, "neural_compressor.experimental.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component method)": [[234, "neural_compressor.experimental.Component.on_train_end"]], "optimizer (neural_compressor.experimental.distillation property)": [[234, "neural_compressor.experimental.Distillation.optimizer"]], "output (neural_compressor.experimental.graph_optimization property)": [[234, "neural_compressor.experimental.Graph_Optimization.output"]], "post_epoch_end() (neural_compressor.experimental.component method)": [[234, "neural_compressor.experimental.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component method)": [[234, "neural_compressor.experimental.Component.post_process"]], "postprocess (neural_compressor.experimental.benchmark property)": [[234, "neural_compressor.experimental.Benchmark.postprocess"]], "postprocess (neural_compressor.experimental.graph_optimization property)": [[234, "neural_compressor.experimental.Graph_Optimization.postprocess"]], "postprocess (neural_compressor.experimental.modelconversion property)": [[234, "neural_compressor.experimental.ModelConversion.postprocess"]], "postprocess (neural_compressor.experimental.quantization property)": [[234, "neural_compressor.experimental.Quantization.postprocess"]], "pre_epoch_begin() (neural_compressor.experimental.component method)": [[234, "neural_compressor.experimental.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component method)": [[234, "neural_compressor.experimental.Component.pre_process"]], "pre_process() (neural_compressor.experimental.distillation method)": [[234, "neural_compressor.experimental.Distillation.pre_process"]], "pre_process() (neural_compressor.experimental.pruning method)": [[234, "neural_compressor.experimental.Pruning.pre_process"]], "pre_process() (neural_compressor.experimental.quantization method)": [[234, "neural_compressor.experimental.Quantization.pre_process"]], "precisions (neural_compressor.experimental.graph_optimization property)": [[234, "neural_compressor.experimental.Graph_Optimization.precisions"]], "precisions (neural_compressor.experimental.mixedprecision property)": [[234, "neural_compressor.experimental.MixedPrecision.precisions"]], "prepare() (neural_compressor.experimental.component method)": [[234, "neural_compressor.experimental.Component.prepare"]], "prepare() (neural_compressor.experimental.distillation method)": [[234, "neural_compressor.experimental.Distillation.prepare"]], "prepare() (neural_compressor.experimental.pruning method)": [[234, "neural_compressor.experimental.Pruning.prepare"]], "prepare_qat() (neural_compressor.experimental.component method)": [[234, "neural_compressor.experimental.Component.prepare_qat"]], "pruners (neural_compressor.experimental.pruning attribute)": [[234, "neural_compressor.experimental.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning property)": [[234, "neural_compressor.experimental.Pruning.pruning_func"]], "q_func (neural_compressor.experimental.quantization property)": [[234, "neural_compressor.experimental.Quantization.q_func"]], "register_hook() (neural_compressor.experimental.component method)": [[234, "neural_compressor.experimental.Component.register_hook"]], "results (neural_compressor.experimental.benchmark property)": [[234, "neural_compressor.experimental.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark method)": [[234, "neural_compressor.experimental.Benchmark.run_instance"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization method)": [[234, "neural_compressor.experimental.Graph_Optimization.set_config_by_model"]], "set_config_by_model() (neural_compressor.experimental.mixedprecision method)": [[234, "neural_compressor.experimental.MixedPrecision.set_config_by_model"]], "source (neural_compressor.experimental.modelconversion property)": [[234, "neural_compressor.experimental.ModelConversion.source"]], "student_model (neural_compressor.experimental.distillation property)": [[234, "neural_compressor.experimental.Distillation.student_model"]], "summary_benchmark() (neural_compressor.experimental.benchmark method)": [[234, "neural_compressor.experimental.Benchmark.summary_benchmark"]], "teacher_model (neural_compressor.experimental.distillation property)": [[234, "neural_compressor.experimental.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation property)": [[234, "neural_compressor.experimental.Distillation.train_cfg"]], "train_dataloader (neural_compressor.experimental.component property)": [[234, "neural_compressor.experimental.Component.train_dataloader"]], "train_distributed (neural_compressor.experimental.distillation property)": [[234, "neural_compressor.experimental.Distillation.train_distributed"]], "train_distributed (neural_compressor.experimental.pruning property)": [[234, "neural_compressor.experimental.Pruning.train_distributed"]], "train_func (neural_compressor.experimental.component property)": [[234, "neural_compressor.experimental.Component.train_func"]], "update_items_for_all_pruners() (neural_compressor.experimental.pruning method)": [[234, "neural_compressor.experimental.Pruning.update_items_for_all_pruners"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[235, "neural_compressor.experimental.metric.bleu.BLEU"], [549, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[235, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[235, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[235, "neural_compressor.experimental.metric.bleu.BLEU.labels"], [549, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[235, "module-neural_compressor.experimental.metric.bleu"], [549, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[235, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[235, "neural_compressor.experimental.metric.bleu.BLEU.predictions"], [549, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "property_chars() (neural_compressor.experimental.metric.bleu.unicoderegex method)": [[235, "neural_compressor.experimental.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[235, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "reset() (neural_compressor.experimental.metric.bleu.bleu method)": [[235, "neural_compressor.experimental.metric.bleu.BLEU.reset"], [549, "neural_compressor.experimental.metric.bleu.BLEU.reset"]], "result() (neural_compressor.experimental.metric.bleu.bleu method)": [[235, "neural_compressor.experimental.metric.bleu.BLEU.result"], [549, "neural_compressor.experimental.metric.bleu.BLEU.result"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[235, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "update() (neural_compressor.experimental.metric.bleu.bleu method)": [[235, "neural_compressor.experimental.metric.bleu.BLEU.update"], [549, "neural_compressor.experimental.metric.bleu.BLEU.update"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[236, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[236, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[237, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[238, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[238, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[238, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[238, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[238, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[238, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[238, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[238, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[238, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.experimental.metric.coco_tools.cocowrapper method)": [[238, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[238, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[238, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[238, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[238, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[239, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[239, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[239, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[239, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[239, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[240, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[240, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[240, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[240, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[240, "neural_compressor.experimental.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.experimental.metric)": [[241, "neural_compressor.experimental.metric.BaseMetric"]], "metrics (class in neural_compressor.experimental.metric)": [[241, "neural_compressor.experimental.metric.METRICS"]], "hvd (neural_compressor.experimental.metric.basemetric property)": [[241, "neural_compressor.experimental.metric.BaseMetric.hvd"]], "metric (neural_compressor.experimental.metric.basemetric property)": [[241, "neural_compressor.experimental.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric)": [[241, "neural_compressor.experimental.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metrics attribute)": [[241, "neural_compressor.experimental.metric.METRICS.metrics"]], "neural_compressor.experimental.metric": [[241, "module-neural_compressor.experimental.metric"]], "register() (neural_compressor.experimental.metric.metrics method)": [[241, "neural_compressor.experimental.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.basemetric method)": [[241, "neural_compressor.experimental.metric.BaseMetric.reset"]], "result() (neural_compressor.experimental.metric.basemetric method)": [[241, "neural_compressor.experimental.metric.BaseMetric.result"]], "update() (neural_compressor.experimental.metric.basemetric method)": [[241, "neural_compressor.experimental.metric.BaseMetric.update"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[242, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[242, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[242, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[242, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[242, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[242, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[242, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[242, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[242, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[242, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[242, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[242, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[242, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[242, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[242, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[242, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[242, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[242, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[242, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[242, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[242, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[242, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[242, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[242, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[242, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[242, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[242, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[242, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[242, "neural_compressor.experimental.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.experimental.metric.metric.basemetric property)": [[242, "neural_compressor.experimental.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[242, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[242, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[242, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[242, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[242, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[242, "neural_compressor.experimental.metric.metric.mIOU"]], "metric (neural_compressor.experimental.metric.metric.basemetric property)": [[242, "neural_compressor.experimental.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[242, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[242, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[242, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[242, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[242, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[242, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[242, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[242, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[242, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[242, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[242, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[242, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[242, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[242, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[242, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[242, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "register() (neural_compressor.experimental.metric.metric.metrics method)": [[242, "neural_compressor.experimental.metric.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.metric.accuracy method)": [[242, "neural_compressor.experimental.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.experimental.metric.metric.basemetric method)": [[242, "neural_compressor.experimental.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[242, "neural_compressor.experimental.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.experimental.metric.metric.f1 method)": [[242, "neural_compressor.experimental.metric.metric.F1.reset"]], "reset() (neural_compressor.experimental.metric.metric.generaltopk method)": [[242, "neural_compressor.experimental.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.loss method)": [[242, "neural_compressor.experimental.metric.metric.Loss.reset"]], "reset() (neural_compressor.experimental.metric.metric.mae method)": [[242, "neural_compressor.experimental.metric.metric.MAE.reset"]], "reset() (neural_compressor.experimental.metric.metric.mse method)": [[242, "neural_compressor.experimental.metric.metric.MSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[242, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[242, "neural_compressor.experimental.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.experimental.metric.metric.rmse method)": [[242, "neural_compressor.experimental.metric.metric.RMSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.roc method)": [[242, "neural_compressor.experimental.metric.metric.ROC.reset"]], "reset() (neural_compressor.experimental.metric.metric.squadf1 method)": [[242, "neural_compressor.experimental.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[242, "neural_compressor.experimental.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[242, "neural_compressor.experimental.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[242, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[242, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[242, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.miou method)": [[242, "neural_compressor.experimental.metric.metric.mIOU.reset"]], "result() (neural_compressor.experimental.metric.metric.accuracy method)": [[242, "neural_compressor.experimental.metric.metric.Accuracy.result"]], "result() (neural_compressor.experimental.metric.metric.basemetric method)": [[242, "neural_compressor.experimental.metric.metric.BaseMetric.result"]], "result() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[242, "neural_compressor.experimental.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.experimental.metric.metric.f1 method)": [[242, "neural_compressor.experimental.metric.metric.F1.result"]], "result() (neural_compressor.experimental.metric.metric.generaltopk method)": [[242, "neural_compressor.experimental.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.experimental.metric.metric.loss method)": [[242, "neural_compressor.experimental.metric.metric.Loss.result"]], "result() (neural_compressor.experimental.metric.metric.mae method)": [[242, "neural_compressor.experimental.metric.metric.MAE.result"]], "result() (neural_compressor.experimental.metric.metric.mse method)": [[242, "neural_compressor.experimental.metric.metric.MSE.result"]], "result() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[242, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.experimental.metric.metric.rmse method)": [[242, "neural_compressor.experimental.metric.metric.RMSE.result"]], "result() (neural_compressor.experimental.metric.metric.roc method)": [[242, "neural_compressor.experimental.metric.metric.ROC.result"]], "result() (neural_compressor.experimental.metric.metric.squadf1 method)": [[242, "neural_compressor.experimental.metric.metric.SquadF1.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[242, "neural_compressor.experimental.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[242, "neural_compressor.experimental.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[242, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[242, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[242, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.experimental.metric.metric.miou method)": [[242, "neural_compressor.experimental.metric.metric.mIOU.result"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[242, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[242, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[242, "neural_compressor.experimental.metric.metric.Loss.sum"]], "update() (neural_compressor.experimental.metric.metric.accuracy method)": [[242, "neural_compressor.experimental.metric.metric.Accuracy.update"]], "update() (neural_compressor.experimental.metric.metric.basemetric method)": [[242, "neural_compressor.experimental.metric.metric.BaseMetric.update"]], "update() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[242, "neural_compressor.experimental.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.experimental.metric.metric.f1 method)": [[242, "neural_compressor.experimental.metric.metric.F1.update"]], "update() (neural_compressor.experimental.metric.metric.generaltopk method)": [[242, "neural_compressor.experimental.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.experimental.metric.metric.loss method)": [[242, "neural_compressor.experimental.metric.metric.Loss.update"]], "update() (neural_compressor.experimental.metric.metric.mae method)": [[242, "neural_compressor.experimental.metric.metric.MAE.update"]], "update() (neural_compressor.experimental.metric.metric.mse method)": [[242, "neural_compressor.experimental.metric.metric.MSE.update"]], "update() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[242, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[242, "neural_compressor.experimental.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.experimental.metric.metric.rmse method)": [[242, "neural_compressor.experimental.metric.metric.RMSE.update"]], "update() (neural_compressor.experimental.metric.metric.roc method)": [[242, "neural_compressor.experimental.metric.metric.ROC.update"]], "update() (neural_compressor.experimental.metric.metric.squadf1 method)": [[242, "neural_compressor.experimental.metric.metric.SquadF1.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[242, "neural_compressor.experimental.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[242, "neural_compressor.experimental.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[242, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[242, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[242, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.experimental.metric.metric.miou method)": [[242, "neural_compressor.experimental.metric.metric.mIOU.update"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[243, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[243, "module-neural_compressor.experimental.mixed_precision"]], "precisions (neural_compressor.experimental.mixed_precision.mixedprecision property)": [[243, "neural_compressor.experimental.mixed_precision.MixedPrecision.precisions"]], "set_config_by_model() (neural_compressor.experimental.mixed_precision.mixedprecision method)": [[243, "neural_compressor.experimental.mixed_precision.MixedPrecision.set_config_by_model"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[244, "neural_compressor.experimental.model_conversion.ModelConversion"]], "dataset() (neural_compressor.experimental.model_conversion.modelconversion method)": [[244, "neural_compressor.experimental.model_conversion.ModelConversion.dataset"]], "destination (neural_compressor.experimental.model_conversion.modelconversion property)": [[244, "neural_compressor.experimental.model_conversion.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.model_conversion.modelconversion property)": [[244, "neural_compressor.experimental.model_conversion.ModelConversion.eval_dataloader"]], "eval_func (neural_compressor.experimental.model_conversion.modelconversion property)": [[244, "neural_compressor.experimental.model_conversion.ModelConversion.eval_func"]], "metric (neural_compressor.experimental.model_conversion.modelconversion property)": [[244, "neural_compressor.experimental.model_conversion.ModelConversion.metric"]], "model (neural_compressor.experimental.model_conversion.modelconversion property)": [[244, "neural_compressor.experimental.model_conversion.ModelConversion.model"]], "neural_compressor.experimental.model_conversion": [[244, "module-neural_compressor.experimental.model_conversion"]], "postprocess (neural_compressor.experimental.model_conversion.modelconversion property)": [[244, "neural_compressor.experimental.model_conversion.ModelConversion.postprocess"]], "source (neural_compressor.experimental.model_conversion.modelconversion property)": [[244, "neural_compressor.experimental.model_conversion.ModelConversion.source"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[245, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "estimate() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[245, "neural_compressor.experimental.nas.basic_nas.BasicNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[245, "neural_compressor.experimental.nas.basic_nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[245, "neural_compressor.experimental.nas.basic_nas.BasicNAS.init_by_cfg"]], "neural_compressor.experimental.nas.basic_nas": [[245, "module-neural_compressor.experimental.nas.basic_nas"]], "pre_process() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[245, "neural_compressor.experimental.nas.basic_nas.BasicNAS.pre_process"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[246, "neural_compressor.experimental.nas.dynas.DyNAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[246, "neural_compressor.experimental.nas.dynas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[246, "neural_compressor.experimental.nas.dynas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[246, "neural_compressor.experimental.nas.dynas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.dynas.dynas method)": [[246, "neural_compressor.experimental.nas.dynas.DyNAS.estimate"]], "init_cfg() (neural_compressor.experimental.nas.dynas.dynas method)": [[246, "neural_compressor.experimental.nas.dynas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas.dynas method)": [[246, "neural_compressor.experimental.nas.dynas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas.dynas": [[246, "module-neural_compressor.experimental.nas.dynas"]], "search() (neural_compressor.experimental.nas.dynas.dynas method)": [[246, "neural_compressor.experimental.nas.dynas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas.dynas method)": [[246, "neural_compressor.experimental.nas.dynas.DyNAS.select_model_arch"]], "parametermanager (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[247, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager"]], "transformerltencoding (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[247, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager static method)": [[247, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.create_training_set"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.transformerltencoding method)": [[247, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding.create_training_set"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[247, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.import_csv"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.transformerltencoding method)": [[247, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding.import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[247, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "onehot_generic() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[247, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.onehot_generic"]], "process_param_dict() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[247, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.process_param_dict"]], "random_sample() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[247, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_sample"]], "random_samples() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[247, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_samples"]], "set_seed() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[247, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.set_seed"]], "translate2param() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[247, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2param"]], "translate2pymoo() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[247, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2pymoo"]], "predictor (class in neural_compressor.experimental.nas.dynast.dynas_predictor)": [[248, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor"]], "get_metrics() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[248, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_metrics"]], "get_parameters() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[248, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_parameters"]], "load() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[248, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.load"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[248, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "predict() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[248, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.predict"]], "save() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[248, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.save"]], "train() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[248, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.train"]], "problemmultiobjective (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[249, "neural_compressor.experimental.nas.dynast.dynas_search.ProblemMultiObjective"]], "searchalgomanager (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[249, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager"]], "configure_age() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[249, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_age"]], "configure_nsga2() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[249, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_nsga2"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[249, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "run_search() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[249, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.run_search"]], "evaluationinterface (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[250, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface"]], "evaluationinterfacemobilenetv3 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[250, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3"]], "evaluationinterfaceresnet50 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[250, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50"]], "evaluationinterfacetransformerlt (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[250, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT"]], "ofarunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[250, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner"]], "runner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[250, "neural_compressor.experimental.nas.dynast.dynas_utils.Runner"]], "torchvisionreference (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[250, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference"]], "transformerltrunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[250, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[250, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.clear_csv"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacetransformerlt method)": [[250, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT.clear_csv"]], "estimate_accuracy_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[250, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_accuracy_top1"]], "estimate_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[250, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_latency"]], "estimate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[250, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_macs"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[250, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacemobilenetv3 method)": [[250, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfaceresnet50 method)": [[250, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacetransformerlt method)": [[250, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT.eval_subnet"]], "get_macs() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[250, "neural_compressor.experimental.nas.dynast.dynas_utils.get_macs"]], "get_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[250, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.get_subnet"]], "get_torchvision_model() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[250, "neural_compressor.experimental.nas.dynast.dynas_utils.get_torchvision_model"]], "measure_latency() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[250, "neural_compressor.experimental.nas.dynast.dynas_utils.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[250, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[250, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.transformerltrunner method)": [[250, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner.measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[250, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[250, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[250, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.transformerltrunner method)": [[250, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner.validate_macs"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[250, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_top1"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[250, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_top1"]], "neural_compressor.experimental.nas.dynast": [[251, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[252, "module-neural_compressor.experimental.nas.dynast.supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[253, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"]], "multiheadattentionsuper (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[254, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.multiheadattentionsuper method)": [[254, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper.forward"]], "get_incremental_state() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[254, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.get_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[254, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"]], "reorder_incremental_state() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.multiheadattentionsuper method)": [[254, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper.reorder_incremental_state"]], "set_incremental_state() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[254, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.set_incremental_state"]], "compute_bleu() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[255, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_bleu"]], "compute_latency() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[255, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_latency"]], "compute_macs() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[255, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[255, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"]], "transformerdecoder (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[256, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder"]], "transformerdecoderlayer (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[256, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer"]], "transformerencoder (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[256, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder"]], "transformerencoderlayer (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[256, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer"]], "transformersupernetwork (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[256, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerSuperNetwork"]], "extract_features() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[256, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.extract_features"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[256, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoderlayer method)": [[256, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[256, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoderlayer method)": [[256, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer.forward"]], "max_positions() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[256, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.max_positions"]], "max_positions() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[256, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.max_positions"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[256, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"]], "output_layer() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[256, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.output_layer"]], "reorder_encoder_out() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[256, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.reorder_encoder_out"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[256, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.upgrade_state_dict_named"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[256, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.upgrade_state_dict_named"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoderlayer method)": [[256, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer.upgrade_state_dict_named"]], "basicnas (class in neural_compressor.experimental.nas)": [[257, "neural_compressor.experimental.nas.BasicNAS"]], "dynas (class in neural_compressor.experimental.nas)": [[257, "neural_compressor.experimental.nas.DyNAS"]], "nas (class in neural_compressor.experimental.nas)": [[257, "neural_compressor.experimental.nas.NAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas method)": [[257, "neural_compressor.experimental.nas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas method)": [[257, "neural_compressor.experimental.nas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas method)": [[257, "neural_compressor.experimental.nas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.basicnas method)": [[257, "neural_compressor.experimental.nas.BasicNAS.estimate"]], "estimate() (neural_compressor.experimental.nas.dynas method)": [[257, "neural_compressor.experimental.nas.DyNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basicnas method)": [[257, "neural_compressor.experimental.nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basicnas method)": [[257, "neural_compressor.experimental.nas.BasicNAS.init_by_cfg"]], "init_cfg() (neural_compressor.experimental.nas.dynas method)": [[257, "neural_compressor.experimental.nas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas method)": [[257, "neural_compressor.experimental.nas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas": [[257, "module-neural_compressor.experimental.nas"]], "pre_process() (neural_compressor.experimental.nas.basicnas method)": [[257, "neural_compressor.experimental.nas.BasicNAS.pre_process"]], "search() (neural_compressor.experimental.nas.dynas method)": [[257, "neural_compressor.experimental.nas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas method)": [[257, "neural_compressor.experimental.nas.DyNAS.select_model_arch"]], "nas (class in neural_compressor.experimental.nas.nas)": [[258, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[258, "neural_compressor.experimental.nas.nas.NASBase"]], "count_model_parameters() (neural_compressor.experimental.nas.nas.nasbase method)": [[258, "neural_compressor.experimental.nas.nas.NASBase.count_model_parameters"]], "dump_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[258, "neural_compressor.experimental.nas.nas.NASBase.dump_search_results"]], "estimate() (neural_compressor.experimental.nas.nas.nasbase method)": [[258, "neural_compressor.experimental.nas.nas.NASBase.estimate"]], "find_best_model_archs() (neural_compressor.experimental.nas.nas.nasbase method)": [[258, "neural_compressor.experimental.nas.nas.NASBase.find_best_model_archs"]], "init_search_cfg() (neural_compressor.experimental.nas.nas.nasbase method)": [[258, "neural_compressor.experimental.nas.nas.NASBase.init_search_cfg"]], "load_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[258, "neural_compressor.experimental.nas.nas.NASBase.load_search_results"]], "metrics_conversion() (neural_compressor.experimental.nas.nas.nasbase method)": [[258, "neural_compressor.experimental.nas.nas.NASBase.metrics_conversion"]], "model_builder (neural_compressor.experimental.nas.nas.nasbase property)": [[258, "neural_compressor.experimental.nas.nas.NASBase.model_builder"]], "neural_compressor.experimental.nas.nas": [[258, "module-neural_compressor.experimental.nas.nas"]], "params_vec2params_dict() (neural_compressor.experimental.nas.nas.nasbase method)": [[258, "neural_compressor.experimental.nas.nas.NASBase.params_vec2params_dict"]], "search() (neural_compressor.experimental.nas.nas.nasbase method)": [[258, "neural_compressor.experimental.nas.nas.NASBase.search"]], "search_algorithm (neural_compressor.experimental.nas.nas.nasbase property)": [[258, "neural_compressor.experimental.nas.nas.NASBase.search_algorithm"]], "search_space (neural_compressor.experimental.nas.nas.nasbase property)": [[258, "neural_compressor.experimental.nas.nas.NASBase.search_space"]], "select_model_arch() (neural_compressor.experimental.nas.nas.nasbase method)": [[258, "neural_compressor.experimental.nas.nas.NASBase.select_model_arch"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[259, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[259, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[259, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[259, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[260, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[260, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[260, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[260, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[260, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.get_feedback"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[260, "neural_compressor.experimental.nas.search_algorithms.Searcher.get_feedback"]], "indices2params_vec() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[260, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.indices2params_vec"]], "neural_compressor.experimental.nas.search_algorithms": [[260, "module-neural_compressor.experimental.nas.search_algorithms"]], "params_vec2params_dict() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[260, "neural_compressor.experimental.nas.search_algorithms.Searcher.params_vec2params_dict"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[260, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.gridsearcher method)": [[260, "neural_compressor.experimental.nas.search_algorithms.GridSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.randomsearcher method)": [[260, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[260, "neural_compressor.experimental.nas.search_algorithms.Searcher.suggest"]], "pruning (class in neural_compressor.experimental.pruning)": [[261, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[261, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[261, "neural_compressor.experimental.pruning.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning.pruning property)": [[261, "neural_compressor.experimental.pruning.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning.pruning method)": [[261, "neural_compressor.experimental.pruning.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning.pruning method)": [[261, "neural_compressor.experimental.pruning.Pruning.generate_hooks"]], "generate_pruners() (neural_compressor.experimental.pruning.pruning method)": [[261, "neural_compressor.experimental.pruning.Pruning.generate_pruners"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning.pruning method)": [[261, "neural_compressor.experimental.pruning.Pruning.get_sparsity_ratio"]], "neural_compressor.experimental.pruning": [[261, "module-neural_compressor.experimental.pruning"]], "on_after_compute_loss() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[261, "neural_compressor.experimental.pruning.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[261, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[261, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[261, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[261, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[261, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[261, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[261, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[261, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[261, "neural_compressor.experimental.pruning.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[261, "neural_compressor.experimental.pruning.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning.pruning method)": [[261, "neural_compressor.experimental.pruning.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning.pruning method)": [[261, "neural_compressor.experimental.pruning.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[261, "neural_compressor.experimental.pruning.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning.pruning property)": [[261, "neural_compressor.experimental.pruning.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning.pruning property)": [[261, "neural_compressor.experimental.pruning.Pruning.train_distributed"]], "update_items_for_all_pruners() (neural_compressor.experimental.pruning.pruning method)": [[261, "neural_compressor.experimental.pruning.Pruning.update_items_for_all_pruners"]], "patterns (class in neural_compressor.experimental.pruning_recipes)": [[262, "neural_compressor.experimental.pruning_recipes.PATTERNS"]], "neural_compressor.experimental.pruning_recipes": [[262, "module-neural_compressor.experimental.pruning_recipes"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns attribute)": [[262, "neural_compressor.experimental.pruning_recipes.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns class method)": [[262, "neural_compressor.experimental.pruning_recipes.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns)": [[263, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS"]], "neural_compressor.experimental.pruning_recipes.patterns": [[263, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.patterns attribute)": [[263, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.patterns class method)": [[263, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[264, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[264, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[264, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[264, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[264, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[264, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "reduce() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[264, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reduce"]], "reshape() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[264, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reshape"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns class method)": [[264, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.support_pattern"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[265, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[265, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[265, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[265, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[265, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[265, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[265, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[265, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "repeat_mask() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[265, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.repeat_mask"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[266, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[266, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[266, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning_v2.pruning property)": [[266, "neural_compressor.experimental.pruning_v2.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning_v2.pruning method)": [[266, "neural_compressor.experimental.pruning_v2.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning_v2.pruning method)": [[266, "neural_compressor.experimental.pruning_v2.Pruning.generate_hooks"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning_v2.pruning method)": [[266, "neural_compressor.experimental.pruning_v2.Pruning.get_sparsity_ratio"]], "neural_compressor.experimental.pruning_v2": [[266, "module-neural_compressor.experimental.pruning_v2"]], "on_after_compute_loss() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[266, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[266, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[266, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[266, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[266, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[266, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[266, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[266, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[266, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[266, "neural_compressor.experimental.pruning_v2.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[266, "neural_compressor.experimental.pruning_v2.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning_v2.pruning method)": [[266, "neural_compressor.experimental.pruning_v2.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning_v2.pruning method)": [[266, "neural_compressor.experimental.pruning_v2.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[266, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning_v2.pruning property)": [[266, "neural_compressor.experimental.pruning_v2.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning_v2.pruning property)": [[266, "neural_compressor.experimental.pruning_v2.Pruning.train_distributed"]], "update_config() (neural_compressor.experimental.pruning_v2.pruning method)": [[266, "neural_compressor.experimental.pruning_v2.Pruning.update_config"]], "neural_compressor.experimental.pytorch_pruner": [[267, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[268, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[269, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[269, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[269, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[269, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[269, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[269, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[269, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[269, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_block_size_dict"]], "get_mask_single() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[269, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_mask_single"]], "get_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[269, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[269, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[269, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[269, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[269, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_local"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[269, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[269, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[269, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[269, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[269, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[269, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[269, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_sparsity_ratio"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[269, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[269, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[269, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[269, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[270, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[270, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[270, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[270, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[270, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[270, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[270, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "check_is_pruned_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.check_is_pruned_step"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "mask_weights() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.mask_weights"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[271, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snipmomentumpruner method)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snippruner method)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_step_begin"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_end"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.magnitudepruner method)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner.update_scores"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[271, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_scores"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[272, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[272, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[272, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.get_sparsity_ratio"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[272, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[272, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[272, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[272, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[272, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[272, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[272, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[272, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[272, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[272, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[272, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[272, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_end"]], "prepare() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[272, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.prepare"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[272, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[272, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "update_items_for_all_pruners() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[272, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.update_items_for_all_pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[273, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[273, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[273, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[273, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[273, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[273, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[273, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.iterativescheduler method)": [[273, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.oneshotscheduler method)": [[273, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler method)": [[273, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.update_sparsity_ratio"]], "quantization (class in neural_compressor.experimental.quantization)": [[274, "neural_compressor.experimental.quantization.Quantization"]], "calib_dataloader (neural_compressor.experimental.quantization.quantization property)": [[274, "neural_compressor.experimental.quantization.Quantization.calib_dataloader"]], "dataset() (neural_compressor.experimental.quantization.quantization method)": [[274, "neural_compressor.experimental.quantization.Quantization.dataset"]], "distributed_execute() (neural_compressor.experimental.quantization.quantization method)": [[274, "neural_compressor.experimental.quantization.Quantization.distributed_execute"]], "execute() (neural_compressor.experimental.quantization.quantization method)": [[274, "neural_compressor.experimental.quantization.Quantization.execute"]], "metric (neural_compressor.experimental.quantization.quantization property)": [[274, "neural_compressor.experimental.quantization.Quantization.metric"]], "model (neural_compressor.experimental.quantization.quantization property)": [[274, "neural_compressor.experimental.quantization.Quantization.model"]], "neural_compressor.experimental.quantization": [[274, "module-neural_compressor.experimental.quantization"]], "objective (neural_compressor.experimental.quantization.quantization property)": [[274, "neural_compressor.experimental.quantization.Quantization.objective"]], "postprocess (neural_compressor.experimental.quantization.quantization property)": [[274, "neural_compressor.experimental.quantization.Quantization.postprocess"]], "pre_process() (neural_compressor.experimental.quantization.quantization method)": [[274, "neural_compressor.experimental.quantization.Quantization.pre_process"]], "q_func (neural_compressor.experimental.quantization.quantization property)": [[274, "neural_compressor.experimental.quantization.Quantization.q_func"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[275, "neural_compressor.experimental.scheduler.Scheduler"]], "append() (neural_compressor.experimental.scheduler.scheduler method)": [[275, "neural_compressor.experimental.scheduler.Scheduler.append"]], "combine() (neural_compressor.experimental.scheduler.scheduler method)": [[275, "neural_compressor.experimental.scheduler.Scheduler.combine"]], "eval_func (neural_compressor.experimental.scheduler.scheduler property)": [[275, "neural_compressor.experimental.scheduler.Scheduler.eval_func"]], "model (neural_compressor.experimental.scheduler.scheduler property)": [[275, "neural_compressor.experimental.scheduler.Scheduler.model"]], "neural_compressor.experimental.scheduler": [[275, "module-neural_compressor.experimental.scheduler"]], "train_func (neural_compressor.experimental.scheduler.scheduler property)": [[275, "neural_compressor.experimental.scheduler.Scheduler.train_func"]], "benchmark (class in neural_compressor)": [[276, "neural_compressor.Benchmark"]], "distillationconfig (class in neural_compressor)": [[276, "neural_compressor.DistillationConfig"]], "posttrainingquantconfig (class in neural_compressor)": [[276, "neural_compressor.PostTrainingQuantConfig"]], "quantizationawaretrainingconfig (class in neural_compressor)": [[276, "neural_compressor.QuantizationAwareTrainingConfig"]], "weightpruningconfig (class in neural_compressor)": [[276, "neural_compressor.WeightPruningConfig"]], "approach (neural_compressor.posttrainingquantconfig property)": [[276, "neural_compressor.PostTrainingQuantConfig.approach"]], "approach (neural_compressor.quantizationawaretrainingconfig property)": [[276, "neural_compressor.QuantizationAwareTrainingConfig.approach"]], "criterion (neural_compressor.distillationconfig property)": [[276, "neural_compressor.DistillationConfig.criterion"]], "dataloader() (neural_compressor.benchmark method)": [[276, "neural_compressor.Benchmark.dataloader"]], "metric() (neural_compressor.benchmark method)": [[276, "neural_compressor.Benchmark.metric"]], "neural_compressor": [[276, "module-neural_compressor"]], "optimizer (neural_compressor.distillationconfig property)": [[276, "neural_compressor.DistillationConfig.optimizer"]], "postprocess() (neural_compressor.benchmark method)": [[276, "neural_compressor.Benchmark.postprocess"]], "set_random_seed() (in module neural_compressor)": [[276, "neural_compressor.set_random_seed"]], "set_tensorboard() (in module neural_compressor)": [[276, "neural_compressor.set_tensorboard"]], "set_workspace() (in module neural_compressor)": [[276, "neural_compressor.set_workspace"]], "teacher_model (neural_compressor.distillationconfig property)": [[276, "neural_compressor.DistillationConfig.teacher_model"]], "tuning_criterion (neural_compressor.posttrainingquantconfig property)": [[276, "neural_compressor.PostTrainingQuantConfig.tuning_criterion"]], "weight_compression (neural_compressor.weightpruningconfig property)": [[276, "neural_compressor.WeightPruningConfig.weight_compression"]], "bleu (class in neural_compressor.metric.bleu)": [[277, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[277, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[277, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[277, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[277, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[277, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[277, "neural_compressor.metric.bleu.BLEU.predictions"]], "property_chars() (neural_compressor.metric.bleu.unicoderegex method)": [[277, "neural_compressor.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[277, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "reset() (neural_compressor.metric.bleu.bleu method)": [[277, "neural_compressor.metric.bleu.BLEU.reset"]], "result() (neural_compressor.metric.bleu.bleu method)": [[277, "neural_compressor.metric.bleu.BLEU.result"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[277, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "update() (neural_compressor.metric.bleu.bleu method)": [[277, "neural_compressor.metric.bleu.BLEU.update"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[278, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[278, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[279, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[280, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[280, "neural_compressor.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[280, "neural_compressor.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[280, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[280, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[280, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[280, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[280, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[280, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.metric.coco_tools.cocowrapper method)": [[280, "neural_compressor.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[280, "neural_compressor.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[280, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[280, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[280, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[281, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[281, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[281, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[281, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[281, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[282, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[282, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[282, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[282, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[282, "neural_compressor.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.metric)": [[283, "neural_compressor.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric)": [[283, "neural_compressor.metric.COCOmAPv2"]], "generaltopk (class in neural_compressor.metric)": [[283, "neural_compressor.metric.GeneralTopK"]], "metrics (class in neural_compressor.metric)": [[283, "neural_compressor.metric.METRICS"]], "metric (class in neural_compressor.metric)": [[283, "neural_compressor.metric.Metric"]], "squadf1 (class in neural_compressor.metric)": [[283, "neural_compressor.metric.SquadF1"]], "tensorflowtopk (class in neural_compressor.metric)": [[283, "neural_compressor.metric.TensorflowTopK"]], "hvd (neural_compressor.metric.basemetric property)": [[283, "neural_compressor.metric.BaseMetric.hvd"]], "k (neural_compressor.metric.generaltopk attribute)": [[283, "neural_compressor.metric.GeneralTopK.k"]], "k (neural_compressor.metric.tensorflowtopk attribute)": [[283, "neural_compressor.metric.TensorflowTopK.k"]], "metric (neural_compressor.metric.basemetric property)": [[283, "neural_compressor.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric)": [[283, "neural_compressor.metric.metric_registry"]], "metrics (neural_compressor.metric.metrics attribute)": [[283, "neural_compressor.metric.METRICS.metrics"]], "neural_compressor.metric": [[283, "module-neural_compressor.metric"]], "num_correct (neural_compressor.metric.generaltopk attribute)": [[283, "neural_compressor.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.tensorflowtopk attribute)": [[283, "neural_compressor.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.generaltopk attribute)": [[283, "neural_compressor.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.tensorflowtopk attribute)": [[283, "neural_compressor.metric.TensorflowTopK.num_sample"]], "register() (neural_compressor.metric.metrics method)": [[283, "neural_compressor.metric.METRICS.register"]], "reset() (neural_compressor.metric.basemetric method)": [[283, "neural_compressor.metric.BaseMetric.reset"]], "reset() (neural_compressor.metric.cocomapv2 method)": [[283, "neural_compressor.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.metric.generaltopk method)": [[283, "neural_compressor.metric.GeneralTopK.reset"]], "reset() (neural_compressor.metric.squadf1 method)": [[283, "neural_compressor.metric.SquadF1.reset"]], "reset() (neural_compressor.metric.tensorflowtopk method)": [[283, "neural_compressor.metric.TensorflowTopK.reset"]], "result() (neural_compressor.metric.basemetric method)": [[283, "neural_compressor.metric.BaseMetric.result"]], "result() (neural_compressor.metric.cocomapv2 method)": [[283, "neural_compressor.metric.COCOmAPv2.result"]], "result() (neural_compressor.metric.generaltopk method)": [[283, "neural_compressor.metric.GeneralTopK.result"]], "result() (neural_compressor.metric.squadf1 method)": [[283, "neural_compressor.metric.SquadF1.result"]], "result() (neural_compressor.metric.tensorflowtopk method)": [[283, "neural_compressor.metric.TensorflowTopK.result"]], "update() (neural_compressor.metric.basemetric method)": [[283, "neural_compressor.metric.BaseMetric.update"]], "update() (neural_compressor.metric.cocomapv2 method)": [[283, "neural_compressor.metric.COCOmAPv2.update"]], "update() (neural_compressor.metric.generaltopk method)": [[283, "neural_compressor.metric.GeneralTopK.update"]], "update() (neural_compressor.metric.squadf1 method)": [[283, "neural_compressor.metric.SquadF1.update"]], "update() (neural_compressor.metric.tensorflowtopk method)": [[283, "neural_compressor.metric.TensorflowTopK.update"]], "accuracy (class in neural_compressor.metric.metric)": [[284, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[284, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[284, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[284, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[284, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[284, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[284, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[284, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[284, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[284, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[284, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[284, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[284, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[284, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[284, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[284, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[284, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[284, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[284, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[284, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[284, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[284, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[284, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[284, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[284, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[284, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[284, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[284, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[284, "neural_compressor.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.metric.metric.pytorchloss method)": [[284, "neural_compressor.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.metric.metric.basemetric property)": [[284, "neural_compressor.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[284, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[284, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[284, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[284, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[284, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[284, "neural_compressor.metric.metric.mIOU"]], "metric (neural_compressor.metric.metric.basemetric property)": [[284, "neural_compressor.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric.metric)": [[284, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[284, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[284, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[284, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[284, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[284, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[284, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[284, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[284, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[284, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[284, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[284, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[284, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[284, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[284, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[284, "neural_compressor.metric.metric.MSE.pred_list"]], "register() (neural_compressor.metric.metric.metrics method)": [[284, "neural_compressor.metric.metric.METRICS.register"]], "reset() (neural_compressor.metric.metric.accuracy method)": [[284, "neural_compressor.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.metric.metric.basemetric method)": [[284, "neural_compressor.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.metric.metric.cocomapv2 method)": [[284, "neural_compressor.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.metric.metric.f1 method)": [[284, "neural_compressor.metric.metric.F1.reset"]], "reset() (neural_compressor.metric.metric.generaltopk method)": [[284, "neural_compressor.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.metric.metric.loss method)": [[284, "neural_compressor.metric.metric.Loss.reset"]], "reset() (neural_compressor.metric.metric.mae method)": [[284, "neural_compressor.metric.metric.MAE.reset"]], "reset() (neural_compressor.metric.metric.mse method)": [[284, "neural_compressor.metric.metric.MSE.reset"]], "reset() (neural_compressor.metric.metric.onnxrtglue method)": [[284, "neural_compressor.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.metric.metric.pytorchloss method)": [[284, "neural_compressor.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.metric.metric.rmse method)": [[284, "neural_compressor.metric.metric.RMSE.reset"]], "reset() (neural_compressor.metric.metric.roc method)": [[284, "neural_compressor.metric.metric.ROC.reset"]], "reset() (neural_compressor.metric.metric.squadf1 method)": [[284, "neural_compressor.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.metric.metric.tensorflowmap method)": [[284, "neural_compressor.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.metric.metric.tensorflowtopk method)": [[284, "neural_compressor.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[284, "neural_compressor.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[284, "neural_compressor.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.metric.metric.wrappytorchmetric method)": [[284, "neural_compressor.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.metric.metric.miou method)": [[284, "neural_compressor.metric.metric.mIOU.reset"]], "result() (neural_compressor.metric.metric.accuracy method)": [[284, "neural_compressor.metric.metric.Accuracy.result"]], "result() (neural_compressor.metric.metric.basemetric method)": [[284, "neural_compressor.metric.metric.BaseMetric.result"]], "result() (neural_compressor.metric.metric.cocomapv2 method)": [[284, "neural_compressor.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.metric.metric.f1 method)": [[284, "neural_compressor.metric.metric.F1.result"]], "result() (neural_compressor.metric.metric.generaltopk method)": [[284, "neural_compressor.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.metric.metric.loss method)": [[284, "neural_compressor.metric.metric.Loss.result"]], "result() (neural_compressor.metric.metric.mae method)": [[284, "neural_compressor.metric.metric.MAE.result"]], "result() (neural_compressor.metric.metric.mse method)": [[284, "neural_compressor.metric.metric.MSE.result"]], "result() (neural_compressor.metric.metric.onnxrtglue method)": [[284, "neural_compressor.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.metric.metric.rmse method)": [[284, "neural_compressor.metric.metric.RMSE.result"]], "result() (neural_compressor.metric.metric.roc method)": [[284, "neural_compressor.metric.metric.ROC.result"]], "result() (neural_compressor.metric.metric.squadf1 method)": [[284, "neural_compressor.metric.metric.SquadF1.result"]], "result() (neural_compressor.metric.metric.tensorflowmap method)": [[284, "neural_compressor.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.metric.metric.tensorflowtopk method)": [[284, "neural_compressor.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[284, "neural_compressor.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[284, "neural_compressor.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.metric.metric.wrappytorchmetric method)": [[284, "neural_compressor.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.metric.metric.miou method)": [[284, "neural_compressor.metric.metric.mIOU.result"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[284, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[284, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[284, "neural_compressor.metric.metric.Loss.sum"]], "update() (neural_compressor.metric.metric.accuracy method)": [[284, "neural_compressor.metric.metric.Accuracy.update"]], "update() (neural_compressor.metric.metric.basemetric method)": [[284, "neural_compressor.metric.metric.BaseMetric.update"]], "update() (neural_compressor.metric.metric.cocomapv2 method)": [[284, "neural_compressor.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.metric.metric.f1 method)": [[284, "neural_compressor.metric.metric.F1.update"]], "update() (neural_compressor.metric.metric.generaltopk method)": [[284, "neural_compressor.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.metric.metric.loss method)": [[284, "neural_compressor.metric.metric.Loss.update"]], "update() (neural_compressor.metric.metric.mae method)": [[284, "neural_compressor.metric.metric.MAE.update"]], "update() (neural_compressor.metric.metric.mse method)": [[284, "neural_compressor.metric.metric.MSE.update"]], "update() (neural_compressor.metric.metric.onnxrtglue method)": [[284, "neural_compressor.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.metric.metric.pytorchloss method)": [[284, "neural_compressor.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.metric.metric.rmse method)": [[284, "neural_compressor.metric.metric.RMSE.update"]], "update() (neural_compressor.metric.metric.roc method)": [[284, "neural_compressor.metric.metric.ROC.update"]], "update() (neural_compressor.metric.metric.squadf1 method)": [[284, "neural_compressor.metric.metric.SquadF1.update"]], "update() (neural_compressor.metric.metric.tensorflowmap method)": [[284, "neural_compressor.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.metric.metric.tensorflowtopk method)": [[284, "neural_compressor.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[284, "neural_compressor.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[284, "neural_compressor.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.metric.metric.wrappytorchmetric method)": [[284, "neural_compressor.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.metric.metric.miou method)": [[284, "neural_compressor.metric.metric.mIOU.update"]], "fit() (in module neural_compressor.mix_precision)": [[285, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[285, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[286, "neural_compressor.model.base_model.BaseModel"]], "export() (neural_compressor.model.base_model.basemodel method)": [[286, "neural_compressor.model.base_model.BaseModel.export"]], "framework() (neural_compressor.model.base_model.basemodel method)": [[286, "neural_compressor.model.base_model.BaseModel.framework"]], "graph_info (neural_compressor.model.base_model.basemodel property)": [[286, "neural_compressor.model.base_model.BaseModel.graph_info"]], "model (neural_compressor.model.base_model.basemodel property)": [[286, "neural_compressor.model.base_model.BaseModel.model"]], "neural_compressor.model.base_model": [[286, "module-neural_compressor.model.base_model"]], "save() (neural_compressor.model.base_model.basemodel method)": [[286, "neural_compressor.model.base_model.BaseModel.save"]], "basemodel (class in neural_compressor.model)": [[287, "neural_compressor.model.BaseModel"]], "model (class in neural_compressor.model)": [[287, "neural_compressor.model.Model"]], "export() (neural_compressor.model.basemodel method)": [[287, "neural_compressor.model.BaseModel.export"]], "framework() (neural_compressor.model.basemodel method)": [[287, "neural_compressor.model.BaseModel.framework"]], "graph_info (neural_compressor.model.basemodel property)": [[287, "neural_compressor.model.BaseModel.graph_info"]], "model (neural_compressor.model.basemodel property)": [[287, "neural_compressor.model.BaseModel.model"]], "neural_compressor.model": [[287, "module-neural_compressor.model"]], "save() (neural_compressor.model.basemodel method)": [[287, "neural_compressor.model.BaseModel.save"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[288, "neural_compressor.model.keras_model.KerasModel"]], "framework() (neural_compressor.model.keras_model.kerasmodel method)": [[288, "neural_compressor.model.keras_model.KerasModel.framework"]], "graph_info (neural_compressor.model.keras_model.kerasmodel property)": [[288, "neural_compressor.model.keras_model.KerasModel.graph_info"]], "model (neural_compressor.model.keras_model.kerasmodel property)": [[288, "neural_compressor.model.keras_model.KerasModel.model"]], "neural_compressor.model.keras_model": [[288, "module-neural_compressor.model.keras_model"]], "q_config (neural_compressor.model.keras_model.kerasmodel property)": [[288, "neural_compressor.model.keras_model.KerasModel.q_config"]], "save() (neural_compressor.model.keras_model.kerasmodel method)": [[288, "neural_compressor.model.keras_model.KerasModel.save"]], "model (class in neural_compressor.model.model)": [[289, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[289, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[289, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[290, "neural_compressor.model.mxnet_model.MXNetModel"]], "framework() (neural_compressor.model.mxnet_model.mxnetmodel method)": [[290, "neural_compressor.model.mxnet_model.MXNetModel.framework"]], "model (neural_compressor.model.mxnet_model.mxnetmodel property)": [[290, "neural_compressor.model.mxnet_model.MXNetModel.model"]], "neural_compressor.model.mxnet_model": [[290, "module-neural_compressor.model.mxnet_model"]], "save() (neural_compressor.model.mxnet_model.mxnetmodel method)": [[290, "neural_compressor.model.mxnet_model.MXNetModel.save"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[291, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[291, "module-neural_compressor.model.nets_factory"]], "register() (neural_compressor.model.nets_factory.tfslimnetsfactory method)": [[291, "neural_compressor.model.nets_factory.TFSlimNetsFactory.register"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[292, "neural_compressor.model.onnx_model.ONNXModel"]], "add_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.add_initializer"]], "add_initializers() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.add_initializers"]], "add_node() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.add_node"]], "add_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.add_nodes"]], "add_tensors_to_outputs() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.add_tensors_to_outputs"]], "export() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.export"]], "find_node_by_name() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.find_node_by_name"]], "find_nodes_by_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.find_nodes_by_initializer"]], "framework() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.framework"]], "get_children() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.get_children"]], "get_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.get_initializer"]], "get_nodes_chain() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.get_nodes_chain"]], "get_parent() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.get_parent"]], "get_parents() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.get_parents"]], "get_scale_zero() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.get_scale_zero"]], "graph() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.graph"]], "graph_info (neural_compressor.model.onnx_model.onnxmodel property)": [[292, "neural_compressor.model.onnx_model.ONNXModel.graph_info"]], "initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.initializer"]], "input() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.input"]], "input_name_to_nodes (neural_compressor.model.onnx_model.onnxmodel property)": [[292, "neural_compressor.model.onnx_model.ONNXModel.input_name_to_nodes"]], "ir_version() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.ir_version"]], "is_large_model (neural_compressor.model.onnx_model.onnxmodel property)": [[292, "neural_compressor.model.onnx_model.ONNXModel.is_large_model"]], "match_first_parent() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.match_first_parent"]], "match_parent() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.match_parent"]], "match_parent_path() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.match_parent_path"]], "model (neural_compressor.model.onnx_model.onnxmodel property)": [[292, "neural_compressor.model.onnx_model.ONNXModel.model"]], "model_path (neural_compressor.model.onnx_model.onnxmodel property)": [[292, "neural_compressor.model.onnx_model.ONNXModel.model_path"]], "neural_compressor.model.onnx_model": [[292, "module-neural_compressor.model.onnx_model"]], "nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.nodes"]], "opset_import() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.opset_import"]], "output() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.output"]], "output_name_to_node (neural_compressor.model.onnx_model.onnxmodel property)": [[292, "neural_compressor.model.onnx_model.ONNXModel.output_name_to_node"]], "q_config (neural_compressor.model.onnx_model.onnxmodel property)": [[292, "neural_compressor.model.onnx_model.ONNXModel.q_config"]], "remove_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.remove_initializer"]], "remove_initializers() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.remove_initializers"]], "remove_node() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.remove_node"]], "remove_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.remove_nodes"]], "remove_tensors_from_outputs() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.remove_tensors_from_outputs"]], "remove_unused_constant() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.remove_unused_constant"]], "replace_input_of_all_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.replace_input_of_all_nodes"]], "replace_node_input() (neural_compressor.model.onnx_model.onnxmodel static method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.replace_node_input"]], "replace_node_output() (neural_compressor.model.onnx_model.onnxmodel static method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.replace_node_output"]], "replace_output_of_all_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.replace_output_of_all_nodes"]], "save() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.save"]], "save_model_to_file() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.save_model_to_file"]], "set_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.set_initializer"]], "topological_sort() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.topological_sort"]], "update() (neural_compressor.model.onnx_model.onnxmodel method)": [[292, "neural_compressor.model.onnx_model.ONNXModel.update"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[293, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[293, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[293, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[293, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[293, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "build_saved_model() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[293, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.build_saved_model"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[293, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[293, "neural_compressor.model.tensorflow_model.estimator_session"]], "export() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[293, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.export"]], "framework() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[293, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.framework"]], "frozen_graph_def (neural_compressor.model.tensorflow_model.tensorflowqatmodel property)": [[293, "neural_compressor.model.tensorflow_model.TensorflowQATModel.frozen_graph_def"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[293, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_all_weight_names() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[293, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.get_all_weight_names"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[293, "neural_compressor.model.tensorflow_model.get_model_type"]], "get_weight() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[293, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.get_weight"]], "graph (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[293, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph"]], "graph_def (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[293, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph_def"]], "graph_def (neural_compressor.model.tensorflow_model.tensorflowcheckpointmodel property)": [[293, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel.graph_def"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[293, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_info (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[293, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph_info"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[293, "neural_compressor.model.tensorflow_model.graph_session"]], "input_node_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[293, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.input_node_names"]], "input_tensor (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[293, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.input_tensor"]], "input_tensor_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[293, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.input_tensor_names"]], "iter_op (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[293, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.iter_op"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[293, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[293, "neural_compressor.model.tensorflow_model.load_saved_model"]], "model (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[293, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowcheckpointmodel property)": [[293, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowqatmodel property)": [[293, "neural_compressor.model.tensorflow_model.TensorflowQATModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel property)": [[293, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.model"]], "model_type (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[293, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.model_type"]], "name (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[293, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.name"]], "neural_compressor.model.tensorflow_model": [[293, "module-neural_compressor.model.tensorflow_model"]], "output_node_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[293, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.output_node_names"]], "output_tensor (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[293, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.output_tensor"]], "output_tensor_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[293, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.output_tensor_names"]], "q_config (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[293, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.q_config"]], "report_sparsity() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[293, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.report_sparsity"]], "save() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[293, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.save"]], "save() (neural_compressor.model.tensorflow_model.tensorflowqatmodel method)": [[293, "neural_compressor.model.tensorflow_model.TensorflowQATModel.save"]], "save() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[293, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.save"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[293, "neural_compressor.model.tensorflow_model.saved_model_session"]], "sess (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[293, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.sess"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[293, "neural_compressor.model.tensorflow_model.slim_session"]], "update_weights() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[293, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.update_weights"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[293, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[293, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "weights (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[293, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.weights"]], "workspace_path (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[293, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.workspace_path"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[294, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[294, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[294, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[294, "neural_compressor.model.torch_model.PyTorchModel"]], "export() (neural_compressor.model.torch_model.pytorchmodel method)": [[294, "neural_compressor.model.torch_model.PyTorchModel.export"]], "export_to_bf16_onnx() (neural_compressor.model.torch_model.pytorchmodel method)": [[294, "neural_compressor.model.torch_model.PyTorchModel.export_to_bf16_onnx"]], "export_to_fp32_onnx() (neural_compressor.model.torch_model.pytorchmodel method)": [[294, "neural_compressor.model.torch_model.PyTorchModel.export_to_fp32_onnx"]], "export_to_int8_onnx() (neural_compressor.model.torch_model.pytorchmodel method)": [[294, "neural_compressor.model.torch_model.PyTorchModel.export_to_int8_onnx"]], "export_to_jit() (neural_compressor.model.torch_model.pytorchmodel method)": [[294, "neural_compressor.model.torch_model.PyTorchModel.export_to_jit"]], "forward() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[294, "neural_compressor.model.torch_model.PyTorchBaseModel.forward"]], "fp32_model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[294, "neural_compressor.model.torch_model.PyTorchBaseModel.fp32_model"]], "framework() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[294, "neural_compressor.model.torch_model.PyTorchBaseModel.framework"]], "generate_forward_pre_hook() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[294, "neural_compressor.model.torch_model.PyTorchBaseModel.generate_forward_pre_hook"]], "get_all_weight_names() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[294, "neural_compressor.model.torch_model.PyTorchBaseModel.get_all_weight_names"]], "get_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[294, "neural_compressor.model.torch_model.PyTorchBaseModel.get_gradient"]], "get_inputs() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[294, "neural_compressor.model.torch_model.PyTorchBaseModel.get_inputs"]], "get_weight() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[294, "neural_compressor.model.torch_model.PyTorchBaseModel.get_weight"]], "graph_info (neural_compressor.model.torch_model.pytorchmodel property)": [[294, "neural_compressor.model.torch_model.PyTorchModel.graph_info"]], "load_quantized_state_dict() (neural_compressor.model.torch_model.pytorchmodel method)": [[294, "neural_compressor.model.torch_model.PyTorchModel.load_quantized_state_dict"]], "model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[294, "neural_compressor.model.torch_model.PyTorchBaseModel.model"]], "neural_compressor.model.torch_model": [[294, "module-neural_compressor.model.torch_model"]], "prune_weights_() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[294, "neural_compressor.model.torch_model.PyTorchBaseModel.prune_weights_"]], "quantized_state_dict() (neural_compressor.model.torch_model.pytorchmodel method)": [[294, "neural_compressor.model.torch_model.PyTorchModel.quantized_state_dict"]], "register_forward_pre_hook() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[294, "neural_compressor.model.torch_model.PyTorchBaseModel.register_forward_pre_hook"]], "remove_hooks() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[294, "neural_compressor.model.torch_model.PyTorchBaseModel.remove_hooks"]], "report_sparsity() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[294, "neural_compressor.model.torch_model.PyTorchBaseModel.report_sparsity"]], "save() (neural_compressor.model.torch_model.ipexmodel method)": [[294, "neural_compressor.model.torch_model.IPEXModel.save"]], "save() (neural_compressor.model.torch_model.pytorchmodel method)": [[294, "neural_compressor.model.torch_model.PyTorchModel.save"]], "update_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[294, "neural_compressor.model.torch_model.PyTorchBaseModel.update_gradient"]], "update_weights() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[294, "neural_compressor.model.torch_model.PyTorchBaseModel.update_weights"]], "workspace_path (neural_compressor.model.torch_model.ipexmodel property)": [[294, "neural_compressor.model.torch_model.IPEXModel.workspace_path"]], "workspace_path (neural_compressor.model.torch_model.pytorchmodel property)": [[294, "neural_compressor.model.torch_model.PyTorchModel.workspace_path"]], "accuracy (class in neural_compressor.objective)": [[295, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[295, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[295, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[295, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[295, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[295, "neural_compressor.objective.Performance"]], "accuracy_meet_req() (neural_compressor.objective.multiobjective method)": [[295, "neural_compressor.objective.MultiObjective.accuracy_meet_req"]], "accuracy_meets() (neural_compressor.objective.multiobjective method)": [[295, "neural_compressor.objective.MultiObjective.accuracy_meets"]], "accuracy_target (neural_compressor.objective.multiobjective property)": [[295, "neural_compressor.objective.MultiObjective.accuracy_target"]], "baseline (neural_compressor.objective.multiobjective property)": [[295, "neural_compressor.objective.MultiObjective.baseline"]], "best_result() (neural_compressor.objective.multiobjective method)": [[295, "neural_compressor.objective.MultiObjective.best_result"]], "compare() (neural_compressor.objective.multiobjective method)": [[295, "neural_compressor.objective.MultiObjective.compare"]], "end() (neural_compressor.objective.accuracy method)": [[295, "neural_compressor.objective.Accuracy.end"]], "end() (neural_compressor.objective.footprint method)": [[295, "neural_compressor.objective.Footprint.end"]], "end() (neural_compressor.objective.modelsize method)": [[295, "neural_compressor.objective.ModelSize.end"]], "end() (neural_compressor.objective.multiobjective method)": [[295, "neural_compressor.objective.MultiObjective.end"]], "end() (neural_compressor.objective.objective method)": [[295, "neural_compressor.objective.Objective.end"]], "end() (neural_compressor.objective.performance method)": [[295, "neural_compressor.objective.Performance.end"]], "evaluate() (neural_compressor.objective.multiobjective method)": [[295, "neural_compressor.objective.MultiObjective.evaluate"]], "model (neural_compressor.objective.objective property)": [[295, "neural_compressor.objective.Objective.model"]], "neural_compressor.objective": [[295, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[295, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[295, "neural_compressor.objective.objective_registry"]], "reset() (neural_compressor.objective.multiobjective method)": [[295, "neural_compressor.objective.MultiObjective.reset"]], "reset() (neural_compressor.objective.objective method)": [[295, "neural_compressor.objective.Objective.reset"]], "result() (neural_compressor.objective.multiobjective method)": [[295, "neural_compressor.objective.MultiObjective.result"]], "result() (neural_compressor.objective.objective method)": [[295, "neural_compressor.objective.Objective.result"]], "result_list() (neural_compressor.objective.objective method)": [[295, "neural_compressor.objective.Objective.result_list"]], "set_model() (neural_compressor.objective.multiobjective method)": [[295, "neural_compressor.objective.MultiObjective.set_model"]], "start() (neural_compressor.objective.accuracy method)": [[295, "neural_compressor.objective.Accuracy.start"]], "start() (neural_compressor.objective.footprint method)": [[295, "neural_compressor.objective.Footprint.start"]], "start() (neural_compressor.objective.modelsize method)": [[295, "neural_compressor.objective.ModelSize.start"]], "start() (neural_compressor.objective.multiobjective method)": [[295, "neural_compressor.objective.MultiObjective.start"]], "start() (neural_compressor.objective.objective method)": [[295, "neural_compressor.objective.Objective.start"]], "start() (neural_compressor.objective.performance method)": [[295, "neural_compressor.objective.Performance.start"]], "gradientcriterion (class in neural_compressor.pruner.criteria)": [[296, "neural_compressor.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.pruner.criteria)": [[296, "neural_compressor.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.pruner.criteria)": [[296, "neural_compressor.pruner.criteria.PruningCriterion"]], "snipcriterion (class in neural_compressor.pruner.criteria)": [[296, "neural_compressor.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.pruner.criteria)": [[296, "neural_compressor.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.pruner.criteria)": [[296, "neural_compressor.pruner.criteria.get_criterion"]], "neural_compressor.pruner.criteria": [[296, "module-neural_compressor.pruner.criteria"]], "on_after_optimizer_step() (neural_compressor.pruner.criteria.pruningcriterion method)": [[296, "neural_compressor.pruner.criteria.PruningCriterion.on_after_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.criteria.gradientcriterion method)": [[296, "neural_compressor.pruner.criteria.GradientCriterion.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.criteria.pruningcriterion method)": [[296, "neural_compressor.pruner.criteria.PruningCriterion.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.criteria.snipcriterion method)": [[296, "neural_compressor.pruner.criteria.SnipCriterion.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.criteria.snipmomentumcriterion method)": [[296, "neural_compressor.pruner.criteria.SnipMomentumCriterion.on_before_optimizer_step"]], "on_step_begin() (neural_compressor.pruner.criteria.magnitudecriterion method)": [[296, "neural_compressor.pruner.criteria.MagnitudeCriterion.on_step_begin"]], "on_step_begin() (neural_compressor.pruner.criteria.pruningcriterion method)": [[296, "neural_compressor.pruner.criteria.PruningCriterion.on_step_begin"]], "register_criterion() (in module neural_compressor.pruner.criteria)": [[296, "neural_compressor.pruner.criteria.register_criterion"]], "scores (neural_compressor.pruner.criteria.gradientcriterion attribute)": [[296, "neural_compressor.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.pruner.criteria.magnitudecriterion attribute)": [[296, "neural_compressor.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.pruner.criteria.pruningcriterion attribute)": [[296, "neural_compressor.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.pruner.criteria.snipcriterion attribute)": [[296, "neural_compressor.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.pruner.criteria.snipmomentumcriterion attribute)": [[296, "neural_compressor.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.pruner": [[297, "module-neural_compressor.pruner"]], "neural_compressor.pruner.logger": [[298, "module-neural_compressor.pruner.logger"]], "basepattern (class in neural_compressor.pruner.patterns)": [[299, "neural_compressor.pruner.patterns.BasePattern"]], "m (neural_compressor.pruner.patterns.patternninm attribute)": [[299, "neural_compressor.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.pruner.patterns.patternninm attribute)": [[299, "neural_compressor.pruner.patterns.PatternNInM.N"]], "patternninm (class in neural_compressor.pruner.patterns)": [[299, "neural_compressor.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.pruner.patterns)": [[299, "neural_compressor.pruner.patterns.PatternNxM"]], "adjust_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[299, "neural_compressor.pruner.patterns.BasePattern.adjust_ratio"]], "block_size (neural_compressor.pruner.patterns.patternnxm attribute)": [[299, "neural_compressor.pruner.patterns.PatternNxM.block_size"]], "check_layer_validity() (neural_compressor.pruner.patterns.basepattern method)": [[299, "neural_compressor.pruner.patterns.BasePattern.check_layer_validity"]], "check_layer_validity() (neural_compressor.pruner.patterns.patternninm method)": [[299, "neural_compressor.pruner.patterns.PatternNInM.check_layer_validity"]], "check_layer_validity() (neural_compressor.pruner.patterns.patternnxm method)": [[299, "neural_compressor.pruner.patterns.PatternNxM.check_layer_validity"]], "config (neural_compressor.pruner.patterns.basepattern attribute)": [[299, "neural_compressor.pruner.patterns.BasePattern.config"]], "count_new_masked_cnts() (neural_compressor.pruner.patterns.patternnxm method)": [[299, "neural_compressor.pruner.patterns.PatternNxM.count_new_masked_cnts"]], "get_block_size_dict() (neural_compressor.pruner.patterns.basepattern method)": [[299, "neural_compressor.pruner.patterns.BasePattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.pruner.patterns.patternnxm method)": [[299, "neural_compressor.pruner.patterns.PatternNxM.get_block_size_dict"]], "get_ele_mask_per_threshold() (neural_compressor.pruner.patterns.patternninm method)": [[299, "neural_compressor.pruner.patterns.PatternNInM.get_ele_mask_per_threshold"]], "get_least_ninm_mask_from_data() (neural_compressor.pruner.patterns.patternninm method)": [[299, "neural_compressor.pruner.patterns.PatternNInM.get_least_ninm_mask_from_data"]], "get_mask_per_threshold() (neural_compressor.pruner.patterns.patternnxm method)": [[299, "neural_compressor.pruner.patterns.PatternNxM.get_mask_per_threshold"]], "get_masks() (neural_compressor.pruner.patterns.basepattern method)": [[299, "neural_compressor.pruner.patterns.BasePattern.get_masks"]], "get_masks_global() (neural_compressor.pruner.patterns.basepattern method)": [[299, "neural_compressor.pruner.patterns.BasePattern.get_masks_global"]], "get_masks_global() (neural_compressor.pruner.patterns.patternninm method)": [[299, "neural_compressor.pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.pruner.patterns.patternnxm method)": [[299, "neural_compressor.pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.pruner.patterns.basepattern method)": [[299, "neural_compressor.pruner.patterns.BasePattern.get_masks_local"]], "get_pattern() (in module neural_compressor.pruner.patterns)": [[299, "neural_compressor.pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.basepattern method)": [[299, "neural_compressor.pruner.patterns.BasePattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.patternninm method)": [[299, "neural_compressor.pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[299, "neural_compressor.pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.basepattern method)": [[299, "neural_compressor.pruner.patterns.BasePattern.get_reduced_masks_from_data"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.patternninm method)": [[299, "neural_compressor.pruner.patterns.PatternNInM.get_reduced_masks_from_data"]], "get_reduced_masks_from_data() (neural_compressor.pruner.patterns.patternnxm method)": [[299, "neural_compressor.pruner.patterns.PatternNxM.get_reduced_masks_from_data"]], "get_single_mask_per_target_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[299, "neural_compressor.pruner.patterns.BasePattern.get_single_mask_per_target_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.basepattern method)": [[299, "neural_compressor.pruner.patterns.BasePattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.patternninm method)": [[299, "neural_compressor.pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.pruner.patterns.patternnxm method)": [[299, "neural_compressor.pruner.patterns.PatternNxM.get_sparsity_ratio"]], "get_sparsity_ratio_each_layer() (neural_compressor.pruner.patterns.basepattern method)": [[299, "neural_compressor.pruner.patterns.BasePattern.get_sparsity_ratio_each_layer"]], "get_sparsity_ratio_progressive() (neural_compressor.pruner.patterns.patternnxm method)": [[299, "neural_compressor.pruner.patterns.PatternNxM.get_sparsity_ratio_progressive"]], "invalid_layers (neural_compressor.pruner.patterns.basepattern attribute)": [[299, "neural_compressor.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.pruner.patterns.basepattern attribute)": [[299, "neural_compressor.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.pruner.patterns.basepattern attribute)": [[299, "neural_compressor.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.pruner.patterns.basepattern attribute)": [[299, "neural_compressor.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.pruner.patterns.basepattern attribute)": [[299, "neural_compressor.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.pruner.patterns.basepattern attribute)": [[299, "neural_compressor.pruner.patterns.BasePattern.modules"]], "neural_compressor.pruner.patterns": [[299, "module-neural_compressor.pruner.patterns"]], "pattern (neural_compressor.pruner.patterns.basepattern attribute)": [[299, "neural_compressor.pruner.patterns.BasePattern.pattern"]], "reduce_scores() (neural_compressor.pruner.patterns.patternninm method)": [[299, "neural_compressor.pruner.patterns.PatternNInM.reduce_scores"]], "reduce_scores() (neural_compressor.pruner.patterns.patternnxm method)": [[299, "neural_compressor.pruner.patterns.PatternNxM.reduce_scores"]], "reduce_tensor() (neural_compressor.pruner.patterns.basepattern method)": [[299, "neural_compressor.pruner.patterns.BasePattern.reduce_tensor"]], "register_pattern() (in module neural_compressor.pruner.patterns)": [[299, "neural_compressor.pruner.patterns.register_pattern"]], "reshape_orig_to_pattern() (neural_compressor.pruner.patterns.patternninm method)": [[299, "neural_compressor.pruner.patterns.PatternNInM.reshape_orig_to_pattern"]], "reshape_orig_to_pattern() (neural_compressor.pruner.patterns.patternnxm method)": [[299, "neural_compressor.pruner.patterns.PatternNxM.reshape_orig_to_pattern"]], "reshape_reduced_to_orig() (neural_compressor.pruner.patterns.patternninm method)": [[299, "neural_compressor.pruner.patterns.PatternNInM.reshape_reduced_to_orig"]], "reshape_reduced_to_orig() (neural_compressor.pruner.patterns.patternnxm method)": [[299, "neural_compressor.pruner.patterns.PatternNxM.reshape_reduced_to_orig"]], "target_sparsity (neural_compressor.pruner.patterns.basepattern attribute)": [[299, "neural_compressor.pruner.patterns.BasePattern.target_sparsity"]], "update_new_added_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[299, "neural_compressor.pruner.patterns.PatternNxM.update_new_added_masks"]], "update_progressive_masks() (neural_compressor.pruner.patterns.patternnxm method)": [[299, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks"]], "update_progressive_masks_global() (neural_compressor.pruner.patterns.patternnxm method)": [[299, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_global"]], "update_progressive_masks_linear() (neural_compressor.pruner.patterns.patternnxm method)": [[299, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_linear"]], "update_progressive_masks_local() (neural_compressor.pruner.patterns.patternnxm method)": [[299, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_local"]], "update_progressive_masks_scores() (neural_compressor.pruner.patterns.patternnxm method)": [[299, "neural_compressor.pruner.patterns.PatternNxM.update_progressive_masks_scores"]], "update_residual_cnt() (neural_compressor.pruner.patterns.basepattern method)": [[299, "neural_compressor.pruner.patterns.BasePattern.update_residual_cnt"]], "gradientsensitivitypruner (class in neural_compressor.pruner.pruner_legacy.gradient_sensitivity)": [[300, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "compute_mask() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[300, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.compute_mask"]], "neural_compressor.pruner.pruner_legacy.gradient_sensitivity": [[300, "module-neural_compressor.pruner.pruner_legacy.gradient_sensitivity"]], "on_epoch_begin() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[300, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[300, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[300, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[300, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_step_end"]], "parse_weight_name() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[300, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.parse_weight_name"]], "prune_by_importance() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[300, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.prune_by_importance"]], "prune_weight() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[300, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.prune_weight"]], "update_importance_abs() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[300, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.update_importance_abs"]], "update_importance_elementwise() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[300, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.update_importance_elementwise"]], "update_importance_weighted() (neural_compressor.pruner.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[300, "neural_compressor.pruner.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.update_importance_weighted"]], "grouplassopruner (class in neural_compressor.pruner.pruner_legacy.group_lasso)": [[301, "neural_compressor.pruner.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.pruner.pruner_legacy.group_lasso": [[301, "module-neural_compressor.pruner.pruner_legacy.group_lasso"]], "on_before_optimizer_step() (neural_compressor.pruner.pruner_legacy.group_lasso.grouplassopruner method)": [[301, "neural_compressor.pruner.pruner_legacy.group_lasso.GroupLassoPruner.on_before_optimizer_step"]], "neural_compressor.pruner.pruner_legacy": [[302, "module-neural_compressor.pruner.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.pruner.pruner_legacy.magnitude)": [[303, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner"]], "compute_mask() (neural_compressor.pruner.pruner_legacy.magnitude.basicmagnitudepruner method)": [[303, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner.compute_mask"]], "neural_compressor.pruner.pruner_legacy.magnitude": [[303, "module-neural_compressor.pruner.pruner_legacy.magnitude"]], "on_epoch_begin() (neural_compressor.pruner.pruner_legacy.magnitude.basicmagnitudepruner method)": [[303, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruner_legacy.magnitude.basicmagnitudepruner method)": [[303, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruner_legacy.magnitude.basicmagnitudepruner method)": [[303, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruner_legacy.magnitude.basicmagnitudepruner method)": [[303, "neural_compressor.pruner.pruner_legacy.magnitude.BasicMagnitudePruner.on_step_end"]], "patternlockpruner (class in neural_compressor.pruner.pruner_legacy.pattern_lock)": [[304, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner"]], "compute_mask() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[304, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.compute_mask"]], "neural_compressor.pruner.pruner_legacy.pattern_lock": [[304, "module-neural_compressor.pruner.pruner_legacy.pattern_lock"]], "on_epoch_begin() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[304, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[304, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[304, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[304, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.on_step_end"]], "update_weights() (neural_compressor.pruner.pruner_legacy.pattern_lock.patternlockpruner method)": [[304, "neural_compressor.pruner.pruner_legacy.pattern_lock.PatternLockPruner.update_weights"]], "pruner (class in neural_compressor.pruner.pruner_legacy.pruner)": [[305, "neural_compressor.pruner.pruner_legacy.pruner.Pruner"]], "neural_compressor.pruner.pruner_legacy.pruner": [[305, "module-neural_compressor.pruner.pruner_legacy.pruner"]], "on_before_optimizer_step() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[305, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[305, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[305, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[305, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[305, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_step_end"]], "on_train_begin() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[305, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_train_begin"]], "on_train_end() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[305, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.on_train_end"]], "pruner_registry() (in module neural_compressor.pruner.pruner_legacy.pruner)": [[305, "neural_compressor.pruner.pruner_legacy.pruner.pruner_registry"]], "update_sparsity() (neural_compressor.pruner.pruner_legacy.pruner.pruner method)": [[305, "neural_compressor.pruner.pruner_legacy.pruner.Pruner.update_sparsity"]], "basepruner (class in neural_compressor.pruner.pruners)": [[306, "neural_compressor.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.pruner.pruners)": [[306, "neural_compressor.pruner.pruners.BasicPruner"]], "patternlockpruner (class in neural_compressor.pruner.pruners)": [[306, "neural_compressor.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.pruner.pruners)": [[306, "neural_compressor.pruner.pruners.ProgressivePruner"]], "check_is_pruned_progressive_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[306, "neural_compressor.pruner.pruners.ProgressivePruner.check_is_pruned_progressive_step"]], "check_is_pruned_step() (neural_compressor.pruner.pruners.basepruner method)": [[306, "neural_compressor.pruner.pruners.BasePruner.check_is_pruned_step"]], "check_progressive_validity() (neural_compressor.pruner.pruners.progressivepruner method)": [[306, "neural_compressor.pruner.pruners.ProgressivePruner.check_progressive_validity"]], "config (neural_compressor.pruner.pruners.basepruner attribute)": [[306, "neural_compressor.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.pruner.pruners.basicpruner attribute)": [[306, "neural_compressor.pruner.pruners.BasicPruner.criterion"]], "current_sparsity_ratio (neural_compressor.pruner.pruners.basepruner attribute)": [[306, "neural_compressor.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.pruner.pruners.basepruner attribute)": [[306, "neural_compressor.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.pruner.pruners)": [[306, "neural_compressor.pruner.pruners.get_pruner"]], "global_step (neural_compressor.pruner.pruners.basepruner attribute)": [[306, "neural_compressor.pruner.pruners.BasePruner.global_step"]], "mask_weights() (neural_compressor.pruner.pruners.basepruner method)": [[306, "neural_compressor.pruner.pruners.BasePruner.mask_weights"]], "mask_weights_general() (neural_compressor.pruner.pruners.basepruner method)": [[306, "neural_compressor.pruner.pruners.BasePruner.mask_weights_general"]], "masks (neural_compressor.pruner.pruners.basepruner attribute)": [[306, "neural_compressor.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.pruner.pruners.basepruner attribute)": [[306, "neural_compressor.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.pruner.pruners.basepruner attribute)": [[306, "neural_compressor.pruner.pruners.BasePruner.modules"]], "neural_compressor.pruner.pruners": [[306, "module-neural_compressor.pruner.pruners"]], "on_after_eval() (neural_compressor.pruner.pruners.basepruner method)": [[306, "neural_compressor.pruner.pruners.BasePruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.basepruner method)": [[306, "neural_compressor.pruner.pruners.BasePruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.basicpruner method)": [[306, "neural_compressor.pruner.pruners.BasicPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.patternlockpruner method)": [[306, "neural_compressor.pruner.pruners.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[306, "neural_compressor.pruner.pruners.ProgressivePruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.pruner.pruners.basepruner method)": [[306, "neural_compressor.pruner.pruners.BasePruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.basepruner method)": [[306, "neural_compressor.pruner.pruners.BasePruner.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.basicpruner method)": [[306, "neural_compressor.pruner.pruners.BasicPruner.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.pruners.progressivepruner method)": [[306, "neural_compressor.pruner.pruners.ProgressivePruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.pruner.pruners.basepruner method)": [[306, "neural_compressor.pruner.pruners.BasePruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruners.basepruner method)": [[306, "neural_compressor.pruner.pruners.BasePruner.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruners.basepruner method)": [[306, "neural_compressor.pruner.pruners.BasePruner.on_step_begin"]], "on_step_begin() (neural_compressor.pruner.pruners.progressivepruner method)": [[306, "neural_compressor.pruner.pruners.ProgressivePruner.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruners.basepruner method)": [[306, "neural_compressor.pruner.pruners.BasePruner.on_step_end"]], "on_train_begin() (neural_compressor.pruner.pruners.basepruner method)": [[306, "neural_compressor.pruner.pruners.BasePruner.on_train_begin"]], "on_train_end() (neural_compressor.pruner.pruners.basepruner method)": [[306, "neural_compressor.pruner.pruners.BasePruner.on_train_end"]], "parse_valid_pruner_types() (in module neural_compressor.pruner.pruners)": [[306, "neural_compressor.pruner.pruners.parse_valid_pruner_types"]], "pattern (neural_compressor.pruner.pruners.basepruner attribute)": [[306, "neural_compressor.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.pruner.pruners.basicpruner attribute)": [[306, "neural_compressor.pruner.pruners.BasicPruner.pattern"]], "print_progressive_sparsity() (neural_compressor.pruner.pruners.progressivepruner method)": [[306, "neural_compressor.pruner.pruners.ProgressivePruner.print_progressive_sparsity"]], "pruning_frequency (neural_compressor.pruner.pruners.basepruner attribute)": [[306, "neural_compressor.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.pruner.pruners.basicpruner attribute)": [[306, "neural_compressor.pruner.pruners.BasicPruner.reg"]], "register_pruner() (in module neural_compressor.pruner.pruners)": [[306, "neural_compressor.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.pruner.pruners.basepruner attribute)": [[306, "neural_compressor.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.pruner.pruners.basicpruner attribute)": [[306, "neural_compressor.pruner.pruners.BasicPruner.scheduler"]], "scores (neural_compressor.pruner.pruners.basepruner attribute)": [[306, "neural_compressor.pruner.pruners.BasePruner.scores"]], "set_global_step() (neural_compressor.pruner.pruners.basicpruner method)": [[306, "neural_compressor.pruner.pruners.BasicPruner.set_global_step"]], "start_step (neural_compressor.pruner.pruners.basepruner attribute)": [[306, "neural_compressor.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.pruner.pruners.basepruner attribute)": [[306, "neural_compressor.pruner.pruners.BasePruner.target_sparsity_ratio"]], "update_masks() (neural_compressor.pruner.pruners.basepruner method)": [[306, "neural_compressor.pruner.pruners.BasePruner.update_masks"]], "update_masks() (neural_compressor.pruner.pruners.basicpruner method)": [[306, "neural_compressor.pruner.pruners.BasicPruner.update_masks"]], "update_masks() (neural_compressor.pruner.pruners.patternlockpruner method)": [[306, "neural_compressor.pruner.pruners.PatternLockPruner.update_masks"]], "update_masks_progressive() (neural_compressor.pruner.pruners.progressivepruner method)": [[306, "neural_compressor.pruner.pruners.ProgressivePruner.update_masks_progressive"]], "pruning (class in neural_compressor.pruner.pruning)": [[307, "neural_compressor.pruner.pruning.Pruning"]], "config_file_path (neural_compressor.pruner.pruning.pruning attribute)": [[307, "neural_compressor.pruner.pruning.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.pruner.pruning.pruning method)": [[307, "neural_compressor.pruner.pruning.Pruning.get_sparsity_ratio"]], "model (neural_compressor.pruner.pruning.pruning attribute)": [[307, "neural_compressor.pruner.pruning.Pruning.model"]], "model (neural_compressor.pruner.pruning.pruning property)": [[307, "id0"]], "neural_compressor.pruner.pruning": [[307, "module-neural_compressor.pruner.pruning"]], "on_after_eval() (neural_compressor.pruner.pruning.pruning method)": [[307, "neural_compressor.pruner.pruning.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.pruner.pruning.pruning method)": [[307, "neural_compressor.pruner.pruning.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.pruner.pruning.pruning method)": [[307, "neural_compressor.pruner.pruning.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.pruner.pruning.pruning method)": [[307, "neural_compressor.pruner.pruning.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.pruner.pruning.pruning method)": [[307, "neural_compressor.pruner.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.pruner.pruning.pruning method)": [[307, "neural_compressor.pruner.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.pruner.pruning.pruning method)": [[307, "neural_compressor.pruner.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.pruner.pruning.pruning method)": [[307, "neural_compressor.pruner.pruning.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.pruner.pruning.pruning method)": [[307, "neural_compressor.pruner.pruning.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.pruner.pruning.pruning method)": [[307, "neural_compressor.pruner.pruning.Pruning.on_train_end"]], "pruner_info (neural_compressor.pruner.pruning.pruning attribute)": [[307, "neural_compressor.pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.pruner.pruning.pruning attribute)": [[307, "neural_compressor.pruner.pruning.Pruning.pruners"]], "update_config() (neural_compressor.pruner.pruning.pruning method)": [[307, "neural_compressor.pruner.pruning.Pruning.update_config"]], "basereg (class in neural_compressor.pruner.regs)": [[308, "neural_compressor.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.pruner.regs)": [[308, "neural_compressor.pruner.regs.GroupLasso"]], "alpha (neural_compressor.pruner.regs.grouplasso attribute)": [[308, "neural_compressor.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.pruner.regs)": [[308, "neural_compressor.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.pruner.regs)": [[308, "neural_compressor.pruner.regs.get_reg_type"]], "neural_compressor.pruner.regs": [[308, "module-neural_compressor.pruner.regs"]], "on_after_optimizer_step() (neural_compressor.pruner.regs.basereg method)": [[308, "neural_compressor.pruner.regs.BaseReg.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.pruner.regs.grouplasso method)": [[308, "neural_compressor.pruner.regs.GroupLasso.on_after_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.regs.basereg method)": [[308, "neural_compressor.pruner.regs.BaseReg.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.pruner.regs.grouplasso method)": [[308, "neural_compressor.pruner.regs.GroupLasso.on_before_optimizer_step"]], "reg_terms (neural_compressor.pruner.regs.grouplasso attribute)": [[308, "neural_compressor.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.pruner.regs)": [[308, "neural_compressor.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.pruner.schedulers)": [[309, "neural_compressor.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.pruner.schedulers)": [[309, "neural_compressor.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.pruner.schedulers)": [[309, "neural_compressor.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.pruner.schedulers.pruningscheduler attribute)": [[309, "neural_compressor.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.pruner.schedulers)": [[309, "neural_compressor.pruner.schedulers.get_scheduler"]], "neural_compressor.pruner.schedulers": [[309, "module-neural_compressor.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.pruner.schedulers)": [[309, "neural_compressor.pruner.schedulers.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.iterativescheduler method)": [[309, "neural_compressor.pruner.schedulers.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.oneshotscheduler method)": [[309, "neural_compressor.pruner.schedulers.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.pruner.schedulers.pruningscheduler method)": [[309, "neural_compressor.pruner.schedulers.PruningScheduler.update_sparsity_ratio"]], "check_config() (in module neural_compressor.pruner.utils)": [[310, "neural_compressor.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.pruner.utils)": [[310, "neural_compressor.pruner.utils.check_key_validity"]], "generate_pruner_config() (in module neural_compressor.pruner.utils)": [[310, "neural_compressor.pruner.utils.generate_pruner_config"]], "neural_compressor.pruner.utils": [[310, "module-neural_compressor.pruner.utils"]], "parse_to_prune() (in module neural_compressor.pruner.utils)": [[310, "neural_compressor.pruner.utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.pruner.utils)": [[310, "neural_compressor.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.pruner.utils)": [[310, "neural_compressor.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.pruner.utils)": [[310, "neural_compressor.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.pruner.utils)": [[310, "neural_compressor.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.pruner.utils)": [[310, "neural_compressor.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.pruner.utils)": [[310, "neural_compressor.pruner.utils.update_params"]], "fit() (in module neural_compressor.quantization)": [[311, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[311, "module-neural_compressor.quantization"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[312, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[312, "module-neural_compressor.strategy.auto_mixed_precision"]], "next_tune_cfg() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[312, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.next_tune_cfg"]], "traverse() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[312, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.traverse"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[313, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "distributed_next_tune_cfg_lst() (neural_compressor.strategy.basic.basictunestrategy method)": [[313, "neural_compressor.strategy.basic.BasicTuneStrategy.distributed_next_tune_cfg_lst"]], "neural_compressor.strategy.basic": [[313, "module-neural_compressor.strategy.basic"]], "next_tune_cfg() (neural_compressor.strategy.basic.basictunestrategy method)": [[313, "neural_compressor.strategy.basic.BasicTuneStrategy.next_tune_cfg"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[314, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[314, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[314, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[314, "neural_compressor.strategy.bayesian.acq_max"]], "array_to_params() (neural_compressor.strategy.bayesian.targetspace method)": [[314, "neural_compressor.strategy.bayesian.TargetSpace.array_to_params"]], "bounds (neural_compressor.strategy.bayesian.targetspace property)": [[314, "neural_compressor.strategy.bayesian.TargetSpace.bounds"]], "dim (neural_compressor.strategy.bayesian.targetspace property)": [[314, "neural_compressor.strategy.bayesian.TargetSpace.dim"]], "empty (neural_compressor.strategy.bayesian.targetspace property)": [[314, "neural_compressor.strategy.bayesian.TargetSpace.empty"]], "gen_next_params() (neural_compressor.strategy.bayesian.bayesianoptimization method)": [[314, "neural_compressor.strategy.bayesian.BayesianOptimization.gen_next_params"]], "get_target() (neural_compressor.strategy.bayesian.targetspace method)": [[314, "neural_compressor.strategy.bayesian.TargetSpace.get_target"]], "keys (neural_compressor.strategy.bayesian.targetspace property)": [[314, "neural_compressor.strategy.bayesian.TargetSpace.keys"]], "max (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[314, "neural_compressor.strategy.bayesian.BayesianOptimization.max"]], "max() (neural_compressor.strategy.bayesian.targetspace method)": [[314, "neural_compressor.strategy.bayesian.TargetSpace.max"]], "neural_compressor.strategy.bayesian": [[314, "module-neural_compressor.strategy.bayesian"]], "next_tune_cfg() (neural_compressor.strategy.bayesian.bayesiantunestrategy method)": [[314, "neural_compressor.strategy.bayesian.BayesianTuneStrategy.next_tune_cfg"]], "params (neural_compressor.strategy.bayesian.targetspace property)": [[314, "neural_compressor.strategy.bayesian.TargetSpace.params"]], "params_to_array() (neural_compressor.strategy.bayesian.targetspace method)": [[314, "neural_compressor.strategy.bayesian.TargetSpace.params_to_array"]], "random_sample() (neural_compressor.strategy.bayesian.targetspace method)": [[314, "neural_compressor.strategy.bayesian.TargetSpace.random_sample"]], "register() (neural_compressor.strategy.bayesian.targetspace method)": [[314, "neural_compressor.strategy.bayesian.TargetSpace.register"]], "res (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[314, "neural_compressor.strategy.bayesian.BayesianOptimization.res"]], "res() (neural_compressor.strategy.bayesian.targetspace method)": [[314, "neural_compressor.strategy.bayesian.TargetSpace.res"]], "space (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[314, "neural_compressor.strategy.bayesian.BayesianOptimization.space"]], "suggest() (neural_compressor.strategy.bayesian.bayesianoptimization method)": [[314, "neural_compressor.strategy.bayesian.BayesianOptimization.suggest"]], "target (neural_compressor.strategy.bayesian.targetspace property)": [[314, "neural_compressor.strategy.bayesian.TargetSpace.target"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[315, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[315, "module-neural_compressor.strategy.conservative"]], "next_tune_cfg() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[315, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.next_tune_cfg"]], "stop() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[315, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.stop"]], "traverse() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[315, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.traverse"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[316, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[316, "module-neural_compressor.strategy.exhaustive"]], "next_tune_cfg() (neural_compressor.strategy.exhaustive.exhaustivetunestrategy method)": [[316, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy.next_tune_cfg"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[317, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[317, "module-neural_compressor.strategy.hawq_v2"]], "next_tune_cfg() (neural_compressor.strategy.hawq_v2.hawq_v2tunestrategy method)": [[317, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy.next_tune_cfg"]], "neural_compressor.strategy": [[318, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[319, "neural_compressor.strategy.mse.MSETuneStrategy"]], "mse_impact_lst() (neural_compressor.strategy.mse.msetunestrategy method)": [[319, "neural_compressor.strategy.mse.MSETuneStrategy.mse_impact_lst"]], "neural_compressor.strategy.mse": [[319, "module-neural_compressor.strategy.mse"]], "next_tune_cfg() (neural_compressor.strategy.mse.msetunestrategy method)": [[319, "neural_compressor.strategy.mse.MSETuneStrategy.next_tune_cfg"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[320, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[320, "module-neural_compressor.strategy.mse_v2"]], "next_tune_cfg() (neural_compressor.strategy.mse_v2.mse_v2tunestrategy method)": [[320, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy.next_tune_cfg"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[321, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[321, "module-neural_compressor.strategy.random"]], "next_tune_cfg() (neural_compressor.strategy.random.randomtunestrategy method)": [[321, "neural_compressor.strategy.random.RandomTuneStrategy.next_tune_cfg"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[322, "neural_compressor.strategy.strategy.TuneStrategy"]], "apply_all_tuning_recipes() (neural_compressor.strategy.strategy.tunestrategy method)": [[322, "neural_compressor.strategy.strategy.TuneStrategy.apply_all_tuning_recipes"]], "apply_recipe_one_by_one() (neural_compressor.strategy.strategy.tunestrategy method)": [[322, "neural_compressor.strategy.strategy.TuneStrategy.apply_recipe_one_by_one"]], "deploy_config() (neural_compressor.strategy.strategy.tunestrategy method)": [[322, "neural_compressor.strategy.strategy.TuneStrategy.deploy_config"]], "distributed_next_tune_cfg_lst() (neural_compressor.strategy.strategy.tunestrategy method)": [[322, "neural_compressor.strategy.strategy.TuneStrategy.distributed_next_tune_cfg_lst"]], "distributed_traverse() (neural_compressor.strategy.strategy.tunestrategy method)": [[322, "neural_compressor.strategy.strategy.TuneStrategy.distributed_traverse"]], "evaluation_result (neural_compressor.strategy.strategy.tunestrategy property)": [[322, "neural_compressor.strategy.strategy.TuneStrategy.evaluation_result"]], "initial_best_acc() (neural_compressor.strategy.strategy.tunestrategy method)": [[322, "neural_compressor.strategy.strategy.TuneStrategy.initial_best_acc"]], "initial_tuning_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[322, "neural_compressor.strategy.strategy.TuneStrategy.initial_tuning_cfg"]], "master_worker_handle() (neural_compressor.strategy.strategy.tunestrategy method)": [[322, "neural_compressor.strategy.strategy.TuneStrategy.master_worker_handle"]], "meet_acc_req() (neural_compressor.strategy.strategy.tunestrategy method)": [[322, "neural_compressor.strategy.strategy.TuneStrategy.meet_acc_req"]], "neural_compressor.strategy.strategy": [[322, "module-neural_compressor.strategy.strategy"]], "next_tune_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[322, "neural_compressor.strategy.strategy.TuneStrategy.next_tune_cfg"]], "set_param_for_post_quantization_algos() (neural_compressor.strategy.strategy.tunestrategy method)": [[322, "neural_compressor.strategy.strategy.TuneStrategy.set_param_for_post_quantization_algos"]], "set_param_for_pre_quantization_algos() (neural_compressor.strategy.strategy.tunestrategy method)": [[322, "neural_compressor.strategy.strategy.TuneStrategy.set_param_for_pre_quantization_algos"]], "set_q_func() (neural_compressor.strategy.strategy.tunestrategy method)": [[322, "neural_compressor.strategy.strategy.TuneStrategy.set_q_func"]], "set_tuning_space() (neural_compressor.strategy.strategy.tunestrategy method)": [[322, "neural_compressor.strategy.strategy.TuneStrategy.set_tuning_space"]], "setup_resume() (neural_compressor.strategy.strategy.tunestrategy method)": [[322, "neural_compressor.strategy.strategy.TuneStrategy.setup_resume"]], "show_baseline_info() (neural_compressor.strategy.strategy.tunestrategy method)": [[322, "neural_compressor.strategy.strategy.TuneStrategy.show_baseline_info"]], "slave_worker_handle() (neural_compressor.strategy.strategy.tunestrategy method)": [[322, "neural_compressor.strategy.strategy.TuneStrategy.slave_worker_handle"]], "stop() (neural_compressor.strategy.strategy.tunestrategy method)": [[322, "neural_compressor.strategy.strategy.TuneStrategy.stop"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[322, "neural_compressor.strategy.strategy.strategy_registry"]], "traverse() (neural_compressor.strategy.strategy.tunestrategy method)": [[322, "neural_compressor.strategy.strategy.TuneStrategy.traverse"]], "update_best_op_tuning_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[322, "neural_compressor.strategy.strategy.TuneStrategy.update_best_op_tuning_cfg"]], "neural_compressor.strategy.utils.constant": [[323, "module-neural_compressor.strategy.utils.constant"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils)": [[324, "neural_compressor.strategy.utils.FallbackTuningSampler"]], "optuningconfig (class in neural_compressor.strategy.utils)": [[324, "neural_compressor.strategy.utils.OpTuningConfig"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils)": [[324, "neural_compressor.strategy.utils.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils)": [[324, "neural_compressor.strategy.utils.OpWiseTuningSampler"]], "tuningitem (class in neural_compressor.strategy.utils)": [[324, "neural_compressor.strategy.utils.TuningItem"]], "tuningsampler (class in neural_compressor.strategy.utils)": [[324, "neural_compressor.strategy.utils.TuningSampler"]], "tuningspace (class in neural_compressor.strategy.utils)": [[324, "neural_compressor.strategy.utils.TuningSpace"]], "append() (neural_compressor.strategy.utils.tuningitem method)": [[324, "neural_compressor.strategy.utils.TuningItem.append"]], "from_state() (neural_compressor.strategy.utils.optuningconfig class method)": [[324, "neural_compressor.strategy.utils.OpTuningConfig.from_state"]], "get_default_config() (neural_compressor.strategy.utils.tuningspace method)": [[324, "neural_compressor.strategy.utils.TuningSpace.get_default_config"]], "get_default_full_path() (neural_compressor.strategy.utils.tuningspace method)": [[324, "neural_compressor.strategy.utils.TuningSpace.get_default_full_path"]], "get_details() (neural_compressor.strategy.utils.tuningitem method)": [[324, "neural_compressor.strategy.utils.TuningItem.get_details"]], "get_item_by_path() (neural_compressor.strategy.utils.tuningspace method)": [[324, "neural_compressor.strategy.utils.TuningSpace.get_item_by_path"]], "get_op_default_path_by_pattern() (neural_compressor.strategy.utils.tuningspace method)": [[324, "neural_compressor.strategy.utils.TuningSpace.get_op_default_path_by_pattern"]], "get_option_by_name() (neural_compressor.strategy.utils.tuningitem method)": [[324, "neural_compressor.strategy.utils.TuningItem.get_option_by_name"]], "get_options_name() (neural_compressor.strategy.utils.tuningitem method)": [[324, "neural_compressor.strategy.utils.TuningItem.get_options_name"]], "get_opwise_candidate() (neural_compressor.strategy.utils.opwisetuningsampler method)": [[324, "neural_compressor.strategy.utils.OpWiseTuningSampler.get_opwise_candidate"]], "get_state() (neural_compressor.strategy.utils.optuningconfig method)": [[324, "neural_compressor.strategy.utils.OpTuningConfig.get_state"]], "neural_compressor.strategy.utils": [[324, "module-neural_compressor.strategy.utils"]], "options (neural_compressor.strategy.utils.tuningitem property)": [[324, "neural_compressor.strategy.utils.TuningItem.options"]], "query_item_option() (neural_compressor.strategy.utils.tuningspace method)": [[324, "neural_compressor.strategy.utils.TuningSpace.query_item_option"]], "query_items_by_quant_mode() (neural_compressor.strategy.utils.tuningspace method)": [[324, "neural_compressor.strategy.utils.TuningSpace.query_items_by_quant_mode"]], "query_quant_mode_item_by_full_path() (neural_compressor.strategy.utils.tuningspace method)": [[324, "neural_compressor.strategy.utils.TuningSpace.query_quant_mode_item_by_full_path"]], "remove() (neural_compressor.strategy.utils.tuningitem method)": [[324, "neural_compressor.strategy.utils.TuningItem.remove"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[325, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[325, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[325, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[325, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[325, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[325, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[325, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.strategy.utils.tuning_sampler)": [[325, "neural_compressor.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "get_opwise_candidate() (neural_compressor.strategy.utils.tuning_sampler.opwisetuningsampler method)": [[325, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler.get_opwise_candidate"]], "neural_compressor.strategy.utils.tuning_sampler": [[325, "module-neural_compressor.strategy.utils.tuning_sampler"]], "register() (neural_compressor.strategy.utils.tuning_sampler.tuningsamplerregistry class method)": [[325, "neural_compressor.strategy.utils.tuning_sampler.TuningSamplerRegistry.register"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[326, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[326, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "append() (neural_compressor.strategy.utils.tuning_space.tuningitem method)": [[326, "neural_compressor.strategy.utils.tuning_space.TuningItem.append"]], "get_default_config() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[326, "neural_compressor.strategy.utils.tuning_space.TuningSpace.get_default_config"]], "get_default_full_path() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[326, "neural_compressor.strategy.utils.tuning_space.TuningSpace.get_default_full_path"]], "get_details() (neural_compressor.strategy.utils.tuning_space.tuningitem method)": [[326, "neural_compressor.strategy.utils.tuning_space.TuningItem.get_details"]], "get_item_by_path() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[326, "neural_compressor.strategy.utils.tuning_space.TuningSpace.get_item_by_path"]], "get_op_default_path_by_pattern() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[326, "neural_compressor.strategy.utils.tuning_space.TuningSpace.get_op_default_path_by_pattern"]], "get_op_mode_by_query_order() (in module neural_compressor.strategy.utils.tuning_space)": [[326, "neural_compressor.strategy.utils.tuning_space.get_op_mode_by_query_order"]], "get_option_by_name() (neural_compressor.strategy.utils.tuning_space.tuningitem method)": [[326, "neural_compressor.strategy.utils.tuning_space.TuningItem.get_option_by_name"]], "get_options_name() (neural_compressor.strategy.utils.tuning_space.tuningitem method)": [[326, "neural_compressor.strategy.utils.tuning_space.TuningItem.get_options_name"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[326, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[326, "module-neural_compressor.strategy.utils.tuning_space"]], "options (neural_compressor.strategy.utils.tuning_space.tuningitem property)": [[326, "neural_compressor.strategy.utils.tuning_space.TuningItem.options"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[326, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[326, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[326, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "query_item_option() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[326, "neural_compressor.strategy.utils.tuning_space.TuningSpace.query_item_option"]], "query_items_by_quant_mode() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[326, "neural_compressor.strategy.utils.tuning_space.TuningSpace.query_items_by_quant_mode"]], "query_quant_mode_item_by_full_path() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[326, "neural_compressor.strategy.utils.tuning_space.TuningSpace.query_quant_mode_item_by_full_path"]], "remove() (neural_compressor.strategy.utils.tuning_space.tuningitem method)": [[326, "neural_compressor.strategy.utils.tuning_space.TuningItem.remove"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[327, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "from_state() (neural_compressor.strategy.utils.tuning_structs.optuningconfig class method)": [[327, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig.from_state"]], "get_state() (neural_compressor.strategy.utils.tuning_structs.optuningconfig method)": [[327, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig.get_state"]], "neural_compressor.strategy.utils.tuning_structs": [[327, "module-neural_compressor.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[328, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[328, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[328, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[328, "module-neural_compressor.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[328, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "compressionmanager (class in neural_compressor.training)": [[329, "neural_compressor.training.CompressionManager"]], "compressionmanager.callbacks (class in neural_compressor.training)": [[329, "neural_compressor.training.CompressionManager.CallBacks"]], "export() (neural_compressor.training.compressionmanager method)": [[329, "neural_compressor.training.CompressionManager.export"]], "neural_compressor.training": [[329, "module-neural_compressor.training"]], "on_after_compute_loss() (neural_compressor.training.compressionmanager.callbacks method)": [[329, "neural_compressor.training.CompressionManager.CallBacks.on_after_compute_loss"]], "on_after_optimizer_step() (neural_compressor.training.compressionmanager.callbacks method)": [[329, "neural_compressor.training.CompressionManager.CallBacks.on_after_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.training.compressionmanager.callbacks method)": [[329, "neural_compressor.training.CompressionManager.CallBacks.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.training.compressionmanager.callbacks method)": [[329, "neural_compressor.training.CompressionManager.CallBacks.on_epoch_begin"]], "on_epoch_end() (neural_compressor.training.compressionmanager.callbacks method)": [[329, "neural_compressor.training.CompressionManager.CallBacks.on_epoch_end"]], "on_step_begin() (neural_compressor.training.compressionmanager.callbacks method)": [[329, "neural_compressor.training.CompressionManager.CallBacks.on_step_begin"]], "on_step_end() (neural_compressor.training.compressionmanager.callbacks method)": [[329, "neural_compressor.training.CompressionManager.CallBacks.on_step_end"]], "on_train_begin() (neural_compressor.training.compressionmanager.callbacks method)": [[329, "neural_compressor.training.CompressionManager.CallBacks.on_train_begin"]], "on_train_end() (neural_compressor.training.compressionmanager.callbacks method)": [[329, "neural_compressor.training.CompressionManager.CallBacks.on_train_end"]], "prepare_compression() (in module neural_compressor.training)": [[329, "neural_compressor.training.prepare_compression"]], "save() (neural_compressor.training.compressionmanager method)": [[329, "neural_compressor.training.CompressionManager.save"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[330, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "collect() (neural_compressor.utils.collect_layer_histogram.layerhistogramcollector method)": [[330, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector.collect"]], "neural_compressor.utils.collect_layer_histogram": [[330, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[331, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[332, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[332, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[332, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[332, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[332, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[332, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[332, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[332, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[332, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[332, "module-neural_compressor.utils.create_obj_from_config"]], "layerhistogramcollector (class in neural_compressor.utils)": [[333, "neural_compressor.utils.LayerHistogramCollector"]], "collect() (neural_compressor.utils.layerhistogramcollector method)": [[333, "neural_compressor.utils.LayerHistogramCollector.collect"]], "debug() (in module neural_compressor.utils)": [[333, "neural_compressor.utils.debug"]], "error() (in module neural_compressor.utils)": [[333, "neural_compressor.utils.error"]], "fatal() (in module neural_compressor.utils)": [[333, "neural_compressor.utils.fatal"]], "info() (in module neural_compressor.utils)": [[333, "neural_compressor.utils.info"]], "log() (in module neural_compressor.utils)": [[333, "neural_compressor.utils.log"]], "neural_compressor.utils": [[333, "module-neural_compressor.utils"]], "set_random_seed() (in module neural_compressor.utils)": [[333, "neural_compressor.utils.set_random_seed"]], "warn() (in module neural_compressor.utils)": [[333, "neural_compressor.utils.warn"]], "warning() (in module neural_compressor.utils)": [[333, "neural_compressor.utils.warning"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[334, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "expand_quantized_bins() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[334, "neural_compressor.utils.kl_divergence.KL_Divergence.expand_quantized_bins"]], "get_threshold() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[334, "neural_compressor.utils.kl_divergence.KL_Divergence.get_threshold"]], "neural_compressor.utils.kl_divergence": [[334, "module-neural_compressor.utils.kl_divergence"]], "safe_entropy() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[334, "neural_compressor.utils.kl_divergence.KL_Divergence.safe_entropy"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[335, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "from_pretrained() (neural_compressor.utils.load_huggingface.optimizedmodel class method)": [[335, "neural_compressor.utils.load_huggingface.OptimizedModel.from_pretrained"]], "neural_compressor.utils.load_huggingface": [[335, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[335, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[336, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[336, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[336, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[336, "neural_compressor.utils.logger.fatal"]], "get_logger() (neural_compressor.utils.logger.logger method)": [[336, "neural_compressor.utils.logger.Logger.get_logger"]], "info() (in module neural_compressor.utils.logger)": [[336, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[336, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[336, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[336, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[336, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.options": [[337, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[337, "neural_compressor.utils.options.onnxrt"]], "load() (in module neural_compressor.utils.pytorch)": [[338, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[338, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.Dequantize"]], "dequantizeweight() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.DequantizeWeight"]], "global_state (class in neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.MODE"]], "statistics (class in neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.Statistics"]], "bf16 (neural_compressor.utils.utility.cpuinfo property)": [[339, "neural_compressor.utils.utility.CpuInfo.bf16"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.combine_histogram"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.compute_sparsity"]], "cores_per_socket (neural_compressor.utils.utility.cpuinfo property)": [[339, "neural_compressor.utils.utility.CpuInfo.cores_per_socket"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.dump_elapsed_time"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (neural_compressor.utils.utility.cpuinfo method)": [[339, "neural_compressor.utils.utility.CpuInfo.get_number_of_sockets"]], "get_size() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.get_tuning_history"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.load_data_from_pkl"]], "neural_compressor.utils.utility": [[339, "module-neural_compressor.utils.utility"]], "print_stat() (neural_compressor.utils.utility.statistics method)": [[339, "neural_compressor.utils.utility.Statistics.print_stat"]], "recover() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[339, "neural_compressor.utils.utility.version1_lte_version2"]], "vnni (neural_compressor.utils.utility.cpuinfo property)": [[339, "neural_compressor.utils.utility.CpuInfo.vnni"]], "benchmark (class in neural_compressor.ux.components.benchmark.benchmark)": [[340, "neural_compressor.ux.components.benchmark.benchmark.Benchmark"]], "dataloaderinterface (class in neural_compressor.ux.components.benchmark.benchmark)": [[340, "neural_compressor.ux.components.benchmark.benchmark.DataloaderInterface"]], "config_filename (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[340, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.config_filename"]], "configuration_data (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[340, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.configuration_data"]], "execute() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[340, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.execute"]], "generate_config() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[340, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.generate_config"]], "neural_compressor.ux.components.benchmark.benchmark": [[340, "module-neural_compressor.ux.components.benchmark.benchmark"]], "workdir (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[340, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.workdir"]], "benchmark_model() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[341, "neural_compressor.ux.components.benchmark.benchmark_model.benchmark_model"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[341, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "parse_args() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[341, "neural_compressor.ux.components.benchmark.benchmark_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[341, "neural_compressor.ux.components.benchmark.benchmark_model.set_eager_execution"]], "benchmark_result_update() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[342, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update"]], "benchmark_result_update_pytorch_script() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[342, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update_pytorch_script"]], "execute_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[342, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_benchmark"]], "execute_real_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[342, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_real_benchmark"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[342, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "pytorch_script_bench_optimizations() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[342, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_optimizations"]], "pytorch_script_bench_original_model() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[342, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_original_model"]], "benchmarks (class in neural_compressor.ux.components.benchmark)": [[343, "neural_compressor.ux.components.benchmark.Benchmarks"]], "neural_compressor.ux.components.benchmark": [[343, "module-neural_compressor.ux.components.benchmark"]], "benchmarkconfiggenerator (class in neural_compressor.ux.components.config_generator.benchmark_config_generator)": [[344, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[344, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate"]], "generate_accuracy_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[344, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_accuracy_config"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[344, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_evaluation_config"]], "generate_performance_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[344, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_performance_config"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[344, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "configgenerator (class in neural_compressor.ux.components.config_generator.config_generator)": [[345, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[345, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate"]], "generate_dataloader_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[345, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_dataloader_config"]], "generate_model_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[345, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_model_config"]], "get_predefined_config_path() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[345, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.config_generator": [[345, "module-neural_compressor.ux.components.config_generator.config_generator"]], "graphoptimizationconfiggenerator (class in neural_compressor.ux.components.config_generator.graph_optimization_config_generator)": [[346, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[346, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[346, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_evaluation_config"]], "generate_graph_optimization_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[346, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[346, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[347, "module-neural_compressor.ux.components.config_generator"]], "mixedprecisionconfiggenerator (class in neural_compressor.ux.components.config_generator.mixed_precision_config_generator)": [[348, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[348, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[348, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_evaluation_config"]], "generate_mixed_precision_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[348, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[348, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "profilingconfiggenerator (class in neural_compressor.ux.components.config_generator.profiling_config_generator)": [[349, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.profiling_config_generator.profilingconfiggenerator method)": [[349, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator.generate"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[349, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "pruningconfiggenerator (class in neural_compressor.ux.components.config_generator.pruning_config_generator)": [[350, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[350, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[350, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate_evaluation_config"]], "generate_pruning_config() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[350, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate_pruning_config"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[350, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "quantizationconfiggenerator (class in neural_compressor.ux.components.config_generator.quantization_config_generator)": [[351, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[351, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[351, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_evaluation_config"]], "generate_quantization_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[351, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_quantization_config"]], "generate_tuning_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[351, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_tuning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[351, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "configurationparser (class in neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[352, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser"]], "get_param_type() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[352, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.get_param_type"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[352, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "normalize_string_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[352, "neural_compressor.ux.components.configuration_wizard.configuration_parser.normalize_string_list"]], "parse() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[352, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse"]], "parse_dataloader() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[352, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_dataloader"]], "parse_evaluation_data() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[352, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_evaluation_data"]], "parse_list_value() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[352, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_list_value"]], "parse_metric() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[352, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_metric"]], "parse_multidim_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[352, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_multidim_list"]], "parse_transforms() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[352, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_transforms"]], "parse_value() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser static method)": [[352, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_value"]], "get_boundary_nodes() (in module neural_compressor.ux.components.configuration_wizard.get_boundary_nodes)": [[353, "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[353, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "get_predefined_configuration() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[354, "neural_compressor.ux.components.configuration_wizard.get_configuration.get_predefined_configuration"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[354, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "update_config_to_machine_specification() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[354, "neural_compressor.ux.components.configuration_wizard.get_configuration.update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard": [[355, "module-neural_compressor.ux.components.configuration_wizard"]], "feeder (class in neural_compressor.ux.components.configuration_wizard.params_feeder)": [[356, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder"]], "feed() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[356, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.feed"]], "get_dataloaders() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[356, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_dataloaders"]], "get_domains() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[356, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_domains"]], "get_frameworks() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[356, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_frameworks"]], "get_metrics() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[356, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_metrics"]], "get_models() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[356, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_models"]], "get_objectives() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[356, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_objectives"]], "get_possible_values() (in module neural_compressor.ux.components.configuration_wizard.params_feeder)": [[356, "neural_compressor.ux.components.configuration_wizard.params_feeder.get_possible_values"]], "get_precisions() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[356, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_precisions"]], "get_quantization_approaches() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[356, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_quantization_approaches"]], "get_strategies() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[356, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_strategies"]], "get_transforms() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[356, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_transforms"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[356, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "pruningconfigparser (class in neural_compressor.ux.components.configuration_wizard.pruning_config_parser)": [[357, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser"]], "generate_tree() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[357, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.generate_tree"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[357, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "parse() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[357, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.parse"]], "parse_entry() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[357, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.parse_entry"]], "dbmanager (class in neural_compressor.ux.components.db_manager.db_manager)": [[358, "neural_compressor.ux.components.db_manager.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[358, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[358, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.db_manager.dbmanager property)": [[358, "neural_compressor.ux.components.db_manager.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[358, "neural_compressor.ux.components.db_manager.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[358, "module-neural_compressor.ux.components.db_manager.db_manager"]], "benchmark (class in neural_compressor.ux.components.db_manager.db_models.benchmark)": [[359, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[359, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[359, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[359, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[359, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.delete_benchmark"]], "details() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[359, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[359, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.list"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[359, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[359, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[359, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_config_path"]], "update_cores_per_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[359, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_cores_per_instance"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[359, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[359, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[359, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[359, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_log_path"]], "update_mode() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[359, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_mode"]], "update_number_of_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[359, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_number_of_instance"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[359, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_status"]], "benchmarkresult (class in neural_compressor.ux.components.db_manager.db_models.benchmark_result)": [[360, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[360, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[360, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.build_info"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[360, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "update_accuracy() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[360, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_accuracy"]], "update_performance() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[360, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_performance"]], "dataloader (class in neural_compressor.ux.components.db_manager.db_models.dataloader)": [[361, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.dataloader)": [[361, "neural_compressor.ux.components.db_manager.db_models.dataloader.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[361, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[361, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[361, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[361, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.query_to_list"]], "update_params() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[361, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.update_params"]], "dataset (class in neural_compressor.ux.components.db_manager.db_models.dataset)": [[362, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset"]], "add() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[362, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[362, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.build_info"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[362, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.delete_dataset"]], "details() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[362, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[362, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.list"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[362, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "update_template_path() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[362, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.update_template_path"]], "domain (class in neural_compressor.ux.components.db_manager.db_models.domain)": [[363, "neural_compressor.ux.components.db_manager.db_models.domain.Domain"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain)": [[363, "neural_compressor.ux.components.db_manager.db_models.domain.fill_dictionary"]], "get_domain_id() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.get_domain_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.list"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[363, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "domainflavour (class in neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[364, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[364, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.fill_dictionary"]], "get_domain_flavour_id() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.get_domain_flavour_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[364, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "example (class in neural_compressor.ux.components.db_manager.db_models.example)": [[365, "neural_compressor.ux.components.db_manager.db_models.example.Example"]], "neural_compressor.ux.components.db_manager.db_models.example": [[365, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "framework (class in neural_compressor.ux.components.db_manager.db_models.framework)": [[366, "neural_compressor.ux.components.db_manager.db_models.framework.Framework"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.framework)": [[366, "neural_compressor.ux.components.db_manager.db_models.framework.fill_dictionary"]], "get_framework_id() (neural_compressor.ux.components.db_manager.db_models.framework.framework static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.framework.Framework.get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[366, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[367, "module-neural_compressor.ux.components.db_manager.db_models"]], "metric (class in neural_compressor.ux.components.db_manager.db_models.metric)": [[368, "neural_compressor.ux.components.db_manager.db_models.metric.Metric"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.metric)": [[368, "neural_compressor.ux.components.db_manager.db_models.metric.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[368, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[368, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[368, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[368, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.query_to_list"]], "model (class in neural_compressor.ux.components.db_manager.db_models.model)": [[369, "neural_compressor.ux.components.db_manager.db_models.model.Model"]], "add() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[369, "neural_compressor.ux.components.db_manager.db_models.model.Model.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[369, "neural_compressor.ux.components.db_manager.db_models.model.Model.build_info"]], "delete_model() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[369, "neural_compressor.ux.components.db_manager.db_models.model.Model.delete_model"]], "details() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[369, "neural_compressor.ux.components.db_manager.db_models.model.Model.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[369, "neural_compressor.ux.components.db_manager.db_models.model.Model.list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[369, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "optimization (class in neural_compressor.ux.components.db_manager.db_models.optimization)": [[370, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.delete_optimization"]], "details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.details"]], "get_optimization_by_project_and_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_optimization_by_project_and_model"]], "get_pinned_benchmarks() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_pinned_benchmarks"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[370, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_performance_benchmark"]], "unpin_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.unpin_benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_config_path"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_log_path"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_optimized_model"]], "update_precision() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_precision"]], "update_pruning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_pruning_details"]], "update_sampling_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_sampling_size"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_status"]], "update_tuning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_tuning_details"]], "optimizationtype (class in neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[371, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[371, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[371, "neural_compressor.ux.components.db_manager.db_models.optimization_type.fill_dictionary"]], "get_optimization_type_by_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[371, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_id"]], "get_optimization_type_by_name() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[371, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_name"]], "get_optimization_type_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[371, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_for_precision"]], "get_optimization_type_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[371, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[371, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list"]], "list_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[371, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[371, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "precision (class in neural_compressor.ux.components.db_manager.db_models.precision)": [[372, "neural_compressor.ux.components.db_manager.db_models.precision.Precision"]], "add() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.precision)": [[372, "neural_compressor.ux.components.db_manager.db_models.precision.fill_dictionary"]], "get_precision_by_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_id"]], "get_precision_by_name() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_name"]], "get_precision_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.list"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[372, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "profiling (class in neural_compressor.ux.components.db_manager.db_models.profiling)": [[373, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.delete_profiling"]], "details() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[373, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_log_path"]], "update_num_threads() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_num_threads"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_status"]], "profilingresult (class in neural_compressor.ux.components.db_manager.db_models.profiling_result)": [[374, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.build_info"]], "bulk_add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.bulk_add"]], "delete_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.delete_results"]], "get_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.get_results"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[374, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "project (class in neural_compressor.ux.components.db_manager.db_models.project)": [[375, "neural_compressor.ux.components.db_manager.db_models.project.Project"]], "create_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.project.Project.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.project.Project.delete_project"]], "get_model_by_name() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.project.Project.get_model_by_name"]], "list_projects() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.project.Project.list_projects"]], "neural_compressor.ux.components.db_manager.db_models.project": [[375, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "project_details() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.project.Project.project_details"]], "update_notes() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.project.Project.update_notes"]], "pruningdetails (class in neural_compressor.ux.components.db_manager.db_models.pruning_details)": [[376, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[376, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[376, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.build_info"]], "delete_pruning_details() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[376, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.delete_pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[376, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[376, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.update"]], "transform (class in neural_compressor.ux.components.db_manager.db_models.transform)": [[377, "neural_compressor.ux.components.db_manager.db_models.transform.Transform"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.transform)": [[377, "neural_compressor.ux.components.db_manager.db_models.transform.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list"]], "list_by_domain() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_domain"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[377, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.query_to_list"]], "tuningdetails (class in neural_compressor.ux.components.db_manager.db_models.tuning_details)": [[378, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[378, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.add"]], "delete_tuning_details() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[378, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.delete_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[378, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[378, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update"]], "update_tuning_history() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[378, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update_tuning_history"]], "tuninghistory (class in neural_compressor.ux.components.db_manager.db_models.tuning_history)": [[379, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[379, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[379, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.build_info"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[379, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[380, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_benchmark"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_result"]], "before_delete_benchmark_entry() (in module neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[380, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.before_delete_benchmark_entry"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.delete_benchmark"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.edit_benchmark"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.get_benchmark_details"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.list_benchmarks"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[380, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_execution_command"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_paths"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[381, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.add_dataset"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.dataloader_path"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.delete_dataset"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_custom_template"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_template"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_dataset_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_predefined_dataset"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[381, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[381, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_precision_optimization_types_association"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.list_datasets"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[381, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.parse_dataset_data"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_transform"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[381, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[381, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[381, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.set_database_version"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.set_template_path"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[382, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[382, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[382, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[382, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[382, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[382, "neural_compressor.ux.components.db_manager.db_operations.db_operations.set_database_version"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface)": [[383, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.generate_optimization"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_list"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.histogram"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[383, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_optimization_data"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_wise_parameters"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics_by_framework"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_precisions"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[384, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.examples_api_interface)": [[385, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.create_project"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[385, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[386, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[386, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_benchmark"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.add_dataset"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.add_model"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_model"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_optimization"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_profiling"]], "add_pruning_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_pruning_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_quantization_optimization"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_result"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_result"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_tuning_history"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.bulk_add_results"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.clean_status"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.create_project"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.create_project"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.dataloader_path"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.delete_benchmark"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.delete_dataset"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.delete_model"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.delete_optimization"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.delete_profiling"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.delete_project"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.edit_benchmark"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_optimization"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.edit_profiling"]], "edit_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_pruning_details"]], "edit_tuning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_tuning_details"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_custom_template"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.generate_optimization"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_template"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.get_benchmark_details"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_dataset_details"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.get_model_details"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_list"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.get_optimization_data"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_optimization_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_predefined_dataset"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.get_profiling_details"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.get_project_details"]], "get_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_pruning_details"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.histogram"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.list_benchmarks"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.list_datasets"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics_by_framework"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.list_models"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.list_optimizations"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_precisions"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.list_profilings"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.list_projects"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_framework"]], "load_pruning_details_config() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.load_pruning_details_config"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations": [[386, "module-neural_compressor.ux.components.db_manager.db_operations"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.parse_dataset_data"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.parse_model_data"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_optimization_data"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_result_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_tuning_history"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_wise_parameters"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_performance_benchmark"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_transform"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.set_template_path"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_log_path"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_paths"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_paths"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_status"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.update_project_notes"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.model_api_interface)": [[387, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[387, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.add_model"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[387, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.delete_model"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[387, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.get_model_details"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[387, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.list_models"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[387, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[387, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.parse_model_data"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface)": [[388, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_optimization"]], "add_pruning_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_pruning_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_quantization_optimization"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_tuning_history"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.delete_optimization"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_optimization"]], "edit_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_pruning_details"]], "edit_tuning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_tuning_details"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_optimization_details"]], "get_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_pruning_details"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.list_optimizations"]], "load_pruning_details_config() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.load_pruning_details_config"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[388, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_tuning_history"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_performance_benchmark"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_execution_command"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_paths"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface)": [[389, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_profiling"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_result"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.bulk_add_results"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.delete_profiling"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.edit_profiling"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.get_profiling_details"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.list_profilings"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[389, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_result_data"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_log_path"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_status"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.project_api_interface)": [[390, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_model"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.delete_project"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.get_project_details"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.list_projects"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[390, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.update_project_notes"]], "dbmanager (class in neural_compressor.ux.components.db_manager)": [[391, "neural_compressor.ux.components.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.dbmanager method)": [[391, "neural_compressor.ux.components.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.dbmanager method)": [[391, "neural_compressor.ux.components.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.dbmanager property)": [[391, "neural_compressor.ux.components.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.dbmanager method)": [[391, "neural_compressor.ux.components.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager": [[391, "module-neural_compressor.ux.components.db_manager"]], "benchmarkaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[392, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkAddParamsInterface"]], "benchmarkeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[392, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkEditParamsInterface"]], "datasetaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[392, "neural_compressor.ux.components.db_manager.params_interfaces.DatasetAddParamsInterface"]], "diagnosisoptimizationparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[392, "neural_compressor.ux.components.db_manager.params_interfaces.DiagnosisOptimizationParamsInterface"]], "modeladdparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[392, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface"]], "optimizationaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[392, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationAddParamsInterface"]], "optimizationeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[392, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationEditParamsInterface"]], "profilingaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[392, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingAddParamsInterface"]], "profilingeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[392, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingEditParamsInterface"]], "profilingresultaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[392, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingResultAddParamsInterface"]], "tuninghistoryinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[392, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface"]], "tuninghistoryiteminterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[392, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[392, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "parse_nodes() (neural_compressor.ux.components.db_manager.params_interfaces.modeladdparamsinterface static method)": [[392, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface.parse_nodes"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryinterface method)": [[392, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface.serialize"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryiteminterface method)": [[392, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface.serialize"]], "get_framework_dataloaders_config() (in module neural_compressor.ux.components.db_manager.utils)": [[393, "neural_compressor.ux.components.db_manager.utils.get_framework_dataloaders_config"]], "get_framework_transforms_config() (in module neural_compressor.ux.components.db_manager.utils)": [[393, "neural_compressor.ux.components.db_manager.utils.get_framework_transforms_config"]], "neural_compressor.ux.components.db_manager.utils": [[393, "module-neural_compressor.ux.components.db_manager.utils"]], "update_dataloaders_params() (in module neural_compressor.ux.components.db_manager.utils)": [[393, "neural_compressor.ux.components.db_manager.utils.update_dataloaders_params"]], "diagnosis (class in neural_compressor.ux.components.diagnosis.diagnosis)": [[394, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis"]], "calculate_mse() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[394, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.calculate_mse"]], "get_histogram_data() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[394, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_histogram_data"]], "get_op_details() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[394, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_details"]], "get_op_list() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[394, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_list"]], "get_tensors_info() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[394, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_tensors_info"]], "load_quantization_config() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[394, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.load_quantization_config"]], "mse_metric_gap() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis static method)": [[394, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[394, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "diagnosisfactory (class in neural_compressor.ux.components.diagnosis.factory)": [[395, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory"]], "get_diagnosis() (neural_compressor.ux.components.diagnosis.factory.diagnosisfactory static method)": [[395, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory.get_diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[395, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[396, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[397, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "onnxrtdiagnosis (class in neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis)": [[398, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.onnxrtdiagnosis property)": [[398, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[398, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "opactivation (class in neural_compressor.ux.components.diagnosis.op_details)": [[399, "neural_compressor.ux.components.diagnosis.op_details.OpActivation"]], "opdetails (class in neural_compressor.ux.components.diagnosis.op_details)": [[399, "neural_compressor.ux.components.diagnosis.op_details.OpDetails"]], "oppattern (class in neural_compressor.ux.components.diagnosis.op_details)": [[399, "neural_compressor.ux.components.diagnosis.op_details.OpPattern"]], "opweights (class in neural_compressor.ux.components.diagnosis.op_details)": [[399, "neural_compressor.ux.components.diagnosis.op_details.OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details": [[399, "module-neural_compressor.ux.components.diagnosis.op_details"]], "serialize() (neural_compressor.ux.components.diagnosis.op_details.opdetails method)": [[399, "neural_compressor.ux.components.diagnosis.op_details.OpDetails.serialize"]], "opentry (class in neural_compressor.ux.components.diagnosis.op_entry)": [[400, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry": [[400, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "serialize() (neural_compressor.ux.components.diagnosis.op_entry.opentry method)": [[400, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry.serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[401, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "tensorflowdiagnosis (class in neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis)": [[402, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.tensorflowdiagnosis property)": [[402, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[402, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "create_dir_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[403, "neural_compressor.ux.components.file_browser.file_browser.create_dir_entry"]], "create_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[403, "neural_compressor.ux.components.file_browser.file_browser.create_entry"]], "create_file_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[403, "neural_compressor.ux.components.file_browser.file_browser.create_file_entry"]], "filter_requested_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[403, "neural_compressor.ux.components.file_browser.file_browser.filter_requested_entries"]], "get_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[403, "neural_compressor.ux.components.file_browser.file_browser.get_directory_entries"]], "get_filter_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[403, "neural_compressor.ux.components.file_browser.file_browser.get_filter_value"]], "get_non_hidden_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[403, "neural_compressor.ux.components.file_browser.file_browser.get_non_hidden_directory_entries"]], "get_requested_path() (in module neural_compressor.ux.components.file_browser.file_browser)": [[403, "neural_compressor.ux.components.file_browser.file_browser.get_requested_path"]], "get_setting_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[403, "neural_compressor.ux.components.file_browser.file_browser.get_setting_value"]], "is_dataset_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[403, "neural_compressor.ux.components.file_browser.file_browser.is_dataset_or_directory_entry"]], "is_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[403, "neural_compressor.ux.components.file_browser.file_browser.is_directory_entry"]], "is_model_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[403, "neural_compressor.ux.components.file_browser.file_browser.is_model_or_directory_entry"]], "neural_compressor.ux.components.file_browser.file_browser": [[403, "module-neural_compressor.ux.components.file_browser.file_browser"]], "should_show_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[403, "neural_compressor.ux.components.file_browser.file_browser.should_show_files"]], "should_show_only_model_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[403, "neural_compressor.ux.components.file_browser.file_browser.should_show_only_model_files"]], "sort_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[403, "neural_compressor.ux.components.file_browser.file_browser.sort_entries"]], "neural_compressor.ux.components.file_browser": [[404, "module-neural_compressor.ux.components.file_browser"]], "attribute (class in neural_compressor.ux.components.graph.attribute)": [[405, "neural_compressor.ux.components.graph.attribute.Attribute"]], "neural_compressor.ux.components.graph.attribute": [[405, "module-neural_compressor.ux.components.graph.attribute"]], "collapser (class in neural_compressor.ux.components.graph.collapser)": [[406, "neural_compressor.ux.components.graph.collapser.Collapser"]], "collapse() (neural_compressor.ux.components.graph.collapser.collapser method)": [[406, "neural_compressor.ux.components.graph.collapser.Collapser.collapse"]], "neural_compressor.ux.components.graph.collapser": [[406, "module-neural_compressor.ux.components.graph.collapser"]], "edge (class in neural_compressor.ux.components.graph.edge)": [[407, "neural_compressor.ux.components.graph.edge.Edge"]], "neural_compressor.ux.components.graph.edge": [[407, "module-neural_compressor.ux.components.graph.edge"]], "source (neural_compressor.ux.components.graph.edge.edge property)": [[407, "neural_compressor.ux.components.graph.edge.Edge.source"]], "target (neural_compressor.ux.components.graph.edge.edge property)": [[407, "neural_compressor.ux.components.graph.edge.Edge.target"]], "graph (class in neural_compressor.ux.components.graph.graph)": [[408, "neural_compressor.ux.components.graph.graph.Graph"]], "add_edge() (neural_compressor.ux.components.graph.graph.graph method)": [[408, "neural_compressor.ux.components.graph.graph.Graph.add_edge"]], "add_node() (neural_compressor.ux.components.graph.graph.graph method)": [[408, "neural_compressor.ux.components.graph.graph.Graph.add_node"]], "edges (neural_compressor.ux.components.graph.graph.graph property)": [[408, "neural_compressor.ux.components.graph.graph.Graph.edges"]], "get_node() (neural_compressor.ux.components.graph.graph.graph method)": [[408, "neural_compressor.ux.components.graph.graph.Graph.get_node"]], "get_target_nodes() (neural_compressor.ux.components.graph.graph.graph method)": [[408, "neural_compressor.ux.components.graph.graph.Graph.get_target_nodes"]], "highlight_pattern() (neural_compressor.ux.components.graph.graph.graph method)": [[408, "neural_compressor.ux.components.graph.graph.Graph.highlight_pattern"]], "neural_compressor.ux.components.graph.graph": [[408, "module-neural_compressor.ux.components.graph.graph"]], "nodes (neural_compressor.ux.components.graph.graph.graph property)": [[408, "neural_compressor.ux.components.graph.graph.Graph.nodes"]], "graphreader (class in neural_compressor.ux.components.graph.graph_reader)": [[409, "neural_compressor.ux.components.graph.graph_reader.GraphReader"]], "find_pattern_in_graph() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[409, "neural_compressor.ux.components.graph.graph_reader.GraphReader.find_pattern_in_graph"]], "neural_compressor.ux.components.graph.graph_reader": [[409, "module-neural_compressor.ux.components.graph.graph_reader"]], "read() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[409, "neural_compressor.ux.components.graph.graph_reader.GraphReader.read"]], "neural_compressor.ux.components.graph": [[410, "module-neural_compressor.ux.components.graph"]], "groupnode (class in neural_compressor.ux.components.graph.node)": [[411, "neural_compressor.ux.components.graph.node.GroupNode"]], "node (class in neural_compressor.ux.components.graph.node)": [[411, "neural_compressor.ux.components.graph.node.Node"]], "neural_compressor.ux.components.graph.node": [[411, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[412, "module-neural_compressor.ux.components.graph.reader"]], "onnxrtreader (class in neural_compressor.ux.components.graph.reader.onnxrt_reader)": [[413, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[413, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "read() (neural_compressor.ux.components.graph.reader.onnxrt_reader.onnxrtreader method)": [[413, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader.read"]], "tensorflowreader (class in neural_compressor.ux.components.graph.reader.tensorflow_reader)": [[414, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[414, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "read() (neural_compressor.ux.components.graph.reader.tensorflow_reader.tensorflowreader method)": [[414, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader.read"]], "neural_compressor.ux.components": [[415, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[416, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[417, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[418, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[419, "module-neural_compressor.ux.components.jobs_management.request"]], "get_default_path() (in module neural_compressor.ux.components.manage_workspace)": [[420, "neural_compressor.ux.components.manage_workspace.get_default_path"]], "neural_compressor.ux.components.manage_workspace": [[420, "module-neural_compressor.ux.components.manage_workspace"]], "domain (class in neural_compressor.ux.components.model.domain)": [[421, "neural_compressor.ux.components.model.domain.Domain"]], "neural_compressor.ux.components.model.domain": [[421, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[422, "module-neural_compressor.ux.components.model"]], "model (class in neural_compressor.ux.components.model.model)": [[423, "neural_compressor.ux.components.model.model.Model"]], "domain (neural_compressor.ux.components.model.model.model property)": [[423, "neural_compressor.ux.components.model.model.Model.domain"]], "ensure_supported_path() (neural_compressor.ux.components.model.model.model method)": [[423, "neural_compressor.ux.components.model.model.Model.ensure_supported_path"]], "get_framework_name() (neural_compressor.ux.components.model.model.model static method)": [[423, "neural_compressor.ux.components.model.model.Model.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.model.model method)": [[423, "neural_compressor.ux.components.model.model.Model.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.model.model method)": [[423, "neural_compressor.ux.components.model.model.Model.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.model.model method)": [[423, "neural_compressor.ux.components.model.model.Model.get_output_nodes"]], "get_tensors_info() (neural_compressor.ux.components.model.model.model method)": [[423, "neural_compressor.ux.components.model.model.Model.get_tensors_info"]], "guard_requirements_installed() (neural_compressor.ux.components.model.model.model method)": [[423, "neural_compressor.ux.components.model.model.Model.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.model.model property)": [[423, "neural_compressor.ux.components.model.model.Model.input_shape"]], "neural_compressor.ux.components.model.model": [[423, "module-neural_compressor.ux.components.model.model"]], "shape_elements_order (neural_compressor.ux.components.model.model.model property)": [[423, "neural_compressor.ux.components.model.model.Model.shape_elements_order"]], "supports_graph (neural_compressor.ux.components.model.model.model property)": [[423, "neural_compressor.ux.components.model.model.Model.supports_graph"]], "supports_path() (neural_compressor.ux.components.model.model.model static method)": [[423, "neural_compressor.ux.components.model.model.Model.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.model.model property)": [[423, "neural_compressor.ux.components.model.model.Model.supports_profiling"]], "supports_pruning (neural_compressor.ux.components.model.model.model property)": [[423, "neural_compressor.ux.components.model.model.Model.supports_pruning"]], "get_model_type() (in module neural_compressor.ux.components.model.model_type_getter)": [[424, "neural_compressor.ux.components.model.model_type_getter.get_model_type"]], "neural_compressor.ux.components.model.model_type_getter": [[424, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[425, "module-neural_compressor.ux.components.model.onnxrt"]], "onnxrtmodel (class in neural_compressor.ux.components.model.onnxrt.model)": [[426, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel"]], "domain (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[426, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.domain"]], "filtered_input_nodes (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[426, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.filtered_input_nodes"]], "get_framework_name() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[426, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_framework_name"]], "get_model_graph() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[426, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_model_graph"]], "guard_requirements_installed() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[426, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[426, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[426, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.nc_model_instance"]], "neural_compressor.ux.components.model.onnxrt.model": [[426, "module-neural_compressor.ux.components.model.onnxrt.model"]], "remove_number_of_samples_from_shape() (in module neural_compressor.ux.components.model.onnxrt.model)": [[426, "neural_compressor.ux.components.model.onnxrt.model.remove_number_of_samples_from_shape"]], "shape_elements_order (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[426, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.shape_elements_order"]], "supports_path() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[426, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.supports_path"]], "neural_compressor.ux.components.model.pytorch": [[427, "module-neural_compressor.ux.components.model.pytorch"]], "pytorchscriptmodel (class in neural_compressor.ux.components.model.pytorch.model)": [[428, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel"]], "get_framework_name() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[428, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.get_framework_name"]], "guard_requirements_installed() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel method)": [[428, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.guard_requirements_installed"]], "neural_compressor.ux.components.model.pytorch.model": [[428, "module-neural_compressor.ux.components.model.pytorch.model"]], "supports_path() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[428, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.supports_path"]], "modelrepository (class in neural_compressor.ux.components.model.repository)": [[429, "neural_compressor.ux.components.model.repository.ModelRepository"]], "get_framework_from_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[429, "neural_compressor.ux.components.model.repository.ModelRepository.get_framework_from_path"]], "get_frameworks() (neural_compressor.ux.components.model.repository.modelrepository method)": [[429, "neural_compressor.ux.components.model.repository.ModelRepository.get_frameworks"]], "get_model() (neural_compressor.ux.components.model.repository.modelrepository method)": [[429, "neural_compressor.ux.components.model.repository.ModelRepository.get_model"]], "get_supported_frameworks() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[429, "neural_compressor.ux.components.model.repository.ModelRepository.get_supported_frameworks"]], "is_model_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[429, "neural_compressor.ux.components.model.repository.ModelRepository.is_model_path"]], "neural_compressor.ux.components.model.repository": [[429, "module-neural_compressor.ux.components.model.repository"]], "shape (class in neural_compressor.ux.components.model.shape)": [[430, "neural_compressor.ux.components.model.shape.Shape"]], "neural_compressor.ux.components.model.shape": [[430, "module-neural_compressor.ux.components.model.shape"]], "serialize() (neural_compressor.ux.components.model.shape.shape method)": [[430, "neural_compressor.ux.components.model.shape.Shape.serialize"]], "frozenpbmodel (class in neural_compressor.ux.components.model.tensorflow.frozen_pb)": [[431, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[431, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel static method)": [[431, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel property)": [[431, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_profiling"]], "neural_compressor.ux.components.model.tensorflow": [[432, "module-neural_compressor.ux.components.model.tensorflow"]], "kerasmodel (class in neural_compressor.ux.components.model.tensorflow.keras)": [[433, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[433, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_input_nodes"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[433, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.keras": [[433, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel static method)": [[433, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.supports_path"]], "metagraphmodel (class in neural_compressor.ux.components.model.tensorflow.meta_graph)": [[434, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[434, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[434, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[434, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[434, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel static method)": [[434, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.supports_path"]], "tensorflowmodel (class in neural_compressor.ux.components.model.tensorflow.model)": [[435, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel"]], "get_framework_name() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel static method)": [[435, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[435, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[435, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[435, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_output_nodes"]], "guard_requirements_installed() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[435, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[435, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[435, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.nc_model_instance"]], "neural_compressor.ux.components.model.tensorflow.model": [[435, "module-neural_compressor.ux.components.model.tensorflow.model"]], "shape_elements_order (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[435, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.shape_elements_order"]], "supports_pruning (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[435, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.supports_pruning"]], "savedmodelmodel (class in neural_compressor.ux.components.model.tensorflow.saved_model)": [[436, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[436, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.saved_model.savedmodelmodel static method)": [[436, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel.supports_path"]], "get_input_shape() (in module neural_compressor.ux.components.model.tensorflow.utils)": [[437, "neural_compressor.ux.components.model.tensorflow.utils.get_input_shape"]], "neural_compressor.ux.components.model.tensorflow.utils": [[437, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "download_config() (in module neural_compressor.ux.components.model_zoo.download_config)": [[438, "neural_compressor.ux.components.model_zoo.download_config.download_config"]], "neural_compressor.ux.components.model_zoo.download_config": [[438, "module-neural_compressor.ux.components.model_zoo.download_config"]], "download_model() (in module neural_compressor.ux.components.model_zoo.download_model)": [[439, "neural_compressor.ux.components.model_zoo.download_model.download_model"]], "neural_compressor.ux.components.model_zoo.download_model": [[439, "module-neural_compressor.ux.components.model_zoo.download_model"]], "downloader (class in neural_compressor.ux.components.model_zoo.downloader)": [[440, "neural_compressor.ux.components.model_zoo.downloader.Downloader"]], "download() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[440, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download"]], "download_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[440, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_config"]], "download_file() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[440, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_file"]], "download_model() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[440, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_model"]], "download_yaml_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[440, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_yaml_config"]], "get_yaml_url() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[440, "neural_compressor.ux.components.model_zoo.downloader.Downloader.get_yaml_url"]], "neural_compressor.ux.components.model_zoo.downloader": [[440, "module-neural_compressor.ux.components.model_zoo.downloader"]], "unpack_archive() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[440, "neural_compressor.ux.components.model_zoo.downloader.Downloader.unpack_archive"]], "neural_compressor.ux.components.model_zoo": [[441, "module-neural_compressor.ux.components.model_zoo"]], "check_version() (in module neural_compressor.ux.components.model_zoo.list_models)": [[442, "neural_compressor.ux.components.model_zoo.list_models.check_version"]], "get_available_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[442, "neural_compressor.ux.components.model_zoo.list_models.get_available_models"]], "get_framework_module_name() (in module neural_compressor.ux.components.model_zoo.list_models)": [[442, "neural_compressor.ux.components.model_zoo.list_models.get_framework_module_name"]], "get_installed_frameworks() (in module neural_compressor.ux.components.model_zoo.list_models)": [[442, "neural_compressor.ux.components.model_zoo.list_models.get_installed_frameworks"]], "list_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[442, "neural_compressor.ux.components.model_zoo.list_models.list_models"]], "neural_compressor.ux.components.model_zoo.list_models": [[442, "module-neural_compressor.ux.components.model_zoo.list_models"]], "validate_model_list() (in module neural_compressor.ux.components.model_zoo.list_models)": [[442, "neural_compressor.ux.components.model_zoo.list_models.validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[443, "module-neural_compressor.ux.components.names_mapper"]], "mappingdirection (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[444, "neural_compressor.ux.components.names_mapper.names_mapper.MappingDirection"]], "namesmapper (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[444, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper"]], "domain_flavour_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[444, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_flavour_mappings"]], "domain_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[444, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_mappings"]], "framework_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[444, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.framework_mappings"]], "map_name() (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper method)": [[444, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.map_name"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[444, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "precision_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[444, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.precision_mappings"]], "check_if_collect_tuning_history() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[445, "neural_compressor.ux.components.optimization.execute_optimization.check_if_collect_tuning_history"]], "execute_optimization() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[445, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization"]], "execute_optimization_pytorch_script() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[445, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_pytorch_script"]], "execute_optimization_regular() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[445, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_regular"]], "neural_compressor.ux.components.optimization.execute_optimization": [[445, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "parse_logs() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[445, "neural_compressor.ux.components.optimization.execute_optimization.parse_logs"]], "parse_model_data_to_bench_names() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[445, "neural_compressor.ux.components.optimization.execute_optimization.parse_model_data_to_bench_names"]], "optimizationfactory (class in neural_compressor.ux.components.optimization.factory)": [[446, "neural_compressor.ux.components.optimization.factory.OptimizationFactory"]], "get_optimization() (neural_compressor.ux.components.optimization.factory.optimizationfactory static method)": [[446, "neural_compressor.ux.components.optimization.factory.OptimizationFactory.get_optimization"]], "neural_compressor.ux.components.optimization.factory": [[446, "module-neural_compressor.ux.components.optimization.factory"]], "graphoptimization (class in neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization)": [[447, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization"]], "configuration_data (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[447, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[447, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[447, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.generate_config"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[447, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "optimization_script (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[447, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[447, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[448, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[449, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[449, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[449, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[449, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[449, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.set_eager_execution"]], "optimizations (class in neural_compressor.ux.components.optimization)": [[450, "neural_compressor.ux.components.optimization.Optimizations"]], "neural_compressor.ux.components.optimization": [[450, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[451, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "mixedprecision (class in neural_compressor.ux.components.optimization.mixed_precision.mixed_precision)": [[452, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision"]], "configuration_data (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[452, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[452, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.execute"]], "generate_config() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[452, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.generate_config"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[452, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "optimization_script (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[452, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[452, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[453, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[453, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[453, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[453, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[453, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[454, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[455, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "optimize_pt_script() (in module neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model)": [[455, "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model.optimize_pt_script"]], "dataloaderinterface (class in neural_compressor.ux.components.optimization.optimization)": [[456, "neural_compressor.ux.components.optimization.optimization.DataloaderInterface"]], "optimization (class in neural_compressor.ux.components.optimization.optimization)": [[456, "neural_compressor.ux.components.optimization.optimization.Optimization"]], "optimizationinterface (class in neural_compressor.ux.components.optimization.optimization)": [[456, "neural_compressor.ux.components.optimization.optimization.OptimizationInterface"]], "command (neural_compressor.ux.components.optimization.optimization.optimization property)": [[456, "neural_compressor.ux.components.optimization.optimization.Optimization.command"]], "config_filename (neural_compressor.ux.components.optimization.optimization.optimization property)": [[456, "neural_compressor.ux.components.optimization.optimization.Optimization.config_filename"]], "configuration_data (neural_compressor.ux.components.optimization.optimization.optimization property)": [[456, "neural_compressor.ux.components.optimization.optimization.Optimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[456, "neural_compressor.ux.components.optimization.optimization.Optimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[456, "neural_compressor.ux.components.optimization.optimization.Optimization.generate_config"]], "neural_compressor.ux.components.optimization.optimization": [[456, "module-neural_compressor.ux.components.optimization.optimization"]], "optimization_script (neural_compressor.ux.components.optimization.optimization.optimization property)": [[456, "neural_compressor.ux.components.optimization.optimization.Optimization.optimization_script"]], "output_model_dir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[456, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_dir"]], "output_model_name (neural_compressor.ux.components.optimization.optimization.optimization property)": [[456, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_name"]], "parameters (neural_compressor.ux.components.optimization.optimization.optimization property)": [[456, "neural_compressor.ux.components.optimization.optimization.Optimization.parameters"]], "workdir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[456, "neural_compressor.ux.components.optimization.optimization.Optimization.workdir"]], "neural_compressor.ux.components.optimization.pruning": [[457, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[458, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "optimize_model() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[458, "neural_compressor.ux.components.optimization.pruning.optimize_model.optimize_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[458, "neural_compressor.ux.components.optimization.pruning.optimize_model.parse_args"]], "pruning (class in neural_compressor.ux.components.optimization.pruning.pruning)": [[459, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning"]], "configuration_data (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[459, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.pruning.pruning.pruning method)": [[459, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.pruning.pruning.pruning method)": [[459, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.generate_config"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[459, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "optimization_script (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[459, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[459, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.parameters"]], "neural_compressor.ux.components.optimization.tune": [[460, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[461, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[461, "neural_compressor.ux.components.optimization.tune.tune_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[461, "neural_compressor.ux.components.optimization.tune.tune_model.set_eager_execution"]], "tune_model() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[461, "neural_compressor.ux.components.optimization.tune.tune_model.tune_model"]], "accuracycriterion (class in neural_compressor.ux.components.optimization.tune.tuning)": [[462, "neural_compressor.ux.components.optimization.tune.tuning.AccuracyCriterion"]], "tuning (class in neural_compressor.ux.components.optimization.tune.tuning)": [[462, "neural_compressor.ux.components.optimization.tune.tuning.Tuning"]], "tuningdetails (class in neural_compressor.ux.components.optimization.tune.tuning)": [[462, "neural_compressor.ux.components.optimization.tune.tuning.TuningDetails"]], "configuration_data (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[462, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[462, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[462, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.generate_config"]], "neural_compressor.ux.components.optimization.tune.tuning": [[462, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "optimization_script (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[462, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[462, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.parameters"]], "tuninghistory (class in neural_compressor.ux.components.optimization.tuning_history)": [[463, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory"]], "watcher (class in neural_compressor.ux.components.optimization.tuning_history)": [[463, "neural_compressor.ux.components.optimization.tuning_history.Watcher"]], "history_file_modification_time() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[463, "neural_compressor.ux.components.optimization.tuning_history.Watcher.history_file_modification_time"]], "neural_compressor.ux.components.optimization.tuning_history": [[463, "module-neural_compressor.ux.components.optimization.tuning_history"]], "send_history_snapshot() (neural_compressor.ux.components.optimization.tuning_history.tuninghistory static method)": [[463, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory.send_history_snapshot"]], "stop() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[463, "neural_compressor.ux.components.optimization.tuning_history.Watcher.stop"]], "tuning_history() (in module neural_compressor.ux.components.optimization.tuning_history)": [[463, "neural_compressor.ux.components.optimization.tuning_history.tuning_history"]], "tuning_history_path() (in module neural_compressor.ux.components.optimization.tuning_history)": [[463, "neural_compressor.ux.components.optimization.tuning_history.tuning_history_path"]], "was_history_file_changed() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[463, "neural_compressor.ux.components.optimization.tuning_history.Watcher.was_history_file_changed"]], "execute_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[464, "neural_compressor.ux.components.profiling.execute_profiling.execute_profiling"]], "execute_real_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[464, "neural_compressor.ux.components.profiling.execute_profiling.execute_real_profiling"]], "neural_compressor.ux.components.profiling.execute_profiling": [[464, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.factory)": [[465, "neural_compressor.ux.components.profiling.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.factory.profilerfactory static method)": [[465, "neural_compressor.ux.components.profiling.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.factory": [[465, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[466, "module-neural_compressor.ux.components.profiling"]], "load_profiling_details() (in module neural_compressor.ux.components.profiling.profile_model)": [[467, "neural_compressor.ux.components.profiling.profile_model.load_profiling_details"]], "neural_compressor.ux.components.profiling.profile_model": [[467, "module-neural_compressor.ux.components.profiling.profile_model"]], "parse_args() (in module neural_compressor.ux.components.profiling.profile_model)": [[467, "neural_compressor.ux.components.profiling.profile_model.parse_args"]], "profiler (class in neural_compressor.ux.components.profiling.profiler)": [[468, "neural_compressor.ux.components.profiling.profiler.Profiler"]], "neural_compressor.ux.components.profiling.profiler": [[468, "module-neural_compressor.ux.components.profiling.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.profiler.profiler method)": [[468, "neural_compressor.ux.components.profiling.profiler.Profiler.profile_model"]], "dataloaderinterface (class in neural_compressor.ux.components.profiling.profiling)": [[469, "neural_compressor.ux.components.profiling.profiling.DataloaderInterface"]], "profiling (class in neural_compressor.ux.components.profiling.profiling)": [[469, "neural_compressor.ux.components.profiling.profiling.Profiling"]], "config_filename (neural_compressor.ux.components.profiling.profiling.profiling property)": [[469, "neural_compressor.ux.components.profiling.profiling.Profiling.config_filename"]], "config_path (neural_compressor.ux.components.profiling.profiling.profiling property)": [[469, "neural_compressor.ux.components.profiling.profiling.Profiling.config_path"]], "execute() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[469, "neural_compressor.ux.components.profiling.profiling.Profiling.execute"]], "generate_config() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[469, "neural_compressor.ux.components.profiling.profiling.Profiling.generate_config"]], "neural_compressor.ux.components.profiling.profiling": [[469, "module-neural_compressor.ux.components.profiling.profiling"]], "profiling_data (neural_compressor.ux.components.profiling.profiling.profiling property)": [[469, "neural_compressor.ux.components.profiling.profiling.Profiling.profiling_data"]], "workdir (neural_compressor.ux.components.profiling.profiling.profiling property)": [[469, "neural_compressor.ux.components.profiling.profiling.Profiling.workdir"]], "profilerfactory (class in neural_compressor.ux.components.profiling.tensorflow_profiler.factory)": [[470, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.tensorflow_profiler.factory.profilerfactory static method)": [[470, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[470, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[471, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "profiler (class in neural_compressor.ux.components.profiling.tensorflow_profiler.profiler)": [[472, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler"]], "build_dataloader() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[472, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.build_dataloader"]], "convert_nodes_to_list() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[472, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.convert_nodes_to_list"]], "create_tf_config() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[472, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.create_tf_config"]], "get_node_by_name() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[472, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.get_node_by_name"]], "initialize_graph() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[472, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.initialize_graph"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[472, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[472, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.profile_model"]], "delete_assign() (in module neural_compressor.ux.components.profiling.tensorflow_profiler.utils)": [[473, "neural_compressor.ux.components.profiling.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[473, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "main() (in module neural_compressor.ux.inc_bench)": [[474, "neural_compressor.ux.inc_bench.main"]], "neural_compressor.ux.inc_bench": [[474, "module-neural_compressor.ux.inc_bench"]], "prepare_environment() (in module neural_compressor.ux.inc_bench)": [[474, "neural_compressor.ux.inc_bench.prepare_environment"]], "neural_compressor.ux": [[475, "module-neural_compressor.ux"]], "domainflavours (class in neural_compressor.ux.utils.consts)": [[476, "neural_compressor.ux.utils.consts.DomainFlavours"]], "domains (class in neural_compressor.ux.utils.consts)": [[476, "neural_compressor.ux.utils.consts.Domains"]], "executionstatus (class in neural_compressor.ux.utils.consts)": [[476, "neural_compressor.ux.utils.consts.ExecutionStatus"]], "frameworks (class in neural_compressor.ux.utils.consts)": [[476, "neural_compressor.ux.utils.consts.Frameworks"]], "optimizationtypes (class in neural_compressor.ux.utils.consts)": [[476, "neural_compressor.ux.utils.consts.OptimizationTypes"]], "precisions (class in neural_compressor.ux.utils.consts)": [[476, "neural_compressor.ux.utils.consts.Precisions"]], "strategies (class in neural_compressor.ux.utils.consts)": [[476, "neural_compressor.ux.utils.consts.Strategies"]], "neural_compressor.ux.utils.consts": [[476, "module-neural_compressor.ux.utils.consts"]], "environment (class in neural_compressor.ux.utils.environment)": [[477, "neural_compressor.ux.utils.environment.Environment"]], "clean_workloads_wip_status() (neural_compressor.ux.utils.environment.environment static method)": [[477, "neural_compressor.ux.utils.environment.Environment.clean_workloads_wip_status"]], "ensure_workdir_exists_and_writeable() (neural_compressor.ux.utils.environment.environment static method)": [[477, "neural_compressor.ux.utils.environment.Environment.ensure_workdir_exists_and_writeable"]], "migrate_database() (neural_compressor.ux.utils.environment.environment static method)": [[477, "neural_compressor.ux.utils.environment.Environment.migrate_database"]], "neural_compressor.ux.utils.environment": [[477, "module-neural_compressor.ux.utils.environment"]], "accessdeniedexception": [[478, "neural_compressor.ux.utils.exceptions.AccessDeniedException"]], "clienterrorexception": [[478, "neural_compressor.ux.utils.exceptions.ClientErrorException"]], "internalexception": [[478, "neural_compressor.ux.utils.exceptions.InternalException"]], "notfoundexception": [[478, "neural_compressor.ux.utils.exceptions.NotFoundException"]], "neural_compressor.ux.utils.exceptions": [[478, "module-neural_compressor.ux.utils.exceptions"]], "executor (class in neural_compressor.ux.utils.executor)": [[479, "neural_compressor.ux.utils.executor.Executor"]], "additional_log_names (neural_compressor.ux.utils.executor.executor property)": [[479, "neural_compressor.ux.utils.executor.Executor.additional_log_names"]], "call() (neural_compressor.ux.utils.executor.executor method)": [[479, "neural_compressor.ux.utils.executor.Executor.call"]], "call_one() (neural_compressor.ux.utils.executor.executor method)": [[479, "neural_compressor.ux.utils.executor.Executor.call_one"]], "is_multi_commands() (neural_compressor.ux.utils.executor.executor static method)": [[479, "neural_compressor.ux.utils.executor.Executor.is_multi_commands"]], "log_name (neural_compressor.ux.utils.executor.executor property)": [[479, "neural_compressor.ux.utils.executor.Executor.log_name"]], "neural_compressor.ux.utils.executor": [[479, "module-neural_compressor.ux.utils.executor"]], "process_duration (neural_compressor.ux.utils.executor.executor property)": [[479, "neural_compressor.ux.utils.executor.Executor.process_duration"]], "refresh_workdir() (neural_compressor.ux.utils.executor.executor method)": [[479, "neural_compressor.ux.utils.executor.Executor.refresh_workdir"]], "request_id (neural_compressor.ux.utils.executor.executor property)": [[479, "neural_compressor.ux.utils.executor.Executor.request_id"]], "workdir (neural_compressor.ux.utils.executor.executor property)": [[479, "neural_compressor.ux.utils.executor.Executor.workdir"]], "expiringdict (class in neural_compressor.ux.utils.expiring_dict)": [[480, "neural_compressor.ux.utils.expiring_dict.ExpiringDict"]], "expiringdictitem (class in neural_compressor.ux.utils.expiring_dict)": [[480, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem"]], "is_expired() (neural_compressor.ux.utils.expiring_dict.expiringdictitem method)": [[480, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem.is_expired"]], "neural_compressor.ux.utils.expiring_dict": [[480, "module-neural_compressor.ux.utils.expiring_dict"]], "githubinfo (class in neural_compressor.ux.utils.github_info)": [[481, "neural_compressor.ux.utils.github_info.GithubInfo"]], "neural_compressor.ux.utils.github_info": [[481, "module-neural_compressor.ux.utils.github_info"]], "tag() (neural_compressor.ux.utils.github_info.githubinfo class method)": [[481, "neural_compressor.ux.utils.github_info.GithubInfo.tag"]], "hwinfo (class in neural_compressor.ux.utils.hw_info)": [[482, "neural_compressor.ux.utils.hw_info.HWInfo"]], "get_bios_version() (in module neural_compressor.ux.utils.hw_info)": [[482, "neural_compressor.ux.utils.hw_info.get_bios_version"]], "get_distribution() (in module neural_compressor.ux.utils.hw_info)": [[482, "neural_compressor.ux.utils.hw_info.get_distribution"]], "get_framework_dependency_info() (in module neural_compressor.ux.utils.hw_info)": [[482, "neural_compressor.ux.utils.hw_info.get_framework_dependency_info"]], "get_framework_info() (in module neural_compressor.ux.utils.hw_info)": [[482, "neural_compressor.ux.utils.hw_info.get_framework_info"]], "get_kernel_version() (in module neural_compressor.ux.utils.hw_info)": [[482, "neural_compressor.ux.utils.hw_info.get_kernel_version"]], "get_number_of_sockets() (in module neural_compressor.ux.utils.hw_info)": [[482, "neural_compressor.ux.utils.hw_info.get_number_of_sockets"]], "initialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[482, "neural_compressor.ux.utils.hw_info.HWInfo.initialize"]], "is_turbo_boost_enabled() (in module neural_compressor.ux.utils.hw_info)": [[482, "neural_compressor.ux.utils.hw_info.is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info": [[482, "module-neural_compressor.ux.utils.hw_info"]], "serialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[482, "neural_compressor.ux.utils.hw_info.HWInfo.serialize"]], "neural_compressor.ux.utils": [[483, "module-neural_compressor.ux.utils"]], "jsonserializer (class in neural_compressor.ux.utils.json_serializer)": [[484, "neural_compressor.ux.utils.json_serializer.JsonSerializer"]], "neural_compressor.ux.utils.json_serializer": [[484, "module-neural_compressor.ux.utils.json_serializer"]], "serialize() (neural_compressor.ux.utils.json_serializer.jsonserializer method)": [[484, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize"]], "serialize_item() (neural_compressor.ux.utils.json_serializer.jsonserializer static method)": [[484, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize_item"]], "change_log_level() (in module neural_compressor.ux.utils.logger)": [[485, "neural_compressor.ux.utils.logger.change_log_level"]], "neural_compressor.ux.utils.logger": [[485, "module-neural_compressor.ux.utils.logger"]], "accuracyparser (class in neural_compressor.ux.utils.parser)": [[486, "neural_compressor.ux.utils.parser.AccuracyParser"]], "benchmarkparserfactory (class in neural_compressor.ux.utils.parser)": [[486, "neural_compressor.ux.utils.parser.BenchmarkParserFactory"]], "optimizationparser (class in neural_compressor.ux.utils.parser)": [[486, "neural_compressor.ux.utils.parser.OptimizationParser"]], "parser (class in neural_compressor.ux.utils.parser)": [[486, "neural_compressor.ux.utils.parser.Parser"]], "performanceparser (class in neural_compressor.ux.utils.parser)": [[486, "neural_compressor.ux.utils.parser.PerformanceParser"]], "profilingparser (class in neural_compressor.ux.utils.parser)": [[486, "neural_compressor.ux.utils.parser.ProfilingParser"]], "get_parser() (neural_compressor.ux.utils.parser.benchmarkparserfactory static method)": [[486, "neural_compressor.ux.utils.parser.BenchmarkParserFactory.get_parser"]], "neural_compressor.ux.utils.parser": [[486, "module-neural_compressor.ux.utils.parser"]], "patterns (neural_compressor.ux.utils.parser.accuracyparser property)": [[486, "neural_compressor.ux.utils.parser.AccuracyParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.optimizationparser property)": [[486, "neural_compressor.ux.utils.parser.OptimizationParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.parser property)": [[486, "neural_compressor.ux.utils.parser.Parser.patterns"]], "patterns (neural_compressor.ux.utils.parser.performanceparser property)": [[486, "neural_compressor.ux.utils.parser.PerformanceParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.profilingparser property)": [[486, "neural_compressor.ux.utils.parser.ProfilingParser.patterns"]], "process() (neural_compressor.ux.utils.parser.accuracyparser method)": [[486, "neural_compressor.ux.utils.parser.AccuracyParser.process"]], "process() (neural_compressor.ux.utils.parser.optimizationparser method)": [[486, "neural_compressor.ux.utils.parser.OptimizationParser.process"]], "process() (neural_compressor.ux.utils.parser.parser method)": [[486, "neural_compressor.ux.utils.parser.Parser.process"]], "process() (neural_compressor.ux.utils.parser.performanceparser method)": [[486, "neural_compressor.ux.utils.parser.PerformanceParser.process"]], "process() (neural_compressor.ux.utils.parser.profilingparser method)": [[486, "neural_compressor.ux.utils.parser.ProfilingParser.process"]], "summarize_partial() (neural_compressor.ux.utils.parser.performanceparser method)": [[486, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_partial"]], "summarize_value() (neural_compressor.ux.utils.parser.performanceparser static method)": [[486, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_value"]], "unify_time() (neural_compressor.ux.utils.parser.profilingparser static method)": [[486, "neural_compressor.ux.utils.parser.ProfilingParser.unify_time"]], "update_partial() (neural_compressor.ux.utils.parser.performanceparser static method)": [[486, "neural_compressor.ux.utils.parser.PerformanceParser.update_partial"]], "proc (class in neural_compressor.ux.utils.proc)": [[487, "neural_compressor.ux.utils.proc.Proc"]], "info (neural_compressor.ux.utils.proc.proc property)": [[487, "neural_compressor.ux.utils.proc.Proc.info"]], "info_path (neural_compressor.ux.utils.proc.proc property)": [[487, "neural_compressor.ux.utils.proc.Proc.info_path"]], "is_ok (neural_compressor.ux.utils.proc.proc property)": [[487, "neural_compressor.ux.utils.proc.Proc.is_ok"]], "neural_compressor.ux.utils.proc": [[487, "module-neural_compressor.ux.utils.proc"]], "output (neural_compressor.ux.utils.proc.proc property)": [[487, "neural_compressor.ux.utils.proc.Proc.output"]], "output_path (neural_compressor.ux.utils.proc.proc property)": [[487, "neural_compressor.ux.utils.proc.Proc.output_path"]], "remove_logs() (neural_compressor.ux.utils.proc.proc method)": [[487, "neural_compressor.ux.utils.proc.Proc.remove_logs"]], "run() (neural_compressor.ux.utils.proc.proc method)": [[487, "neural_compressor.ux.utils.proc.Proc.run"]], "tail (neural_compressor.ux.utils.proc.proc property)": [[487, "neural_compressor.ux.utils.proc.Proc.tail"]], "ncprocesses (class in neural_compressor.ux.utils.processes)": [[488, "neural_compressor.ux.utils.processes.NCProcesses"]], "is_ok (neural_compressor.ux.utils.processes.ncprocesses property)": [[488, "neural_compressor.ux.utils.processes.NCProcesses.is_ok"]], "neural_compressor.ux.utils.processes": [[488, "module-neural_compressor.ux.utils.processes"]], "remove_successful_logs() (neural_compressor.ux.utils.processes.ncprocesses method)": [[488, "neural_compressor.ux.utils.processes.NCProcesses.remove_successful_logs"]], "return_code_all() (neural_compressor.ux.utils.processes.ncprocesses method)": [[488, "neural_compressor.ux.utils.processes.NCProcesses.return_code_all"]], "singleton (class in neural_compressor.ux.utils.singleton)": [[489, "neural_compressor.ux.utils.singleton.Singleton"]], "neural_compressor.ux.utils.singleton": [[489, "module-neural_compressor.ux.utils.singleton"]], "get_status_update_function() (in module neural_compressor.ux.utils.status_updates)": [[490, "neural_compressor.ux.utils.status_updates.get_status_update_function"]], "neural_compressor.ux.utils.status_updates": [[490, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[491, "module-neural_compressor.ux.utils.templates"]], "metric (class in neural_compressor.ux.utils.templates.metric)": [[492, "neural_compressor.ux.utils.templates.metric.Metric"]], "acc_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[492, "neural_compressor.ux.utils.templates.metric.Metric.acc_input_model"]], "acc_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[492, "neural_compressor.ux.utils.templates.metric.Metric.acc_optimized_model"]], "accuracy (neural_compressor.ux.utils.templates.metric.metric property)": [[492, "neural_compressor.ux.utils.templates.metric.Metric.accuracy"]], "calculate_throughput() (neural_compressor.ux.utils.templates.metric.metric static method)": [[492, "neural_compressor.ux.utils.templates.metric.Metric.calculate_throughput"]], "insert_data() (neural_compressor.ux.utils.templates.metric.metric method)": [[492, "neural_compressor.ux.utils.templates.metric.Metric.insert_data"]], "latency (neural_compressor.ux.utils.templates.metric.metric property)": [[492, "neural_compressor.ux.utils.templates.metric.Metric.latency"]], "neural_compressor.ux.utils.templates.metric": [[492, "module-neural_compressor.ux.utils.templates.metric"]], "optimization_time (neural_compressor.ux.utils.templates.metric.metric property)": [[492, "neural_compressor.ux.utils.templates.metric.Metric.optimization_time"]], "path_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[492, "neural_compressor.ux.utils.templates.metric.Metric.path_optimized_model"]], "profiling_data (neural_compressor.ux.utils.templates.metric.metric property)": [[492, "neural_compressor.ux.utils.templates.metric.Metric.profiling_data"]], "size_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[492, "neural_compressor.ux.utils.templates.metric.Metric.size_input_model"]], "size_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[492, "neural_compressor.ux.utils.templates.metric.Metric.size_optimized_model"]], "throughput (neural_compressor.ux.utils.templates.metric.metric property)": [[492, "neural_compressor.ux.utils.templates.metric.Metric.throughput"]], "workdir (class in neural_compressor.ux.utils.templates.workdir)": [[493, "neural_compressor.ux.utils.templates.workdir.Workdir"]], "clean_logs() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[493, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_logs"]], "clean_status() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[493, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_status"]], "ensure_working_path_exists() (neural_compressor.ux.utils.templates.workdir.workdir method)": [[493, "neural_compressor.ux.utils.templates.workdir.Workdir.ensure_working_path_exists"]], "neural_compressor.ux.utils.templates.workdir": [[493, "module-neural_compressor.ux.utils.templates.workdir"]], "check_module() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.check_module"]], "deprecated() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.deprecated"]], "determine_ip() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.determine_ip"]], "export_to_csv() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.export_to_csv"]], "filter_transforms() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.filter_transforms"]], "get_dataset_path() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.get_dataset_path"]], "get_default_pruning_config_path() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.get_default_pruning_config_path"]], "get_file_extension() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.get_file_extension"]], "get_framework_from_path() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.get_framework_from_path"]], "get_height_width_from_size() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.get_height_width_from_size"]], "get_metrics_dict() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.get_metrics_dict"]], "get_model_zoo_config_path() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.get_model_zoo_config_path"]], "get_model_zoo_model_path() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.get_model_zoo_model_path"]], "get_module_version() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.get_module_version"]], "get_predefined_config_path() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.get_predefined_config_path"]], "get_shape_from_transforms() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.get_shape_from_transforms"]], "get_size() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.get_size"]], "is_dataset_file() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.is_dataset_file"]], "is_development_env() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.is_development_env"]], "is_hidden() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.is_hidden"]], "load_dataloader_config() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.load_dataloader_config"]], "load_help_nc_params() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.load_help_nc_params"]], "load_metrics_config() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.load_metrics_config"]], "load_model_config() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.load_model_config"]], "load_model_wise_params() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.load_model_wise_params"]], "load_precisions_config() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.load_precisions_config"]], "load_pruning_details_config() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.load_pruning_details_config"]], "load_transforms_config() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.load_transforms_config"]], "load_transforms_filter_config() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.load_transforms_filter_config"]], "neural_compressor.ux.utils.utils": [[494, "module-neural_compressor.ux.utils.utils"]], "normalize_domain() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.normalize_domain"]], "normalize_framework() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.normalize_framework"]], "normalize_string() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.normalize_string"]], "parse_bool_value() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.parse_bool_value"]], "parse_to_float_list() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.parse_to_float_list"]], "parse_to_string_list() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.parse_to_string_list"]], "parse_version() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.parse_version"]], "release_tag() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.release_tag"]], "replace_with_values() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.replace_with_values"]], "verify_file_path() (in module neural_compressor.ux.utils.utils)": [[494, "neural_compressor.ux.utils.utils.verify_file_path"]], "config (class in neural_compressor.ux.utils.workload.config)": [[495, "neural_compressor.ux.utils.workload.config.Config"]], "dump() (neural_compressor.ux.utils.workload.config.config method)": [[495, "neural_compressor.ux.utils.workload.config.Config.dump"]], "get_performance_configs() (neural_compressor.ux.utils.workload.config.config method)": [[495, "neural_compressor.ux.utils.workload.config.Config.get_performance_configs"]], "get_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[495, "neural_compressor.ux.utils.workload.config.Config.get_performance_cores_per_instance"]], "get_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[495, "neural_compressor.ux.utils.workload.config.Config.get_performance_num_of_instance"]], "initialize() (neural_compressor.ux.utils.workload.config.config method)": [[495, "neural_compressor.ux.utils.workload.config.Config.initialize"]], "load() (neural_compressor.ux.utils.workload.config.config method)": [[495, "neural_compressor.ux.utils.workload.config.Config.load"]], "neural_compressor.ux.utils.workload.config": [[495, "module-neural_compressor.ux.utils.workload.config"]], "process_transform() (neural_compressor.ux.utils.workload.config.config static method)": [[495, "neural_compressor.ux.utils.workload.config.Config.process_transform"]], "remove_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[495, "neural_compressor.ux.utils.workload.config.Config.remove_accuracy_metric"]], "remove_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[495, "neural_compressor.ux.utils.workload.config.Config.remove_dataloader"]], "set_accuracy_and_performance_batch_sizes() (neural_compressor.ux.utils.workload.config.config method)": [[495, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_and_performance_batch_sizes"]], "set_accuracy_goal() (neural_compressor.ux.utils.workload.config.config method)": [[495, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_goal"]], "set_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[495, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_metric"]], "set_evaluation_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[495, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataloader"]], "set_evaluation_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[495, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataset_path"]], "set_inputs() (neural_compressor.ux.utils.workload.config.config method)": [[495, "neural_compressor.ux.utils.workload.config.Config.set_inputs"]], "set_optimization_precision() (neural_compressor.ux.utils.workload.config.config method)": [[495, "neural_compressor.ux.utils.workload.config.Config.set_optimization_precision"]], "set_outputs() (neural_compressor.ux.utils.workload.config.config method)": [[495, "neural_compressor.ux.utils.workload.config.Config.set_outputs"]], "set_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[495, "neural_compressor.ux.utils.workload.config.Config.set_performance_cores_per_instance"]], "set_performance_iterations() (neural_compressor.ux.utils.workload.config.config method)": [[495, "neural_compressor.ux.utils.workload.config.Config.set_performance_iterations"]], "set_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[495, "neural_compressor.ux.utils.workload.config.Config.set_performance_num_of_instance"]], "set_performance_warmup() (neural_compressor.ux.utils.workload.config.config method)": [[495, "neural_compressor.ux.utils.workload.config.Config.set_performance_warmup"]], "set_quantization_approach() (neural_compressor.ux.utils.workload.config.config method)": [[495, "neural_compressor.ux.utils.workload.config.Config.set_quantization_approach"]], "set_quantization_batch_size() (neural_compressor.ux.utils.workload.config.config method)": [[495, "neural_compressor.ux.utils.workload.config.Config.set_quantization_batch_size"]], "set_quantization_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[495, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataloader"]], "set_quantization_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[495, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataset_path"]], "set_quantization_sampling_size() (neural_compressor.ux.utils.workload.config.config method)": [[495, "neural_compressor.ux.utils.workload.config.Config.set_quantization_sampling_size"]], "set_transform() (neural_compressor.ux.utils.workload.config.config method)": [[495, "neural_compressor.ux.utils.workload.config.Config.set_transform"]], "set_workspace() (neural_compressor.ux.utils.workload.config.config method)": [[495, "neural_compressor.ux.utils.workload.config.Config.set_workspace"]], "dataloader (class in neural_compressor.ux.utils.workload.dataloader)": [[496, "neural_compressor.ux.utils.workload.dataloader.Dataloader"]], "dataset (class in neural_compressor.ux.utils.workload.dataloader)": [[496, "neural_compressor.ux.utils.workload.dataloader.Dataset"]], "filter (class in neural_compressor.ux.utils.workload.dataloader)": [[496, "neural_compressor.ux.utils.workload.dataloader.Filter"]], "labelbalance (class in neural_compressor.ux.utils.workload.dataloader)": [[496, "neural_compressor.ux.utils.workload.dataloader.LabelBalance"]], "transform (class in neural_compressor.ux.utils.workload.dataloader)": [[496, "neural_compressor.ux.utils.workload.dataloader.Transform"]], "is_dummy() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[496, "neural_compressor.ux.utils.workload.dataloader.Dataset.is_dummy"]], "neural_compressor.ux.utils.workload.dataloader": [[496, "module-neural_compressor.ux.utils.workload.dataloader"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[496, "neural_compressor.ux.utils.workload.dataloader.Dataloader.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[496, "neural_compressor.ux.utils.workload.dataloader.Dataset.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.transform method)": [[496, "neural_compressor.ux.utils.workload.dataloader.Transform.serialize"]], "set_dataset() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[496, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_dataset"]], "set_transforms_from_list() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[496, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_transforms_from_list"]], "accuracy (class in neural_compressor.ux.utils.workload.evaluation)": [[497, "neural_compressor.ux.utils.workload.evaluation.Accuracy"]], "configs (class in neural_compressor.ux.utils.workload.evaluation)": [[497, "neural_compressor.ux.utils.workload.evaluation.Configs"]], "evaluation (class in neural_compressor.ux.utils.workload.evaluation)": [[497, "neural_compressor.ux.utils.workload.evaluation.Evaluation"]], "metric (class in neural_compressor.ux.utils.workload.evaluation)": [[497, "neural_compressor.ux.utils.workload.evaluation.Metric"]], "performance (class in neural_compressor.ux.utils.workload.evaluation)": [[497, "neural_compressor.ux.utils.workload.evaluation.Performance"]], "postprocess (class in neural_compressor.ux.utils.workload.evaluation)": [[497, "neural_compressor.ux.utils.workload.evaluation.Postprocess"]], "postprocessschema (class in neural_compressor.ux.utils.workload.evaluation)": [[497, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema"]], "get_label_shift_value() (neural_compressor.ux.utils.workload.evaluation.postprocessschema static method)": [[497, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema.get_label_shift_value"]], "name (neural_compressor.ux.utils.workload.evaluation.metric property)": [[497, "neural_compressor.ux.utils.workload.evaluation.Metric.name"]], "neural_compressor.ux.utils.workload.evaluation": [[497, "module-neural_compressor.ux.utils.workload.evaluation"]], "param (neural_compressor.ux.utils.workload.evaluation.metric property)": [[497, "neural_compressor.ux.utils.workload.evaluation.Metric.param"]], "serialize() (neural_compressor.ux.utils.workload.evaluation.metric method)": [[497, "neural_compressor.ux.utils.workload.evaluation.Metric.serialize"]], "set_accuracy_postprocess_transforms() (neural_compressor.ux.utils.workload.evaluation.evaluation method)": [[497, "neural_compressor.ux.utils.workload.evaluation.Evaluation.set_accuracy_postprocess_transforms"]], "graphoptimization (class in neural_compressor.ux.utils.workload.graph_optimization)": [[498, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization": [[498, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "set_precisions() (neural_compressor.ux.utils.workload.graph_optimization.graphoptimization method)": [[498, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization.set_precisions"]], "neural_compressor.ux.utils.workload": [[499, "module-neural_compressor.ux.utils.workload"]], "mixedprecision (class in neural_compressor.ux.utils.workload.mixed_precision)": [[500, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision": [[500, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "set_precisions() (neural_compressor.ux.utils.workload.mixed_precision.mixedprecision method)": [[500, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision.set_precisions"]], "model (class in neural_compressor.ux.utils.workload.model)": [[501, "neural_compressor.ux.utils.workload.model.Model"]], "inputs (neural_compressor.ux.utils.workload.model.model property)": [[501, "neural_compressor.ux.utils.workload.model.Model.inputs"]], "neural_compressor.ux.utils.workload.model": [[501, "module-neural_compressor.ux.utils.workload.model"]], "outputs (neural_compressor.ux.utils.workload.model.model property)": [[501, "neural_compressor.ux.utils.workload.model.Model.outputs"]], "serialize() (neural_compressor.ux.utils.workload.model.model method)": [[501, "neural_compressor.ux.utils.workload.model.Model.serialize"]], "adamoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.AdamOptimizer"]], "adamwoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.AdamWOptimizer"]], "approach (class in neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.Approach"]], "criterion (class in neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.Criterion"]], "crossentropylosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.CrossEntropyLossCriterion"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationlosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.KnowledgeDistillationLossCriterion"]], "optimizer (class in neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.Optimizer"]], "pruning (class in neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.Pruning"]], "sgdoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.SGDOptimizer"]], "selfknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.SelfKnowledgeDistillationLoss"]], "sparsecategoricalcrossentropycriterion (class in neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.SparseCategoricalCrossentropyCriterion"]], "train (class in neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.Train"]], "weightcompressionapproach (class in neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach"]], "initialize_pruners() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach static method)": [[502, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.initialize_pruners"]], "neural_compressor.ux.utils.workload.pruning": [[502, "module-neural_compressor.ux.utils.workload.pruning"]], "parse_dict_value_to_float() (in module neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_float"]], "parse_dict_value_to_int() (in module neural_compressor.ux.utils.workload.pruning)": [[502, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_int"]], "serialize() (neural_compressor.ux.utils.workload.pruning.train method)": [[502, "neural_compressor.ux.utils.workload.pruning.Train.serialize"]], "serialize() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach method)": [[502, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.serialize"]], "serialize_pruner() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach static method)": [[502, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.serialize_pruner"]], "set_postprocess_transforms() (neural_compressor.ux.utils.workload.pruning.train method)": [[502, "neural_compressor.ux.utils.workload.pruning.Train.set_postprocess_transforms"]], "advance (class in neural_compressor.ux.utils.workload.quantization)": [[503, "neural_compressor.ux.utils.workload.quantization.Advance"]], "calibration (class in neural_compressor.ux.utils.workload.quantization)": [[503, "neural_compressor.ux.utils.workload.quantization.Calibration"]], "quantization (class in neural_compressor.ux.utils.workload.quantization)": [[503, "neural_compressor.ux.utils.workload.quantization.Quantization"]], "wiseconfig (class in neural_compressor.ux.utils.workload.quantization)": [[503, "neural_compressor.ux.utils.workload.quantization.WiseConfig"]], "wiseconfigdetails (class in neural_compressor.ux.utils.workload.quantization)": [[503, "neural_compressor.ux.utils.workload.quantization.WiseConfigDetails"]], "neural_compressor.ux.utils.workload.quantization": [[503, "module-neural_compressor.ux.utils.workload.quantization"]], "acccriterion (class in neural_compressor.ux.utils.workload.tuning)": [[504, "neural_compressor.ux.utils.workload.tuning.AccCriterion"]], "diagnosis (class in neural_compressor.ux.utils.workload.tuning)": [[504, "neural_compressor.ux.utils.workload.tuning.Diagnosis"]], "exitpolicy (class in neural_compressor.ux.utils.workload.tuning)": [[504, "neural_compressor.ux.utils.workload.tuning.ExitPolicy"]], "multiobjectives (class in neural_compressor.ux.utils.workload.tuning)": [[504, "neural_compressor.ux.utils.workload.tuning.MultiObjectives"]], "strategy (class in neural_compressor.ux.utils.workload.tuning)": [[504, "neural_compressor.ux.utils.workload.tuning.Strategy"]], "tuning (class in neural_compressor.ux.utils.workload.tuning)": [[504, "neural_compressor.ux.utils.workload.tuning.Tuning"]], "workspace (class in neural_compressor.ux.utils.workload.tuning)": [[504, "neural_compressor.ux.utils.workload.tuning.Workspace"]], "neural_compressor.ux.utils.workload.tuning": [[504, "module-neural_compressor.ux.utils.workload.tuning"]], "objective (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[504, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.objective"]], "set_max_trials() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[504, "neural_compressor.ux.utils.workload.tuning.Tuning.set_max_trials"]], "set_performance_only() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[504, "neural_compressor.ux.utils.workload.tuning.Tuning.set_performance_only"]], "set_random_seed() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[504, "neural_compressor.ux.utils.workload.tuning.Tuning.set_random_seed"]], "set_timeout() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[504, "neural_compressor.ux.utils.workload.tuning.Tuning.set_timeout"]], "set_workspace() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[504, "neural_compressor.ux.utils.workload.tuning.Tuning.set_workspace"]], "weight (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[504, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.weight"]], "float_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[505, "neural_compressor.ux.utils.yaml_utils.float_representer"]], "neural_compressor.ux.utils.yaml_utils": [[505, "module-neural_compressor.ux.utils.yaml_utils"]], "pruner_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[505, "neural_compressor.ux.utils.yaml_utils.pruner_representer"]], "message (class in neural_compressor.ux.web.communication)": [[506, "neural_compressor.ux.web.communication.Message"]], "messagequeue (class in neural_compressor.ux.web.communication)": [[506, "neural_compressor.ux.web.communication.MessageQueue"]], "request (class in neural_compressor.ux.web.communication)": [[506, "neural_compressor.ux.web.communication.Request"]], "response (class in neural_compressor.ux.web.communication)": [[506, "neural_compressor.ux.web.communication.Response"]], "create_simple_response() (in module neural_compressor.ux.web.communication)": [[506, "neural_compressor.ux.web.communication.create_simple_response"]], "data (neural_compressor.ux.web.communication.message property)": [[506, "neural_compressor.ux.web.communication.Message.data"]], "get() (neural_compressor.ux.web.communication.messagequeue method)": [[506, "neural_compressor.ux.web.communication.MessageQueue.get"]], "neural_compressor.ux.web.communication": [[506, "module-neural_compressor.ux.web.communication"]], "post_error() (neural_compressor.ux.web.communication.messagequeue method)": [[506, "neural_compressor.ux.web.communication.MessageQueue.post_error"]], "post_failure() (neural_compressor.ux.web.communication.messagequeue method)": [[506, "neural_compressor.ux.web.communication.MessageQueue.post_failure"]], "post_success() (neural_compressor.ux.web.communication.messagequeue method)": [[506, "neural_compressor.ux.web.communication.MessageQueue.post_success"]], "status (neural_compressor.ux.web.communication.message property)": [[506, "neural_compressor.ux.web.communication.Message.status"]], "subject (neural_compressor.ux.web.communication.message property)": [[506, "neural_compressor.ux.web.communication.Message.subject"]], "configuration (class in neural_compressor.ux.web.configuration)": [[507, "neural_compressor.ux.web.configuration.Configuration"]], "determine_gui_port() (neural_compressor.ux.web.configuration.configuration method)": [[507, "neural_compressor.ux.web.configuration.Configuration.determine_gui_port"]], "determine_log_level() (neural_compressor.ux.web.configuration.configuration method)": [[507, "neural_compressor.ux.web.configuration.Configuration.determine_log_level"]], "determine_server_port() (neural_compressor.ux.web.configuration.configuration method)": [[507, "neural_compressor.ux.web.configuration.Configuration.determine_server_port"]], "determine_url_prefix() (neural_compressor.ux.web.configuration.configuration static method)": [[507, "neural_compressor.ux.web.configuration.Configuration.determine_url_prefix"]], "determine_values_from_environment() (neural_compressor.ux.web.configuration.configuration method)": [[507, "neural_compressor.ux.web.configuration.Configuration.determine_values_from_environment"]], "dump_token_to_file() (neural_compressor.ux.web.configuration.configuration method)": [[507, "neural_compressor.ux.web.configuration.Configuration.dump_token_to_file"]], "get_command_line_args() (neural_compressor.ux.web.configuration.configuration method)": [[507, "neural_compressor.ux.web.configuration.Configuration.get_command_line_args"]], "get_url() (neural_compressor.ux.web.configuration.configuration method)": [[507, "neural_compressor.ux.web.configuration.Configuration.get_url"]], "global_config_directory (neural_compressor.ux.web.configuration.configuration property)": [[507, "neural_compressor.ux.web.configuration.Configuration.global_config_directory"]], "is_port_taken() (neural_compressor.ux.web.configuration.configuration method)": [[507, "neural_compressor.ux.web.configuration.Configuration.is_port_taken"]], "neural_compressor.ux.web.configuration": [[507, "module-neural_compressor.ux.web.configuration"]], "set_up() (neural_compressor.ux.web.configuration.configuration method)": [[507, "neural_compressor.ux.web.configuration.Configuration.set_up"]], "servicenotfoundexception (class in neural_compressor.ux.web.exceptions)": [[508, "neural_compressor.ux.web.exceptions.ServiceNotFoundException"]], "neural_compressor.ux.web.exceptions": [[508, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[509, "module-neural_compressor.ux.web"]], "deferredroutingdefinition (class in neural_compressor.ux.web.router)": [[510, "neural_compressor.ux.web.router.DeferredRoutingDefinition"]], "deferredsubprocessroutingdefinition (class in neural_compressor.ux.web.router)": [[510, "neural_compressor.ux.web.router.DeferredSubprocessRoutingDefinition"]], "realtimeroutingdefinition (class in neural_compressor.ux.web.router)": [[510, "neural_compressor.ux.web.router.RealtimeRoutingDefinition"]], "router (class in neural_compressor.ux.web.router)": [[510, "neural_compressor.ux.web.router.Router"]], "routingdefinition (class in neural_compressor.ux.web.router)": [[510, "neural_compressor.ux.web.router.RoutingDefinition"]], "find_pattern_in_graph() (in module neural_compressor.ux.web.router)": [[510, "neural_compressor.ux.web.router.find_pattern_in_graph"]], "get_model_graph() (in module neural_compressor.ux.web.router)": [[510, "neural_compressor.ux.web.router.get_model_graph"]], "get_system_info() (in module neural_compressor.ux.web.router)": [[510, "neural_compressor.ux.web.router.get_system_info"]], "handle() (neural_compressor.ux.web.router.router method)": [[510, "neural_compressor.ux.web.router.Router.handle"]], "neural_compressor.ux.web.router": [[510, "module-neural_compressor.ux.web.router"]], "allow_api_call() (in module neural_compressor.ux.web.server)": [[511, "neural_compressor.ux.web.server.allow_api_call"]], "block_iframe() (in module neural_compressor.ux.web.server)": [[511, "neural_compressor.ux.web.server.block_iframe"]], "block_sniffing() (in module neural_compressor.ux.web.server)": [[511, "neural_compressor.ux.web.server.block_sniffing"]], "build_parameters() (in module neural_compressor.ux.web.server)": [[511, "neural_compressor.ux.web.server.build_parameters"]], "disable_cache() (in module neural_compressor.ux.web.server)": [[511, "neural_compressor.ux.web.server.disable_cache"]], "get_tls_args() (in module neural_compressor.ux.web.server)": [[511, "neural_compressor.ux.web.server.get_tls_args"]], "handle_api_call() (in module neural_compressor.ux.web.server)": [[511, "neural_compressor.ux.web.server.handle_api_call"]], "neural_compressor.ux.web.server": [[511, "module-neural_compressor.ux.web.server"]], "page_not_found() (in module neural_compressor.ux.web.server)": [[511, "neural_compressor.ux.web.server.page_not_found"]], "require_api_token() (in module neural_compressor.ux.web.server)": [[511, "neural_compressor.ux.web.server.require_api_token"]], "root() (in module neural_compressor.ux.web.server)": [[511, "neural_compressor.ux.web.server.root"]], "run_server() (in module neural_compressor.ux.web.server)": [[511, "neural_compressor.ux.web.server.run_server"]], "web_socket_publisher() (in module neural_compressor.ux.web.server)": [[511, "neural_compressor.ux.web.server.web_socket_publisher"]], "benchmarkservice (class in neural_compressor.ux.web.service.benchmark)": [[512, "neural_compressor.ux.web.service.benchmark.BenchmarkService"]], "neural_compressor.ux.web.service.benchmark": [[512, "module-neural_compressor.ux.web.service.benchmark"]], "historysnapshotparser (class in neural_compressor.ux.web.service.history_snapshot_parser)": [[513, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser"]], "extract_accuracy() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[513, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_accuracy"]], "extract_performance() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[513, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_performance"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[513, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "parse_history_item() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[513, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_item"]], "parse_history_snapshot() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[513, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_snapshot"]], "neural_compressor.ux.web.service": [[514, "module-neural_compressor.ux.web.service"]], "modelservice (class in neural_compressor.ux.web.service.model)": [[515, "neural_compressor.ux.web.service.model.ModelService"]], "get_model() (neural_compressor.ux.web.service.model.modelservice class method)": [[515, "neural_compressor.ux.web.service.model.ModelService.get_model"]], "neural_compressor.ux.web.service.model": [[515, "module-neural_compressor.ux.web.service.model"]], "optimizationservice (class in neural_compressor.ux.web.service.optimization)": [[516, "neural_compressor.ux.web.service.optimization.OptimizationService"]], "neural_compressor.ux.web.service.optimization": [[516, "module-neural_compressor.ux.web.service.optimization"]], "profilingservice (class in neural_compressor.ux.web.service.profiling)": [[517, "neural_compressor.ux.web.service.profiling.ProfilingService"]], "generate_csv() (neural_compressor.ux.web.service.profiling.profilingservice class method)": [[517, "neural_compressor.ux.web.service.profiling.ProfilingService.generate_csv"]], "neural_compressor.ux.web.service.profiling": [[517, "module-neural_compressor.ux.web.service.profiling"]], "requestdataprocessor (class in neural_compressor.ux.web.service.request_data_processor)": [[518, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor"]], "get_string_value() (neural_compressor.ux.web.service.request_data_processor.requestdataprocessor static method)": [[518, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor.get_string_value"]], "neural_compressor.ux.web.service.request_data_processor": [[518, "module-neural_compressor.ux.web.service.request_data_processor"]], "responsegenerator (class in neural_compressor.ux.web.service.response_generator)": [[519, "neural_compressor.ux.web.service.response_generator.ResponseGenerator"]], "add_refresh() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[519, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.add_refresh"]], "from_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[519, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.from_exception"]], "get_status_code_for_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[519, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.get_status_code_for_exception"]], "neural_compressor.ux.web.service.response_generator": [[519, "module-neural_compressor.ux.web.service.response_generator"]], "serve_from_filesystem() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[519, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.serve_from_filesystem"]], "workloadservice (class in neural_compressor.ux.web.service.workload)": [[520, "neural_compressor.ux.web.service.workload.WorkloadService"]], "get_code_template() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[520, "neural_compressor.ux.web.service.workload.WorkloadService.get_code_template"]], "get_config() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[520, "neural_compressor.ux.web.service.workload.WorkloadService.get_config"]], "get_output() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[520, "neural_compressor.ux.web.service.workload.WorkloadService.get_output"]], "neural_compressor.ux.web.service.workload": [[520, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[521, "module-neural_compressor.version"]]}})