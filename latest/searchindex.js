Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/compression/pruning/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/objective", "docs/source/orchestration", "docs/source/platform_configuration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/compression/pruning/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/platform_configuration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.pattern_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.neural_insights_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.weights_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Full Publications/Events (60)", "Pythonic Style Access for Configurations", "Quantization", "Turn OFF Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 149, 163, 169, 170, 173, 290, 331, 373, 424, 450, 453, 460], "mask": [0, 169, 170, 193, 237, 263, 292, 316, 453, 466], "adaptor_registri": [1, 396], "cl": [1, 153, 160, 169, 170, 171, 172, 195, 202, 210, 212, 217, 239, 246, 252, 274, 281, 285, 290, 292, 294, 305, 320, 331, 366, 386], "sourc": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 249, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 279, 280, 281, 282, 285, 286, 287, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 333, 335, 337, 338, 339, 340, 342, 343, 345, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 369, 370, 371, 372, 373, 375, 376, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 392, 395, 426, 428, 441, 443, 445, 446, 448, 454], "The": [1, 3, 11, 14, 16, 33, 49, 70, 109, 115, 117, 136, 144, 152, 153, 158, 159, 160, 163, 167, 169, 170, 171, 172, 173, 174, 175, 177, 178, 181, 182, 183, 193, 194, 195, 196, 197, 201, 202, 210, 212, 215, 217, 220, 222, 225, 226, 227, 237, 238, 239, 240, 241, 245, 246, 252, 253, 258, 260, 261, 262, 264, 265, 267, 269, 270, 271, 273, 274, 276, 277, 279, 280, 281, 282, 285, 287, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 302, 303, 304, 305, 309, 311, 313, 314, 315, 317, 318, 320, 321, 329, 331, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 370, 372, 373, 375, 376, 378, 380, 381, 385, 386, 387, 390, 392, 393, 396, 397, 399, 403, 406, 409, 411, 412, 413, 415, 417, 419, 421, 423, 424, 425, 427, 428, 429, 430, 433, 434, 436, 439, 441, 442, 443, 445, 446, 448, 449, 450, 451, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466], "decor": [1, 16, 33, 63, 64, 66, 144, 153, 169, 170, 172, 210, 217, 252, 267, 274, 281, 285, 290, 292, 294, 305, 308, 320, 331, 366, 369, 386, 392, 393, 396, 463], "us": [1, 13, 16, 33, 39, 40, 44, 45, 66, 99, 101, 112, 137, 146, 152, 158, 160, 163, 167, 169, 170, 172, 175, 177, 178, 181, 182, 191, 192, 193, 194, 195, 196, 197, 200, 209, 210, 211, 212, 217, 225, 226, 235, 236, 237, 238, 239, 240, 241, 244, 251, 252, 256, 257, 258, 260, 261, 263, 267, 268, 269, 274, 281, 282, 285, 287, 290, 292, 293, 294, 295, 296, 299, 302, 305, 308, 309, 313, 314, 316, 320, 331, 348, 353, 354, 358, 361, 363, 366, 369, 370, 373, 376, 377, 378, 379, 386, 390, 391, 392, 393, 396, 411, 412, 413, 415, 416, 417, 419, 421, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 439, 441, 443, 445, 446, 448, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466], "regist": [1, 16, 33, 153, 160, 163, 169, 170, 171, 172, 195, 202, 210, 212, 217, 239, 246, 252, 267, 274, 281, 285, 290, 292, 294, 305, 308, 320, 331, 366, 369, 383, 393, 396, 413, 417, 427, 428, 449, 450, 460, 463], "all": [1, 13, 16, 33, 41, 59, 93, 152, 153, 155, 158, 159, 169, 170, 173, 177, 178, 183, 184, 191, 195, 202, 210, 211, 217, 220, 222, 227, 235, 239, 246, 252, 260, 263, 265, 267, 274, 281, 285, 286, 290, 296, 305, 308, 313, 316, 318, 320, 322, 331, 366, 369, 372, 378, 386, 390, 395, 396, 412, 413, 417, 421, 425, 428, 431, 439, 442, 443, 446, 447, 448, 449, 451, 452, 453, 454, 456, 457, 460, 462, 463], "subclass": [1, 16, 33, 153, 169, 170, 172, 188, 192, 195, 202, 210, 217, 232, 236, 239, 246, 252, 267, 274, 281, 285, 290, 292, 294, 305, 308, 320, 331, 366, 369, 396], "paramet": [1, 11, 13, 14, 16, 39, 40, 41, 63, 64, 66, 82, 101, 112, 128, 136, 137, 144, 145, 146, 150, 151, 152, 153, 158, 159, 160, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 181, 182, 192, 193, 195, 202, 206, 210, 212, 217, 222, 225, 226, 236, 237, 239, 246, 249, 252, 253, 255, 256, 257, 258, 260, 261, 263, 264, 265, 267, 269, 270, 271, 273, 274, 275, 276, 277, 279, 280, 281, 282, 285, 287, 290, 291, 292, 293, 294, 295, 299, 305, 309, 311, 313, 314, 316, 317, 318, 320, 321, 325, 329, 331, 348, 353, 354, 358, 366, 370, 372, 373, 375, 378, 382, 383, 385, 386, 392, 412, 413, 415, 417, 424, 427, 428, 442, 448, 449, 453, 456, 459, 460, 462, 463, 465], "framework_specific_info": [1, 3, 11, 14, 41, 43, 396], "base": [1, 3, 13, 16, 33, 41, 42, 43, 82, 101, 112, 116, 118, 128, 140, 146, 149, 152, 153, 159, 163, 178, 183, 186, 191, 193, 195, 202, 210, 220, 227, 230, 235, 237, 239, 246, 252, 267, 273, 275, 281, 282, 285, 287, 292, 302, 305, 309, 320, 322, 329, 330, 331, 363, 366, 370, 393, 395, 396, 413, 416, 417, 421, 428, 436, 437, 439, 448, 452, 453, 456, 459, 461, 463, 466], "framework": [1, 3, 11, 13, 14, 41, 158, 160, 170, 179, 180, 184, 185, 189, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 207, 210, 212, 213, 217, 223, 224, 228, 229, 231, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 248, 250, 252, 258, 267, 268, 295, 303, 309, 320, 321, 322, 323, 325, 364, 370, 378, 395, 396, 417, 418, 422, 423, 424, 425, 427, 428, 429, 453, 454, 456, 461, 462, 463, 464, 465], "layer": [1, 3, 11, 14, 41, 42, 43, 112, 113, 114, 115, 117, 118, 150, 156, 160, 165, 167, 168, 169, 170, 173, 177, 178, 212, 219, 290, 291, 376, 378, 386, 396, 416, 424, 453, 458], "mxnet_util": 2, "util": [2, 12, 17, 101, 106, 107, 135, 138, 145, 146, 147, 151, 162, 164, 167, 177, 178, 219, 259, 261, 291, 301, 312, 314, 346, 351, 362, 397, 417, 428, 431, 456, 463, 464], "ox_util": 2, "oper": [2, 17, 40, 100, 106, 136, 144, 167, 168, 169, 177, 178, 206, 249, 290, 348, 353, 392, 411, 412, 419, 448, 456, 460, 462, 463], "activ": [2, 17, 29, 137, 152, 177, 178, 219, 309, 370, 396, 416, 421, 428, 449, 452, 455, 456, 460, 461, 465], "argmax": [2, 17, 29], "attent": [2, 17, 29, 149, 165, 167, 170, 177, 178, 193, 237, 390, 415, 453], "binary_op": [2, 17, 29], "concat": [2, 17, 29, 143], "conv": [2, 17, 29, 54, 58, 62, 67, 68, 69, 88, 105, 156, 177, 178, 392, 428, 453, 455, 456, 463], "direct_q8": [2, 17, 29], "embed_layernorm": [2, 17, 29], "gather": [2, 13, 17, 29, 177, 178, 290], "gavgpool": [2, 17, 29], "gemm": [2, 17, 29, 177, 178], "lstm": [2, 17, 29], "matmul": [2, 17, 29, 48, 55, 61, 69, 90, 105, 124, 133, 169, 177, 178, 290, 421, 463], "maxpool": [2, 17, 29, 125, 134, 421], "op": [2, 13, 17, 29, 41, 48, 53, 61, 62, 63, 64, 65, 66, 67, 68, 70, 74, 77, 81, 84, 87, 88, 89, 90, 92, 101, 103, 105, 119, 120, 121, 127, 129, 130, 131, 132, 137, 139, 142, 144, 145, 146, 151, 152, 156, 167, 177, 178, 302, 309, 310, 348, 353, 359, 361, 363, 370, 371, 380, 386, 396, 421, 428, 429, 453, 456, 457, 458, 460, 461, 463, 465], "pad": [2, 17, 29, 67, 68, 193, 210, 237, 252, 413, 462], "pool": [2, 17, 29], "resiz": [2, 17, 29, 193, 194, 206, 210, 237, 238, 249, 252, 412, 413, 462], "split": [2, 17, 29, 40, 78, 209, 210, 251, 252, 392, 460, 462], "calibr": [2, 11, 13, 14, 17, 45, 85, 86, 136, 152, 158, 177, 178, 181, 182, 225, 226, 258, 295, 354, 380, 396, 412, 413, 423, 424, 456, 463, 465], "quantiz": [2, 11, 13, 14, 16, 17, 39, 40, 44, 45, 84, 88, 90, 92, 95, 103, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 145, 146, 150, 152, 156, 158, 159, 177, 178, 181, 182, 206, 213, 220, 225, 226, 249, 257, 258, 259, 269, 296, 302, 308, 312, 359, 361, 363, 375, 376, 380, 385, 386, 396, 401, 412, 413, 417, 418, 421, 423, 424, 427, 429, 430, 431, 436, 438, 439, 442, 451, 454, 458, 461, 462, 463, 464, 465], "smooth_quant": [2, 17, 155, 177, 178, 312, 456, 460], "tf_util": 2, "graph_rewrit": [2, 107], "bf16": [2, 53, 83, 107, 145, 177, 178, 309, 370, 396, 421, 428, 429, 433, 438, 442, 448, 457, 463], "gener": [2, 13, 44, 45, 83, 107, 118, 144, 152, 158, 167, 173, 181, 182, 183, 192, 195, 196, 197, 198, 210, 225, 226, 227, 236, 239, 240, 241, 242, 252, 260, 268, 299, 313, 321, 349, 354, 358, 373, 375, 392, 396, 412, 415, 427, 428, 429, 431, 436, 441, 443, 445, 446, 448, 450, 452, 453, 454, 456, 457, 460, 461, 462, 463], "int8": [2, 18, 19, 40, 83, 107, 119, 120, 121, 127, 129, 130, 131, 132, 139, 144, 157, 158, 177, 178, 206, 249, 255, 256, 257, 309, 311, 370, 372, 385, 386, 392, 396, 411, 413, 416, 421, 428, 433, 436, 438, 439, 442, 448, 455, 456, 457, 458, 459, 460, 461, 462, 465], "onnx": [2, 14, 15, 16, 29, 38, 40, 83, 107, 138, 156, 177, 178, 189, 233, 255, 256, 257, 321, 328, 348, 384, 395, 396, 397, 412, 418, 419, 421, 422, 424, 430, 433, 438, 439, 454, 455, 460, 463], "qdq": [2, 39, 83, 107, 108, 109, 138, 152, 177, 178, 255, 256, 257, 396, 419, 424, 438, 439, 456, 460], "graph_bas": [2, 83, 107], "quantize_graph": [2, 107], "qat": [2, 107, 108, 151, 178, 269, 329, 416, 417, 424, 428, 456], "quantize_graph_bas": [2, 107, 108], "quantize_graph_bn": [2, 107, 108], "quantize_graph_concatv2": [2, 107, 108], "quantize_graph_conv": [2, 107, 108], "quantize_graph_for_intel_cpu": [2, 107, 108], "quantize_graph_matmul": [2, 107, 108], "quantize_graph_pool": [2, 107, 108], "transform_graph": [2, 107], "bias_correct": [2, 107, 141], "graph_transform_bas": [2, 107, 141], "insert_log": [2, 107, 141], "rerange_quantized_concat": [2, 107, 141], "graph_convert": [2, 107], "graph_converter_without_calib": [2, 107], "graph_util": [2, 107], "quantize_graph_common": [2, 107], "smooth_quant_calibr": [2, 107], "smooth_quant_scal": [2, 107], "tf2onnx_convert": [2, 107], "torch_util": [2, 214, 259, 312, 460], "bf16_convert": [2, 47, 83, 107, 147], "hawq_metr": [2, 147], "model_wrapp": [2, 15, 147], "pattern_detector": [2, 147], "symbolic_trac": [2, 147], "tensorflow": [2, 47, 49, 71, 72, 73, 83, 91, 97, 98, 99, 100, 101, 102, 106, 107, 108, 110, 113, 126, 136, 137, 138, 141, 144, 177, 178, 192, 193, 194, 195, 198, 200, 202, 210, 212, 217, 236, 237, 238, 239, 242, 244, 246, 252, 256, 257, 258, 261, 263, 267, 268, 269, 295, 303, 314, 316, 320, 321, 329, 347, 348, 352, 353, 354, 364, 386, 393, 395, 396, 412, 415, 416, 418, 421, 422, 424, 425, 428, 430, 438, 439, 453, 454, 455, 459, 463, 465], "kerasadaptor": 3, "kerasqueri": 3, "local_config_fil": [3, 41, 43], "none": [3, 13, 38, 40, 41, 43, 44, 45, 59, 85, 98, 100, 101, 106, 112, 138, 144, 146, 150, 152, 158, 159, 160, 165, 167, 169, 173, 174, 175, 177, 178, 181, 182, 183, 185, 189, 191, 193, 194, 195, 196, 197, 198, 200, 206, 210, 211, 212, 213, 220, 222, 225, 226, 227, 229, 233, 235, 237, 238, 239, 240, 241, 242, 244, 249, 252, 253, 256, 257, 258, 263, 267, 268, 269, 270, 273, 282, 287, 291, 295, 299, 300, 302, 303, 304, 305, 309, 316, 320, 321, 331, 347, 352, 353, 354, 355, 358, 359, 360, 361, 363, 364, 365, 366, 370, 373, 375, 376, 378, 383, 385, 386, 396, 413, 427, 456, 461, 462, 463], "defin": [3, 41, 42, 82, 146, 148, 167, 169, 170, 171, 172, 177, 178, 181, 182, 225, 226, 270, 271, 273, 274, 275, 282, 287, 290, 291, 292, 294, 321, 354, 375, 385, 390, 393, 396, 412, 413, 415, 416, 421, 424, 427, 428, 449, 451, 453, 456, 459, 460, 461, 463, 465], "queri": [3, 13, 41, 43, 144, 152, 167, 177, 178, 456], "interfac": [3, 41, 42, 82, 109, 174, 258, 282, 287, 295, 296, 378, 424, 428, 439, 452, 456, 458], "each": [3, 41, 42, 137, 144, 146, 177, 178, 191, 195, 198, 206, 210, 235, 239, 242, 249, 252, 261, 263, 264, 265, 302, 314, 316, 317, 318, 363, 391, 396, 413, 415, 416, 421, 428, 429, 433, 439, 442, 448, 450, 453, 459, 460, 461, 462, 463, 464], "adapt": [3, 41, 42, 390, 395, 413, 439, 454], "should": [3, 41, 42, 50, 111, 112, 159, 165, 167, 177, 178, 181, 182, 191, 193, 195, 210, 215, 225, 226, 235, 237, 239, 252, 261, 314, 320, 321, 354, 373, 375, 386, 392, 393, 396, 413, 415, 417, 427, 428, 429, 434, 443, 446, 448, 450, 453, 456, 462, 463, 465], "implement": [3, 41, 42, 106, 139, 143, 181, 182, 188, 191, 192, 193, 195, 225, 226, 232, 235, 236, 237, 239, 260, 313, 321, 331, 354, 361, 375, 412, 413, 428, 439, 449, 453, 456, 458, 461, 463, 465], "inherit": [3, 41, 42, 159, 160, 170, 172, 177, 190, 210, 212, 220, 234, 252, 292, 294, 393, 396, 413], "specif": [3, 11, 14, 39, 41, 42, 100, 112, 158, 173, 177, 178, 193, 194, 195, 196, 200, 202, 217, 237, 238, 239, 240, 244, 246, 269, 276, 277, 279, 280, 281, 320, 354, 383, 390, 393, 396, 415, 421, 423, 427, 428, 429, 430, 431, 435, 436, 438, 442, 448, 450, 453, 455, 463, 465], "backend": [3, 15, 38, 39, 41, 42, 156, 177, 178, 179, 180, 184, 185, 189, 193, 194, 196, 197, 198, 199, 200, 204, 207, 210, 216, 217, 223, 224, 228, 229, 231, 233, 237, 238, 240, 241, 242, 243, 244, 248, 250, 252, 268, 303, 321, 322, 323, 325, 364, 392, 417, 423, 424, 428, 429, 437, 455, 462, 465], "own": [3, 41, 42, 70, 191, 210, 235, 252, 331, 393, 412, 413, 424, 427, 450, 459, 464], "mxnetadaptor": 11, "do": [11, 14, 159, 177, 178, 192, 193, 236, 237, 253, 257, 260, 263, 293, 313, 316, 385, 390, 413, 417, 421, 424, 427, 428, 443, 446, 453, 457, 458, 460, 463], "inspect": [11, 14, 458, 461], "tensor": [11, 13, 14, 15, 16, 40, 66, 101, 144, 146, 152, 163, 169, 170, 171, 178, 210, 252, 255, 257, 290, 292, 302, 329, 363, 386, 392, 413, 453, 456, 458, 461, 462, 463], "dict": [11, 13, 14, 41, 112, 144, 145, 146, 152, 153, 158, 163, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 181, 182, 192, 211, 217, 225, 226, 236, 255, 257, 262, 263, 264, 265, 267, 270, 273, 274, 275, 282, 285, 287, 290, 291, 292, 293, 294, 299, 302, 308, 311, 315, 316, 317, 318, 320, 321, 329, 354, 369, 372, 373, 375, 376, 378, 385, 386, 392, 419, 427, 453, 455, 456, 460, 461, 463], "configur": [11, 13, 14, 41, 114, 145, 152, 158, 173, 174, 177, 178, 181, 182, 184, 195, 198, 211, 216, 225, 226, 239, 242, 253, 257, 258, 269, 270, 271, 273, 282, 287, 291, 295, 296, 302, 320, 321, 331, 354, 363, 375, 377, 378, 384, 385, 392, 393, 396, 413, 427, 428, 435, 449, 450, 453, 456, 458, 462, 463, 466], "mxnet": [12, 13, 16, 178, 188, 192, 195, 198, 202, 210, 232, 236, 239, 242, 246, 252, 258, 267, 295, 320, 321, 326, 354, 395, 396, 412, 418, 421, 424, 425, 428, 429, 430, 455, 463, 465], "init": [12, 17, 39, 155, 161, 164, 166, 413, 427], "optyp": [13, 177, 178, 255], "enum": 13, "type": [13, 16, 39, 40, 41, 70, 92, 101, 112, 118, 128, 136, 144, 145, 146, 152, 153, 160, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 191, 193, 195, 202, 210, 212, 217, 235, 237, 239, 246, 252, 260, 261, 263, 267, 274, 281, 285, 290, 292, 294, 299, 305, 309, 311, 313, 314, 316, 320, 329, 331, 358, 359, 366, 370, 372, 373, 385, 386, 391, 396, 413, 417, 419, 421, 424, 428, 429, 449, 456, 459, 462, 463, 465], "isiter": 13, "obj": [13, 101, 173, 192, 222, 236, 253, 258, 269, 270, 271, 273, 282, 287, 291, 295, 321, 331, 354, 375, 378, 386], "bool": [13, 39, 137, 144, 151, 152, 169, 177, 178, 193, 195, 206, 210, 237, 239, 249, 252, 257, 261, 267, 290, 308, 314, 320, 369, 373, 385, 386, 413, 427, 455, 462], "check": [13, 63, 64, 101, 144, 152, 173, 184, 195, 239, 255, 291, 385, 386, 391, 395, 417, 425, 432, 434, 436, 443, 446, 447, 458], "whether": [13, 101, 112, 144, 169, 177, 178, 191, 193, 206, 210, 235, 237, 249, 252, 261, 263, 267, 290, 314, 316, 320, 378, 385, 386, 396, 413, 427, 456, 460, 462], "object": [13, 39, 40, 41, 70, 82, 101, 112, 128, 145, 146, 151, 152, 158, 159, 163, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 181, 182, 183, 193, 194, 195, 210, 211, 213, 222, 225, 226, 227, 237, 238, 239, 252, 253, 258, 263, 271, 273, 276, 277, 279, 280, 281, 282, 287, 290, 291, 292, 293, 294, 295, 299, 312, 316, 320, 321, 329, 330, 348, 353, 354, 358, 372, 375, 378, 385, 386, 392, 393, 401, 411, 412, 413, 420, 427, 428, 430, 451, 453, 455, 456, 462, 463, 464, 466], "i": [13, 40, 41, 44, 45, 49, 50, 53, 56, 60, 66, 78, 81, 101, 128, 139, 144, 146, 151, 152, 157, 158, 159, 163, 167, 168, 170, 171, 173, 177, 178, 181, 182, 183, 191, 192, 193, 194, 195, 196, 197, 200, 202, 206, 210, 211, 213, 217, 219, 220, 225, 226, 227, 235, 236, 237, 238, 239, 240, 241, 244, 246, 249, 252, 260, 263, 265, 267, 269, 274, 282, 287, 291, 292, 296, 303, 313, 316, 318, 320, 321, 331, 337, 338, 342, 354, 359, 364, 373, 375, 385, 386, 390, 391, 392, 393, 396, 397, 399, 403, 406, 409, 411, 412, 413, 415, 416, 417, 419, 420, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 441, 442, 443, 445, 446, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466], "iter": [13, 15, 101, 136, 144, 158, 168, 170, 172, 177, 178, 181, 182, 186, 191, 195, 196, 213, 225, 226, 230, 235, 239, 240, 292, 294, 321, 354, 375, 378, 392, 393, 396, 411, 413, 428, 453, 455, 456, 461, 463, 465], "return": [13, 16, 41, 49, 63, 64, 66, 70, 101, 112, 144, 145, 146, 151, 152, 153, 158, 160, 167, 169, 170, 171, 172, 173, 175, 181, 182, 195, 202, 206, 210, 211, 212, 217, 222, 225, 226, 239, 246, 249, 252, 260, 261, 263, 264, 265, 267, 273, 274, 281, 285, 290, 291, 292, 294, 299, 305, 309, 311, 313, 314, 316, 317, 318, 320, 321, 325, 329, 331, 348, 353, 354, 358, 366, 370, 372, 373, 375, 378, 383, 385, 386, 392, 393, 413, 417, 427, 430, 450, 453, 456, 460, 461, 463], "true": [13, 81, 109, 142, 144, 158, 177, 178, 191, 193, 195, 196, 209, 210, 211, 235, 237, 239, 240, 251, 252, 257, 261, 267, 285, 308, 314, 320, 331, 354, 369, 373, 378, 385, 386, 413, 417, 421, 427, 428, 431, 434, 435, 455, 456, 460, 461, 462, 463, 465], "els": [13, 144, 178, 191, 235, 331, 383, 436, 461], "fals": [13, 15, 38, 39, 43, 44, 45, 67, 68, 85, 88, 95, 98, 99, 101, 109, 127, 132, 139, 142, 143, 144, 151, 152, 158, 160, 177, 178, 183, 185, 189, 193, 195, 206, 210, 211, 212, 213, 219, 227, 229, 233, 237, 239, 249, 252, 263, 267, 316, 320, 331, 354, 373, 378, 386, 396, 413, 421, 427, 428, 441, 445, 455, 456, 460, 461, 462, 465], "boolean": 13, "ensure_list": 13, "x": [13, 50, 70, 168, 177, 178, 192, 210, 236, 252, 299, 358, 373, 417, 429, 430, 456, 460, 461, 462, 464], "ensur": [13, 210, 252, 299, 358, 417, 456, 462], "list": [13, 39, 40, 49, 101, 136, 144, 145, 146, 149, 152, 158, 167, 168, 169, 170, 177, 178, 181, 182, 186, 193, 206, 210, 211, 225, 226, 230, 237, 249, 252, 256, 257, 260, 261, 263, 264, 265, 267, 274, 282, 287, 290, 293, 308, 313, 314, 316, 317, 318, 320, 321, 329, 337, 338, 342, 354, 369, 373, 375, 376, 386, 392, 395, 396, 413, 419, 421, 425, 428, 431, 436, 438, 441, 442, 445, 450, 453, 455, 456, 457, 460, 461, 463], "input": [13, 15, 39, 40, 41, 49, 56, 60, 63, 64, 66, 67, 68, 70, 78, 79, 81, 82, 101, 105, 106, 112, 118, 137, 144, 145, 150, 151, 152, 156, 167, 168, 177, 178, 181, 182, 193, 194, 195, 197, 206, 209, 210, 215, 225, 226, 237, 238, 239, 241, 249, 251, 252, 255, 256, 257, 320, 321, 325, 329, 354, 375, 383, 385, 386, 393, 396, 411, 412, 413, 415, 416, 417, 419, 421, 423, 427, 428, 430, 431, 436, 453, 455, 456, 460, 461, 462, 465], "check_mx_vers": 13, "version": [13, 49, 100, 152, 167, 178, 256, 257, 312, 390, 392, 396, 421, 425, 426, 428, 441, 443, 445, 446, 452, 454, 460, 463, 464], "str": [13, 39, 136, 145, 146, 149, 150, 151, 152, 153, 160, 167, 177, 178, 193, 194, 195, 202, 206, 210, 212, 216, 217, 237, 238, 239, 246, 249, 252, 256, 257, 260, 261, 263, 265, 267, 274, 285, 308, 311, 313, 314, 316, 318, 320, 339, 347, 349, 352, 353, 369, 372, 373, 378, 383, 386, 387, 413, 427, 455, 461, 462], "mx": 13, "__version__": 13, "combine_cap": 13, "current": [13, 66, 100, 150, 163, 167, 169, 170, 177, 178, 269, 276, 277, 279, 280, 281, 290, 292, 299, 303, 358, 364, 386, 392, 393, 396, 417, 421, 427, 428, 431, 435, 448, 450, 453, 456, 460, 463], "new": [13, 16, 144, 150, 158, 183, 195, 210, 211, 227, 239, 252, 291, 331, 391, 417, 428, 429, 442, 448, 449, 453, 454, 456, 458, 459, 462, 464, 465], "combin": [13, 152, 177, 178, 181, 182, 206, 220, 225, 226, 249, 321, 354, 375, 386, 392, 396, 424, 428, 451, 454, 456, 457, 462, 463], "capabl": [13, 43, 309, 370, 411, 421, 428, 429, 439, 453, 455, 456, 463, 465], "contain": [13, 63, 64, 66, 70, 135, 144, 146, 152, 158, 159, 167, 169, 170, 172, 173, 177, 178, 181, 182, 193, 194, 195, 225, 226, 237, 238, 239, 253, 257, 258, 263, 264, 265, 269, 282, 285, 287, 290, 291, 292, 293, 294, 295, 316, 317, 318, 321, 354, 375, 378, 385, 413, 415, 424, 427, 449, 453, 461, 463, 464], "make_nc_model": 13, "target": [13, 39, 40, 98, 167, 172, 173, 178, 291, 294, 299, 358, 413, 417, 428, 453, 461, 462, 463, 465], "sym_model": 13, "ctx": 13, "input_desc": 13, "convert": [13, 40, 44, 45, 46, 48, 49, 50, 51, 52, 62, 70, 82, 95, 96, 98, 99, 100, 101, 127, 132, 138, 145, 152, 167, 177, 178, 193, 206, 209, 210, 237, 249, 251, 252, 256, 263, 269, 291, 309, 316, 370, 373, 392, 428, 429, 433, 456, 457, 460, 462, 463], "symbol": [13, 145, 151, 152, 260, 313, 321, 354, 392, 430], "model": [13, 15, 16, 29, 38, 39, 40, 41, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 112, 114, 136, 137, 138, 144, 145, 146, 149, 150, 151, 152, 156, 158, 159, 165, 167, 170, 172, 173, 177, 178, 181, 182, 189, 192, 193, 195, 210, 211, 214, 215, 222, 225, 226, 233, 236, 237, 239, 252, 253, 255, 256, 257, 258, 259, 267, 268, 269, 270, 273, 276, 277, 279, 280, 281, 282, 287, 291, 292, 293, 294, 295, 296, 299, 300, 302, 303, 304, 305, 312, 320, 321, 331, 347, 352, 353, 354, 355, 358, 359, 360, 361, 363, 364, 365, 366, 372, 373, 375, 381, 383, 385, 386, 388, 392, 393, 395, 396, 401, 411, 412, 413, 415, 416, 417, 418, 423, 424, 426, 427, 429, 431, 436, 438, 439, 442, 448, 450, 451, 452, 454, 456, 458, 459, 461, 462, 463, 464, 465], "an": [13, 63, 64, 66, 101, 137, 139, 146, 152, 157, 170, 177, 178, 186, 191, 195, 210, 214, 219, 230, 235, 239, 252, 259, 260, 264, 265, 273, 274, 296, 312, 313, 317, 318, 321, 348, 353, 354, 373, 375, 386, 388, 390, 392, 393, 395, 396, 412, 413, 414, 419, 427, 428, 429, 431, 435, 436, 439, 448, 450, 453, 454, 456, 459, 460, 461, 462, 463], "neural": [13, 146, 158, 159, 169, 177, 178, 205, 206, 207, 210, 211, 214, 217, 220, 249, 250, 252, 254, 259, 266, 267, 269, 282, 287, 290, 293, 295, 296, 301, 307, 312, 319, 320, 321, 325, 332, 354, 361, 362, 368, 383, 388, 391, 396, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 426, 427, 429, 430, 432, 433, 436, 438, 439, 441, 443, 445, 446, 447, 450, 451, 454, 456, 458, 460, 461, 462, 463, 465, 466], "compressor": [13, 158, 159, 169, 177, 178, 205, 206, 207, 210, 211, 214, 217, 220, 249, 250, 252, 254, 259, 266, 267, 269, 290, 293, 295, 296, 301, 307, 312, 319, 320, 321, 325, 332, 354, 362, 368, 383, 388, 391, 393, 396, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 426, 427, 429, 430, 431, 432, 436, 438, 439, 441, 443, 445, 446, 447, 450, 451, 453, 454, 456, 458, 460, 461, 462, 463, 464, 465, 466], "tupl": [13, 101, 144, 152, 178, 181, 182, 206, 210, 225, 226, 249, 252, 257, 308, 321, 354, 369, 375, 413, 427, 428, 456, 462], "symnet": 13, "arg": [13, 49, 101, 193, 194, 195, 237, 238, 239, 290, 299, 358, 373, 381, 382, 412, 413, 417, 428, 437, 456, 460, 461, 462], "aux": 13, "data": [13, 39, 40, 51, 101, 136, 144, 146, 150, 152, 156, 167, 177, 178, 181, 182, 211, 213, 225, 226, 259, 299, 309, 311, 312, 321, 347, 352, 354, 358, 370, 372, 375, 378, 383, 386, 395, 396, 412, 413, 417, 421, 422, 425, 427, 428, 429, 456, 457, 458, 459, 460, 461, 462, 463], "descript": [13, 128, 373, 391, 392, 460], "ncmodel": 13, "fuse": [13, 54, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 87, 88, 89, 90, 92, 127, 132, 151, 152, 156, 392, 460, 461], "suppli": 13, "get_framework_nam": 13, "get": [13, 39, 41, 63, 64, 66, 100, 101, 144, 150, 152, 158, 163, 165, 167, 169, 170, 171, 172, 175, 178, 186, 210, 211, 217, 219, 230, 252, 290, 292, 294, 302, 309, 311, 320, 329, 354, 363, 370, 372, 378, 386, 420, 424, 425, 428, 434, 460, 463, 464, 467], "name": [13, 40, 41, 49, 63, 64, 66, 100, 101, 106, 112, 136, 144, 145, 146, 150, 151, 152, 153, 158, 163, 167, 169, 170, 171, 172, 175, 177, 178, 193, 194, 195, 198, 202, 208, 210, 211, 215, 218, 219, 237, 238, 239, 242, 246, 252, 255, 256, 257, 262, 267, 285, 290, 292, 294, 309, 311, 315, 320, 325, 329, 331, 354, 370, 372, 376, 378, 386, 392, 413, 417, 419, 421, 426, 427, 428, 430, 434, 441, 445, 449, 452, 453, 456, 458, 459, 461, 463, 465, 466], "context": [13, 386, 455], "prepare_model_data": 13, "nc_model": [13, 282, 287], "data_x": 13, "prepar": [13, 152, 392, 395, 413, 417, 422, 456], "dataload": [13, 15, 39, 136, 137, 146, 150, 152, 158, 165, 167, 181, 182, 193, 204, 214, 225, 226, 237, 248, 253, 259, 282, 287, 296, 312, 347, 352, 354, 375, 378, 392, 395, 396, 415, 416, 417, 422, 423, 427, 428, 429, 451, 456, 457, 460, 461, 462, 465], "need": [13, 39, 101, 105, 150, 158, 167, 178, 181, 182, 183, 191, 192, 195, 202, 210, 213, 215, 216, 225, 226, 227, 235, 236, 239, 246, 252, 296, 302, 320, 321, 331, 354, 363, 375, 385, 386, 392, 396, 412, 413, 415, 417, 424, 428, 429, 431, 433, 434, 437, 441, 442, 443, 445, 446, 448, 449, 453, 455, 456, 457, 458, 460, 462, 463, 465], "run": [13, 136, 144, 158, 170, 173, 177, 178, 181, 182, 192, 209, 211, 225, 226, 236, 251, 291, 292, 299, 321, 354, 358, 375, 391, 396, 411, 417, 420, 421, 428, 429, 431, 433, 435, 436, 437, 439, 441, 442, 443, 445, 446, 448, 454, 456, 458, 459, 461, 463, 465], "loader": [13, 136, 181, 182, 225, 226, 321, 354, 375, 381, 456], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "creat": [13, 16, 101, 177, 178, 183, 193, 195, 213, 227, 237, 239, 263, 273, 274, 309, 316, 348, 353, 370, 373, 378, 390, 393, 396, 413, 430, 441, 443, 445, 446, 449, 456, 459, 461, 463], "exampl": [13, 146, 152, 158, 167, 168, 177, 178, 193, 194, 195, 206, 210, 237, 238, 239, 249, 252, 263, 264, 265, 267, 293, 316, 317, 318, 320, 321, 331, 354, 373, 375, 390, 391, 395, 401, 423, 424, 431, 434, 435, 436, 439, 457, 458, 462, 463, 464, 467], "prepare_dataload": 13, "io": 13, "ndarray_to_devic": 13, "ndarrai": [13, 39, 63, 64, 66, 210, 252, 376, 420, 462], "devic": [13, 75, 85, 86, 87, 88, 89, 90, 93, 103, 127, 132, 143, 167, 168, 177, 178, 415, 428, 429, 431, 434, 439, 448, 455], "is_model_quant": 13, "query_quantizable_nod": 13, "node": [13, 39, 40, 46, 49, 50, 51, 52, 56, 58, 60, 63, 64, 66, 70, 73, 76, 78, 79, 80, 94, 98, 99, 101, 106, 128, 136, 144, 167, 255, 329, 353, 396, 417, 461, 463], "given": [13, 16, 63, 64, 66, 100, 101, 112, 144, 152, 210, 252, 263, 316, 354, 393, 453, 460, 462], "map": [13, 40, 101, 144, 178, 210, 252, 255, 258, 262, 264, 265, 267, 282, 287, 292, 295, 315, 317, 318, 320, 413, 417, 427, 428, 441, 445, 453, 456], "quantize_sym_model": 13, "qconfig": [13, 461], "accord": [13, 118, 152, 158, 177, 178, 193, 194, 195, 210, 237, 238, 239, 252, 302, 361, 363, 378, 393, 396, 413, 417, 453, 457, 460, 462, 463], "run_forward": 13, "b_filter": 13, "collector": [13, 146, 376], "pre_batch": 13, "post_batch": 13, "forward": [13, 395, 428, 453, 455, 456, 460, 461], "propag": [13, 96], "filter": [13, 193, 194, 195, 196, 197, 198, 200, 204, 237, 238, 239, 240, 241, 242, 244, 248, 259, 312, 386, 412, 413, 424, 453, 461], "which": [13, 39, 51, 79, 106, 146, 150, 163, 167, 168, 169, 170, 172, 173, 177, 178, 193, 194, 195, 206, 211, 237, 238, 239, 249, 260, 265, 274, 276, 277, 279, 280, 281, 285, 290, 291, 292, 294, 299, 313, 318, 320, 325, 331, 354, 358, 386, 390, 392, 393, 396, 412, 413, 415, 417, 420, 421, 424, 427, 428, 429, 430, 432, 436, 439, 442, 448, 449, 451, 453, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465], "batch": [13, 152, 183, 185, 186, 191, 192, 213, 227, 229, 230, 235, 236, 375, 412, 415, 416, 428, 451, 453, 462, 463, 466], "infer": [13, 101, 167, 258, 295, 329, 331, 354, 375, 396, 415, 416, 428, 429, 448, 450, 453, 454, 456, 460, 461, 463], "collect": [13, 16, 40, 208, 210, 213, 215, 216, 218, 252, 265, 267, 318, 320, 376, 386, 456, 461, 463], "inform": [13, 146, 163, 167, 169, 170, 171, 172, 173, 178, 181, 182, 213, 215, 216, 225, 226, 290, 292, 293, 294, 296, 320, 386, 390, 391, 394, 395, 396, 397, 399, 403, 406, 409, 415, 421, 428, 430, 443, 446, 449, 453, 457, 458, 461, 465, 466, 467], "dure": [13, 136, 169, 172, 177, 178, 290, 294, 331, 386, 428, 429, 430, 450, 451, 453, 456, 460, 461, 465], "call": [13, 39, 150, 153, 167, 170, 263, 292, 316, 392, 393, 396, 412, 423, 437, 439, 449, 456, 460, 461, 462], "prior": [13, 84, 463], "after": [13, 74, 152, 165, 169, 170, 177, 178, 193, 206, 210, 213, 237, 249, 252, 292, 359, 373, 393, 412, 413, 415, 416, 419, 424, 427, 428, 441, 442, 445, 449, 450, 451, 453, 456, 457, 459, 460, 461, 462, 463], "count": [13, 393, 413], "int": [13, 16, 39, 40, 101, 136, 144, 149, 152, 165, 177, 178, 192, 193, 194, 206, 210, 236, 237, 238, 249, 252, 256, 257, 261, 263, 267, 274, 314, 316, 320, 339, 348, 353, 373, 386, 413, 427, 428, 455, 462], "make_symbol_block": 13, "gluon": [13, 321, 354, 430], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "tune_cfg": [13, 144, 145, 152, 396, 463], "quantizable_nod": 13, "strategi": [13, 152, 170, 177, 178, 179, 195, 223, 239, 259, 312, 395, 396, 401, 417, 424, 428, 436, 448, 454, 455, 456, 457, 458, 464, 465], "config": [13, 111, 112, 114, 118, 152, 158, 163, 165, 169, 170, 171, 172, 173, 177, 181, 182, 193, 222, 225, 226, 237, 276, 277, 279, 280, 281, 282, 287, 290, 291, 292, 293, 294, 309, 310, 312, 321, 348, 353, 370, 371, 373, 375, 378, 385, 386, 393, 395, 401, 411, 415, 416, 417, 419, 422, 424, 428, 429, 430, 451, 453, 455, 456, 457, 459, 461, 463], "tune": [13, 41, 158, 177, 178, 181, 182, 193, 195, 225, 226, 237, 239, 258, 295, 297, 298, 299, 300, 302, 303, 304, 305, 308, 309, 310, 311, 321, 331, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 369, 370, 371, 372, 375, 386, 396, 412, 413, 417, 424, 426, 428, 429, 448, 450, 453, 454, 457, 458, 459, 461, 465], "from": [13, 40, 41, 57, 63, 64, 66, 101, 144, 150, 152, 158, 159, 160, 163, 169, 170, 171, 172, 173, 177, 178, 181, 182, 183, 186, 190, 193, 194, 195, 196, 197, 198, 200, 205, 206, 212, 213, 216, 225, 226, 227, 230, 234, 237, 238, 239, 240, 241, 242, 244, 249, 253, 255, 256, 257, 260, 263, 264, 265, 269, 274, 290, 291, 292, 294, 309, 311, 313, 316, 317, 318, 321, 329, 331, 354, 370, 372, 373, 375, 378, 385, 386, 390, 392, 393, 396, 411, 412, 413, 415, 416, 417, 418, 419, 420, 422, 424, 427, 429, 430, 431, 435, 436, 437, 439, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464], "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 16, 139, 157, 177, 178, 183, 185, 186, 189, 191, 213, 227, 229, 230, 233, 235, 380, 395, 415, 425, 443, 446, 454, 456, 458, 460, 464, 466], "depend": [13, 181, 182, 211, 225, 226, 321, 354, 375, 391, 420, 421, 455, 456, 463], "algorithm": [13, 152, 174, 260, 267, 275, 312, 313, 320, 378, 380, 393, 396, 415, 416, 421, 424, 437, 442, 453, 456, 461, 465], "set": [13, 40, 53, 92, 101, 111, 144, 150, 152, 158, 173, 175, 177, 178, 181, 182, 183, 193, 195, 198, 210, 211, 216, 217, 225, 226, 227, 237, 239, 242, 252, 263, 269, 282, 287, 291, 296, 316, 320, 321, 329, 353, 354, 373, 375, 383, 386, 390, 393, 411, 413, 415, 417, 419, 421, 423, 424, 425, 427, 428, 429, 431, 433, 435, 449, 453, 455, 456, 459, 460, 463, 465], "kl": [13, 16, 177, 178, 376, 380, 421, 428, 463, 465], "minmax": [13, 16, 421, 456, 465], "calib_model": 13, "qsym_model": 13, "calib_data": 13, "calibdata": 13, "threshold": [13, 154, 376, 380, 427], "amp_convert": 13, "amp_cfg": 13, "support": [13, 39, 40, 93, 100, 150, 156, 160, 169, 170, 177, 178, 181, 182, 192, 193, 195, 202, 206, 210, 212, 213, 214, 217, 222, 225, 226, 236, 237, 239, 246, 249, 252, 259, 267, 269, 274, 290, 292, 296, 303, 309, 312, 320, 321, 325, 331, 354, 364, 370, 373, 375, 378, 380, 386, 388, 395, 428, 431, 436, 439, 442, 448, 454, 457, 459, 463, 464], "amp": [13, 431, 438, 452], "wrap": [13, 101, 112, 160, 212, 263, 316, 392, 417, 443, 446], "dataiterload": 13, "data_it": [13, 167], "collectorbas": 13, "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 16, 376], "8001": [13, 376], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 39, 111, 153, 154, 156, 157, 270, 273, 324, 326, 328, 329, 330, 396, 425, 430, 441, 443, 445, 446, 449, 454, 459, 463], "up": [13, 96, 210, 252, 291, 417, 418, 421, 424, 439, 443, 446, 448, 454, 455, 456, 459, 462, 463, 465], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "onnxruntimeadaptor": 14, "rt": 14, "onnxrt_qlinearopsadaptor": [14, 396], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": [15, 136], "white_nod": 15, "cpuexecutionprovid": [15, 38, 39, 456], "reduce_rang": [15, 38, 39, 177, 178, 455], "augment": 15, "dump": [15, 158, 257, 386, 456, 461], "calib_registri": 16, "calib_method": 16, "calibratorbas": 16, "minmaxcalibr": 16, "percentilecalibr": 16, "2048": [16, 386], "percentil": [16, 136], "99": [16, 460, 466], "999": [16, 465, 466], "option": [16, 101, 169, 177, 178, 181, 182, 193, 210, 225, 226, 237, 252, 256, 257, 263, 269, 290, 296, 309, 312, 316, 320, 321, 354, 370, 373, 375, 379, 386, 413, 421, 425, 428, 442, 453, 456, 459, 462, 463, 465], "number": [16, 63, 64, 101, 136, 152, 165, 169, 177, 178, 191, 194, 206, 210, 235, 238, 249, 252, 264, 265, 267, 290, 299, 317, 318, 320, 348, 353, 358, 373, 378, 386, 411, 413, 417, 427, 453, 456, 459, 462, 463], "bin": [16, 386, 420], "histogram": [16, 376, 386, 461], "valu": [16, 40, 51, 63, 64, 66, 85, 86, 101, 139, 144, 152, 157, 158, 163, 167, 168, 173, 175, 177, 178, 181, 182, 193, 196, 197, 206, 210, 211, 225, 226, 237, 240, 241, 249, 252, 263, 267, 291, 299, 302, 309, 316, 320, 321, 354, 358, 363, 370, 373, 375, 376, 378, 386, 392, 413, 421, 427, 428, 434, 450, 453, 455, 456, 460, 462, 463, 465], "default": [16, 93, 144, 173, 175, 177, 178, 181, 182, 185, 193, 194, 195, 206, 210, 225, 226, 229, 237, 238, 239, 249, 252, 256, 257, 260, 269, 291, 311, 313, 320, 329, 372, 378, 386, 392, 396, 413, 421, 424, 425, 427, 428, 429, 436, 439, 441, 445, 450, 453, 455, 456, 457, 459, 460, 462, 463, 465], "float": [16, 40, 136, 137, 146, 169, 170, 171, 173, 177, 178, 193, 206, 237, 249, 261, 263, 264, 265, 292, 314, 316, 317, 318, 373, 383, 386, 413, 427, 455, 456, 460, 462], "A": [16, 50, 70, 71, 99, 112, 136, 137, 144, 152, 159, 163, 167, 169, 170, 171, 172, 173, 177, 178, 195, 210, 213, 215, 216, 222, 239, 252, 253, 260, 263, 264, 265, 267, 270, 273, 274, 275, 282, 285, 287, 290, 291, 292, 293, 294, 299, 313, 316, 317, 318, 320, 321, 325, 329, 358, 375, 386, 413, 418, 421, 427, 428, 430, 441, 442, 445, 448, 453, 454, 456, 460, 462, 463, 465], "between": [16, 39, 139, 157, 170, 177, 178, 210, 252, 264, 267, 317, 320, 348, 353, 386, 392, 396, 415, 424, 427, 428, 439, 456, 458, 459, 460, 462, 463], "0": [16, 40, 49, 86, 101, 144, 152, 154, 156, 160, 165, 177, 178, 183, 185, 189, 193, 196, 197, 200, 206, 210, 212, 213, 227, 229, 233, 237, 240, 241, 244, 249, 252, 257, 258, 267, 274, 282, 287, 295, 320, 331, 354, 359, 373, 392, 413, 415, 417, 419, 420, 421, 425, 426, 427, 428, 429, 434, 436, 441, 445, 452, 453, 455, 456, 458, 459, 460, 461, 462, 463, 465], "100": [16, 158, 177, 178, 195, 239, 373, 411, 413, 417, 423, 428, 455, 456, 460, 462, 463, 465, 466], "klcalibr": 16, "128": [16, 193, 196, 197, 210, 237, 240, 241, 252, 413, 428, 456, 462], "num_quantized_bin": 16, "histogramcollector": 16, "collctor": 16, "smooth_distribut": 16, "p": [16, 449], "ep": [16, 157, 429], "0001": [16, 177, 178, 415, 428, 455], "smooth": [16, 136, 137, 144, 150, 156, 177, 178, 308, 453], "discret": [16, 463], "mai": [16, 144, 276, 277, 279, 280, 281, 373, 390, 391, 395, 412, 419, 420, 426, 429, 441, 445, 452, 454, 456, 463], "have": [16, 70, 79, 137, 144, 168, 169, 170, 191, 213, 235, 260, 263, 290, 292, 313, 316, 320, 354, 372, 373, 390, 391, 412, 413, 417, 421, 426, 427, 428, 429, 431, 448, 450, 453, 456, 460, 463], "been": [16, 169, 170, 260, 290, 292, 313, 391, 393, 415, 428, 429, 448, 460], "normal": [16, 210, 252, 265, 318, 428, 450, 460, 462], "1": [16, 39, 40, 50, 70, 85, 101, 105, 109, 142, 144, 150, 152, 154, 156, 157, 158, 160, 170, 177, 178, 183, 185, 189, 192, 193, 194, 196, 197, 200, 201, 206, 210, 211, 212, 213, 227, 229, 233, 236, 237, 238, 240, 241, 244, 245, 249, 252, 258, 263, 264, 265, 267, 282, 287, 292, 295, 296, 316, 317, 318, 320, 331, 354, 373, 378, 390, 392, 395, 396, 412, 413, 415, 419, 421, 422, 425, 427, 429, 432, 434, 450, 451, 452, 453, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465], "replac": [16, 150, 265, 318, 417, 428, 439, 458], "zero": [16, 40, 170, 173, 210, 252, 292, 386, 395, 453, 456, 460, 462, 463], "multipli": 16, "scale": [16, 40, 96, 137, 139, 150, 152, 156, 157, 206, 210, 249, 252, 456, 459, 460, 462, 463], "factor": [16, 137, 452, 460, 466], "take": [16, 169, 178, 181, 182, 186, 210, 215, 225, 226, 230, 252, 290, 299, 320, 321, 354, 358, 375, 390, 392, 393, 412, 415, 421, 428, 448, 453, 456, 457, 462, 463, 465], "correspond": [16, 146, 167, 170, 177, 178, 193, 237, 260, 263, 267, 313, 316, 320, 378, 386, 396, 421, 428, 453, 455, 456, 459, 460, 463], "amount": 16, "off": [16, 63, 64, 66, 391], "non": [16, 291, 386, 392, 452, 463], "ref": [16, 144], "http": [16, 146, 163, 169, 170, 193, 195, 237, 239, 260, 261, 263, 264, 265, 290, 292, 293, 313, 314, 316, 317, 318, 320, 354, 392, 395, 413, 422, 425, 426, 428, 437, 443, 446, 458], "hanj": 16, "c": [16, 70, 195, 239, 413, 420, 425, 463], "illinoi": 16, "edu": [16, 195, 239, 413], "cs412": 16, "bk3": 16, "diverg": [16, 376, 380, 415, 463], "pdf": 16, "github": [16, 146, 169, 193, 237, 260, 261, 264, 265, 290, 293, 313, 314, 317, 318, 320, 354, 391, 413, 418, 425, 426, 428, 437, 443, 446, 458], "com": [16, 146, 169, 193, 237, 260, 261, 264, 265, 290, 293, 313, 314, 317, 318, 320, 354, 390, 395, 413, 422, 425, 426, 428, 431, 437, 458, 459, 466], "apach": [16, 426], "incub": 16, "blob": [16, 146, 169, 260, 261, 264, 265, 290, 313, 314, 317, 318, 320, 354, 428, 437], "master": [16, 169, 260, 261, 264, 265, 290, 293, 313, 314, 317, 318, 320, 354, 428, 463], "python": [16, 71, 144, 195, 214, 239, 259, 312, 373, 386, 388, 391, 392, 413, 417, 420, 425, 428, 433, 439, 442, 448, 454, 462], "contrib": [16, 259, 312], "py": [16, 144, 146, 158, 170, 177, 178, 261, 263, 264, 265, 292, 314, 316, 317, 318, 373, 392, 396, 417, 425, 428, 433, 435, 436, 437, 443, 446, 456, 458, 461], "microsoft": [16, 396], "onnxruntim": [16, 177, 178, 189, 195, 202, 233, 239, 246, 268, 348, 396, 424, 425, 429, 455], "main": [16, 217, 293, 392, 417, 428, 435, 437, 449, 453, 456], "tool": [16, 144, 256, 386, 395, 396, 428, 441, 445, 453, 454, 456], "arrai": [16, 40, 144, 210, 252, 263, 274, 316, 386, 462], "small": [16, 63, 64, 65, 361, 393, 453, 463], "probabl": [16, 177, 178, 380], "activationoper": 18, "onnx_quant": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37], "onnx_nod": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 83, 97, 107], "removableactivationoper": 18, "remov": [18, 40, 52, 53, 56, 70, 76, 79, 80, 81, 92, 94, 136, 165, 170, 265, 318, 390, 391, 428, 441, 445, 453, 461], "qactivationoper": 18, "children": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37], "initi": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 39, 40, 101, 112, 144, 160, 170, 181, 182, 190, 193, 212, 225, 226, 234, 237, 291, 292, 309, 354, 370, 375, 393, 412, 413, 427, 447, 453, 456, 460, 463], "qoper": [18, 33, 177, 178], "format": [18, 40, 49, 144, 177, 178, 193, 194, 195, 237, 238, 239, 257, 263, 269, 309, 316, 370, 373, 413, 417, 419, 427, 428, 429, 430, 431, 456], "argmaxoper": 19, "qargmaxoper": 19, "attentionoper": 20, "qattentionoper": 20, "qattent": 20, "binari": [21, 144, 267, 320, 420, 427, 443, 446], "binaryoper": 21, "qbinaryoper": 21, "qbinari": 21, "concatoper": 22, "qconcatoper": 22, "qconcat": 22, "convoper": 23, "qconvoper": 23, "qlinearconv": 23, "direct8bit": 24, "direct8bitoper": 24, "qdirectoper": 24, "qdirect": 24, "embedlayernorm": 25, "embedlayernormalizationoper": 25, "qembedlayernormalizationoper": 25, "qembedlayernorm": 25, "gatheroper": 26, "qgatheroper": 26, "qgather": 26, "globalaveragepool": 27, "globalaveragepooloper": 27, "qglobalaveragepooloper": 27, "qlinearglobalaveragepool": 27, "gemmoper": 28, "qgemmoper": 28, "qgemm": 28, "lstmoper": 30, "matmuloper": 31, "qmatmuloper": 31, "qlinearmatmul": 31, "maxpooloper": 32, "qmaxpooloper": 32, "qmaxpool": 32, "op_registri": 33, "op_typ": [33, 136, 144, 310, 371], "qop_registri": 33, "padoper": 34, "qpadoper": 34, "qpad": 34, "averagepool": 35, "pooloper": 35, "qpooloper": 35, "qlinearaveragepool": 35, "resizeoper": 36, "qresizeoper": 36, "qresiz": 36, "splitoper": 37, "qsplitoper": 37, "qsplit": 37, "q_config": [38, 257, 396], "mode": [38, 39, 40, 41, 106, 150, 202, 246, 263, 309, 316, 329, 370, 383, 386, 396, 424, 441, 445, 456, 457, 463], "static": [38, 39, 43, 150, 156, 167, 178, 309, 354, 370, 396, 419, 424, 428, 431, 436, 437, 438, 439, 442, 448, 460, 463, 466], "quantization_param": 38, "op_types_to_quant": 38, "fallback_list": 38, "fp32": [38, 39, 75, 127, 132, 139, 152, 157, 177, 178, 181, 182, 225, 226, 256, 257, 267, 302, 309, 320, 359, 363, 370, 378, 385, 386, 395, 396, 421, 422, 427, 428, 429, 438, 455, 456, 457, 458, 459, 460, 461, 463, 465, 466], "add_qdq_pair_to_weight": [38, 177, 178, 456], "optypes_to_exclude_output_qu": [38, 177, 178, 456], "dedicated_qdq_pair": [38, 177, 178, 456], "smoothquant": [39, 150, 152, 156, 395, 454, 464], "onnxrt": [39, 40, 193, 195, 202, 210, 237, 239, 246, 252, 267, 320, 347, 384, 396, 429, 456], "get_quant_dequant_output": 39, "input_data": [39, 412], "output_data": 39, "loss": [39, 160, 177, 178, 212, 258, 267, 282, 287, 295, 320, 375, 415, 416, 417, 418, 427, 428, 429, 439, 451, 453, 456, 460, 463, 465], "output": [39, 40, 49, 53, 55, 70, 94, 101, 106, 144, 152, 167, 168, 169, 175, 177, 178, 181, 182, 215, 219, 225, 226, 256, 257, 260, 290, 313, 320, 321, 329, 354, 375, 381, 382, 386, 392, 396, 415, 416, 417, 419, 421, 423, 427, 428, 430, 439, 448, 449, 451, 453, 455, 456, 460, 461, 462, 463, 465], "numpi": [39, 40, 63, 64, 66, 101, 144, 210, 252, 263, 274, 316, 420, 462], "7": [39, 158, 177, 178, 331, 411, 420, 421, 425, 428, 453, 456, 458, 460, 463, 466], "bit": [39, 177, 178, 416, 429, 454, 456, 460], "execut": [39, 40, 49, 158, 170, 177, 178, 292, 296, 298, 353, 354, 355, 357, 375, 378, 385, 386, 415, 416, 428, 429, 433, 434, 441, 442, 445, 448, 449, 451, 453, 456, 459, 463, 466], "provid": [39, 40, 98, 101, 106, 167, 181, 182, 210, 225, 226, 252, 258, 263, 282, 287, 295, 296, 316, 321, 354, 375, 379, 381, 393, 395, 396, 411, 412, 416, 417, 418, 424, 425, 428, 429, 430, 431, 435, 439, 442, 448, 449, 453, 455, 456, 461, 463, 464, 465, 466], "make_sub_graph": 39, "opset": [39, 98, 100, 101, 178, 256, 257, 419], "ir_vers": 39, "thi": [39, 41, 82, 106, 128, 135, 139, 143, 146, 152, 157, 159, 165, 167, 169, 170, 171, 172, 177, 178, 181, 182, 192, 193, 194, 195, 196, 197, 198, 200, 210, 213, 219, 220, 225, 226, 236, 237, 238, 239, 240, 241, 242, 244, 252, 260, 263, 264, 265, 267, 276, 277, 279, 280, 281, 282, 287, 290, 292, 294, 295, 296, 299, 302, 313, 316, 317, 318, 320, 321, 331, 354, 358, 363, 373, 375, 385, 386, 390, 391, 392, 393, 396, 412, 413, 415, 416, 417, 419, 420, 421, 424, 426, 427, 428, 429, 430, 431, 433, 434, 436, 437, 439, 441, 443, 445, 446, 447, 448, 449, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464], "quant_dequant_data": 39, "qtype": [39, 40, 396], "3": [39, 144, 170, 178, 195, 210, 239, 252, 263, 316, 373, 392, 393, 395, 412, 413, 415, 417, 419, 421, 422, 425, 427, 428, 429, 431, 435, 439, 441, 445, 450, 455, 456, 459, 460, 462, 463, 466], "scheme": [39, 40, 152, 396, 412, 421, 439, 463, 465], "sym": [39, 40, 421, 456, 465], "dequant": [39, 40, 53, 84, 87, 88, 89, 90, 92, 146, 152, 386, 392, 460, 461], "asym": [39, 40, 421, 465], "ortsmoothqu": 39, "fake": [39, 109, 150, 156, 372, 428, 456, 460], "channel": [39, 40, 139, 150, 156, 157, 165, 168, 169, 177, 178, 206, 210, 249, 252, 290, 396, 424, 425, 431, 433, 438, 453, 462, 466], "For": [39, 156, 167, 168, 169, 178, 195, 210, 239, 252, 264, 265, 267, 290, 293, 317, 318, 320, 321, 354, 390, 392, 394, 396, 415, 416, 417, 419, 421, 424, 431, 433, 434, 436, 439, 453, 457, 460, 461, 463, 465, 466], "more": [39, 144, 150, 156, 169, 210, 252, 290, 393, 394, 395, 413, 415, 417, 419, 422, 424, 425, 427, 428, 429, 431, 439, 443, 446, 450, 451, 453, 457, 460, 463, 464, 466], "detail": [39, 150, 156, 167, 210, 252, 386, 387, 390, 391, 395, 415, 421, 422, 423, 427, 428, 429, 431, 439, 448, 453, 458, 459, 461, 463, 464, 466], "pleas": [39, 146, 150, 156, 163, 169, 170, 177, 178, 193, 194, 195, 198, 237, 238, 239, 242, 290, 292, 293, 320, 354, 373, 392, 393, 394, 395, 396, 411, 413, 416, 417, 419, 425, 427, 429, 431, 432, 436, 439, 453, 456, 457, 458, 459, 460, 464], "refer": [39, 146, 150, 156, 163, 169, 170, 173, 177, 178, 193, 237, 260, 261, 267, 290, 292, 293, 313, 314, 320, 354, 373, 392, 396, 411, 412, 413, 416, 417, 419, 423, 425, 426, 427, 428, 429, 431, 436, 439, 450, 455, 458, 462, 463], "accur": [39, 150, 156, 460], "effici": [39, 150, 156, 393, 412, 415, 431, 451, 454, 460, 463], "post": [39, 93, 94, 150, 156, 170, 178, 181, 182, 225, 226, 354, 390, 395, 396, 416, 417, 419, 424, 425, 431, 437, 448, 453, 454, 460, 461, 463], "train": [39, 52, 76, 150, 156, 159, 170, 177, 178, 181, 182, 193, 195, 210, 220, 225, 226, 237, 239, 252, 253, 269, 292, 312, 354, 378, 393, 395, 396, 401, 413, 415, 416, 419, 424, 429, 431, 437, 448, 451, 453, 454, 459, 460, 463, 465], "larg": [39, 150, 156, 395, 412, 415, 428, 453, 454, 460, 466], "languag": [39, 150, 156, 260, 313, 390, 395, 419, 453, 454, 460], "2": [39, 40, 49, 70, 101, 105, 150, 154, 156, 158, 169, 170, 177, 178, 194, 211, 238, 263, 265, 267, 292, 299, 316, 318, 320, 331, 358, 373, 392, 396, 413, 415, 419, 421, 422, 424, 425, 426, 427, 429, 450, 452, 453, 456, 458, 459, 460, 462, 463, 464], "spiq": [39, 150, 156, 460], "free": [39, 150, 156, 170, 181, 182, 225, 226, 354, 390, 395, 427, 437, 442, 450, 459, 460], "per": [39, 40, 150, 156, 158, 177, 178, 211, 380, 396, 452, 457, 466], "we": [39, 40, 63, 64, 66, 70, 82, 139, 150, 156, 157, 158, 167, 170, 177, 178, 192, 211, 213, 236, 260, 263, 313, 316, 361, 390, 392, 396, 412, 417, 419, 421, 427, 428, 435, 436, 439, 443, 446, 448, 449, 450, 451, 453, 455, 456, 459, 460, 461, 463, 464], "onli": [39, 49, 59, 66, 82, 105, 111, 139, 150, 156, 157, 158, 169, 170, 177, 178, 193, 211, 213, 217, 237, 269, 290, 292, 303, 354, 364, 373, 386, 395, 396, 411, 412, 415, 417, 420, 421, 428, 429, 436, 449, 453, 454, 455, 456, 460, 461, 463, 465], "inplac": [39, 150], "mean": [39, 150, 169, 170, 177, 178, 206, 210, 249, 252, 265, 267, 290, 302, 318, 320, 363, 392, 412, 417, 421, 427, 428, 434, 453, 456, 460, 462, 463, 465], "weight": [39, 40, 56, 57, 118, 137, 139, 144, 146, 150, 157, 163, 168, 169, 170, 171, 177, 178, 290, 292, 309, 320, 354, 361, 370, 386, 387, 396, 416, 421, 423, 427, 428, 450, 453, 455, 456, 460, 461, 463, 465], "chang": [39, 92, 139, 150, 157, 170, 172, 177, 178, 292, 294, 361, 386, 391, 412, 417, 420, 426, 427, 428, 431, 441, 442, 445, 448, 453, 461, 462, 463], "you": [39, 150, 177, 178, 191, 193, 235, 237, 292, 320, 354, 391, 392, 413, 417, 425, 426, 427, 431, 433, 434, 436, 441, 445, 448, 449, 453, 456, 458, 459, 460, 461, 464], "can": [39, 139, 146, 150, 157, 167, 168, 169, 170, 172, 177, 178, 181, 182, 192, 195, 210, 211, 213, 225, 226, 236, 239, 252, 263, 265, 267, 290, 292, 294, 316, 318, 320, 321, 331, 354, 375, 386, 392, 393, 395, 396, 411, 412, 413, 415, 416, 417, 419, 421, 424, 425, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 439, 441, 442, 443, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 457, 459, 460, 461, 462, 463, 465, 466], "recov": [39, 150, 386, 396, 416, 460], "helper": [40, 41, 106, 112, 144, 152, 193, 194, 195, 209, 237, 238, 239, 251, 255, 256, 257, 329, 384], "dtype_to_nam": 40, "dtype_map": 40, "dtype": [40, 98, 101, 177, 178, 196, 197, 206, 210, 240, 241, 249, 252, 413, 419, 421, 431, 455, 456, 460, 461, 462, 465], "its": [40, 56, 92, 144, 146, 167, 170, 178, 189, 195, 210, 233, 239, 252, 255, 261, 262, 292, 299, 314, 315, 358, 390, 413, 415, 426, 427, 429, 439, 441, 445, 448, 449, 452, 453, 459, 462, 463], "string": [40, 41, 112, 144, 158, 160, 167, 169, 170, 171, 172, 173, 174, 177, 178, 195, 212, 217, 239, 253, 258, 260, 263, 269, 270, 271, 273, 274, 282, 287, 290, 291, 292, 293, 294, 295, 313, 316, 325, 329, 378, 383, 386, 427, 460, 462], "represent": [40, 390, 392, 416, 453, 456], "quanttyp": 40, "repres": [40, 169, 170, 171, 173, 195, 200, 239, 244, 263, 265, 267, 316, 318, 320, 390, 413, 419, 453, 456, 463], "make_quant_nod": 40, "make": [40, 101, 139, 157, 169, 170, 172, 191, 235, 290, 292, 294, 386, 390, 391, 396, 411, 412, 421, 427, 428, 436, 441, 445, 448, 456, 457, 459, 460, 463], "quantizelinear": 40, "make_dquant_nod": 40, "axi": [40, 178], "dequantizelinear": 40, "is_b_transpos": 40, "wheter": 40, "inuput": 40, "b": [40, 70, 193, 237, 413, 427, 453, 460, 463], "transpos": [40, 69, 169, 210, 252, 256, 290, 462], "split_shared_bia": 40, "share": [40, 78, 94, 105, 137, 420, 421, 460, 463], "float_to_float16": 40, "float16": [40, 413], "float_to_bfloat16": 40, "bfloat16": [40, 429, 431, 439, 457], "cast_tensor": 40, "tensorproto": [40, 101], "remove_init_from_model_input": 40, "collate_pr": 40, "result": [40, 144, 146, 152, 206, 210, 249, 252, 260, 263, 264, 265, 267, 313, 316, 317, 318, 320, 334, 354, 361, 375, 385, 386, 390, 393, 395, 412, 415, 417, 424, 426, 427, 428, 436, 437, 448, 449, 450, 453, 454, 456, 459, 460, 461, 462, 463, 464, 466], "quantize_data_with_scale_zero": 40, "zero_point": 40, "point": [40, 206, 249, 264, 265, 274, 299, 317, 318, 358, 427, 448, 456, 460, 462, 463], "To": [40, 263, 316, 331, 391, 413, 417, 429, 432, 435, 441, 443, 445, 446, 455, 457, 458, 460, 463, 465], "pack": [40, 57], "comput": [40, 101, 146, 152, 260, 261, 264, 265, 267, 313, 314, 317, 318, 320, 375, 386, 416, 419, 427, 428, 429, 431, 442, 453, 454, 456, 460, 463], "linear": [40, 156, 165, 167, 168, 169, 170, 173, 177, 178, 290, 392, 415, 419, 428, 453, 460, 463], "transform": [40, 46, 139, 141, 142, 143, 149, 170, 193, 194, 195, 196, 197, 198, 200, 202, 204, 237, 238, 239, 240, 241, 242, 244, 246, 248, 259, 312, 392, 393, 412, 413, 415, 416, 417, 418, 422, 428, 431, 436, 437, 438, 439, 453, 454, 457, 460, 461, 465, 466], "when": [40, 49, 60, 66, 144, 168, 170, 173, 177, 178, 193, 194, 202, 210, 237, 238, 246, 252, 261, 291, 292, 314, 354, 375, 390, 393, 412, 413, 428, 439, 441, 442, 445, 449, 453, 456, 460, 462, 463], "uint8": [40, 206, 249, 263, 311, 316, 372, 396, 413, 421, 455, 456, 462, 465], "rmin": [40, 456], "rmax": [40, 456], "m": [40, 146, 169, 177, 178, 290, 415, 425, 431, 433, 436, 439, 443, 446, 453, 466], "where": [40, 177, 178, 263, 267, 316, 320, 372, 386, 415, 441, 445, 449, 460, 461], "max": [40, 100, 139, 157, 177, 178, 210, 252, 264, 265, 299, 317, 318, 358, 386, 395, 425, 428, 453, 456, 460, 462, 463], "ab": [40, 163, 170, 292, 456, 460], "np": [40, 210, 252, 299, 358, 417, 462, 463], "calculate_scale_zp": 40, "quantize_rang": 40, "calcul": [40, 56, 152, 163, 173, 178, 196, 197, 240, 241, 264, 265, 290, 292, 302, 317, 318, 363, 376, 386, 413, 427, 428, 439, 450, 453, 456, 459, 460, 463, 465], "quantize_data": 40, "add": [40, 48, 60, 105, 115, 144, 173, 177, 178, 193, 195, 217, 237, 239, 291, 309, 370, 391, 392, 412, 413, 417, 419, 421, 427, 428, 429, 443, 446, 459, 461, 463], "necessari": [40, 390, 393, 430, 449, 453, 459, 463], "intermedi": [40, 146, 160, 177, 178, 212, 392, 424, 456], "trasnform": 40, "full": [40, 193, 194, 195, 237, 238, 239, 386, 395, 413, 420, 426, 449, 453], "equat": [40, 265, 267, 318, 320, 456, 460], "r": [40, 139, 157, 425, 449, 452, 456, 466], "": [40, 101, 139, 144, 157, 167, 168, 169, 170, 174, 175, 177, 178, 192, 195, 209, 210, 211, 213, 215, 222, 236, 239, 251, 252, 265, 290, 292, 318, 320, 321, 325, 354, 383, 386, 390, 393, 415, 417, 419, 421, 424, 428, 429, 436, 439, 441, 445, 448, 451, 452, 453, 454, 455, 456, 458, 459, 460, 463, 465], "q": [40, 103, 105, 127, 460], "z": [40, 415, 460], "real": [40, 196, 213, 240, 417, 454, 456], "origin": [40, 150, 152, 167, 170, 173, 178, 193, 210, 211, 237, 252, 276, 277, 279, 280, 281, 291, 292, 311, 359, 372, 386, 391, 413, 436, 453, 456, 462, 463, 465], "quantize_data_per_channel": 40, "dequantize_data_with_scale_zero": 40, "tensor_valu": 40, "scale_valu": 40, "zo_valu": 40, "sacal": 40, "dequantize_data": 40, "valueinfo": 40, "tensor_nam": [40, 144], "new_dtyp": 40, "cast": [40, 53, 457, 462], "info": [40, 152, 169, 173, 208, 213, 218, 290, 325, 382, 386, 392, 430], "quantizedvalu": 40, "new_quantized_nam": 40, "scale_nam": 40, "zero_point_nam": 40, "quantized_value_typ": 40, "quint8": 40, "linearli": 40, "intial": 40, "quantizediniti": 40, "quantized_data": 40, "quantizationmod": 40, "quantizedvaluetyp": 40, "quantformat": 40, "quantize_nparrai": 40, "arr": [40, 386], "low": [40, 181, 182, 196, 197, 225, 226, 240, 241, 258, 268, 295, 321, 396, 411, 413, 417, 428, 429, 454, 456, 460, 463], "high": [40, 196, 197, 240, 241, 413, 425, 454, 463], "attribute_to_kwarg": 40, "attribut": [40, 79, 100, 101, 144, 152, 167, 175, 178, 386, 396, 412, 421, 423, 428, 455, 465], "kwarg": [40, 101, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 131, 133, 165, 177, 178, 195, 208, 210, 215, 218, 239, 252, 308, 310, 320, 321, 322, 324, 326, 328, 329, 330, 354, 369, 371, 373, 375, 381, 382, 385, 386, 412], "make_nod": 40, "find_by_nam": 40, "item_list": 40, "find": [40, 63, 64, 66, 101, 144, 267, 274, 299, 320, 358, 386, 396, 434, 441, 445, 448, 449, 459, 461, 463], "item": [40, 173, 175, 177, 178, 209, 251, 291, 309, 370, 417, 453, 460, 463], "trt_env_setup": 40, "environ": [40, 158, 211, 390, 411, 441, 445, 448, 463], "variabl": [40, 158, 171, 177, 178, 195, 211, 239, 299, 358, 425, 453, 463], "tensorrt": [40, 456], "get_ops_recurs": 41, "prefix": [41, 144, 145, 151, 158, 431, 436, 461], "graph_info": 41, "templateadaptor": 41, "tampl": 41, "dictionari": [41, 63, 64, 66, 144, 145, 146, 152, 175, 177, 178, 209, 251, 263, 270, 273, 275, 316, 386], "yaml": [41, 173, 175, 178, 181, 182, 193, 195, 211, 225, 226, 237, 239, 253, 258, 269, 270, 271, 273, 282, 287, 295, 296, 385, 386, 396, 423, 427, 428, 450, 455, 461, 462], "file": [41, 101, 144, 152, 155, 173, 174, 177, 178, 181, 182, 193, 194, 195, 198, 209, 210, 216, 219, 225, 226, 237, 238, 239, 242, 251, 252, 253, 258, 263, 269, 270, 271, 273, 282, 287, 291, 293, 295, 296, 316, 321, 331, 337, 338, 342, 354, 385, 386, 393, 396, 417, 420, 423, 426, 427, 428, 430, 434, 443, 446, 447, 448, 449, 450, 455, 456, 461, 462], "pytorchadaptor": 41, "api": [41, 66, 71, 106, 221, 258, 263, 295, 308, 309, 316, 320, 354, 369, 370, 373, 386, 391, 392, 397, 399, 403, 406, 409, 419, 424, 428, 433, 437, 438, 439, 458, 459, 463, 467], "pytorch_ipexadaptor": 41, "intel": [41, 169, 214, 217, 254, 259, 266, 267, 290, 293, 301, 307, 312, 319, 320, 332, 354, 362, 368, 388, 390, 391, 393, 394, 396, 412, 413, 414, 415, 416, 418, 419, 421, 422, 426, 429, 430, 431, 436, 438, 439, 450, 451, 452, 453, 454, 456, 457, 458, 460, 461, 463, 464, 465], "extens": [41, 386, 393, 395, 396, 421, 424, 425, 428, 429, 430, 432, 437, 438, 439, 443, 446, 447, 453, 454, 456, 460, 463, 464, 465], "ipex": [41, 152, 177, 178, 424, 428, 433, 437, 438, 460, 466], "pytorch_fxadaptor": 41, "fx": [41, 152, 177, 303, 364, 424, 437, 438, 454, 456, 457, 466], "graph": [41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 110, 113, 126, 128, 132, 135, 138, 139, 141, 142, 143, 144, 167, 192, 236, 258, 322, 329, 353, 392, 396, 413, 415, 417, 423, 427, 430, 431, 456, 457, 461], "pytorchqueri": 41, "querybackendcap": [42, 396], "tensorflowadaptor": 43, "stock": [43, 437, 460], "spr": 43, "tensorflow_itexadaptor": 43, "itex": [43, 105, 177, 178, 256, 456], "tensorflowqueri": [43, 396], "performance_onli": [43, 44, 45, 103, 127, 132, 143, 177, 428], "itex_mod": [43, 44, 85, 103, 127, 132], "quant_mod": [43, 309, 370], "graphconvert": 44, "qt_config": 44, "recip": [44, 167, 177, 178, 258, 295, 428, 460, 463], "int8_sequ": 44, "fp32_op": [44, 46, 103], "bf16_op": [44, 46, 103, 457], "data_load": [44, 45, 396], "fake_qu": [44, 84, 103, 127, 132], "qdq_enabl": 44, "new_api": [44, 45, 67, 68, 73, 75, 88, 95, 127, 132, 139], "use_bf16": [44, 45, 177, 455], "without": [45, 86, 144, 170, 210, 252, 292, 311, 372, 390, 412, 415, 417, 427, 428, 439, 453, 454, 455, 463, 464], "graphconverterwithoutcalib": 45, "recover_config": 45, "rewrit": [46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 222], "bf16convert": [46, 457], "biasadd": [48, 55, 60, 62, 105, 421], "convertaddtobiasaddoptim": 48, "conv2d": [48, 55, 56, 57, 61, 62, 67, 121, 131, 139, 419, 421, 460, 461, 463], "addv2": [48, 65, 421], "layout": 49, "convertlayoutoptim": 49, "optim": [49, 70, 71, 75, 76, 112, 114, 167, 170, 174, 177, 178, 214, 220, 222, 258, 259, 275, 295, 299, 312, 358, 375, 376, 383, 386, 393, 395, 411, 415, 416, 417, 421, 422, 424, 425, 428, 430, 431, 433, 435, 436, 439, 442, 452, 453, 454, 455, 456, 457, 459, 460, 461, 463, 465], "nchw": 49, "nhwc": 49, "It": [49, 159, 169, 181, 182, 219, 225, 226, 265, 267, 274, 290, 295, 302, 318, 320, 321, 354, 359, 363, 375, 396, 415, 428, 434, 437, 442, 448, 449, 453, 456, 459, 463, 465], "exist": [49, 158, 175, 211, 329, 419, 427, 435, 463], "4": [49, 158, 169, 177, 178, 202, 205, 206, 210, 246, 249, 252, 260, 261, 263, 313, 314, 316, 373, 390, 396, 411, 417, 418, 421, 424, 425, 427, 428, 436, 452, 453, 456, 460, 462, 463, 466], "abov": [49, 396, 415, 453, 456, 460], "graph_def": [49, 144, 256, 321, 329, 353, 354], "leakyrelu": [50, 460], "convertleakyreluoptim": 50, "below": [50, 62, 70, 177, 178, 296, 320, 354, 391, 392, 395, 396, 412, 415, 417, 423, 427, 431, 433, 441, 442, 445, 448, 450, 451, 453, 455, 456, 459, 460, 461, 463, 464], "subgraph": [50, 62, 101, 151], "mul": [50, 61, 62, 65, 156, 419, 460], "maximum": [50, 169, 170, 177, 178, 193, 210, 237, 252, 261, 292, 299, 314, 358, 413, 428, 453, 456, 462], "note": [50, 169, 263, 303, 316, 364, 393, 417, 419, 421, 425, 428, 433, 436, 441, 445, 448, 453, 456, 460, 461, 463, 464, 465], "coeffici": [50, 453], "less": [50, 144, 177, 178, 386, 411, 415, 428, 453], "than": [50, 144, 193, 210, 237, 252, 386, 393, 395, 411, 413, 423, 427, 450, 451, 453, 456, 459, 462, 463], "convers": [50, 178, 269, 396, 428, 429, 456, 457, 460], "valid": [50, 63, 64, 101, 170, 173, 177, 178, 195, 239, 263, 291, 292, 316, 329, 391, 393, 395, 396, 413, 415, 418, 421, 424, 426, 428, 439, 453, 456, 458], "nan": 51, "random": [51, 144, 177, 178, 206, 210, 249, 252, 259, 275, 299, 301, 312, 358, 362, 386, 391, 393, 428, 455, 462, 465], "convertnantorandom": 51, "const": [51, 52, 59, 60, 63, 64, 66, 78, 94], "consist": [51, 59, 391, 392, 460, 463], "placehold": [52, 191, 235], "convertplaceholdertoconst": 52, "rerewrit": 53, "dequantizecastoptim": 53, "b16": 53, "dilat": 54, "contract": 54, "dilatedcontract": 54, "spacetobatchnd": 54, "batchtospacend": 54, "pattern": [54, 55, 57, 74, 92, 103, 104, 105, 127, 132, 152, 162, 164, 167, 168, 170, 171, 174, 177, 178, 195, 239, 259, 280, 281, 283, 288, 292, 309, 312, 370, 396, 413, 421, 424, 428, 449, 451, 455, 460, 466], "inject": [55, 428], "dummi": [55, 167, 196, 197, 240, 241, 267, 320, 395, 413, 422, 427, 428], "injectdummybiasaddoptim": 55, "fusion": [55, 57, 66, 74, 105, 122, 123, 124, 127, 128, 129, 133, 392, 396, 421], "expanddim": 56, "expanddimsoptim": 56, "next": [56, 186, 230, 373, 393, 455, 463], "featch": 57, "reshap": [57, 63, 64, 69, 460], "fetchweightfromreshapeoptim": 57, "handl": [57, 144, 150, 156, 382, 392, 394, 412, 460], "fold": [58, 59, 257, 421, 460], "batchnorm": [58, 63, 117, 392, 460], "foldbatchnormnodesoptim": 58, "graphfoldconstantoptim": 59, "sequenc": [59, 101, 168, 169, 177, 178, 193, 209, 210, 237, 251, 252, 261, 265, 290, 314, 318, 396, 413, 421, 453, 462], "self": [59, 167, 177, 178, 331, 396, 412, 413, 424, 427, 459, 461, 463], "supported_op_typ": 59, "fusebiasaddandaddoptim": 60, "second": [60, 168, 177, 178, 193, 237, 359, 386, 428, 441, 445, 449, 460, 463, 465], "columnwis": 61, "fusecolumnwisemuloptim": 61, "depthwiseconv2dn": [61, 67, 121, 131, 421], "math": [62, 456], "fuseconvwithmathoptim": 62, "elimin": 62, "sub": [62, 152, 158, 167, 211, 393, 463], "realdiv": [62, 65], "decompos": [63, 64], "fusedecomposedbnoptim": 63, "input_graph_def": [63, 64, 66], "node_name_from_input": [63, 64, 66], "node_nam": [63, 64, 66, 144, 329, 339], "strip": [63, 64, 66, 79, 80, 144, 461], "port": [63, 64, 66], "other": [63, 64, 66, 150, 156, 192, 236, 265, 318, 329, 390, 391, 392, 421, 424, 426, 428, 430, 450, 452, 453, 456, 460, 462, 463, 466], "underli": [63, 64, 66], "node_from_map": [63, 64, 66], "node_map": [63, 64, 66], "pull": [63, 64, 66], "def": [63, 64, 66, 181, 182, 225, 226, 354, 373, 375, 392, 396, 412, 413, 415, 416, 417, 427, 428, 456, 460, 461, 463], "entri": [63, 64, 66, 146, 217, 258, 296, 386, 426], "index": [63, 64, 66, 101, 158, 178, 186, 191, 195, 230, 235, 239, 274, 386, 413, 427, 449, 460], "everi": [63, 64, 66, 169, 170, 177, 178, 290, 292, 396, 436, 441, 445, 463], "identifi": [63, 64, 66, 263, 316, 329, 453], "want": [63, 64, 66, 167, 177, 178, 191, 193, 235, 237, 292, 359, 375, 392, 396, 413, 417, 427, 428, 429, 436, 448, 449, 450, 459, 461, 463], "nodedef": [63, 64, 66], "rais": [63, 64, 66, 101, 169, 170, 173, 263, 290, 291, 292, 316, 321, 373, 395, 453, 454], "valueerror": [63, 64, 66, 263, 316, 373, 420], "If": [63, 64, 66, 70, 158, 177, 178, 181, 182, 195, 210, 225, 226, 239, 252, 291, 321, 354, 373, 375, 391, 392, 411, 413, 417, 425, 426, 427, 428, 429, 434, 442, 443, 446, 448, 450, 456, 459, 460, 461, 462, 463], "isn": [63, 64, 66], "t": [63, 64, 66, 139, 157, 169, 177, 178, 210, 213, 252, 265, 318, 392, 396, 415, 417, 428, 449, 453, 456, 463, 465], "present": [63, 64, 66, 454, 460], "values_from_const": [63, 64, 66], "node_def": [63, 64, 66], "extract": [63, 64, 66, 144, 167, 195, 239, 311, 372, 413], "ha": [63, 64, 66, 70, 169, 170, 211, 260, 290, 292, 313, 373, 391, 393, 396, 412, 419, 424, 428, 429, 434, 448, 453, 455, 456, 457, 459, 460, 463], "access": [63, 64, 66, 175, 178, 381, 386, 443, 446], "valid_reshape_input": [63, 64], "reshape_in0_ndef": [63, 64], "reshape_in1_ndef": [63, 64], "ar": [63, 64, 101, 152, 169, 170, 177, 178, 193, 210, 237, 252, 263, 267, 274, 290, 291, 292, 296, 298, 299, 316, 320, 355, 357, 358, 372, 373, 378, 385, 386, 390, 391, 392, 393, 395, 396, 412, 413, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 434, 436, 439, 442, 448, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 465], "bypass_reshap": [63, 64], "input_node_map": [63, 64], "input_nam": [63, 64, 98, 138, 178, 256, 257, 419], "get_const_dim_count": [63, 64], "dimens": [63, 64, 101, 185, 210, 229, 252, 413, 415, 462], "instancenorm": [64, 460], "fusedecomposedinoptim": 64, "gelu": 65, "fusegeluoptim": 65, "sqrt": 65, "erf": 65, "samll": 66, "layernorm": [66, 460], "fuselayernormoptim": 66, "remap": 66, "smaller": [66, 210, 252, 415, 428, 453, 462], "case": [66, 70, 158, 178, 192, 209, 210, 211, 236, 251, 252, 258, 282, 287, 295, 331, 412, 415, 416, 417, 421, 423, 427, 432, 436, 448, 449, 450, 453, 454, 456, 458, 462, 464, 465, 466], "fusedbatcnormv3": 66, "And": [66, 392, 411, 428, 434, 460], "further": [66, 178, 390, 429, 430, 431, 433, 442, 448, 456], "restrict": [66, 177, 178, 453, 459], "2d": [66, 460], "3d": [66, 454, 460], "kera": [66, 112, 178, 195, 202, 217, 239, 246, 324, 329, 417, 430, 438, 439, 466], "fusepadwithconv2doptim": 67, "excluded_op_nam": [67, 68, 174, 177, 178, 428, 453], "cfg": [67, 68, 152, 174, 309, 370, 378], "itex_qdq_mod": [67, 68], "conv3d": [67, 121], "fusepadwithfp32conv2doptim": 68, "fusetransposereshapeoptim": 69, "cse": [70, 94], "graphcseoptim": 70, "introduc": [70, 391, 396, 421, 428, 456, 458, 460, 464], "ident": [70, 76, 168, 390, 415], "three": [70, 173, 193, 237, 298, 355, 357, 392, 396, 412, 425, 429, 442, 451, 456, 457, 459, 460, 461], "d": [70, 152, 415, 423, 449, 466], "those": [70, 302, 363, 386, 415, 416, 423, 428, 451, 453, 456, 463], "child": [70, 461], "b1": 70, "c1c2": 70, "d1": [70, 386], "c1": 70, "c2": 70, "memori": [70, 258, 282, 287, 295, 331, 386, 412, 416, 428, 429, 431, 450, 453, 456, 460, 463], "bound": [70, 158, 210, 252, 263, 299, 316, 358, 427, 462], "like": [70, 92, 94, 144, 167, 173, 178, 181, 182, 183, 195, 225, 226, 227, 239, 258, 267, 292, 295, 296, 320, 329, 354, 375, 391, 392, 393, 396, 415, 416, 424, 436, 451, 453, 456, 458, 460, 463], "relu": [70, 74, 105, 392, 421, 460, 461], "relu6": [70, 421], "updat": [70, 152, 163, 169, 173, 292, 320, 354, 383, 420, 427, 428, 434, 439, 442, 452, 453, 460, 463, 464], "graphdef": [70, 144, 329, 353, 430], "grappler": [71, 421], "grappleroptim": 71, "input_output_nam": 71, "opt_cfg": 71, "wrapper": [71, 98, 99, 100, 101, 118, 136, 145, 160, 192, 210, 212, 213, 215, 216, 222, 236, 252, 263, 267, 316, 320, 325, 329, 457], "leverag": [71, 393, 395, 415, 419, 431, 448, 451, 456, 463], "built": [71, 179, 180, 184, 189, 193, 194, 199, 201, 203, 204, 206, 207, 210, 215, 217, 223, 224, 228, 231, 233, 237, 238, 243, 245, 247, 248, 249, 250, 252, 296, 320, 323, 331, 354, 375, 393, 396, 413, 417, 428, 441, 445, 450, 456, 462, 463, 465], "convert_add_to_biasadd": [72, 83, 107], "convert_layout": [72, 83, 107], "convert_leakyrelu": [72, 83, 107], "convert_nan_to_random": [72, 83, 107], "convert_placeholder_to_const": [72, 83, 107], "dequantize_cast_optim": [72, 83, 107], "dilated_contract": [72, 83, 107], "dummy_biasadd": [72, 83, 107], "expanddims_optim": [72, 83, 107], "fetch_weight_from_reshap": [72, 83, 107], "fold_batch_norm": [72, 83, 107], "fold_const": [72, 83, 107], "fuse_biasadd_add": [72, 83, 107], "fuse_column_wise_mul": [72, 83, 107], "fuse_conv_with_math": [72, 83, 107], "fuse_decomposed_bn": [72, 83, 107], "fuse_decomposed_in": [72, 83, 107], "fuse_gelu": [72, 83, 107], "fuse_layer_norm": [72, 83, 107], "fuse_pad_with_conv": [72, 83, 107], "fuse_pad_with_fp32_conv": [72, 83, 107], "fuse_reshape_transpos": [72, 83, 107], "graph_cse_optim": [72, 83, 107], "grappler_pass": [72, 83, 107], "insert_print_nod": [72, 83, 107], "move_squeeze_after_relu": [72, 83, 107], "pre_optim": [72, 83, 107], "remove_training_nod": [72, 83, 107], "rename_batch_norm": [72, 83, 107], "split_shared_input": [72, 83, 107], "strip_equivalent_nod": [72, 83, 107, 144], "strip_unused_nod": [72, 83, 107, 144], "switch_optim": [72, 83, 107], "insert": [73, 101, 103, 105, 109, 142, 150, 156, 392, 424, 428, 431, 453, 456, 457, 460, 461], "print": [73, 146, 167, 267, 320, 373, 386, 417, 427, 428, 453, 460, 463], "insertprintminmaxnod": 73, "pre_node_nam": 73, "post_node_nam": 73, "pass": [73, 144, 158, 320, 354, 386, 392, 396, 411, 413, 415, 416, 417, 423, 427, 428, 449, 453, 455, 456, 457, 460, 465], "sampl": [73, 177, 178, 186, 191, 193, 194, 195, 206, 210, 230, 235, 237, 238, 239, 249, 252, 267, 274, 299, 320, 358, 393, 395, 413, 418, 424, 449, 456, 462, 463, 465, 466], "move": [74, 392, 455, 458], "squeez": [74, 392], "movesqueezeafterreluoptim": 74, "match": [74, 98, 167, 263, 264, 316, 317, 415, 449], "pre": [75, 112, 167, 181, 182, 193, 225, 226, 237, 321, 354, 375, 413, 415, 416, 428, 429, 436, 453, 454, 456, 461, 463], "entranc": [75, 184], "preoptim": 75, "removetrainingnodesoptim": 76, "protected_nod": 76, "types_to_splic": 76, "checknumer": 76, "stopgradi": 76, "renam": [77, 458], "fusedbatchnorm": 77, "fusedbatchnormv2": 77, "renamebatchnormoptim": 77, "splitsharedinputoptim": 78, "equival": [79, 460], "stripequivalentnodesoptim": 79, "output_node_nam": [79, 80, 127, 128, 132, 144], "same": [79, 137, 144, 170, 178, 193, 210, 237, 252, 263, 316, 386, 396, 411, 412, 413, 415, 417, 421, 428, 432, 436, 441, 445, 452, 453, 455, 456, 460, 461, 462, 463], "unus": [80, 144], "stripunusednodesoptim": 80, "input_node_nam": [80, 127, 132, 144], "switch": [81, 431, 461], "switchoptim": 81, "condit": [81, 193, 194, 195, 210, 237, 238, 239, 252, 298, 355, 357, 413, 426, 462, 463], "graphrewriterbas": 82, "abstract": [82, 159, 210, 252, 253, 258, 295, 396, 423], "freeze_fake_qu": [83, 91, 107], "freeze_valu": [83, 91, 107], "freeze_value_without_calib": [83, 91, 107], "fuse_conv_redundant_dequant": [83, 91, 107], "fuse_conv_requant": [83, 91, 107], "fuse_matmul_redundant_dequant": [83, 91, 107], "fuse_matmul_requant": [83, 91, 107], "meta_op_optim": [83, 91, 107], "post_hostconst_convert": [83, 91, 107], "post_quantized_op_cs": [83, 91, 107], "rnn_convert": [83, 91, 107], "scale_propag": [83, 91, 107], "onnx_graph": [83, 97, 107], "onnx_schema": [83, 97, 107], "tf2onnx_util": [83, 97, 107], "insert_qdq_pattern": [83, 102, 107], "merge_duplicated_qdq": [83, 102, 107], "share_qdq_y_pattern": [83, 102, 107], "freez": [84, 85, 86, 431, 453], "fakequ": 84, "freezefakequantopoptim": 84, "follow": [84, 106, 168, 195, 239, 260, 263, 313, 316, 390, 391, 392, 393, 396, 412, 413, 415, 416, 417, 419, 421, 425, 426, 427, 428, 429, 430, 431, 432, 433, 441, 445, 451, 453, 455, 456, 460, 461, 463], "freezevaluetransform": 85, "max_min_data": [85, 86], "postfix": [85, 86], "tensor_data": [85, 386, 387], "th": [85, 86], "gpu": [85, 86, 93, 177, 178, 395, 411, 424, 428, 429, 433, 439, 448, 455, 456], "freezevaluewithoutcalibtransform": 86, "95": [86, 267, 320, 427, 460, 466], "quantizedconv": [87, 88], "quantizeddeconv": 87, "redund": [87, 89], "fuseconvredundantdequantizetransform": 87, "cpu": [87, 88, 89, 90, 177, 178, 386, 395, 411, 424, 428, 429, 431, 433, 439, 448, 452, 454, 455, 456, 457, 461], "_quantizedconv": 87, "_quantizeddeconv": 87, "successor": [87, 88, 89, 90], "requant": [88, 90, 461], "fuseconvrequantizetransform": 88, "quantizedmatmul": [89, 90], "fusematmulredundantdequantizetransform": 89, "_quantizedmatmul": [89, 90], "fusematmulrequantizedequantizetransform": 90, "quantizedmatmulwithbiasanddequant": 90, "fusematmulrequantizetransform": 90, "fusematmulrequantizedequantizenewapitransform": 90, "fusematmulrequantizenewapitransform": 90, "newapi": 90, "meta": [92, 454], "metainfochangingmemopoptim": 92, "metaop": 92, "With": [92, 331, 392, 395, 396, 412, 428, 436, 441, 445, 449, 450, 453, 454, 459, 460, 463, 466], "better": [92, 177, 178, 181, 182, 225, 226, 274, 321, 354, 375, 416, 427, 429, 453, 454, 456, 459, 463], "perform": [92, 136, 158, 171, 177, 178, 193, 205, 206, 211, 237, 249, 258, 282, 287, 295, 302, 320, 331, 354, 359, 363, 392, 393, 396, 411, 412, 413, 414, 416, 418, 419, 424, 425, 427, 428, 429, 430, 431, 433, 437, 439, 442, 448, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 463, 465, 466], "hostconst": 93, "posthostconstconvert": 93, "just": [93, 183, 208, 210, 213, 215, 216, 218, 227, 252, 331, 393, 428, 438, 442, 448, 451, 456, 460, 462, 463], "postcseoptim": 94, "duplic": [94, 104, 299, 358], "quantizev2": 94, "decreas": [94, 453], "size": [94, 169, 185, 186, 192, 195, 201, 206, 210, 229, 230, 236, 239, 245, 249, 252, 290, 331, 386, 390, 412, 413, 417, 420, 428, 448, 449, 450, 453, 460, 462, 465, 466], "rnn": 95, "quantizedrnnconvert": 95, "calibration_data": [95, 103], "rnn_detail": 95, "scalepropagationtransform": 96, "direct": [96, 169, 290, 453], "export": [97, 178, 259, 263, 312, 316, 395, 422, 434, 449, 461, 464], "onnxgraph": 98, "output_shap": 98, "extra_opset": 98, "output_nam": [98, 138, 178, 256, 257, 419], "is_subgraph": 98, "graph_nam": 98, "manipul": [98, 99], "onnxnod": 99, "skip_convers": 99, "schema": 100, "onnxopschema": 100, "domain": [100, 101, 177, 178, 453, 463], "since_vers": 100, "get_schema": 100, "max_inclusive_opset_vers": 100, "within": [100, 170, 258, 263, 295, 316, 329, 348, 353, 390, 392, 429, 441, 445, 448, 454, 460], "get_max_supported_opset_vers": 100, "packag": [100, 396, 420, 425, 448, 449, 454, 458, 463], "set_nam": 101, "find_opset": 101, "assert_error": 101, "bool_val": 101, "error_msg": 101, "error": [101, 146, 267, 302, 320, 363, 382, 427, 432, 460, 463], "messag": [101, 142, 463], "map_numpy_to_onnx_dtyp": 101, "np_dtype": 101, "map_onnx_to_numpy_typ": 101, "onnx_typ": 101, "add_port_to_nam": 101, "nr": 101, "get_tensorflow_node_attr": 101, "pars": [101, 152, 193, 194, 206, 210, 237, 238, 249, 252, 337, 338, 342, 462], "get_tensorflow_tensor_shap": 101, "shape": [101, 144, 169, 196, 197, 206, 210, 240, 241, 249, 252, 263, 316, 395, 413, 421, 422, 428, 460, 462], "get_tensorflow_node_shape_attr": 101, "attr": [101, 144, 167], "map_tensorflow_dtyp": 101, "get_tensorflow_tensor_data": 101, "convert_tensorflow_tensor_to_onnx": 101, "read_tensorflow_node_attr": 101, "read": [101, 144, 198, 210, 242, 252, 291, 413, 457, 459], "infer_onnx_shape_dtyp": 101, "opset_vers": [101, 138, 178, 256, 257, 419], "input_shap": [101, 197, 241, 412, 413], "input_dtyp": 101, "sometim": [101, 392, 456], "so": [101, 210, 252, 372, 392, 396, 420, 424, 427, 434, 436, 456, 457, 460, 461, 462, 464], "make_onnx_shap": 101, "seqtyp": 101, "tensor_dtyp": 101, "around": 101, "signifi": 101, "make_onnx_inputs_output": 101, "elem_typ": 101, "text": [101, 209, 210, 251, 252, 260, 265, 293, 313, 318, 419, 426, 437, 453, 454, 460, 462, 466], "datatyp": [101, 152, 457, 463], "save_protobuf": 101, "path": [101, 144, 152, 167, 173, 174, 193, 194, 195, 210, 237, 238, 239, 252, 253, 256, 257, 258, 269, 270, 271, 273, 282, 287, 291, 293, 295, 296, 309, 321, 329, 353, 354, 370, 383, 386, 392, 393, 396, 412, 413, 417, 423, 427, 428, 429, 430, 434, 437, 448, 451, 462, 465], "as_text": 101, "save": [101, 173, 177, 178, 195, 222, 239, 256, 257, 296, 329, 354, 375, 376, 381, 386, 392, 396, 412, 423, 428, 429, 430, 432, 436, 441, 445, 451, 456, 460], "protobuf": 101, "is_onnx_domain": 101, "is_list_or_tupl": 101, "are_shapes_equ": 101, "src": [101, 449], "dest": 101, "equal": [101, 139, 144, 157, 373, 386, 427, 453], "get_subgraphs_from_onnx": 101, "model_proto": 101, "over": [101, 195, 239, 267, 320, 418, 422, 424, 427, 439, 448, 455, 460, 463], "df": 101, "initialize_name_count": 101, "avoid": [101, 193, 237, 392, 461], "conflict": [101, 420], "counter": 101, "make_nam": 101, "get_index_from_strided_slice_of_shap": 101, "outputs_to_valu": 101, "stride": [101, 210, 252, 462], "slice": 101, "compute_const_folding_using_tf": 101, "g": [101, 169, 177, 178, 415, 418, 422, 431, 436, 453, 458, 460, 463], "const_node_valu": 101, "graph_output": 101, "constant": [101, 257, 259, 299, 301, 307, 312, 358, 362, 368, 379, 412, 421, 462], "tf": [101, 112, 144, 192, 193, 194, 195, 210, 236, 237, 238, 239, 252, 327, 329, 417, 430, 454, 457, 462], "generategraphwithqdqpattern": 103, "op_wise_config": [103, 127, 132], "quantized_nod": 103, "dq": [103, 105, 127, 460], "pair": [103, 177, 178, 412, 428, 429], "befor": [103, 105, 156, 169, 170, 172, 177, 178, 193, 237, 290, 292, 294, 391, 413, 415, 416, 417, 420, 421, 425, 428, 443, 446, 456, 459, 461, 463], "merg": [104, 185, 229, 309, 370, 443, 446, 461, 463], "mergeduplicatedqdqoptim": 104, "y": [105, 177, 178, 210, 252, 299, 358, 420, 434, 460, 462], "shareqdqforitexypatternoptim": 105, "one": [105, 106, 111, 152, 158, 169, 170, 172, 210, 220, 252, 260, 263, 267, 269, 290, 293, 294, 313, 316, 320, 393, 396, 415, 416, 417, 421, 422, 424, 425, 427, 428, 429, 431, 432, 436, 437, 439, 441, 442, 445, 448, 449, 450, 451, 453, 455, 456, 458, 460, 462, 463], "enabl": [105, 146, 170, 177, 178, 292, 417, 425, 429, 431, 433, 436, 437, 439, 452, 453, 454, 463], "break": [105, 417, 428], "graphanalyz": 106, "extend_engin": 106, "analyz": [106, 167, 329, 459, 460, 461], "under": [106, 177, 178, 195, 239, 385, 393, 413, 426, 427, 428, 431, 436, 437, 448, 451, 453, 460, 461, 463], "singleton": [106, 386], "specifi": [106, 152, 158, 177, 178, 181, 182, 210, 211, 225, 226, 252, 258, 263, 267, 270, 273, 282, 287, 295, 296, 316, 320, 321, 354, 373, 375, 385, 386, 417, 421, 427, 428, 436, 450, 455, 462, 463, 465], "graphrewriterhelp": 106, "encapsul": [106, 181, 182, 225, 226, 321, 354, 375, 430], "quantize_lay": [107, 108, 110], "fake_quant": [107, 108, 110], "quantize_config": [107, 108, 110], "quantize_help": [107, 108, 110], "quantize_wrapp": [107, 108, 110], "fuse_qdq_bn": [107, 108, 126], "fuse_qdq_concatv2": [107, 108, 126], "fuse_qdq_conv": [107, 108, 126], "fuse_qdq_deconv": [107, 108, 126], "fuse_qdq_in": [107, 108, 126], "fuse_qdq_matmul": [107, 108, 126], "fuse_qdq_pool": [107, 108, 126], "optimize_qdq": [107, 108, 126], "optimize_lay": [108, 110, 113], "quantize_layer_add": [108, 110, 113], "quantize_layer_bas": [108, 110, 113], "quantize_layer_bn": [108, 110, 113], "fakequantizebas": 109, "abc": [109, 265, 318, 396, 461, 463], "appli": [109, 122, 123, 124, 127, 129, 133, 159, 170, 220, 261, 314, 390, 428, 431, 433, 439, 448, 451, 453, 456, 457, 459, 460, 463, 464, 465], "fakequant": 109, "per_channel": [109, 421, 456, 465], "num_bit": [109, 152, 460], "8": [109, 177, 178, 209, 251, 392, 421, 425, 453, 454, 460, 463, 466], "channel_axi": [109, 154, 157], "symmetr": [109, 456, 462, 463], "narrow_rang": 109, "quantizeconfig": [111, 112], "custom": [111, 158, 296, 320, 331, 385, 411, 415, 416, 431, 453, 459], "There": [111, 296, 298, 355, 357, 415, 421, 424, 427, 428, 429, 431, 460, 463, 465], "instanc": [111, 112, 158, 177, 178, 181, 182, 211, 225, 226, 264, 265, 267, 270, 273, 276, 277, 279, 280, 281, 299, 311, 317, 318, 320, 321, 354, 358, 372, 375, 383, 386, 390, 392, 396, 411, 428, 433, 439, 465, 466], "global": [111, 169, 177, 178, 276, 277, 279, 280, 281, 290, 386, 392, 428, 453, 455, 463], "class": [112, 148, 152, 274, 321, 354, 392, 393, 412, 413, 415, 427, 428, 439, 450, 451, 456, 458, 461, 463, 465], "init_quantize_config": 112, "quantize_recip": 112, "begin": [112, 170, 292, 415, 416, 428, 453, 463], "process": [112, 136, 146, 158, 169, 170, 172, 173, 177, 178, 181, 182, 193, 194, 195, 206, 210, 211, 225, 226, 237, 238, 239, 249, 252, 290, 292, 294, 298, 299, 321, 354, 355, 357, 358, 375, 385, 386, 393, 396, 412, 413, 415, 416, 417, 419, 428, 432, 451, 453, 456, 460, 461, 462, 465], "model_nam": [112, 177, 178], "special": [112, 167, 331, 392, 412, 427, 428, 450, 453, 464], "decid": [112, 177, 178, 261, 292, 314, 396, 428, 456, 458, 463], "qat_clone_funct": 112, "leav": [112, 442], "quantizewrapp": [112, 118], "wrapped_lay": 112, "config_quantizable_lay": 114, "quantizelayeradd": 115, "quantizelay": 116, "quantizelayerbas": 116, "quantizelayerbatchnorm": 117, "quantizewrapperbas": 118, "fusedbatchnormv3": [119, 129], "fusenodestartwithfusedbatchnormv3": [119, 129], "_quantizedfusedbatchnorm": 119, "concatv2": [120, 130, 143, 421], "fusenodestartwithconcatv2": [120, 130], "quantizedconcatv2": [120, 130], "fusenodestartwithconv2d": [121, 131], "conv2dbackpropinput": 122, "conv3dbackpropinputv2": 122, "fusenodestartwithdeconv2d": 122, "fusedinstancenorm": 123, "fusenodestartwithfusedinstancenorm": 123, "batchmatmul": 124, "batchmatmulv2": 124, "fusenodestartwithmatmul": [124, 133], "avgpool": [125, 134, 421], "fusenodestartwithpool": [125, 134], "optimizeqdqgraph": 127, "input_graph": [127, 132, 139, 349, 353, 396], "op_wise_sequ": [127, 132], "quantizegraph": 128, "quantizegraphbas": 128, "quantizenodebas": 128, "quantizegraphforintel": 132, "common": [135, 178, 208, 259, 269, 273, 274, 275, 312, 378, 390, 413, 416, 417, 419, 423, 425, 428, 456, 460], "herlper": 135, "quantizegraphhelp": 135, "sever": [135, 172, 210, 252, 294, 393, 415, 416, 424, 428, 429, 441, 445, 453, 455, 460, 462, 463, 465], "staticmethod": 135, "function": [135, 177, 178, 181, 182, 194, 225, 226, 238, 270, 273, 282, 287, 392, 393, 396, 411, 412, 415, 416, 419, 423, 424, 425, 427, 428, 429, 439, 449, 453, 456, 459, 460, 461, 463, 464], "smoothquantcalibr": 136, "dataset": [136, 137, 152, 181, 182, 183, 185, 186, 189, 190, 191, 192, 204, 213, 225, 226, 227, 229, 230, 233, 234, 235, 236, 248, 259, 263, 264, 265, 267, 296, 312, 316, 317, 318, 320, 321, 354, 375, 378, 393, 395, 396, 412, 417, 422, 427, 428, 436, 453, 456, 458, 460, 463, 465, 466], "outlier": [136, 460], "ignor": [136, 386, 413, 460], "smoothquantscal": 137, "alpha": [137, 156, 163, 171, 456], "scales_per_op": 137, "method": [137, 139, 152, 171, 177, 178, 186, 191, 192, 193, 195, 202, 210, 213, 230, 235, 236, 237, 239, 246, 252, 273, 274, 275, 309, 370, 372, 378, 379, 381, 382, 392, 393, 395, 413, 415, 416, 427, 428, 451, 453, 456, 457, 460, 462, 463], "individu": [137, 169, 290, 348, 353, 390, 453, 460], "tensorflowqdqtoonnxqdqconvert": 138, "shape_overrid": 138, "inputs_as_nchw": [138, 256], "default_opset_vers": 138, "bia": [139, 177, 178, 461], "correct": [139, 157, 173, 177, 178, 263, 264, 265, 267, 291, 316, 317, 318, 320, 390, 431], "biascorrect": 139, "fp32_graph": 139, "weight_empir": 139, "Will": [139, 415, 424], "our": [139, 152, 177, 178, 393, 395, 419, 428, 449, 459, 464], "task": [139, 193, 200, 237, 244, 267, 320, 413, 415, 416, 419, 424, 427, 428, 453, 460], "close": [139, 157], "w_int8": [139, 157], "u": [139, 157, 395, 431], "w_fp32": [139, 157], "varianc": [139, 157], "ratio": [139, 157, 169, 170, 173, 177, 178, 206, 210, 249, 252, 292, 413, 428, 453, 462, 466], "differ": [139, 153, 157, 160, 177, 178, 186, 195, 210, 212, 230, 239, 252, 258, 267, 273, 275, 284, 295, 320, 331, 380, 390, 392, 393, 412, 413, 415, 417, 418, 423, 424, 427, 428, 430, 441, 445, 450, 453, 456, 460, 461, 462, 463], "wise": [139, 157, 177, 178, 299, 302, 358, 359, 363, 424, 453, 461, 463, 465], "minim": [139, 157, 299, 358, 415, 418, 427, 428, 441, 445, 453, 456, 463], "round": [139, 157, 456, 460], "scale_c": [139, 157], "shift": [139, 157, 206, 249, 449, 462], "notic": [139, 157, 211, 426, 458], "first": [139, 157, 168, 175, 177, 178, 193, 237, 263, 309, 316, 359, 370, 386, 392, 393, 396, 413, 425, 429, 433, 442, 443, 446, 449, 455, 456, 457, 459, 460, 461, 463, 465], "empir": [139, 157], "solut": [139, 157, 395, 396, 420, 433, 437, 442, 454, 460, 463], "don": [139, 157, 169, 177, 178, 392, 453, 463], "min": [139, 157, 386, 453, 456, 460, 462, 463], "graphtransform": 140, "graphtransformbas": 140, "input_pb": [140, 142, 143], "log": [142, 158, 167, 337, 338, 342, 382, 392, 439, 459, 461, 463], "insertlog": 142, "node_name_list": 142, "show_nam": 142, "show_op": 142, "first_n": 142, "summar": [142, 415], "1024": [142, 195, 239, 434], "dump_fp32": 142, "rerang": 143, "rerangequantizedconcat": 143, "rerange_quant": 143, "version1_lt_version2": [144, 386], "version1": [144, 386], "version2": [144, 386], "version1_gt_version2": [144, 386], "greater": [144, 386, 453, 463], "version1_eq_version2": [144, 386], "version1_gte_version2": [144, 386], "version1_lte_version2": [144, 386], "disable_random": 144, "seed": [144, 177, 178, 275, 386, 428, 465], "disabl": [144, 177, 178, 390, 448, 457], "read_graph": 144, "in_graph": 144, "in_graph_is_binari": 144, "write_graph": 144, "out_graph_def": 144, "out_graph_fil": 144, "write": [144, 202, 246, 386, 417, 423, 428, 431, 461], "is_ckpt_format": 144, "model_path": 144, "ckpt": [144, 321, 329, 354, 466], "folder": [144, 195, 200, 239, 244, 321, 354, 385, 413, 436, 441, 445, 461], "is_saved_model_format": 144, "saved_model": [144, 269], "get_estimator_graph": 144, "estim": [144, 267, 320, 329, 463], "input_fn": [144, 329], "get_tensor_by_nam": 144, "try_cnt": 144, "consid": [144, 267, 320, 390, 415, 449, 463], "import": [144, 158, 177, 178, 269, 321, 331, 354, 373, 375, 386, 392, 393, 395, 411, 412, 413, 415, 416, 417, 419, 422, 427, 428, 429, 430, 431, 435, 437, 450, 451, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463], "scope": [144, 428], "onc": [144, 172, 217, 294, 298, 355, 357, 412, 448, 453, 454, 463, 466], "both": [144, 178, 390, 393, 396, 416, 428, 432, 453, 455, 456, 460, 463], "compat": [144, 329, 417, 430, 443, 446, 448, 458], "v1": [144, 205, 206, 249, 264, 265, 267, 317, 318, 320, 329, 417, 419, 420, 427, 430, 453, 458, 459, 466], "suffix": 144, "time": [144, 177, 178, 210, 252, 267, 299, 320, 331, 358, 386, 417, 420, 428, 436, 438, 441, 445, 448, 449, 450, 453, 454, 456, 459, 461, 462, 463], "got": [144, 420, 461], "iterator_sess_run": 144, "sess": [144, 329], "iter_op": 144, "feed_dict": [144, 192, 236], "output_tensor": [144, 329], "measur": [144, 211, 321, 380, 393, 396, 411, 415, 427, 428, 461, 463], "integr": [144, 160, 212, 396, 428, 449], "session": [144, 192, 236, 329, 428, 461], "makeiter": 144, "feed": [144, 192, 236, 415, 453], "end": [144, 170, 177, 178, 193, 209, 210, 237, 251, 252, 292, 298, 355, 357, 396, 415, 416, 421, 425, 428, 442, 450, 453, 461, 462, 463], "predict": [144, 210, 215, 252, 260, 264, 265, 267, 313, 317, 318, 320, 354, 393, 415, 427, 439, 460, 461, 462], "pred": [144, 267, 320, 427], "collate_tf_pr": 144, "collat": [144, 152], "tbe": 144, "get_input_output_node_nam": 144, "fix_ref_type_of_graph_def": 144, "fix": [144, 170, 193, 237, 292, 391, 413, 435, 453, 460, 463], "strip_unused_lib": 144, "offici": [144, 260, 264, 265, 313, 317, 318, 390, 427, 460], "r1": 144, "15": [144, 421, 466], "branch": 144, "get_graph_def": 144, "auto_input_output": 144, "get_model_input_shap": 144, "inout": 144, "get_tensor_val_from_graph_nod": 144, "graph_node_name_map": 144, "kei": [144, 146, 150, 167, 173, 175, 177, 178, 274, 291, 329, 373, 376, 378, 386, 395, 454, 461, 463], "val": [144, 173, 195, 198, 239, 242, 291, 428], "tensor_v": 144, "int8_node_name_revers": 144, "revers": 144, "tf_diagnosis_help": 144, "fp32_model": [144, 146, 152, 386, 396], "quan_model": 144, "save_path": [144, 256, 257, 396, 430], "diagnosi": [144, 177, 178, 428], "generate_feed_dict": 144, "input_tensor": [144, 329], "get_weight_from_input_tensor": 144, "input_tensor_nam": [144, 329], "associ": [144, 263, 316], "quant": [144, 152, 177, 178, 309, 370, 392, 428, 456], "search": [144, 167, 170, 174, 181, 182, 225, 226, 258, 260, 270, 273, 274, 275, 295, 299, 313, 358, 395, 422, 424, 427, 431, 432, 442, 454, 461, 463, 464], "look": [144, 395, 396, 421, 427, 465], "sq_weight_tensor": 144, "sq_weights_nod": 144, "two": [144, 146, 158, 168, 169, 170, 172, 195, 200, 211, 239, 244, 263, 290, 294, 296, 303, 316, 364, 386, 392, 393, 413, 415, 417, 419, 421, 427, 428, 429, 456, 457, 459, 463, 465], "torch": [145, 146, 147, 148, 149, 150, 151, 152, 156, 167, 168, 169, 170, 174, 177, 178, 222, 257, 321, 354, 385, 392, 395, 397, 415, 417, 419, 428, 429, 430, 431, 436, 439, 456, 460, 461], "bf16modulewrapp": 145, "bf16modul": 145, "mix": [145, 177, 178, 297, 309, 321, 356, 370, 395, 396, 401, 424, 431, 437, 438, 439, 464], "precis": [145, 177, 178, 181, 182, 225, 226, 258, 265, 267, 268, 295, 297, 309, 318, 320, 321, 331, 356, 359, 370, 395, 396, 401, 411, 416, 417, 421, 424, 431, 437, 438, 439, 454, 455, 456, 460, 463, 464], "mixed_precision_model": 145, "bf16_symbolic_trac": 145, "fx_sub_module_list": 145, "trace": [145, 146, 151, 152, 167, 177, 178, 257, 361, 392, 438, 463], "_description_": 145, "hessian": [146, 361, 463], "awar": [146, 159, 178, 220, 269, 290, 361, 375, 396, 416, 417, 419, 424, 429, 448, 451, 463], "node_collector": 146, "hook": [146, 159, 219, 220, 282, 287, 378, 415, 416, 428, 453, 460, 461], "record": [146, 152, 160, 193, 194, 195, 201, 212, 219, 237, 238, 239, 245, 386, 413, 459, 461, 463], "hessiantrac": 146, "q_model": [146, 178, 269, 354, 392, 395, 412, 413, 417, 419, 422, 423, 427, 428, 430, 456, 457], "criterion": [146, 159, 161, 162, 163, 169, 170, 177, 178, 214, 217, 259, 312, 415, 416, 428, 453, 456, 463, 465], "yao": 146, "zhewei": 146, "et": [146, 460], "al": [146, 460], "pyhessian": 146, "network": [146, 163, 169, 292, 361, 393, 415, 416, 419, 428, 452, 454, 456, 460, 463], "through": [146, 181, 182, 225, 226, 320, 321, 354, 395, 411, 421, 423, 424, 427, 434, 450, 451, 453, 455, 456, 460], "len": [146, 178, 210, 252, 413, 417, 462], "2020": 146, "ieee": [146, 429, 460], "intern": [146, 309, 370, 412, 413, 453], "confer": [146, 453, 460], "big": 146, "dong": 146, "zhen": 146, "hawq": [146, 361, 463], "v2": [146, 361, 417, 419, 420, 425, 437, 458, 463, 466], "advanc": [146, 177, 178, 390, 395, 401, 456, 465], "system": [146, 158, 211, 386, 411, 434], "33": [146, 466], "18518": 146, "18529": 146, "openvinotoolkit": 146, "nncf": 146, "develop": [146, 331, 391, 392, 425, 428, 429, 431, 437, 448, 453, 454, 457, 459], "hessian_trac": 146, "compare_weight": 146, "float_dict": 146, "ani": [146, 263, 265, 308, 316, 318, 348, 353, 369, 373, 383, 386, 390, 391, 395, 412, 417, 431, 436, 449, 453, 459], "quantized_dict": 146, "compar": [146, 267, 320, 386, 416, 427, 453, 456, 459, 461, 463], "being": [146, 263, 316], "wt_compare_dict": 146, "float_model": 146, "state_dict": [146, 417, 461], "qmodel": 146, "compute_error": 146, "state": [146, 168, 434, 453], "weight_dict": 146, "hawq_top": 146, "enable_act": 146, "modul": [147, 148, 272, 278, 288, 289, 392, 412, 415, 424, 427, 428, 430, 453, 455, 457, 461, 464], "nn": [148, 150, 152, 167, 168, 170, 177, 178, 222, 257, 321, 354, 385, 392, 415, 428, 430, 460, 461], "detector": 149, "transformerbasedmodelblockpatterndetector": 149, "pattern_lst": 149, "block_pattern": 149, "detect": [149, 152, 167, 177, 178, 263, 267, 316, 320, 325, 392, 431, 438, 439, 453], "ffn": 149, "get_modul": 150, "set_modul": [150, 152], "new_modul": [150, 152], "torchsmoothqu": [150, 460], "example_input": [150, 152, 177, 178, 257, 419], "q_func": [150, 181, 182, 225, 226, 299, 300, 302, 303, 304, 305, 355, 358, 359, 360, 361, 363, 364, 365, 366, 396, 428, 463], "traced_model": [150, 151], "whose": [150, 156, 169, 291, 423, 460, 463], "could": [150, 156, 169, 181, 182, 195, 225, 226, 239, 296, 321, 354, 375, 390, 392, 416, 428, 451, 453, 456, 460, 464], "absorb": [150, 156], "later": [150, 156, 461], "graphtrac": 150, "trace_and_fuse_sub_graph": 151, "is_qat": 151, "get_embedding_contigu": 152, "embed": [152, 453], "contigu": 152, "is_fused_modul": 152, "_propagate_qconfig_help": 152, "collate_torch_pr": 152, "fetch": [152, 155, 186, 230, 413], "collate_result": 152, "input2tupl": 152, "append_attr": 152, "fx_model": 152, "fx_white_list": 152, "append": [152, 296, 299, 358, 392, 416, 428, 451], "graphmodul": [152, 392, 457], "addit": [152, 178, 375, 415, 442, 458], "dir": [152, 193, 237, 385, 413, 420, 423], "generate_activation_observ": 152, "observ": [152, 459, 461, 463], "what": [152, 170, 191, 235, 320, 354, 375, 390], "check_cfg_and_qconfig": 152, "op_infos_from_cfg": 152, "output_tensor_ids_op_nam": 152, "paser_cfg": 152, "ops_nam": 152, "get_quantizable_ops_from_cfg": 152, "input_tensor_ids_op_nam": 152, "update_sq_scal": 152, "ipex_config_path": 152, "smoothquant_scale_info": 152, "ipex_config": 152, "json": [152, 194, 210, 238, 252, 413, 430, 449, 462], "temporari": [152, 386, 390], "auto_copi": 152, "fetch_modul": 152, "op_nam": [152, 174, 177, 178, 310, 371, 386, 387, 428, 453, 461], "simple_infer": 152, "get_example_input": 152, "example_inp": 152, "get_fallback_ord": 152, "confidence_batch": [152, 463], "fallback": [152, 302, 303, 361, 363, 364, 419, 429, 457, 463], "requantize_cfg": 152, "fall": 152, "back": [152, 210, 216, 252, 448], "order": [152, 260, 261, 296, 299, 302, 311, 313, 314, 358, 363, 372, 392, 427, 455, 460, 461, 463], "confid": 152, "ordered_op": 152, "get_mse_order_per_fp32": 152, "mse": [152, 177, 178, 259, 267, 301, 312, 320, 354, 362, 386, 427, 455, 458], "influenc": [152, 453], "last": [152, 163, 173, 177, 178, 429, 431, 433, 438, 442, 456, 460], "fallback_ord": 152, "get_mse_order_per_int8": 152, "get_torch_vers": 152, "match_datatype_pattern": 152, "calculate_quant_min_max": 152, "unsign": [152, 311, 372], "qmin": 152, "qmax": 152, "get_depth": 152, "depth": [152, 415, 457], "get_dict_at_depth": 152, "target_depth": 152, "nest": [152, 175], "get_element_under_depth": 152, "ops_lst": 152, "get_op_type_by_nam": 152, "quantizable_op": 152, "algorithm_registri": 153, "algorithm_typ": 153, "locat": [153, 173, 210, 252, 417, 434, 441, 445, 448, 456, 458, 462, 465], "registr": [153, 195, 202, 210, 239, 246, 252, 285], "algorithmschedul": 153, "conf": [153, 158, 159, 178, 181, 182, 211, 225, 226, 269, 276, 277, 279, 280, 281, 282, 287, 299, 300, 302, 303, 304, 305, 309, 321, 331, 354, 355, 358, 359, 360, 361, 363, 364, 365, 366, 370, 373, 375, 392, 393, 395, 411, 415, 422, 423, 428, 429, 430, 451, 456, 457, 459, 460, 463], "control": [153, 177, 178, 392, 428, 453, 463], "phase": [153, 393, 428, 453, 456, 457, 463], "fastbiascorrect": [154, 157], "fast_bias_correct": [155, 177, 178, 312, 456], "weight_correct": [155, 177, 178, 312, 456], "5": [156, 160, 177, 178, 197, 206, 212, 241, 249, 267, 320, 354, 396, 413, 419, 421, 427, 428, 452, 453, 455, 456, 460, 462, 463, 465, 466], "kernel": [156, 177, 178, 396, 452, 463], "futur": [156, 181, 182, 213, 225, 226, 424, 428, 439, 464], "weightcorrect": 157, "1e": [157, 460, 465], "05": [157, 178, 267, 320, 427, 460, 466], "evalu": [158, 159, 169, 177, 181, 182, 193, 211, 225, 226, 237, 253, 260, 263, 264, 265, 267, 269, 313, 316, 317, 318, 320, 321, 331, 354, 375, 378, 393, 396, 412, 413, 415, 416, 423, 424, 427, 428, 429, 431, 437, 439, 442, 448, 450, 453, 456, 459, 461, 463, 465], "set_env_var": [158, 211], "env_var": [158, 211], "overwrite_exist": [158, 211], "env": [158, 211, 420], "alreadi": [158, 195, 209, 211, 239, 251, 396, 413, 424, 443, 446, 463], "param": [158, 183, 211, 217, 227, 267, 299, 320, 358, 386, 396, 430, 463], "set_all_env_var": [158, 211], "physic": [158, 211, 390, 411], "core": [158, 177, 178, 211, 411, 426, 441, 445, 452, 466], "get_architectur": [158, 211], "architectur": [158, 211, 270, 273, 395, 411, 415, 428, 453, 454, 464], "get_threads_per_cor": [158, 211], "thread": [158, 177, 178, 211, 348, 353, 412, 452], "get_thread": [158, 211], "get_physical_id": [158, 211], "socket": [158, 211, 386, 452, 466], "get_core_id": [158, 211], "id": [158, 209, 211, 251, 260, 262, 263, 264, 265, 313, 315, 316, 317, 318, 427, 459, 463], "get_bounded_thread": [158, 211], "core_id": [158, 211], "bind": [158, 211], "run_inst": 158, "b_dataload": [158, 177, 178, 411, 428], "b_func": [158, 411], "benchmarkconfig": [158, 177, 178, 411, 428], "accuraci": [158, 173, 177, 178, 181, 182, 225, 226, 253, 258, 267, 282, 287, 295, 320, 321, 331, 354, 359, 373, 375, 383, 392, 395, 412, 413, 416, 417, 418, 419, 427, 428, 429, 439, 448, 450, 451, 453, 454, 455, 458, 459, 460, 461, 465, 466], "goal": [158, 253, 258, 282, 287, 295, 321, 354, 412, 451, 456, 463], "prefer": [158, 258, 295, 354, 453], "space": [158, 170, 177, 178, 181, 182, 225, 226, 258, 265, 270, 273, 274, 275, 295, 299, 302, 309, 318, 321, 354, 358, 363, 370, 390, 391, 393, 396, 453, 456, 465], "etc": [158, 159, 209, 251, 253, 258, 265, 282, 287, 295, 318, 321, 354, 385, 415, 424, 453, 459, 463], "user": [158, 167, 170, 173, 177, 178, 181, 182, 195, 198, 202, 210, 211, 217, 222, 225, 226, 239, 242, 246, 252, 258, 282, 287, 293, 295, 296, 320, 321, 331, 354, 359, 375, 386, 392, 393, 396, 401, 411, 415, 416, 419, 421, 424, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 439, 442, 448, 450, 451, 453, 454, 456, 457, 458, 460, 461, 462, 463, 467], "generate_prefix": 158, "core_list": 158, "command": [158, 211, 375, 417, 431, 433, 436, 441, 445, 449], "numactl": [158, 420, 434, 442], "call_on": 158, "cmd": [158, 449], "log_fil": [158, 347, 352], "window": [158, 411, 448, 449], "config_inst": 158, "raw_cmd": 158, "multi": [158, 165, 167, 170, 263, 316, 320, 354, 393, 412, 413, 424, 428, 450, 453, 456, 463], "trigger": [158, 170, 292, 391], "raw": [158, 194, 198, 201, 238, 242, 245, 302, 363, 427, 463], "summary_benchmark": 158, "summari": [158, 375, 443, 446, 452, 461], "profil": [158, 312], "benchmark_with_raw_cmd": 158, "commend": 158, "fit_with_raw_cmd": 158, "cores_per_inst": [158, 177, 178, 411, 428, 455], "num_of_inst": [158, 177, 178, 411, 428, 455], "test": [158, 177, 178, 210, 252, 391, 395, 425, 466], "fit": [158, 169, 177, 178, 299, 321, 354, 358, 373, 375, 392, 395, 411, 412, 413, 417, 422, 423, 427, 428, 429, 430, 453, 456, 457], "pb": [158, 177, 178, 321, 329, 354, 395, 411, 417, 422, 428, 430, 461, 466], "eval_dataload": [158, 177, 178, 181, 182, 225, 226, 296, 299, 300, 302, 303, 304, 305, 321, 354, 355, 358, 359, 360, 361, 363, 364, 365, 366, 375, 395, 411, 422, 423, 428, 456, 463], "compon": [159, 253, 259, 296, 312, 392, 417, 425, 426, 431, 448, 451, 452], "quantizationawaretrainingcallback": 159, "pruningcallback": 159, "distillationcallback": 159, "basecallback": 159, "design": [159, 192, 215, 220, 236, 320, 359, 393, 395, 428, 436, 439, 453, 456, 464], "mainli": [159, 172, 220, 294, 428, 453, 456], "prune": [159, 163, 164, 165, 168, 169, 170, 171, 172, 173, 177, 178, 220, 221, 259, 276, 277, 279, 280, 281, 285, 287, 288, 290, 291, 292, 294, 296, 312, 386, 395, 417, 418, 421, 422, 424, 451, 454, 464, 465], "distil": [159, 162, 177, 178, 212, 219, 220, 259, 312, 395, 418, 422, 424, 451, 464, 465], "In": [159, 169, 170, 171, 178, 192, 220, 236, 263, 290, 292, 316, 331, 390, 392, 393, 395, 396, 412, 413, 415, 416, 417, 427, 428, 438, 441, 442, 445, 450, 451, 453, 456, 457, 459, 460, 461, 462, 463], "adaptor": [159, 177, 178, 311, 372, 378, 395, 424, 457, 458, 460, 461, 464], "deriv": [159, 163, 169, 170, 171, 172, 253, 290, 292, 294], "pipelin": [159, 253, 270, 271, 296, 416, 428, 451], "knowledg": [159, 160, 177, 178, 212, 253, 416, 418, 422, 424, 428, 430, 465], "transfer": [159, 200, 244, 253, 413, 415, 416, 428, 460], "teacher": [159, 177, 178, 253, 415, 416, 428, 466], "student": [159, 177, 178, 193, 219, 237, 253, 413, 415, 416, 466], "distillation_conf": [159, 174, 253], "_epoch_ran": [159, 253], "integ": [159, 169, 170, 177, 178, 253, 263, 267, 274, 290, 292, 316, 320, 373, 396, 456, 460, 463], "indic": [159, 177, 178, 186, 191, 193, 230, 235, 237, 253, 263, 274, 316, 392, 420, 461], "how": [159, 163, 169, 170, 177, 178, 210, 252, 253, 290, 391, 392, 394, 396, 412, 413, 415, 416, 417, 423, 428, 442, 443, 446, 447, 448, 453, 456, 460, 462, 463, 464, 465], "much": [159, 163, 177, 178, 210, 252, 253, 415, 442, 460, 462], "epoch": [159, 170, 253, 292, 375, 415, 416, 417, 428, 451, 453, 465], "ran": [159, 253], "eval_frequ": [159, 253], "frequenc": [159, 170, 177, 178, 253, 292, 428, 452, 453, 465], "term": [159, 170, 171, 253, 391, 415, 426, 427, 450, 451, 463], "best_scor": [159, 253], "best": [159, 210, 252, 253, 258, 295, 302, 363, 390, 393, 425, 431, 437, 448, 450, 456, 462, 463], "metric": [159, 177, 178, 181, 182, 214, 225, 226, 253, 258, 259, 274, 282, 287, 295, 296, 312, 321, 354, 375, 378, 393, 396, 412, 413, 417, 428, 429, 456, 459, 461, 463, 464, 465, 466], "best_model": [159, 253], "found": [159, 253, 395, 415, 429, 436, 460, 463, 466], "critet": [160, 212], "includ": [160, 163, 167, 169, 171, 177, 178, 193, 195, 202, 210, 212, 237, 239, 246, 252, 258, 268, 290, 295, 373, 386, 390, 391, 396, 413, 425, 426, 427, 428, 429, 431, 434, 437, 442, 453, 456, 457, 461, 463], "tensorflowknowledgedistillationloss": [160, 212], "pytorchknowledgedistillationloss": [160, 212, 428], "pytorchintermediatelayersknowledgedistillationloss": [160, 212], "tensorflowcriterion": [160, 212], "pytorchcriterion": [160, 212], "criterion_registri": [160, 212], "criterion_typ": [160, 212], "registry_criterion": [160, 212], "knowledgedistillationframework": [160, 212], "student_model": [160, 178, 212, 428], "teacher_model": [160, 177, 178, 212, 415, 416, 428], "knowledgedistillationloss": [160, 212, 428, 465], "temperatur": [160, 177, 178, 212, 428, 465], "loss_typ": [160, 177, 178, 212, 428, 465], "ce": [160, 177, 178, 212, 428, 465], "loss_weight": [160, 177, 178, 212, 428, 465], "pytorchknowledgedistillationlosswrapp": [160, 212], "param_dict": [160, 212, 217], "tensorflowknowledgedistillationlosswrapp": [160, 212], "tensorflowknowledgedistillationlossextern": [160, 212], "intermediatelayersknowledgedistillationloss": [160, 212], "layer_map": [160, 178, 212, 415], "add_origin_loss": [160, 178, 212], "pytorch": [160, 167, 169, 177, 178, 192, 193, 195, 198, 202, 210, 212, 217, 219, 236, 237, 239, 242, 246, 252, 257, 258, 267, 268, 288, 290, 293, 295, 303, 312, 320, 321, 330, 354, 364, 379, 386, 392, 393, 395, 396, 412, 415, 416, 418, 421, 424, 425, 428, 430, 431, 433, 436, 437, 438, 439, 448, 453, 454, 455, 458, 460, 463, 465], "pytorchintermediatelayersknowledgedistillationlosswrapp": [160, 212], "selfknowledgedistillationloss": [160, 212], "selfknowledg": [160, 212], "pytorchselfknowledgedistillationloss": [160, 212], "pytorchselfknowledgedistillationlosswrapp": [160, 212], "pruner": [162, 259, 276, 277, 278, 279, 280, 282, 287, 288, 290, 293, 312, 428, 453, 465], "model_slim": [162, 164], "auto_slim": [162, 164, 166], "pattern_analyz": [162, 164, 166], "weight_slim": [162, 164, 166], "criteria": [162, 164, 177, 178, 258, 282, 287, 290, 292, 295, 392, 448, 460], "reg": [162, 164, 170], "schedul": [162, 164, 170, 171, 177, 178, 259, 288, 292, 312, 428, 451], "callback": [162, 282, 287, 375, 378, 392, 428, 451, 453, 456], "register_criterion": 163, "registri": [163, 169, 170, 171, 172, 290, 292, 294, 393], "get_criterion": 163, "pruningcriterion": 163, "about": [163, 386, 390, 412, 428, 457, 463, 464, 466], "module_nam": [163, 170, 171, 292, 386], "store": [163, 167, 170, 171, 177, 178, 195, 239, 285, 292, 423], "score": [163, 169, 170, 177, 178, 260, 261, 263, 264, 265, 267, 292, 313, 314, 316, 317, 318, 320, 361, 378, 392, 427, 450, 453, 459, 463], "magnitudecriterion": 163, "magnitud": [163, 177, 178, 259, 267, 278, 312, 320, 424, 453], "criterion_class": 163, "determin": [163, 169, 170, 177, 178, 380, 390, 392, 453, 456, 460], "gradientcriterion": 163, "gradient": [163, 276, 424, 428, 453, 466], "absolut": [163, 177, 178, 267, 320, 427, 428, 452, 453, 456, 463], "snipcriterion": 163, "snip": [163, 177, 178, 292, 424, 453, 466], "product": [163, 395, 424, 429, 431, 432, 448, 452, 454, 456, 459, 463], "singl": [163, 172, 177, 178, 186, 193, 210, 230, 237, 252, 263, 292, 294, 316, 320, 354, 392, 413, 425, 453], "shot": [163, 170, 172, 220, 292, 294, 393, 424, 428, 453, 454], "connect": [163, 292, 448, 452, 453, 459], "sensit": [163, 276, 292, 424, 453], "arxiv": [163, 170, 292, 453, 460], "org": [163, 170, 263, 292, 316, 391, 392, 425, 443, 446], "1810": [163, 292], "02340": [163, 292], "snipmomentumcriterion": 163, "snip_momentum": [163, 177, 178, 428, 453], "momentum": [163, 292, 424, 428, 453, 465], "mechan": [163, 453, 459, 464], "preserv": 163, "step": [163, 169, 170, 172, 177, 178, 290, 292, 294, 375, 415, 416, 417, 419, 428, 443, 446, 448, 451, 453, 455, 457, 459, 460, 461, 463], "beta": 163, "snipmomentumblockcriterion": 163, "snip_momentum_block": 163, "retrainfreecriterion": 163, "retrain_fre": [163, 170], "auto": [165, 167, 177, 178, 297, 312, 356, 362, 386, 392, 431, 434, 436, 438, 439, 453, 456], "slim": [165, 166, 167, 263, 316, 327, 329, 430, 453], "round_multipli": 165, "32": [165, 417, 423, 452, 460, 466], "spars": [165, 170, 292, 413, 454], "automat": [165, 167, 168, 177, 178, 195, 198, 205, 206, 239, 242, 249, 258, 268, 295, 392, 395, 411, 413, 424, 428, 429, 431, 433, 436, 437, 439, 441, 442, 443, 445, 446, 448, 451, 453, 456, 460, 462, 463], "model_slim_ffn2": 165, "some": [165, 167, 177, 178, 193, 237, 291, 413, 419, 425, 427, 428, 429, 450, 453, 456, 457, 460, 461, 463], "part": [165, 170, 290, 292, 392, 425, 429, 443, 446, 453, 460, 464], "perman": [165, 390, 453], "obtain": [165, 167, 170, 171, 173, 291, 392, 453, 459, 460, 463], "acceler": [165, 415, 428, 431, 439, 448, 453, 454, 457, 460, 463], "directli": [165, 177, 178, 192, 236, 263, 267, 291, 316, 320, 427, 428, 435, 453, 455, 456, 461], "sprase": 165, "multipl": [165, 177, 178, 179, 180, 184, 185, 193, 194, 196, 197, 198, 199, 200, 204, 207, 210, 217, 223, 224, 228, 229, 231, 237, 238, 240, 241, 242, 243, 244, 248, 250, 252, 268, 321, 322, 323, 325, 331, 411, 413, 419, 428, 451, 453, 459, 460, 463], "model_slim_mha": 165, "parse_auto_slim_config": 165, "ffn2_sparsiti": 165, "mha_spars": 165, "generate_ffn2_pruning_config": 165, "consecut": [165, 167, 168, 453], "generate_mha_pruning_config": 165, "head": [165, 167, 170, 173, 453], "get_attribut": 167, "level": [167, 359, 373, 382, 390, 460, 463], "descent": 167, "get_common_modul": 167, "layer1": [167, 177, 178, 428, 453, 456], "layer2": [167, 428, 453, 456], "nearest": [167, 210, 252, 462], "father": 167, "print_iter": 167, "recipesearch": 167, "searcher": [167, 275], "root": [167, 193, 194, 195, 198, 237, 238, 239, 242, 267, 320, 412, 413, 417, 427, 428, 465], "levelwis": 167, "wai": [167, 194, 195, 198, 238, 239, 242, 393, 412, 413, 427, 428, 431, 434, 449, 451, 453, 456, 460, 463, 465], "huggingfac": [167, 193, 237, 381, 413, 418, 422, 436, 437, 438, 439, 460], "bert": [167, 178, 189, 192, 193, 210, 233, 236, 237, 252, 395, 413, 415, 427, 436, 453, 462, 466], "recipe_sampl": 167, "bertattent": 167, "dens": [167, 172, 177, 178, 294, 453, 466], "infom": [167, 213], "basic": [167, 169, 177, 178, 209, 251, 259, 270, 290, 301, 305, 308, 312, 362, 366, 369, 375, 424, 425, 428, 455, 459], "searching_result": 167, "jitbasicsearch": 167, "placeholder_shap": 167, "placeholder_dtyp": 167, "By": [167, 177, 178, 260, 313, 395, 427, 430, 441, 442, 445, 454, 463], "jit": [167, 177, 431, 433, 438, 460, 461], "script": [167, 260, 261, 264, 265, 313, 314, 317, 318, 417, 424, 431, 435, 438, 439, 442, 454], "them": [167, 193, 237, 392, 412, 419, 421, 423, 451, 453, 463], "static_graph": 167, "flatten_static_graph": 167, "target_lay": 167, "linear2linearsearch": 167, "target_op_lut": 167, "lookup": 167, "tabl": [167, 386, 419, 466], "code": [167, 181, 182, 211, 225, 226, 269, 293, 296, 354, 375, 392, 395, 396, 412, 413, 415, 416, 417, 423, 424, 426, 427, 431, 433, 435, 436, 437, 439, 442, 448, 450, 451, 453, 454, 455, 456, 459, 460, 461, 462], "current_pattern": 167, "statu": [167, 383, 390, 412, 450, 453], "selfmhasearch": 167, "classifierheadsearch": 167, "final": [167, 170, 173, 292, 428, 434, 450, 453, 456, 458, 463], "classifi": [167, 173, 193, 237, 267, 320, 413, 415], "squeezer": 168, "postcompressionutil": 168, "librari": [168, 214, 259, 312, 348, 388, 391, 395, 425, 428, 433, 442, 448, 454, 456], "relat": [168, 171, 253, 263, 282, 287, 290, 316, 378, 431, 453, 465], "linearcompress": 168, "root_linear": 168, "target_linear": 168, "also": [168, 192, 195, 210, 236, 239, 252, 260, 313, 320, 331, 354, 391, 393, 396, 412, 418, 422, 424, 427, 428, 431, 436, 441, 442, 445, 448, 449, 450, 453, 454, 456, 457, 460, 463], "while": [168, 170, 173, 292, 299, 358, 396, 413, 418, 424, 429, 431, 436, 448, 455, 456, 460], "hidden": [168, 169, 290, 396], "structur": [168, 170, 177, 178, 292, 310, 371, 424, 447, 449, 453, 456, 461, 464, 466], "layer_1": 168, "act_fn": 168, "layer_2": 168, "linearcompressioniter": 168, "linear_pattern": 168, "register_pattern": [169, 290], "sure": [169, 170, 172, 290, 292, 294, 411], "get_pattern": [169, 290], "assertionerror": [169, 170, 173, 290, 291, 292, 321], "basepattern": [169, 171], "unit": [169, 290, 391, 453], "e": [169, 177, 178, 390, 415, 418, 422, 431, 436, 437, 441, 445, 453, 460, 463], "4x1": [169, 177, 178, 286, 428, 453, 466], "is_glob": [169, 290], "local": [169, 177, 178, 290, 386, 441, 445, 453, 459], "contrast": [169, 290, 462], "keep_mask_lay": 169, "invalid_lay": 169, "max_sparsity_ratio_per_op": [169, 170, 174, 177, 178, 428, 453], "sparsiti": [169, 170, 172, 173, 177, 178, 292, 294, 386, 395, 413, 424, 428, 464, 466], "reach": [169, 172, 177, 178, 294, 391, 395, 412, 453, 463], "min_sparsity_ratio_per_op": [169, 174, 177, 178, 428, 453], "minimum": [169, 177, 178, 428, 439, 453, 463], "target_spars": [169, 174, 177, 178, 428, 453, 455, 465], "patternnxm": [169, 290], "nxm": [169, 170, 177, 178, 286, 290, 453], "kept": [169, 290], "block_siz": [169, 290], "height": [169, 206, 210, 249, 252, 290, 417, 462, 465], "width": [169, 206, 210, 249, 252, 290, 417, 453, 456, 462, 465], "vertic": [169, 210, 252, 290, 462], "becaus": [169, 210, 252, 290, 392, 456, 460, 462, 463], "patternninm": [169, 290], "n": [169, 177, 178, 194, 210, 238, 252, 261, 290, 314, 373, 413, 415, 453, 456, 460, 462], "out": [169, 177, 178, 193, 194, 195, 237, 238, 239, 258, 290, 295, 391, 392, 395, 413, 431, 436, 441, 442, 443, 445, 446, 448, 453, 455, 456], "continu": [169, 263, 290, 316, 393, 428, 449, 453], "doc": [169, 177, 178, 290, 308, 309, 320, 354, 369, 370, 373, 386, 427, 428, 443, 446], "md": [169, 177, 178, 290, 320, 354, 417, 456], "element": [169, 173, 191, 235, 263, 290, 316, 386, 413, 424, 427, 453, 460], "patternmha": 169, "register_prun": [170, 292], "parse_valid_pruner_typ": 170, "get_prun": [170, 292], "cuurent": [170, 292], "baseprun": 170, "current_sparsity_ratio": [170, 292], "global_step": [170, 292], "total": [170, 210, 252, 267, 292, 320, 413, 453, 462], "start_step": [170, 174, 177, 178, 292, 428, 453, 455], "end_step": [170, 174, 177, 178, 292, 428, 453, 455], "pruning_frequ": [170, 174, 177, 178, 428, 453], "target_sparsity_ratio": [170, 292], "show": [170, 386, 390, 415, 417, 428, 434, 449, 460, 463, 464], "basicprun": 170, "arrang": [170, 194, 195, 198, 238, 239, 242, 413, 453], "proce": 170, "regul": 170, "patternlockprun": [170, 280, 292], "parent": [170, 172, 286, 292, 294, 461], "blockmaskprun": 170, "grad": 170, "retrainfreeprun": 170, "pruner_class": 170, "rearrang": 170, "fast": [170, 177, 178, 395, 454], "retrain": [170, 416, 453], "effect": [170, 395, 396, 454], "2204": 170, "09656": 170, "progressiveprun": 170, "interpol": [170, 210, 252, 427, 453, 462], "fine": [170, 193, 237, 413, 434, 453, 454, 456], "grain": [170, 453, 454, 463], "improv": [170, 391, 428, 431, 448, 449, 453, 454, 456, 457, 463, 466], "ad": [170, 193, 237, 260, 299, 313, 358, 429, 431, 436, 439, 443, 446, 453, 461], "interv": [170, 453], "multiheadattentionprun": 170, "mha_modul": 170, "partial": [170, 453, 456], "qkv": 170, "feedward": 170, "simultan": [170, 431, 451, 455], "qkv_name": 170, "query_layer_nam": 170, "key_layer_nam": 170, "value_layer_nam": 170, "ffn_name": 170, "attention_ffn_nam": 170, "mha_nam": 170, "keep": [170, 173, 291, 359, 392, 396, 447, 448, 458], "qkv_modul": 170, "ffn_modul": 170, "mha": 170, "regular": [171, 260, 291, 313], "register_reg": 171, "regulariz": 171, "get_reg_typ": 171, "get_reg": 171, "basereg": 171, "grouplasso": 171, "coeff": 171, "group": [171, 277, 424, 453, 461, 462, 463, 466], "lasso": [171, 277, 424, 453], "select": [171, 178, 193, 237, 392, 393, 424, 425, 448, 453, 456, 461, 463], "reg_term": 171, "coeffient": 171, "register_schedul": [172, 294], "get_schedul": [172, 294], "pruningschedul": 172, "gradual": [172, 294, 453], "oneshotschedul": [172, 294], "iterativeschedul": [172, 294], "get_sparsity_ratio": 173, "elementwise_over_matmul_gemm_conv": 173, "elementwise_over_al": 173, "blockwise_over_matmul_gemm_conv": 173, "check_config": [173, 291], "prune_config": [173, 291], "everyth": [173, 291, 436], "reset_none_to_default": 173, "undefin": [173, 291], "update_param": 173, "process_weight_config": 173, "global_config": [173, 276, 277, 279, 280, 281], "local_config": [173, 177, 178, 276, 277, 279, 280, 281], "default_config": 173, "pruners_info": 173, "process_yaml_config": 173, "check_key_valid": 173, "template_config": 173, "user_config": 173, "process_and_check_config": [173, 291], "process_config": [173, 291], "parse_last_linear": 173, "often": [173, 412, 415, 451, 453], "act": [173, 191, 235, 390], "might": [173, 392, 463], "caus": [173, 432, 453], "drop": [173, 263, 291, 316, 428, 429, 442, 453, 466], "parse_to_prun": [173, 291], "generate_pruner_config": 173, "dotdict": [173, 174, 178, 331, 386], "prunerv2": 174, "pruning_typ": [174, 177, 178, 428, 453], "pruning_scop": [174, 177, 178, 428, 453], "sparsity_decay_typ": [174, 177, 178, 428, 453], "pruning_op_typ": [174, 177, 178, 428, 453], "reg_typ": 174, "criterion_reduce_typ": 174, "resume_from_pruned_checkpoint": 174, "similiar": 174, "cfg_fname": 174, "parser": 174, "quantization_conf": 174, "pruning_conf": 174, "graph_optimization_conf": [174, 258], "mixedprecision_conf": 174, "benchmark_conf": 174, "nasconfig": [174, 178, 271, 273, 393], "approach": [174, 177, 178, 270, 271, 273, 392, 393, 395, 412, 413, 415, 424, 428, 436, 448, 454, 455, 463, 465], "search_spac": [174, 178, 270, 273, 274, 275], "search_algorithm": [174, 178, 259, 272, 312, 393], "na": [174, 178, 259, 312, 325, 424], "procedur": [174, 393, 453], "deep_get": [175, 331], "dot": [175, 429, 456], "eg": [175, 195, 239, 413, 455], "person": [175, 390, 454], "john": 175, "deep": [175, 395, 396, 412, 424, 425, 428, 429, 431, 433, 436, 437, 439, 442, 448, 454, 456, 463, 464, 466], "deep_set": [175, 331], "sex": [175, 390], "male": 175, "instead": [175, 178, 192, 236, 386, 434, 436, 439, 453], "notat": [175, 178, 386], "pythonic_config": 176, "random_se": [177, 178, 299, 358, 428, 465], "1978": [177, 178], "workspac": [177, 178, 385, 386, 430], "default_workspac": [177, 178], "resume_from": [177, 178, 386], "tensorboard": [177, 178, 378, 386, 396, 428], "set_random_se": [177, 178, 386], "set_workspac": [177, 178, 386], "set_resume_from": [177, 178, 386], "set_tensorboard": [177, 178, 386], "directori": [177, 178, 194, 195, 238, 239, 329, 381, 383, 385, 386, 413, 417, 420, 441, 443, 445, 446, 461], "histori": [177, 178, 385, 386, 448, 463], "nc_workspac": [177, 178], "datetim": [177, 178], "now": [177, 178, 210, 252, 392, 393, 413, 417, 439, 455, 462, 463], "strftime": [177, 178], "d_": [177, 178], "h": [177, 178, 210, 252, 417, 462], "resum": [177, 178, 181, 182, 225, 226, 300, 303, 304, 305, 355, 358, 359, 360, 361, 363, 364, 365, 366], "wa": [177, 178, 396, 428, 454, 463], "flag": [177, 178, 261, 314], "visual": [177, 178, 395, 439, 448, 459, 461, 463, 464], "displai": [177, 178, 308, 309, 369, 370, 386, 448], "2022": [177, 178, 395, 426, 460], "workspace_path": [177, 178], "accuracycriterion": [177, 178, 428, 463], "higher_is_bett": [177, 178, 320, 354, 427, 463, 465], "rel": [177, 178, 331, 428, 455, 463, 465, 466], "tolerable_loss": [177, 178, 428, 463], "01": [177, 178, 428, 452, 455, 463, 465, 466], "higher": [177, 178, 181, 182, 225, 226, 274, 321, 354, 375, 392, 415, 419, 427, 453, 456, 459], "accept": [177, 178, 373, 390, 411], "accuracy_criterion": [177, 178, 331, 428, 450, 455, 463, 465], "avail": [177, 178, 325, 397, 399, 403, 406, 409, 418, 420, 422, 424, 441, 445, 452, 453, 463, 466], "warmup": [177, 178, 411, 428, 455], "inter_num_of_thread": [177, 178, 348, 353, 428, 455], "intra_num_of_thread": [177, 178, 348, 353, 428, 455], "benchmark": [177, 178, 213, 259, 296, 312, 331, 386, 395, 401, 430, 431, 435, 439, 442, 448, 463, 464, 465, 466], "empti": [177, 178, 434], "onnxrt_trt_ep": [177, 178, 456], "onnxrt_cuda_ep": [177, 178, 429, 456], "inter": [177, 178, 191, 195, 235, 239], "intra": [177, 178], "quantizationconfig": 177, "post_training_static_qu": [177, 412, 413, 428, 455, 463], "calibration_sampling_s": [177, 178, 428], "op_type_dict": [177, 178, 455, 456, 463], "op_name_dict": [177, 178, 428, 456, 463], "strategy_kwarg": [177, 178, 459, 463], "timeout": [177, 178, 428, 455, 463, 465], "max_trial": [177, 178, 428, 463], "quant_level": [177, 178, 463], "posttrainingquantconfig": [177, 178, 354, 392, 395, 412, 419, 422, 428, 430, 456, 457, 459, 460, 463], "quantizationawaretrainingconfig": [177, 178, 375, 392, 416, 419, 428, 456, 457, 463], "requir": [177, 178, 184, 296, 329, 353, 392, 396, 411, 412, 416, 417, 421, 428, 429, 430, 432, 442, 448, 452, 453, 456, 458, 459, 460, 461, 463, 465], "cv": [177, 178, 453], "object_detect": [177, 178, 263, 316], "nlp": [177, 178, 293, 436, 453, 456], "recommendation_system": [177, 178], "explicitli": [177, 178, 423, 453], "overrid": [177, 178, 386], "quantiztaion": [177, 178], "smooth_quant_arg": [177, 178, 456, 460], "gemm_to_matmul": [177, 178, 456], "graph_optimization_level": [177, 178, 455, 456], "disable_al": [177, 178, 455], "enable_bas": [177, 178], "enable_extend": [177, 178], "enable_al": [177, 178], "first_conv_or_matmul_quant": [177, 178, 456], "last_conv_or_matmul_quant": [177, 178, 456], "pre_post_process_quant": [177, 178, 456], "preprocess": [177, 178, 193, 210, 237, 252, 378, 417, 462], "postprocess": [177, 178, 204, 207, 210, 214, 252, 259, 312, 320, 354, 378, 396, 428, 461, 462], "vaild": [177, 178], "dedic": [177, 178], "quant_format": [177, 178, 257, 419], "constraint": [177, 178, 258, 295, 428, 453, 459, 463, 465], "reduc": [177, 178, 396, 416, 428, 429, 448, 449, 453, 454, 456, 457, 460, 463, 465], "conv1": [177, 178, 456, 465], "tuning_strategi": [177, 178], "guarante": [177, 178, 428], "models": [177, 178, 331, 428, 450, 455], "footprint": [177, 178, 258, 282, 287, 295, 331, 416, 428, 450, 453, 455], "earli": [177, 178, 428, 456, 463, 465], "stop": [177, 178, 428, 463, 464, 465], "field": [177, 178, 195, 239, 263, 316, 392, 396, 417, 428, 459, 463, 465], "exit": [177, 178, 298, 355, 357, 428, 429, 465], "excluded_precis": [177, 178, 457], "exclud": [177, 178, 396, 429, 457], "conserv": [177, 178, 312, 362], "use_distributed_tun": 177, "weightpruningconfig": [177, 178, 222, 428, 451, 453], "pruning_config": [177, 178, 428], "9": [177, 178, 392, 425, 428, 453, 455, 460, 463, 465], "98": [177, 178, 428, 453, 455, 466], "exp": [177, 178, 428, 453], "link": [177, 178, 193, 237, 320, 354, 413, 419, 441, 445, 448, 466], "90": [177, 178, 465, 466], "magnitude_progress": [177, 178], "snip_progress": [177, 178], "snip_momentum_progress": [177, 178], "pattern_lock": [177, 178, 259, 278, 312], "most": [177, 178, 267, 320, 428, 429, 453, 456, 460, 463], "feasibl": [177, 178], "situat": [177, 178, 417, 453], "unstructur": [177, 178, 286, 424, 453, 466], "8x1": [177, 178], "channelx1": [177, 178, 453], "1xchannel": [177, 178, 453], "itrex": [177, 178], "start": [177, 178, 210, 252, 263, 316, 359, 425, 462, 463, 464, 467], "togeth": [177, 178, 210, 252, 415, 425, 435, 454, 461, 462], "sort": [177, 178, 302, 363, 463], "sinc": [177, 178, 258, 260, 282, 287, 295, 313, 415, 419, 425, 427, 442, 448, 451], "lead": [177, 178, 415, 428, 429, 453, 460], "increas": [177, 178, 414, 424, 431, 448, 463], "cube": [177, 178, 453], "6": [177, 178, 395, 421, 456, 460, 463, 466], "update_config": [177, 178], "10": [177, 178, 195, 239, 299, 358, 395, 411, 413, 419, 425, 428, 453, 455, 462, 463, 466], "knowledgedistillationlossconfig": [177, 178, 415, 416, 428, 451], "hyperparamet": [177, 178, 308, 459, 460, 463], "entropi": [177, 178, 463], "length": [177, 178, 193, 210, 237, 252, 263, 316, 395, 413, 427, 454, 456, 462], "groundtruth": [177, 178, 263, 316], "label": [177, 178, 181, 182, 193, 195, 196, 197, 198, 201, 206, 210, 215, 225, 226, 237, 239, 240, 241, 242, 245, 249, 252, 260, 262, 267, 313, 315, 320, 321, 354, 375, 392, 412, 413, 427, 428, 456, 462], "tpye": [177, 178], "sum": [177, 178, 267, 320, 415], "distillationconfig": [177, 178, 375, 415, 416, 428, 451], "prepare_compress": [177, 178, 375, 392, 415, 416, 428, 451, 453, 456], "criterion_conf": [177, 178], "d_conf": [177, 178, 416, 428, 451], "compression_manag": [177, 178, 375, 392, 415, 416, 428, 451, 453, 456], "sgd": [177, 178, 217, 415, 428, 455, 465], "learning_r": [177, 178, 428, 455, 465], "callabl": [177, 178, 265, 318, 375], "featur": [177, 178, 193, 194, 206, 210, 237, 238, 249, 252, 391, 395, 411, 412, 414, 415, 428, 429, 430, 431, 435, 436, 439, 448, 453, 454, 458, 462], "altern": [177, 178, 354], "distil_loss": [177, 178, 428], "crossentropyloss": [177, 178, 212, 415, 428], "lr": [177, 178, 415, 417, 428], "tuningcriterion": [178, 428, 450, 459, 463], "tuning_criterion": [178, 428, 450, 459, 463], "dynam": [178, 183, 227, 257, 309, 370, 396, 412, 415, 419, 424, 428, 431, 436, 437, 438, 439, 442, 448, 454, 463, 466], "ptq": [178, 354, 392, 417, 424, 428, 456, 460, 461, 463], "tri": [178, 463], "meet": [178, 184, 296, 298, 355, 357, 392, 450, 454, 455, 456, 461, 463], "bayesian": [178, 259, 275, 301, 312, 362, 393, 455], "mse_v2": [178, 259, 301, 312, 362], "hawq_v2": [178, 312, 362], "exhaust": [178, 259, 275, 301, 312, 362, 455], "docstr": [178, 373], "copi": [178, 291, 386], "deepcopi": 178, "model_origin": [178, 354, 457], "qat_op_name_dict": 178, "intermediatelayersknowledgedistillationlossconfig": [178, 415], "relationship": 178, "student_layer_nam": 178, "student_layer_output_process": 178, "teacher_layer_nam": 178, "teacher_layer_output_process": 178, "desir": [178, 206, 210, 249, 252, 462], "either": [178, 263, 316, 432, 436, 451, 455, 456], "serv": [178, 329], "numer": [178, 267, 320, 429, 454, 456], "abbrevi": 178, "layer_nam": 178, "l1": 178, "selfknowledgedistillationlossconfig": [178, 415, 428], "student1_layer_name1": 178, "teacher_layer_name1": 178, "student2_layer_name1": 178, "student1_layer_name2": 178, "teacher_layer_name2": 178, "student2_layer_name2": 178, "soft": 178, "l2": [178, 453], "hard": [178, 412], "resblock": 178, "deepst": 178, "fc": 178, "02": [178, 460, 466], "mixedprecisionconfig": [178, 321, 373, 428, 429], "mixedprecis": [178, 268, 428], "fp16": [178, 309, 370, 429, 456], "won": [178, 456], "work": [178, 258, 295, 394, 412, 415, 443, 446, 453, 457, 458, 460, 461], "mix_precis": [178, 312, 373, 428, 429], "converted_model": [178, 321, 428, 429], "exportconfig": 178, "14": [178, 256, 257, 419, 425, 460, 466], "dynamic_ax": [178, 257, 419], "qlinear": [178, 195, 202, 239, 246, 267, 320, 396, 419, 438, 466], "ax": [178, 257], "onnxqlinear2qdqconfig": 178, "onnxqlinear2qdq": 178, "torch2onnxconfig": [178, 419], "torch2onnx": [178, 254, 259, 312], "qdq_op_fp32_bia": 178, "qdq_op_int32_bia": 178, "qdq_op_fp32_bias_qdq": 178, "resnet50": [178, 395, 417, 419, 431, 435, 453, 456, 459, 466], "int8_onnx_config": [178, 419], "randn": [178, 419], "224": [178, 206, 249, 395, 412, 413, 417, 419, 422, 428, 431, 462, 465, 466], "batch_siz": [178, 183, 185, 189, 191, 192, 193, 194, 213, 227, 229, 233, 235, 236, 237, 238, 257, 393, 412, 413, 417, 419, 423, 428, 431, 456], "tf2onnxconfig": [178, 419], "tf2onnx": [178, 254, 259, 312], "keyword": 178, "argument": [178, 373, 393], "output_graph": 178, "42": [178, 275, 452, 466], "dyna": [178, 259, 272, 312, 393, 424, 455], "sigopt": [179, 180, 223, 224, 259, 312, 454], "tpe": [179, 180, 223, 224, 259, 312], "sigopttunestrategi": [181, 225], "q_dataload": [181, 182, 225, 226, 299, 300, 302, 303, 304, 305, 355, 358, 359, 360, 361, 363, 364, 365, 366, 423, 463], "eval_func": [181, 182, 225, 226, 296, 299, 300, 302, 303, 304, 305, 321, 354, 355, 358, 359, 360, 361, 363, 364, 365, 366, 373, 375, 392, 412, 413, 415, 416, 417, 428, 456, 457, 463, 465], "eval_metr": [181, 182, 321, 354, 355, 358, 359, 360, 361, 363, 364, 365, 366, 375, 456], "q_hook": [181, 182, 225, 226, 299, 300, 302, 303, 304, 305, 355, 358, 359, 360, 361, 363, 364, 365, 366], "hpo": [181, 225], "mandatori": [181, 182, 225, 226, 354, 428, 465], "yield": [181, 182, 191, 213, 225, 226, 235, 299, 321, 354, 358, 373, 375, 412, 456, 463], "_": [181, 182, 225, 226, 354, 392, 393, 396, 415, 417, 419, 421, 427, 428, 429, 430, 431, 437, 441, 443, 445, 446, 450, 453, 456, 458, 459, 460, 461, 463, 465], "well": [181, 182, 225, 226, 321, 354, 375, 393, 395, 413, 453, 456, 458, 460, 465], "taken": [181, 182, 225, 226, 321, 354, 375, 456], "reserv": [181, 182, 225, 226], "abl": [181, 182, 225, 226, 321, 354, 375, 439, 448, 456], "tuner": [181, 182, 225, 226, 258, 295, 321, 354, 375, 456], "scalar": [181, 182, 225, 226, 321, 354, 375, 427, 456], "pseudo": [181, 182, 225, 226, 354, 375, 461], "someth": [181, 182, 195, 225, 226, 239, 354, 375], "fefin": [182, 226], "tpetunestrategi": [182, 226], "basedatalod": [183, 227], "basedataload": [183, 188, 190, 227, 232, 234], "last_batch": [183, 185, 189, 192, 213, 227, 229, 233, 236], "rollov": [183, 185, 189, 192, 213, 227, 229, 233, 236], "collate_fn": [183, 185, 186, 189, 213, 227, 229, 230, 233, 413], "sampler": [183, 185, 187, 189, 213, 227, 229, 231, 233, 248, 259, 308, 369, 417], "batch_sampl": [183, 185, 189, 213, 227, 229, 233], "num_work": [183, 185, 189, 213, 227, 229, 233, 428, 456], "pin_memori": [183, 185, 189, 213, 227, 229, 233], "shuffl": [183, 185, 189, 213, 227, 229, 233, 428, 456], "_generate_dataload": [183, 227], "check_dataload": 184, "default_col": [185, 229], "outer": [185, 229], "defaultdataload": [185, 192, 229, 236], "definit": [186, 191, 230, 235], "style": [186, 200, 230, 244, 373, 391, 413, 423], "drop_last": [186, 191, 230, 235], "iterablefetch": [186, 230], "indexfetch": [186, 230], "base_dataload": [187, 231, 248, 259], "default_dataload": [187, 231, 248, 259], "fetcher": [187, 231, 248, 259], "mxnet_dataload": [187, 231, 248, 259], "onnxrt_dataload": [187, 231, 248, 259, 347], "pytorch_dataload": [187, 231, 248, 259], "tensorflow_dataload": [187, 231, 248, 259, 352], "mxnetdataload": [188, 232], "onnxrtbertdataload": [189, 233], "varient": [189, 233], "onnxrtdataload": [189, 233, 347], "pytorchdataload": [190, 234], "data_sourc": [191, 235, 378], "__iter__": [191, 195, 235, 239, 412, 413, 428], "matter": [191, 235, 457], "iterablesampl": [191, 235], "squential": [191, 235], "your": [191, 193, 235, 237, 391, 413, 417, 426, 428, 431, 434, 435, 436, 441, 442, 443, 445, 446, 448, 453, 459, 461, 463], "clear": [191, 235, 396, 421, 427, 428], "iterabledataset": [191, 195, 235, 239], "try": [191, 235, 392, 453, 456, 460, 463], "indexdataset": [191, 235], "__getitem__": [191, 195, 210, 235, 239, 252, 413, 428], "__len__": [191, 195, 235, 239, 413], "retriev": [191, 235], "sequentialsampl": [191, 235], "sequenti": [191, 235, 296, 298, 355, 357, 463], "batchsampl": [191, 235], "tfdatadataload": [192, 236], "tensorflow1": [192, 236], "coupl": [192, 236], "satisfi": [192, 236, 425], "usag": [192, 236, 263, 269, 296, 316, 373, 413, 417, 418, 427, 431, 439, 450, 455, 462], "tf1": [192, 236, 430], "although": [192, 236, 459], "tensorflowbertdataload": [192, 236], "tensorflowmodelzoobertdataload": [192, 236], "zoo": [192, 210, 236, 252, 395, 418, 422, 466], "tensorflowdataload": [192, 236, 352], "pytorchbertdataset": [193, 237], "model_typ": [193, 237, 386, 413], "construct": [193, 196, 197, 200, 208, 213, 215, 216, 218, 237, 240, 241, 244, 320, 325, 329, 372, 378, 390, 413, 417, 453, 463], "tensordataset": [193, 237, 413], "repo": [193, 237, 389, 413, 418, 441, 443, 445, 446, 467], "todo": [193, 196, 237, 240, 263, 309, 316, 370], "easi": [193, 237, 295, 412, 419, 428, 454, 456, 459], "load": [193, 209, 210, 237, 251, 252, 321, 329, 354, 385, 386, 412, 441, 445, 449, 455, 456, 460], "squad": [193, 210, 237, 252, 264, 265, 267, 317, 318, 320, 413, 427, 453, 462, 466], "distilbert": [193, 237, 395, 413, 454, 466], "xlnet": [193, 237, 413], "xlm": [193, 237, 413, 466], "101": [193, 237, 267, 320, 427, 460, 466], "2043": [193, 237], "2001": [193, 237], "onnxrtbertdataset": [193, 237], "data_dir": [193, 237, 413], "model_name_or_path": [193, 237, 413, 428, 436, 437], "max_seq_length": [193, 210, 237, 252, 413, 462], "do_lower_cas": [193, 209, 210, 237, 251, 252, 413, 462], "mrpc": [193, 237, 267, 320, 413, 427, 436, 453, 463, 466], "dynamic_length": [193, 237, 413], "shortcut": [193, 237, 413], "token": [193, 204, 207, 210, 237, 248, 250, 252, 259, 260, 261, 312, 313, 314, 381, 413, 427, 428, 459, 460, 462, 463], "longer": [193, 210, 237, 252, 413, 462], "truncat": [193, 210, 237, 252, 413, 462], "shorter": [193, 210, 237, 252, 413, 462], "lowercas": [193, 237, 413], "choic": [193, 237, 396, 413, 427, 460], "qqp": [193, 237, 413, 427, 466], "qnli": [193, 237, 413, 427, 466], "rte": [193, 237, 413, 427, 466], "st": [193, 237, 413, 427], "cola": [193, 237, 413, 427, 466], "mnli": [193, 237, 413, 427, 466], "wnli": [193, 237, 413, 427, 466], "mobilebert": [193, 237, 413, 415, 466], "roberta": [193, 237, 413, 466], "uncas": [193, 210, 237, 252, 413, 462, 466], "load_and_cache_exampl": [193, 237], "cach": [193, 237, 420, 456], "convert_examples_to_featur": [193, 210, 237, 252], "max_length": [193, 237], "label_list": [193, 237, 267, 320], "output_mod": [193, 237], "classif": [193, 210, 237, 252, 267, 293, 320, 415, 419, 427, 437, 453, 454], "pad_token": [193, 237], "pad_token_segment_id": [193, 237], "mask_padding_with_zero": [193, 237], "inputfeatur": [193, 210, 237, 252], "properti": [193, 237, 372, 426, 452], "input_id": [193, 210, 237, 252, 428], "vocabulari": [193, 209, 210, 237, 251, 252, 462], "attention_mask": [193, 237, 428], "usual": [193, 237, 415, 451, 453, 456, 460], "NOT": [193, 237, 421], "token_type_id": [193, 237, 428], "segment": [193, 237, 261, 263, 314, 316], "portion": [193, 237], "problem": [193, 237, 267, 320, 427, 429, 449], "regress": [193, 237], "seq_length": [193, 237], "tensorflowbertdataset": [193, 237], "label_fil": [193, 210, 237, 252, 413, 462], "tfrecord": [193, 194, 195, 237, 238, 239, 413], "guid": [193, 237, 392, 395, 413, 415, 425, 431, 439, 448, 467], "parsedecodebert": [193, 237], "tensorflowmodelzoobertdataset": [193, 194, 237, 238], "num_cor": [193, 194, 198, 237, 238, 242, 413], "28": [193, 194, 198, 237, 238, 242, 413, 466], "coco": [194, 201, 205, 238, 245, 263, 267, 316, 320, 427, 453], "parsedecodecoco": [194, 238], "cocorecorddataset": [194, 238], "interleav": [194, 238, 413], "parallel": [194, 238, 348, 353, 413, 428, 463], "cocoraw": [194, 238, 412, 413], "img_dir": [194, 238, 413], "val2017": [194, 238, 413], "anno_dir": [194, 238, 413], "annot": [194, 238, 263, 316, 373, 413, 427, 453], "instances_val2017": [194, 238, 413], "jpg": [194, 198, 200, 238, 242, 244, 413], "imag": [194, 195, 198, 200, 206, 210, 238, 239, 242, 244, 249, 252, 263, 316, 413, 417, 419, 453, 455, 460, 461, 462, 466], "coconpi": [194, 238, 413], "npy_dir": [194, 238, 413], "npy": [194, 238, 413], "tensorflowdataset": [195, 239], "pytorchdataset": [195, 239], "mxnetdataset": [195, 239], "onnxrtqldataset": [195, 239], "onnxrtitdataset": [195, 239], "IT": [195, 202, 239, 246, 454], "pytorchmxnetwrapdataset": [195, 239], "datafunc": [195, 239], "pytorchmxnetwrapfunct": [195, 210, 239, 252], "framework_dataset": [195, 239], "convent": [195, 239, 263, 316, 415], "imageclassifi": [195, 239], "choos": [195, 239, 424, 436, 458, 460, 463, 465], "tensorflow_itex": [195, 198, 200, 202, 239, 242, 244, 246, 455], "onnxrt_qdq": [195, 202, 239, 246, 455], "onnxrt_qlinearop": [195, 202, 210, 239, 246, 252, 455], "onnxrt_integerop": [195, 202, 210, 239, 246, 252, 455], "pytorch_ipex": [195, 202, 239, 246, 428, 455, 465], "pytorch_fx": [195, 202, 239, 246, 428, 455], "dataset_registri": [195, 239], "dataset_typ": [195, 239], "dataset_format": [195, 239], "data_format": [195, 206, 239, 249], "raw_imag": [195, 239], "overwrit": [195, 239, 441, 445], "download_url": [195, 239], "url": [195, 239, 426], "filenam": [195, 239, 386, 413], "md5": [195, 239], "download": [195, 239, 413, 425, 458], "address": [195, 239, 390, 429, 454], "gen_bar_updat": [195, 239], "progress": [195, 239, 442, 448, 453, 456], "bar": [195, 239, 395, 448, 454], "check_integr": [195, 239], "fpath": [195, 239], "checksum": [195, 239], "calculate_md5": [195, 239], "chunk_siz": [195, 239], "cifar10": [195, 239, 413], "cifar100": [195, 239, 413], "databas": [195, 239], "otherwis": [195, 210, 239, 252, 386, 390, 413, 443, 446, 455, 462], "www": [195, 239, 413, 466], "toronto": [195, 239, 413], "kriz": [195, 239, 413], "cifar": [195, 239, 413, 466], "tar": [195, 239, 413, 443, 446], "gz": [195, 239, 413, 443, 446], "manual": [195, 239, 413, 431, 437, 439, 442], "subset": [195, 198, 239, 242, 413], "internet": [195, 239, 413], "put": [195, 239, 413, 415], "again": [195, 239, 413, 457], "pytorchcifar10": [195, 239], "mxnetcifar10": [195, 239], "tensorflowcifar10": [195, 239], "pytorchcifar100": [195, 239], "mxnetcifar100": [195, 239], "tensorflowcifar100": [195, 239], "mnist": [195, 239, 413, 417], "modifi": [195, 222, 239, 353, 392, 417, 421, 453, 465], "nation": [195, 239, 390], "institut": [195, 239], "standard": [195, 210, 239, 252, 419, 427, 462, 463], "technologi": [195, 239, 428, 452], "fashionmnist": [195, 239, 413], "npz": [195, 239, 413], "idx1": [195, 239, 413], "ubyt": [195, 239, 413], "idx3": [195, 239, 413], "t10k": [195, 239, 413], "pytorchmnist": [195, 239], "mxnetmnist": [195, 239], "tensorflowmnist": [195, 239], "pytorchfashionmnist": [195, 239], "mxnetfashionmnist": [195, 239], "tensorflowfashionmnist": [195, 239], "imagefold": [195, 239, 413, 417, 428], "expect": [195, 239, 390, 391, 420, 448, 456, 463], "subfold": [195, 239], "belong": [195, 239, 325, 456], "class_1": [195, 239, 413], "xxx": [195, 239, 391, 413, 428], "png": [195, 239, 413], "xxy": [195, 239, 413], "xxz": [195, 239, 413], "class_n": [195, 239, 413], "123": [195, 239, 413, 462], "nsdf3": [195, 239, 413], "asd932_": [195, 239, 413], "categori": [195, 239, 262, 315, 411, 413, 438], "mxnetimagefold": [195, 239], "tensorflowtfrecorddataset": [195, 239], "tensorflowimagerecord": [195, 239], "imagenet": [195, 198, 206, 239, 242, 249, 393, 428, 437, 453, 461, 462, 465, 466], "000": [195, 239, 395, 413], "001": [195, 239, 413, 417, 460, 465], "099": [195, 239, 413], "tensorflowvocrecord": [195, 239], "pascal": [195, 239], "voc": [195, 239, 267, 320], "2012": [195, 239], "00000": [195, 239], "00004": [195, 239], "00001": [195, 239], "00003": [195, 239], "dummydataset": [196, 197, 240, 241], "127": [196, 197, 240, 241, 413, 456, 460], "float32": [196, 197, 210, 240, 241, 252, 263, 316, 396, 411, 413, 428, 456, 460, 462], "rang": [196, 197, 210, 240, 241, 252, 373, 375, 395, 396, 413, 415, 416, 417, 428, 451, 453, 456, 460, 462], "stand_norm": [196, 197, 240, 241, 413], "dummy_v2": [197, 241, 412, 413], "sparse_dummy_v2": [197, 241, 413], "label_shap": [197, 241, 413], "sparsedummydataset": [197, 241], "dense_shap": [197, 241, 413], "sparse_ratio": [197, 241, 413], "imagenetraw": [198, 242, 413], "data_path": [198, 242, 413], "image_list": [198, 242, 413], "img1": [198, 242, 413], "img2": [198, 242, 413], "imgx": [198, 242, 413], "val_map": [198, 242, 413], "txt": [198, 242, 413, 425], "pytorchimagenetraw": [198, 242], "mxnetimagenetraw": [198, 242], "tensorflowimagenetraw": [198, 242], "inteltensorflow": [198, 200, 242, 244, 425], "tensorflowimagenetdataset": [198, 242], "onnxrtimagenetdataset": [198, 242], "bert_dataset": [199, 204, 243, 248, 259, 312], "coco_dataset": [199, 204, 243, 248, 259, 312], "dummy_dataset": [199, 204, 243, 248, 259, 312], "dummy_dataset_v2": [199, 204, 243, 248, 259, 312], "imagenet_dataset": [199, 204, 243, 248, 259, 312], "style_transfer_dataset": [199, 204, 243, 248, 259, 312], "styletransferdataset": [200, 244], "content_fold": [200, 244, 413], "style_fold": [200, 244, 413], "crop_ratio": [200, 244, 413], "resize_shap": [200, 244, 413], "256": [200, 206, 244, 249, 413, 417, 428, 462], "image_format": [200, 244, 413], "holder": [200, 244, 413], "labelbalancecocorecordfilt": [201, 245], "balanc": [201, 245, 452, 460], "labelbalancecocorawfilt": [201, 245], "tensorflowfilt": [202, 246], "onnxrtqlfilt": [202, 246], "onnxrtitfilt": [202, 246], "pytorchfilt": [202, 246], "mxnetfilt": [202, 246], "filter_registri": [202, 246], "filter_typ": [202, 246], "__call__": [202, 246], "coco_filt": [203, 204, 247, 248, 259, 312], "imagenet_transform": [204, 207, 248, 250, 259, 312], "parsedecodecocotransform": 205, "decod": [205, 206, 249, 260, 313, 427, 462], "quantizedinput": [206, 249, 462], "labelshift": [206, 249, 462], "label_shift": [206, 249, 462], "parsedecodeimagenet": [206, 249, 462], "proto": [206, 210, 249, 252, 462], "parsedecodeimagenettransform": [206, 249], "tensorflowresizecropimagenettransform": [206, 249], "random_crop": [206, 249, 462], "resize_sid": [206, 249, 462], "resize_method": [206, 249], "bilinear": [206, 210, 249, 252, 462], "random_flip_left_right": [206, 249, 462], "mean_valu": [206, 249, 462], "channels_last": [206, 249, 431], "subpixel": [206, 249], "rgb": [206, 249], "seri": [206, 249, 395, 425, 428, 462], "applic": [206, 249, 419, 431, 448, 454, 460, 461, 462], "crop": [206, 210, 249, 252, 413, 462], "flip": [206, 210, 249, 252, 462], "left": [206, 210, 249, 252, 442, 448, 460, 462], "right": [206, 249, 263, 316, 390, 392, 448, 460, 462], "std": [206, 210, 249, 252, 428, 462], "bilinearimagenettransform": [206, 249], "central_fract": [206, 249, 462], "875": [206, 249, 462], "fraction": [206, 249, 462], "onnxbilinearimagenettransform": [206, 249], "onnxresizecropimagenettransform": [206, 249], "std_valu": [206, 249], "229": [206, 249, 428, 466], "225": [206, 249, 428, 466], "resizewithaspectratio": [206, 249], "87": [206, 249, 466], "inter_pol": [206, 249], "cv2": [206, 249], "inter_area": [206, 249], "aspect": [206, 210, 249, 252, 462], "postprocess_cl": [208, 218, 428], "user_postprocess": [208, 218], "convert_to_unicod": [209, 251], "unicod": [209, 251], "assum": [209, 251, 263, 274, 316, 396, 421, 448], "utf": [209, 251], "load_vocab": [209, 251], "vocab_fil": [209, 210, 251, 252, 462], "convert_by_vocab": [209, 251], "vocab": [209, 251], "whitespace_token": [209, 251], "whitespac": [209, 251, 265, 318], "clean": [209, 251, 391, 428], "piec": [209, 251, 260, 313, 427], "fulltoken": [209, 251], "tokenzi": [209, 251], "basictoken": [209, 251], "punctuat": [209, 251, 260, 265, 313, 318], "lower": [209, 210, 251, 252, 265, 318, 359, 416, 453, 454, 456, 460, 462, 463], "wordpiecetoken": [209, 251], "unk_token": [209, 251], "unk": [209, 251], "max_input_chars_per_word": [209, 251], "200": [209, 251, 392, 463], "wordpiec": [209, 210, 251, 252, 462], "concat_gener": [210, 252], "inc": [210, 252, 390, 395, 431, 438, 448, 454, 455, 458], "tensorflowtransform": [210, 252], "mxnettransform": [210, 252], "pytorchtransform": [210, 252], "onnxrtqltransform": [210, 252], "onnxrtittransform": [210, 252], "transform_registri": [210, 252], "transform_typ": [210, 252], "basetransform": [210, 252], "tensorflowwrapfunct": [210, 252], "transform_func": [210, 252], "pytorchmxnettransform": [210, 252], "get_torchvision_map": [210, 252], "torchvis": [210, 252, 418, 422, 431, 437], "composetransform": [210, 252], "transform_list": [210, 252, 462], "compos": [210, 252, 378, 462], "croptoboundingbox": [210, 252, 462], "offset_height": [210, 252, 462], "offset_width": [210, 252, 462], "target_height": [210, 252, 462], "target_width": [210, 252, 462], "box": [210, 252, 263, 267, 316, 320, 392, 427, 431, 442, 448, 461, 462, 463], "coordin": [210, 252, 299, 358, 462, 463], "top": [210, 252, 258, 267, 282, 287, 295, 320, 427, 448, 462], "corner": [210, 252, 396, 462], "horizont": [210, 252, 462], "mxnetcroptoboundingbox": [210, 252], "onnxrtcroptoboundingbox": [210, 252], "tensorflowcroptoboundingbox": [210, 252], "resizewithratio": [210, 252, 462], "min_dim": [210, 252, 462], "800": [210, 252, 462], "max_dim": [210, 252, 462], "1365": [210, 252, 462, 466], "constant_valu": [210, 252], "longest": [210, 252, 462], "side": [210, 252, 413, 442, 462], "doesn": [210, 252, 396, 417, 428, 449, 465], "exce": [210, 252, 462], "tensorflowresizewithratio": [210, 252], "perm": [210, 252, 462], "permut": [210, 252, 462], "tensorflowtranspos": [210, 252], "mxnettranspos": [210, 252], "pytorchtranspos": [210, 252], "randomverticalflip": [210, 252, 462], "randomli": [210, 252, 275, 299, 358, 393, 460, 462, 463], "tensorflowrandomverticalflip": [210, 252], "randomhorizontalflip": [210, 252, 428, 462], "tensorflowrandomhorizontalflip": [210, 252], "toarrai": [210, 252, 462], "pil": [210, 252, 462], "casttftransform": [210, 252], "castonnxtransform": [210, 252], "castpytorchtransform": [210, 252], "centercroptftransform": [210, 252], "center": [210, 252, 394, 395, 425, 462, 463], "paddedcentercroptransform": [210, 252], "crop_pad": [210, 252], "resizetftransform": [210, 252], "bicub": [210, 252, 462], "resizepytorchtransform": [210, 252], "randomcroptftransform": [210, 252], "randomresizedcroppytorchtransform": [210, 252], "08": [210, 252, 462, 466], "randomresizedcropmxnettransform": [210, 252], "randomresizedcroptftransform": [210, 252], "normalizetftransform": [210, 252], "rescal": [210, 252, 462], "deviat": [210, 252, 462], "broadcast": [210, 252, 417, 462], "rescalekeraspretraintransform": [210, 252], "rescaletftransform": [210, 252], "rescaletransform": [210, 252], "alignimagechanneltransform": [210, 252], "dim": [210, 252, 460, 462], "align": [210, 252, 390, 462], "w": [210, 252, 453, 460, 462], "must": [210, 252, 263, 316, 391, 392, 411, 412, 425, 456, 462], "pytorchalignimagechannel": [210, 252], "tondarraytransform": [210, 252], "resizemxnettransform": [210, 252], "resizetransform": [210, 252], "cropresizetftransform": [210, 252], "boundari": [210, 252, 462], "area": [210, 252, 263, 316, 427, 462], "pytorchcropresizetransform": [210, 252], "mxnetcropresizetransform": [210, 252], "cropresizetransform": [210, 252], "centercroptransform": [210, 252], "mxnetnormalizetransform": [210, 252], "pytorchnormalizetransform": [210, 252], "normalizetransform": [210, 252], "randomcroptransform": [210, 252], "randomresizedcroptransform": [210, 252], "get_final_text": [210, 252], "pred_text": [210, 252], "orig_text": [210, 252], "project": [210, 252, 389, 390, 391, 454, 459, 463, 467], "squadexampl": [210, 252], "qas_id": [210, 252], "question_text": [210, 252], "doc_token": [210, 252], "orig_answer_text": [210, 252], "start_posit": [210, 252], "end_posit": [210, 252], "is_imposs": [210, 252], "simpl": [210, 252, 425, 428, 459, 460, 463], "answer": [210, 252, 264, 265, 317, 318, 390, 453, 462, 466], "posit": [210, 252, 390, 427, 431], "unique_id": [210, 252], "example_index": [210, 252], "doc_span_index": [210, 252], "token_to_orig_map": [210, 252], "token_is_max_context": [210, 252], "input_mask": [210, 252, 428], "segment_id": [210, 252, 428], "read_squad_exampl": [210, 252], "input_fil": [210, 252], "doc_strid": [210, 252, 462], "max_query_length": [210, 252, 462], "output_fn": [210, 252], "inputbatch": [210, 252], "collecttransform": [210, 252], "10833": [210, 252], "tfsquadv1posttransform": [210, 252], "n_best_siz": [210, 252, 462], "20": [210, 252, 452, 460, 462, 465, 466], "384": [210, 252, 462], "64": [210, 252, 393, 460, 462, 466], "max_answer_length": [210, 252, 462], "30": [210, 252, 418, 422, 424, 460, 462, 466], "nbest_predict": [210, 252, 462], "question": [210, 252, 264, 265, 317, 318, 390, 391, 396, 425, 431, 453, 460, 462, 466], "anoth": [210, 252, 260, 269, 313, 386, 415, 429, 441, 445, 462, 463], "long": [210, 252, 420, 462], "document": [210, 252, 373, 391, 401, 417, 429, 433, 443, 446, 447, 458, 462, 464], "chunk": [210, 252, 462], "tfmodelzoocollecttransform": [210, 252], "tfsquadv1modelzooposttransform": [210, 252], "squadv1": [210, 252, 462], "see": [210, 252, 260, 313, 390, 392, 394, 426, 428, 441, 442, 445, 448, 449, 460, 461, 463, 466], "parsedecodevoctransform": [210, 252], "conf_fname_or_obj": [211, 220, 253, 258, 268, 269, 270, 271, 273, 282, 287, 295], "thei": [211, 373, 390, 415, 421, 427, 428, 429, 436, 450], "possibl": [211, 451, 453, 457, 463], "unnecessari": [211, 428], "tensorflowcrossentropyloss": 212, "pytorchcrossentropyloss": 212, "tensorflowsparsecategoricalcrossentropi": 212, "sparsecategoricalcrossentropyloss": 212, "setter": 213, "calib_dataload": [213, 296, 354, 392, 395, 412, 413, 422, 423, 427, 428, 456, 457], "reason": [213, 390, 412, 461, 463], "know": [213, 417, 458], "known": [213, 299, 358, 428, 461, 463], "open": [214, 259, 312, 378, 388, 390, 395, 419, 420, 428, 443, 446, 449, 454], "metric_cl": [215, 320, 354, 428], "user_metr": [215, 320, 354], "alwai": [215, 263, 316, 320, 354, 427, 428], "recommend": [215, 320, 396, 413, 421, 439, 442, 447, 449, 453, 455, 463], "set_backend": 216, "tensorflowoptim": 217, "pytorchoptim": 217, "optimizer_registri": 217, "optimizer_typ": 217, "cross": [217, 267, 320, 423, 463], "tensorflowsgd": 217, "tensorflowadamw": 217, "tensorflow_addon": 217, "adamw": 217, "tensorflowadam": 217, "adam": [217, 465], "pytorchsgd": 217, "record_output": 219, "output_process": 219, "help": [219, 269, 430, 431, 437, 448, 463, 464], "get_activ": 219, "f": [222, 415, 417, 456, 460], "pickle_modul": 222, "pickle_protocol": 222, "_use_new_zipfile_seri": 222, "prepare_prun": [222, 453], "opt": [222, 395, 436, 460], "tensorflowimagefold": 239, "qlinear2qdq": [254, 259, 312], "qlinearop": [255, 424, 439, 456], "check_model": 255, "modelproto": [255, 321, 430], "onnx_qlinear_to_qdq": 255, "input_name_to_nod": 255, "destin": [255, 269], "tf_to_fp32_onnx": 256, "tf_to_int8_onnx": 256, "int8_model": [256, 396], "torch_to_fp32_onnx": 257, "pt_model": 257, "do_constant_fold": 257, "verbos": [257, 299, 358], "torch_to_int8_onnx": 257, "_quantiz": 257, "achiev": [258, 295, 419, 427, 428, 451, 453, 454, 456, 461, 463], "across": [258, 268, 295, 321, 414, 428, 453, 460, 463], "variou": [258, 268, 295, 321, 424, 431, 453, 455], "dl": [258, 268, 282, 287, 295, 321, 423, 435, 448, 454], "bring": [258, 295, 442, 460], "unifi": [258, 295, 396, 412, 423, 424, 428, 430], "vari": [258, 282, 287, 295, 452, 453, 460, 466], "roc": [258, 267, 282, 287, 295, 320], "flexibl": [258, 282, 287, 295, 415, 453], "via": [258, 282, 287, 295, 390, 417, 424, 428, 431, 448, 453], "popular": [259, 312, 388, 395, 396, 415, 418, 419, 422, 428, 453, 456, 463, 464], "compress": [259, 282, 287, 312, 331, 375, 388, 395, 401, 415, 424, 428, 448, 450, 451, 453, 454, 456, 460, 464, 466], "techniqu": [259, 312, 388, 395, 424, 428, 431, 451, 453, 455, 456, 464, 465, 466], "bleu": [259, 261, 266, 312, 314, 319, 427, 453], "bleu_util": [259, 266, 312, 319], "coco_label_map": [259, 266, 312, 319], "coco_tool": [259, 266, 312, 319], "evaluate_squad": [259, 266, 312, 319], "f1": [259, 264, 266, 267, 312, 317, 319, 320, 417, 427, 428, 459, 466], "basic_na": [259, 272, 312], "nas_util": [259, 272, 312], "pruner_legaci": [259, 312], "gradient_sensit": [259, 278, 312], "group_lasso": [259, 278, 312], "pruning_recip": [259, 312], "tile_pattern": [259, 283, 284], "pytorch_prun": [259, 312], "logger": [259, 288, 312, 376, 379, 386], "prune_util": [259, 288, 312], "tuning_sampl": [259, 301, 307, 312, 362, 368], "tuning_spac": [259, 301, 307, 308, 310, 312, 362, 368, 369, 371], "tuning_struct": [259, 301, 307, 308, 309, 312, 362, 368, 369, 370], "auto_mixed_precis": [259, 301, 312, 362], "graph_optim": [259, 312], "mixed_precis": [259, 312, 321, 428], "model_convers": [259, 312], "pruning_v2": [259, 312], "unicoderegex": [260, 313], "hoc": [260, 313], "hack": [260, 313], "recogn": [260, 313, 463], "nondigit_punct_r": [260, 313], "compil": [260, 313, 428, 452], "express": [260, 313, 390], "preced": [260, 313, 460], "digit": [260, 313, 454], "punct_nondigit_r": [260, 313], "symbol_r": [260, 313], "bleu_token": [260, 313], "mose": [260, 313], "smt": [260, 313], "mosesdecod": [260, 313], "mteval": [260, 313], "v14": [260, 313], "pl": [260, 313], "l954": [260, 313], "l983": [260, 313], "bilingu": [260, 313], "understudi": [260, 313], "qualiti": [260, 313], "machin": [260, 313, 419, 425, 434, 448, 454, 460, 461], "translat": [260, 261, 313, 314, 453, 463], "natur": [260, 313, 419], "approxim": [260, 261, 313, 314, 427], "glue": [260, 267, 313, 320, 413, 427, 428, 437], "word": [260, 313, 427, 453], "ngram": [260, 313, 427], "breviti": [260, 261, 313, 314, 427], "penalti": [260, 261, 313, 314, 427], "doe": [260, 313, 372, 413, 427, 428, 458, 462], "beam": [260, 313, 427], "tensor2tensor": [261, 314], "bleu_hook": [261, 314], "compute_bleu": [261, 314], "reference_corpu": [261, 314], "translation_corpu": [261, 314], "max_ord": [261, 314], "use_bp": [261, 314], "against": [261, 314], "gram": [261, 314], "bleu_scor": [261, 314], "third": [263, 316, 426], "parti": [263, 316, 426, 456], "pycocotool": [263, 316, 420, 425], "noth": [263, 316, 463], "thu": [263, 316, 428, 453, 456], "cannot": [263, 316, 392, 420, 429, 461], "jonathanhuang": [263, 316], "image_id": [263, 316, 427], "encod": [263, 316, 462], "invok": [263, 316], "groundtruth_dict": [263, 316], "exportgroundtruthtococo": [263, 316], "groundtruth_boxes_list": [263, 316], "groundtruth_classes_list": [263, 316], "max_num_class": [263, 316], "output_path": [263, 316], "detections_list": [263, 316], "exportdetectionstococo": [263, 316], "detection_boxes_list": [263, 316], "detection_scores_list": [263, 316], "detection_classes_list": [263, 316], "cocowrapp": [263, 316], "loadannot": [263, 316], "cocoevalwrapp": [263, 316], "agnostic_mod": [263, 316], "computemetr": [263, 316], "detection_typ": [263, 316], "bbox": [263, 316, 392, 427], "hold": [263, 299, 316, 358, 413], "iou_typ": [263, 316], "iou_thr": [263, 267, 316, 320, 427], "map_point": [263, 267, 316, 320, 427], "cocoev": [263, 316], "mscoco": [263, 316], "Then": [263, 316, 441, 443, 445, 446, 460, 463], "exportsingleimagegroundtruthtococo": [263, 316], "next_annotation_id": [263, 316], "category_id_set": [263, 316], "groundtruth_box": [263, 316], "groundtruth_class": [263, 316], "groundtruth_mask": [263, 316], "groundtruth_is_crowd": [263, 316], "ingest": [263, 316], "here": [263, 316, 373, 413, 417, 418, 419, 421, 422, 427, 436, 443, 446, 448, 456, 458, 459, 466], "ones": [263, 316, 453], "exportsingleimagedetectionstococo": [263, 316], "uniqu": [263, 296, 316, 456], "assign": [263, 316, 386, 417, 455], "num_gt_box": [263, 316], "num_detect": [263, 267, 316, 320, 427, 428, 465], "image_height": [263, 316], "image_width": [263, 316], "detection_mask": [263, 316], "crowd": [263, 316], "insid": [263, 316, 415, 416, 449, 453, 463], "exportsingleimagedetectionboxestococo": [263, 316], "detection_box": [263, 316, 428, 465], "detection_scor": [263, 316, 428, 465], "detection_class": [263, 316, 428, 465], "exporsingleimagedetectionboxestococo": [263, 316], "exportsingleimagedetectionmaskstococo": [263, 316], "allenai": [264, 265, 317, 318], "bi": [264, 265, 317, 318], "att": [264, 265, 317, 318], "flow": [264, 265, 317, 318, 392, 393, 428], "f1_score": [264, 265, 317, 318], "ground_truth": [264, 265, 317, 318], "ground": [264, 265, 317, 318], "truth": [264, 265, 317, 318], "metric_max_over_ground_truth": [264, 265, 317, 318], "metric_fn": [264, 265, 317, 318], "exact_match_scor": [264, 317], "exact": [264, 317], "averag": [264, 265, 267, 317, 318, 320, 427, 428, 463], "articl": [264, 265, 317, 318], "paragraph": [264, 265, 317, 318], "qa": [264, 265, 317, 318], "cantain": [264, 265, 317, 318], "normalize_answ": [265, 318], "extra": [265, 318, 428], "newlin": [265, 318], "tab": [265, 318, 448, 461], "harmon": [265, 267, 318, 320], "recal": [265, 267, 318, 320], "answer_start": [265, 318], "177": [265, 318], "denver": [265, 318], "bronco": [265, 318], "nfl": [265, 318], "team": [265, 318, 390, 457], "afc": [265, 318], "super": [265, 318, 393], "bowl": [265, 318], "50": [265, 318, 393, 460, 466], "56be4db0acb8001400a502ec": [265, 318], "form": [265, 318, 415, 448], "percentag": [265, 318, 465], "tensorflowmetr": [267, 320], "maintain": [267, 320, 390, 391, 395, 430, 431, 443, 446, 458], "pytorchmetr": [267, 320], "mxnetmetr": [267, 320], "onnxrtqlmetr": [267, 320], "onnxrtitmetr": [267, 320], "metric_registri": [267, 320], "metric_typ": [267, 320], "decorator_metr": [267, 320], "basemetr": [267, 320, 354], "single_output": [267, 320], "hvd": [267, 320, 417], "wrappytorchmetr": [267, 320], "wrapmxnetmetr": [267, 320], "wraponnxrtmetr": [267, 320], "proport": [267, 320], "were": [267, 320, 434, 453], "pred_list": [267, 320], "pytorchloss": [267, 320], "mae": [267, 320, 427], "compare_label": [267, 320, 354, 427], "actual": [267, 320, 417, 460], "rmse": [267, 320, 427, 463], "squar": [267, 302, 320, 363, 427, 460, 463], "tensorflowtopk": [267, 320], "k": [267, 320, 354, 427], "among": [267, 320, 442, 460], "outcom": [267, 320], "num_correct": [267, 320], "num_sampl": [267, 320], "generaltopk": [267, 320], "cocomapv2": [267, 320, 427], "anno_path": [267, 320, 427], "map_kei": [267, 320], "detectionboxes_precis": [267, 320], "output_index_map": [267, 320, 427], "tensorflowmap": [267, 320], "tensorflowcocomap": [267, 320], "tensorflowvocmap": [267, 320], "squadf1": [267, 320, 427], "miou": [267, 320], "num_class": [267, 320], "21": [267, 320, 436, 437, 454, 460, 466], "iou": [267, 320], "intersect": [267, 320, 396, 427], "union": [267, 320, 375, 427], "onnxrtglu": [267, 320], "dlrm": [267, 320], "modelconvers": 269, "typic": [269, 296, 393, 395, 416, 418, 422, 453, 466], "basicna": 270, "model_build": [270, 273], "conf_fnam": 270, "nasbas": [273, 393], "nas_registri": 274, "nas_method": 274, "create_search_space_pool": 274, "idx": [274, 413], "enumer": [274, 375, 396, 415, 416, 417, 428, 451, 453, 461], "find_pareto_front": 274, "pareto": [274, 393], "front": [274, 393], "n_point": 274, "n_metric": 274, "n_pareto_point": 274, "gridsearch": 275, "grid": [275, 393], "whole": [275, 456], "randomsearch": 275, "bayesianoptimizationsearch": 275, "gradientsensitivityprun": 276, "pytorchmodel": [276, 277, 279, 280, 281, 330], "overwritten": [276, 277, 279, 280, 281, 436], "grouplassoprun": 277, "legaci": 278, "basicmagnitudeprun": 279, "lock": [280, 281, 424, 451, 453], "pruner_registri": 281, "clase": 281, "pruningconf": [282, 287], "tfpruningcallback": [282, 287], "input_model": [282, 287, 430, 461], "pure": [282, 287, 429, 453], "pattern_registri": 285, "pattern_typ": 285, "patternbas": 285, "mask_shap": [285, 286], "is_contigu": 285, "tile": 286, "tilepatternbas": 286, "tilepattern_1x1": 286, "1x1": [286, 415, 428, 453], "tilepattern_2x2": 286, "2x2": [286, 460], "tilepattern_1x16": 286, "1x16": 286, "tilepattern_4x1": 286, "tilepattern_1x2": 286, "1x2": [286, 460], "reset_non_value_to_default": 291, "obejct": 291, "parse_not_to_prun": 291, "update_frequency_on_step": [292, 455], "max_sparsity_ratio_per_lay": [292, 455], "magnitudeprun": 292, "snipprun": 292, "snipmomentumprun": 292, "moreoev": 292, "least": [293, 428, 453, 463], "templat": [293, 428, 453], "tree": [293, 309, 370], "huggingface_model": 293, "eager": [293, 353, 417, 424, 456, 457, 461, 466], "config_file_path": 293, "pruner_info": 293, "quantconf": 295, "server": [296, 448], "seper": 296, "opt_model": [296, 428], "fulli": [296, 428, 456, 460], "train_func": [296, 375, 417, 428, 456], "automixedprecisiontunestrategi": [297, 356], "basictunestrategi": [298, 357], "stage": [298, 303, 355, 357, 364, 415, 453, 461, 463], "polici": [298, 302, 355, 357, 363, 390, 395, 452, 465, 467], "bayesiantunestrategi": [299, 358], "acq_max": [299, 358], "ac": [299, 358], "gp": [299, 358], "y_max": [299, 358], "n_warmup": [299, 358], "10000": [299, 358, 453], "n_iter": [299, 358], "acquisit": [299, 358], "gaussian": [299, 358, 463], "relev": [299, 358], "limit": [299, 358, 386, 395, 415, 461], "acq": [299, 358], "randomst": [299, 358], "scipi": [299, 358], "x_max": [299, 358], "targetspac": [299, 358], "pbound": [299, 358], "9527": [299, 358, 428, 465], "allow": [299, 358, 415, 417, 427, 428, 429, 455, 460, 463, 465], "bayesianoptim": [299, 358], "exhaustivetunestrategi": [300, 360], "msetunestrategi": [302, 363], "mse_v2tunestrategi": [303, 364], "revert": [303, 311, 364, 372, 463], "randomtunestrategi": [304, 365], "strategy_registri": [305, 366, 463], "tunestrategi": [305, 366, 463], "tuningsamplerregistri": [308, 369], "tuningsampl": [308, 369], "tuningord": [308, 369], "Not": [308, 309, 369, 370, 386, 393], "tuningspac": [308, 309, 369, 370], "tuning_order_lst": [308, 369], "initial_op_tuning_cfg": [308, 369], "modelwisetuningsampl": [308, 369], "tuning_items_prior": [308, 369], "op_dtype_dict": [308, 369], "optuningconfig": [308, 309, 310, 369, 370, 371], "optypewisetuningsampl": [308, 369], "opwisetuningsampl": [308, 369], "fallbacktuningsampl": [308, 369], "op_dtyp": [308, 369], "accumul": [308, 369, 463], "skip_first": [308, 369], "smoothquantsampl": 308, "tuningitem": [309, 370], "item_typ": [309, 370], "pattern_to_intern": [309, 370], "default_dtyp": [309, 370], "pattern_to_path": [309, 370], "quant_mode_from_pattern": [309, 370], "internal_pattern": [309, 370], "initial_tuning_cfg_with_quant_mod": [309, 370], "op_name_typ": [309, 370], "step1": [309, 370], "step2": [309, 370], "complet": [309, 370, 396, 456, 463, 465, 466], "step3": [309, 370], "step4": [309, 370], "step5": [309, 370], "op_quant_mod": [310, 371], "ordereddefaultdict": [311, 372], "extract_data_typ": [311, 372], "data_typ": [311, 372], "sign": [311, 372, 391, 456, 459], "reverted_data_typ": [311, 372], "signed_flag": [311, 372], "get_adaptor_nam": [311, 372], "experiment": [312, 347, 352, 393, 413, 416, 417, 419, 428, 453, 455, 458, 462], "base_model": [312, 323], "keras_model": [312, 323], "mxnet_model": [312, 323], "nets_factori": [312, 323], "onnx_model": [312, 323, 347], "tensorflow_model": [312, 323, 352], "torch_model": [312, 323], "collect_layer_histogram": [312, 379], "create_obj_from_config": [312, 379], "kl_diverg": [312, 379], "load_huggingfac": [312, 379, 428], "neural_insights_util": [312, 379], "weights_detail": [312, 379], "sub_class": [320, 354], "register_customer_metr": 320, "mani": [320, 354, 425, 463, 465], "tell": [320, 354, 455], "topk": [320, 354, 417, 427, 428, 456], "matrix": [320, 354, 395, 439, 464], "frozen": [321, 329, 354, 430], "savedmodel": [321, 329, 354, 466], "chould": 321, "onnx_ml_pb2": [321, 430], "hybirdblock": [321, 354], "paramt": [321, 375], "basemodel": 322, "plai": [322, 454, 460], "role": [322, 460], "kerasmodel": 324, "get_model_fwk_nam": 325, "fwk": 325, "mxnetmodel": 326, "net": 327, "factori": [327, 334, 336, 341, 344, 346, 351], "tfslimnetsfactori": 327, "onnxmodel": [328, 347], "get_model_typ": 329, "validate_graph_nod": 329, "validate_and_inference_input_output": 329, "output_tensor_nam": 329, "graph_sess": 329, "graph_def_sess": 329, "frozen_pb_sess": 329, "load_saved_model": 329, "saved_model_tag": 329, "signatur": 329, "saved_model_dir": 329, "tag": [329, 460, 461], "metagraphdef": 329, "keras_sess": 329, "slim_sess": 329, "checkpoint_sess": 329, "estimator_sess": 329, "saved_model_sess": 329, "tensorflowbasemodel": [329, 352], "tensorflowsavedmodelmodel": 329, "tensorflowqatmodel": 329, "tensorflowcheckpointmodel": 329, "checkpoint": [329, 385, 430], "tensorflowmodel": 329, "pytorchbasemodel": 330, "pytorchfxmodel": 330, "ipexmodel": 330, "driven": [331, 395, 428, 429, 448, 450, 461], "objective_registri": 331, "objective_custom_registri": 331, "obj_cl": 331, "eural_compressor": 331, "objective_cl": 331, "user_object": 331, "__class__": 331, "__name__": 331, "objective_cfg": 331, "usr_cfg": 331, "user_obj_cfg": 331, "easili": [331, 396, 432, 436, 448, 450, 460], "peak": [331, 450], "multiobject": 331, "metric_criterion": 331, "metric_weight": 331, "obj_criterion": 331, "obj_weight": 331, "is_measur": 331, "parserfactori": 333, "onnxrtparserfactori": 335, "onnxprofilingpars": 337, "respons": [337, 338, 342, 456], "profilingpars": 338, "profilingresult": 339, "total_execution_tim": 339, "accelerator_execution_tim": 339, "cpu_execution_tim": 339, "op_run": 339, "op_defin": 339, "tensorflowparserfactori": 340, "tensorflowprofilingpars": 342, "profilerfactori": [343, 345, 350], "create_onnx_config": 348, "ort": 348, "independ": [348, 353], "sessionopt": 348, "delete_assign": 353, "create_tf_config": 353, "tf_modul": 353, "configproto": 353, "set_eager_execut": 353, "calib_func": [354, 457], "entir": [354, 375, 392, 453, 460], "autotunestrategi": 355, "conservativetunestrategi": 359, "o0": [359, 463], "who": [359, 390], "hawq_v2tunestrategi": 361, "made": [361, 396, 456, 458, 463], "impact": [361, 458, 463], "tunestrategymeta": 366, "metaclass": 366, "lowerbitssampl": 369, "blockfallbacktuningsampl": 369, "op_block_lst": 369, "target_dtyp": 369, "build_slave_faker_model": 372, "slave": [372, 463], "virtual": [372, 454], "fun": 373, "attribute1": 373, "module_debug_level1": 373, "debug": [373, 382, 441, 445, 449, 463], "function1": 373, "param1": 373, "param2": 373, "parameter1": 373, "parameter2": 373, "o": [373, 425, 433, 452, 460], "function2": 373, "pep": 373, "484": 373, "output_model": [373, 412, 428, 461], "function3": 373, "section": [373, 415, 416, 448, 453, 455, 465], "restructuredtext": 373, "liter": 373, "attributeerror": 373, "except": [373, 386], "generator1": 373, "example_gener": 373, "exampleclass": 373, "param3": 373, "public": [373, 390, 443, 446], "attr1": 373, "attr2": 373, "attr5": 373, "api_doc_exampl": 374, "loop": [375, 392, 393, 421, 459, 463], "compressionmanag": 375, "uesd": 375, "deal": 375, "pruningconfig": 375, "orchestr": [375, 395, 424, 464], "on_train_begin": [375, 392, 415, 416, 428, 451, 453, 456], "train_loop": [375, 428, 451], "on_epoch_begin": [375, 378, 415, 416, 428, 451], "on_step_begin": [375, 378, 415, 416, 428, 451, 453], "on_after_compute_loss": [375, 415, 416, 428, 451], "backward": [375, 415, 416, 417, 428, 451, 453, 456, 458], "on_before_optimizer_step": [375, 415, 416, 428, 451, 453], "on_step_end": [375, 378, 415, 416, 428, 451], "on_epoch_end": [375, 378, 415, 416, 428, 451], "on_train_end": [375, 415, 416, 428, 451, 453, 456], "path_to_sav": 375, "manag": [375, 378, 422, 428, 431, 432, 442], "top1": [375, 453, 456, 466], "callbacks_list": 375, "layerhistogramcollector": 376, "layer_tensor": 376, "include_lay": 376, "get_func_from_config": 378, "func_dict": 378, "get_preprocess": 378, "get_metr": 378, "get_postprocess": 378, "get_algorithm": 378, "algo": 378, "create_dataset": 378, "cfg_preprocess": 378, "cfg_filter": 378, "create_dataload": 378, "dataloader_cfg": 378, "create_eval_func": 378, "postprocess_cfg": 378, "fp32_baselin": [378, 396], "baselin": [378, 459, 461], "create_train_func": 378, "train_cfg": 378, "Their": 378, "auxiliari": 379, "pretrain": [381, 431, 437], "optimizedmodel": 381, "from_pretrain": [381, 428], "save_for_huggingface_upstream": [381, 428], "output_dir": [381, 428, 436, 437], "msg": 382, "fatal": 382, "warn": 382, "warin": 382, "alia": [382, 386, 433, 438], "insight": [383, 395, 463], "register_neural_insights_workload": 383, "workload_loc": [383, 386], "workload_mod": 383, "workload": [383, 386, 454], "uuid": 383, "update_neural_insights_workload": 383, "workload_uuid": 383, "update_neural_insights_workload_accuracy_data": 383, "baseline_accuraci": 383, "optimized_accuraci": 383, "is_int8_model": 385, "checkpoint_dir": 385, "history_cfg": 385, "best_configur": 385, "best_model_weight": 385, "pt": [385, 430, 454, 456, 457], "snapshot": 385, "cfg_from_fil": 386, "yaml_fil": [386, 413, 417, 427], "lazyimport": 386, "lazi": 386, "till": [386, 463], "decorat": 386, "time_limit": 386, "get_siz": 386, "seen": [386, 396], "recurs": 386, "compute_spars": 386, "fault_tolerant_fil": 386, "equal_dict": 386, "d2": 386, "compare_kei": 386, "ignore_kei": 386, "cpuinfo": 386, "dump_elapsed_tim": [386, 396], "customized_msg": 386, "elaps": 386, "combine_histogram": 386, "old_hist": 386, "old": [386, 428, 458], "get_tensor_histogram": 386, "get_all_fp32_data": 386, "get_tuning_histori": 386, "tuning_history_path": 386, "num": [386, 427], "offlin": [386, 390, 428, 456, 460], "str2arrai": 386, "dequantizeweight": 386, "weight_tensor": 386, "min_filter_tensor": 386, "max_filter_tensor": 386, "scale_info": 386, "captureoutputtofil": 386, "tmp_file_path": 386, "stream": 386, "sy": [386, 434], "stderr": 386, "captur": 386, "statist": [386, 387], "header": [386, 420], "field_nam": 386, "output_handl": 386, "printer": 386, "global_st": 386, "load_data_from_pkl": 386, "pkl": 386, "dump_data_to_loc": 386, "show_memory_info": 386, "hint": 386, "dump_class_attr": 386, "compare_object": 386, "obj1": 386, "obj2": 386, "ignore_attr": 386, "comparison": [386, 458, 461], "alias_param": 386, "param_nam": 386, "param_alia": 386, "alias": 386, "print_tabl": 386, "column_map": 386, "table_entri": 386, "titl": [386, 426, 449], "insert_newlin": 386, "prettyt": 386, "column": [386, 460], "func": [386, 456, 465], "handler": [386, 463], "get_tensors_info": 386, "get_weights_detail": 386, "weightdetail": 386, "dump_tabl": 386, "filepath": 386, "file_typ": 386, "csv": [386, 393], "dump_table_to_csv": 386, "get_number_of_socket": 386, "platform": [386, 395, 424, 431, 439, 454, 456, 466], "opentri": 386, "activation_min": 386, "activation_max": 386, "print_op_list": 386, "get_op_list": 386, "minmax_file_path": 386, "input_model_tensor": 386, "optimized_model_tensor": 386, "dequan_min_max": 386, "calculate_ms": 386, "mse_metric_gap": 386, "fp32_tensor": 386, "dequantize_tensor": 386, "euclidean": [386, 415], "distanc": [386, 415], "weightsdetail": 387, "input_tensor_data": 387, "optimized_tensor_data": 387, "weightsstatist": 387, "welcom": [389, 390, 391, 395, 467], "interest": [390, 395, 461], "foster": 390, "particip": 390, "commun": 390, "harass": 390, "experi": [390, 431, 459, 460, 463], "everyon": 390, "regardless": 390, "ag": 390, "bodi": 390, "ethnic": 390, "characterist": 390, "gender": 390, "educ": 390, "socio": 390, "econom": 390, "appear": [390, 442, 448], "race": 390, "religion": 390, "sexual": 390, "orient": 390, "behavior": [390, 391, 396, 421, 430, 461, 463, 465], "contribut": [390, 395, 453], "inclus": 390, "Being": 390, "respect": [390, 421, 453, 460, 465], "viewpoint": 390, "gracefulli": 390, "critic": 390, "focus": [390, 396], "empathi": 390, "toward": [390, 415], "member": [390, 396], "unaccept": 390, "imageri": 390, "unwelcom": 390, "troll": 390, "insult": 390, "derogatori": 390, "comment": [390, 413, 427, 428, 462], "polit": 390, "attack": 390, "privat": 390, "publish": [390, 426, 429, 449, 460], "electron": 390, "explicit": 390, "permiss": 390, "inappropri": 390, "profession": 390, "clarifi": 390, "appropri": [390, 460], "fair": 390, "action": [390, 443, 446], "edit": 390, "reject": 390, "commit": [390, 391], "wiki": 390, "issu": [390, 391, 394, 425, 456, 461], "ban": 390, "temporarili": 390, "deem": 390, "threaten": 390, "offens": 390, "harm": 390, "mail": 390, "social": [390, 454], "media": [390, 454], "account": [390, 459, 463], "appoint": 390, "onlin": [390, 459], "event": [390, 461], "abus": 390, "report": [390, 391, 459], "contact": [390, 458, 459], "complaint": 390, "review": [390, 391], "investig": 390, "circumst": [390, 455], "oblig": 390, "confidenti": 390, "regard": [390, 457], "incid": 390, "separ": [390, 423, 426, 451, 455], "good": [390, 456, 463], "faith": 390, "face": [390, 395, 401, 431, 435, 454, 458], "repercuss": 390, "leadership": 390, "faq": [390, 395], "page": [390, 391, 395], "send": 391, "view": [391, 395, 418, 439, 448, 458], "pylint": 391, "flake8": 391, "autopep8": 391, "cover": [391, 419, 423, 454], "would": [391, 428, 429, 453, 456, 460], "adopt": [391, 431, 453, 454, 460], "certif": 391, "agre": 391, "j": [391, 395, 460, 466], "bug": 391, "jira": 391, "ticket": 391, "potenti": [391, 393], "risk": 391, "pr": [391, 427, 443, 446, 458], "reproduc": 391, "hardwar": [391, 395, 396, 415, 424, 428, 429, 448, 452, 453, 454, 455], "submit": [391, 454], "intend": 391, "safe": 391, "collabor": [391, 433, 439], "adher": 391, "toolkit": [392, 425, 431, 439, 454, 464], "tracer": 392, "resolv": [392, 394], "floatfunct": 392, "cat": [392, 419, 434], "done": [392, 415, 416, 432, 448, 453, 456], "10004": [392, 393, 396, 412, 415, 416, 421, 424, 429, 451, 455, 465], "neural_compressor": [392, 393, 395, 411, 412, 413, 415, 416, 417, 419, 422, 423, 427, 428, 429, 430, 450, 451, 453, 455, 456, 457, 458, 459, 460, 462, 463, 465], "eval": [392, 412, 431, 456, 461], "fail": [392, 419], "conduct": [392, 428, 436, 448, 464], "imper": 392, "therefor": [392, 428, 453, 456, 458, 460], "lot": [392, 460], "As": [392, 412, 415, 428, 442, 453, 463], "failur": 392, "successfulli": [392, 417, 454], "suggest": [392, 459], "traceabl": 392, "proxi": 392, "tutori": [392, 439, 454, 464], "prototyp": 392, "html": [392, 395, 443, 446], "highlight": 392, "untrac": 392, "ssd": [392, 419, 466], "resnet34": [392, 466], "r34": 392, "bboxes_labels_scor": 392, "prob": 392, "45": [392, 460, 466], "max_output": 392, "zip": 392, "dbox": 392, "dlabel": 392, "dscore": 392, "decode_singl": 392, "autom": [393, 431, 448, 449, 460], "artifici": 393, "ann": 393, "par": 393, "outperform": 393, "hand": 393, "propos": [393, 396, 415, 429, 460], "lie": 393, "predictor": 393, "4x": [393, 456], "shown": [393, 412, 415, 427, 428, 442, 450, 451, 453, 460, 463], "figur": [393, 441, 442, 445], "popul": 393, "inner": 393, "evolutionari": 393, "cycl": 393, "until": [393, 463], "conclud": 393, "met": [393, 421, 429, 456, 461], "yet": [393, 443, 446, 449], "simplest": [393, 434], "launcher": [393, 395, 415, 416, 439, 464], "agent": 393, "nsga2": 393, "supernet": 393, "ofa_mbv3_d234_e346_k357_w1": 393, "acc": [393, 453, 461, 466], "mac": [393, 449], "num_ev": 393, "250": [393, 453], "results_csv_path": 393, "search_result": 393, "dataset_path": 393, "ilsvrc2012": 393, "aim": [393, 395, 431, 453, 460, 463, 464], "mobilenetv3": 393, "lt": [393, 413, 452, 466], "wmt": 393, "en": 393, "de": 393, "guidelin": [394, 395], "mainstream": [395, 464], "learn": [395, 396, 412, 413, 419, 423, 424, 425, 428, 429, 431, 433, 436, 437, 439, 442, 443, 446, 448, 453, 454, 456, 460, 461, 463, 464], "runtim": [395, 396, 397, 412, 418, 421, 424, 433, 438, 439, 455], "workflow": [395, 415, 419, 425, 429, 443, 446, 461, 464], "particular": [395, 453], "wide": [395, 418, 429, 453, 456, 466], "xeon": [395, 425, 426, 429, 452, 454, 456, 457, 466], "scalabl": [395, 425, 429, 452, 454, 456, 457, 466], "processor": [395, 429, 452, 454, 456, 457, 466], "flex": [395, 425], "amd": [395, 424, 425, 466], "arm": [395, 424, 425, 466], "nvidia": [395, 424, 425, 466], "bloom": [395, 460], "176b": [395, 460], "7b": [395, 460], "stabl": [395, 425, 453, 454], "diffus": [395, 454, 466], "gpt": [395, 453, 460, 466], "hub": [395, 418, 422, 439], "hug": [395, 454], "vision": [395, 419, 435, 460], "coder": [395, 424, 432, 433, 436, 439, 442, 454], "cloud": [395, 454], "marketplac": [395, 449, 454], "googl": [395, 429, 454], "amazon": [395, 431, 439], "web": [395, 461], "servic": [395, 448, 452], "azur": [395, 454], "softwar": [395, 426, 429, 452, 453, 454, 458], "alibaba": [395, 438, 445, 446, 454], "tencent": [395, 454], "taco": [395, 454], "ai": [395, 431, 454, 457, 464], "ecosystem": [395, 454], "lightn": [395, 438], "pip": [395, 417, 420, 422, 425, 433, 436, 441, 443, 445, 446, 458], "wget": [395, 420, 422], "storag": [395, 422, 427, 460], "googleapi": [395, 422], "v1_6": [395, 422], "mobilenet_v1_1": [395, 422], "0_224_frozen": [395, 422], "quick": [395, 421, 464, 465], "overview": 395, "jupyterlab": [395, 431, 437, 439, 441, 445, 464], "studio": [395, 439, 448, 464], "topic": 395, "innov": [395, 439, 454, 464], "come": [395, 463], "soon": 395, "blog": [395, 454], "medium": [395, 454], "netflix": [395, 454], "2023": [395, 460, 466], "enhanc": [395, 431, 454, 457], "apr": [395, 454], "still": [395, 428, 454, 456, 457], "mlperf": [395, 454, 466], "5x": [395, 454], "neurip": [395, 454], "oct": [395, 454], "quala": [395, 454], "minilm": [395, 454, 466], "releas": [395, 425, 437, 439, 441, 445, 447, 467], "legal": [395, 467], "secur": [395, 452, 454, 467], "idea": [395, 453, 460, 463], "feel": 395, "bridg": [396, 424], "vanilla": [396, 424], "abcadaptor": 396, "__init__": [396, 412, 413, 427, 463], "query_fw_cap": 396, "query_fused_pattern": 396, "he": 396, "besid": [396, 415], "describ": [396, 421, 461], "past": 396, "mainten": 396, "difficult": [396, 460], "abil": [396, 413, 421, 460], "modif": [396, 412, 421, 436], "fragment": 396, "scenario": [396, 411, 415, 428, 453], "granular": [396, 421, 424, 434, 456, 460, 465], "semant": [396, 421], "mla": [396, 456], "becom": [396, 419, 453], "explor": 396, "inspect_tensor": 396, "op_list": [396, 461], "iteration_list": 396, "inspect_typ": 396, "save_to_disk": 396, "quantization_cfg": 396, "set_tensor": 396, "tensor_dict": 396, "diagnosis_help": 396, "linux": [411, 420, 442, 448], "x86_64": 411, "aarch64": 411, "encount": 412, "consum": 412, "previous": 412, "lack": [412, 420], "faster": [412, 414, 419, 454, 463, 466], "treat": 412, "manner": [412, 415, 430], "labelbal": [412, 413], "300": [412, 413], "16": [412, 413, 460, 466], "customis": [412, 413], "One": [413, 417, 424, 453, 454, 463], "ensp": [413, 427, 462], "imagerecord": [413, 417, 465], "image_nam": 413, "cocorecord": 413, "gt": [413, 460, 462], "int32": 413, "int64": 413, "offer": 413, "style_transf": 413, "content": 413, "tfrecorddataset": 413, "helloworld": [413, 462], "aid": 414, "deploy": [414, 431, 448, 460], "infrastructur": 414, "expens": [415, 428, 463], "deploi": [415, 428, 463], "power": [415, 428, 442, 452, 454], "mobil": [415, 428, 466], "produc": 415, "instruct": [415, 425, 429, 443, 446, 454, 455, 456], "logit": 415, "softmax": 415, "l": [415, 461, 463], "kd": 415, "kullback": 415, "leibler": 415, "patient": 415, "compact": [415, 428, 434, 453], "agnost": 415, "resourc": [415, 463], "convolut": [415, 454], "ia": 415, "attach": [415, 428, 460], "shallow": 415, "deepest": 415, "deeper": 415, "paper": [415, 453, 460], "10006": [415, 416], "student_output": [415, 416], "student_loss": [415, 416], "training_func_for_nc": [415, 416], "distil_loss_conf": 415, "accordingli": [415, 439], "promis": [416, 428, 453], "huge": [416, 453], "heavi": 416, "light": 416, "booster": 416, "degrad": [416, 453, 463], "incorpor": [416, 463], "novel": [416, 431, 442, 448], "place": [416, 425, 453, 461], "illustr": 416, "comb": 416, "distillation_criterion": [416, 428, 451], "q_conf": 416, "horovod": 417, "instal": [417, 420, 422, 431, 433, 436, 439, 443, 446, 448, 449, 452, 467], "builtin": 417, "program": [417, 426, 429, 431, 448], "addition": [417, 463], "enable_eager_execut": 417, "yaml_file_path": 417, "pre_process": 417, "simpli": [417, 430, 431, 433, 436, 448], "evaluation_result": 417, "evaluation_time_cost": 417, "partit": [417, 453], "distributedsampl": 417, "train_sampl": 417, "train_dataset": [417, 456], "num_replica": 417, "rank": 417, "train_load": 417, "train_kwarg": 417, "adadelta": 417, "distributedoptim": 417, "named_paramet": 417, "broadcast_paramet": 417, "root_rank": 417, "broadcast_optimizer_st": 417, "set_epoch": 417, "batch_idx": 417, "zero_grad": [417, 428, 453], "nll_loss": 417, "log_interv": 417, "0f": 417, "tloss": 417, "6f": 417, "dry_run": 417, "test_func": 417, "host": 417, "num_of_process": 417, "002": 417, "ssh": [417, 448], "prompt": 417, "readm": 417, "exactli": [417, 432], "cd": [417, 425], "recognit": [417, 419, 453, 461], "line": [417, 424, 431, 436, 437, 461], "resnet50_v1": [417, 428], "resizecropimagenet": [417, 462], "realiz": [417, 427, 450, 457, 459], "tow": 417, "node1": 417, "node2": 417, "TO": [417, 433], "your_node1_nam": 417, "your_node2_nam": 417, "resnet50_fp32_pretrained_model": 417, "nc_resnet50_v1": 417, "resnet": [417, 466], "varieti": [418, 455, 463], "demonstr": [418, 431, 461], "10k": [418, 422], "speedup": [418, 424, 456], "2x": [418, 424, 452], "vnni": [418, 424, 455, 456], "exchang": 419, "hope": 419, "inc_model": [419, 430], "fp32_onnx_config": 419, "verifi": 419, "vgg16": [419, 466], "mobilenet": [419, 459, 466], "rcnn": 419, "torchscript": [419, 460], "unsupport": [419, 428, 453], "add_relu": 419, "conv1d_relu": 419, "conv2d_relu": 419, "group_norm": 419, "hardswish": 419, "instance_norm": 419, "layer_norm": 419, "leaky_relu": 419, "sigmoid": 419, "due": [419, 453, 456, 460, 461], "toolchain": 420, "bare": 420, "metal": 420, "sudo": [420, 434], "apt": [420, 425, 434, 442], "python3": 420, "dev": [420, 441, 445], "distutil": 420, "essenti": 420, "git": [420, 425], "libgl1": 420, "mesa": 420, "glx": 420, "libglib2": 420, "ln": 420, "sf": 420, "usr": 420, "incompat": 420, "88": [420, 459, 466], "80": [420, 460, 461, 466], "pyobject": 420, "reinstal": 420, "importerror": 420, "libgl": 420, "No": [420, 428, 452, 454], "yum": [420, 425], "opencv": [420, 442], "conda": [420, 425, 434, 442, 458], "13": [420, 425, 460], "pend": 420, "sqlalchemi": 420, "27": [420, 466], "alemb": 420, "forg": [420, 425], "friendli": [421, 428, 460, 465], "dive": [421, 464], "unless": 421, "purpos": [421, 429, 448, 455, 456], "setup": [421, 425, 443, 446, 453], "let": [421, 436, 453, 455, 465], "syntax": 421, "go": [421, 443, 446, 455, 462], "up1": 421, "up2": 421, "valid_mixed_precis": 421, "per_tensor": [421, 456, 465], "addn": 421, "grappler_optim": 421, "constfold": 421, "arithmet": 421, "debug_stripp": 421, "jupyt": [422, 439, 441, 442, 445], "lab": [422, 441, 442, 443, 445, 446], "click": [422, 424, 431, 432, 439, 442, 448, 454, 461], "major": [423, 456, 460], "concept": [423, 459, 464], "rather": 423, "custom_metr": 423, "refin": [423, 453], "These": 424, "broad": [424, 437, 464], "420": 424, "geomean": 424, "snippet": 424, "gui": [424, 453], "upload": [424, 443, 446], "button": [424, 442, 448], "dispatch": 424, "qintegerop": [424, 456], "plan": 424, "oneapi": [425, 454, 464], "analyt": [425, 454, 464], "success": 425, "frequent": 425, "ask": 425, "pypi": [425, 443, 446], "nightli": 425, "clone": [425, 441, 445], "consolid": 425, "latest": [425, 454, 458], "eas": [425, 433, 454], "along": [425, 453], "streamlin": 425, "scienc": 425, "websit": 425, "anaconda": 425, "suit": [425, 449, 461], "esri": 425, "formerli": 425, "skylak": 425, "cascad": 425, "lake": [425, 429, 454], "cooper": [425, 429, 454], "ic": [425, 454], "sapphir": 425, "rapid": 425, "hbm": 425, "arctic": 425, "sound": 425, "pont": 425, "vecchio": 425, "cento": 425, "ubuntu": [425, 452], "22": [425, 466], "04": [425, 452, 466], "fortensorflow": 425, "forpytorch": 425, "12": [425, 466], "11": [425, 427, 429, 460, 463], "tf_enable_onednn_opt": 425, "onednn": [425, 456], "newer": 425, "copyright": 426, "subject": 426, "accompani": 426, "research": [426, 460], "wish": 426, "bibtex": 426, "misc": 426, "author": 426, "feng": 426, "tian": 426, "hanwen": 426, "haihao": [426, 453], "shen": [426, 453], "suyu": 426, "chen": 426, "howpublish": 426, "year": 426, "logo": [426, 452], "atom": 426, "phi": 426, "pentium": 426, "vtune": 426, "corpor": [426, 452], "subsidiari": [426, 452], "brand": [426, 452], "claim": [426, 452], "popularli": 427, "industri": [427, 454], "label_map": 427, "decis": 427, "ap": 427, "curv": 427, "turn": [427, 442], "target_boxes_num": 427, "str_label": 427, "int_label": 427, "inturn": 427, "cocomap": 427, "vocmap": 427, "categor": 427, "multiclass": 427, "multilabel": 427, "multi_metr": 427, "newmetr": 427, "reset": 427, "reflect": [427, 452, 462], "deliv": [428, 454], "conveni": 428, "upgrad": 428, "veri": [428, 449, 456, 463], "speed": [428, 439, 453, 454, 456, 463], "fundament": 428, "comprehens": [428, 464], "kind": 428, "resort": 428, "automodelforsequenceclassif": 428, "autotoken": 428, "val_dataset": [428, 456], "val_dataload": [428, 456], "worker": [428, 456], "ping_memori": [428, 456], "formul": 428, "effort": 428, "written": 428, "onnxrt_integ": [428, 465], "onnxrt_qlinear": [428, 465], "image_tensor": [428, 465], "post_training_dynamic_qu": [428, 455, 463], "1000": [428, 465], "2000": 428, "sampling_s": [428, 465], "model_wis": [428, 465], "op_dict": 428, "op_wis": [428, 461, 465], "sigopt_api_token": [428, 459, 463], "sigopt_project_id": [428, 459, 463], "sigopt_experiment_nam": [428, 459, 463], "demo": 428, "600": [428, 466], "training_arg": 428, "emul": [428, 456], "trainer": [428, 439], "similar": [428, 455, 460, 463, 465], "briefli": [428, 460], "maxim": [428, 453, 463], "pruning_func": 428, "num_train_epoch": [428, 453], "train_dataload": [428, 453, 456], "n_gpu": 428, "gradient_accumulation_step": 428, "clip_grad_norm_": 428, "max_grad_norm": 428, "rate": [428, 453, 456], "start_epoch": [428, 455, 465], "end_epoch": [428, 455, 465], "97": [428, 460, 466], "newli": [428, 453], "on_after_optimizer_step": [428, 453], "layer3": [428, 453], "lr_schedul": [428, 453], "weight_decai": [428, 465], "0004": 428, "nesterov": [428, 465], "randomresizedcrop": [428, 462], "totensor": [428, 462], "485": 428, "456": 428, "406": 428, "nepoch": 428, "cnt": 428, "loss_sum": 428, "iter_bar": 428, "tqdm": 428, "desc": 428, "teacher_logit": 428, "train_fun": 428, "training_func": 428, "recent": [428, 429], "growth": [428, 429, 453], "complex": [428, 429, 453], "significantli": [428, 429, 453, 463], "bandwidth": [428, 429], "exit_polici": [428, 465], "determinist": 428, "arbitrari": [428, 451], "meaning": [428, 451], "reli": [428, 460], "prune_conf": 428, "quantization_aware_training_conf": 428, "aforement": 428, "previou": [428, 453, 458, 460, 461, 463, 464], "inset": 428, "p_conf": [428, 451], "ssd_mobilenet_v1": 428, "benchmarkconf": 428, "half": [429, 439], "sixteen": 429, "launch": [429, 449], "3rd": [429, 454, 456, 457], "gen": [429, 454, 456, 457], "codenam": 429, "boost": [429, 432, 448, 453, 454], "x86": 429, "avx512": [429, 456], "vcvtne2ps2bf16": 429, "vcvtneps2bf16": 429, "vdpbf16p": 429, "consequ": 429, "avx512_bf16": 429, "cuda": [429, 431, 433, 456], "persist": 430, "gap": 430, "brought": [430, 432, 439, 456], "tf2": 430, "h5": 430, "hybridblock": 430, "0000": 430, "saved_result": 430, "simplifi": [431, 442, 448, 453], "subsequ": [431, 448], "acquir": 431, "analysi": [431, 448, 453, 459], "heurist": [431, 448], "rule": [431, 453], "great": 431, "facilit": 431, "autocast": 431, "my_model": 431, "no_grad": 431, "memory_format": 431, "112": [431, 466], "rand": [431, 460], "plugin": [431, 449], "aw": [431, 439, 454, 466], "sagemak": [431, 439], "inlin": [431, 436, 439], "neural_cod": [431, 433, 435, 436, 437, 439], "bench": 431, "superbench": 431, "enjoi": [432, 436, 439], "rebuild": [432, 441, 445], "reload": [432, 449], "modern": 433, "democrat": [433, 454], "programm": [433, 439, 448], "nano_bf16_channels_last": 433, "resnet18": [433, 466], "nano_bf16_ipex_channels_last": 433, "nano_bf16_ipex": 433, "nano_bf16": 433, "nano_fp32_channels_last": 433, "nano_fp32_ipex_channels_last": 433, "nano_fp32_ipex": 433, "nano_gpu_to_cpu": 433, "nano_int8": 433, "nano_jit_bf16_channels_last": 433, "nano_jit_bf16_ipex_channels_last": 433, "nano_jit_bf16_ipex": 433, "nano_jit_bf16": 433, "nano_jit_fp32_channels_last": 433, "nano_jit_fp32_ipex_channels_last": 433, "nano_jit_fp32_ipex": 433, "nano_jit_fp32": 433, "nano_onnxruntime_fp32": 433, "nano_onnxruntime_int8_qlinear": 433, "openvino": 433, "nano_openvino_fp32": 433, "nano_openvino_int8": 433, "bc": [434, 442], "conda_prefix": 434, "echo": 434, "tradit": [434, 453], "libjemalloc": 434, "libiomp5": 434, "home": 434, "lib": 434, "ld_preload": 434, "malloc_conf": 434, "oversize_threshold": 434, "background_thread": 434, "metadata_thp": 434, "dirty_decay_m": 434, "9000000000": 434, "muzzy_decay_m": 434, "kmp_affin": 434, "kmp_blocktim": 434, "dnnl_primitive_cache_capac": 434, "cpufreq": 434, "scaling_governor": 434, "powersav": 434, "tee": 434, "pytorch_jit_script": [435, 438], "pytorch_channels_last": [435, 438], "run_bench": 435, "patch": [435, 448], "patch_path": 435, "your_patch_path": 435, "sweep": 435, "sweep_object": 435, "bench_config": 435, "bench_featur": 435, "sai": 436, "run_glu": [436, 437], "requisit": 436, "task_nam": [436, 437], "do_ev": [436, 437], "remain": 436, "itself": 436, "run_glue_optim": 436, "static_ipex": 436, "auto_qu": 437, "v4": [437, 466], "albert": [437, 466], "sst2": 437, "alexnet": [437, 466], "pytorch_amp": 438, "optimize_for_infer": 438, "pytorch_jit_trac": 438, "pytorch_jit_script_ofi": 438, "pytorch_jit_trace_ofi": 438, "torchdynamo": 438, "pytorch_torchdynamo_jit_script": 438, "pytorch_torchdynamo_jit_trac": 438, "pytorch_torchdynamo_jit_script_ofi": 438, "pytorch_torchdynamo_jit_trace_ofi": 438, "pytorch_inc_bf16": 438, "pytorch_inc_static_quant_fx": 438, "pytorch_inc_static_quant_ipex": 438, "pytorch_inc_dynamic_qu": 438, "pytorch_ipex_fp32": 438, "pytorch_ipex_bf16": 438, "pytorch_ipex_int8_static_qu": 438, "pytorch_ipex_int8_dynamic_qu": 438, "blade": 438, "disc": 438, "pytorch_aliblad": 438, "pytorch_lightning_bf16_cpu": 438, "tensorflow_amp": 438, "keras_amp": 438, "tensorflow_inc": 438, "keras_inc": 438, "onnx_inc_static_quant_qlinear": 438, "onnx_inc_static_quant_qdq": 438, "onnx_inc_dynamic_qu": 438, "optimum": [438, 439], "pytorch_inc_huggingface_optimum_stat": 438, "pytorch_inc_huggingface_optimum_dynam": 438, "intel_extension_for_transform": 438, "bigdl": [438, 439], "nano": [438, 439], "nano_": 438, "inc_auto": 438, "delight": 439, "announc": 439, "v": [439, 448, 453, 463, 465], "500": 439, "isa": 439, "adjust": [439, 456, 460], "xpu": 439, "delta": 439, "acc_delta": 439, "int8_acc": 439, "fp32_acc": 439, "ext": [441, 443, 445, 446, 447], "nodej": [441, 445], "jlpm": [441, 445], "pin": [441, 445], "yarn": [441, 445], "npm": [441, 442, 445], "lieu": [441, 445], "labextens": [441, 442, 445], "typescript": [441, 445], "watch": [441, 445], "termin": [441, 442, 445], "immedi": [441, 445, 453], "refresh": [441, 445], "browser": [441, 445], "wait": [441, 445, 448], "rebuilt": [441, 445], "easier": [441, 445, 448, 454], "symlink": [441, 445], "down": 442, "finish": 442, "enter": [442, 448], "blank": 442, "cell": 442, "gain": [442, 451, 454], "mkl": 442, "jemalloc": 442, "pip3": 442, "headless": 442, "pyproject": [443, 446], "toml": [443, 446], "twine": [443, 446], "whl": [443, 446], "dist": [443, 446], "sdist": [443, 446], "bdist_wheel": [443, 446], "deprec": [443, 446, 462], "frontend": [443, 446], "login": [443, 446, 459], "repositori": [443, 446], "cut": [443, 446], "fork": [443, 446], "admin_github_token": [443, 446], "pypi_token": [443, 446], "npm_token": [443, 446], "secret": [443, 446], "panel": [443, 446, 448], "draft": [443, 446], "changelog": [443, 446, 447], "pkg": [443, 446], "bot": [443, 446], "pick": [443, 446, 449], "feedstock": [443, 446], "hatch": 446, "notabl": 447, "vscode": [447, 449], "daili": 448, "give": [448, 463], "advantag": [448, 453, 455, 463], "remot": 448, "re": 448, "market": 448, "uninstal": 448, "fill": [448, 459, 462], "upper": 448, "sidebar": 448, "hover": 448, "track": [448, 459], "argpars": 448, "pop": 448, "diff": 448, "manifest": 449, "declar": 449, "palett": 449, "registercommand": 449, "amodio": 449, "tsl": 449, "matcher": 449, "dbaeumer": 449, "eslint": 449, "press": 449, "f5": 449, "ctrl": [449, 466], "hello": 449, "world": 449, "breakpoint": 449, "consol": 449, "relaunch": 449, "toolbar": 449, "node_modul": 449, "viewlet": 449, "dropdown": 449, "runner": 449, "startup": 449, "bundl": 449, "multi_object": 450, "benefit": 451, "instanti": 451, "platinum": [452, 466], "8358": 452, "manufactur": 452, "m50cyp2sbstd": 452, "bio": 452, "se5c620": 452, "86b": 452, "0005": 452, "2202160810": 452, "microcod": 452, "0xd000332": 452, "irq": 452, "60ghz": 452, "6chz": 452, "turbo": 452, "perf": 452, "512gb": 452, "16x32gb": 452, "ddr4": 452, "3200": 452, "mt": 452, "nic": 452, "1x": 452, "ethernet": 452, "100mb": 452, "i350": 452, "gigabit": 452, "drive": 452, "intel_ssdsckkb48": 452, "447": 452, "1g": 452, "publicli": 452, "degre": 452, "mark": 452, "trademark": 452, "neuron": 453, "art": 453, "grown": 453, "unpreced": 453, "increasingli": 453, "crucial": 453, "stand": 453, "delet": 453, "commonli": 453, "salient": 453, "shrink": 453, "contextu": 453, "howev": [453, 460], "scene": 453, "haven": 453, "color": 453, "lowest": [453, 463], "formula": [453, 460], "emsp": 453, "downstream": 453, "finetun": 453, "prone": 453, "larger": [453, 460], "co": 453, "discourag": 453, "push": [453, 460], "penal": 453, "parameter": 453, "exemplifi": 453, "complement": 453, "fortieth": 453, "miss": [453, 456], "pruner2": 453, "mention": 453, "readi": 453, "hesit": 453, "sst": [453, 466], "25": [453, 460, 466], "63": [453, 460, 466], "24": [453, 460, 463, 466], "35": [453, 466], "flan": 453, "t5": 453, "english": 453, "romanian": 453, "404": [453, 466], "381": 453, "yolov5": 453, "75": [453, 460, 466], "2x1": [453, 466], "801": 453, "7895": 453, "signific": [453, 454, 460], "reduct": [453, 465], "namhoon": 453, "lee": 453, "thalaiyasingam": 453, "ajanthan": 453, "philip": 453, "torr": 453, "2019": 453, "zafrir": 453, "ofir": 453, "ariel": 453, "larei": 453, "boudoukh": 453, "mosh": 453, "wasserblat": 453, "preprint": [453, 460], "2111": 453, "05754": 453, "2021": 453, "heterogen": 454, "mar": 454, "busi": 454, "jan": 454, "amx": 454, "4th": [454, 456], "mleffici": 454, "dec": 454, "wechat": 454, "deepen": 454, "foundat": 454, "intellig": 454, "vmware": 454, "applianc": 454, "bitnami": 454, "nov": 454, "sota": 454, "few": [454, 463], "plug": 454, "twitter": 454, "linkedin": 454, "zone": 454, "land": 454, "gcp": 454, "pat": 454, "keynot": 454, "intelon": 454, "sep": 454, "chines": 454, "aug": 454, "purif": 454, "sacrif": 454, "jun": 454, "partner": 454, "feb": 454, "joint": 454, "msft": 454, "bilibili": 454, "gestalt": 454, "ml": 454, "doubl": 454, "reconstruct": 454, "abound": 454, "lpot": [454, 458], "nextplatform": 454, "cern": 454, "gan": 454, "3dgan": 454, "iml": 454, "workshop": 454, "asplo": 454, "18": [454, 466], "highli": 454, "intelcaff": 454, "aris": 455, "henc": 455, "onnxrt_qoper": 455, "quant_aware_train": 455, "weight_compress": [455, 465], "initial_spars": [455, 465], "prune_typ": [455, 465], "basic_magnitud": [455, 465], "update_frequ": 455, "prune_domain": 455, "tile_pattern_1x1": 455, "invent": 456, "int4": 456, "cost": 456, "On": 456, "theoret": 456, "affin": 456, "zeropoint": 456, "asymmetr": [456, 463], "255": [456, 460], "overflow": 456, "solv": [456, 458], "fbgemm": 456, "unseen": 456, "enough": 456, "peopl": 456, "mimic": 456, "fact": 456, "ultim": 456, "pain": 456, "lossi": 456, "chart": [456, 459, 461], "understand": [456, 461, 464], "philosophi": 456, "request": 456, "neither": 456, "nor": 456, "val_load": 456, "avg": 456, "themselv": 456, "tensorrtexecutionprovid": 456, "cudaexecutionprovid": 456, "ON": 457, "forc": 457, "postposttrainingquantconfig": 457, "bf16wrapper": 457, "retrac": 457, "site": 458, "assist": 458, "sed": 458, "your_script": 458, "backbon": 459, "interact": 459, "sigopt_experiment_id": 459, "nc": [459, 463], "certain": 459, "suffici": 459, "ordinari": 459, "capac": 459, "receiv": 459, "latenc": [459, 463], "draw": [459, 463], "durat": 459, "8266": 459, "8372": 459, "2132": 459, "83": [459, 460, 466], "7495": 459, "8299": 459, "8294": 459, "85": [459, 460, 466], "0837": 459, "8291": 459, "4469": 459, "llm": 460, "gigant": 460, "systemat": 460, "quantif": 460, "migrat": [460, 464], "difficulti": 460, "mathemat": 460, "allevi": 460, "coarsest": 460, "finer": [460, 463], "row": 460, "matric": 460, "similarli": 460, "finest": 460, "consumpt": 460, "why": [460, 461], "suppos": 460, "6839": 460, "4741": 460, "7451": 460, "9301": 460, "1742": 460, "6835": 460, "frac": 460, "q_min": 460, "q_max": 460, "clip": 460, "zp": 460, "q_x": 460, "clamp_": 460, "round_": 460, "w_q": 460, "00296431384049356": 460, "59": [460, 466], "172": 460, "192": 460, "w_dq": 460, "1220": 460, "0500": 460, "1430": 460, "2570": 460, "1890": 460, "mseloss": 460, "1983354538679123": 460, "6848": 460, "4743": 460, "7440": 460, "9308": 460, "1749": 460, "385297635664756e": 460, "07": [460, 465, 466], "affect": 460, "quantize_per_channel": 460, "x_tmp": 460, "detach": 460, "keepdim": 460, "divid": [460, 463], "dequantize_per_channel": 460, "0029": [460, 466], "0036": 460, "162": [460, 466], "48": [460, 466], "72": [460, 466], "93": [460, 466], "207": [460, 466], "139": [460, 466], "6837": 460, "4734": 460, "1751": 460, "6821": 460, "637690492221736e": 460, "6376e": 460, "3852e": 460, "cdot": 460, "quantize_per_tensor_absmax": 460, "n_bit": 460, "div_": 460, "0806": 460, "7589": 460, "6038": 460, "3815": 460, "5040": 460, "7174": 460, "5444": 460, "5826": 460, "7772": 460, "5555": 460, "3740": 460, "3253": 460, "0698": 460, "1381": 460, "5972": 460, "0086": 460, "0737": 460, "8298": 460, "6883": 460, "2991": 460, "1601": 460, "6506": 460, "8246": 460, "3924": 460, "3845": 460, "8768": 460, "w_scale": 460, "x_q": 460, "x_scale": 460, "84": [460, 466], "120": 460, "0059755356051027775": 460, "89": [460, 466], "119": [460, 466], "57": [460, 466], "91": [460, 466], "006533813662827015": 460, "y_q": 460, "17509": 460, "7608": 460, "4055": 460, "16599": 460, "21020": 460, "10016": 460, "9860": 460, "22444": 460, "y_dq": 460, "6836": 460, "2970": 460, "1583": 460, "6481": 460, "8207": 460, "3911": 460, "3850": 460, "8763": 460, "though": 460, "prove": 460, "simplic": 460, "middl": 460, "denot": 460, "fp1": 460, "fp2": 460, "subsect": [460, 465], "explain": 460, "even": 460, "suppress": 460, "straightforward": 460, "intuit": 460, "x1": [460, 463], "x2": [460, 463], "herebi": 460, "recalcul": 460, "sq": 460, "overhead": 460, "stai": 460, "hardtanh": 460, "t5norm": 460, "llamanorm": 460, "groupnorm": 460, "lambada": 460, "sweet": 460, "spot": 460, "region": 460, "bigscienc": 460, "560m": 460, "65": [460, 466], "44": [460, 466], "66": [460, 466], "76": [460, 466], "1b7": 460, "71": [460, 466], "43": [460, 466], "67": [460, 466], "78": [460, 462, 466], "56": [460, 466], "58": [460, 466], "55": [460, 466], "3b": 460, "73": [460, 466], "69": [460, 466], "74": [460, 466], "7b1": 460, "77": [460, 466], "46": [460, 466], "17": [460, 466], "82": [460, 466], "52": [460, 466], "facebook": 460, "125m": 460, "41": [460, 466], "70": [460, 466], "94": [460, 462, 466], "79": [460, 461, 466], "60": [460, 466], "81": [460, 466], "26": [460, 466], "39": [460, 466], "68": [460, 462, 466], "eleutherai": 460, "6b": 460, "29": [460, 466], "96": [460, 466], "jason": 460, "wei": 460, "emerg": 460, "transact": 460, "yvinec": 460, "edouard": 460, "proceed": 460, "cvf": 460, "winter": 460, "xiui": 460, "2209": 460, "13325": 460, "xiao": 460, "guangxuan": 460, "2211": 460, "10438": 460, "discov": 461, "valuabl": 461, "instrument": 461, "writer": 461, "_pre_eval_hook": 461, "_post_eval_hook": 461, "submodul": 461, "whitelist": 461, "_recordingobserv": 461, "output_tensors_dict": 461, "current_it": 461, "get_tensor_valu": 461, "_observer_forward_hook": 461, "activation_post_process": 461, "_add_observer_": 461, "named_children": 461, "leaf": 461, "add_modul": 461, "register_forward_hook": 461, "dump_tim": 461, "summarywrit": 461, "_acc": 461, "tune_": 461, "add_graph": 461, "get_observer_dict": 461, "observer_dict": 461, "is_quant": 461, "add_histogram": 461, "shell": 461, "bind_al": 461, "logdir_spec": 461, "tune_0_acc0": 461, "tune_1": 461, "tune_1_acc0": 461, "four": 461, "baseline_acc_0": 461, "776": 461, "tune_1_acc_0": 461, "095": 461, "runs_v3": 461, "image_recognit": 461, "run_tuning_dump_tensor": 461, "sh": 461, "inceptionv3": 461, "skip": [461, 463], "v0": 461, "cg": 461, "conv0": 461, "bash": 461, "run_tun": 461, "topologi": 461, "inception_v3": 461, "dataset_loc": 461, "inceptionv3_fp32_pretrained_model": 461, "nc_inceptionv3": 461, "inceptionv3_dump_tensor": 461, "poor": 461, "eightbit": 461, "disappear": 461, "centercrop": 462, "randomcrop": 462, "cropres": 462, "decodeimag": 462, "jpeg": 462, "encodejp": 462, "alignimagechannel": 462, "116": 462, "103": 462, "017": 462, "bilinearimagenet": [462, 465], "topilimag": 462, "padding_mod": 462, "border": 462, "pixel": 462, "edg": 462, "colorjitt": 462, "bright": 462, "satur": 462, "hue": 462, "jitter": 462, "tondarrai": 462, "quickli": [463, 464], "travers": 463, "human": 463, "concret": 463, "aggress": 463, "classic": 463, "six": 463, "At": 463, "ii": 463, "iii": 463, "post_training_auto_qu": 463, "iv": 463, "vi": 463, "increment": 463, "primari": 463, "highest": 463, "spent": 463, "hawq_v2_loss": 463, "model_loss": 463, "black": 463, "compli": 463, "posterior": 463, "focu": 463, "short": 463, "never": 463, "loglevel": 463, "endlessli": 463, "perspect": 463, "smbo": 463, "trial": 463, "appl": 463, "surrog": 463, "repeat": 463, "quantil": 463, "densiti": 463, "parzen": 463, "greatest": 463, "hour": 463, "dai": 463, "next_tune_cfg": 463, "overridden": 463, "cluster": 463, "seamlessli": 463, "mpi": 463, "replic": 463, "replica": 463, "fed": 463, "synchron": 463, "mpirun": 463, "number_of_process": 463, "run_cmd": 463, "abctunestrategi": 463, "familiar": 464, "notebook": 464, "organ": 465, "logic": 465, "mobilenet_v1": 465, "hyper": 465, "40": [465, 466], "06": [465, 466], "beta_1": 465, "beta_2": 465, "epsilon": 465, "sparsecategoricalcrossentropi": 465, "sum_over_batch_s": 465, "from_logit": 465, "54": [465, 466], "19": [465, 466], "overal": 465, "8380": 466, "visit": 466, "performancethroughput": 466, "sec": 466, "86": 466, "00": 466, "170": 466, "82x": 466, "92": 466, "85x": 466, "61": 466, "83x": 466, "densenet": 466, "121": 466, "274": 466, "148": 466, "161": 466, "132": 466, "39x": 466, "169": 466, "38": 466, "36": 466, "191": 466, "31": 466, "118": 466, "61x": 466, "cnn": 466, "incept": 466, "37": 466, "84x": 466, "resnet101": 466, "21x": 466, "70x": 466, "51": 466, "14x": 466, "34": 466, "955": 466, "328": 466, "91x": 466, "709": 466, "282": 466, "51x": 466, "v3": 466, "337": 466, "09": 466, "160": 466, "11x": 466, "438": 466, "204": 466, "223": 466, "105": 466, "12x": 466, "10x": 466, "47": 466, "1347": 466, "439": 466, "07x": 466, "1192": 466, "492": 466, "42x": 466, "412": 466, "376": 466, "662": 466, "397": 466, "66x": 466, "299": 466, "23": 466, "154": 466, "93x": 466, "476": 466, "227": 466, "fashion": 466, "2734": 466, "1299": 466, "498": 466, "178": 466, "79x": 466, "427": 466, "173": 466, "47x": 466, "resnetv2": 466, "194": 466, "146": 466, "33x": 466, "237": 466, "187": 466, "27x": 466, "152": 466, "155": 466, "38x": 466, "302": 466, "215": 466, "40x": 466, "03": 466, "346": 466, "312": 466, "277": 466, "60x": 466, "273": 466, "31x": 466, "18x": 466, "53x": 466, "24x": 466, "219": 466, "vgg19": 466, "193": 466, "11506": 466, "9665": 466, "19x": 466, "xception": 466, "262": 466, "137": 466, "barthez": 466, "143": 466, "02x": 466, "20x": 466, "209": 466, "08x": 466, "221": 466, "stsb": 466, "218": 466, "16x": 466, "62": 466, "57x": 466, "55x": 466, "56x": 466, "53": 466, "89x": 466, "blendcnn": 466, "4885": 466, "3715": 466, "camembert": 466, "206": 466, "09x": 466, "deberta": 466, "125": 466, "366": 466, "197": 466, "399": 466, "flaubert": 466, "592": 466, "385": 466, "54x": 466, "wikitext": 466, "hubert": 466, "446": 466, "181": 466, "46x": 466, "layoutlm": 466, "longform": 466, "49": 466, "mbart": 466, "625": 466, "451": 466, "lvwerra": 466, "pegasu": 466, "samsum": 466, "peleenet": 466, "402": 466, "29x": 466, "pokemon": 466, "275": 466, "334": 466, "48x": 466, "reform": 466, "crime": 466, "punish": 466, "153": 466, "06x": 466, "657": 466, "327": 466, "01x": 466, "812": 466, "344": 466, "36x": 466, "360": 466, "23x": 466, "resnext101": 466, "32x8d": 466, "182": 466, "squeezebert": 466, "195": 466, "150": 466, "30x": 466, "75x": 466, "transfo": 466, "xl": 466, "41x": 466, "wave2vec2": 466, "22x": 466, "102": 466, "00x": 466, "115": 466, "17x": 466, "yolo": 466, "232": 466, "28x": 466, "664": 466, "329": 466, "832": 466, "338": 466, "433": 466, "164": 466, "63x": 466, "836": 466, "1396": 466, "463": 466, "90x": 466, "159": 466, "32x": 466, "968": 466, "473": 466, "05x": 466, "958": 466, "477": 466, "arcfac": 466, "126": 466, "78x": 466, "298": 466, "124": 466, "624": 466, "254": 466, "45x": 466, "caffenet": 466, "1432": 466, "540": 466, "65x": 466, "1460": 466, "357": 466, "265": 466, "35x": 466, "86x": 466, "524": 466, "duc": 466, "efficientnet": 466, "1211": 466, "758": 466, "856": 466, "762": 466, "emot": 466, "ferplu": 466, "925": 466, "694": 466, "fcn": 466, "25x": 466, "googlenet": 466, "771": 466, "571": 466, "763": 466, "579": 466, "hf": 466, "156": 466, "multilingu": 466, "99x": 466, "199": 466, "104": 466, "73x": 466, "449": 466, "74x": 466, "l12": 466, "h384": 466, "466": 466, "247": 466, "88x": 466, "l6": 466, "523": 466, "354": 466, "183": 466, "107": 466, "spanbert": 466, "208": 466, "795": 466, "780": 466, "591": 466, "515": 466, "15x": 466, "2370": 466, "1526": 466, "2216": 466, "1506": 466, "2078": 466, "1028": 466, "1762": 466, "76x": 466, "mobilenetv2": 466, "2615": 466, "1645": 466, "59x": 466, "2461": 466, "1674": 466, "766": 466, "431": 466, "77x": 466, "575": 466, "430": 466, "34x": 466, "747": 466, "564": 466, "594": 466, "590": 466, "643": 466, "253": 466, "shufflenet": 466, "2354": 466, "1461": 466, "1850": 466, "1368": 466, "squeezenet": 466, "2484": 466, "1912": 466, "2526": 466, "1911": 466, "710": 466, "549": 466, "622": 466, "497": 466, "652": 466, "507": 466, "573": 466, "470": 466, "527": 466, "396": 466, "68x": 466, "tini": 466, "647": 466, "514": 466, "26x": 466, "ultrafac": 466, "314": 466, "50x": 466, "304": 466, "316": 466, "315": 466, "zfnet": 466, "462": 466, "268": 466, "72x": 466, "465": 466, "62x": 466, "436": 466, "270": 466, "429": 466, "92x": 466, "94x": 466, "331": 466, "242": 466, "37x": 466, "98x": 466, "taskdataset": 466, "accuracyspars": 466, "ratiospars": 466, "commentsbalancedor": 466, "unbalanc": 466, "mini": 466, "answeringsquad": 466, "87f1": 466, "momentumunbalanc": 466, "momentumbalanc": 466, "90f1": 466, "59f1": 466, "23f1": 466, "classificationmrpc": 466, "52f1": 466, "26f1": 466, "classificationsst": 466, "61accuraci": 466, "recognitionimagenet": 466, "95top1": 466, "v5s6": 466, "detectioncoco": 466, "ap0": 466, "6ap0": 466, "393": 466, "584": 466, "34f1": 466, "lassounbalanc": 466, "classificationmnli": 466, "mm": 466, "allbalanc": 466, "32accuraci": 466, "sensitivitybalanc": 466, "classificationqqp": 466, "classificationqnli": 466, "54accuraci": 466, "em": 466, "7965": 466, "wideresnet40": 466, "9522": 466, "8178": 466, "0213": 466, "8235": 466, "027": 466, "5494": 466, "7153": 466, "5540": 466, "0046": 466, "5523": 466, "vgg": 466, "bn": 466, "7022": 466, "7415": 466, "7025": 466, "0003": 466, "wip": 466, "6739": 466, "7399": 466, "6845": 466, "0106": 466, "7034": 466, "8382": 466, "bilstm": 466, "8314": 466, "9403": 466, "9048": 466, "0734": 466, "7323": 466, "8256": 466, "8084": 466, "8814": 466, "7442": 466, "8371": 466, "0119": 466, "0115": 466, "tinybert": 466, "8018": 466, "8044": 466, "8363": 466, "8411": 466, "8025": 466, "8074": 466, "0007": 466, "0030": 466, "8626": 466, "8213": 466, "9091": 466, "8782": 466, "8684": 466, "8259": 466, "0058": 466, "distilroberta": 466, "6057": 466, "6455": 466, "6187": 466, "0130": 466, "c6i": 466, "2xlarg": 466, "c6a": 466, "c6g": 466, "a100cuda": 466, "executionprovid": 466}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [312, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "adaptor"], [155, 0, 0, "-", "algorithm"], [158, 0, 0, "-", "benchmark"], [162, 0, 0, "-", "compression"], [176, 0, 0, "-", "conf"], [178, 0, 0, "-", "config"], [179, 0, 0, "-", "contrib"], [204, 0, 0, "-", "data"], [259, 0, 0, "-", "experimental"], [319, 0, 0, "-", "metric"], [321, 0, 0, "-", "mix_precision"], [323, 0, 0, "-", "model"], [331, 0, 0, "-", "objective"], [332, 0, 0, "-", "profiling"], [354, 0, 0, "-", "quantization"], [362, 0, 0, "-", "strategy"], [374, 0, 0, "-", "template"], [375, 0, 0, "-", "training"], [379, 0, 0, "-", "utils"], [388, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "adaptor"], [3, 0, 0, "-", "keras"], [7, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [17, 0, 0, "-", "ox_utils"], [41, 0, 0, "-", "pytorch"], [42, 0, 0, "-", "query"], [43, 0, 0, "-", "tensorflow"], [107, 0, 0, "-", "tf_utils"], [147, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[1, 1, 1, "", "Adaptor"], [1, 2, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[3, 1, 1, "", "KerasAdaptor"], [3, 1, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras_utils": [[4, 0, 0, "-", "conv2d"], [5, 0, 0, "-", "dense"], [6, 0, 0, "-", "depthwise_conv2d"], [8, 0, 0, "-", "pool2d"], [9, 0, 0, "-", "quantizer"], [10, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, 1, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 1, 1, "", "CalibCollector"], [13, 1, 1, "", "CalibData"], [13, 1, 1, "", "CollectorBase"], [13, 1, 1, "", "DataIterLoader"], [13, 1, 1, "", "DataLoaderWrap"], [13, 1, 1, "", "NameCollector"], [13, 1, 1, "", "OpType"], [13, 1, 1, "", "TensorCollector"], [13, 2, 1, "", "amp_convert"], [13, 2, 1, "", "calib_model"], [13, 2, 1, "", "check_mx_version"], [13, 2, 1, "", "combine_capabilities"], [13, 2, 1, "", "create_data_example"], [13, 2, 1, "", "distribute_calib_tensors"], [13, 2, 1, "", "ensure_list"], [13, 2, 1, "", "fuse"], [13, 2, 1, "", "get_framework_name"], [13, 2, 1, "", "is_model_quantized"], [13, 2, 1, "", "isiterable"], [13, 2, 1, "", "make_module"], [13, 2, 1, "", "make_nc_model"], [13, 2, 1, "", "make_symbol_block"], [13, 2, 1, "", "ndarray_to_device"], [13, 2, 1, "", "parse_tune_config"], [13, 2, 1, "", "prepare_dataloader"], [13, 2, 1, "", "prepare_model"], [13, 2, 1, "", "prepare_model_data"], [13, 2, 1, "", "quantize_sym_model"], [13, 2, 1, "", "query_quantizable_nodes"], [13, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[14, 1, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 1, 1, "", "ONNXRT_QDQAdaptor"], [14, 1, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 1, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [16, 0, 0, "-", "calibrator"], [29, 0, 0, "-", "operators"], [38, 0, 0, "-", "quantizer"], [39, 0, 0, "-", "smooth_quant"], [40, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, 1, 1, "", "CalibratorBase"], [16, 1, 1, "", "HistogramCollector"], [16, 1, 1, "", "KLCalibrator"], [16, 1, 1, "", "MinMaxCalibrator"], [16, 1, 1, "", "PercentileCalibrator"], [16, 2, 1, "", "calib_registry"], [16, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[18, 0, 0, "-", "activation"], [19, 0, 0, "-", "argmax"], [20, 0, 0, "-", "attention"], [21, 0, 0, "-", "binary_op"], [22, 0, 0, "-", "concat"], [23, 0, 0, "-", "conv"], [24, 0, 0, "-", "direct_q8"], [25, 0, 0, "-", "embed_layernorm"], [26, 0, 0, "-", "gather"], [27, 0, 0, "-", "gavgpool"], [28, 0, 0, "-", "gemm"], [30, 0, 0, "-", "lstm"], [31, 0, 0, "-", "matmul"], [32, 0, 0, "-", "maxpool"], [33, 0, 0, "-", "ops"], [34, 0, 0, "-", "pad"], [35, 0, 0, "-", "pooling"], [36, 0, 0, "-", "resize"], [37, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, 1, 1, "", "ActivationOperator"], [18, 1, 1, "", "QActivationOperator"], [18, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, 1, 1, "", "ArgMaxOperator"], [19, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, 1, 1, "", "AttentionOperator"], [20, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, 1, 1, "", "BinaryOperator"], [21, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, 1, 1, "", "ConcatOperator"], [22, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, 1, 1, "", "ConvOperator"], [23, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, 1, 1, "", "Direct8BitOperator"], [24, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, 1, 1, "", "EmbedLayerNormalizationOperator"], [25, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, 1, 1, "", "GatherOperator"], [26, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, 1, 1, "", "GlobalAveragePoolOperator"], [27, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, 1, 1, "", "GemmOperator"], [28, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, 1, 1, "", "MatMulOperator"], [31, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, 1, 1, "", "MaxPoolOperator"], [32, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[33, 1, 1, "", "Operator"], [33, 1, 1, "", "QOperator"], [33, 2, 1, "", "op_registry"], [33, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[34, 1, 1, "", "PadOperator"], [34, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[35, 1, 1, "", "PoolOperator"], [35, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[36, 1, 1, "", "QResizeOperator"], [36, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[37, 1, 1, "", "QSplitOperator"], [37, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[38, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[39, 1, 1, "", "ORTSmoothQuant"], [39, 2, 1, "", "get_quant_dequant_output"], [39, 2, 1, "", "make_sub_graph"], [39, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[40, 1, 1, "", "QuantFormat"], [40, 1, 1, "", "QuantType"], [40, 1, 1, "", "QuantizationMode"], [40, 1, 1, "", "QuantizedInitializer"], [40, 1, 1, "", "QuantizedValue"], [40, 1, 1, "", "QuantizedValueType"], [40, 1, 1, "", "ValueInfo"], [40, 2, 1, "", "attribute_to_kwarg"], [40, 2, 1, "", "calculate_scale_zp"], [40, 2, 1, "", "cast_tensor"], [40, 2, 1, "", "collate_preds"], [40, 2, 1, "", "dequantize_data"], [40, 2, 1, "", "dequantize_data_with_scale_zero"], [40, 2, 1, "", "dtype_to_name"], [40, 2, 1, "", "find_by_name"], [40, 2, 1, "", "float_to_bfloat16"], [40, 2, 1, "", "float_to_float16"], [40, 2, 1, "", "is_B_transposed"], [40, 2, 1, "", "make_dquant_node"], [40, 2, 1, "", "make_quant_node"], [40, 2, 1, "", "quantize_data"], [40, 2, 1, "", "quantize_data_per_channel"], [40, 2, 1, "", "quantize_data_with_scale_zero"], [40, 2, 1, "", "quantize_nparray"], [40, 2, 1, "", "remove_init_from_model_input"], [40, 2, 1, "", "split_shared_bias"], [40, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.pytorch": [[41, 1, 1, "", "PyTorchAdaptor"], [41, 1, 1, "", "PyTorchQuery"], [41, 1, 1, "", "PyTorch_FXAdaptor"], [41, 1, 1, "", "PyTorch_IPEXAdaptor"], [41, 1, 1, "", "TemplateAdaptor"], [41, 2, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[42, 1, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[43, 1, 1, "", "TensorFlowAdaptor"], [43, 1, 1, "", "TensorflowQuery"], [43, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[44, 0, 0, "-", "graph_converter"], [45, 0, 0, "-", "graph_converter_without_calib"], [83, 0, 0, "-", "graph_rewriter"], [106, 0, 0, "-", "graph_util"], [108, 0, 0, "-", "quantize_graph"], [135, 0, 0, "-", "quantize_graph_common"], [136, 0, 0, "-", "smooth_quant_calibration"], [137, 0, 0, "-", "smooth_quant_scaler"], [138, 0, 0, "-", "tf2onnx_converter"], [141, 0, 0, "-", "transform_graph"], [144, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[44, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[45, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[47, 0, 0, "-", "bf16"], [72, 0, 0, "-", "generic"], [82, 0, 0, "-", "graph_base"], [91, 0, 0, "-", "int8"], [97, 0, 0, "-", "onnx"], [102, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[46, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[46, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[48, 0, 0, "-", "convert_add_to_biasadd"], [49, 0, 0, "-", "convert_layout"], [50, 0, 0, "-", "convert_leakyrelu"], [51, 0, 0, "-", "convert_nan_to_random"], [52, 0, 0, "-", "convert_placeholder_to_const"], [53, 0, 0, "-", "dequantize_cast_optimizer"], [54, 0, 0, "-", "dilated_contraction"], [55, 0, 0, "-", "dummy_biasadd"], [56, 0, 0, "-", "expanddims_optimizer"], [57, 0, 0, "-", "fetch_weight_from_reshape"], [58, 0, 0, "-", "fold_batch_norm"], [59, 0, 0, "-", "fold_constant"], [60, 0, 0, "-", "fuse_biasadd_add"], [61, 0, 0, "-", "fuse_column_wise_mul"], [62, 0, 0, "-", "fuse_conv_with_math"], [63, 0, 0, "-", "fuse_decomposed_bn"], [64, 0, 0, "-", "fuse_decomposed_in"], [65, 0, 0, "-", "fuse_gelu"], [66, 0, 0, "-", "fuse_layer_norm"], [67, 0, 0, "-", "fuse_pad_with_conv"], [68, 0, 0, "-", "fuse_pad_with_fp32_conv"], [69, 0, 0, "-", "fuse_reshape_transpose"], [70, 0, 0, "-", "graph_cse_optimizer"], [71, 0, 0, "-", "grappler_pass"], [73, 0, 0, "-", "insert_print_node"], [74, 0, 0, "-", "move_squeeze_after_relu"], [75, 0, 0, "-", "pre_optimize"], [76, 0, 0, "-", "remove_training_nodes"], [77, 0, 0, "-", "rename_batch_norm"], [78, 0, 0, "-", "split_shared_input"], [79, 0, 0, "-", "strip_equivalent_nodes"], [80, 0, 0, "-", "strip_unused_nodes"], [81, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[48, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[49, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[50, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[51, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[52, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[53, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[54, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[55, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[56, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[57, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[58, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[59, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[60, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[61, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[62, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[63, 1, 1, "", "FuseDecomposedBNOptimizer"], [63, 2, 1, "", "bypass_reshape"], [63, 2, 1, "", "get_const_dim_count"], [63, 2, 1, "", "node_from_map"], [63, 2, 1, "", "node_name_from_input"], [63, 2, 1, "", "valid_reshape_inputs"], [63, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[64, 1, 1, "", "FuseDecomposedINOptimizer"], [64, 2, 1, "", "bypass_reshape"], [64, 2, 1, "", "get_const_dim_count"], [64, 2, 1, "", "node_from_map"], [64, 2, 1, "", "node_name_from_input"], [64, 2, 1, "", "valid_reshape_inputs"], [64, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[65, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[66, 1, 1, "", "FuseLayerNormOptimizer"], [66, 2, 1, "", "node_from_map"], [66, 2, 1, "", "node_name_from_input"], [66, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[67, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[68, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[69, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[70, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[71, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[73, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[74, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[75, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[76, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[77, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[78, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[79, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[80, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[81, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[82, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[84, 0, 0, "-", "freeze_fake_quant"], [85, 0, 0, "-", "freeze_value"], [86, 0, 0, "-", "freeze_value_without_calib"], [87, 0, 0, "-", "fuse_conv_redundant_dequantize"], [88, 0, 0, "-", "fuse_conv_requantize"], [89, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [90, 0, 0, "-", "fuse_matmul_requantize"], [92, 0, 0, "-", "meta_op_optimizer"], [93, 0, 0, "-", "post_hostconst_converter"], [94, 0, 0, "-", "post_quantized_op_cse"], [95, 0, 0, "-", "rnn_convert"], [96, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[84, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[85, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[86, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[87, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[88, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[89, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[90, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [90, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [90, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [90, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[92, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[93, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[94, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[95, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[96, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[98, 0, 0, "-", "onnx_graph"], [99, 0, 0, "-", "onnx_node"], [100, 0, 0, "-", "onnx_schema"], [101, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[98, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[99, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[100, 1, 1, "", "OnnxOpSchema"], [100, 2, 1, "", "get_max_supported_opset_version"], [100, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[101, 1, 1, "", "SeqType"], [101, 2, 1, "", "add_port_to_name"], [101, 2, 1, "", "are_shapes_equal"], [101, 2, 1, "", "assert_error"], [101, 2, 1, "", "compute_const_folding_using_tf"], [101, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [101, 2, 1, "", "find_opset"], [101, 2, 1, "", "get_index_from_strided_slice_of_shape"], [101, 2, 1, "", "get_subgraphs_from_onnx"], [101, 2, 1, "", "get_tensorflow_node_attr"], [101, 2, 1, "", "get_tensorflow_node_shape_attr"], [101, 2, 1, "", "get_tensorflow_tensor_data"], [101, 2, 1, "", "get_tensorflow_tensor_shape"], [101, 2, 1, "", "infer_onnx_shape_dtype"], [101, 2, 1, "", "initialize_name_counter"], [101, 2, 1, "", "is_list_or_tuple"], [101, 2, 1, "", "is_onnx_domain"], [101, 2, 1, "", "make_onnx_inputs_outputs"], [101, 2, 1, "", "make_onnx_shape"], [101, 2, 1, "", "map_numpy_to_onnx_dtype"], [101, 2, 1, "", "map_onnx_to_numpy_type"], [101, 2, 1, "", "map_tensorflow_dtype"], [101, 2, 1, "", "read_tensorflow_node_attrs"], [101, 2, 1, "", "save_protobuf"], [101, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[103, 0, 0, "-", "insert_qdq_pattern"], [104, 0, 0, "-", "merge_duplicated_qdq"], [105, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[103, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[104, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[105, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[106, 1, 1, "", "GraphAnalyzer"], [106, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[110, 0, 0, "-", "qat"], [126, 0, 0, "-", "qdq"], [128, 0, 0, "-", "quantize_graph_base"], [129, 0, 0, "-", "quantize_graph_bn"], [130, 0, 0, "-", "quantize_graph_concatv2"], [131, 0, 0, "-", "quantize_graph_conv"], [132, 0, 0, "-", "quantize_graph_for_intel_cpu"], [133, 0, 0, "-", "quantize_graph_matmul"], [134, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[109, 0, 0, "-", "fake_quantize"], [111, 0, 0, "-", "quantize_config"], [112, 0, 0, "-", "quantize_helper"], [113, 0, 0, "-", "quantize_layers"], [118, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[109, 1, 1, "", "FakeQuantize"], [109, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[111, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[112, 2, 1, "", "init_quantize_config"], [112, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[114, 0, 0, "-", "optimize_layer"], [115, 0, 0, "-", "quantize_layer_add"], [116, 0, 0, "-", "quantize_layer_base"], [117, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[114, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[115, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[116, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[117, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[118, 1, 1, "", "QuantizeWrapper"], [118, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[119, 0, 0, "-", "fuse_qdq_bn"], [120, 0, 0, "-", "fuse_qdq_concatv2"], [121, 0, 0, "-", "fuse_qdq_conv"], [122, 0, 0, "-", "fuse_qdq_deconv"], [123, 0, 0, "-", "fuse_qdq_in"], [124, 0, 0, "-", "fuse_qdq_matmul"], [125, 0, 0, "-", "fuse_qdq_pooling"], [127, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[119, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[120, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[121, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[122, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[123, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[124, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[125, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[127, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[128, 1, 1, "", "QuantizeGraphBase"], [128, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[129, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[130, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[131, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[132, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[133, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[134, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[135, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[136, 1, 1, "", "SmoothQuantCalibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[137, 1, 1, "", "SmoothQuantScaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[138, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[139, 0, 0, "-", "bias_correction"], [140, 0, 0, "-", "graph_transform_base"], [142, 0, 0, "-", "insert_logging"], [143, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[139, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[140, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[142, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[143, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[144, 2, 1, "", "collate_tf_preds"], [144, 2, 1, "", "disable_random"], [144, 2, 1, "", "fix_ref_type_of_graph_def"], [144, 2, 1, "", "generate_feed_dict"], [144, 2, 1, "", "get_estimator_graph"], [144, 2, 1, "", "get_graph_def"], [144, 2, 1, "", "get_input_output_node_names"], [144, 2, 1, "", "get_model_input_shape"], [144, 2, 1, "", "get_tensor_by_name"], [144, 2, 1, "", "get_tensor_val_from_graph_node"], [144, 2, 1, "", "get_weight_from_input_tensor"], [144, 2, 1, "", "int8_node_name_reverse"], [144, 2, 1, "", "is_ckpt_format"], [144, 2, 1, "", "is_saved_model_format"], [144, 2, 1, "", "iterator_sess_run"], [144, 2, 1, "", "read_graph"], [144, 2, 1, "", "strip_equivalent_nodes"], [144, 2, 1, "", "strip_unused_nodes"], [144, 2, 1, "", "tf_diagnosis_helper"], [144, 2, 1, "", "version1_eq_version2"], [144, 2, 1, "", "version1_gt_version2"], [144, 2, 1, "", "version1_gte_version2"], [144, 2, 1, "", "version1_lt_version2"], [144, 2, 1, "", "version1_lte_version2"], [144, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[145, 0, 0, "-", "bf16_convert"], [146, 0, 0, "-", "hawq_metric"], [148, 0, 0, "-", "model_wrapper"], [149, 0, 0, "-", "pattern_detector"], [150, 0, 0, "-", "smooth_quant"], [151, 0, 0, "-", "symbolic_trace"], [152, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[145, 1, 1, "", "BF16ModuleWrapper"], [145, 2, 1, "", "Convert"], [145, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[146, 1, 1, "", "HessianTrace"], [146, 1, 1, "", "Node_collector"], [146, 2, 1, "", "compare_weights"], [146, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[149, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[150, 1, 1, "", "GraphTrace"], [150, 1, 1, "", "TorchSmoothQuant"], [150, 2, 1, "", "get_module"], [150, 2, 1, "", "set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[151, 2, 1, "", "symbolic_trace"], [151, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.util": [[152, 2, 1, "", "append_attr"], [152, 2, 1, "", "auto_copy"], [152, 2, 1, "", "calculate_quant_min_max"], [152, 2, 1, "", "check_cfg_and_qconfig"], [152, 2, 1, "", "collate_torch_preds"], [152, 2, 1, "", "fetch_module"], [152, 2, 1, "", "generate_activation_observer"], [152, 2, 1, "", "get_depth"], [152, 2, 1, "", "get_dict_at_depth"], [152, 2, 1, "", "get_element_under_depth"], [152, 2, 1, "", "get_embedding_contiguous"], [152, 2, 1, "", "get_example_input"], [152, 2, 1, "", "get_fallback_order"], [152, 2, 1, "", "get_mse_order_per_fp32"], [152, 2, 1, "", "get_mse_order_per_int8"], [152, 2, 1, "", "get_op_type_by_name"], [152, 2, 1, "", "get_quantizable_ops_from_cfgs"], [152, 2, 1, "", "get_torch_version"], [152, 2, 1, "", "input2tuple"], [152, 2, 1, "", "is_fused_module"], [152, 2, 1, "", "match_datatype_pattern"], [152, 2, 1, "", "paser_cfgs"], [152, 2, 1, "", "set_module"], [152, 2, 1, "", "simple_inference"], [152, 2, 1, "", "update_sq_scale"]], "neural_compressor.algorithm": [[153, 0, 0, "-", "algorithm"], [154, 0, 0, "-", "fast_bias_correction"], [156, 0, 0, "-", "smooth_quant"], [157, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[153, 1, 1, "", "ALGORITHMS"], [153, 1, 1, "", "Algorithm"], [153, 1, 1, "", "AlgorithmScheduler"], [153, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[154, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[156, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[157, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[158, 2, 1, "", "benchmark_with_raw_cmd"], [158, 2, 1, "", "call_one"], [158, 2, 1, "", "config_instance"], [158, 2, 1, "", "fit"], [158, 2, 1, "", "generate_prefix"], [158, 2, 1, "", "get_architecture"], [158, 2, 1, "", "get_bounded_threads"], [158, 2, 1, "", "get_core_ids"], [158, 2, 1, "", "get_physical_ids"], [158, 2, 1, "", "get_threads"], [158, 2, 1, "", "get_threads_per_core"], [158, 2, 1, "", "profile"], [158, 2, 1, "", "run_instance"], [158, 2, 1, "", "set_all_env_var"], [158, 2, 1, "", "set_env_var"], [158, 2, 1, "", "summary_benchmark"]], "neural_compressor.compression": [[159, 0, 0, "-", "callbacks"], [161, 0, 0, "-", "distillation"], [164, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[159, 1, 1, "", "BaseCallbacks"], [159, 1, 1, "", "DistillationCallbacks"], [159, 1, 1, "", "PruningCallbacks"], [159, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[159, 3, 1, "", "_epoch_ran"], [159, 3, 1, "", "best_model"], [159, 3, 1, "", "best_score"], [159, 3, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[160, 0, 0, "-", "criterions"]], "neural_compressor.compression.distillation.criterions": [[160, 1, 1, "", "Criterions"], [160, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [160, 1, 1, "", "KnowledgeDistillationFramework"], [160, 1, 1, "", "KnowledgeDistillationLoss"], [160, 1, 1, "", "PyTorchCriterions"], [160, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [160, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [160, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [160, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [160, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [160, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [160, 1, 1, "", "SelfKnowledgeDistillationLoss"], [160, 1, 1, "", "TensorflowCriterions"], [160, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [160, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [160, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [160, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.pruner": [[163, 0, 0, "-", "criteria"], [166, 0, 0, "-", "model_slim"], [169, 0, 0, "-", "patterns"], [170, 0, 0, "-", "pruners"], [171, 0, 0, "-", "regs"], [172, 0, 0, "-", "schedulers"], [173, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[163, 1, 1, "", "GradientCriterion"], [163, 1, 1, "", "MagnitudeCriterion"], [163, 1, 1, "", "PruningCriterion"], [163, 1, 1, "", "RetrainFreeCriterion"], [163, 1, 1, "", "SnipCriterion"], [163, 1, 1, "", "SnipMomentumBlockCriterion"], [163, 1, 1, "", "SnipMomentumCriterion"], [163, 2, 1, "", "get_criterion"], [163, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[163, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[163, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[163, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[163, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[163, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion": [[163, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[163, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[165, 0, 0, "-", "auto_slim"], [167, 0, 0, "-", "pattern_analyzer"], [168, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[165, 2, 1, "", "generate_ffn2_pruning_config"], [165, 2, 1, "", "generate_mha_pruning_config"], [165, 2, 1, "", "model_slim"], [165, 2, 1, "", "model_slim_ffn2"], [165, 2, 1, "", "model_slim_mha"], [165, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[167, 1, 1, "", "ClassifierHeadSearcher"], [167, 1, 1, "", "JitBasicSearcher"], [167, 1, 1, "", "Linear2LinearSearcher"], [167, 1, 1, "", "RecipeSearcher"], [167, 1, 1, "", "SelfMHASearcher"], [167, 2, 1, "", "get_attributes"], [167, 2, 1, "", "get_common_module"], [167, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[167, 3, 1, "", "device"], [167, 3, 1, "", "flatten_static_graph"], [167, 3, 1, "", "model"], [167, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[167, 3, 1, "", "device"], [167, 3, 1, "", "flatten_static_graph"], [167, 3, 1, "", "model"], [167, 3, 1, "", "searching_results"], [167, 3, 1, "", "static_graph"], [167, 3, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[167, 3, 1, "", "current_pattern"], [167, 3, 1, "", "device"], [167, 3, 1, "", "flatten_static_graph"], [167, 3, 1, "", "model"], [167, 3, 1, "", "searching_results"], [167, 3, 1, "", "static_graph"], [167, 3, 1, "", "target_layers"], [167, 3, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[167, 3, 1, "", "model"], [167, 3, 1, "", "recipe"], [167, 3, 1, "", "searching_results"], [167, 3, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[167, 3, 1, "", "device"], [167, 3, 1, "", "flatten_static_graph"], [167, 3, 1, "", "model"], [167, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[168, 1, 1, "", "LinearCompression"], [168, 1, 1, "", "LinearCompressionIterator"], [168, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[168, 3, 1, "", "device"], [168, 3, 1, "", "layer_1"], [168, 3, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[168, 3, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[169, 1, 1, "", "BasePattern"], [169, 1, 1, "", "PatternMHA"], [169, 1, 1, "", "PatternNInM"], [169, 1, 1, "", "PatternNxM"], [169, 2, 1, "", "get_pattern"], [169, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.BasePattern": [[169, 3, 1, "", "config"], [169, 3, 1, "", "invalid_layers"], [169, 3, 1, "", "is_global"], [169, 3, 1, "", "keep_mask_layers"], [169, 3, 1, "", "max_sparsity_ratio_per_op"], [169, 3, 1, "", "min_sparsity_ratio_per_op"], [169, 3, 1, "", "modules"], [169, 3, 1, "", "pattern"], [169, 3, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.PatternMHA": [[169, 3, 1, "", "M"], [169, 3, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.PatternNInM": [[169, 3, 1, "", "M"], [169, 3, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.PatternNxM": [[169, 3, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[170, 1, 1, "", "BasePruner"], [170, 1, 1, "", "BasicPruner"], [170, 1, 1, "", "BlockMaskPruner"], [170, 1, 1, "", "MultiheadAttentionPruner"], [170, 1, 1, "", "PatternLockPruner"], [170, 1, 1, "", "ProgressivePruner"], [170, 1, 1, "", "RetrainFreePruner"], [170, 2, 1, "", "get_pruner"], [170, 2, 1, "", "parse_valid_pruner_types"], [170, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.BasePruner": [[170, 3, 1, "", "config"], [170, 3, 1, "", "current_sparsity_ratio"], [170, 3, 1, "", "end_step"], [170, 3, 1, "", "global_step"], [170, 3, 1, "", "masks"], [170, 3, 1, "", "max_sparsity_ratio_per_op"], [170, 3, 1, "", "modules"], [170, 3, 1, "", "pattern"], [170, 3, 1, "", "pruning_frequency"], [170, 3, 1, "", "scheduler"], [170, 3, 1, "", "scores"], [170, 3, 1, "", "start_step"], [170, 3, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.BasicPruner": [[170, 3, 1, "", "criterion"], [170, 3, 1, "", "pattern"], [170, 3, 1, "", "reg"], [170, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.BlockMaskPruner": [[170, 3, 1, "", "criterion"], [170, 3, 1, "", "pattern"], [170, 3, 1, "", "reg"], [170, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.RetrainFreePruner": [[170, 3, 1, "", "criterion"], [170, 3, 1, "", "pattern"], [170, 3, 1, "", "reg"], [170, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.regs": [[171, 1, 1, "", "BaseReg"], [171, 1, 1, "", "GroupLasso"], [171, 2, 1, "", "get_reg"], [171, 2, 1, "", "get_reg_type"], [171, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[171, 3, 1, "", "alpha"], [171, 3, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[172, 1, 1, "", "IterativeScheduler"], [172, 1, 1, "", "OneshotScheduler"], [172, 1, 1, "", "PruningScheduler"], [172, 2, 1, "", "get_scheduler"], [172, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[172, 3, 1, "", "config"]], "neural_compressor.compression.pruner.utils": [[173, 2, 1, "", "check_config"], [173, 2, 1, "", "check_key_validity"], [173, 2, 1, "", "generate_pruner_config"], [173, 2, 1, "", "get_sparsity_ratio"], [173, 2, 1, "", "parse_last_linear"], [173, 2, 1, "", "parse_to_prune"], [173, 2, 1, "", "process_and_check_config"], [173, 2, 1, "", "process_config"], [173, 2, 1, "", "process_weight_config"], [173, 2, 1, "", "process_yaml_config"], [173, 2, 1, "", "reset_none_to_default"], [173, 2, 1, "", "update_params"]], "neural_compressor.conf": [[174, 0, 0, "-", "config"], [175, 0, 0, "-", "dotdict"], [177, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[174, 1, 1, "", "Benchmark_Conf"], [174, 1, 1, "", "Conf"], [174, 1, 1, "", "Distillation_Conf"], [174, 1, 1, "", "Graph_Optimization_Conf"], [174, 1, 1, "", "MixedPrecision_Conf"], [174, 1, 1, "", "NASConfig"], [174, 1, 1, "", "PrunerV2"], [174, 1, 1, "", "Pruning_Conf"], [174, 1, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[175, 1, 1, "", "DotDict"], [175, 2, 1, "", "deep_get"], [175, 2, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[177, 1, 1, "", "AccuracyCriterion"], [177, 1, 1, "", "BenchmarkConfig"], [177, 1, 1, "", "DistillationConfig"], [177, 1, 1, "", "KnowledgeDistillationLossConfig"], [177, 1, 1, "", "Options"], [177, 1, 1, "", "QuantizationConfig"], [177, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[178, 1, 1, "", "AccuracyCriterion"], [178, 1, 1, "", "BenchmarkConfig"], [178, 1, 1, "", "DistillationConfig"], [178, 1, 1, "", "DotDict"], [178, 1, 1, "", "ExportConfig"], [178, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [178, 1, 1, "", "Keras"], [178, 1, 1, "", "KnowledgeDistillationLossConfig"], [178, 1, 1, "", "MXNet"], [178, 1, 1, "", "MixedPrecisionConfig"], [178, 1, 1, "", "NASConfig"], [178, 1, 1, "", "ONNX"], [178, 1, 1, "", "ONNXQlinear2QDQConfig"], [178, 1, 1, "", "Options"], [178, 1, 1, "", "PostTrainingQuantConfig"], [178, 1, 1, "", "PyTorch"], [178, 1, 1, "", "QuantizationAwareTrainingConfig"], [178, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [178, 1, 1, "", "TF2ONNXConfig"], [178, 1, 1, "", "TensorFlow"], [178, 1, 1, "", "Torch2ONNXConfig"], [178, 1, 1, "", "TuningCriterion"], [178, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[180, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[181, 0, 0, "-", "sigopt"], [182, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[181, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[182, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[187, 0, 0, "-", "dataloaders"], [199, 0, 0, "-", "datasets"], [203, 0, 0, "-", "filters"], [207, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[183, 0, 0, "-", "base_dataloader"], [184, 0, 0, "-", "dataloader"], [185, 0, 0, "-", "default_dataloader"], [186, 0, 0, "-", "fetcher"], [188, 0, 0, "-", "mxnet_dataloader"], [189, 0, 0, "-", "onnxrt_dataloader"], [190, 0, 0, "-", "pytorch_dataloader"], [191, 0, 0, "-", "sampler"], [192, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[183, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[184, 1, 1, "", "DataLoader"], [184, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[185, 1, 1, "", "DefaultDataLoader"], [185, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[186, 1, 1, "", "Fetcher"], [186, 1, 1, "", "IndexFetcher"], [186, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[188, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[189, 1, 1, "", "ONNXRTBertDataLoader"], [189, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[190, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[191, 1, 1, "", "BatchSampler"], [191, 1, 1, "", "IterableSampler"], [191, 1, 1, "", "Sampler"], [191, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[192, 1, 1, "", "TFDataDataLoader"], [192, 1, 1, "", "TensorflowBertDataLoader"], [192, 1, 1, "", "TensorflowDataLoader"], [192, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[193, 0, 0, "-", "bert_dataset"], [194, 0, 0, "-", "coco_dataset"], [195, 0, 0, "-", "dataset"], [196, 0, 0, "-", "dummy_dataset"], [197, 0, 0, "-", "dummy_dataset_v2"], [198, 0, 0, "-", "imagenet_dataset"], [200, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[193, 1, 1, "", "InputFeatures"], [193, 1, 1, "", "ONNXRTBertDataset"], [193, 1, 1, "", "ParseDecodeBert"], [193, 1, 1, "", "PytorchBertDataset"], [193, 1, 1, "", "TensorflowBertDataset"], [193, 1, 1, "", "TensorflowModelZooBertDataset"], [193, 2, 1, "", "convert_examples_to_features"], [193, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[194, 1, 1, "", "COCONpy"], [194, 1, 1, "", "COCORaw"], [194, 1, 1, "", "COCORecordDataset"], [194, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[195, 1, 1, "", "CIFAR10"], [195, 1, 1, "", "CIFAR100"], [195, 1, 1, "", "Dataset"], [195, 1, 1, "", "Datasets"], [195, 1, 1, "", "FashionMNIST"], [195, 1, 1, "", "ImageFolder"], [195, 1, 1, "", "IterableDataset"], [195, 1, 1, "", "MNIST"], [195, 1, 1, "", "MXNetCIFAR10"], [195, 1, 1, "", "MXNetCIFAR100"], [195, 1, 1, "", "MXNetDatasets"], [195, 1, 1, "", "MXNetFashionMNIST"], [195, 1, 1, "", "MXNetImageFolder"], [195, 1, 1, "", "MXNetMNIST"], [195, 1, 1, "", "ONNXRTITDatasets"], [195, 1, 1, "", "ONNXRTQLDatasets"], [195, 1, 1, "", "PyTorchDatasets"], [195, 1, 1, "", "PytorchCIFAR10"], [195, 1, 1, "", "PytorchCIFAR100"], [195, 1, 1, "", "PytorchFashionMNIST"], [195, 1, 1, "", "PytorchMNIST"], [195, 1, 1, "", "PytorchMxnetWrapDataset"], [195, 1, 1, "", "PytorchMxnetWrapFunction"], [195, 1, 1, "", "Tensorflow"], [195, 1, 1, "", "TensorflowCIFAR10"], [195, 1, 1, "", "TensorflowCIFAR100"], [195, 1, 1, "", "TensorflowDatasets"], [195, 1, 1, "", "TensorflowFashionMNIST"], [195, 1, 1, "", "TensorflowImageRecord"], [195, 1, 1, "", "TensorflowMNIST"], [195, 1, 1, "", "TensorflowTFRecordDataset"], [195, 1, 1, "", "TensorflowVOCRecord"], [195, 2, 1, "", "calculate_md5"], [195, 2, 1, "", "check_integrity"], [195, 2, 1, "", "dataset_registry"], [195, 2, 1, "", "download_url"], [195, 4, 1, "", "framework_datasets"], [195, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[196, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[197, 1, 1, "", "DummyDataset"], [197, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[198, 1, 1, "", "ImagenetRaw"], [198, 1, 1, "", "MXNetImagenetRaw"], [198, 1, 1, "", "ONNXRTImagenetDataset"], [198, 1, 1, "", "PytorchImagenetRaw"], [198, 1, 1, "", "TensorflowImagenetDataset"], [198, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[200, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[201, 0, 0, "-", "coco_filter"], [202, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[201, 1, 1, "", "LabelBalanceCOCORawFilter"], [201, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[202, 1, 1, "", "FILTERS"], [202, 1, 1, "", "Filter"], [202, 1, 1, "", "MXNetFilters"], [202, 1, 1, "", "ONNXRTITFilters"], [202, 1, 1, "", "ONNXRTQLFilters"], [202, 1, 1, "", "PyTorchFilters"], [202, 1, 1, "", "TensorflowFilters"], [202, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[205, 0, 0, "-", "coco_transform"], [206, 0, 0, "-", "imagenet_transform"], [208, 0, 0, "-", "postprocess"], [209, 0, 0, "-", "tokenization"], [210, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[205, 1, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[206, 1, 1, "", "BilinearImagenetTransform"], [206, 1, 1, "", "LabelShift"], [206, 1, 1, "", "ONNXResizeCropImagenetTransform"], [206, 1, 1, "", "OnnxBilinearImagenetTransform"], [206, 1, 1, "", "ParseDecodeImagenet"], [206, 1, 1, "", "ParseDecodeImagenetTransform"], [206, 1, 1, "", "QuantizedInput"], [206, 1, 1, "", "ResizeWithAspectRatio"], [206, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.postprocess": [[208, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[209, 1, 1, "", "BasicTokenizer"], [209, 1, 1, "", "FullTokenizer"], [209, 1, 1, "", "WordpieceTokenizer"], [209, 2, 1, "", "convert_by_vocab"], [209, 2, 1, "", "convert_to_unicode"], [209, 2, 1, "", "load_vocab"], [209, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[210, 1, 1, "", "AlignImageChannelTransform"], [210, 1, 1, "", "BaseTransform"], [210, 1, 1, "", "CastONNXTransform"], [210, 1, 1, "", "CastPyTorchTransform"], [210, 1, 1, "", "CastTFTransform"], [210, 1, 1, "", "CenterCropTFTransform"], [210, 1, 1, "", "CenterCropTransform"], [210, 1, 1, "", "CollectTransform"], [210, 1, 1, "", "ComposeTransform"], [210, 1, 1, "", "CropResizeTFTransform"], [210, 1, 1, "", "CropResizeTransform"], [210, 1, 1, "", "CropToBoundingBox"], [210, 1, 1, "", "InputFeatures"], [210, 1, 1, "", "MXNetCropResizeTransform"], [210, 1, 1, "", "MXNetCropToBoundingBox"], [210, 1, 1, "", "MXNetNormalizeTransform"], [210, 1, 1, "", "MXNetTransforms"], [210, 1, 1, "", "MXNetTranspose"], [210, 1, 1, "", "NormalizeTFTransform"], [210, 1, 1, "", "NormalizeTransform"], [210, 1, 1, "", "ONNXRTCropToBoundingBox"], [210, 1, 1, "", "ONNXRTITTransforms"], [210, 1, 1, "", "ONNXRTQLTransforms"], [210, 1, 1, "", "PaddedCenterCropTransform"], [210, 1, 1, "", "ParseDecodeVocTransform"], [210, 1, 1, "", "PyTorchAlignImageChannel"], [210, 1, 1, "", "PyTorchCropResizeTransform"], [210, 1, 1, "", "PyTorchNormalizeTransform"], [210, 1, 1, "", "PyTorchTransforms"], [210, 1, 1, "", "PyTorchTranspose"], [210, 1, 1, "", "PytorchMxnetTransform"], [210, 1, 1, "", "PytorchMxnetWrapFunction"], [210, 1, 1, "", "RandomCropTFTransform"], [210, 1, 1, "", "RandomCropTransform"], [210, 1, 1, "", "RandomHorizontalFlip"], [210, 1, 1, "", "RandomResizedCropMXNetTransform"], [210, 1, 1, "", "RandomResizedCropPytorchTransform"], [210, 1, 1, "", "RandomResizedCropTFTransform"], [210, 1, 1, "", "RandomResizedCropTransform"], [210, 1, 1, "", "RandomVerticalFlip"], [210, 1, 1, "", "RescaleKerasPretrainTransform"], [210, 1, 1, "", "RescaleTFTransform"], [210, 1, 1, "", "RescaleTransform"], [210, 1, 1, "", "ResizeMXNetTransform"], [210, 1, 1, "", "ResizePytorchTransform"], [210, 1, 1, "", "ResizeTFTransform"], [210, 1, 1, "", "ResizeTransform"], [210, 1, 1, "", "ResizeWithRatio"], [210, 1, 1, "", "SquadExample"], [210, 1, 1, "", "TFModelZooCollectTransform"], [210, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [210, 1, 1, "", "TFSquadV1PostTransform"], [210, 1, 1, "", "TRANSFORMS"], [210, 1, 1, "", "TensorflowCropToBoundingBox"], [210, 1, 1, "", "TensorflowRandomHorizontalFlip"], [210, 1, 1, "", "TensorflowRandomVerticalFlip"], [210, 1, 1, "", "TensorflowResizeWithRatio"], [210, 1, 1, "", "TensorflowTransform"], [210, 1, 1, "", "TensorflowTransforms"], [210, 1, 1, "", "TensorflowTranspose"], [210, 1, 1, "", "TensorflowWrapFunction"], [210, 1, 1, "", "ToArray"], [210, 1, 1, "", "ToNDArrayTransform"], [210, 1, 1, "", "Transforms"], [210, 1, 1, "", "Transpose"], [210, 2, 1, "", "convert_examples_to_features"], [210, 2, 1, "", "get_final_text"], [210, 2, 1, "", "get_torchvision_map"], [210, 2, 1, "", "read_squad_examples"], [210, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[211, 0, 0, "-", "benchmark"], [214, 0, 0, "-", "common"], [220, 0, 0, "-", "component"], [221, 0, 0, "-", "compression"], [223, 0, 0, "-", "contrib"], [248, 0, 0, "-", "data"], [253, 0, 0, "-", "distillation"], [254, 0, 0, "-", "export"], [258, 0, 0, "-", "graph_optimization"], [266, 0, 0, "-", "metric"], [268, 0, 0, "-", "mixed_precision"], [269, 0, 0, "-", "model_conversion"], [272, 0, 0, "-", "nas"], [278, 0, 0, "-", "pruner_legacy"], [282, 0, 0, "-", "pruning"], [283, 0, 0, "-", "pruning_recipes"], [287, 0, 0, "-", "pruning_v2"], [288, 0, 0, "-", "pytorch_pruner"], [295, 0, 0, "-", "quantization"], [296, 0, 0, "-", "scheduler"], [301, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[211, 1, 1, "", "Benchmark"], [211, 2, 1, "", "get_architecture"], [211, 2, 1, "", "get_bounded_threads"], [211, 2, 1, "", "get_core_ids"], [211, 2, 1, "", "get_physical_ids"], [211, 2, 1, "", "get_threads"], [211, 2, 1, "", "get_threads_per_core"], [211, 2, 1, "", "set_all_env_var"], [211, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[212, 0, 0, "-", "criterion"], [213, 0, 0, "-", "dataloader"], [215, 0, 0, "-", "metric"], [216, 0, 0, "-", "model"], [217, 0, 0, "-", "optimizer"], [218, 0, 0, "-", "postprocess"], [219, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[212, 1, 1, "", "Criterions"], [212, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [212, 1, 1, "", "KnowledgeDistillationFramework"], [212, 1, 1, "", "KnowledgeDistillationLoss"], [212, 1, 1, "", "PyTorchCriterions"], [212, 1, 1, "", "PyTorchCrossEntropyLoss"], [212, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [212, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [212, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [212, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [212, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [212, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [212, 1, 1, "", "SelfKnowledgeDistillationLoss"], [212, 1, 1, "", "TensorFlowCrossEntropyLoss"], [212, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [212, 1, 1, "", "TensorflowCriterions"], [212, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [212, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [212, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [212, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[213, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[215, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[216, 1, 1, "", "Model"], [216, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[217, 1, 1, "", "Optimizers"], [217, 1, 1, "", "PyTorchOptimizers"], [217, 1, 1, "", "PyTorchSGD"], [217, 1, 1, "", "TensorFlowAdam"], [217, 1, 1, "", "TensorFlowAdamW"], [217, 1, 1, "", "TensorFlowSGD"], [217, 1, 1, "", "TensorflowOptimizers"], [217, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[218, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[219, 2, 1, "", "get_activation"], [219, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[220, 1, 1, "", "Component"]], "neural_compressor.experimental.compression": [[222, 0, 0, "-", "pruning"]], "neural_compressor.experimental.compression.pruning": [[222, 2, 1, "", "prepare_pruning"], [222, 2, 1, "", "save"]], "neural_compressor.experimental.contrib": [[224, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[225, 0, 0, "-", "sigopt"], [226, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[225, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[226, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[231, 0, 0, "-", "dataloaders"], [243, 0, 0, "-", "datasets"], [247, 0, 0, "-", "filters"], [250, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[227, 0, 0, "-", "base_dataloader"], [228, 0, 0, "-", "dataloader"], [229, 0, 0, "-", "default_dataloader"], [230, 0, 0, "-", "fetcher"], [232, 0, 0, "-", "mxnet_dataloader"], [233, 0, 0, "-", "onnxrt_dataloader"], [234, 0, 0, "-", "pytorch_dataloader"], [235, 0, 0, "-", "sampler"], [236, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[227, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[229, 1, 1, "", "DefaultDataLoader"], [229, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[230, 1, 1, "", "Fetcher"], [230, 1, 1, "", "IndexFetcher"], [230, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[232, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[233, 1, 1, "", "ONNXRTBertDataLoader"], [233, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[234, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[235, 1, 1, "", "BatchSampler"], [235, 1, 1, "", "IterableSampler"], [235, 1, 1, "", "Sampler"], [235, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[236, 1, 1, "", "TFDataDataLoader"], [236, 1, 1, "", "TensorflowBertDataLoader"], [236, 1, 1, "", "TensorflowDataLoader"], [236, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[237, 0, 0, "-", "bert_dataset"], [238, 0, 0, "-", "coco_dataset"], [239, 0, 0, "-", "dataset"], [240, 0, 0, "-", "dummy_dataset"], [241, 0, 0, "-", "dummy_dataset_v2"], [242, 0, 0, "-", "imagenet_dataset"], [244, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[237, 1, 1, "", "InputFeatures"], [237, 1, 1, "", "ONNXRTBertDataset"], [237, 1, 1, "", "ParseDecodeBert"], [237, 1, 1, "", "PytorchBertDataset"], [237, 1, 1, "", "TensorflowBertDataset"], [237, 1, 1, "", "TensorflowModelZooBertDataset"], [237, 2, 1, "", "convert_examples_to_features"], [237, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[238, 1, 1, "", "COCONpy"], [238, 1, 1, "", "COCORaw"], [238, 1, 1, "", "COCORecordDataset"], [238, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[239, 1, 1, "", "CIFAR10"], [239, 1, 1, "", "CIFAR100"], [239, 1, 1, "", "Dataset"], [239, 1, 1, "", "Datasets"], [239, 1, 1, "", "FashionMNIST"], [239, 1, 1, "", "ImageFolder"], [239, 1, 1, "", "IterableDataset"], [239, 1, 1, "", "MNIST"], [239, 1, 1, "", "MXNetCIFAR10"], [239, 1, 1, "", "MXNetCIFAR100"], [239, 1, 1, "", "MXNetDatasets"], [239, 1, 1, "", "MXNetFashionMNIST"], [239, 1, 1, "", "MXNetImageFolder"], [239, 1, 1, "", "MXNetMNIST"], [239, 1, 1, "", "ONNXRTITDatasets"], [239, 1, 1, "", "ONNXRTQLDatasets"], [239, 1, 1, "", "PyTorchDatasets"], [239, 1, 1, "", "PytorchCIFAR10"], [239, 1, 1, "", "PytorchCIFAR100"], [239, 1, 1, "", "PytorchFashionMNIST"], [239, 1, 1, "", "PytorchMNIST"], [239, 1, 1, "", "PytorchMxnetWrapDataset"], [239, 1, 1, "", "PytorchMxnetWrapFunction"], [239, 1, 1, "", "TensorflowCIFAR10"], [239, 1, 1, "", "TensorflowCIFAR100"], [239, 1, 1, "", "TensorflowDatasets"], [239, 1, 1, "", "TensorflowFashionMNIST"], [239, 1, 1, "", "TensorflowImageFolder"], [239, 1, 1, "", "TensorflowImageRecord"], [239, 1, 1, "", "TensorflowMNIST"], [239, 1, 1, "", "TensorflowTFRecordDataset"], [239, 1, 1, "", "TensorflowVOCRecord"], [239, 2, 1, "", "calculate_md5"], [239, 2, 1, "", "check_integrity"], [239, 2, 1, "", "dataset_registry"], [239, 2, 1, "", "download_url"], [239, 4, 1, "", "framework_datasets"], [239, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[240, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[241, 1, 1, "", "DummyDataset"], [241, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[242, 1, 1, "", "ImagenetRaw"], [242, 1, 1, "", "MXNetImagenetRaw"], [242, 1, 1, "", "ONNXRTImagenetDataset"], [242, 1, 1, "", "PytorchImagenetRaw"], [242, 1, 1, "", "TensorflowImagenetDataset"], [242, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[244, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[245, 0, 0, "-", "coco_filter"], [246, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[245, 1, 1, "", "LabelBalanceCOCORawFilter"], [245, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[246, 1, 1, "", "FILTERS"], [246, 1, 1, "", "Filter"], [246, 1, 1, "", "MXNetFilters"], [246, 1, 1, "", "ONNXRTITFilters"], [246, 1, 1, "", "ONNXRTQLFilters"], [246, 1, 1, "", "PyTorchFilters"], [246, 1, 1, "", "TensorflowFilters"], [246, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[249, 0, 0, "-", "imagenet_transform"], [251, 0, 0, "-", "tokenization"], [252, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[249, 1, 1, "", "BilinearImagenetTransform"], [249, 1, 1, "", "LabelShift"], [249, 1, 1, "", "ONNXResizeCropImagenetTransform"], [249, 1, 1, "", "OnnxBilinearImagenetTransform"], [249, 1, 1, "", "ParseDecodeImagenet"], [249, 1, 1, "", "ParseDecodeImagenetTransform"], [249, 1, 1, "", "QuantizedInput"], [249, 1, 1, "", "ResizeWithAspectRatio"], [249, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[251, 1, 1, "", "BasicTokenizer"], [251, 1, 1, "", "FullTokenizer"], [251, 1, 1, "", "WordpieceTokenizer"], [251, 2, 1, "", "convert_by_vocab"], [251, 2, 1, "", "convert_to_unicode"], [251, 2, 1, "", "load_vocab"], [251, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[252, 1, 1, "", "AlignImageChannelTransform"], [252, 1, 1, "", "BaseTransform"], [252, 1, 1, "", "CastONNXTransform"], [252, 1, 1, "", "CastPyTorchTransform"], [252, 1, 1, "", "CastTFTransform"], [252, 1, 1, "", "CenterCropTFTransform"], [252, 1, 1, "", "CenterCropTransform"], [252, 1, 1, "", "CollectTransform"], [252, 1, 1, "", "ComposeTransform"], [252, 1, 1, "", "CropResizeTFTransform"], [252, 1, 1, "", "CropResizeTransform"], [252, 1, 1, "", "CropToBoundingBox"], [252, 1, 1, "", "InputFeatures"], [252, 1, 1, "", "MXNetCropResizeTransform"], [252, 1, 1, "", "MXNetCropToBoundingBox"], [252, 1, 1, "", "MXNetNormalizeTransform"], [252, 1, 1, "", "MXNetTransforms"], [252, 1, 1, "", "MXNetTranspose"], [252, 1, 1, "", "NormalizeTFTransform"], [252, 1, 1, "", "NormalizeTransform"], [252, 1, 1, "", "ONNXRTCropToBoundingBox"], [252, 1, 1, "", "ONNXRTITTransforms"], [252, 1, 1, "", "ONNXRTQLTransforms"], [252, 1, 1, "", "PaddedCenterCropTransform"], [252, 1, 1, "", "ParseDecodeVocTransform"], [252, 1, 1, "", "PyTorchAlignImageChannel"], [252, 1, 1, "", "PyTorchCropResizeTransform"], [252, 1, 1, "", "PyTorchNormalizeTransform"], [252, 1, 1, "", "PyTorchTransforms"], [252, 1, 1, "", "PyTorchTranspose"], [252, 1, 1, "", "PytorchMxnetTransform"], [252, 1, 1, "", "PytorchMxnetWrapFunction"], [252, 1, 1, "", "RandomCropTFTransform"], [252, 1, 1, "", "RandomCropTransform"], [252, 1, 1, "", "RandomHorizontalFlip"], [252, 1, 1, "", "RandomResizedCropMXNetTransform"], [252, 1, 1, "", "RandomResizedCropPytorchTransform"], [252, 1, 1, "", "RandomResizedCropTFTransform"], [252, 1, 1, "", "RandomResizedCropTransform"], [252, 1, 1, "", "RandomVerticalFlip"], [252, 1, 1, "", "RescaleKerasPretrainTransform"], [252, 1, 1, "", "RescaleTFTransform"], [252, 1, 1, "", "RescaleTransform"], [252, 1, 1, "", "ResizeMXNetTransform"], [252, 1, 1, "", "ResizePytorchTransform"], [252, 1, 1, "", "ResizeTFTransform"], [252, 1, 1, "", "ResizeTransform"], [252, 1, 1, "", "ResizeWithRatio"], [252, 1, 1, "", "SquadExample"], [252, 1, 1, "", "TFModelZooCollectTransform"], [252, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [252, 1, 1, "", "TFSquadV1PostTransform"], [252, 1, 1, "", "TRANSFORMS"], [252, 1, 1, "", "TensorflowCropToBoundingBox"], [252, 1, 1, "", "TensorflowRandomHorizontalFlip"], [252, 1, 1, "", "TensorflowRandomVerticalFlip"], [252, 1, 1, "", "TensorflowResizeWithRatio"], [252, 1, 1, "", "TensorflowTransform"], [252, 1, 1, "", "TensorflowTransforms"], [252, 1, 1, "", "TensorflowTranspose"], [252, 1, 1, "", "TensorflowWrapFunction"], [252, 1, 1, "", "ToArray"], [252, 1, 1, "", "ToNDArrayTransform"], [252, 1, 1, "", "Transforms"], [252, 1, 1, "", "Transpose"], [252, 2, 1, "", "convert_examples_to_features"], [252, 2, 1, "", "get_final_text"], [252, 2, 1, "", "get_torchvision_map"], [252, 2, 1, "", "read_squad_examples"], [252, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[253, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[253, 3, 1, "", "_epoch_ran"], [253, 3, 1, "", "best_model"], [253, 3, 1, "", "best_score"], [253, 3, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[255, 0, 0, "-", "qlinear2qdq"], [256, 0, 0, "-", "tf2onnx"], [257, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[255, 2, 1, "", "check_model"], [255, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[256, 2, 1, "", "tf_to_fp32_onnx"], [256, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[257, 2, 1, "", "torch_to_fp32_onnx"], [257, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[258, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[260, 0, 0, "-", "bleu"], [261, 0, 0, "-", "bleu_util"], [262, 0, 0, "-", "coco_label_map"], [263, 0, 0, "-", "coco_tools"], [264, 0, 0, "-", "evaluate_squad"], [265, 0, 0, "-", "f1"], [267, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[260, 1, 1, "", "BLEU"], [260, 1, 1, "", "UnicodeRegex"], [260, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[260, 3, 1, "", "labels"], [260, 3, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[260, 3, 1, "", "nondigit_punct_re"], [260, 3, 1, "", "punct_nondigit_re"], [260, 3, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[261, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[263, 1, 1, "", "COCOEvalWrapper"], [263, 1, 1, "", "COCOWrapper"], [263, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [263, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [263, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[263, 3, 1, "", "dataset"], [263, 3, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[264, 2, 1, "", "evaluate"], [264, 2, 1, "", "exact_match_score"], [264, 2, 1, "", "f1_score"], [264, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[265, 2, 1, "", "evaluate"], [265, 2, 1, "", "f1_score"], [265, 2, 1, "", "metric_max_over_ground_truths"], [265, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[267, 1, 1, "", "Accuracy"], [267, 1, 1, "", "BaseMetric"], [267, 1, 1, "", "COCOmAPv2"], [267, 1, 1, "", "F1"], [267, 1, 1, "", "GeneralTopK"], [267, 1, 1, "", "Loss"], [267, 1, 1, "", "MAE"], [267, 1, 1, "", "METRICS"], [267, 1, 1, "", "MSE"], [267, 1, 1, "", "MXNetMetrics"], [267, 1, 1, "", "ONNXRTGLUE"], [267, 1, 1, "", "ONNXRTITMetrics"], [267, 1, 1, "", "ONNXRTQLMetrics"], [267, 1, 1, "", "PyTorchLoss"], [267, 1, 1, "", "PyTorchMetrics"], [267, 1, 1, "", "RMSE"], [267, 1, 1, "", "ROC"], [267, 1, 1, "", "SquadF1"], [267, 1, 1, "", "TensorflowCOCOMAP"], [267, 1, 1, "", "TensorflowMAP"], [267, 1, 1, "", "TensorflowMetrics"], [267, 1, 1, "", "TensorflowTopK"], [267, 1, 1, "", "TensorflowVOCMAP"], [267, 1, 1, "", "WrapMXNetMetric"], [267, 1, 1, "", "WrapONNXRTMetric"], [267, 1, 1, "", "WrapPyTorchMetric"], [267, 1, 1, "", "mIOU"], [267, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[267, 3, 1, "", "label_list"], [267, 3, 1, "", "pred_list"], [267, 3, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[267, 3, 1, "", "k"], [267, 3, 1, "", "num_correct"], [267, 3, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[267, 3, 1, "", "sample"], [267, 3, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[267, 3, 1, "", "compare_label"], [267, 3, 1, "", "label_list"], [267, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[267, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[267, 3, 1, "", "compare_label"], [267, 3, 1, "", "label_list"], [267, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[267, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[267, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[267, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[267, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[267, 3, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[267, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[267, 3, 1, "", "k"], [267, 3, 1, "", "num_correct"], [267, 3, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[268, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[269, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[270, 0, 0, "-", "basic_nas"], [271, 0, 0, "-", "dynas"], [273, 0, 0, "-", "nas"], [274, 0, 0, "-", "nas_utils"], [275, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[270, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[271, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[273, 1, 1, "", "NAS"], [273, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[274, 2, 1, "", "create_search_space_pool"], [274, 2, 1, "", "find_pareto_front"], [274, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[275, 1, 1, "", "BayesianOptimizationSearcher"], [275, 1, 1, "", "GridSearcher"], [275, 1, 1, "", "RandomSearcher"], [275, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[276, 0, 0, "-", "gradient_sensitivity"], [277, 0, 0, "-", "group_lasso"], [279, 0, 0, "-", "magnitude"], [280, 0, 0, "-", "pattern_lock"], [281, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[276, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[277, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[279, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[280, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[281, 1, 1, "", "Pruner"], [281, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[282, 1, 1, "", "Pruning"], [282, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[282, 3, 1, "", "conf"], [282, 3, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[284, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[285, 0, 0, "-", "pattern"], [286, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[285, 1, 1, "", "PATTERNS"], [285, 1, 1, "", "PatternBase"], [285, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[285, 3, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[286, 1, 1, "", "TilePatternBase"], [286, 1, 1, "", "TilePattern_1x1"], [286, 1, 1, "", "TilePattern_1x16"], [286, 1, 1, "", "TilePattern_1x2"], [286, 1, 1, "", "TilePattern_2x2"], [286, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[287, 1, 1, "", "Pruning"], [287, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[287, 3, 1, "", "conf"], [287, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[289, 0, 0, "-", "logger"], [290, 0, 0, "-", "patterns"], [291, 0, 0, "-", "prune_utils"], [292, 0, 0, "-", "pruner"], [293, 0, 0, "-", "pruning"], [294, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[290, 1, 1, "", "Pattern"], [290, 1, 1, "", "PatternNInM"], [290, 1, 1, "", "PatternNxM"], [290, 2, 1, "", "get_pattern"], [290, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[290, 3, 1, "", "is_global"], [290, 3, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[290, 3, 1, "", "M"], [290, 3, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[290, 3, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[291, 2, 1, "", "check_config"], [291, 2, 1, "", "parse_not_to_prune"], [291, 2, 1, "", "parse_to_prune"], [291, 2, 1, "", "process_and_check_config"], [291, 2, 1, "", "process_config"], [291, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[292, 1, 1, "", "MagnitudePruner"], [292, 1, 1, "", "PatternLockPruner"], [292, 1, 1, "", "Pruner"], [292, 1, 1, "", "SnipMomentumPruner"], [292, 1, 1, "", "SnipPruner"], [292, 2, 1, "", "get_pruner"], [292, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[292, 3, 1, "", "config"], [292, 3, 1, "", "current_sparsity_ratio"], [292, 3, 1, "", "end_step"], [292, 3, 1, "", "global_step"], [292, 3, 1, "", "masks"], [292, 3, 1, "", "max_sparsity_ratio_per_layer"], [292, 3, 1, "", "modules"], [292, 3, 1, "", "pattern"], [292, 3, 1, "", "scheduler"], [292, 3, 1, "", "scores"], [292, 3, 1, "", "start_step"], [292, 3, 1, "", "target_sparsity_ratio"], [292, 3, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[293, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[293, 3, 1, "", "config_file_path"], [293, 3, 1, "", "model"], [293, 3, 1, "", "pruner_info"], [293, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[294, 1, 1, "", "IterativeScheduler"], [294, 1, 1, "", "OneshotScheduler"], [294, 1, 1, "", "Scheduler"], [294, 2, 1, "", "get_scheduler"], [294, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[294, 3, 1, "", "config"]], "neural_compressor.experimental.quantization": [[295, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[296, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[297, 0, 0, "-", "auto_mixed_precision"], [298, 0, 0, "-", "basic"], [299, 0, 0, "-", "bayesian"], [300, 0, 0, "-", "exhaustive"], [302, 0, 0, "-", "mse"], [303, 0, 0, "-", "mse_v2"], [304, 0, 0, "-", "random"], [305, 0, 0, "-", "strategy"], [307, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[297, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[298, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[299, 1, 1, "", "BayesianOptimization"], [299, 1, 1, "", "BayesianTuneStrategy"], [299, 1, 1, "", "TargetSpace"], [299, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[300, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[302, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[303, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[304, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[305, 1, 1, "", "TuneStrategy"], [305, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[306, 0, 0, "-", "constant"], [308, 0, 0, "-", "tuning_sampler"], [309, 0, 0, "-", "tuning_space"], [310, 0, 0, "-", "tuning_structs"], [311, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[308, 1, 1, "", "FallbackTuningSampler"], [308, 1, 1, "", "ModelWiseTuningSampler"], [308, 1, 1, "", "OpTypeWiseTuningSampler"], [308, 1, 1, "", "OpWiseTuningSampler"], [308, 1, 1, "", "SmoothQuantSampler"], [308, 1, 1, "", "TuningOrder"], [308, 1, 1, "", "TuningSampler"], [308, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[309, 1, 1, "", "TuningItem"], [309, 1, 1, "", "TuningSpace"], [309, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [309, 2, 1, "", "pattern_to_internal"], [309, 2, 1, "", "pattern_to_path"], [309, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[310, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[311, 1, 1, "", "OrderedDefaultDict"], [311, 2, 1, "", "extract_data_type"], [311, 2, 1, "", "get_adaptor_name"], [311, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[313, 0, 0, "-", "bleu"], [314, 0, 0, "-", "bleu_util"], [315, 0, 0, "-", "coco_label_map"], [316, 0, 0, "-", "coco_tools"], [317, 0, 0, "-", "evaluate_squad"], [318, 0, 0, "-", "f1"], [320, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[313, 1, 1, "", "BLEU"], [313, 1, 1, "", "UnicodeRegex"], [313, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[313, 3, 1, "", "labels"], [313, 3, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[313, 3, 1, "", "nondigit_punct_re"], [313, 3, 1, "", "punct_nondigit_re"], [313, 3, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[314, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[316, 1, 1, "", "COCOEvalWrapper"], [316, 1, 1, "", "COCOWrapper"], [316, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [316, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [316, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[316, 3, 1, "", "dataset"], [316, 3, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[317, 2, 1, "", "evaluate"], [317, 2, 1, "", "exact_match_score"], [317, 2, 1, "", "f1_score"], [317, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[318, 2, 1, "", "evaluate"], [318, 2, 1, "", "f1_score"], [318, 2, 1, "", "metric_max_over_ground_truths"], [318, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[320, 1, 1, "", "Accuracy"], [320, 1, 1, "", "BaseMetric"], [320, 1, 1, "", "COCOmAPv2"], [320, 1, 1, "", "F1"], [320, 1, 1, "", "GeneralTopK"], [320, 1, 1, "", "Loss"], [320, 1, 1, "", "MAE"], [320, 1, 1, "", "METRICS"], [320, 1, 1, "", "MSE"], [320, 1, 1, "", "MXNetMetrics"], [320, 1, 1, "", "Metric"], [320, 1, 1, "", "ONNXRTGLUE"], [320, 1, 1, "", "ONNXRTITMetrics"], [320, 1, 1, "", "ONNXRTQLMetrics"], [320, 1, 1, "", "PyTorchLoss"], [320, 1, 1, "", "PyTorchMetrics"], [320, 1, 1, "", "RMSE"], [320, 1, 1, "", "ROC"], [320, 1, 1, "", "SquadF1"], [320, 1, 1, "", "TensorflowCOCOMAP"], [320, 1, 1, "", "TensorflowMAP"], [320, 1, 1, "", "TensorflowMetrics"], [320, 1, 1, "", "TensorflowTopK"], [320, 1, 1, "", "TensorflowVOCMAP"], [320, 1, 1, "", "WrapMXNetMetric"], [320, 1, 1, "", "WrapONNXRTMetric"], [320, 1, 1, "", "WrapPyTorchMetric"], [320, 1, 1, "", "mIOU"], [320, 2, 1, "", "metric_registry"], [320, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[320, 3, 1, "", "label_list"], [320, 3, 1, "", "pred_list"], [320, 3, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[320, 3, 1, "", "k"], [320, 3, 1, "", "num_correct"], [320, 3, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[320, 3, 1, "", "sample"], [320, 3, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[320, 3, 1, "", "compare_label"], [320, 3, 1, "", "label_list"], [320, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[320, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[320, 3, 1, "", "compare_label"], [320, 3, 1, "", "label_list"], [320, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[320, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[320, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[320, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[320, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[320, 3, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[320, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[320, 3, 1, "", "k"], [320, 3, 1, "", "num_correct"], [320, 3, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[321, 2, 1, "", "fit"]], "neural_compressor.model": [[322, 0, 0, "-", "base_model"], [324, 0, 0, "-", "keras_model"], [325, 0, 0, "-", "model"], [326, 0, 0, "-", "mxnet_model"], [327, 0, 0, "-", "nets_factory"], [328, 0, 0, "-", "onnx_model"], [329, 0, 0, "-", "tensorflow_model"], [330, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[322, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[324, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[325, 1, 1, "", "Model"], [325, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[326, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[327, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[328, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[329, 1, 1, "", "TensorflowBaseModel"], [329, 1, 1, "", "TensorflowCheckpointModel"], [329, 1, 1, "", "TensorflowModel"], [329, 1, 1, "", "TensorflowQATModel"], [329, 1, 1, "", "TensorflowSavedModelModel"], [329, 2, 1, "", "checkpoint_session"], [329, 2, 1, "", "estimator_session"], [329, 2, 1, "", "frozen_pb_session"], [329, 2, 1, "", "get_model_type"], [329, 2, 1, "", "graph_def_session"], [329, 2, 1, "", "graph_session"], [329, 2, 1, "", "keras_session"], [329, 2, 1, "", "load_saved_model"], [329, 2, 1, "", "saved_model_session"], [329, 2, 1, "", "slim_session"], [329, 2, 1, "", "validate_and_inference_input_output"], [329, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[330, 1, 1, "", "IPEXModel"], [330, 1, 1, "", "PyTorchBaseModel"], [330, 1, 1, "", "PyTorchFXModel"], [330, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[331, 1, 1, "", "Accuracy"], [331, 1, 1, "", "Footprint"], [331, 1, 1, "", "ModelSize"], [331, 1, 1, "", "MultiObjective"], [331, 1, 1, "", "Objective"], [331, 1, 1, "", "Performance"], [331, 2, 1, "", "objective_custom_registry"], [331, 2, 1, "", "objective_registry"]], "neural_compressor.profiling": [[334, 0, 0, "-", "parser"], [344, 0, 0, "-", "profiler"]], "neural_compressor.profiling.parser": [[333, 0, 0, "-", "factory"], [336, 0, 0, "-", "onnx_parser"], [338, 0, 0, "-", "parser"], [339, 0, 0, "-", "result"], [341, 0, 0, "-", "tensorflow_parser"]], "neural_compressor.profiling.parser.factory": [[333, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[335, 0, 0, "-", "factory"], [337, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[335, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[337, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[338, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[339, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[340, 0, 0, "-", "factory"], [342, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[340, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[342, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[343, 0, 0, "-", "factory"], [346, 0, 0, "-", "onnxrt_profiler"], [349, 0, 0, "-", "profiler"], [351, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.profiling.profiler.factory": [[343, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[345, 0, 0, "-", "factory"], [347, 0, 0, "-", "profiler"], [348, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[345, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[347, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[348, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[349, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[350, 0, 0, "-", "factory"], [352, 0, 0, "-", "profiler"], [353, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[350, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[352, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[353, 2, 1, "", "create_tf_config"], [353, 2, 1, "", "delete_assign"], [353, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[354, 2, 1, "", "fit"]], "neural_compressor.strategy": [[355, 0, 0, "-", "auto"], [356, 0, 0, "-", "auto_mixed_precision"], [357, 0, 0, "-", "basic"], [358, 0, 0, "-", "bayesian"], [359, 0, 0, "-", "conservative"], [360, 0, 0, "-", "exhaustive"], [361, 0, 0, "-", "hawq_v2"], [363, 0, 0, "-", "mse"], [364, 0, 0, "-", "mse_v2"], [365, 0, 0, "-", "random"], [366, 0, 0, "-", "strategy"], [368, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[355, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[356, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[357, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[358, 1, 1, "", "BayesianOptimization"], [358, 1, 1, "", "BayesianTuneStrategy"], [358, 1, 1, "", "TargetSpace"], [358, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[359, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[360, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[361, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[363, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[364, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[365, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[366, 1, 1, "", "TuneStrategy"], [366, 1, 1, "", "TuneStrategyMeta"], [366, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[367, 0, 0, "-", "constant"], [369, 0, 0, "-", "tuning_sampler"], [370, 0, 0, "-", "tuning_space"], [371, 0, 0, "-", "tuning_structs"], [372, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[369, 1, 1, "", "BlockFallbackTuningSampler"], [369, 1, 1, "", "FallbackTuningSampler"], [369, 1, 1, "", "LowerBitsSampler"], [369, 1, 1, "", "ModelWiseTuningSampler"], [369, 1, 1, "", "OpTypeWiseTuningSampler"], [369, 1, 1, "", "OpWiseTuningSampler"], [369, 1, 1, "", "TuningOrder"], [369, 1, 1, "", "TuningSampler"], [369, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_space": [[370, 1, 1, "", "TuningItem"], [370, 1, 1, "", "TuningSpace"], [370, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [370, 2, 1, "", "pattern_to_internal"], [370, 2, 1, "", "pattern_to_path"], [370, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[371, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[372, 1, 1, "", "OrderedDefaultDict"], [372, 2, 1, "", "build_slave_faker_model"], [372, 2, 1, "", "extract_data_type"], [372, 2, 1, "", "get_adaptor_name"], [372, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[373, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[373, 1, 1, "", "ExampleClass"], [373, 3, 1, "", "attribute1"], [373, 2, 1, "", "function1"], [373, 2, 1, "", "function2"], [373, 2, 1, "", "function3"], [373, 2, 1, "", "generator1"], [373, 4, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[373, 3, 1, "", "attr1"], [373, 3, 1, "", "attr2"], [373, 3, 1, "", "attr5"]], "neural_compressor.training": [[375, 1, 1, "", "CallBacks"], [375, 1, 1, "", "CompressionManager"], [375, 2, 1, "", "fit"], [375, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[376, 0, 0, "-", "collect_layer_histogram"], [377, 0, 0, "-", "constant"], [378, 0, 0, "-", "create_obj_from_config"], [380, 0, 0, "-", "kl_divergence"], [381, 0, 0, "-", "load_huggingface"], [382, 0, 0, "-", "logger"], [383, 0, 0, "-", "neural_insights_utils"], [384, 0, 0, "-", "options"], [385, 0, 0, "-", "pytorch"], [386, 0, 0, "-", "utility"], [387, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[376, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[378, 2, 1, "", "create_dataloader"], [378, 2, 1, "", "create_dataset"], [378, 2, 1, "", "create_eval_func"], [378, 2, 1, "", "create_train_func"], [378, 2, 1, "", "get_algorithm"], [378, 2, 1, "", "get_func_from_config"], [378, 2, 1, "", "get_metrics"], [378, 2, 1, "", "get_postprocess"], [378, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[380, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[381, 1, 1, "", "OptimizedModel"], [381, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[382, 1, 1, "", "Logger"], [382, 2, 1, "", "debug"], [382, 2, 1, "", "error"], [382, 2, 1, "", "fatal"], [382, 2, 1, "", "info"], [382, 2, 1, "", "log"], [382, 2, 1, "", "warn"], [382, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[383, 2, 1, "", "register_neural_insights_workload"], [383, 2, 1, "", "update_neural_insights_workload"], [383, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[384, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[385, 2, 1, "", "is_int8_model"], [385, 2, 1, "", "load"]], "neural_compressor.utils.utility": [[386, 1, 1, "", "CaptureOutputToFile"], [386, 1, 1, "", "CpuInfo"], [386, 2, 1, "", "Dequantize"], [386, 2, 1, "", "DequantizeWeight"], [386, 1, 1, "", "DotDict"], [386, 1, 1, "", "GLOBAL_STATE"], [386, 1, 1, "", "LazyImport"], [386, 1, 1, "", "MODE"], [386, 1, 1, "", "OpEntry"], [386, 1, 1, "", "Statistics"], [386, 2, 1, "", "alias_param"], [386, 2, 1, "", "calculate_mse"], [386, 2, 1, "", "combine_histogram"], [386, 2, 1, "", "compare_objects"], [386, 2, 1, "", "compute_sparsity"], [386, 2, 1, "", "dump_class_attrs"], [386, 2, 1, "", "dump_data_to_local"], [386, 2, 1, "", "dump_elapsed_time"], [386, 2, 1, "", "dump_table"], [386, 2, 1, "", "dump_table_to_csv"], [386, 2, 1, "", "equal_dicts"], [386, 2, 1, "", "fault_tolerant_file"], [386, 2, 1, "", "get_all_fp32_data"], [386, 2, 1, "", "get_number_of_sockets"], [386, 2, 1, "", "get_op_list"], [386, 2, 1, "", "get_size"], [386, 2, 1, "", "get_tensor_histogram"], [386, 2, 1, "", "get_tensors_info"], [386, 2, 1, "", "get_tuning_history"], [386, 2, 1, "", "get_weights_details"], [386, 2, 1, "", "load_data_from_pkl"], [386, 2, 1, "", "mse_metric_gap"], [386, 2, 1, "", "print_op_list"], [386, 2, 1, "", "print_table"], [386, 2, 1, "", "recover"], [386, 2, 1, "", "set_random_seed"], [386, 2, 1, "", "set_resume_from"], [386, 2, 1, "", "set_tensorboard"], [386, 2, 1, "", "set_workspace"], [386, 2, 1, "", "show_memory_info"], [386, 2, 1, "", "singleton"], [386, 2, 1, "", "str2array"], [386, 2, 1, "", "time_limit"], [386, 2, 1, "", "version1_eq_version2"], [386, 2, 1, "", "version1_gt_version2"], [386, 2, 1, "", "version1_gte_version2"], [386, 2, 1, "", "version1_lt_version2"], [386, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[387, 1, 1, "", "WeightsDetails"], [387, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:attribute", "4": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "data", "Python data"]}, "titleterms": {"block_mask": 0, "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388], "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 396, 397], "modul": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 222, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 249, 251, 252, 253, 255, 256, 257, 258, 260, 261, 263, 264, 265, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 279, 280, 281, 282, 285, 286, 287, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 308, 309, 310, 311, 313, 314, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 333, 335, 337, 338, 339, 340, 342, 343, 345, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 369, 370, 371, 372, 373, 375, 376, 378, 380, 381, 382, 383, 384, 385, 386, 387], "content": [1, 2, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 335, 337, 338, 339, 340, 342, 343, 345, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 369, 370, 371, 372, 373, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 395], "class": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 111, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 149, 150, 153, 154, 155, 156, 157, 159, 160, 163, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 258, 259, 260, 263, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 308, 309, 310, 311, 313, 316, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 335, 337, 338, 339, 340, 342, 343, 345, 347, 349, 350, 352, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 369, 370, 371, 372, 373, 375, 376, 379, 380, 381, 382, 384, 386, 387, 396], "function": [1, 13, 16, 33, 39, 40, 41, 63, 64, 66, 100, 101, 112, 114, 144, 145, 146, 150, 151, 152, 153, 155, 158, 160, 163, 165, 167, 169, 170, 171, 172, 173, 175, 184, 185, 193, 195, 199, 202, 203, 204, 207, 209, 210, 211, 212, 214, 216, 217, 219, 222, 229, 237, 239, 243, 246, 247, 248, 250, 251, 252, 255, 256, 257, 260, 261, 263, 264, 265, 266, 267, 274, 281, 285, 290, 291, 292, 294, 299, 305, 309, 311, 313, 314, 316, 317, 318, 319, 320, 321, 325, 329, 331, 348, 353, 354, 358, 366, 370, 372, 373, 375, 378, 379, 381, 382, 383, 385, 386, 417], "subpackag": [2, 17, 83, 107, 108, 110, 162, 164, 179, 204, 223, 248, 259, 283, 301, 312, 362], "submodul": [2, 12, 17, 29, 47, 72, 83, 91, 97, 102, 107, 108, 110, 113, 126, 141, 147, 155, 161, 162, 164, 166, 176, 180, 187, 199, 203, 207, 214, 221, 224, 231, 243, 247, 250, 254, 259, 266, 272, 278, 284, 288, 301, 307, 312, 319, 323, 334, 336, 341, 344, 346, 351, 362, 368, 374, 379], "packag": [2, 29, 155, 187, 199, 203, 204, 207, 214, 231, 243, 247, 248, 250, 259, 266, 278, 283, 284, 301, 319, 323, 362, 379, 441, 443, 445, 446], "kera": 3, "keras_util": [4, 5, 6, 7, 8, 9, 10], "conv2d": 4, "dens": 5, "depthwise_conv2d": 6, "pool2d": 8, "quantiz": [9, 38, 295, 354, 392, 395, 408, 416, 419, 422, 425, 428, 437, 448, 455, 456, 457, 460, 466], "separable_conv2d": 10, "mxnet": [11, 413, 427, 456, 462, 466], "mxnet_util": [12, 13], "util": [13, 40, 144, 152, 173, 306, 307, 308, 309, 310, 311, 348, 353, 367, 368, 369, 370, 371, 372, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 399], "onnxrt": [14, 413, 427, 462], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "calibr": [15, 16], "oper": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "activ": 18, "argmax": 19, "attent": 20, "binary_op": 21, "concat": 22, "conv": 23, "direct_q8": 24, "embed_layernorm": 25, "gather": 26, "gavgpool": 27, "gemm": 28, "lstm": 30, "matmul": [31, 460], "maxpool": 32, "op": [33, 419], "pad": 34, "pool": 35, "resiz": 36, "split": 37, "smooth_quant": [39, 150, 156], "pytorch": [41, 385, 413, 417, 419, 427, 429, 456, 457, 461, 462, 466], "queri": [42, 396], "tensorflow": [43, 413, 417, 419, 427, 429, 456, 457, 461, 462, 466], "tf_util": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144], "graph_convert": 44, "graph_converter_without_calib": 45, "graph_rewrit": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], "bf16": [46, 47], "bf16_convert": [46, 145], "gener": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "convert_add_to_biasadd": 48, "convert_layout": 49, "convert_leakyrelu": 50, "convert_nan_to_random": 51, "convert_placeholder_to_const": 52, "dequantize_cast_optim": 53, "dilated_contract": 54, "dummy_biasadd": 55, "expanddims_optim": 56, "fetch_weight_from_reshap": 57, "fold_batch_norm": 58, "fold_const": 59, "fuse_biasadd_add": 60, "fuse_column_wise_mul": 61, "fuse_conv_with_math": 62, "fuse_decomposed_bn": 63, "fuse_decomposed_in": 64, "fuse_gelu": 65, "fuse_layer_norm": 66, "fuse_pad_with_conv": 67, "fuse_pad_with_fp32_conv": 68, "fuse_reshape_transpos": 69, "graph_cse_optim": 70, "grappler_pass": 71, "insert_print_nod": 73, "move_squeeze_after_relu": 74, "pre_optim": 75, "remove_training_nod": 76, "rename_batch_norm": 77, "split_shared_input": 78, "strip_equivalent_nod": 79, "strip_unused_nod": 80, "switch_optim": 81, "graph_bas": 82, "int8": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 419, 466], "freeze_fake_qu": 84, "freeze_valu": 85, "freeze_value_without_calib": 86, "fuse_conv_redundant_dequant": 87, "fuse_conv_requant": 88, "fuse_matmul_redundant_dequant": 89, "fuse_matmul_requant": 90, "meta_op_optim": 92, "post_hostconst_convert": 93, "post_quantized_op_cs": 94, "rnn_convert": 95, "scale_propag": 96, "onnx": [97, 98, 99, 100, 101, 398, 425, 429, 456, 466], "onnx_graph": 98, "onnx_nod": 99, "onnx_schema": 100, "tf2onnx_util": 101, "qdq": [102, 103, 104, 105, 119, 120, 121, 122, 123, 124, 125, 126, 127, 466], "insert_qdq_pattern": 103, "merge_duplicated_qdq": 104, "share_qdq_y_pattern": 105, "graph_util": 106, "quantize_graph": [108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134], "qat": [109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 466], "fake_quant": 109, "quantize_config": 111, "quantize_help": 112, "quantize_lay": [113, 114, 115, 116, 117], "optimize_lay": 114, "quantize_layer_add": 115, "quantize_layer_bas": 116, "quantize_layer_bn": 117, "quantize_wrapp": 118, "fuse_qdq_bn": 119, "fuse_qdq_concatv2": 120, "fuse_qdq_conv": 121, "fuse_qdq_deconv": 122, "fuse_qdq_in": 123, "fuse_qdq_matmul": 124, "fuse_qdq_pool": 125, "optimize_qdq": 127, "quantize_graph_bas": 128, "quantize_graph_bn": 129, "quantize_graph_concatv2": 130, "quantize_graph_conv": 131, "quantize_graph_for_intel_cpu": 132, "quantize_graph_matmul": 133, "quantize_graph_pool": 134, "quantize_graph_common": 135, "smooth_quant_calibr": 136, "smooth_quant_scal": 137, "tf2onnx_convert": 138, "transform_graph": [139, 140, 141, 142, 143], "bias_correct": 139, "graph_transform_bas": 140, "insert_log": 142, "rerange_quantized_concat": 143, "torch_util": [145, 146, 147, 148, 149, 150, 151, 152, 219], "hawq_metr": 146, "model_wrapp": 148, "pattern_detector": 149, "symbolic_trac": 151, "algorithm": [153, 154, 155, 156, 157, 460, 463], "fast_bias_correct": 154, "weight_correct": 157, "benchmark": [158, 211, 402, 411, 428, 455], "compress": [159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 221, 222, 403], "callback": 159, "distil": [160, 161, 253, 415, 416, 428, 455, 466], "criterion": [160, 212], "pruner": [163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 281, 292], "criteria": [163, 453, 463], "model_slim": [165, 166, 167, 168], "auto_slim": 165, "pattern_analyz": 167, "weight_slim": 168, "pattern": [169, 284, 285, 286, 290, 453], "reg": 171, "schedul": [172, 294, 296, 453], "conf": [174, 175, 176, 177], "config": [174, 178, 404, 412, 413, 450], "dotdict": 175, "pythonic_config": 177, "contrib": [179, 180, 181, 182, 223, 224, 225, 226], "strategi": [180, 181, 182, 224, 225, 226, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 409, 459, 463], "sigopt": [181, 225, 459, 463], "tpe": [182, 226, 463], "data": [183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 418], "dataload": [183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 213, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 412, 413], "base_dataload": [183, 227], "default_dataload": [185, 229], "fetcher": [186, 230], "attribut": [187, 195, 204, 239, 248, 259, 283, 323, 373, 379, 390], "mxnet_dataload": [188, 232], "onnxrt_dataload": [189, 233], "pytorch_dataload": [190, 234], "sampler": [191, 235], "tensorflow_dataload": [192, 236], "dataset": [193, 194, 195, 196, 197, 198, 199, 200, 237, 238, 239, 240, 241, 242, 243, 244, 413, 423], "bert_dataset": [193, 237], "coco_dataset": [194, 238], "dummy_dataset": [196, 240], "dummy_dataset_v2": [197, 241], "imagenet_dataset": [198, 242], "style_transfer_dataset": [200, 244], "filter": [201, 202, 203, 245, 246, 247], "coco_filt": [201, 245], "transform": [205, 206, 207, 208, 209, 210, 249, 250, 251, 252, 423, 462], "coco_transform": 205, "imagenet_transform": [206, 249], "postprocess": [208, 218], "token": [209, 251], "experiment": [211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311], "common": [212, 213, 214, 215, 216, 217, 218, 219, 392, 420], "metric": [215, 260, 261, 262, 263, 264, 265, 266, 267, 313, 314, 315, 316, 317, 318, 319, 320, 423, 427], "model": [216, 322, 323, 324, 325, 326, 327, 328, 329, 330, 406, 419, 422, 425, 428, 430, 437, 453, 460, 466], "optim": [217, 438, 448, 451, 464], "compon": 220, "prune": [222, 282, 293, 428, 453, 455, 466], "export": [254, 255, 256, 257, 419], "qlinear2qdq": 255, "tf2onnx": 256, "torch2onnx": 257, "graph_optim": 258, "bleu": [260, 313], "bleu_util": [261, 314], "coco_label_map": [262, 315], "coco_tool": [263, 316], "evaluate_squad": [264, 317], "f1": [265, 318], "mixed_precis": 268, "model_convers": 269, "na": [270, 271, 272, 273, 274, 275, 393, 455], "basic_na": 270, "dyna": 271, "nas_util": 274, "search_algorithm": 275, "pruner_legaci": [276, 277, 278, 279, 280, 281], "gradient_sensit": 276, "group_lasso": 277, "magnitud": 279, "pattern_lock": 280, "pruning_recip": [283, 284, 285, 286], "tile_pattern": 286, "pruning_v2": 287, "pytorch_prun": [288, 289, 290, 291, 292, 293, 294], "logger": [289, 382], "prune_util": 291, "auto_mixed_precis": [297, 356], "basic": [298, 357, 393, 463], "bayesian": [299, 358, 463], "exhaust": [300, 360, 463], "mse": [302, 363, 463], "mse_v2": [303, 364, 463], "random": [304, 365, 463], "constant": [306, 367, 377], "tuning_sampl": [308, 369], "tuning_spac": [309, 370], "tuning_struct": [310, 371], "mix_precis": 321, "base_model": 322, "keras_model": 324, "mxnet_model": 326, "nets_factori": 327, "onnx_model": 328, "tensorflow_model": 329, "torch_model": 330, "object": [331, 407, 450], "profil": [332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "parser": [333, 334, 335, 336, 337, 338, 339, 340, 341, 342], "factori": [333, 335, 340, 343, 345, 350], "onnx_pars": [335, 336, 337], "result": 339, "tensorflow_pars": [340, 341, 342], "onnxrt_profil": [345, 346, 347, 348], "tensorflow_profil": [350, 351, 352, 353], "auto": [355, 442, 448, 457, 460, 463], "conserv": [359, 463], "hawq_v2": [361, 463], "templat": [373, 374, 391], "api_doc_exampl": 373, "train": [375, 392, 410, 417, 428, 456], "collect_layer_histogram": 376, "create_obj_from_config": 378, "kl_diverg": 380, "load_huggingfac": 381, "neural_insights_util": 383, "option": [384, 417, 436], "weights_detail": 387, "version": 388, "intel": [389, 395, 424, 425, 428, 434, 442, 448, 466, 467], "neural": [389, 392, 393, 395, 424, 425, 428, 431, 435, 437, 442, 448, 453, 459, 464, 467], "compressor": [389, 392, 395, 424, 425, 428, 442, 448, 459, 467], "document": [389, 395, 400, 467], "section": [389, 467], "contributor": [390, 391], "coven": [390, 391], "code": [390, 391, 393, 428, 449, 464], "conduct": [390, 391], "our": [390, 460], "pledg": 390, "standard": 390, "respons": 390, "scope": [390, 453], "enforc": 390, "contribut": [391, 441, 445], "guidelin": 391, "pull": 391, "request": 391, "checklist": 391, "support": [391, 392, 393, 396, 411, 412, 413, 415, 416, 417, 419, 421, 424, 425, 427, 429, 430, 432, 433, 437, 438, 450, 451, 453, 455, 456, 460, 461, 462, 465], "fx": 392, "introduct": [392, 393, 396, 411, 412, 413, 415, 416, 417, 419, 421, 424, 427, 429, 430, 448, 450, 451, 453, 455, 456, 459, 460, 461, 462, 463, 465], "mode": [392, 466], "matrix": [392, 393, 396, 411, 412, 413, 415, 416, 417, 419, 421, 424, 427, 429, 430, 433, 450, 451, 453, 455, 456, 460, 461, 465], "get": [392, 393, 395, 396, 411, 412, 413, 415, 416, 417, 421, 422, 427, 429, 431, 442, 449, 450, 451, 453, 455, 456, 461, 465], "start": [392, 393, 395, 396, 411, 412, 413, 415, 416, 417, 421, 422, 427, 429, 431, 432, 436, 442, 450, 451, 453, 455, 456, 461, 465], "post": [392, 428, 456], "static": [392, 456], "dynam": [392, 393, 456], "awar": [392, 428, 456], "exampl": [392, 393, 396, 400, 411, 412, 413, 415, 416, 417, 418, 419, 428, 429, 430, 433, 437, 450, 451, 453, 456, 460, 461, 466], "note": [392, 458], "detail": 392, "problem": 392, "architectur": [393, 414, 424, 425], "search": [393, 448], "api": [393, 395, 396, 400, 401, 411, 412, 413, 415, 416, 417, 422, 423, 427, 429, 431, 435, 449, 450, 451, 453, 455, 464], "usag": [393, 437, 448, 461, 463], "1": [393, 417, 420, 423, 428, 448, 466], "python": [393, 395, 422, 427, 431, 435, 436, 443, 446, 455, 464], "yaml": [393, 412, 413, 417, 421, 465], "2": [393, 417, 420, 423, 428, 448, 466], "onli": 393, "advanc": [393, 464], "custom": [393, 427, 463], "secur": [394, 417], "polici": [394, 463], "report": 394, "vulner": 394, "instal": [395, 425, 432, 434, 441, 442, 445], "from": [395, 425, 428], "pypi": [395, 437], "select": [395, 442], "public": [395, 454], "event": [395, 454], "addit": 395, "research": 395, "collabor": 395, "work": [396, 456], "flow": [396, 456], "background": [396, 448], "ad": 396, "new": [396, 443, 446, 463], "backend": [396, 456], "capabl": 396, "implement": 396, "onnxrtadaptor": 396, "runtim": [398, 425, 429, 456, 466], "torch": [399, 466], "mix": [405, 428, 429, 457], "precis": [405, 428, 429, 457], "framework": [412, 413, 419, 421, 430, 455, 460], "file": [412, 413, 421, 465], "creat": 412, "user": [412, 413, 417, 423, 455, 464, 465], "specif": [412, 413], "design": [414, 463], "workflow": 414, "knowledg": [415, 466], "intermedi": 415, "layer": [415, 460], "self": 415, "distribut": [417, 437, 463], "infer": 417, "evalu": 417, "featur": [417, 421, 424, 437, 438, 442, 455, 456, 461, 465], "pure": 417, "configur": [417, 421, 452, 455, 459, 465], "defin": 417, "horovodrun": 417, "execut": 417, "list": [418, 462], "releas": [418, 443, 446, 458], "fp32": 419, "appendix": 419, "frequent": 420, "ask": 420, "question": 420, "build": [420, 427], "issu": [420, 458], "3": [420, 432, 448], "4": [420, 439, 448, 454], "quick": [422, 436], "sampl": 422, "jupyterlab": [422, 442], "extens": [422, 431, 441, 442, 445, 448, 449, 466], "valid": [422, 425, 460, 466], "incompat": [423, 458], "chang": [423, 447, 449, 458], "between": 423, "v1": 423, "face": 423, "built": [423, 425, 427], "infrastructur": 424, "linux": 425, "prerequisit": 425, "binari": 425, "sourc": 425, "ai": 425, "kit": 425, "window": 425, "system": [425, 452], "requir": [425, 441, 445], "hardwar": [425, 466], "environ": [425, 434], "cpu": [425, 434, 466], "base": [425, 464], "64": 425, "compat": 425, "processor": 425, "gpu": 425, "": [425, 449], "xe": 425, "multipl": [425, 450, 466], "vendor": 425, "through": [425, 466], "softwar": 425, "legal": 426, "inform": 426, "licens": 426, "citat": 426, "trademark": 426, "singl": [427, 450], "multi": 427, "migrat": 428, "x": 428, "orchestr": [428, 451], "coder": [431, 435, 437, 448, 464], "what": [431, 449], "do": 431, "we": 431, "offer": 431, "jupyt": [431, 432, 443, 446], "lab": [431, 432], "launcher": [431, 436], "contact": 431, "aw": 432, "amazon": 432, "sagemak": 432, "For": 432, "studio": 432, "notebook": 432, "instanc": 432, "guid": [432, 464], "bigdl": 433, "nano": 433, "platform": [434, 459], "best": [434, 442], "perform": [434, 459], "set": [434, 448], "mkl": 434, "openmp": 434, "jemalloc": 434, "numa": 434, "control": 434, "variabl": 434, "frequenc": 434, "govern": 434, "enabl": [435, 442, 448], "bench": 435, "superbench": 435, "argument": 436, "v0": 439, "highlight": 439, "other": 439, "changelog": [440, 444], "neural_compressor_ext_lab": [441, 443], "uninstal": [441, 445], "develop": [441, 445], "Or": 442, "let": 442, "u": 442, "help": 442, "you": 442, "pre": 442, "requisit": 442, "make": [443, 446, 449], "manual": [443, 446], "npm": [443, 446], "autom": [443, 446], "publish": [443, 446], "conda": [443, 446], "forg": [443, 446], "neural_compressor_ext_lab_alibaba": [445, 446], "log": 447, "unreleas": 447, "vscode": 448, "open": 448, "icon": 448, "5": 448, "welcom": 449, "your": 449, "v": 449, "folder": 449, "setup": 449, "up": 449, "run": 449, "straight": 449, "awai": 449, "explor": 449, "test": 449, "go": 449, "further": 449, "One": 451, "shot": 451, "network": 453, "type": 453, "sparsiti": 453, "decai": 453, "regular": 453, "spars": 453, "deploy": 453, "refer": [453, 456, 460], "full": 454, "60": 454, "2023": 454, "7": 454, "2022": 454, "34": 454, "2021": 454, "15": 454, "2018": 454, "2020": 454, "style": 455, "access": 455, "fundament": [456, 460], "scheme": 456, "ipex": 456, "approach": 456, "With": 456, "without": 456, "accuraci": [456, 463], "tune": [456, 460, 463], "specifi": 456, "rule": 456, "recip": 456, "devic": 456, "turn": 457, "off": 457, "dure": 457, "known": 458, "prepar": 459, "benefit": 459, "comparison": 459, "differ": 459, "smooth": 460, "quant": 460, "per": 460, "tensor": 460, "channel": 460, "limit": 460, "smoothquant": 460, "enhanc": 460, "wise": 460, "alpha": 460, "engin": 460, "tensorboard": 461, "space": 463, "exit": 463, "process": 463, "overview": 464, "zero": 464, "topic": 464, "11": 466, "0": 466, "13": 466, "ptq": 466, "9": 466}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [101, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [109, "module-contents"], [111, "module-contents"], [112, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [163, "module-contents"], [165, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [177, "module-contents"], [178, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [205, "module-contents"], [206, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [222, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [229, "module-contents"], [230, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [244, "module-contents"], [245, "module-contents"], [246, "module-contents"], [249, "module-contents"], [251, "module-contents"], [252, "module-contents"], [253, "module-contents"], [255, "module-contents"], [256, "module-contents"], [257, "module-contents"], [258, "module-contents"], [260, "module-contents"], [261, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [267, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [273, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [279, "module-contents"], [280, "module-contents"], [281, "module-contents"], [282, "module-contents"], [285, "module-contents"], [286, "module-contents"], [287, "module-contents"], [290, "module-contents"], [291, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [295, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [302, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [308, "module-contents"], [309, "module-contents"], [310, "module-contents"], [311, "module-contents"], [313, "module-contents"], [314, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [320, "module-contents"], [321, "module-contents"], [322, "module-contents"], [324, "module-contents"], [325, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [333, "module-contents"], [335, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [342, "module-contents"], [343, "module-contents"], [345, "module-contents"], [347, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [369, "module-contents"], [370, "module-contents"], [371, "module-contents"], [372, "module-contents"], [373, "module-contents"], [375, "module-contents"], [376, "module-contents"], [378, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"]], "Classes": [[1, "classes"], [3, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [101, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [106, "classes"], [109, "classes"], [111, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [142, "classes"], [143, "classes"], [145, "classes"], [146, "classes"], [149, "classes"], [150, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [159, "classes"], [160, "classes"], [163, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [171, "classes"], [172, "classes"], [174, "classes"], [175, "classes"], [177, "classes"], [178, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [220, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [229, "classes"], [230, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [263, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [273, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [279, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [290, "classes"], [292, "classes"], [293, "classes"], [294, "classes"], [295, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [308, "classes"], [309, "classes"], [310, "classes"], [311, "classes"], [313, "classes"], [316, "classes"], [319, "classes"], [320, "classes"], [322, "classes"], [323, "classes"], [324, "classes"], [325, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [333, "classes"], [335, "classes"], [337, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [342, "classes"], [343, "classes"], [345, "classes"], [347, "classes"], [349, "classes"], [350, "classes"], [352, "classes"], [355, "classes"], [356, "classes"], [357, "classes"], [358, "classes"], [359, "classes"], [360, "classes"], [361, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [366, "classes"], [369, "classes"], [370, "classes"], [371, "classes"], [372, "classes"], [373, "classes"], [375, "classes"], [376, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [384, "classes"], [386, "classes"], [387, "classes"]], "Functions": [[1, "functions"], [13, "functions"], [16, "functions"], [33, "functions"], [39, "functions"], [40, "functions"], [41, "functions"], [63, "functions"], [64, "functions"], [66, "functions"], [100, "functions"], [101, "functions"], [112, "functions"], [114, "functions"], [144, "functions"], [145, "functions"], [146, "functions"], [150, "functions"], [151, "functions"], [152, "functions"], [153, "functions"], [155, "functions"], [158, "functions"], [160, "functions"], [163, "functions"], [165, "functions"], [167, "functions"], [169, "functions"], [170, "functions"], [171, "functions"], [172, "functions"], [173, "functions"], [175, "functions"], [184, "functions"], [185, "functions"], [193, "functions"], [195, "functions"], [199, "functions"], [202, "functions"], [203, "functions"], [204, "functions"], [207, "functions"], [209, "functions"], [210, "functions"], [211, "functions"], [212, "functions"], [214, "functions"], [216, "functions"], [217, "functions"], [219, "functions"], [222, "functions"], [229, "functions"], [237, "functions"], [239, "functions"], [243, "functions"], [246, "functions"], [247, "functions"], [248, "functions"], [250, "functions"], [251, "functions"], [252, "functions"], [255, "functions"], [256, "functions"], [257, "functions"], [260, "functions"], [261, "functions"], [263, "functions"], [264, "functions"], [265, "functions"], [266, "functions"], [267, "functions"], [274, "functions"], [281, "functions"], [285, "functions"], [290, "functions"], [291, "functions"], [292, "functions"], [294, "functions"], [299, "functions"], [305, "functions"], [309, "functions"], [311, "functions"], [313, "functions"], [314, "functions"], [316, "functions"], [317, "functions"], [318, "functions"], [319, "functions"], [320, "functions"], [321, "functions"], [325, "functions"], [329, "functions"], [331, "functions"], [348, "functions"], [353, "functions"], [354, "functions"], [358, "functions"], [366, "functions"], [370, "functions"], [372, "functions"], [373, "functions"], [375, "functions"], [378, "functions"], [379, "functions"], [381, "functions"], [382, "functions"], [383, "functions"], [385, "functions"], [386, "functions"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "Subpackages": [[2, "subpackages"], [17, "subpackages"], [83, "subpackages"], [107, "subpackages"], [108, "subpackages"], [110, "subpackages"], [162, "subpackages"], [164, "subpackages"], [179, "subpackages"], [204, "subpackages"], [223, "subpackages"], [248, "subpackages"], [259, "subpackages"], [283, "subpackages"], [301, "subpackages"], [312, "subpackages"], [362, "subpackages"]], "Submodules": [[2, "submodules"], [12, "submodules"], [17, "submodules"], [29, "submodules"], [47, "submodules"], [72, "submodules"], [83, "submodules"], [91, "submodules"], [97, "submodules"], [102, "submodules"], [107, "submodules"], [108, "submodules"], [110, "submodules"], [113, "submodules"], [126, "submodules"], [141, "submodules"], [147, "submodules"], [155, "submodules"], [161, "submodules"], [162, "submodules"], [164, "submodules"], [166, "submodules"], [176, "submodules"], [180, "submodules"], [187, "submodules"], [199, "submodules"], [203, "submodules"], [207, "submodules"], [214, "submodules"], [221, "submodules"], [224, "submodules"], [231, "submodules"], [243, "submodules"], [247, "submodules"], [250, "submodules"], [254, "submodules"], [259, "submodules"], [266, "submodules"], [272, "submodules"], [278, "submodules"], [284, "submodules"], [288, "submodules"], [301, "submodules"], [307, "submodules"], [312, "submodules"], [319, "submodules"], [323, "submodules"], [334, "submodules"], [336, "submodules"], [341, "submodules"], [344, "submodules"], [346, "submodules"], [351, "submodules"], [362, "submodules"], [368, "submodules"], [374, "submodules"], [379, "submodules"]], "Package Contents": [[2, "package-contents"], [29, "package-contents"], [155, "package-contents"], [187, "package-contents"], [199, "package-contents"], [203, "package-contents"], [204, "package-contents"], [207, "package-contents"], [214, "package-contents"], [231, "package-contents"], [243, "package-contents"], [247, "package-contents"], [248, "package-contents"], [250, "package-contents"], [259, "package-contents"], [266, "package-contents"], [278, "package-contents"], [283, "package-contents"], [284, "package-contents"], [301, "package-contents"], [319, "package-contents"], [323, "package-contents"], [362, "package-contents"], [379, "package-contents"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[33, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[34, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[36, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[37, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[38, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[39, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[40, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[41, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[42, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[43, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[44, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[45, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[106, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[107, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[136, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[137, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[138, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[139, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[140, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[141, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[144, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[145, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[146, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[147, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[148, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[149, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[150, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[151, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[152, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[153, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[154, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[155, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[156, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[157, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[158, "module-neural_compressor.benchmark"]], "neural_compressor.compression.callbacks": [[159, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[160, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[161, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[162, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[163, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[164, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[165, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[166, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[167, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[168, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns": [[169, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.pruners": [[170, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.regs": [[171, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[172, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.utils": [[173, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[174, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[175, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[176, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[177, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[178, "module-neural_compressor.config"]], "neural_compressor.contrib": [[179, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[180, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[181, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[182, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[183, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[184, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[185, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[186, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[187, "module-neural_compressor.data.dataloaders"]], "Attributes": [[187, "attributes"], [195, "attributes"], [204, "attributes"], [239, "attributes"], [248, "attributes"], [259, "attributes"], [283, "attributes"], [323, "attributes"], [373, "attributes"], [379, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[188, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[189, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[190, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[191, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[192, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[193, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[194, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[195, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[196, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[197, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[198, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[199, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[200, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[201, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[202, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[203, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[204, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[205, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[206, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[207, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[208, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[209, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[210, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[211, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[212, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[213, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[214, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[215, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[216, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[217, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[218, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[219, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[220, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[221, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[222, "module-neural_compressor.experimental.compression.pruning"]], "neural_compressor.experimental.contrib": [[223, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[224, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[225, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[226, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[227, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[228, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[229, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[230, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[231, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[232, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[233, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[234, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[235, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[236, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[237, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[238, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[239, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[240, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[241, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[242, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[243, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[244, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[245, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[246, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[247, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[248, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[249, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[250, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[251, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[252, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[253, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[254, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[255, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[256, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[257, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[258, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[259, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[260, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[261, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[262, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[263, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[264, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[265, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[266, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[267, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[268, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[269, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[270, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[271, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[272, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[273, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[274, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[275, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[276, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[277, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[278, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[279, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[280, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[281, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[282, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[283, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[284, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[285, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[286, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[287, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[288, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[289, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[290, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[291, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[292, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[293, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[294, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[295, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[296, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[297, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[298, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[299, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[300, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[301, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[302, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[303, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[304, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[305, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[306, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[307, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[308, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[309, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[310, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[311, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[312, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[313, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[314, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[315, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[316, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[317, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[318, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[319, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[320, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[321, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[322, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[323, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[324, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[325, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[326, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[327, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[328, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[329, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[330, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[331, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[332, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[333, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[334, "module-neural_compressor.profiling.parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[335, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[336, "module-neural_compressor.profiling.parser.onnx_parser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[337, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[338, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[339, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[340, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[341, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[342, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[343, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[344, "module-neural_compressor.profiling.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[345, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[346, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[347, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[348, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[349, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[350, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[351, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[352, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[353, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[354, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[355, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[356, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[357, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[358, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[359, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[360, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[361, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[362, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[363, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[364, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[365, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[366, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[367, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[368, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[369, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[370, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[371, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[372, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[373, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[374, "module-neural_compressor.template"]], "neural_compressor.training": [[375, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[376, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[377, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[378, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[379, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[380, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[381, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[382, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[383, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[384, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[385, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[386, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[387, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[388, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[389, "intel-neural-compressor-documentation"], [467, "intel-neural-compressor-documentation"]], "Sections": [[389, "sections"], [467, "sections"]], "Contributor Covenant Code of Conduct": [[390, "contributor-covenant-code-of-conduct"], [391, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[390, "our-pledge"]], "Our Standards": [[390, "our-standards"]], "Our Responsibilities": [[390, "our-responsibilities"]], "Scope": [[390, "scope"]], "Enforcement": [[390, "enforcement"]], "Attribution": [[390, "attribution"]], "Contribution Guidelines": [[391, "contribution-guidelines"]], "Pull Request Checklist": [[391, "pull-request-checklist"]], "Pull Request Template": [[391, "pull-request-template"]], "Support": [[391, "support"]], "FX": [[392, "fx"]], "Introduction": [[392, "introduction"], [393, "introduction"], [396, "introduction"], [411, "introduction"], [412, "introduction"], [413, "introduction"], [415, "introduction"], [416, "introduction"], [417, "introduction"], [419, "introduction"], [421, "introduction"], [424, "introduction"], [427, "introduction"], [429, "introduction"], [430, "introduction"], [450, "introduction"], [451, "introduction"], [453, "introduction"], [455, "introduction"], [459, "introduction"], [460, "introduction"], [461, "introduction"], [462, "introduction"], [463, "introduction"], [465, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[392, "fx-mode-support-matrix-in-neural-compressor"]], "Get Start": [[392, "get-start"]], "Post Training Static Quantization": [[392, "post-training-static-quantization"], [456, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[392, "post-training-dynamic-quantization"], [456, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[392, "quantization-aware-training"]], "Examples": [[392, "examples"], [393, "examples"], [411, "examples"], [412, "examples"], [413, "examples"], [415, "examples"], [416, "examples"], [417, "examples"], [418, "examples"], [419, "examples"], [428, "examples"], [429, "examples"], [430, "examples"], [451, "examples"], [453, "examples"], [456, "examples"], [461, "examples"]], "Note": [[392, "note"]], "Details": [[392, "details"]], "Common Problem": [[392, "common-problem"]], "Dynamic Quantization": [[392, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[392, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[393, "neural-architecture-search"]], "Basic NAS": [[393, "basic-nas"]], "Dynamic NAS": [[393, "dynamic-nas"]], "NAS Support Matrix": [[393, "nas-support-matrix"]], "Get Started with NAS API": [[393, "get-started-with-nas-api"]], "Basic Usage": [[393, "basic-usage"]], "1. Python code + YAML": [[393, "python-code-yaml"]], "2. Python code only": [[393, "python-code-only"]], "Advanced Usage (Custom NAS)": [[393, "advanced-usage-custom-nas"]], "Security Policy": [[394, "security-policy"]], "Report a Vulnerability": [[394, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[395, "intel-neural-compressor"], [448, "intel-neural-compressor"]], "Installation": [[395, "installation"], [425, "installation"], [442, "installation"]], "Install from pypi": [[395, "install-from-pypi"]], "Getting Started": [[395, "getting-started"], [422, "getting-started"]], "Quantization with Python API": [[395, "quantization-with-python-api"], [422, "quantization-with-python-api"]], "Documentation": [[395, "documentation"]], "Selected Publications/Events": [[395, "selected-publications-events"]], "Additional Content": [[395, "additional-content"]], "Research Collaborations": [[395, "research-collaborations"]], "Adaptor": [[396, "adaptor"], [397, "adaptor"]], "Adaptor Support Matrix": [[396, "adaptor-support-matrix"]], "Working Flow": [[396, "working-flow"], [456, "working-flow"]], "Get Start with Adaptor API": [[396, "get-start-with-adaptor-api"]], "Query API": [[396, "query-api"]], "Background": [[396, "background"]], "Query API Introduction": [[396, "query-api-introduction"]], "Example of Adding a New Backend Support": [[396, "example-of-adding-a-new-backend-support"]], "Capability": [[396, "capability"]], "Implement ONNXRTAdaptor Class": [[396, "implement-onnxrtadaptor-class"]], "ONNX Runtime": [[398, "onnx-runtime"], [429, "onnx-runtime"], [429, "id1"]], "Torch Utils": [[399, "torch-utils"]], "API Document Example": [[400, "api-document-example"]], "APIs": [[401, "apis"]], "Benchmark": [[402, "benchmark"], [428, "benchmark"], [455, "benchmark"]], "Compression": [[403, "compression"]], "Config": [[404, "config"]], "Mix Precision": [[405, "mix-precision"], [428, "mix-precision"]], "Model": [[406, "model"], [430, "model"]], "Objective": [[407, "objective"], [450, "objective"]], "Quantization": [[408, "quantization"], [455, "quantization"], [456, "quantization"]], "Strategy": [[409, "strategy"]], "Training": [[410, "training"]], "Benchmarking": [[411, "benchmarking"]], "Benchmark Support Matrix": [[411, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[411, "get-started-with-benchmark-api"]], "DataLoader": [[412, "dataloader"]], "Supported Framework Dataloader Matrix": [[412, "supported-framework-dataloader-matrix"]], "Get Start with Dataloader API": [[412, "get-start-with-dataloader-api"]], "Config Dataloader in a Yaml File": [[412, "config-dataloader-in-a-yaml-file"]], "Create a User-specific Dataloader": [[412, "create-a-user-specific-dataloader"]], "Dataset": [[413, "dataset"]], "Supported Framework Dataset Matrix": [[413, "supported-framework-dataset-matrix"]], "TensorFlow": [[413, "tensorflow"], [427, "tensorflow"], [429, "tensorflow"], [462, "tensorflow"]], "PyTorch": [[413, "pytorch"], [427, "pytorch"], [429, "pytorch"], [457, "pytorch"]], "MXNet": [[413, "mxnet"], [427, "mxnet"], [462, "mxnet"]], "ONNXRT": [[413, "onnxrt"], [427, "onnxrt"], [462, "onnxrt"]], "Get start with Dataset API": [[413, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[413, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[413, "user-specific-dataset"]], "Design": [[414, "design"], [463, "design"], [463, "id1"], [463, "id3"], [463, "id5"], [463, "id7"], [463, "id9"], [463, "id11"], [463, "id13"], [463, "id15"], [463, "id17"], [463, "id19"], [463, "id21"]], "Architecture": [[414, "architecture"], [424, "architecture"]], "Workflow": [[414, "workflow"]], "Distillation": [[415, "distillation"], [428, "distillation"], [455, "distillation"]], "Knowledge Distillation": [[415, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[415, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[415, "self-distillation"]], "Distillation Support Matrix": [[415, "distillation-support-matrix"]], "Get Started with Distillation API": [[415, "get-started-with-distillation-api"]], "Distillation for Quantization": [[416, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[416, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[416, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[417, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[417, "supported-feature-matrix"], [421, "supported-feature-matrix"], [424, "supported-feature-matrix"], [455, "supported-feature-matrix"], [456, "supported-feature-matrix"], [461, "supported-feature-matrix"], [465, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[417, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[417, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[417, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[417, "horovodrun-execution"]], "Security": [[417, "security"]], "PyTorch Examples:": [[417, "pytorch-examples"]], "TensorFlow Examples:": [[417, "tensorflow-examples"]], "Example List": [[418, "example-list"]], "Release Data": [[418, "release-data"]], "Export": [[419, "export"]], "Supported Framework Model Matrix": [[419, "supported-framework-model-matrix"], [430, "supported-framework-model-matrix"]], "PyTorch Model": [[419, "pytorch-model"]], "FP32 Model Export": [[419, "fp32-model-export"], [419, "id1"]], "INT8 Model Export": [[419, "int8-model-export"], [419, "id2"]], "Tensorflow Model": [[419, "tensorflow-model"]], "Appendix": [[419, "appendix"]], "Supported quantized ops": [[419, "supported-quantized-ops"]], "Frequently Asked Questions": [[420, "frequently-asked-questions"]], "Common Build Issues": [[420, "common-build-issues"]], "Issue 1:": [[420, "issue-1"]], "Issue 2:": [[420, "issue-2"]], "Issue 3:": [[420, "issue-3"]], "Issue 4:": [[420, "issue-4"]], "Framework YAML Configuration Files": [[421, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[421, "get-started-with-framework-yaml-files"]], "Quick Samples": [[422, "quick-samples"]], "Quantization with JupyterLab Extension": [[422, "quantization-with-jupyterlab-extension"]], "Validated Models": [[422, "validated-models"], [460, "validated-models"], [466, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[423, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[423, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[423, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[424, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[425, "linux-installation"]], "Prerequisites": [[425, "prerequisites"], [425, "id1"]], "Install from Binary": [[425, "install-from-binary"], [425, "id2"]], "Install from Source": [[425, "install-from-source"], [425, "id3"]], "Install from AI Kit": [[425, "install-from-ai-kit"]], "Windows Installation": [[425, "windows-installation"]], "System Requirements": [[425, "system-requirements"]], "Validated Hardware Environment": [[425, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[425, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[425, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[425, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[425, "validated-software-environment"]], "Legal Information": [[426, "legal-information"]], "License": [[426, "license"]], "Citation": [[426, "citation"]], "Trademarks": [[426, "trademarks"]], "Metrics": [[427, "metrics"]], "Supported Built-in Metric Matrix": [[427, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[427, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[427, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[427, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[428, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[428, "model-quantization"]], "Post-training Quantization": [[428, "post-training-quantization"]], "Quantization Aware Training": [[428, "quantization-aware-training"], [456, "quantization-aware-training"], [456, "id1"]], "Pruning": [[428, "pruning"], [453, "pruning"], [455, "pruning"]], "Orchestration": [[428, "orchestration"]], "Mixed Precision": [[429, "mixed-precision"]], "Mixed Precision Support Matrix": [[429, "mixed-precision-support-matrix"]], "Get Started with Mixed Precision API": [[429, "get-started-with-mixed-precision-api"]], "Neural Coder": [[431, "neural-coder"], [448, "neural-coder"], [448, "id1"]], "What do we offer?": [[431, "what-do-we-offer"]], "Getting Started!": [[431, "getting-started"], [442, "getting-started"]], "Jupyter Lab Extension": [[431, "jupyter-lab-extension"]], "Python Launcher": [[431, "python-launcher"], [436, "python-launcher"]], "Python API": [[431, "python-api"]], "Contact": [[431, "contact"]], "AWS Amazon SageMaker Support": [[432, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[432, "start-jupyter-lab-3"]], "For SageMaker Studio": [[432, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[432, "for-sagemaker-notebook-instance"]], "Installation Guide": [[432, "installation-guide"]], "BigDL Nano Support": [[433, "bigdl-nano-support"]], "Example": [[433, "example"], [437, "example"], [450, "example"], [460, "example"]], "Support Matrix": [[433, "support-matrix"]], "Intel CPU Platforms: Best Performance Setting": [[434, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[434, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[434, "install-numa-controller"]], "Environment Variables": [[434, "environment-variables"]], "Frequency Governers": [[434, "frequency-governers"]], "Neural Coder as Python API": [[435, "neural-coder-as-python-api"]], "Enable": [[435, "enable"]], "Bench": [[435, "bench"]], "SuperBench": [[435, "superbench"]], "Quick-Start": [[436, "quick-start"]], "Launcher Arguments (Optional)": [[436, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[437, "neural-coder-for-quantization"]], "Features Supported": [[437, "features-supported"]], "Models Supported": [[437, "models-supported"]], "Usage": [[437, "usage"], [461, "usage"], [461, "id1"], [463, "usage"], [463, "id2"], [463, "id4"], [463, "id6"], [463, "id8"], [463, "id10"], [463, "id12"], [463, "id14"], [463, "id16"], [463, "id18"], [463, "id20"], [463, "id22"]], "PyPI distribution:": [[437, "pypi-distribution"]], "Supported Optimization Features": [[438, "supported-optimization-features"]], "v0.4": [[439, "v0-4"]], "Highlights": [[439, "highlights"]], "Others": [[439, "others"]], "Changelog": [[440, "changelog"], [444, "changelog"]], "neural_compressor_ext_lab": [[441, "neural-compressor-ext-lab"]], "Requirements": [[441, "requirements"], [445, "requirements"]], "Install": [[441, "install"], [445, "install"]], "Uninstall": [[441, "uninstall"], [445, "uninstall"]], "Contributing": [[441, "contributing"], [445, "contributing"]], "Development install": [[441, "development-install"], [445, "development-install"]], "Development uninstall": [[441, "development-uninstall"], [445, "development-uninstall"]], "Packaging the extension": [[441, "packaging-the-extension"], [445, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[442, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[442, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[442, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[442, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[443, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[443, "manual-release"], [446, "manual-release"]], "Python package": [[443, "python-package"], [446, "python-package"]], "NPM package": [[443, "npm-package"], [446, "npm-package"]], "Automated releases with the Jupyter Releaser": [[443, "automated-releases-with-the-jupyter-releaser"], [446, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[443, "publishing-to-conda-forge"], [446, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[445, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[446, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[447, "change-log"]], "[Unreleased]": [[447, "unreleased"]], "Background Introduction": [[448, "background-introduction"]], "Neural Coder Extension in VSCode": [[448, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[448, "neural-coder-extension-usage"]], "1. Open": [[448, "open"]], "2. Search": [[448, "search"]], "3. Setting": [[448, "setting"]], "4. Icon": [[448, "icon"]], "5. optimization (quantization)": [[448, "optimization-quantization"]], "5.1 Enable": [[448, "enable"]], "5.2 Auto": [[448, "auto"]], "Welcome to your VS Code Extension": [[449, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[449, "what-s-in-the-folder"]], "Setup": [[449, "setup"]], "Get up and running straight away": [[449, "get-up-and-running-straight-away"]], "Make changes": [[449, "make-changes"]], "Explore the API": [[449, "explore-the-api"]], "Run tests": [[449, "run-tests"]], "Go further": [[449, "go-further"]], "Single Objective": [[450, "single-objective"]], "Multiple Objectives": [[450, "multiple-objectives"]], "Objective Support Matrix": [[450, "objective-support-matrix"]], "Get Started with Objective API": [[450, "get-started-with-objective-api"]], "Config Single Objective": [[450, "config-single-objective"]], "Config Multiple Objectives": [[450, "config-multiple-objectives"]], "Optimization Orchestration": [[451, "optimization-orchestration"]], "One-shot": [[451, "one-shot"]], "Orchestration Support Matrix": [[451, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[451, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[452, "system-configuration"]], "Neural Network Pruning": [[453, "neural-network-pruning"]], "Pruning Patterns": [[453, "pruning-patterns"]], "Pruning Criteria": [[453, "pruning-criteria"]], "Pruning Types": [[453, "pruning-types"]], "Pruning Schedules": [[453, "pruning-schedules"]], "Pruning Scope": [[453, "pruning-scope"]], "Sparsity Decay Types": [[453, "sparsity-decay-types"]], "Regularization": [[453, "regularization"]], "Pruning Support Matrix": [[453, "pruning-support-matrix"]], "Get Started with Pruning API": [[453, "get-started-with-pruning-api"]], "Sparse Model Deployment": [[453, "sparse-model-deployment"]], "Reference": [[453, "reference"], [456, "reference"], [460, "reference"]], "Full Publications/Events (60)": [[454, "full-publications-events-60"]], "2023 (7)": [[454, "id1"]], "2022 (34)": [[454, "id2"]], "2021 (15)": [[454, "id3"]], "2018 - 2020 (4)": [[454, "id4"]], "Pythonic Style Access for Configurations": [[455, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[455, "pythonic-api-for-user-configurations"], [455, "id1"]], "Pythonic API for Framework Configurations": [[455, "pythonic-api-for-framework-configurations"], [455, "id2"]], "Get Started with Pythonic API for Configurations": [[455, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[455, "nas"]], "Quantization Introduction": [[456, "quantization-introduction"]], "Quantization Fundamentals": [[456, "quantization-fundamentals"], [460, "quantization-fundamentals"]], "Quantization Support Matrix": [[456, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[456, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[456, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[456, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[456, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[456, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[456, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[456, "with-or-without-accuracy-aware-tuning"]], "Get Started": [[456, "get-started"]], "Post Training Quantization": [[456, "post-training-quantization"]], "Specify Quantization Rules": [[456, "specify-quantization-rules"]], "Specify Quantization Recipes": [[456, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[456, "specify-quantization-backend-and-device"]], "Turn OFF Auto Mixed Precision during Quantization": [[457, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[457, "tensorflow"]], "Release": [[458, "release"]], "Release Notes": [[458, "release-notes"]], "Known Issues": [[458, "known-issues"]], "Incompatible Changes": [[458, "incompatible-changes"]], "SigOpt Strategy": [[459, "sigopt-strategy"]], "Preparation": [[459, "preparation"]], "SigOpt Platform": [[459, "sigopt-platform"]], "Neural Compressor Configuration": [[459, "neural-compressor-configuration"]], "Performance": [[459, "performance"]], "Benefit of SigOpt Strategy": [[459, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[459, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[460, "smooth-quant"]], "Per-tensor & Per-channel": [[460, "per-tensor-per-channel"]], "Per-tensor example": [[460, "per-tensor-example"]], "Per-channel example": [[460, "per-channel-example"]], "Matmul quantization example": [[460, "matmul-quantization-example"]], "Per-channel limitation": [[460, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[460, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[460, "smoothquant"]], "Our enhancement:": [[460, "our-enhancement"]], "Algorithm: Layer-wise Auto-tuning of $\\alpha$.": [[460, "algorithm-layer-wise-auto-tuning-of-alpha"]], "Engineering": [[460, "engineering"]], "Supported Framework Matrix": [[460, "supported-framework-matrix"]], "TensorBoard": [[461, "tensorboard"]], "Get Started with TensorBoard": [[461, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[461, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[461, "tensorflow-tensorboard"]], "PyTorch Examples": [[461, "pytorch-examples"]], "TensorFlow Examples": [[461, "tensorflow-examples"]], "Transform": [[462, "transform"]], "Transform Support List": [[462, "transform-support-list"]], "Pytorch": [[462, "pytorch"]], "Tuning Strategies": [[463, "tuning-strategies"]], "Strategy Design": [[463, "strategy-design"]], "Tuning Space": [[463, "tuning-space"]], "Exit Policy": [[463, "exit-policy"]], "Accuracy Criteria": [[463, "accuracy-criteria"]], "Tuning Process": [[463, "tuning-process"]], "Tuning Algorithms": [[463, "tuning-algorithms"]], "Auto": [[463, "auto"]], "Conservative Tuning": [[463, "conservative-tuning"]], "Basic": [[463, "basic"]], "MSE": [[463, "mse"]], "MSE_V2": [[463, "mse-v2"]], "HAWQ_V2": [[463, "hawq-v2"]], "Bayesian": [[463, "bayesian"]], "Exhaustive": [[463, "exhaustive"]], "Random": [[463, "random"]], "SigOpt": [[463, "sigopt"]], "TPE": [[463, "tpe"]], "Distributed Tuning": [[463, "distributed-tuning"]], "Customize a New Tuning Strategy": [[463, "customize-a-new-tuning-strategy"]], "User Guide": [[464, "user-guide"]], "Overview": [[464, "overview"]], "Python-based APIs": [[464, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[464, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[464, "advanced-topics"]], "User YAML Configuration Files": [[465, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[465, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[466, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.11.0": [[466, "tensorflow-models-with-intel-tensorflow-2-11-0"]], "PyTorch Models with Torch 1.13.0+cpu in PTQ Mode": [[466, "pytorch-models-with-torch-1-13-0-cpu-in-ptq-mode"]], "PyTorch Models with Torch 1.13.0+cpu in QAT Mode": [[466, "pytorch-models-with-torch-1-13-0-cpu-in-qat-mode"]], "PyTorch Models with Torch and Intel\u00ae Extension for PyTorch* 1.13.0+cpu": [[466, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-13-0-cpu"]], "ONNX Models with ONNX Runtime 1.13.1": [[466, "onnx-models-with-onnx-runtime-1-13-1"]], "MXNet Models with MXNet 1.9.1": [[466, "mxnet-models-with-mxnet-1-9-1"]], "Validated Pruning Examples": [[466, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[466, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[466, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.adaptor.adaptor"], [2, "module-neural_compressor.adaptor"], [3, "module-neural_compressor.adaptor.keras"], [4, "module-neural_compressor.adaptor.keras_utils.conv2d"], [5, "module-neural_compressor.adaptor.keras_utils.dense"], [6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [7, "module-neural_compressor.adaptor.keras_utils"], [8, "module-neural_compressor.adaptor.keras_utils.pool2d"], [9, "module-neural_compressor.adaptor.keras_utils.quantizer"], [10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils.calibrator"], [17, "module-neural_compressor.adaptor.ox_utils"], [18, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [20, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [22, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [23, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [29, "module-neural_compressor.adaptor.ox_utils.operators"], [30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [33, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [34, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [36, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [37, "module-neural_compressor.adaptor.ox_utils.operators.split"], [38, "module-neural_compressor.adaptor.ox_utils.quantizer"], [39, "module-neural_compressor.adaptor.ox_utils.smooth_quant"], [40, "module-neural_compressor.adaptor.ox_utils.util"], [41, "module-neural_compressor.adaptor.pytorch"], [42, "module-neural_compressor.adaptor.query"], [43, "module-neural_compressor.adaptor.tensorflow"], [44, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [45, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [106, "module-neural_compressor.adaptor.tf_utils.graph_util"], [107, "module-neural_compressor.adaptor.tf_utils"], [108, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [136, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"], [137, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"], [138, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [139, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [140, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [141, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [142, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [144, "module-neural_compressor.adaptor.tf_utils.util"], [145, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [146, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [147, "module-neural_compressor.adaptor.torch_utils"], [148, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [149, "module-neural_compressor.adaptor.torch_utils.pattern_detector"], [150, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [151, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [152, "module-neural_compressor.adaptor.torch_utils.util"], [153, "module-neural_compressor.algorithm.algorithm"], [154, "module-neural_compressor.algorithm.fast_bias_correction"], [155, "module-neural_compressor.algorithm"], [156, "module-neural_compressor.algorithm.smooth_quant"], [157, "module-neural_compressor.algorithm.weight_correction"], [158, "module-neural_compressor.benchmark"], [159, "module-neural_compressor.compression.callbacks"], [160, "module-neural_compressor.compression.distillation.criterions"], [161, "module-neural_compressor.compression.distillation"], [162, "module-neural_compressor.compression"], [163, "module-neural_compressor.compression.pruner.criteria"], [164, "module-neural_compressor.compression.pruner"], [165, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [166, "module-neural_compressor.compression.pruner.model_slim"], [167, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [168, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [169, "module-neural_compressor.compression.pruner.patterns"], [170, "module-neural_compressor.compression.pruner.pruners"], [171, "module-neural_compressor.compression.pruner.regs"], [172, "module-neural_compressor.compression.pruner.schedulers"], [173, "module-neural_compressor.compression.pruner.utils"], [174, "module-neural_compressor.conf.config"], [175, "module-neural_compressor.conf.dotdict"], [176, "module-neural_compressor.conf"], [177, "module-neural_compressor.conf.pythonic_config"], [178, "module-neural_compressor.config"], [179, "module-neural_compressor.contrib"], [180, "module-neural_compressor.contrib.strategy"], [181, "module-neural_compressor.contrib.strategy.sigopt"], [182, "module-neural_compressor.contrib.strategy.tpe"], [183, "module-neural_compressor.data.dataloaders.base_dataloader"], [184, "module-neural_compressor.data.dataloaders.dataloader"], [185, "module-neural_compressor.data.dataloaders.default_dataloader"], [186, "module-neural_compressor.data.dataloaders.fetcher"], [187, "module-neural_compressor.data.dataloaders"], [188, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [189, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [190, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [191, "module-neural_compressor.data.dataloaders.sampler"], [192, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [193, "module-neural_compressor.data.datasets.bert_dataset"], [194, "module-neural_compressor.data.datasets.coco_dataset"], [195, "module-neural_compressor.data.datasets.dataset"], [196, "module-neural_compressor.data.datasets.dummy_dataset"], [197, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [198, "module-neural_compressor.data.datasets.imagenet_dataset"], [199, "module-neural_compressor.data.datasets"], [200, "module-neural_compressor.data.datasets.style_transfer_dataset"], [201, "module-neural_compressor.data.filters.coco_filter"], [202, "module-neural_compressor.data.filters.filter"], [203, "module-neural_compressor.data.filters"], [204, "module-neural_compressor.data"], [205, "module-neural_compressor.data.transforms.coco_transform"], [206, "module-neural_compressor.data.transforms.imagenet_transform"], [207, "module-neural_compressor.data.transforms"], [208, "module-neural_compressor.data.transforms.postprocess"], [209, "module-neural_compressor.data.transforms.tokenization"], [210, "module-neural_compressor.data.transforms.transform"], [211, "module-neural_compressor.experimental.benchmark"], [212, "module-neural_compressor.experimental.common.criterion"], [213, "module-neural_compressor.experimental.common.dataloader"], [214, "module-neural_compressor.experimental.common"], [215, "module-neural_compressor.experimental.common.metric"], [216, "module-neural_compressor.experimental.common.model"], [217, "module-neural_compressor.experimental.common.optimizer"], [218, "module-neural_compressor.experimental.common.postprocess"], [219, "module-neural_compressor.experimental.common.torch_utils"], [220, "module-neural_compressor.experimental.component"], [221, "module-neural_compressor.experimental.compression"], [222, "module-neural_compressor.experimental.compression.pruning"], [223, "module-neural_compressor.experimental.contrib"], [224, "module-neural_compressor.experimental.contrib.strategy"], [225, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [226, "module-neural_compressor.experimental.contrib.strategy.tpe"], [227, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [228, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [229, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [230, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [231, "module-neural_compressor.experimental.data.dataloaders"], [232, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [233, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [234, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [235, "module-neural_compressor.experimental.data.dataloaders.sampler"], [236, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [237, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [238, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [239, "module-neural_compressor.experimental.data.datasets.dataset"], [240, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [241, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [242, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [243, "module-neural_compressor.experimental.data.datasets"], [244, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [245, "module-neural_compressor.experimental.data.filters.coco_filter"], [246, "module-neural_compressor.experimental.data.filters.filter"], [247, "module-neural_compressor.experimental.data.filters"], [248, "module-neural_compressor.experimental.data"], [249, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [250, "module-neural_compressor.experimental.data.transforms"], [251, "module-neural_compressor.experimental.data.transforms.tokenization"], [252, "module-neural_compressor.experimental.data.transforms.transform"], [253, "module-neural_compressor.experimental.distillation"], [254, "module-neural_compressor.experimental.export"], [255, "module-neural_compressor.experimental.export.qlinear2qdq"], [256, "module-neural_compressor.experimental.export.tf2onnx"], [257, "module-neural_compressor.experimental.export.torch2onnx"], [258, "module-neural_compressor.experimental.graph_optimization"], [259, "module-neural_compressor.experimental"], [260, "module-neural_compressor.experimental.metric.bleu"], [261, "module-neural_compressor.experimental.metric.bleu_util"], [262, "module-neural_compressor.experimental.metric.coco_label_map"], [263, "module-neural_compressor.experimental.metric.coco_tools"], [264, "module-neural_compressor.experimental.metric.evaluate_squad"], [265, "module-neural_compressor.experimental.metric.f1"], [266, "module-neural_compressor.experimental.metric"], [267, "module-neural_compressor.experimental.metric.metric"], [268, "module-neural_compressor.experimental.mixed_precision"], [269, "module-neural_compressor.experimental.model_conversion"], [270, "module-neural_compressor.experimental.nas.basic_nas"], [271, "module-neural_compressor.experimental.nas.dynas"], [272, "module-neural_compressor.experimental.nas"], [273, "module-neural_compressor.experimental.nas.nas"], [274, "module-neural_compressor.experimental.nas.nas_utils"], [275, "module-neural_compressor.experimental.nas.search_algorithms"], [276, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [277, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [278, "module-neural_compressor.experimental.pruner_legacy"], [279, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [280, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [281, "module-neural_compressor.experimental.pruner_legacy.pruner"], [282, "module-neural_compressor.experimental.pruning"], [283, "module-neural_compressor.experimental.pruning_recipes"], [284, "module-neural_compressor.experimental.pruning_recipes.patterns"], [285, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [286, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [287, "module-neural_compressor.experimental.pruning_v2"], [288, "module-neural_compressor.experimental.pytorch_pruner"], [289, "module-neural_compressor.experimental.pytorch_pruner.logger"], [290, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [291, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [292, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [293, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [294, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [295, "module-neural_compressor.experimental.quantization"], [296, "module-neural_compressor.experimental.scheduler"], [297, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [298, "module-neural_compressor.experimental.strategy.basic"], [299, "module-neural_compressor.experimental.strategy.bayesian"], [300, "module-neural_compressor.experimental.strategy.exhaustive"], [301, "module-neural_compressor.experimental.strategy"], [302, "module-neural_compressor.experimental.strategy.mse"], [303, "module-neural_compressor.experimental.strategy.mse_v2"], [304, "module-neural_compressor.experimental.strategy.random"], [305, "module-neural_compressor.experimental.strategy.strategy"], [306, "module-neural_compressor.experimental.strategy.utils.constant"], [307, "module-neural_compressor.experimental.strategy.utils"], [308, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [309, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [310, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [311, "module-neural_compressor.experimental.strategy.utils.utility"], [312, "module-neural_compressor"], [313, "module-neural_compressor.metric.bleu"], [314, "module-neural_compressor.metric.bleu_util"], [315, "module-neural_compressor.metric.coco_label_map"], [316, "module-neural_compressor.metric.coco_tools"], [317, "module-neural_compressor.metric.evaluate_squad"], [318, "module-neural_compressor.metric.f1"], [319, "module-neural_compressor.metric"], [320, "module-neural_compressor.metric.metric"], [321, "module-neural_compressor.mix_precision"], [322, "module-neural_compressor.model.base_model"], [323, "module-neural_compressor.model"], [324, "module-neural_compressor.model.keras_model"], [325, "module-neural_compressor.model.model"], [326, "module-neural_compressor.model.mxnet_model"], [327, "module-neural_compressor.model.nets_factory"], [328, "module-neural_compressor.model.onnx_model"], [329, "module-neural_compressor.model.tensorflow_model"], [330, "module-neural_compressor.model.torch_model"], [331, "module-neural_compressor.objective"], [332, "module-neural_compressor.profiling"], [333, "module-neural_compressor.profiling.parser.factory"], [334, "module-neural_compressor.profiling.parser"], [335, "module-neural_compressor.profiling.parser.onnx_parser.factory"], [336, "module-neural_compressor.profiling.parser.onnx_parser"], [337, "module-neural_compressor.profiling.parser.onnx_parser.parser"], [338, "module-neural_compressor.profiling.parser.parser"], [339, "module-neural_compressor.profiling.parser.result"], [340, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"], [341, "module-neural_compressor.profiling.parser.tensorflow_parser"], [342, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"], [343, "module-neural_compressor.profiling.profiler.factory"], [344, "module-neural_compressor.profiling.profiler"], [345, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"], [346, "module-neural_compressor.profiling.profiler.onnxrt_profiler"], [347, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"], [348, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"], [349, "module-neural_compressor.profiling.profiler.profiler"], [350, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"], [351, "module-neural_compressor.profiling.profiler.tensorflow_profiler"], [352, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"], [353, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"], [354, "module-neural_compressor.quantization"], [355, "module-neural_compressor.strategy.auto"], [356, "module-neural_compressor.strategy.auto_mixed_precision"], [357, "module-neural_compressor.strategy.basic"], [358, "module-neural_compressor.strategy.bayesian"], [359, "module-neural_compressor.strategy.conservative"], [360, "module-neural_compressor.strategy.exhaustive"], [361, "module-neural_compressor.strategy.hawq_v2"], [362, "module-neural_compressor.strategy"], [363, "module-neural_compressor.strategy.mse"], [364, "module-neural_compressor.strategy.mse_v2"], [365, "module-neural_compressor.strategy.random"], [366, "module-neural_compressor.strategy.strategy"], [367, "module-neural_compressor.strategy.utils.constant"], [368, "module-neural_compressor.strategy.utils"], [369, "module-neural_compressor.strategy.utils.tuning_sampler"], [370, "module-neural_compressor.strategy.utils.tuning_space"], [371, "module-neural_compressor.strategy.utils.tuning_structs"], [372, "module-neural_compressor.strategy.utils.utility"], [373, "module-neural_compressor.template.api_doc_example"], [374, "module-neural_compressor.template"], [375, "module-neural_compressor.training"], [376, "module-neural_compressor.utils.collect_layer_histogram"], [377, "module-neural_compressor.utils.constant"], [378, "module-neural_compressor.utils.create_obj_from_config"], [379, "module-neural_compressor.utils"], [380, "module-neural_compressor.utils.kl_divergence"], [381, "module-neural_compressor.utils.load_huggingface"], [382, "module-neural_compressor.utils.logger"], [383, "module-neural_compressor.utils.neural_insights_utils"], [384, "module-neural_compressor.utils.options"], [385, "module-neural_compressor.utils.pytorch"], [386, "module-neural_compressor.utils.utility"], [387, "module-neural_compressor.utils.weights_details"], [388, "module-neural_compressor.version"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasQuery"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[30, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[33, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[33, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[33, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[33, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[33, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[34, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[34, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[34, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[35, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[35, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[36, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[36, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[36, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[37, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[37, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[37, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[38, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[38, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[39, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant"]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[39, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output"]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[39, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[39, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[39, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[40, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[41, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[41, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[41, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[41, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[41, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[42, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[42, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[43, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[43, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[43, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[44, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[44, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[45, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[45, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[46, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[48, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[106, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[107, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[136, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[136, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[137, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[137, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[138, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[138, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[139, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[139, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[140, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[140, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[141, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[142, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[144, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[145, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[145, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[145, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[145, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[146, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[146, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[146, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[146, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[146, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[147, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[148, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[149, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[149, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "graphtrace (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[150, "neural_compressor.adaptor.torch_utils.smooth_quant.GraphTrace"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[150, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[150, "neural_compressor.adaptor.torch_utils.smooth_quant.get_module"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[150, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "set_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[150, "neural_compressor.adaptor.torch_utils.smooth_quant.set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[151, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[151, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[151, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_depth"]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "neural_compressor.adaptor.torch_utils.util": [[152, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[153, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[153, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[153, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[153, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[153, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[154, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[154, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[155, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[156, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[156, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[157, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[157, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[158, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.summary_benchmark"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[159, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[159, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[159, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[159, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[159, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[159, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[159, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[159, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[159, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[160, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[161, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[162, "module-neural_compressor.compression"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumblockcriterion (class in neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[163, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[163, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[163, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[163, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[163, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[163, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumblockcriterion attribute)": [[163, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[163, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[164, "module-neural_compressor.compression.pruner"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[165, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[165, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[165, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[165, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[165, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[165, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[165, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[166, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[167, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[168, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[168, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[168, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[168, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[168, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[168, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[168, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[168, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns)": [[169, "neural_compressor.compression.pruner.patterns.BasePattern"]], "m (neural_compressor.compression.pruner.patterns.patternmha attribute)": [[169, "neural_compressor.compression.pruner.patterns.PatternMHA.M"]], "m (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[169, "neural_compressor.compression.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.patternmha attribute)": [[169, "neural_compressor.compression.pruner.patterns.PatternMHA.N"]], "n (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[169, "neural_compressor.compression.pruner.patterns.PatternNInM.N"]], "patternmha (class in neural_compressor.compression.pruner.patterns)": [[169, "neural_compressor.compression.pruner.patterns.PatternMHA"]], "patternninm (class in neural_compressor.compression.pruner.patterns)": [[169, "neural_compressor.compression.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.compression.pruner.patterns)": [[169, "neural_compressor.compression.pruner.patterns.PatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.patternnxm attribute)": [[169, "neural_compressor.compression.pruner.patterns.PatternNxM.block_size"]], "config (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[169, "neural_compressor.compression.pruner.patterns.BasePattern.config"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[169, "neural_compressor.compression.pruner.patterns.get_pattern"]], "invalid_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[169, "neural_compressor.compression.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[169, "neural_compressor.compression.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[169, "neural_compressor.compression.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[169, "neural_compressor.compression.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[169, "neural_compressor.compression.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[169, "neural_compressor.compression.pruner.patterns.BasePattern.modules"]], "neural_compressor.compression.pruner.patterns": [[169, "module-neural_compressor.compression.pruner.patterns"]], "pattern (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[169, "neural_compressor.compression.pruner.patterns.BasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns)": [[169, "neural_compressor.compression.pruner.patterns.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[169, "neural_compressor.compression.pruner.patterns.BasePattern.target_sparsity"]], "basepruner (class in neural_compressor.compression.pruner.pruners)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.compression.pruner.pruners)": [[170, "neural_compressor.compression.pruner.pruners.BasicPruner"]], "blockmaskpruner (class in neural_compressor.compression.pruner.pruners)": [[170, "neural_compressor.compression.pruner.pruners.BlockMaskPruner"]], "multiheadattentionpruner (class in neural_compressor.compression.pruner.pruners)": [[170, "neural_compressor.compression.pruner.pruners.MultiheadAttentionPruner"]], "patternlockpruner (class in neural_compressor.compression.pruner.pruners)": [[170, "neural_compressor.compression.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.compression.pruner.pruners)": [[170, "neural_compressor.compression.pruner.pruners.ProgressivePruner"]], "retrainfreepruner (class in neural_compressor.compression.pruner.pruners)": [[170, "neural_compressor.compression.pruner.pruners.RetrainFreePruner"]], "config (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.criterion"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[170, "neural_compressor.compression.pruner.pruners.get_pruner"]], "global_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.modules"]], "neural_compressor.compression.pruner.pruners": [[170, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[170, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pattern (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.reg"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners)": [[170, "neural_compressor.compression.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.target_sparsity_ratio"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[171, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[171, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[171, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[171, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[171, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[171, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[171, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[171, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[172, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[172, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[172, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[172, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[172, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[172, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[172, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.check_key_validity"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "neural_compressor.compression.pruner.utils": [[173, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.Conf"]], "distillation_conf (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[174, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[175, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[175, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[175, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[175, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[176, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[177, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[177, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[177, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[177, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[177, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[177, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[177, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[177, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[178, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[178, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.ExportConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[178, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[178, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[178, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[178, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[178, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[178, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[178, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[178, "module-neural_compressor.config"]], "neural_compressor.contrib": [[179, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[180, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[181, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[181, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[182, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[182, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[183, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[183, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[184, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[184, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[184, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[185, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[185, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[185, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[186, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[186, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[186, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[186, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[187, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[188, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[188, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[189, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[189, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[189, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[190, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[190, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[191, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[191, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[191, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[191, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[191, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[192, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[192, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[192, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[192, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[192, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[193, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[193, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[193, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[193, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[193, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[193, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[193, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[193, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[193, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[194, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[194, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[194, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[194, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[194, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[195, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[196, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[196, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[197, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[197, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[197, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[198, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[198, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[198, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[198, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[198, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[198, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[198, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[199, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[200, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[200, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[201, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[201, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[201, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[202, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[202, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[202, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[202, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[202, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[202, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[202, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[202, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[202, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[203, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[204, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[205, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[205, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[206, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[206, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[206, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[206, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[206, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[206, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[206, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[206, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[206, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[206, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[207, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[208, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[208, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[209, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[209, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[209, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[209, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[209, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[209, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[209, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[209, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TRANSFORMS"], [210, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[210, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[211, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[211, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[211, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[211, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[211, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[211, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[211, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[211, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[211, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[211, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[212, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[213, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[213, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[214, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[215, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[215, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[216, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[216, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[216, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[217, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[217, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[217, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[217, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[217, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[217, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[217, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[217, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[217, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[218, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[218, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[219, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[219, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[219, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[220, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[220, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[221, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[222, "module-neural_compressor.experimental.compression.pruning"]], "prepare_pruning() (in module neural_compressor.experimental.compression.pruning)": [[222, "neural_compressor.experimental.compression.pruning.prepare_pruning"]], "save() (in module neural_compressor.experimental.compression.pruning)": [[222, "neural_compressor.experimental.compression.pruning.save"]], "neural_compressor.experimental.contrib": [[223, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[224, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[225, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[225, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[226, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[226, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[227, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[227, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[228, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[229, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[229, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[229, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[230, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[230, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[230, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[230, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[231, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[232, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[232, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[233, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[233, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[233, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[234, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[234, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[235, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[235, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[235, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[235, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[235, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[236, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[236, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[236, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[236, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[236, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[237, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[237, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[237, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[237, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[237, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[237, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[237, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[237, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[237, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[238, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[238, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[238, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[238, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[238, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[239, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[240, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[240, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[241, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[241, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[241, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[242, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[242, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[242, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[242, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[242, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[242, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[242, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[243, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[244, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[244, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[245, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[245, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[245, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[246, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[246, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[246, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[246, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[246, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[246, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[246, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[246, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[246, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[247, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[248, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[249, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[249, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[249, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[249, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[249, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[249, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[249, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[249, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[249, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[249, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[250, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[251, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[251, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[251, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[251, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[251, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[251, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[251, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[251, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [252, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[252, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[253, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[253, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[253, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[253, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[253, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[253, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[254, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[255, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[255, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[255, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[256, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[256, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[256, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[257, "module-neural_compressor.experimental.export.torch2onnx"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[257, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[257, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[258, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[258, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[259, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[260, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[260, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[260, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[260, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[260, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[260, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[260, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[260, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[260, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[261, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[261, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[262, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[263, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[263, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[263, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[263, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[263, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[263, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[263, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[263, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[264, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[264, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[264, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[264, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[264, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[265, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[265, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[265, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[265, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[265, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[266, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[267, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[267, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[267, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[267, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[267, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[267, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[267, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[267, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[267, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[267, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[267, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[267, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[267, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[267, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[267, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[267, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[267, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[267, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[267, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[267, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[267, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[267, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[267, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[267, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[267, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[267, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[268, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[268, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[269, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[269, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[270, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[270, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[271, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[271, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[272, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[273, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[273, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[273, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[274, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[274, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[274, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[274, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[275, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[275, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[275, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[275, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[275, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[276, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[276, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[277, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[277, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[278, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[279, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[279, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[280, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[280, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[281, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[281, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[281, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[282, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[282, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[282, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[282, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[282, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[283, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[284, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[285, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[285, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[285, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[285, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[285, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[286, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[286, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[286, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[286, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[286, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[286, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[286, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[287, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[287, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[287, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[287, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[287, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[288, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[289, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[290, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[290, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[291, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[291, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[291, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[291, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[291, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[291, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[291, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[292, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[293, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[293, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[294, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[294, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[294, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[294, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[294, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[294, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[295, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[295, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[296, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[296, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[297, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[297, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[298, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[298, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[299, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[299, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[299, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[299, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[299, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[300, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[300, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[301, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[302, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[302, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[303, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[303, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[304, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[304, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[305, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[305, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[305, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[306, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[307, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[308, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[308, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[308, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[308, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[308, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[308, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[308, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[308, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[308, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[309, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[309, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[309, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[309, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[309, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[309, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[309, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[310, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[310, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[311, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[311, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[311, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[311, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[311, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[312, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[313, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[313, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[313, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[313, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[313, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[313, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[313, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[313, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[313, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[314, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[314, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[315, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[316, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[316, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[316, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[316, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[316, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[316, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[316, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[316, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[317, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[317, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[317, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[317, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[317, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[318, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[318, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[318, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[318, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[318, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[319, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[320, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[320, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[320, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[320, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[320, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[320, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[320, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[320, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[320, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[320, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[320, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[320, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[320, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[320, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[320, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[320, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[320, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[320, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[320, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[320, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[320, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[320, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[320, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[320, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[320, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[320, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[320, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[320, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[320, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[320, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[320, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[320, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[320, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[320, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[320, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[320, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[320, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[320, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[320, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[320, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[320, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[320, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[320, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[320, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[320, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[320, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[320, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[320, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[320, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[320, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[320, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[320, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[320, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[320, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[320, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[321, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[321, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[322, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[322, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[323, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[324, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[324, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[325, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[325, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[325, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[326, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[326, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[327, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[327, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[328, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[328, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[329, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[329, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[329, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[329, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[329, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[329, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[329, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[329, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[329, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[329, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[329, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[329, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[329, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[329, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[329, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[329, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[329, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[329, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[330, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[330, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[330, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[330, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[330, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[331, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[331, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[331, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[331, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[331, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[331, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[331, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[331, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[331, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[332, "module-neural_compressor.profiling"]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[333, "neural_compressor.profiling.parser.factory.ParserFactory"]], "neural_compressor.profiling.parser.factory": [[333, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[334, "module-neural_compressor.profiling.parser"]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[335, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[335, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[336, "module-neural_compressor.profiling.parser.onnx_parser"]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[337, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[337, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[338, "neural_compressor.profiling.parser.parser.ProfilingParser"]], "neural_compressor.profiling.parser.parser": [[338, "module-neural_compressor.profiling.parser.parser"]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[339, "neural_compressor.profiling.parser.result.ProfilingResult"]], "neural_compressor.profiling.parser.result": [[339, "module-neural_compressor.profiling.parser.result"]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[340, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[340, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[341, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[342, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[342, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[343, "neural_compressor.profiling.profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.factory": [[343, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[344, "module-neural_compressor.profiling.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[345, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[345, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[346, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[347, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[347, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[348, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[348, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[349, "neural_compressor.profiling.profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.profiler": [[349, "module-neural_compressor.profiling.profiler.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[350, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[350, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[351, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[352, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[352, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[353, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config"]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[353, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[353, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[353, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution"]], "fit() (in module neural_compressor.quantization)": [[354, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[354, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[355, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[355, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[356, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[356, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[357, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[357, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[358, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[358, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[358, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[358, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[358, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[359, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[359, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[360, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[360, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[361, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[361, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[362, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[363, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[363, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[364, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[364, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[365, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[365, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[366, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[366, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[366, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[366, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[367, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[368, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[369, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[369, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[369, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[369, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[369, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[369, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[369, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[369, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.strategy.utils.tuning_sampler)": [[369, "neural_compressor.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_sampler": [[369, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[370, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[370, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[370, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[370, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[370, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[370, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[370, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[371, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[371, "module-neural_compressor.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[372, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[372, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[372, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[372, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[372, "module-neural_compressor.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[372, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[373, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[373, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[373, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[373, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[373, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[373, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[373, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[373, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[373, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[373, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[373, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[374, "module-neural_compressor.template"]], "callbacks (class in neural_compressor.training)": [[375, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[375, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[375, "neural_compressor.training.fit"]], "neural_compressor.training": [[375, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[375, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[376, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[376, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[377, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[378, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[378, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[378, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[378, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[378, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[378, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[378, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[378, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[378, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[378, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[379, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[380, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[380, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[381, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "neural_compressor.utils.load_huggingface": [[381, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[381, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[382, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[382, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[382, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[382, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[382, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[382, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[382, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[382, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[382, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.neural_insights_utils": [[383, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[383, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[383, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[383, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[384, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[384, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[385, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[385, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[385, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.Dequantize"]], "dequantizeweight() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.DequantizeWeight"]], "dotdict (class in neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.calculate_mse"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.compute_sparsity"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[386, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[386, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[387, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[387, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[387, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[388, "module-neural_compressor.version"]]}})