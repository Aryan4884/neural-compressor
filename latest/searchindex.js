Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/teq/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/hpo/index", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index", "autoapi/neural_compressor/compression/hpo/search_algorithms/index", "autoapi/neural_compressor/compression/hpo/search_space/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/base/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/patterns/mha/index", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index", "autoapi/neural_compressor/compression/pruner/pruners/base/index", "autoapi/neural_compressor/compression/pruner/pruners/basic/index", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/pruners/mha/index", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index", "autoapi/neural_compressor/compression/pruner/pruning/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/tf_criteria/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/weight_only/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/modified_pickle/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/quantize/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/torch_load/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/layer_wise_quant/utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/teq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/hpo/index.rst", "autoapi/neural_compressor/compression/hpo/sa_optimizer/index.rst", "autoapi/neural_compressor/compression/hpo/search_algorithms/index.rst", "autoapi/neural_compressor/compression/hpo/search_space/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/base/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/mha/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/base/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/basic/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/mha/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/sparse_gpt/index.rst", "autoapi/neural_compressor/compression/pruner/pruning/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/tf_criteria/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.reduce</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.unary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.layer_wise_quant.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.pattern_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.teq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.sa_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.hpo.search_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.ninm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.nxm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.progressive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.retrain_free</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.sparse_gpt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.tf_criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.neural_insights_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.weights_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (70)", "Pythonic Style Access for Configurations", "Quantization", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 44, 160, 165, 180, 190, 193, 198, 204, 320, 361, 403, 458, 484, 486, 491, 494, 497], "mask": [0, 180, 186, 188, 191, 193, 197, 198, 224, 267, 293, 322, 346, 486, 500], "adaptor_registri": [1, 426], "cl": [1, 157, 166, 173, 177, 178, 186, 191, 200, 201, 202, 226, 233, 241, 243, 248, 269, 276, 282, 304, 311, 315, 320, 322, 324, 335, 350, 361, 396, 416], "sourc": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 256, 257, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 279, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 363, 365, 367, 368, 369, 370, 372, 373, 375, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 399, 400, 401, 402, 403, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 425, 460, 462, 475, 477, 479, 480, 482, 487], "The": [1, 3, 11, 14, 16, 34, 53, 74, 113, 119, 121, 140, 148, 156, 158, 164, 166, 171, 172, 173, 177, 178, 180, 184, 186, 188, 189, 191, 192, 193, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 212, 213, 214, 224, 225, 226, 227, 228, 232, 233, 241, 243, 246, 248, 251, 255, 256, 257, 267, 268, 269, 270, 271, 275, 276, 282, 283, 288, 290, 291, 292, 294, 295, 297, 299, 300, 301, 303, 304, 306, 307, 309, 310, 311, 312, 315, 317, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 332, 333, 334, 335, 339, 341, 343, 344, 345, 347, 348, 350, 351, 359, 361, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 400, 402, 403, 405, 406, 408, 410, 411, 415, 416, 417, 420, 422, 423, 426, 427, 428, 429, 431, 435, 438, 441, 443, 444, 445, 446, 448, 449, 451, 453, 455, 457, 458, 459, 461, 462, 463, 464, 467, 468, 470, 473, 475, 476, 477, 479, 480, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500], "decor": [1, 16, 34, 67, 68, 70, 148, 166, 177, 178, 186, 191, 200, 202, 241, 248, 282, 297, 304, 311, 315, 320, 322, 324, 335, 338, 350, 361, 396, 416, 422, 423, 426, 497], "us": [1, 13, 16, 34, 42, 43, 44, 48, 49, 70, 103, 105, 116, 141, 151, 156, 158, 164, 165, 171, 173, 177, 178, 180, 184, 186, 191, 195, 196, 200, 202, 203, 205, 206, 208, 209, 212, 213, 222, 223, 224, 225, 226, 227, 228, 231, 240, 241, 242, 243, 248, 255, 256, 265, 266, 267, 268, 269, 270, 271, 274, 281, 282, 286, 287, 288, 290, 291, 293, 297, 298, 299, 304, 311, 312, 315, 317, 320, 322, 323, 324, 325, 326, 329, 332, 335, 338, 339, 343, 344, 346, 350, 361, 378, 383, 384, 388, 391, 393, 396, 400, 402, 403, 406, 407, 408, 409, 416, 420, 421, 422, 423, 426, 427, 443, 444, 446, 448, 449, 450, 451, 453, 455, 457, 459, 460, 462, 463, 464, 465, 466, 467, 469, 470, 473, 475, 477, 479, 480, 482, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500], "regist": [1, 16, 34, 154, 156, 166, 173, 177, 178, 180, 181, 186, 187, 191, 194, 200, 201, 202, 203, 226, 233, 241, 243, 248, 269, 276, 282, 297, 304, 311, 315, 320, 322, 324, 335, 338, 350, 361, 396, 402, 413, 423, 426, 446, 451, 461, 462, 483, 484, 494, 497], "all": [1, 13, 16, 34, 45, 63, 97, 150, 156, 157, 164, 165, 166, 168, 171, 172, 178, 181, 186, 194, 204, 208, 209, 214, 215, 222, 226, 233, 241, 242, 248, 251, 257, 265, 269, 276, 282, 287, 290, 293, 295, 297, 304, 311, 315, 316, 320, 326, 335, 338, 343, 346, 348, 350, 352, 361, 396, 402, 408, 416, 420, 425, 426, 427, 428, 445, 446, 451, 455, 459, 462, 465, 473, 476, 477, 480, 481, 482, 483, 485, 486, 487, 489, 490, 494, 496, 497], "subclass": [1, 16, 34, 166, 177, 178, 186, 191, 200, 202, 219, 223, 226, 233, 241, 248, 262, 266, 269, 276, 282, 297, 304, 311, 315, 320, 322, 324, 335, 338, 350, 361, 396, 426], "paramet": [1, 11, 13, 14, 16, 42, 43, 44, 45, 67, 68, 70, 86, 105, 116, 132, 140, 141, 148, 149, 150, 151, 156, 161, 162, 164, 165, 166, 171, 172, 173, 175, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 212, 213, 223, 224, 226, 233, 237, 241, 243, 248, 255, 256, 266, 267, 269, 276, 279, 282, 283, 285, 286, 287, 288, 290, 291, 293, 294, 295, 297, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 315, 317, 320, 321, 322, 323, 324, 325, 329, 335, 339, 341, 343, 344, 346, 347, 348, 350, 351, 355, 359, 361, 378, 383, 384, 388, 396, 400, 402, 403, 405, 408, 412, 413, 415, 416, 422, 427, 445, 446, 449, 451, 458, 461, 462, 476, 482, 483, 486, 489, 491, 493, 494, 496, 497, 499], "framework_specific_info": [1, 3, 11, 14, 45, 47, 426], "base": [1, 3, 13, 16, 34, 45, 46, 47, 86, 105, 116, 120, 122, 132, 144, 151, 154, 160, 164, 166, 172, 177, 178, 179, 180, 181, 187, 194, 201, 203, 209, 214, 217, 222, 224, 226, 233, 241, 251, 257, 260, 265, 267, 269, 276, 282, 297, 303, 305, 311, 312, 315, 317, 322, 332, 335, 339, 350, 352, 359, 360, 361, 393, 396, 400, 423, 425, 426, 427, 428, 446, 450, 451, 455, 462, 463, 470, 471, 473, 482, 486, 489, 491, 493, 495, 497, 500], "framework": [1, 3, 11, 13, 14, 45, 171, 173, 181, 187, 191, 194, 198, 199, 200, 210, 211, 215, 216, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 235, 238, 241, 243, 244, 248, 253, 254, 258, 259, 261, 263, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 278, 280, 282, 288, 297, 298, 325, 333, 339, 350, 351, 352, 353, 355, 394, 400, 408, 425, 426, 428, 444, 448, 451, 452, 456, 457, 458, 459, 461, 462, 463, 486, 487, 489, 492, 495, 496, 497, 498, 499, 500], "layer": [1, 3, 11, 14, 45, 46, 47, 116, 117, 118, 119, 121, 122, 150, 153, 155, 157, 161, 165, 169, 173, 182, 184, 185, 186, 190, 195, 204, 208, 209, 243, 250, 320, 321, 406, 408, 416, 426, 427, 428, 450, 458, 486, 492], "mxnet_util": 2, "util": [2, 12, 17, 105, 110, 111, 139, 142, 149, 151, 152, 153, 162, 179, 181, 208, 209, 250, 289, 291, 321, 331, 342, 344, 376, 381, 392, 427, 428, 429, 444, 451, 462, 465, 489, 497, 498], "ox_util": 2, "oper": [2, 17, 43, 104, 110, 140, 148, 184, 185, 190, 208, 209, 237, 279, 320, 378, 383, 422, 443, 445, 448, 453, 482, 489, 491, 494, 496, 497], "activ": [2, 17, 29, 44, 141, 164, 165, 208, 209, 250, 339, 400, 402, 426, 427, 428, 444, 448, 450, 455, 462, 483, 488, 489, 491, 494, 495, 499], "argmax": [2, 17, 29], "attent": [2, 17, 29, 160, 182, 184, 195, 208, 209, 224, 267, 420, 449, 486], "binary_op": [2, 17, 29], "concat": [2, 17, 29, 147], "conv": [2, 17, 29, 58, 62, 66, 71, 72, 73, 92, 109, 169, 208, 209, 422, 427, 428, 462, 486, 488, 489, 497], "direct_q8": [2, 17, 29], "embed_layernorm": [2, 17, 29], "gather": [2, 13, 17, 29, 208, 209, 320], "gavgpool": [2, 17, 29], "gemm": [2, 17, 29, 208, 209], "lstm": [2, 17, 29], "matmul": [2, 17, 29, 52, 59, 65, 73, 94, 109, 128, 137, 190, 208, 209, 320, 455, 497], "maxpool": [2, 17, 29, 129, 138, 455], "norm": [2, 17, 29], "op": [2, 13, 17, 29, 45, 52, 57, 65, 66, 67, 68, 69, 70, 71, 72, 74, 78, 81, 85, 88, 91, 92, 93, 94, 96, 105, 107, 109, 123, 124, 125, 131, 133, 134, 135, 136, 141, 143, 146, 148, 149, 151, 162, 164, 169, 184, 208, 209, 287, 332, 339, 340, 378, 383, 389, 391, 393, 400, 401, 402, 410, 416, 426, 427, 428, 448, 455, 462, 463, 486, 489, 490, 492, 494, 495, 497, 499], "pad": [2, 17, 29, 71, 72, 224, 241, 267, 282, 446, 496], "pool": [2, 17, 29], "reduc": [2, 17, 29, 208, 209, 426, 444, 450, 462, 463, 482, 483, 486, 487, 489, 490, 491, 494, 497, 499], "resiz": [2, 17, 29, 224, 225, 237, 241, 267, 268, 279, 282, 446, 496], "split": [2, 17, 29, 43, 44, 82, 165, 240, 241, 281, 282, 422, 491, 494, 496], "unary_op": [2, 17, 29], "calibr": [2, 11, 13, 14, 17, 44, 49, 89, 90, 140, 164, 165, 171, 208, 209, 212, 213, 255, 256, 288, 325, 384, 410, 426, 428, 446, 457, 458, 489, 497, 498, 499], "quantiz": [2, 11, 13, 14, 16, 17, 42, 43, 44, 48, 49, 88, 92, 94, 96, 99, 107, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 149, 150, 151, 152, 153, 157, 158, 159, 161, 163, 164, 165, 169, 171, 172, 208, 209, 212, 213, 237, 244, 251, 255, 256, 279, 287, 288, 289, 299, 326, 332, 338, 342, 389, 391, 393, 402, 405, 406, 410, 415, 416, 426, 433, 445, 446, 451, 452, 455, 457, 458, 461, 464, 465, 470, 472, 473, 476, 485, 487, 492, 495, 496, 497, 498, 499], "smooth_quant": [2, 17, 168, 208, 209, 342, 489, 494], "weight_onli": [2, 17, 209, 491], "tf_util": 2, "graph_rewrit": [2, 111], "bf16": [2, 57, 87, 111, 149, 208, 209, 339, 400, 426, 427, 455, 462, 467, 472, 476, 482, 490, 497, 500], "gener": [2, 13, 48, 49, 87, 111, 122, 148, 150, 164, 171, 184, 204, 212, 213, 214, 223, 226, 227, 228, 229, 241, 255, 256, 257, 266, 269, 270, 271, 272, 282, 290, 298, 329, 343, 351, 379, 384, 388, 403, 405, 422, 426, 428, 445, 449, 461, 462, 463, 465, 470, 475, 477, 479, 480, 482, 484, 486, 487, 489, 490, 491, 494, 495, 496, 497], "int8": [2, 18, 19, 43, 87, 111, 123, 124, 125, 131, 133, 134, 135, 136, 143, 148, 165, 170, 171, 208, 209, 237, 279, 285, 286, 287, 339, 341, 400, 402, 415, 416, 422, 425, 426, 427, 428, 443, 446, 450, 455, 462, 463, 467, 470, 472, 473, 476, 482, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 499], "onnx": [2, 14, 15, 16, 29, 41, 43, 44, 87, 111, 142, 169, 208, 209, 220, 263, 285, 286, 287, 351, 358, 378, 414, 425, 426, 427, 429, 445, 448, 452, 453, 455, 456, 458, 463, 464, 467, 472, 473, 487, 488, 491, 492, 494, 497], "qdq": [2, 42, 44, 87, 111, 112, 113, 142, 164, 165, 208, 209, 285, 286, 287, 426, 448, 453, 458, 472, 473, 489, 492, 494], "graph_bas": [2, 87, 111], "quantize_graph": [2, 111], "qat": [2, 111, 112, 162, 209, 299, 359, 450, 451, 458, 462, 489], "quantize_graph_bas": [2, 111, 112], "quantize_graph_bn": [2, 111, 112], "quantize_graph_concatv2": [2, 111, 112], "quantize_graph_conv": [2, 111, 112], "quantize_graph_for_intel_cpu": [2, 111, 112], "quantize_graph_matmul": [2, 111, 112], "quantize_graph_pool": [2, 111, 112], "transform_graph": [2, 111], "bias_correct": [2, 111, 145], "graph_transform_bas": [2, 111, 145], "insert_log": [2, 111, 145], "rerange_quantized_concat": [2, 111, 145], "graph_convert": [2, 111], "graph_converter_without_calib": [2, 111], "graph_util": [2, 111], "quantize_graph_common": [2, 111], "smooth_quant_calibr": [2, 111], "smooth_quant_scal": [2, 111], "tf2onnx_convert": [2, 111], "torch_util": [2, 245, 289, 342, 494], "layer_wise_qu": [2, 152, 209], "modified_pickl": [2, 152, 153], "torch_load": [2, 152, 153], "bf16_convert": [2, 51, 87, 111, 152], "hawq_metr": [2, 152], "model_wrapp": [2, 15, 152], "pattern_detector": [2, 152], "symbolic_trac": [2, 152], "tensorflow": [2, 51, 53, 75, 76, 77, 87, 95, 101, 102, 103, 104, 105, 106, 110, 111, 112, 114, 117, 130, 140, 141, 142, 145, 148, 203, 208, 209, 223, 224, 225, 226, 229, 231, 233, 241, 243, 248, 266, 267, 268, 269, 272, 274, 276, 282, 286, 287, 288, 291, 293, 297, 298, 299, 325, 333, 344, 346, 350, 351, 359, 377, 378, 382, 383, 384, 394, 416, 423, 425, 426, 427, 444, 445, 448, 449, 450, 452, 455, 456, 458, 459, 462, 463, 464, 472, 473, 486, 487, 488, 493, 494, 497, 499], "kerasadaptor": 3, "kerasqueri": 3, "local_config_fil": [3, 45, 47], "none": [3, 13, 41, 43, 45, 47, 48, 49, 63, 89, 102, 104, 105, 110, 116, 142, 148, 150, 151, 155, 156, 157, 158, 159, 161, 163, 164, 165, 171, 172, 173, 178, 180, 181, 182, 184, 188, 200, 204, 205, 206, 208, 209, 212, 213, 214, 216, 219, 222, 223, 224, 225, 226, 227, 228, 229, 231, 237, 241, 242, 243, 244, 251, 255, 256, 257, 259, 262, 265, 266, 267, 268, 269, 270, 271, 272, 274, 279, 282, 283, 286, 287, 288, 293, 297, 298, 299, 300, 303, 312, 317, 321, 325, 327, 329, 332, 335, 339, 346, 350, 351, 361, 377, 382, 383, 384, 385, 386, 388, 389, 391, 393, 396, 400, 403, 405, 406, 408, 413, 415, 416, 426, 427, 445, 446, 461, 489, 491, 495, 496, 497], "defin": [3, 45, 46, 86, 151, 159, 177, 178, 184, 186, 191, 192, 193, 198, 199, 200, 201, 202, 208, 209, 212, 213, 255, 256, 300, 301, 303, 304, 305, 312, 317, 320, 321, 322, 324, 351, 384, 405, 415, 420, 423, 426, 427, 445, 446, 449, 450, 455, 458, 461, 462, 483, 485, 486, 489, 493, 494, 495, 497, 499], "queri": [3, 13, 45, 47, 148, 164, 184, 195, 208, 209, 427, 428, 489], "interfac": [3, 45, 46, 86, 113, 205, 288, 312, 317, 325, 326, 408, 458, 462, 473, 489, 492], "each": [3, 45, 46, 141, 148, 151, 156, 204, 208, 209, 222, 226, 229, 237, 241, 265, 269, 272, 279, 282, 291, 293, 294, 295, 332, 344, 346, 347, 348, 393, 416, 421, 426, 427, 428, 446, 448, 449, 450, 455, 462, 467, 473, 476, 482, 484, 486, 493, 494, 495, 496, 497, 498], "adapt": [3, 45, 46, 420, 425, 427, 446, 473, 487], "should": [3, 45, 46, 54, 115, 116, 156, 172, 182, 184, 195, 208, 209, 212, 213, 222, 224, 226, 241, 246, 255, 256, 265, 267, 269, 282, 287, 291, 344, 350, 351, 384, 403, 405, 416, 422, 423, 426, 427, 428, 446, 449, 451, 461, 462, 468, 477, 480, 482, 484, 486, 489, 496, 497, 499], "implement": [3, 45, 46, 110, 143, 147, 156, 212, 213, 219, 222, 223, 224, 226, 255, 256, 262, 265, 266, 267, 269, 290, 343, 351, 361, 384, 391, 405, 428, 445, 446, 461, 462, 473, 483, 486, 489, 491, 492, 495, 497, 499], "inherit": [3, 45, 46, 172, 173, 196, 197, 202, 208, 221, 241, 243, 251, 264, 282, 322, 324, 423, 426, 427, 446], "specif": [3, 11, 14, 42, 45, 46, 104, 116, 165, 171, 204, 208, 209, 224, 225, 226, 227, 231, 233, 248, 267, 268, 269, 270, 274, 276, 299, 306, 307, 309, 310, 311, 350, 384, 413, 420, 423, 426, 427, 444, 445, 448, 449, 455, 457, 461, 462, 463, 464, 465, 469, 470, 472, 476, 482, 484, 486, 488, 497, 499], "backend": [3, 15, 41, 42, 45, 46, 169, 208, 209, 210, 211, 215, 216, 220, 224, 225, 227, 228, 229, 230, 231, 235, 238, 241, 247, 248, 253, 254, 258, 259, 261, 263, 267, 268, 270, 271, 272, 273, 274, 278, 280, 282, 298, 333, 351, 352, 353, 355, 394, 422, 428, 448, 451, 457, 458, 462, 463, 471, 488, 496, 499], "own": [3, 45, 46, 74, 156, 222, 241, 265, 282, 361, 423, 427, 445, 446, 458, 461, 484, 491, 493, 498], "mxnetadaptor": 11, "do": [11, 14, 150, 172, 200, 208, 209, 223, 224, 266, 267, 283, 287, 290, 293, 323, 343, 346, 415, 420, 427, 446, 451, 455, 458, 461, 462, 477, 480, 486, 490, 492, 494, 497], "inspect": [11, 14, 492, 495], "tensor": [11, 13, 14, 15, 16, 43, 44, 70, 105, 148, 151, 156, 157, 164, 165, 180, 181, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 209, 241, 282, 285, 287, 320, 322, 332, 359, 393, 416, 422, 428, 445, 446, 448, 486, 489, 492, 495, 496, 497], "dict": [11, 13, 14, 44, 45, 116, 148, 149, 150, 151, 156, 164, 165, 166, 171, 177, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 212, 213, 223, 242, 248, 255, 256, 266, 285, 287, 292, 293, 294, 295, 297, 300, 303, 304, 305, 312, 315, 317, 320, 321, 322, 323, 324, 329, 332, 338, 341, 345, 346, 347, 348, 350, 351, 359, 384, 399, 402, 403, 405, 406, 408, 415, 416, 422, 427, 453, 461, 486, 488, 489, 494, 495, 497], "configur": [11, 13, 14, 45, 118, 149, 164, 171, 204, 205, 208, 209, 212, 213, 215, 226, 229, 242, 247, 255, 256, 269, 272, 283, 287, 288, 299, 300, 301, 303, 312, 317, 321, 325, 326, 332, 350, 351, 361, 384, 393, 402, 405, 407, 408, 414, 415, 422, 423, 426, 427, 446, 448, 462, 469, 483, 484, 486, 489, 492, 496, 497, 500], "mxnet": [12, 13, 16, 209, 219, 223, 226, 229, 233, 241, 262, 266, 269, 272, 276, 282, 288, 297, 325, 350, 351, 356, 384, 425, 426, 427, 444, 445, 452, 455, 458, 459, 462, 463, 464, 488, 497, 499], "init": [12, 17, 42, 168, 174, 181, 183, 446, 461, 497], "optyp": [13, 208, 209, 285, 427], "enum": 13, "type": [13, 16, 42, 43, 44, 45, 74, 96, 105, 116, 122, 132, 140, 148, 149, 150, 151, 156, 164, 165, 166, 173, 177, 178, 184, 185, 186, 191, 200, 201, 202, 204, 206, 208, 209, 222, 224, 226, 233, 241, 243, 248, 265, 267, 269, 276, 282, 287, 290, 291, 293, 297, 304, 311, 315, 320, 322, 324, 329, 335, 339, 341, 343, 344, 346, 350, 359, 361, 388, 389, 396, 400, 402, 403, 415, 416, 421, 426, 427, 446, 448, 451, 453, 455, 458, 462, 463, 483, 489, 491, 493, 496, 497, 498, 499], "isiter": 13, "obj": [13, 105, 181, 204, 223, 266, 283, 288, 299, 300, 301, 303, 312, 317, 321, 325, 351, 361, 384, 405, 408, 416], "bool": [13, 42, 44, 141, 148, 150, 156, 162, 164, 165, 186, 208, 209, 224, 226, 237, 241, 267, 269, 279, 282, 287, 291, 297, 320, 338, 344, 350, 399, 403, 415, 416, 445, 446, 461, 488, 496], "check": [13, 44, 67, 68, 105, 148, 164, 165, 204, 215, 226, 269, 285, 321, 415, 416, 421, 425, 448, 451, 459, 466, 468, 470, 477, 480, 481, 492], "whether": [13, 44, 105, 116, 148, 150, 156, 165, 186, 208, 209, 222, 224, 237, 241, 265, 267, 279, 282, 291, 293, 297, 320, 344, 346, 350, 408, 415, 416, 426, 446, 461, 489, 491, 494, 496], "object": [13, 42, 43, 44, 45, 74, 86, 105, 116, 132, 149, 151, 154, 156, 162, 164, 171, 172, 180, 181, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 212, 213, 214, 224, 225, 226, 241, 242, 244, 255, 256, 257, 267, 268, 269, 282, 283, 288, 293, 301, 303, 306, 307, 309, 310, 311, 312, 317, 320, 321, 322, 323, 324, 325, 329, 342, 346, 350, 351, 359, 360, 378, 383, 384, 388, 402, 405, 408, 415, 416, 422, 423, 427, 433, 443, 445, 446, 454, 461, 462, 464, 485, 486, 488, 489, 496, 497, 498, 500], "i": [13, 43, 45, 48, 49, 53, 54, 57, 60, 64, 70, 82, 85, 105, 132, 143, 148, 150, 151, 154, 156, 158, 162, 164, 170, 171, 172, 180, 184, 185, 191, 196, 197, 198, 199, 200, 201, 203, 204, 208, 209, 212, 213, 214, 222, 223, 224, 225, 226, 227, 228, 231, 233, 237, 241, 242, 244, 248, 250, 251, 255, 256, 257, 265, 266, 267, 268, 269, 270, 271, 274, 276, 279, 282, 290, 293, 295, 297, 299, 304, 312, 317, 321, 322, 326, 333, 343, 346, 348, 350, 351, 361, 367, 368, 372, 384, 389, 394, 402, 403, 405, 415, 416, 420, 421, 422, 423, 426, 427, 428, 429, 431, 435, 438, 441, 443, 444, 445, 446, 448, 449, 450, 451, 453, 454, 455, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 473, 475, 476, 477, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500], "iter": [13, 15, 105, 140, 148, 165, 171, 185, 191, 198, 202, 208, 209, 212, 213, 217, 222, 226, 227, 244, 255, 256, 260, 265, 269, 270, 322, 324, 351, 384, 405, 408, 422, 423, 426, 443, 445, 446, 462, 486, 488, 489, 495, 497, 499], "returntrue": [13, 44, 85, 113, 146, 148, 156, 165, 171, 177, 208, 209, 222, 224, 226, 227, 240, 241, 242, 265, 267, 269, 270, 281, 282, 287, 291, 297, 315, 338, 344, 350, 361, 384, 399, 403, 408, 415, 416, 427, 445, 446, 448, 451, 455, 461, 462, 465, 468, 469, 488, 489, 491, 494, 495, 496, 497, 499], "els": [13, 148, 165, 209, 222, 265, 361, 413, 470, 495], "fals": [13, 15, 41, 42, 44, 47, 48, 49, 71, 72, 89, 92, 99, 102, 103, 105, 113, 131, 136, 143, 146, 147, 148, 156, 162, 164, 165, 171, 173, 208, 209, 214, 216, 219, 223, 224, 226, 237, 241, 242, 243, 244, 250, 257, 259, 262, 266, 267, 269, 279, 282, 293, 297, 346, 350, 361, 384, 403, 408, 416, 426, 427, 445, 446, 455, 461, 462, 475, 479, 488, 489, 491, 494, 495, 496, 497, 499], "boolean": 13, "ensure_list": 13, "x": [13, 54, 74, 150, 185, 208, 209, 223, 241, 266, 282, 329, 388, 403, 444, 448, 451, 463, 464, 489, 494, 495, 496, 498], "ensur": [13, 241, 282, 329, 388, 451, 489, 496], "list": [13, 42, 43, 44, 53, 105, 140, 148, 149, 150, 151, 160, 164, 171, 178, 184, 185, 190, 195, 200, 204, 208, 209, 212, 213, 217, 224, 237, 241, 242, 255, 256, 260, 267, 279, 282, 286, 287, 290, 291, 293, 294, 295, 297, 304, 312, 317, 320, 323, 338, 343, 344, 346, 347, 348, 350, 351, 359, 367, 368, 372, 384, 399, 403, 405, 406, 416, 422, 425, 426, 446, 453, 455, 459, 462, 465, 470, 472, 475, 476, 479, 484, 486, 488, 489, 490, 494, 495, 497], "input": [13, 15, 42, 43, 44, 45, 53, 60, 64, 67, 68, 70, 71, 72, 74, 82, 83, 85, 86, 105, 109, 110, 116, 122, 141, 148, 149, 159, 161, 162, 163, 164, 165, 169, 184, 185, 204, 208, 209, 212, 213, 224, 225, 226, 228, 237, 240, 241, 246, 255, 256, 267, 268, 269, 271, 279, 281, 282, 285, 286, 287, 350, 351, 355, 359, 384, 405, 413, 415, 416, 423, 426, 427, 443, 444, 445, 446, 448, 449, 450, 451, 453, 455, 457, 461, 462, 463, 464, 465, 470, 486, 488, 489, 491, 494, 495, 496, 499], "check_mx_vers": 13, "version": [13, 53, 104, 159, 164, 184, 209, 286, 287, 342, 420, 422, 426, 455, 459, 460, 462, 475, 477, 479, 480, 487, 494, 497, 498], "str": [13, 42, 140, 149, 151, 156, 160, 161, 162, 164, 165, 166, 173, 181, 184, 200, 208, 209, 224, 225, 226, 233, 237, 241, 243, 247, 248, 267, 268, 269, 276, 279, 282, 286, 287, 290, 291, 293, 295, 297, 304, 315, 338, 341, 343, 344, 346, 348, 350, 369, 377, 379, 382, 383, 399, 402, 403, 408, 413, 416, 417, 445, 446, 461, 488, 495, 496], "mx": 13, "__version__": [13, 154], "combine_cap": 13, "current": [13, 70, 104, 161, 180, 184, 187, 191, 208, 209, 299, 306, 307, 309, 310, 311, 320, 322, 329, 333, 388, 394, 416, 422, 423, 426, 428, 444, 451, 455, 462, 465, 469, 482, 484, 486, 489, 494, 497], "new": [13, 16, 148, 161, 171, 214, 226, 241, 242, 257, 269, 282, 321, 361, 421, 427, 451, 462, 463, 476, 482, 483, 486, 487, 489, 491, 492, 493, 496, 498, 499], "combin": [13, 164, 208, 209, 212, 213, 237, 251, 255, 256, 279, 351, 384, 405, 416, 422, 426, 458, 462, 485, 487, 489, 490, 491, 496, 497], "capabl": [13, 47, 339, 400, 427, 428, 443, 455, 462, 463, 473, 486, 488, 489, 497, 499], "contain": [13, 67, 68, 70, 74, 139, 148, 151, 156, 164, 165, 171, 172, 181, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 208, 209, 212, 213, 224, 225, 226, 255, 256, 267, 268, 269, 283, 287, 288, 293, 294, 295, 299, 312, 315, 317, 320, 321, 322, 323, 324, 325, 346, 347, 348, 351, 384, 405, 408, 415, 444, 446, 449, 458, 461, 483, 486, 491, 495, 497, 498], "make_nc_model": 13, "target": [13, 42, 43, 102, 150, 184, 202, 204, 209, 321, 324, 329, 388, 446, 451, 462, 486, 495, 496, 497, 499], "sym_model": 13, "ctx": 13, "input_desc": 13, "convert": [13, 43, 48, 49, 50, 52, 53, 54, 55, 56, 66, 74, 86, 99, 100, 102, 103, 104, 105, 131, 136, 142, 149, 164, 184, 208, 209, 224, 237, 240, 241, 267, 279, 281, 282, 286, 293, 299, 321, 339, 346, 400, 403, 422, 427, 462, 463, 467, 489, 490, 494, 496, 497], "symbol": [13, 149, 162, 164, 290, 343, 351, 384, 422, 464], "model": [13, 15, 16, 29, 41, 42, 43, 44, 45, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 116, 118, 140, 141, 142, 148, 149, 150, 151, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 169, 171, 172, 177, 181, 182, 184, 191, 192, 193, 196, 198, 199, 200, 202, 204, 208, 209, 212, 213, 220, 223, 224, 226, 241, 242, 245, 246, 255, 256, 263, 266, 267, 269, 282, 283, 285, 286, 287, 288, 289, 297, 298, 299, 300, 303, 306, 307, 309, 310, 311, 312, 317, 321, 322, 323, 324, 325, 326, 327, 329, 332, 335, 342, 350, 351, 361, 377, 382, 383, 384, 385, 386, 388, 389, 391, 393, 396, 402, 403, 405, 411, 413, 415, 416, 418, 422, 423, 425, 426, 428, 433, 443, 444, 445, 446, 448, 449, 450, 451, 452, 457, 458, 460, 461, 463, 465, 470, 472, 473, 476, 482, 484, 485, 487, 489, 492, 493, 495, 496, 497, 498, 499], "an": [13, 67, 68, 70, 105, 141, 143, 151, 154, 156, 164, 170, 191, 208, 209, 217, 222, 226, 241, 245, 250, 260, 265, 269, 282, 289, 290, 294, 295, 303, 304, 326, 342, 343, 347, 348, 351, 378, 383, 384, 403, 405, 416, 418, 420, 422, 423, 425, 426, 428, 444, 445, 446, 447, 448, 453, 461, 462, 463, 465, 469, 470, 473, 482, 484, 486, 487, 489, 493, 494, 495, 496, 497], "neural": [13, 151, 171, 172, 186, 187, 188, 189, 200, 208, 209, 236, 237, 238, 241, 242, 245, 248, 251, 279, 280, 282, 284, 289, 296, 297, 299, 312, 317, 320, 323, 325, 326, 331, 337, 342, 349, 350, 351, 355, 362, 384, 391, 392, 398, 413, 418, 421, 426, 427, 428, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 463, 464, 466, 467, 470, 472, 473, 475, 477, 479, 480, 481, 484, 485, 487, 489, 491, 492, 494, 495, 496, 497, 499, 500], "compressor": [13, 171, 172, 188, 189, 200, 208, 209, 236, 237, 238, 241, 242, 245, 248, 251, 279, 280, 282, 284, 289, 296, 297, 299, 320, 323, 325, 326, 331, 337, 342, 349, 350, 351, 355, 362, 384, 392, 398, 413, 418, 421, 423, 426, 427, 428, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 463, 464, 465, 466, 470, 472, 473, 475, 477, 479, 480, 481, 484, 485, 486, 487, 489, 491, 492, 494, 495, 496, 497, 498, 499, 500], "tupl": [13, 105, 148, 164, 178, 209, 212, 213, 237, 241, 255, 256, 279, 282, 287, 338, 351, 384, 399, 405, 427, 446, 461, 462, 489, 496], "symnet": 13, "arg": [13, 53, 105, 224, 225, 226, 267, 268, 269, 320, 329, 388, 403, 411, 412, 446, 451, 462, 471, 489, 491, 494, 495, 496], "aux": 13, "data": [13, 42, 43, 44, 55, 105, 140, 148, 151, 156, 161, 164, 165, 169, 184, 208, 209, 212, 213, 242, 244, 255, 256, 287, 289, 329, 339, 341, 342, 351, 377, 382, 384, 388, 400, 402, 405, 408, 413, 416, 425, 426, 444, 445, 446, 451, 455, 456, 459, 461, 462, 463, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498], "descript": [13, 132, 403, 421, 422, 427, 428, 445, 494], "ncmodel": 13, "fuse": [13, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 91, 92, 93, 94, 96, 131, 136, 162, 164, 169, 422, 494, 495], "suppli": 13, "get_framework_nam": 13, "get": [13, 42, 44, 45, 67, 68, 70, 104, 105, 148, 150, 157, 161, 164, 165, 171, 178, 180, 181, 182, 184, 187, 194, 201, 202, 203, 204, 206, 209, 217, 241, 242, 248, 250, 260, 282, 287, 320, 322, 324, 332, 339, 341, 350, 359, 384, 393, 400, 402, 408, 416, 427, 444, 454, 458, 459, 462, 468, 487, 491, 494, 497, 498, 501], "name": [13, 43, 45, 53, 67, 68, 70, 104, 105, 110, 116, 140, 148, 149, 150, 151, 156, 157, 161, 162, 164, 165, 166, 171, 177, 178, 180, 184, 186, 191, 194, 195, 200, 201, 202, 203, 204, 206, 208, 209, 224, 225, 226, 229, 233, 239, 241, 242, 246, 249, 250, 267, 268, 269, 272, 276, 282, 285, 286, 287, 292, 297, 315, 320, 322, 324, 339, 341, 345, 350, 355, 359, 361, 384, 400, 402, 406, 408, 416, 422, 427, 428, 446, 448, 451, 453, 455, 460, 461, 462, 464, 468, 475, 479, 483, 486, 489, 492, 493, 495, 497, 499, 500], "context": [13, 416, 488, 491], "prepare_model_data": 13, "nc_model": [13, 312, 317], "data_x": 13, "prepar": [13, 44, 164, 422, 425, 446, 451, 456, 489], "dataload": [13, 15, 42, 44, 140, 141, 150, 151, 161, 164, 165, 171, 181, 182, 184, 200, 204, 212, 213, 224, 235, 245, 255, 256, 267, 278, 283, 289, 312, 317, 326, 342, 377, 382, 384, 405, 408, 422, 425, 426, 427, 448, 449, 450, 451, 456, 457, 462, 463, 485, 489, 490, 494, 495, 496, 498, 499], "need": [13, 42, 105, 109, 161, 165, 171, 184, 200, 209, 212, 213, 214, 222, 223, 226, 233, 241, 244, 246, 247, 255, 256, 257, 265, 266, 269, 276, 282, 287, 326, 332, 350, 351, 361, 384, 393, 405, 415, 416, 422, 426, 445, 446, 448, 449, 451, 458, 462, 465, 467, 468, 471, 475, 476, 477, 479, 480, 482, 483, 486, 488, 489, 490, 491, 492, 494, 496, 497, 499], "run": [13, 140, 148, 156, 165, 171, 191, 204, 208, 209, 212, 213, 223, 240, 242, 255, 256, 266, 281, 321, 322, 329, 351, 384, 388, 405, 421, 426, 443, 451, 454, 455, 462, 465, 467, 469, 470, 471, 473, 475, 476, 477, 479, 480, 482, 487, 489, 491, 492, 493, 495, 497, 499], "loader": [13, 140, 212, 213, 255, 256, 351, 384, 405, 411, 445, 489], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "creat": [13, 16, 105, 154, 208, 209, 214, 224, 226, 244, 257, 267, 269, 293, 303, 304, 339, 346, 378, 383, 400, 402, 403, 408, 420, 423, 426, 446, 464, 475, 477, 479, 480, 483, 489, 493, 495, 497, 498], "exampl": [13, 44, 151, 156, 164, 165, 171, 178, 184, 185, 200, 208, 209, 224, 225, 226, 237, 241, 267, 268, 269, 279, 282, 293, 294, 295, 297, 323, 346, 347, 348, 350, 351, 361, 384, 402, 403, 405, 420, 421, 425, 427, 428, 433, 457, 458, 465, 468, 469, 470, 473, 490, 492, 496, 497, 498, 501], "prepare_dataload": 13, "io": [13, 156], "ndarray_to_devic": 13, "ndarrai": [13, 42, 43, 67, 68, 70, 241, 282, 406, 454, 496], "devic": [13, 79, 89, 90, 91, 92, 93, 94, 97, 107, 131, 136, 147, 150, 155, 156, 165, 181, 184, 185, 200, 204, 208, 209, 427, 445, 449, 462, 463, 465, 468, 473, 482, 488, 491], "is_model_quant": 13, "query_quantizable_nod": 13, "node": [13, 42, 43, 50, 53, 54, 55, 56, 60, 62, 64, 67, 68, 70, 74, 77, 80, 82, 83, 84, 98, 102, 103, 105, 110, 132, 140, 148, 184, 285, 287, 359, 383, 426, 427, 448, 451, 495, 497, 500], "given": [13, 16, 67, 68, 70, 104, 105, 116, 148, 157, 164, 241, 282, 293, 346, 384, 423, 428, 486, 494, 496], "map": [13, 43, 105, 148, 156, 209, 241, 282, 285, 287, 288, 292, 294, 295, 297, 312, 317, 322, 325, 345, 347, 348, 350, 446, 451, 461, 462, 475, 479, 486, 489, 491], "quantize_sym_model": 13, "qconfig": [13, 164, 491, 495], "accord": [13, 122, 164, 171, 208, 209, 224, 225, 226, 241, 267, 268, 269, 282, 332, 391, 393, 408, 423, 426, 446, 451, 486, 490, 494, 496, 497], "run_forward": 13, "b_filter": 13, "collector": [13, 151, 406], "pre_batch": 13, "post_batch": 13, "forward": [13, 204, 425, 427, 462, 486, 488, 489, 491, 494, 495], "propag": [13, 100], "filter": [13, 224, 225, 226, 227, 228, 229, 231, 235, 267, 268, 269, 270, 271, 272, 274, 278, 289, 342, 416, 428, 446, 458, 486, 495], "which": [13, 42, 55, 83, 110, 150, 151, 156, 161, 180, 184, 185, 187, 191, 192, 193, 195, 198, 199, 200, 202, 204, 208, 209, 224, 225, 226, 237, 242, 267, 268, 269, 279, 290, 295, 304, 306, 307, 309, 310, 311, 315, 320, 321, 322, 324, 329, 343, 348, 350, 355, 361, 384, 388, 416, 420, 422, 423, 426, 427, 428, 444, 445, 446, 448, 449, 451, 454, 455, 458, 461, 462, 463, 464, 466, 470, 473, 476, 482, 483, 485, 486, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499], "batch": [13, 164, 214, 216, 217, 222, 223, 244, 257, 259, 260, 265, 266, 405, 445, 449, 450, 462, 485, 486, 496, 497, 500], "infer": [13, 105, 165, 184, 288, 325, 359, 361, 384, 405, 426, 427, 444, 449, 450, 462, 463, 482, 484, 486, 487, 489, 491, 494, 495, 497], "collect": [13, 16, 43, 164, 239, 241, 244, 246, 247, 249, 282, 295, 297, 348, 350, 406, 416, 427, 489, 495, 497], "inform": [13, 151, 180, 181, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 209, 212, 213, 244, 246, 247, 255, 256, 320, 322, 323, 324, 326, 350, 416, 420, 421, 424, 425, 426, 427, 428, 429, 431, 435, 438, 441, 444, 449, 455, 462, 464, 477, 480, 483, 486, 490, 492, 495, 499, 500, 501], "dure": [13, 140, 154, 156, 186, 190, 202, 208, 209, 320, 324, 361, 416, 427, 448, 462, 464, 484, 485, 486, 489, 494, 495, 499], "call": [13, 42, 156, 161, 166, 184, 192, 193, 198, 293, 322, 346, 422, 423, 426, 445, 457, 471, 473, 483, 489, 494, 495, 496], "prior": [13, 88, 497], "after": [13, 78, 164, 182, 186, 191, 193, 198, 208, 209, 224, 237, 241, 244, 267, 279, 282, 322, 389, 403, 416, 423, 427, 446, 448, 449, 450, 453, 458, 461, 462, 475, 476, 479, 483, 484, 485, 486, 489, 490, 493, 494, 495, 496, 497], "count": [13, 423, 446, 491], "int": [13, 16, 42, 43, 44, 105, 140, 148, 160, 164, 165, 182, 208, 209, 223, 224, 225, 237, 241, 266, 267, 268, 279, 282, 286, 287, 291, 293, 297, 304, 344, 346, 350, 369, 378, 383, 402, 403, 416, 445, 446, 461, 462, 488, 496], "make_symbol_block": 13, "gluon": [13, 351, 384, 464], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "tune_cfg": [13, 44, 148, 149, 164, 426, 428, 497], "quantizable_nod": 13, "strategi": [13, 164, 198, 208, 209, 210, 226, 253, 269, 289, 342, 425, 426, 427, 428, 433, 444, 445, 451, 458, 462, 470, 482, 487, 488, 489, 490, 492, 498, 499], "config": [13, 44, 115, 116, 118, 122, 164, 171, 180, 181, 182, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 212, 213, 224, 255, 256, 267, 306, 307, 309, 310, 311, 312, 317, 320, 321, 322, 323, 324, 339, 340, 342, 351, 378, 383, 400, 401, 402, 403, 405, 408, 415, 416, 423, 425, 427, 428, 433, 443, 445, 448, 449, 450, 451, 453, 456, 458, 461, 462, 463, 464, 485, 486, 488, 489, 490, 491, 493, 495, 497], "tune": [13, 45, 171, 208, 209, 212, 213, 224, 226, 255, 256, 267, 269, 288, 325, 327, 328, 329, 330, 332, 333, 334, 335, 338, 339, 340, 341, 351, 361, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 399, 400, 401, 402, 405, 416, 426, 427, 444, 445, 446, 448, 451, 458, 460, 462, 463, 482, 484, 486, 487, 490, 491, 492, 493, 495, 499], "from": [13, 43, 45, 61, 67, 68, 70, 105, 148, 156, 157, 161, 164, 171, 172, 173, 178, 180, 181, 187, 188, 189, 190, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 212, 213, 214, 217, 221, 224, 225, 226, 227, 228, 229, 231, 236, 237, 243, 244, 247, 255, 256, 257, 260, 264, 267, 268, 269, 270, 271, 272, 274, 279, 283, 285, 286, 287, 290, 293, 294, 295, 299, 304, 320, 321, 322, 324, 339, 341, 343, 346, 347, 348, 351, 359, 361, 384, 400, 402, 403, 405, 408, 415, 416, 420, 422, 423, 426, 428, 443, 445, 446, 448, 449, 450, 451, 452, 453, 454, 456, 458, 461, 463, 464, 465, 469, 470, 471, 473, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498], "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 16, 143, 170, 208, 209, 214, 216, 217, 219, 222, 223, 244, 257, 259, 260, 262, 265, 266, 410, 425, 427, 445, 449, 459, 477, 480, 487, 489, 491, 492, 494, 498, 500], "depend": [13, 212, 213, 242, 255, 256, 351, 384, 405, 421, 454, 455, 488, 489, 497], "algorithm": [13, 44, 150, 164, 177, 205, 209, 290, 297, 305, 342, 343, 350, 408, 410, 423, 426, 427, 428, 449, 450, 455, 458, 471, 476, 486, 489, 491, 495, 499], "set": [13, 43, 57, 96, 105, 115, 148, 156, 161, 164, 171, 204, 206, 208, 209, 212, 213, 214, 224, 226, 229, 241, 242, 247, 248, 255, 256, 257, 267, 269, 272, 282, 293, 299, 312, 317, 321, 326, 346, 350, 351, 359, 383, 384, 403, 405, 413, 416, 420, 423, 427, 443, 445, 446, 449, 451, 453, 455, 457, 458, 459, 461, 462, 463, 465, 467, 469, 483, 486, 488, 489, 491, 493, 494, 497, 499], "kl": [13, 16, 208, 209, 406, 410, 427, 428, 444, 455, 462, 497, 499], "minmax": [13, 16, 427, 428, 444, 455, 489, 499], "calib_model": 13, "qsym_model": 13, "calib_data": 13, "calibdata": 13, "threshold": [13, 167, 406, 410, 461], "amp_convert": 13, "amp_cfg": 13, "support": [13, 42, 43, 97, 104, 161, 169, 173, 181, 187, 194, 198, 199, 208, 209, 212, 213, 223, 224, 226, 233, 237, 241, 243, 244, 245, 248, 255, 256, 266, 267, 269, 276, 279, 282, 289, 297, 299, 304, 320, 322, 326, 333, 339, 342, 350, 351, 355, 361, 384, 394, 400, 403, 405, 408, 410, 416, 418, 425, 427, 462, 465, 470, 473, 476, 482, 487, 490, 493, 497, 498], "amp": [13, 465, 472], "wrap": [13, 105, 116, 173, 243, 293, 346, 422, 451, 477, 480], "dataiterload": 13, "data_it": [13, 184], "collectorbas": 13, "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 16, 406], "8001": [13, 406], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 42, 115, 166, 167, 169, 170, 195, 300, 303, 354, 356, 358, 359, 360, 426, 427, 428, 459, 464, 475, 477, 479, 480, 483, 487, 493, 497], "up": [13, 100, 195, 241, 282, 321, 451, 452, 455, 458, 473, 477, 480, 482, 487, 488, 489, 493, 496, 497, 499], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "onnxruntimeadaptor": 14, "rt": 14, "onnxrt_weightonlyadaptor": 14, "onnxrt_qlinearopsadaptor": [14, 426], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": [15, 140], "white_nod": 15, "cpuexecutionprovid": [15, 41, 42, 463, 489], "reduce_rang": [15, 41, 42, 208, 209, 428, 488], "augment": 15, "dump": [15, 154, 164, 171, 287, 416, 489, 492, 495], "calib_registri": 16, "calib_method": 16, "calibratorbas": 16, "minmaxcalibr": 16, "percentilecalibr": 16, "2048": [16, 416], "percentil": [16, 44, 140, 165, 444], "99": [16, 494, 500], "999": [16, 499], "option": [16, 44, 105, 156, 165, 186, 208, 209, 212, 213, 224, 241, 255, 256, 267, 282, 286, 287, 293, 299, 320, 326, 339, 342, 346, 350, 351, 384, 400, 402, 403, 405, 409, 416, 427, 428, 445, 446, 455, 459, 462, 476, 486, 489, 491, 493, 496, 497, 499], "number": [16, 44, 67, 68, 105, 140, 164, 165, 178, 182, 188, 189, 208, 209, 222, 225, 237, 241, 265, 268, 279, 282, 294, 295, 297, 320, 329, 347, 348, 350, 378, 383, 388, 403, 408, 416, 443, 445, 446, 451, 461, 486, 489, 491, 493, 496, 497], "bin": [16, 156, 157, 416, 454], "histogram": [16, 406, 416, 495], "valu": [16, 43, 44, 55, 67, 68, 70, 89, 90, 105, 143, 148, 156, 164, 170, 171, 178, 180, 184, 185, 195, 203, 204, 205, 206, 208, 209, 212, 213, 224, 227, 228, 237, 241, 242, 255, 256, 267, 270, 271, 279, 282, 293, 297, 321, 329, 332, 339, 346, 350, 351, 384, 388, 393, 400, 402, 403, 405, 406, 408, 416, 422, 427, 428, 444, 446, 448, 455, 461, 462, 463, 468, 484, 486, 488, 489, 491, 492, 494, 496, 497, 499], "default": [16, 44, 97, 148, 156, 165, 204, 206, 208, 209, 212, 213, 216, 224, 225, 226, 237, 241, 255, 256, 259, 267, 268, 269, 279, 282, 286, 287, 290, 299, 321, 341, 343, 350, 359, 402, 408, 416, 422, 426, 445, 446, 455, 458, 459, 461, 462, 463, 470, 473, 475, 479, 484, 486, 488, 489, 490, 491, 493, 494, 496, 497, 499], "float": [16, 43, 44, 140, 141, 151, 165, 186, 191, 201, 204, 208, 209, 224, 237, 267, 279, 291, 293, 294, 295, 322, 344, 346, 347, 348, 399, 403, 413, 416, 446, 461, 488, 489, 494, 496], "A": [16, 54, 74, 75, 103, 116, 140, 141, 148, 154, 164, 165, 172, 177, 178, 180, 181, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 226, 241, 244, 246, 247, 269, 282, 283, 290, 293, 294, 295, 297, 300, 303, 304, 305, 312, 315, 317, 320, 321, 322, 323, 324, 329, 343, 346, 347, 348, 350, 351, 355, 359, 388, 405, 416, 425, 427, 445, 446, 452, 455, 461, 462, 464, 475, 476, 479, 482, 486, 487, 489, 491, 494, 496, 497, 499], "between": [16, 42, 143, 170, 197, 208, 209, 241, 282, 294, 297, 347, 350, 378, 383, 416, 422, 426, 427, 428, 444, 448, 449, 458, 461, 462, 473, 489, 492, 493, 494, 496, 497], "0": [16, 43, 44, 53, 90, 105, 148, 156, 164, 165, 167, 169, 173, 178, 180, 182, 204, 208, 209, 214, 216, 219, 223, 224, 227, 228, 231, 237, 241, 243, 244, 257, 259, 262, 266, 267, 270, 271, 274, 279, 282, 287, 288, 297, 304, 312, 317, 325, 350, 361, 384, 389, 403, 422, 445, 446, 449, 451, 453, 454, 455, 459, 460, 461, 462, 463, 468, 470, 475, 479, 486, 488, 489, 491, 492, 493, 494, 495, 496, 497, 499], "100": [16, 171, 178, 208, 209, 226, 269, 403, 443, 446, 451, 457, 462, 488, 489, 494, 496, 497, 499, 500], "klcalibr": 16, "128": [16, 44, 164, 165, 224, 227, 228, 241, 267, 270, 271, 282, 446, 462, 489, 496], "num_quantized_bin": 16, "histogramcollector": 16, "collctor": 16, "smooth_distribut": 16, "p": [16, 483, 491], "ep": [16, 170, 463], "0001": [16, 178, 208, 209, 449, 462, 488], "smooth": [16, 140, 141, 148, 161, 169, 208, 209, 338, 486], "discret": [16, 178, 497], "mai": [16, 148, 154, 156, 306, 307, 309, 310, 311, 403, 420, 421, 427, 444, 448, 453, 454, 460, 463, 475, 479, 487, 489, 497], "have": [16, 74, 83, 141, 148, 156, 181, 185, 187, 194, 222, 244, 265, 290, 293, 320, 322, 343, 346, 350, 384, 402, 403, 420, 421, 427, 428, 445, 446, 448, 451, 455, 460, 461, 462, 463, 465, 482, 484, 486, 489, 491, 494, 497, 498], "been": [16, 156, 181, 187, 194, 290, 320, 322, 343, 421, 423, 428, 449, 462, 463, 482, 491, 494], "normal": [16, 33, 241, 282, 295, 348, 462, 484, 491, 494, 496], "1": [16, 42, 43, 44, 54, 74, 89, 105, 109, 113, 146, 148, 156, 159, 161, 164, 165, 167, 169, 170, 171, 173, 178, 180, 192, 193, 195, 208, 209, 214, 216, 219, 223, 224, 225, 227, 228, 231, 232, 237, 241, 242, 243, 244, 257, 259, 262, 266, 267, 268, 270, 271, 274, 275, 279, 282, 288, 293, 294, 295, 297, 312, 317, 322, 325, 326, 346, 347, 348, 350, 361, 384, 402, 403, 408, 420, 422, 425, 426, 428, 444, 445, 446, 448, 449, 453, 455, 456, 459, 461, 463, 466, 468, 484, 485, 486, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499], "replac": [16, 161, 165, 295, 348, 451, 462, 473, 492], "zero": [16, 43, 44, 150, 165, 191, 204, 241, 282, 322, 416, 425, 486, 489, 491, 494, 496, 497], "multipli": 16, "scale": [16, 43, 44, 100, 141, 143, 150, 159, 161, 163, 164, 165, 169, 170, 237, 241, 279, 282, 489, 491, 493, 494, 496, 497], "factor": [16, 141, 491, 494, 500], "take": [16, 186, 209, 212, 213, 217, 241, 246, 255, 256, 260, 282, 320, 329, 350, 351, 384, 388, 405, 420, 422, 423, 445, 448, 449, 455, 462, 482, 486, 489, 490, 496, 497, 499], "correspond": [16, 151, 184, 195, 208, 209, 224, 267, 290, 293, 297, 343, 346, 350, 408, 416, 426, 455, 462, 486, 488, 489, 493, 494, 497], "amount": 16, "off": [16, 67, 68, 70, 421, 491], "non": [16, 321, 416, 422, 448, 497], "ref": [16, 148], "http": [16, 150, 151, 180, 188, 189, 198, 199, 200, 224, 226, 267, 269, 290, 291, 293, 294, 295, 320, 322, 323, 343, 344, 346, 347, 348, 350, 384, 422, 425, 446, 448, 456, 459, 460, 462, 471, 477, 480, 492], "hanj": 16, "c": [16, 74, 226, 269, 446, 454, 459, 491, 497], "illinoi": 16, "edu": [16, 226, 269, 446], "cs412": 16, "bk3": 16, "diverg": [16, 406, 410, 428, 444, 449, 497], "pdf": 16, "github": [16, 151, 188, 189, 200, 224, 267, 290, 291, 294, 295, 320, 323, 343, 344, 347, 348, 350, 384, 421, 446, 448, 452, 459, 460, 462, 471, 477, 480, 492], "com": [16, 151, 188, 189, 200, 224, 267, 290, 291, 294, 295, 320, 323, 343, 344, 347, 348, 350, 384, 420, 425, 446, 448, 456, 459, 460, 462, 465, 471, 492, 493, 500], "apach": [16, 460], "incub": 16, "blob": [16, 151, 188, 189, 290, 291, 294, 295, 320, 343, 344, 347, 348, 350, 384, 462, 471], "master": [16, 188, 189, 200, 290, 291, 294, 295, 320, 323, 343, 344, 347, 348, 350, 384, 462, 497], "python": [16, 75, 148, 154, 156, 226, 245, 269, 289, 342, 403, 416, 418, 421, 422, 446, 448, 451, 454, 459, 462, 467, 473, 476, 482, 487, 496], "contrib": [16, 289, 342], "py": [16, 148, 151, 171, 191, 208, 209, 291, 293, 294, 295, 322, 344, 346, 347, 348, 403, 422, 426, 448, 451, 459, 462, 467, 469, 470, 471, 477, 480, 489, 492, 495], "microsoft": [16, 426], "onnxruntim": [16, 208, 209, 220, 226, 233, 263, 269, 276, 298, 378, 426, 444, 445, 458, 459, 463, 488], "main": [16, 150, 178, 195, 200, 248, 323, 422, 445, 448, 451, 462, 469, 471, 483, 486, 489, 491], "tool": [16, 148, 286, 416, 425, 426, 462, 475, 479, 486, 487, 489], "arrai": [16, 43, 148, 156, 241, 282, 293, 304, 346, 416, 496], "small": [16, 67, 68, 69, 391, 423, 486, 491, 497, 500], "probabl": [16, 208, 209, 410, 491], "activationoper": 18, "onnx_quant": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "onnx_nod": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 87, 101, 111], "removableactivationoper": 18, "remov": [18, 43, 56, 57, 60, 74, 80, 83, 84, 85, 96, 98, 140, 182, 195, 295, 348, 420, 421, 462, 475, 479, 486, 495], "qactivationoper": 18, "children": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 157], "initi": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 42, 43, 105, 116, 148, 156, 173, 191, 212, 213, 221, 224, 243, 255, 256, 264, 267, 321, 322, 339, 384, 400, 405, 423, 428, 446, 461, 481, 486, 489, 494, 497], "qoper": [18, 34, 208, 209, 453], "format": [18, 43, 53, 148, 208, 209, 224, 225, 226, 267, 268, 269, 287, 293, 299, 339, 346, 400, 403, 427, 428, 446, 451, 453, 461, 462, 463, 464, 465, 489, 492], "float16activationoper": 18, "float16": [18, 21, 43, 446, 491], "argmaxoper": 19, "qargmaxoper": 19, "attentionoper": 20, "qattentionoper": 20, "qattent": 20, "binari": [21, 148, 297, 350, 454, 461, 477, 480, 492], "binaryoper": 21, "qbinaryoper": 21, "qbinari": 21, "float16binaryoper": 21, "concatoper": 22, "qconcatoper": 22, "qconcat": 22, "convoper": 23, "qconvoper": 23, "qlinearconv": 23, "direct8bit": 24, "direct8bitoper": 24, "qdirectoper": 24, "qdirect": 24, "embedlayernorm": 25, "embedlayernormalizationoper": 25, "qembedlayernormalizationoper": 25, "qembedlayernorm": 25, "gatheroper": 26, "qgatheroper": 26, "qgather": 26, "globalaveragepool": 27, "globalaveragepooloper": 27, "qglobalaveragepooloper": 27, "qlinearglobalaveragepool": 27, "gemmoper": 28, "qgemmoper": 28, "qgemm": 28, "lstmoper": 30, "matmuloper": 31, "qmatmuloper": 31, "qlinearmatmul": 31, "fusedmatmuloper": 31, "fusedmatmul": 31, "maxpooloper": 32, "qmaxpooloper": 32, "qmaxpool": 32, "batchnormalizationoper": 33, "batchnorm": [33, 62, 67, 121, 422, 494], "normalizationoper": 33, "op_registri": 34, "op_typ": [34, 140, 148, 340, 401], "qop_registri": 34, "padoper": 35, "qpadoper": 35, "qpad": 35, "averagepool": 36, "pooloper": 36, "qpooloper": 36, "qlinearaveragepool": 36, "reduceoper": 37, "resizeoper": 38, "qresizeoper": 38, "qresiz": 38, "splitoper": 39, "qsplitoper": 39, "qsplit": 39, "unari": 40, "unaryoper": 40, "q_config": [41, 164, 287, 426], "mode": [41, 42, 43, 45, 110, 156, 161, 233, 276, 293, 339, 346, 359, 400, 413, 416, 426, 427, 448, 458, 475, 479, 489, 490, 497], "static": [41, 42, 47, 161, 169, 184, 209, 287, 339, 384, 400, 426, 427, 428, 448, 453, 458, 462, 465, 470, 471, 472, 473, 476, 482, 494, 497, 500], "quantization_param": 41, "op_types_to_quant": 41, "fallback_list": 41, "fp32": [41, 42, 79, 131, 136, 143, 164, 165, 170, 208, 209, 212, 213, 255, 256, 286, 287, 297, 332, 339, 350, 389, 393, 400, 408, 415, 416, 425, 426, 428, 448, 455, 456, 461, 462, 463, 472, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 500], "add_qdq_pair_to_weight": [41, 208, 209, 489], "optypes_to_exclude_output_qu": [41, 208, 209, 489], "dedicated_qdq_pair": [41, 208, 209, 489], "smoothquant": [42, 161, 164, 169, 425, 487, 491, 498], "onnxrt": [42, 43, 44, 224, 226, 233, 241, 267, 269, 276, 282, 297, 350, 377, 414, 426, 448, 463, 489, 500], "get_quant_dequant_output": 42, "input_data": [42, 445], "output_data": 42, "loss": [42, 173, 208, 209, 243, 288, 297, 312, 317, 325, 350, 405, 444, 448, 449, 450, 451, 452, 461, 462, 463, 473, 485, 486, 489, 491, 494, 497, 499], "output": [42, 43, 44, 53, 57, 59, 74, 98, 105, 110, 148, 164, 165, 184, 185, 190, 204, 206, 208, 209, 212, 213, 246, 250, 255, 256, 286, 287, 290, 320, 343, 350, 351, 359, 384, 405, 411, 412, 416, 422, 426, 427, 449, 450, 451, 453, 455, 457, 461, 462, 464, 473, 482, 483, 485, 486, 488, 489, 491, 492, 494, 495, 496, 497, 499], "numpi": [42, 43, 67, 68, 70, 105, 148, 241, 282, 293, 304, 346, 454, 496], "7": [42, 165, 171, 208, 209, 361, 428, 443, 454, 455, 459, 462, 486, 489, 492, 494, 497, 500], "bit": [42, 44, 164, 165, 208, 209, 402, 428, 444, 450, 463, 487, 489, 491, 494], "execut": [42, 43, 53, 150, 156, 171, 191, 192, 193, 208, 209, 322, 326, 328, 383, 384, 385, 387, 405, 408, 415, 416, 448, 449, 450, 462, 463, 467, 468, 475, 476, 479, 482, 483, 485, 486, 489, 493, 497, 500], "provid": [42, 43, 102, 105, 110, 184, 212, 213, 241, 255, 256, 282, 288, 293, 312, 317, 325, 326, 346, 351, 384, 405, 409, 411, 423, 425, 426, 427, 428, 443, 445, 448, 450, 451, 452, 458, 459, 461, 462, 463, 464, 465, 469, 473, 476, 482, 483, 486, 488, 489, 491, 495, 497, 498, 499, 500], "make_sub_graph": 42, "opset": [42, 102, 104, 105, 209, 286, 287, 453], "ir_vers": 42, "thi": [42, 45, 86, 110, 132, 139, 143, 147, 151, 154, 156, 164, 165, 170, 172, 177, 182, 184, 186, 188, 189, 190, 191, 195, 196, 197, 198, 200, 201, 202, 208, 209, 212, 213, 223, 224, 225, 226, 227, 228, 229, 231, 241, 244, 250, 251, 255, 256, 266, 267, 268, 269, 270, 271, 272, 274, 282, 290, 293, 294, 295, 297, 306, 307, 309, 310, 311, 312, 317, 320, 322, 324, 325, 326, 329, 332, 343, 346, 347, 348, 350, 351, 361, 384, 388, 393, 402, 403, 405, 415, 416, 420, 421, 422, 423, 426, 427, 428, 444, 445, 446, 449, 450, 451, 453, 454, 455, 458, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 473, 475, 477, 479, 480, 481, 482, 483, 486, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498], "quant_dequant_data": 42, "qtype": [42, 43, 426], "3": [42, 148, 156, 193, 209, 226, 241, 269, 282, 293, 346, 403, 422, 423, 425, 444, 445, 446, 449, 451, 453, 455, 456, 459, 461, 462, 463, 465, 469, 473, 475, 479, 484, 488, 489, 491, 492, 493, 494, 496, 497, 500], "scheme": [42, 43, 44, 159, 164, 165, 426, 427, 428, 445, 455, 473, 491, 497, 499], "sym": [42, 43, 44, 165, 427, 428, 455, 489, 491, 499], "dequant": [42, 43, 44, 57, 88, 91, 92, 93, 94, 96, 151, 164, 165, 416, 422, 427, 494, 495], "asym": [42, 43, 159, 164, 165, 428, 455, 491, 499], "ortsmoothqu": 42, "fake": [42, 44, 113, 159, 161, 165, 169, 402, 462, 489, 491, 494], "channel": [42, 43, 44, 143, 161, 165, 169, 170, 182, 185, 190, 208, 209, 237, 241, 279, 282, 320, 426, 428, 458, 459, 465, 467, 472, 486, 491, 496, 500], "For": [42, 44, 165, 169, 184, 185, 188, 189, 200, 209, 226, 241, 269, 282, 294, 295, 297, 320, 323, 347, 348, 350, 351, 384, 420, 422, 424, 426, 428, 449, 450, 451, 453, 455, 458, 465, 467, 468, 470, 473, 486, 490, 494, 495, 497, 499, 500], "more": [42, 148, 161, 169, 188, 189, 241, 282, 320, 423, 424, 425, 427, 444, 446, 449, 451, 453, 456, 458, 459, 462, 463, 465, 473, 477, 480, 484, 485, 486, 490, 491, 494, 497, 498, 500], "detail": [42, 161, 169, 184, 241, 282, 416, 417, 420, 421, 425, 427, 428, 444, 449, 455, 456, 457, 461, 462, 463, 465, 473, 482, 486, 492, 493, 495, 497, 498], "pleas": [42, 150, 151, 161, 169, 180, 188, 189, 190, 198, 199, 200, 208, 209, 224, 225, 226, 229, 267, 268, 269, 272, 320, 322, 323, 350, 384, 403, 422, 423, 424, 425, 426, 443, 444, 446, 450, 451, 453, 459, 461, 463, 465, 466, 470, 473, 486, 489, 490, 492, 493, 494, 498], "refer": [42, 150, 151, 161, 169, 180, 188, 189, 190, 198, 199, 200, 204, 208, 209, 224, 267, 290, 291, 297, 320, 322, 323, 343, 344, 350, 384, 403, 422, 426, 427, 443, 445, 446, 448, 450, 451, 453, 457, 459, 460, 461, 462, 463, 465, 470, 473, 484, 488, 492, 496, 497], "accur": [42, 150, 161, 169, 199, 491, 494], "effici": [42, 161, 169, 423, 444, 445, 449, 465, 485, 487, 491, 494, 497], "post": [42, 97, 98, 150, 161, 169, 198, 209, 212, 213, 255, 256, 384, 420, 425, 426, 427, 448, 450, 451, 453, 458, 459, 465, 471, 482, 486, 487, 491, 494, 495, 497], "train": [42, 56, 80, 150, 161, 169, 172, 192, 193, 196, 198, 199, 208, 209, 212, 213, 224, 226, 241, 251, 255, 256, 267, 269, 282, 283, 299, 322, 342, 384, 408, 423, 426, 427, 433, 446, 448, 449, 450, 453, 458, 463, 465, 471, 482, 485, 486, 487, 491, 493, 494, 497, 499], "larg": [42, 161, 169, 199, 425, 445, 449, 462, 486, 487, 491, 494, 500], "languag": [42, 161, 169, 199, 290, 343, 420, 425, 453, 486, 487, 491, 494], "2": [42, 43, 53, 74, 105, 109, 156, 161, 165, 167, 169, 171, 186, 192, 193, 208, 209, 225, 242, 268, 293, 295, 297, 322, 329, 346, 348, 350, 361, 388, 403, 422, 425, 426, 444, 445, 446, 448, 449, 455, 458, 459, 460, 461, 463, 484, 486, 487, 489, 491, 492, 493, 494, 496, 497, 498], "spiq": [42, 161, 169, 494], "free": [42, 161, 169, 198, 212, 213, 255, 256, 384, 420, 425, 471, 476, 484, 493, 494], "per": [42, 43, 44, 161, 165, 169, 171, 208, 209, 242, 410, 426, 428, 445, 490, 491, 500], "we": [42, 43, 67, 68, 70, 74, 86, 143, 156, 161, 169, 170, 171, 184, 188, 195, 208, 209, 223, 242, 244, 266, 290, 293, 343, 346, 391, 420, 422, 426, 427, 428, 445, 448, 451, 453, 455, 461, 462, 469, 470, 473, 477, 480, 482, 483, 484, 485, 486, 488, 489, 491, 492, 493, 494, 495, 497, 498], "onli": [42, 44, 53, 63, 70, 86, 109, 115, 143, 156, 161, 163, 165, 169, 170, 171, 178, 181, 187, 194, 208, 209, 224, 242, 244, 248, 267, 287, 299, 320, 322, 333, 384, 394, 402, 403, 416, 425, 426, 427, 428, 443, 444, 445, 448, 449, 451, 454, 455, 462, 463, 470, 483, 486, 487, 488, 489, 494, 495, 497, 498, 499], "inplac": [42, 161], "mean": [42, 161, 186, 195, 208, 209, 237, 241, 279, 282, 295, 297, 320, 332, 348, 350, 393, 422, 427, 428, 445, 448, 451, 455, 461, 462, 468, 486, 489, 491, 494, 496, 497, 499], "weight": [42, 43, 44, 60, 61, 122, 141, 143, 148, 151, 161, 163, 164, 165, 170, 180, 181, 185, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 201, 203, 208, 209, 287, 320, 322, 339, 350, 384, 391, 400, 402, 416, 417, 425, 426, 427, 428, 444, 448, 450, 455, 457, 462, 484, 486, 488, 489, 494, 495, 497, 498, 499], "chang": [42, 96, 143, 161, 170, 192, 193, 195, 196, 198, 199, 202, 208, 209, 322, 324, 391, 416, 421, 427, 445, 451, 454, 460, 462, 465, 475, 476, 479, 482, 486, 495, 496, 497], "you": [42, 156, 161, 208, 209, 222, 224, 265, 267, 322, 350, 384, 421, 422, 427, 445, 446, 448, 451, 459, 460, 461, 463, 465, 467, 468, 470, 475, 479, 482, 483, 486, 489, 492, 493, 494, 495, 498], "can": [42, 143, 151, 156, 161, 170, 177, 184, 185, 186, 191, 199, 200, 202, 208, 209, 212, 213, 223, 226, 241, 242, 244, 255, 256, 266, 269, 282, 293, 295, 297, 320, 322, 324, 346, 348, 350, 351, 361, 384, 405, 416, 422, 423, 425, 426, 427, 428, 443, 445, 446, 448, 449, 450, 451, 453, 455, 458, 459, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 473, 475, 476, 477, 479, 480, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500], "recov": [42, 161, 416, 426, 450, 494], "helper": [43, 45, 110, 116, 148, 164, 224, 225, 226, 240, 267, 268, 269, 281, 285, 286, 287, 359, 414], "dtype_to_nam": 43, "dtype_map": 43, "dtype": [43, 102, 105, 208, 209, 227, 228, 237, 241, 270, 271, 279, 282, 427, 428, 446, 448, 453, 455, 465, 488, 489, 491, 494, 495, 496, 499], "its": [43, 60, 96, 148, 151, 184, 193, 196, 198, 204, 209, 220, 226, 241, 263, 269, 282, 285, 291, 292, 322, 329, 344, 345, 388, 420, 446, 449, 460, 461, 463, 473, 475, 479, 482, 483, 486, 491, 493, 496, 497], "string": [43, 45, 116, 148, 150, 154, 156, 171, 173, 177, 178, 184, 186, 191, 200, 201, 202, 204, 205, 208, 209, 226, 243, 248, 269, 283, 288, 290, 293, 299, 300, 301, 303, 304, 312, 317, 320, 321, 322, 323, 324, 325, 343, 346, 355, 359, 408, 413, 416, 461, 494, 496], "represent": [43, 154, 420, 422, 444, 450, 486, 489], "quanttyp": [43, 402], "repres": [43, 186, 190, 191, 200, 201, 204, 226, 231, 269, 274, 293, 295, 297, 346, 348, 350, 420, 428, 444, 446, 453, 486, 489, 497], "make_quant_nod": 43, "make": [43, 105, 143, 170, 177, 186, 191, 200, 202, 222, 265, 320, 322, 324, 416, 420, 421, 426, 427, 443, 445, 455, 461, 462, 470, 475, 479, 482, 489, 490, 491, 493, 494, 497], "quantizelinear": 43, "make_dquant_nod": 43, "axi": [43, 209], "dequantizelinear": 43, "is_b_transpos": 43, "wheter": 43, "inuput": 43, "b": [43, 74, 224, 267, 444, 446, 461, 486, 491, 494, 497], "transpos": [43, 73, 190, 237, 241, 282, 286, 320, 496], "split_shared_bia": 43, "share": [43, 82, 98, 109, 141, 165, 454, 455, 494, 497], "float_to_float16": 43, "float_to_bfloat16": 43, "bfloat16": [43, 463, 465, 473, 490], "cast_tensor": 43, "tensorproto": [43, 105], "remove_init_from_model_input": 43, "collate_pr": 43, "result": [43, 148, 151, 164, 237, 241, 279, 282, 290, 293, 294, 295, 297, 343, 346, 347, 348, 350, 364, 384, 391, 405, 415, 416, 420, 423, 425, 445, 448, 449, 451, 458, 460, 461, 462, 470, 471, 482, 483, 484, 486, 487, 489, 491, 493, 494, 495, 496, 497, 498, 500], "quantize_data_with_scale_zero": 43, "zero_point": 43, "point": [43, 44, 165, 237, 279, 294, 295, 304, 329, 347, 348, 388, 416, 461, 482, 489, 491, 494, 496, 497], "To": [43, 293, 346, 361, 421, 427, 428, 446, 448, 451, 463, 466, 469, 475, 477, 479, 480, 488, 490, 491, 492, 494, 497, 499], "pack": [43, 61], "comput": [43, 105, 151, 164, 290, 291, 294, 295, 297, 343, 344, 347, 348, 350, 405, 416, 444, 445, 450, 453, 461, 462, 463, 465, 476, 486, 487, 489, 491, 494, 497], "linear": [43, 150, 159, 163, 169, 182, 184, 185, 190, 195, 204, 208, 209, 320, 422, 449, 453, 462, 486, 491, 494, 497], "transform": [43, 50, 143, 145, 146, 147, 150, 159, 160, 163, 198, 224, 225, 226, 227, 228, 229, 231, 233, 235, 267, 268, 269, 270, 271, 272, 274, 276, 278, 289, 342, 422, 423, 425, 444, 446, 449, 450, 451, 452, 456, 462, 465, 470, 471, 472, 473, 486, 487, 490, 491, 494, 495, 497, 499, 500], "when": [43, 53, 64, 70, 148, 154, 156, 185, 191, 196, 204, 208, 209, 224, 225, 233, 241, 267, 268, 276, 282, 291, 321, 322, 344, 384, 405, 420, 423, 427, 445, 446, 462, 473, 475, 476, 479, 483, 486, 489, 491, 494, 496, 497], "uint8": [43, 165, 237, 279, 293, 341, 346, 402, 426, 446, 455, 488, 489, 496, 499], "rmin": [43, 489], "rmax": [43, 489], "m": [43, 151, 188, 189, 208, 209, 320, 449, 459, 465, 467, 470, 473, 477, 480, 486, 500], "where": [43, 156, 208, 209, 293, 297, 346, 350, 402, 416, 428, 444, 448, 449, 475, 479, 483, 494, 495], "max": [43, 104, 143, 165, 170, 178, 208, 209, 241, 282, 294, 295, 329, 347, 348, 388, 416, 425, 448, 459, 462, 486, 489, 494, 496, 497], "ab": [43, 150, 165, 180, 198, 199, 322, 489, 494], "np": [43, 241, 282, 329, 388, 451, 496, 497], "calculate_scale_zp": 43, "quantize_rang": 43, "calcul": [43, 60, 164, 180, 188, 204, 209, 227, 228, 270, 271, 294, 295, 320, 322, 332, 347, 348, 393, 406, 416, 444, 446, 461, 462, 473, 484, 486, 489, 493, 494, 497, 499], "quantize_data": 43, "add": [43, 52, 64, 109, 119, 148, 204, 208, 209, 224, 226, 248, 267, 269, 321, 339, 400, 416, 421, 422, 428, 445, 446, 451, 453, 455, 461, 462, 477, 480, 493, 495, 497, 498], "necessari": [43, 200, 420, 423, 427, 464, 483, 486, 493, 497], "intermedi": [43, 151, 173, 208, 209, 243, 422, 458, 489], "trasnform": 43, "full": [43, 224, 225, 226, 267, 268, 269, 416, 425, 444, 446, 448, 454, 460, 483, 486, 491, 492], "equat": [43, 295, 297, 348, 350, 489, 494], "r": [43, 143, 170, 448, 459, 483, 489, 500], "": [43, 44, 105, 143, 148, 156, 170, 184, 185, 186, 190, 191, 192, 193, 196, 198, 199, 204, 205, 206, 208, 209, 223, 226, 240, 241, 242, 244, 246, 266, 269, 281, 282, 295, 320, 322, 348, 350, 351, 355, 384, 413, 416, 420, 423, 427, 428, 448, 449, 451, 453, 455, 458, 462, 463, 470, 473, 475, 479, 482, 485, 486, 487, 488, 489, 491, 492, 493, 494, 497, 498, 499, 500], "q": [43, 44, 107, 109, 131, 427, 491, 494], "z": [43, 444, 449, 494], "real": [43, 227, 244, 270, 427, 444, 451, 487, 489], "origin": [43, 161, 164, 184, 196, 204, 209, 224, 241, 242, 267, 282, 306, 307, 309, 310, 311, 321, 322, 341, 389, 402, 416, 421, 446, 470, 486, 489, 496, 497, 499], "quantize_data_per_channel": 43, "dequantize_data_with_scale_zero": 43, "tensor_valu": 43, "scale_valu": 43, "zo_valu": 43, "sacal": 43, "dequantize_data": 43, "valueinfo": 43, "tensor_nam": [43, 148, 156, 157], "new_dtyp": 43, "cast": [43, 57, 490, 496], "info": [43, 164, 165, 188, 189, 204, 239, 244, 249, 320, 355, 412, 416, 422, 448, 464], "quantizedvalu": 43, "new_quantized_nam": 43, "scale_nam": 43, "zero_point_nam": 43, "quantized_value_typ": 43, "quint8": 43, "linearli": 43, "intial": 43, "quantizediniti": 43, "quantized_data": 43, "quantizationmod": 43, "quantizedvaluetyp": 43, "quantformat": 43, "quantize_nparrai": 43, "arr": [43, 416], "low": [43, 212, 213, 227, 228, 255, 256, 270, 271, 288, 298, 325, 351, 426, 427, 443, 444, 446, 451, 462, 463, 487, 489, 491, 494, 497], "high": [43, 227, 228, 270, 271, 446, 448, 459, 487, 497], "attribute_to_kwarg": 43, "attribut": [43, 83, 104, 105, 148, 164, 184, 195, 205, 206, 209, 416, 426, 445, 455, 457, 462, 488, 499], "kwarg": [43, 105, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 135, 137, 138, 165, 182, 208, 209, 226, 239, 241, 246, 249, 269, 282, 338, 340, 350, 351, 352, 354, 356, 358, 359, 360, 384, 399, 401, 403, 405, 411, 412, 415, 416, 445], "make_nod": 43, "find_by_nam": 43, "item_list": 43, "find": [43, 67, 68, 70, 105, 148, 297, 304, 329, 350, 388, 416, 426, 448, 468, 475, 479, 482, 483, 493, 495, 497], "item": [43, 204, 206, 208, 209, 240, 281, 321, 339, 400, 444, 451, 486, 494, 497], "trt_env_setup": 43, "environ": [43, 171, 242, 420, 443, 475, 479, 482, 497], "variabl": [43, 154, 171, 201, 208, 209, 226, 242, 269, 329, 388, 402, 459, 486, 497], "tensorrt": [43, 444, 463, 489], "to_numpi": 43, "weightonli": 44, "qdq_tensor": 44, "ratio": [44, 143, 170, 186, 191, 204, 208, 209, 237, 241, 279, 282, 322, 446, 462, 486, 496, 500], "quant": [44, 148, 164, 165, 208, 209, 339, 400, 422, 462, 489], "group": [44, 165, 201, 307, 458, 486, 491, 495, 496, 497, 500], "clip": [44, 165, 491, 494], "rtn_quantiz": [44, 165], "round": [44, 143, 165, 170, 489, 491, 494], "nearst": [44, 165], "method": [44, 141, 143, 154, 156, 164, 165, 177, 201, 208, 209, 217, 222, 223, 224, 226, 233, 241, 244, 260, 265, 266, 267, 269, 276, 282, 303, 304, 305, 339, 400, 402, 408, 409, 411, 412, 422, 423, 425, 444, 445, 446, 448, 449, 450, 461, 462, 485, 486, 489, 490, 491, 494, 496, 497], "modelproto": [44, 285, 351, 464], "onnxmodel": [44, 358, 377], "fc2": [44, 165], "4": [44, 53, 159, 164, 165, 171, 186, 195, 208, 209, 233, 236, 237, 241, 276, 279, 282, 290, 291, 293, 343, 344, 346, 402, 403, 420, 426, 428, 443, 451, 452, 455, 458, 459, 461, 462, 470, 486, 489, 491, 494, 496, 497, 500], "group_siz": [44, 159, 164, 165, 402, 491], "32": [44, 165, 182, 402, 451, 457, 491, 494, 500], "rtn": [44, 164, 491], "get_weight_scal": 44, "apply_awq_scal": 44, "absorb_pair": 44, "output_dict": 44, "appli": [44, 113, 126, 127, 128, 131, 133, 137, 159, 163, 172, 195, 197, 251, 291, 344, 420, 427, 428, 462, 465, 467, 473, 482, 485, 486, 489, 490, 493, 494, 497, 498, 499], "salient": [44, 165, 486], "apply_awq_clip": 44, "mse": [44, 164, 165, 208, 209, 289, 297, 331, 342, 350, 384, 392, 416, 448, 461, 488, 491, 492], "prepare_input": 44, "n_sampl": [44, 165], "sampl": [44, 77, 165, 208, 209, 217, 222, 224, 225, 226, 237, 241, 260, 265, 267, 268, 269, 279, 282, 297, 304, 329, 350, 388, 423, 445, 446, 452, 458, 483, 489, 496, 497, 499, 500], "so": [44, 105, 241, 282, 402, 422, 426, 448, 454, 458, 463, 468, 470, 489, 490, 491, 494, 495, 496, 498], "session": [44, 148, 223, 266, 359, 462, 495], "awq_quant": [44, 165], "auto_scal": [44, 165, 491], "mse_rang": [44, 165, 491], "n_block": [44, 165, 491], "5": [44, 165, 169, 173, 208, 209, 228, 237, 243, 271, 279, 297, 350, 384, 426, 446, 453, 455, 461, 462, 486, 488, 489, 491, 494, 496, 497, 499, 500], "awar": [44, 151, 165, 172, 209, 251, 299, 320, 391, 405, 425, 426, 427, 428, 444, 450, 451, 453, 458, 482, 485, 487, 491, 497], "awq": [44, 165, 491], "enabl": [44, 109, 151, 165, 191, 208, 209, 322, 427, 428, 451, 459, 463, 465, 467, 470, 471, 473, 486, 487, 497], "avoid": [44, 105, 156, 165, 224, 267, 422, 491, 495], "oom": [44, 165], "gptq": [44, 165, 491], "w": [44, 241, 282, 486, 494, 496], "h": [44, 208, 209, 241, 282, 451, 496], "blocksiz": 44, "percdamp": [44, 491], "01": [44, 208, 209, 462, 488, 491, 497, 499, 500], "actord": 44, "perchannel": 44, "hessian": [44, 151, 391, 497], "matrix": [44, 350, 384, 425, 473, 498], "quantizaion": 44, "percent": 44, "averag": [44, 294, 295, 297, 347, 348, 350, 461, 462, 497], "diagon": 44, "dampen": 44, "rearrang": [44, 198], "consid": [44, 148, 297, 350, 420, 444, 449, 483, 497], "diag": 44, "error": [44, 105, 151, 156, 297, 332, 350, 393, 412, 448, 461, 466, 494, 497], "gptq_quantiz": [44, 165], "get_ops_recurs": 45, "prefix": [45, 148, 149, 156, 157, 162, 171, 465, 470, 495], "graph_info": 45, "templateadaptor": 45, "tampl": 45, "dictionari": [45, 67, 68, 70, 148, 149, 151, 156, 164, 177, 205, 206, 208, 209, 240, 281, 293, 300, 303, 305, 346, 416], "yaml": [45, 204, 205, 206, 209, 212, 213, 224, 226, 242, 255, 256, 267, 269, 283, 288, 299, 300, 301, 303, 312, 317, 325, 326, 415, 416, 426, 428, 457, 461, 462, 484, 488, 495, 496], "file": [45, 105, 148, 154, 156, 157, 164, 168, 200, 204, 205, 208, 209, 212, 213, 224, 225, 226, 229, 240, 241, 247, 250, 255, 256, 267, 268, 269, 272, 281, 282, 283, 288, 293, 299, 300, 301, 303, 312, 317, 321, 323, 325, 326, 346, 351, 361, 367, 368, 372, 384, 415, 416, 423, 426, 427, 428, 451, 454, 457, 460, 461, 462, 464, 468, 477, 480, 481, 482, 483, 484, 488, 489, 491, 495, 496], "pytorchadaptor": 45, "api": [45, 70, 75, 110, 150, 252, 288, 293, 325, 338, 339, 346, 350, 384, 399, 400, 403, 416, 421, 422, 429, 431, 435, 438, 441, 448, 453, 458, 462, 467, 471, 472, 473, 492, 493, 497, 501], "pytorch_ipexadaptor": 45, "intel": [45, 188, 189, 200, 245, 248, 284, 289, 296, 297, 320, 323, 331, 337, 342, 349, 350, 362, 384, 392, 398, 418, 420, 421, 423, 424, 426, 427, 428, 444, 446, 447, 449, 450, 452, 453, 455, 456, 460, 463, 464, 465, 470, 472, 473, 484, 485, 486, 487, 489, 490, 492, 494, 495, 497, 498, 499], "extens": [45, 154, 156, 416, 423, 425, 426, 455, 458, 459, 462, 463, 464, 466, 471, 472, 473, 477, 480, 481, 486, 487, 489, 494, 497, 498, 499], "ipex": [45, 158, 164, 208, 209, 458, 462, 463, 467, 471, 472, 494], "pytorch_fxadaptor": 45, "fx": [45, 164, 208, 333, 394, 458, 463, 471, 472, 487, 489, 490], "graph": [45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 117, 130, 132, 136, 139, 142, 143, 145, 146, 147, 148, 184, 223, 266, 288, 352, 359, 383, 422, 426, 446, 449, 451, 457, 464, 465, 489, 490, 495], "pytorchweightonlyadaptor": 45, "pytorchqueri": 45, "querybackendcap": [46, 426, 427], "tensorflowadaptor": 47, "stock": [47, 471, 494], "spr": 47, "tensorflow_itexadaptor": 47, "itex": [47, 109, 208, 209, 286, 463, 489, 494], "tensorflowqueri": [47, 426], "performance_onli": [47, 48, 49, 107, 131, 136, 147, 208, 462], "itex_mod": [47, 48, 89, 107, 131, 136], "quant_mod": [47, 339, 400, 427, 428], "graphconvert": 48, "qt_config": 48, "recip": [48, 184, 208, 209, 288, 325, 462, 491, 494, 497], "int8_sequ": 48, "fp32_op": [48, 50, 107], "bf16_op": [48, 50, 107, 427, 490], "data_load": [48, 49, 426], "fake_qu": [48, 88, 107, 131, 136], "qdq_enabl": 48, "new_api": [48, 49, 71, 72, 77, 79, 92, 99, 131, 136, 143], "use_bf16": [48, 49, 208, 488], "without": [49, 90, 148, 196, 241, 282, 322, 341, 402, 420, 449, 451, 462, 473, 486, 487, 488, 497, 498], "graphconverterwithoutcalib": 49, "recover_config": 49, "rewrit": [50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107, 108, 109, 181], "bf16convert": [50, 490], "biasadd": [52, 59, 64, 66, 109, 455], "convertaddtobiasaddoptim": 52, "conv2d": [52, 59, 60, 61, 65, 66, 71, 125, 135, 143, 150, 427, 428, 448, 453, 455, 494, 495, 497], "addv2": [52, 69, 455], "layout": 53, "convertlayoutoptim": 53, "optim": [53, 74, 75, 79, 80, 116, 118, 175, 176, 177, 181, 184, 193, 198, 205, 208, 209, 245, 251, 288, 289, 305, 325, 329, 342, 388, 405, 406, 413, 416, 423, 425, 443, 448, 449, 450, 451, 455, 456, 458, 459, 462, 464, 465, 467, 469, 470, 473, 476, 487, 488, 489, 490, 493, 494, 495, 497, 499], "nchw": [53, 237], "nhwc": [53, 237], "It": [53, 156, 172, 186, 212, 213, 250, 255, 256, 295, 297, 304, 320, 325, 332, 348, 350, 351, 384, 389, 393, 405, 426, 427, 428, 444, 448, 449, 462, 468, 471, 476, 482, 483, 486, 489, 492, 493, 497, 499], "exist": [53, 171, 206, 242, 359, 453, 461, 469, 497], "abov": [53, 426, 427, 428, 449, 486, 489, 494, 497], "graph_def": [53, 148, 286, 351, 359, 383, 384], "leakyrelu": [54, 494], "convertleakyreluoptim": 54, "below": [54, 66, 74, 208, 209, 326, 350, 384, 421, 422, 425, 426, 427, 428, 445, 448, 449, 451, 457, 461, 465, 467, 475, 476, 479, 482, 484, 485, 486, 488, 489, 491, 493, 494, 495, 497, 498], "subgraph": [54, 66, 105, 162, 497], "mul": [54, 65, 66, 69, 169, 453, 494], "maximum": [54, 186, 191, 208, 209, 224, 241, 267, 282, 291, 322, 329, 344, 388, 428, 444, 446, 448, 462, 486, 489, 496], "note": [54, 154, 190, 293, 333, 346, 394, 423, 427, 428, 445, 448, 451, 453, 455, 459, 462, 467, 470, 475, 479, 482, 486, 489, 491, 494, 495, 497, 498, 499], "coeffici": [54, 486], "less": [54, 148, 208, 209, 416, 443, 449, 462, 486], "than": [54, 148, 224, 241, 267, 282, 416, 423, 425, 443, 446, 457, 484, 485, 486, 489, 491, 493, 496, 497], "convers": [54, 209, 299, 426, 427, 462, 463, 489, 490, 494], "valid": [54, 67, 68, 105, 191, 194, 204, 208, 209, 226, 269, 293, 321, 322, 346, 359, 421, 423, 425, 426, 446, 448, 449, 452, 455, 458, 460, 462, 473, 486, 489, 492], "nan": 55, "random": [55, 148, 177, 208, 209, 237, 241, 279, 282, 289, 305, 329, 331, 342, 388, 392, 416, 421, 423, 462, 486, 488, 496, 499], "convertnantorandom": 55, "const": [55, 56, 63, 64, 67, 68, 70, 82, 98], "consist": [55, 63, 421, 422, 494, 497], "placehold": [56, 222, 265], "convertplaceholdertoconst": 56, "rerewrit": 57, "dequantizecastoptim": 57, "b16": 57, "dilat": 58, "contract": 58, "dilatedcontract": 58, "spacetobatchnd": 58, "batchtospacend": 58, "pattern": [58, 59, 61, 78, 96, 107, 108, 109, 131, 136, 164, 177, 178, 179, 180, 181, 184, 185, 191, 192, 193, 194, 196, 198, 199, 201, 205, 208, 209, 226, 269, 289, 310, 311, 313, 318, 322, 339, 342, 400, 426, 446, 455, 458, 462, 483, 485, 488, 494, 497, 500], "inject": [59, 462], "dummi": [59, 184, 227, 228, 270, 271, 297, 350, 425, 446, 456, 461, 462], "injectdummybiasaddoptim": 59, "fusion": [59, 61, 70, 78, 109, 126, 127, 128, 131, 132, 133, 137, 422, 426, 455], "expanddim": 60, "expanddimsoptim": 60, "next": [60, 217, 260, 403, 423, 427, 428, 445, 488, 491, 497], "featch": 61, "reshap": [61, 67, 68, 73, 494], "fetchweightfromreshapeoptim": 61, "handl": [61, 148, 161, 169, 412, 422, 424, 445, 494], "fold": [62, 63, 287, 455, 494], "foldbatchnormnodesoptim": 62, "graphfoldconstantoptim": 63, "sequenc": [63, 105, 185, 188, 189, 208, 209, 224, 240, 241, 267, 281, 282, 291, 295, 320, 344, 348, 426, 446, 455, 486, 491, 496], "self": [63, 184, 208, 209, 361, 426, 427, 445, 446, 458, 461, 493, 495, 497], "supported_op_typ": 63, "fusebiasaddandaddoptim": 64, "second": [64, 156, 185, 208, 209, 224, 267, 389, 416, 448, 462, 475, 479, 483, 491, 494, 497, 499], "columnwis": 65, "fusecolumnwisemuloptim": 65, "depthwiseconv2dn": [65, 71, 125, 135, 455], "math": [66, 489], "fuseconvwithmathoptim": 66, "elimin": 66, "sub": [66, 164, 171, 184, 242, 423, 497], "realdiv": [66, 69], "decompos": [67, 68], "fusedecomposedbnoptim": 67, "input_graph_def": [67, 68, 70], "node_name_from_input": [67, 68, 70], "node_nam": [67, 68, 70, 148, 359, 369, 427], "strip": [67, 68, 70, 83, 84, 148, 495], "port": [67, 68, 70], "other": [67, 68, 70, 154, 161, 169, 223, 266, 295, 348, 359, 420, 421, 422, 427, 428, 448, 455, 458, 460, 462, 464, 484, 486, 489, 494, 496, 497, 500], "underli": [67, 68, 70, 156], "node_from_map": [67, 68, 70], "node_map": [67, 68, 70], "pull": [67, 68, 70], "def": [67, 68, 70, 212, 213, 255, 256, 384, 403, 405, 422, 426, 445, 446, 449, 450, 451, 461, 462, 489, 494, 495, 497], "entri": [67, 68, 70, 151, 248, 288, 326, 416, 460], "index": [67, 68, 70, 105, 171, 204, 209, 217, 222, 226, 260, 265, 269, 304, 416, 446, 461, 483, 494], "everi": [67, 68, 70, 186, 189, 191, 208, 209, 320, 322, 426, 445, 470, 475, 479, 497], "identifi": [67, 68, 70, 156, 293, 346, 359, 486], "want": [67, 68, 70, 184, 208, 209, 222, 224, 265, 267, 322, 389, 405, 422, 426, 445, 446, 451, 462, 470, 482, 483, 484, 493, 495, 497], "nodedef": [67, 68, 70], "rais": [67, 68, 70, 105, 154, 156, 181, 187, 194, 204, 293, 320, 321, 322, 346, 351, 403, 425, 486, 487], "valueerror": [67, 68, 70, 293, 346, 403, 454], "If": [67, 68, 70, 74, 156, 165, 171, 208, 209, 212, 213, 226, 241, 255, 256, 269, 282, 321, 351, 384, 403, 405, 421, 422, 427, 443, 445, 446, 451, 459, 460, 461, 462, 468, 476, 477, 480, 482, 484, 489, 491, 493, 494, 495, 496, 497], "isn": [67, 68, 70], "t": [67, 68, 70, 143, 156, 170, 186, 208, 209, 241, 244, 282, 295, 348, 422, 426, 448, 449, 451, 462, 463, 483, 486, 489, 497, 499], "present": [67, 68, 70, 448, 487, 494], "values_from_const": [67, 68, 70], "node_def": [67, 68, 70], "extract": [67, 68, 70, 148, 184, 226, 269, 341, 402, 446], "ha": [67, 68, 70, 74, 150, 156, 190, 191, 242, 290, 320, 322, 343, 403, 421, 423, 426, 427, 428, 445, 453, 458, 462, 463, 468, 482, 486, 488, 489, 490, 493, 494, 497], "access": [67, 68, 70, 205, 206, 209, 411, 416, 477, 480], "valid_reshape_input": [67, 68], "reshape_in0_ndef": [67, 68], "reshape_in1_ndef": [67, 68], "ar": [67, 68, 105, 156, 164, 186, 191, 192, 193, 198, 199, 208, 209, 224, 241, 267, 282, 293, 297, 304, 320, 321, 322, 326, 328, 329, 346, 350, 385, 387, 388, 402, 403, 408, 415, 416, 420, 421, 422, 423, 426, 427, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 468, 470, 473, 476, 482, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499], "bypass_reshap": [67, 68], "input_node_map": [67, 68], "input_nam": [67, 68, 102, 142, 209, 286, 287, 453], "get_const_dim_count": [67, 68], "dimens": [67, 68, 105, 216, 241, 259, 282, 446, 449, 496], "instancenorm": [68, 494], "fusedecomposedinoptim": 68, "gelu": 69, "fusegeluoptim": 69, "sqrt": [69, 448], "erf": 69, "samll": 70, "layernorm": [70, 494], "fuselayernormoptim": 70, "remap": [70, 156], "smaller": [70, 241, 282, 449, 462, 486, 496], "case": [70, 74, 156, 165, 171, 209, 223, 240, 241, 242, 266, 281, 282, 288, 312, 317, 325, 361, 428, 445, 449, 450, 451, 455, 457, 461, 466, 470, 482, 483, 484, 486, 487, 489, 491, 492, 496, 498, 499, 500], "fusedbatcnormv3": 70, "And": [70, 422, 443, 462, 468, 494], "further": [70, 209, 420, 463, 464, 465, 467, 476, 482, 489], "restrict": [70, 156, 208, 209, 486, 493], "2d": [70, 494], "3d": [70, 487, 494], "kera": [70, 116, 184, 204, 209, 226, 233, 248, 269, 276, 354, 359, 427, 445, 451, 464, 472, 473], "fusepadwithconv2doptim": 71, "excluded_op_nam": [71, 72, 205, 208, 209, 462, 486], "cfg": [71, 72, 164, 205, 339, 400, 408, 427, 428], "itex_qdq_mod": [71, 72], "conv3d": [71, 125], "fusepadwithfp32conv2doptim": 72, "fusetransposereshapeoptim": 73, "cse": [74, 98], "graphcseoptim": 74, "introduc": [74, 421, 426, 427, 428, 455, 462, 489, 491, 492, 494, 498], "ident": [74, 80, 185, 420, 449], "three": [74, 204, 224, 267, 328, 385, 387, 422, 426, 427, 444, 459, 463, 476, 485, 489, 490, 493, 494, 495], "d": [74, 164, 449, 457, 483, 500], "those": [74, 156, 332, 393, 416, 448, 449, 450, 457, 462, 463, 485, 486, 489, 497], "child": [74, 150, 157, 495], "b1": 74, "c1c2": 74, "d1": [74, 416], "c1": 74, "c2": 74, "memori": [74, 288, 312, 317, 325, 361, 416, 444, 445, 450, 462, 463, 465, 484, 486, 489, 491, 494, 497, 500], "bound": [74, 171, 178, 241, 282, 293, 329, 346, 388, 461, 496], "like": [74, 96, 98, 148, 156, 184, 204, 209, 212, 213, 214, 226, 255, 256, 257, 269, 288, 297, 322, 325, 326, 350, 359, 384, 405, 421, 422, 423, 426, 427, 448, 449, 450, 458, 470, 485, 486, 489, 491, 492, 494, 497], "relu": [74, 78, 109, 422, 455, 494, 495], "relu6": [74, 455], "updat": [74, 157, 164, 180, 186, 204, 322, 350, 384, 413, 454, 461, 462, 468, 473, 476, 486, 494, 497, 498], "graphdef": [74, 148, 359, 383, 464], "grappler": [75, 455], "grappleroptim": 75, "input_output_nam": 75, "opt_cfg": 75, "wrapper": [75, 102, 103, 104, 105, 122, 140, 149, 159, 163, 173, 181, 223, 241, 243, 244, 246, 247, 266, 282, 293, 297, 346, 350, 355, 359, 490], "leverag": [75, 423, 425, 449, 453, 465, 482, 485, 489, 491, 497], "built": [75, 210, 211, 215, 220, 224, 225, 230, 232, 234, 235, 237, 238, 241, 246, 248, 253, 254, 258, 261, 263, 267, 268, 273, 275, 277, 278, 279, 280, 282, 326, 350, 353, 361, 384, 405, 423, 426, 446, 451, 462, 475, 479, 484, 489, 496, 497, 499], "convert_add_to_biasadd": [76, 87, 111], "convert_layout": [76, 87, 111], "convert_leakyrelu": [76, 87, 111], "convert_nan_to_random": [76, 87, 111], "convert_placeholder_to_const": [76, 87, 111], "dequantize_cast_optim": [76, 87, 111], "dilated_contract": [76, 87, 111], "dummy_biasadd": [76, 87, 111], "expanddims_optim": [76, 87, 111], "fetch_weight_from_reshap": [76, 87, 111], "fold_batch_norm": [76, 87, 111], "fold_const": [76, 87, 111], "fuse_biasadd_add": [76, 87, 111], "fuse_column_wise_mul": [76, 87, 111], "fuse_conv_with_math": [76, 87, 111], "fuse_decomposed_bn": [76, 87, 111], "fuse_decomposed_in": [76, 87, 111], "fuse_gelu": [76, 87, 111], "fuse_layer_norm": [76, 87, 111], "fuse_pad_with_conv": [76, 87, 111], "fuse_pad_with_fp32_conv": [76, 87, 111], "fuse_reshape_transpos": [76, 87, 111], "graph_cse_optim": [76, 87, 111], "grappler_pass": [76, 87, 111], "insert_print_nod": [76, 87, 111], "move_squeeze_after_relu": [76, 87, 111], "pre_optim": [76, 87, 111], "remove_training_nod": [76, 87, 111], "rename_batch_norm": [76, 87, 111], "split_shared_input": [76, 87, 111], "strip_equivalent_nod": [76, 87, 111, 148], "strip_unused_nod": [76, 87, 111, 148], "switch_optim": [76, 87, 111], "insert": [77, 105, 107, 109, 113, 146, 161, 169, 422, 427, 445, 458, 462, 465, 486, 489, 490, 494, 495], "print": [77, 150, 151, 184, 297, 350, 403, 416, 451, 461, 462, 486, 494, 497], "insertprintminmaxnod": 77, "pre_node_nam": 77, "post_node_nam": 77, "pass": [77, 148, 154, 156, 171, 350, 384, 416, 422, 426, 443, 446, 449, 450, 451, 457, 461, 462, 483, 486, 488, 489, 490, 494, 499], "move": [78, 156, 422, 488, 491, 492], "squeez": [78, 422], "movesqueezeafterreluoptim": 78, "match": [78, 102, 156, 184, 293, 294, 346, 347, 449, 483, 491], "pre": [79, 116, 157, 184, 212, 213, 224, 255, 256, 267, 351, 384, 405, 446, 449, 450, 462, 470, 486, 487, 489, 491, 495, 497], "entranc": [79, 178, 215], "preoptim": 79, "removetrainingnodesoptim": 80, "protected_nod": 80, "types_to_splic": 80, "checknumer": 80, "stopgradi": 80, "renam": [81, 492], "fusedbatchnorm": 81, "fusedbatchnormv2": 81, "renamebatchnormoptim": 81, "splitsharedinputoptim": 82, "equival": [83, 159, 163, 494], "stripequivalentnodesoptim": 83, "output_node_nam": [83, 84, 131, 132, 136, 148], "same": [83, 141, 148, 165, 198, 209, 224, 241, 267, 282, 293, 346, 416, 426, 428, 443, 445, 446, 449, 451, 455, 462, 466, 470, 475, 479, 486, 488, 489, 491, 494, 495, 496, 497], "unus": [84, 148], "stripunusednodesoptim": 84, "input_node_nam": [84, 131, 136, 148], "switch": [85, 465, 495], "switchoptim": 85, "condit": [85, 224, 225, 226, 241, 267, 268, 269, 282, 328, 385, 387, 446, 460, 496, 497], "graphrewriterbas": 86, "abstract": [86, 172, 178, 241, 282, 283, 288, 325, 426, 428, 457], "freeze_fake_qu": [87, 95, 111], "freeze_valu": [87, 95, 111], "freeze_value_without_calib": [87, 95, 111], "fuse_conv_redundant_dequant": [87, 95, 111], "fuse_conv_requant": [87, 95, 111], "fuse_matmul_redundant_dequant": [87, 95, 111], "fuse_matmul_requant": [87, 95, 111], "meta_op_optim": [87, 95, 111], "post_hostconst_convert": [87, 95, 111], "post_quantized_op_cs": [87, 95, 111], "rnn_convert": [87, 95, 111], "scale_propag": [87, 95, 111], "onnx_graph": [87, 101, 111], "onnx_schema": [87, 101, 111], "tf2onnx_util": [87, 101, 111], "insert_qdq_pattern": [87, 106, 111], "merge_duplicated_qdq": [87, 106, 111], "share_qdq_y_pattern": [87, 106, 111], "freez": [88, 89, 90, 465, 486], "fakequ": 88, "freezefakequantopoptim": 88, "follow": [88, 110, 185, 226, 269, 290, 293, 343, 346, 420, 421, 422, 423, 426, 427, 428, 445, 446, 449, 450, 451, 455, 459, 460, 461, 462, 463, 464, 465, 466, 467, 475, 479, 485, 486, 488, 489, 494, 495, 497], "freezevaluetransform": 89, "max_min_data": [89, 90], "postfix": [89, 90], "tensor_data": [89, 416, 417], "th": [89, 90], "gpu": [89, 90, 97, 156, 208, 209, 425, 443, 458, 462, 463, 467, 473, 482, 488, 489], "freezevaluewithoutcalibtransform": 90, "95": [90, 297, 350, 461, 494, 500], "quantizedconv": [91, 92], "quantizeddeconv": 91, "redund": [91, 93], "fuseconvredundantdequantizetransform": 91, "cpu": [91, 92, 93, 94, 155, 156, 208, 209, 416, 425, 427, 443, 444, 458, 462, 463, 465, 467, 473, 482, 487, 488, 489, 490, 495], "_quantizedconv": 91, "_quantizeddeconv": 91, "successor": [91, 92, 93, 94], "requant": [92, 94, 495], "fuseconvrequantizetransform": 92, "quantizedmatmul": [93, 94], "fusematmulredundantdequantizetransform": 93, "_quantizedmatmul": [93, 94], "fusematmulrequantizedequantizetransform": 94, "quantizedmatmulwithbiasanddequant": 94, "fusematmulrequantizetransform": 94, "fusematmulrequantizedequantizenewapitransform": 94, "fusematmulrequantizenewapitransform": 94, "newapi": 94, "meta": [96, 487], "metainfochangingmemopoptim": 96, "metaop": 96, "With": [96, 361, 422, 426, 428, 445, 462, 470, 475, 479, 483, 484, 486, 487, 493, 494, 497, 500], "better": [96, 208, 209, 212, 213, 255, 256, 304, 351, 384, 405, 450, 461, 463, 486, 487, 489, 491, 493, 497], "perform": [96, 140, 171, 201, 208, 209, 224, 236, 237, 242, 267, 279, 288, 312, 317, 325, 332, 350, 361, 384, 389, 393, 422, 423, 426, 427, 443, 446, 447, 448, 450, 452, 453, 458, 459, 461, 462, 463, 464, 465, 467, 471, 473, 476, 482, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 497, 499, 500], "hostconst": 97, "posthostconstconvert": 97, "just": [97, 214, 239, 241, 244, 246, 247, 249, 257, 282, 361, 423, 462, 472, 476, 482, 485, 489, 494, 496, 497], "postcseoptim": 98, "duplic": [98, 108, 329, 388], "quantizev2": 98, "decreas": [98, 486], "size": [98, 165, 188, 189, 216, 217, 223, 226, 232, 237, 241, 259, 260, 266, 269, 275, 279, 282, 320, 361, 416, 420, 427, 445, 446, 451, 454, 462, 482, 483, 484, 486, 491, 494, 496, 499, 500], "rnn": 99, "quantizedrnnconvert": 99, "calibration_data": [99, 107], "rnn_detail": 99, "scalepropagationtransform": 100, "direct": [100, 190, 320, 486], "export": [101, 209, 289, 293, 342, 346, 425, 456, 468, 483, 495, 498], "onnxgraph": 102, "output_shap": 102, "extra_opset": 102, "output_nam": [102, 142, 209, 286, 287, 453], "is_subgraph": 102, "graph_nam": 102, "manipul": [102, 103], "onnxnod": 103, "skip_convers": 103, "schema": [104, 165], "onnxopschema": 104, "domain": [104, 105, 208, 209, 486, 497], "since_vers": 104, "get_schema": 104, "max_inclusive_opset_vers": 104, "within": [104, 192, 193, 198, 199, 288, 293, 325, 346, 359, 378, 383, 420, 422, 428, 444, 463, 475, 479, 482, 487, 494, 497], "get_max_supported_opset_vers": 104, "packag": [104, 426, 454, 459, 482, 483, 487, 492, 497], "set_nam": 105, "find_opset": 105, "assert_error": 105, "bool_val": 105, "error_msg": 105, "messag": [105, 146, 497], "map_numpy_to_onnx_dtyp": 105, "np_dtype": 105, "map_onnx_to_numpy_typ": 105, "onnx_typ": 105, "add_port_to_nam": 105, "nr": 105, "get_tensorflow_node_attr": 105, "pars": [105, 164, 224, 225, 237, 241, 267, 268, 279, 282, 367, 368, 372, 427, 428, 496], "get_tensorflow_tensor_shap": 105, "shape": [105, 148, 186, 227, 228, 237, 241, 270, 271, 279, 282, 293, 346, 425, 446, 455, 456, 462, 494, 496], "get_tensorflow_node_shape_attr": 105, "attr": [105, 148, 184], "map_tensorflow_dtyp": 105, "get_tensorflow_tensor_data": 105, "convert_tensorflow_tensor_to_onnx": 105, "read_tensorflow_node_attr": 105, "read": [105, 148, 156, 229, 241, 272, 282, 321, 446, 490, 493], "infer_onnx_shape_dtyp": 105, "opset_vers": [105, 142, 209, 286, 287, 453], "input_shap": [105, 228, 271, 446], "input_dtyp": 105, "sometim": [105, 422, 448, 489], "make_onnx_shap": 105, "seqtyp": 105, "tensor_dtyp": 105, "around": 105, "signifi": 105, "make_onnx_inputs_output": 105, "elem_typ": 105, "text": [105, 200, 240, 241, 281, 282, 290, 295, 323, 343, 348, 453, 460, 471, 486, 487, 491, 494, 496, 500], "datatyp": [105, 164, 490, 497, 500], "save_protobuf": 105, "path": [105, 148, 157, 164, 184, 200, 204, 205, 224, 225, 226, 241, 267, 268, 269, 282, 283, 286, 287, 288, 299, 300, 301, 303, 312, 317, 321, 323, 325, 326, 339, 351, 359, 383, 384, 400, 413, 416, 422, 423, 426, 446, 448, 451, 457, 461, 462, 463, 464, 468, 471, 482, 485, 491, 496, 499], "as_text": 105, "save": [105, 155, 156, 181, 204, 208, 209, 226, 269, 286, 287, 326, 359, 384, 405, 406, 411, 416, 422, 426, 457, 462, 463, 464, 466, 470, 475, 479, 485, 489, 491, 494], "protobuf": 105, "is_onnx_domain": 105, "is_list_or_tupl": 105, "are_shapes_equ": 105, "src": [105, 483], "dest": 105, "equal": [105, 143, 148, 170, 403, 416, 486], "get_subgraphs_from_onnx": 105, "model_proto": 105, "over": [105, 156, 226, 269, 297, 350, 427, 452, 456, 458, 461, 473, 482, 488, 494, 497], "df": 105, "initialize_name_count": 105, "conflict": [105, 454], "counter": 105, "make_nam": 105, "get_index_from_strided_slice_of_shap": 105, "outputs_to_valu": 105, "stride": [105, 241, 282, 496], "slice": 105, "compute_const_folding_using_tf": 105, "g": [105, 156, 186, 208, 209, 449, 452, 456, 465, 470, 486, 491, 492, 494, 497], "const_node_valu": 105, "graph_output": 105, "constant": [105, 287, 289, 329, 331, 337, 342, 388, 392, 398, 409, 445, 455, 496], "tf": [105, 116, 148, 184, 204, 223, 224, 225, 226, 241, 266, 267, 268, 269, 282, 357, 359, 451, 464, 487, 490, 496], "generategraphwithqdqpattern": 107, "op_wise_config": [107, 131, 136, 427], "quantized_nod": 107, "dq": [107, 109, 131, 494], "pair": [107, 208, 209, 427, 445, 462, 463, 492], "befor": [107, 109, 150, 169, 177, 186, 191, 193, 198, 200, 202, 208, 209, 224, 267, 320, 322, 324, 421, 428, 445, 446, 449, 450, 451, 454, 455, 459, 462, 477, 480, 489, 493, 495, 497], "merg": [108, 216, 259, 339, 400, 477, 480, 495, 497], "mergeduplicatedqdqoptim": 108, "y": [109, 208, 209, 241, 282, 329, 388, 448, 454, 468, 494, 496], "shareqdqforitexypatternoptim": 109, "one": [109, 110, 115, 156, 164, 165, 171, 186, 190, 195, 198, 199, 200, 202, 241, 251, 282, 290, 293, 297, 299, 320, 323, 324, 343, 346, 350, 423, 426, 444, 449, 450, 451, 455, 458, 459, 461, 462, 463, 465, 466, 470, 471, 473, 475, 476, 479, 482, 483, 484, 485, 486, 488, 489, 491, 492, 494, 496, 497], "break": [109, 451, 462], "graphanalyz": 110, "extend_engin": 110, "analyz": [110, 184, 359, 493, 494, 495], "under": [110, 208, 209, 226, 269, 415, 423, 446, 460, 461, 462, 465, 470, 471, 482, 485, 486, 491, 494, 495, 497], "singleton": [110, 416], "specifi": [110, 156, 164, 171, 204, 208, 209, 212, 213, 241, 242, 255, 256, 282, 288, 293, 297, 300, 303, 312, 317, 325, 326, 346, 350, 351, 384, 403, 405, 415, 416, 427, 428, 451, 455, 461, 462, 470, 484, 488, 496, 497, 499], "graphrewriterhelp": 110, "encapsul": [110, 212, 213, 255, 256, 351, 384, 405, 464], "quantize_lay": [111, 112, 114], "fake_quant": [111, 112, 114], "quantize_config": [111, 112, 114, 427], "quantize_help": [111, 112, 114], "quantize_wrapp": [111, 112, 114], "fuse_qdq_bn": [111, 112, 130], "fuse_qdq_concatv2": [111, 112, 130], "fuse_qdq_conv": [111, 112, 130], "fuse_qdq_deconv": [111, 112, 130], "fuse_qdq_in": [111, 112, 130], "fuse_qdq_matmul": [111, 112, 130], "fuse_qdq_pool": [111, 112, 130], "optimize_qdq": [111, 112, 130], "optimize_lay": [112, 114, 117], "quantize_layer_add": [112, 114, 117], "quantize_layer_bas": [112, 114, 117], "quantize_layer_bn": [112, 114, 117], "fakequantizebas": 113, "abc": [113, 295, 348, 426, 495, 497], "fakequant": 113, "per_channel": [113, 427, 428, 455, 489, 499], "num_bit": [113, 159, 164, 165, 494], "8": [113, 156, 165, 208, 209, 240, 281, 422, 427, 444, 455, 459, 486, 487, 491, 494, 497, 500], "channel_axi": [113, 167, 170], "symmetr": [113, 428, 489, 491, 496, 497], "narrow_rang": 113, "quantizeconfig": [115, 116], "custom": [115, 154, 165, 171, 326, 350, 361, 415, 443, 449, 450, 465, 486, 487, 491, 493], "There": [115, 326, 328, 385, 387, 448, 449, 455, 458, 462, 465, 491, 494, 497, 499], "instanc": [115, 116, 171, 208, 209, 212, 213, 242, 255, 256, 294, 295, 297, 300, 303, 306, 307, 309, 310, 311, 329, 341, 347, 348, 350, 351, 384, 388, 402, 405, 413, 416, 420, 422, 426, 443, 462, 467, 473, 497, 499, 500], "global": [115, 186, 208, 209, 306, 307, 309, 310, 311, 320, 402, 416, 422, 462, 486, 488, 497], "class": [116, 154, 164, 181, 187, 194, 304, 351, 384, 422, 423, 427, 445, 446, 449, 461, 462, 473, 484, 485, 489, 492, 495, 497, 499], "init_quantize_config": 116, "quantize_recip": 116, "begin": [116, 192, 193, 198, 322, 445, 449, 450, 462, 486, 497], "process": [116, 140, 151, 171, 186, 191, 192, 193, 200, 202, 204, 208, 209, 212, 213, 224, 225, 226, 237, 241, 242, 255, 256, 267, 268, 269, 279, 282, 320, 322, 324, 328, 329, 351, 384, 385, 387, 388, 405, 415, 416, 423, 426, 427, 428, 444, 445, 446, 449, 450, 451, 453, 462, 466, 485, 486, 489, 494, 495, 496, 499], "model_nam": [116, 208, 209], "special": [116, 156, 184, 361, 422, 445, 461, 462, 484, 486, 498], "decid": [116, 208, 209, 291, 322, 344, 426, 427, 462, 489, 492, 497], "qat_clone_funct": 116, "leav": [116, 476], "quantizewrapp": [116, 122], "wrapped_lay": 116, "config_quantizable_lay": 118, "quantizelayeradd": 119, "quantizelay": 120, "quantizelayerbas": 120, "quantizelayerbatchnorm": 121, "quantizewrapperbas": 122, "fusedbatchnormv3": [123, 133], "fusenodestartwithfusedbatchnormv3": [123, 133], "_quantizedfusedbatchnorm": 123, "concatv2": [124, 134, 147, 455], "fusenodestartwithconcatv2": [124, 134], "quantizedconcatv2": [124, 134], "fusenodestartwithconv2d": [125, 135], "conv2dbackpropinput": 126, "conv3dbackpropinputv2": 126, "fusenodestartwithdeconv2d": 126, "fusedinstancenorm": 127, "fusenodestartwithfusedinstancenorm": 127, "batchmatmul": 128, "batchmatmulv2": 128, "fusenodestartwithmatmul": [128, 137], "avgpool": [129, 138, 455], "fusenodestartwithpool": [129, 138], "optimizeqdqgraph": 131, "input_graph": [131, 136, 143, 379, 383, 426], "op_wise_sequ": [131, 136], "quantizegraph": 132, "quantizegraphbas": 132, "quantizenodebas": 132, "quantizegraphforintel": 136, "common": [139, 154, 156, 177, 209, 239, 289, 299, 303, 304, 305, 342, 408, 420, 446, 450, 451, 453, 457, 459, 462, 489, 494], "herlper": 139, "quantizegraphhelp": 139, "sever": [139, 202, 241, 282, 324, 423, 448, 449, 450, 458, 462, 463, 475, 479, 486, 488, 494, 496, 497, 499], "staticmethod": 139, "function": [139, 154, 192, 193, 198, 208, 209, 212, 213, 225, 255, 256, 268, 300, 303, 312, 317, 422, 423, 426, 427, 428, 443, 445, 449, 450, 453, 457, 458, 459, 461, 462, 463, 473, 483, 486, 489, 491, 492, 493, 494, 495, 497, 498], "smoothquantcalibr": 140, "dataset": [140, 141, 164, 200, 212, 213, 214, 216, 217, 219, 221, 222, 223, 235, 244, 255, 256, 257, 259, 260, 262, 264, 265, 266, 278, 289, 293, 294, 295, 297, 326, 342, 346, 347, 348, 350, 351, 384, 405, 408, 423, 425, 426, 427, 445, 451, 456, 461, 462, 470, 486, 489, 492, 494, 497, 499, 500], "outlier": [140, 427, 444, 448, 491, 494], "ignor": [140, 416, 444, 446, 491, 494], "smoothquantscal": 141, "alpha": [141, 159, 169, 180, 201, 489], "scales_per_op": 141, "individu": [141, 186, 320, 378, 383, 420, 486, 494], "tensorflowqdqtoonnxqdqconvert": 142, "shape_overrid": 142, "inputs_as_nchw": [142, 286], "default_opset_vers": 142, "bia": [143, 208, 209, 491, 495], "correct": [143, 170, 204, 208, 209, 293, 294, 295, 297, 321, 346, 347, 348, 350, 420, 465], "biascorrect": 143, "fp32_graph": 143, "weight_empir": 143, "Will": [143, 449, 458], "our": [143, 164, 208, 209, 423, 425, 453, 462, 483, 493, 498], "task": [143, 224, 231, 267, 274, 297, 350, 446, 449, 450, 453, 458, 461, 462, 486, 491, 494], "close": [143, 170, 444], "w_int8": [143, 170], "u": [143, 170, 425, 465], "w_fp32": [143, 170], "varianc": [143, 170, 448], "differ": [143, 166, 170, 173, 177, 195, 208, 209, 217, 226, 241, 243, 260, 269, 282, 288, 297, 303, 305, 314, 325, 350, 361, 410, 420, 422, 423, 427, 445, 446, 448, 449, 451, 452, 457, 458, 461, 462, 464, 475, 479, 484, 486, 489, 494, 495, 496, 497], "wise": [143, 153, 155, 157, 165, 170, 208, 209, 329, 332, 388, 389, 393, 427, 458, 486, 495, 497, 499], "minim": [143, 170, 329, 388, 427, 428, 444, 449, 452, 461, 462, 475, 479, 486, 489, 497], "scale_c": [143, 170], "shift": [143, 170, 237, 279, 483, 496], "notic": [143, 170, 242, 460, 463, 492], "first": [143, 156, 170, 185, 206, 208, 209, 224, 267, 293, 339, 346, 389, 400, 416, 422, 423, 426, 427, 428, 446, 448, 459, 463, 467, 476, 477, 480, 483, 488, 489, 490, 491, 493, 494, 495, 497, 499], "empir": [143, 170], "solut": [143, 170, 425, 426, 427, 454, 467, 471, 476, 487, 492, 494, 497, 498], "don": [143, 170, 186, 208, 209, 422, 486, 497], "min": [143, 165, 170, 178, 209, 416, 448, 486, 489, 494, 496, 497], "graphtransform": 144, "graphtransformbas": 144, "input_pb": [144, 146, 147], "log": [146, 171, 184, 367, 368, 372, 412, 422, 473, 493, 495, 497], "insertlog": 146, "node_name_list": 146, "show_nam": 146, "show_op": 146, "first_n": 146, "summar": [146, 449], "1024": [146, 226, 269, 468], "dump_fp32": 146, "rerang": 147, "rerangequantizedconcat": 147, "rerange_quant": 147, "version1_lt_version2": [148, 416], "version1": [148, 416], "version2": [148, 416], "version1_gt_version2": [148, 416], "greater": [148, 416, 486, 497], "version1_eq_version2": [148, 416], "version1_gte_version2": [148, 416], "version1_lte_version2": [148, 416], "disable_random": 148, "seed": [148, 177, 208, 209, 305, 416, 462, 499], "disabl": [148, 208, 209, 420, 482, 490], "read_graph": 148, "in_graph": 148, "in_graph_is_binari": 148, "write_graph": 148, "out_graph_def": 148, "out_graph_fil": 148, "write": [148, 233, 276, 416, 451, 457, 462, 465, 495], "is_ckpt_format": 148, "model_path": [148, 448], "ckpt": [148, 351, 359, 384, 500], "folder": [148, 226, 231, 269, 274, 351, 384, 415, 446, 470, 475, 479, 491, 495], "is_saved_model_format": 148, "saved_model": [148, 299], "get_estimator_graph": 148, "estim": [148, 297, 350, 359, 497], "input_fn": [148, 359], "get_tensor_by_nam": 148, "try_cnt": 148, "import": [148, 171, 178, 208, 209, 299, 351, 361, 384, 403, 405, 416, 422, 423, 425, 428, 443, 445, 446, 448, 449, 450, 451, 453, 456, 461, 462, 463, 464, 465, 469, 471, 484, 485, 486, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498], "scope": [148, 427, 462], "onc": [148, 156, 202, 248, 324, 328, 385, 387, 427, 428, 445, 482, 486, 487, 497, 500], "both": [148, 209, 420, 423, 426, 450, 462, 466, 486, 488, 489, 494, 497], "compat": [148, 359, 451, 464, 477, 480, 482, 492], "v1": [148, 236, 237, 279, 294, 295, 297, 347, 348, 350, 359, 451, 453, 454, 461, 464, 486, 492, 493, 500], "suffix": 148, "time": [148, 156, 208, 209, 241, 282, 297, 329, 350, 361, 388, 416, 427, 445, 448, 451, 454, 462, 470, 472, 475, 479, 482, 483, 484, 486, 487, 489, 491, 493, 495, 496, 497], "got": [148, 427, 454, 495], "iterator_sess_run": 148, "sess": [148, 359], "iter_op": 148, "feed_dict": [148, 223, 266], "output_tensor": [148, 359], "measur": [148, 242, 351, 410, 423, 426, 443, 448, 449, 461, 462, 491, 495, 497, 500], "integr": [148, 173, 243, 426, 462, 483, 491], "makeiter": 148, "feed": [148, 223, 266, 449, 486], "end": [148, 191, 192, 193, 198, 208, 209, 224, 240, 241, 267, 281, 282, 322, 328, 385, 387, 426, 427, 428, 449, 450, 455, 459, 462, 476, 484, 486, 495, 496, 497], "predict": [148, 241, 246, 282, 290, 294, 295, 297, 343, 347, 348, 350, 384, 423, 449, 461, 473, 491, 494, 495, 496], "pred": [148, 297, 350, 461], "collate_tf_pr": 148, "collat": [148, 164, 445], "tbe": 148, "get_input_output_node_nam": 148, "fix_ref_type_of_graph_def": 148, "fix": [148, 196, 198, 224, 267, 322, 421, 445, 446, 469, 486, 494, 497], "strip_unused_lib": 148, "offici": [148, 290, 294, 295, 343, 347, 348, 420, 494], "r1": 148, "15": [148, 455, 459], "branch": 148, "get_graph_def": 148, "auto_input_output": 148, "get_model_input_shap": 148, "inout": 148, "get_tensor_val_from_graph_nod": 148, "graph_node_name_map": 148, "kei": [148, 151, 156, 161, 184, 195, 204, 206, 208, 209, 304, 321, 359, 403, 406, 408, 416, 425, 427, 487, 491, 495, 497], "val": [148, 204, 226, 229, 269, 272, 321, 448, 462], "tensor_v": 148, "int8_node_name_revers": 148, "revers": 148, "tf_diagnosis_help": 148, "fp32_model": [148, 151, 164, 287, 416, 426], "quan_model": 148, "save_path": [148, 286, 287, 426, 464], "diagnosi": [148, 208, 209, 462, 487, 492, 498], "generate_feed_dict": 148, "input_tensor": [148, 359], "get_weight_from_input_tensor": 148, "input_tensor_nam": [148, 359], "associ": [148, 156, 293, 346], "search": [148, 150, 177, 178, 184, 198, 205, 209, 212, 213, 255, 256, 288, 290, 300, 303, 304, 305, 325, 329, 343, 388, 425, 458, 461, 465, 466, 476, 486, 487, 491, 495, 497, 498], "look": [148, 195, 425, 426, 428, 455, 461, 499], "sq_weight_tensor": 148, "sq_weights_nod": 148, "two": [148, 151, 156, 171, 185, 190, 197, 202, 226, 231, 242, 269, 274, 293, 320, 324, 326, 333, 346, 394, 416, 422, 423, 445, 446, 449, 451, 453, 455, 462, 463, 489, 490, 491, 493, 497, 499], "torch": [149, 150, 151, 152, 153, 156, 159, 160, 161, 162, 164, 165, 169, 181, 184, 185, 187, 195, 205, 208, 209, 287, 351, 384, 415, 422, 425, 428, 429, 449, 451, 453, 462, 463, 464, 465, 470, 473, 489, 491, 494, 495], "bf16modulewrapp": 149, "bf16modul": 149, "mix": [149, 158, 208, 209, 327, 339, 351, 386, 400, 425, 426, 433, 458, 465, 471, 472, 473, 498], "precis": [149, 158, 208, 209, 212, 213, 255, 256, 288, 295, 297, 298, 325, 327, 339, 348, 350, 351, 361, 386, 389, 400, 416, 425, 426, 427, 433, 443, 444, 450, 451, 455, 458, 465, 471, 472, 473, 487, 488, 489, 494, 497, 498], "mixed_precision_model": 149, "bf16_symbolic_trac": 149, "fx_sub_module_list": 149, "trace": [149, 151, 162, 164, 184, 208, 209, 287, 391, 422, 472, 497], "_description_": 149, "is_leaf": 150, "judg": 150, "nn": [150, 159, 161, 164, 165, 184, 185, 195, 208, 209, 287, 351, 384, 415, 422, 449, 462, 464, 491, 494, 495], "trace_gptq_target_block": 150, "module_typ": 150, "modulelist": 150, "stack": 150, "structur": [150, 185, 196, 197, 208, 209, 322, 340, 401, 458, 481, 483, 486, 489, 495, 498, 500], "critic": [150, 195, 420], "llm": [150, 199, 491, 494], "gptq_related_block": 150, "embed": [150, 164, 444, 486], "transfrom": 150, "transformers_pr": 150, "todo": [150, 224, 227, 267, 270, 293, 339, 346, 400], "transformers_nam": 150, "find_lay": 150, "conv1d": [150, 428], "find_layers_nam": 150, "log_quantizable_layers_per_transform": 150, "transformer_block": 150, "maxq": 150, "gptquantiz": 150, "weight_config": [150, 163, 165], "compress": [150, 289, 312, 317, 342, 361, 405, 418, 425, 433, 449, 458, 462, 482, 484, 485, 486, 487, 489, 494, 498, 500], "pretrain": [150, 411, 465, 471], "url": [150, 226, 269, 460], "arxiv": [150, 180, 198, 199, 322, 444, 486, 491, 494], "org": [150, 180, 198, 199, 293, 322, 346, 421, 422, 448, 459, 477, 480], "2210": [150, 491], "17323": [150, 491], "node_collector": 151, "hook": [151, 172, 195, 250, 251, 312, 317, 408, 449, 450, 462, 486, 494, 495], "record": [151, 164, 165, 173, 224, 225, 226, 232, 243, 250, 267, 268, 269, 275, 416, 446, 493, 495, 497], "hessiantrac": 151, "q_model": [151, 155, 209, 299, 384, 422, 425, 445, 446, 448, 451, 453, 456, 457, 461, 462, 464, 489, 490, 491], "criterion": [151, 172, 174, 179, 180, 186, 191, 192, 193, 195, 198, 199, 203, 208, 209, 245, 248, 289, 342, 449, 450, 462, 486, 489, 497, 499], "yao": 151, "zhewei": 151, "et": [151, 444, 491, 494], "al": [151, 444, 491, 494], "pyhessian": 151, "network": [151, 180, 186, 187, 322, 391, 423, 444, 449, 450, 453, 462, 487, 489, 494, 497], "through": [151, 212, 213, 255, 256, 350, 351, 384, 425, 443, 455, 457, 458, 461, 468, 484, 485, 486, 488, 489, 494], "len": [151, 209, 241, 282, 446, 451, 496], "2020": 151, "ieee": [151, 463, 494], "intern": [151, 339, 400, 445, 446, 461, 486], "confer": [151, 486, 494], "big": [151, 448], "dong": 151, "zhen": 151, "hawq": [151, 391, 497], "v2": [151, 391, 445, 451, 453, 454, 459, 471, 492, 497, 498, 500], "advanc": [151, 208, 209, 420, 425, 427, 433, 489, 499], "system": [151, 156, 171, 242, 416, 443, 468, 500], "33": [151, 500], "18518": 151, "18529": 151, "openvinotoolkit": 151, "nncf": 151, "develop": [151, 361, 421, 422, 459, 462, 463, 465, 471, 482, 486, 487, 490, 493], "hessian_trac": 151, "compare_weight": 151, "float_dict": 151, "ani": [151, 156, 293, 295, 338, 346, 348, 378, 383, 399, 403, 413, 416, 420, 421, 425, 428, 451, 465, 470, 483, 486, 493], "quantized_dict": 151, "compar": [151, 297, 350, 416, 450, 461, 486, 489, 491, 493, 495, 497], "being": [151, 293, 346, 428], "wt_compare_dict": 151, "float_model": 151, "state_dict": [151, 451, 491, 495], "qmodel": 151, "compute_error": 151, "state": [151, 185, 428, 468, 486], "weight_dict": 151, "hawq_top": 151, "enable_act": 151, "modul": [152, 153, 181, 187, 194, 302, 308, 318, 319, 422, 445, 449, 458, 461, 462, 464, 486, 488, 490, 491, 495, 498], "portabl": 154, "serial": [154, 156], "see": [154, 241, 282, 290, 343, 420, 422, 424, 460, 462, 475, 476, 479, 482, 483, 491, 494, 495, 497], "copyreg": 154, "mechan": [154, 180, 486, 493, 498], "pickler": 154, "pickletool": 154, "comment": [154, 420, 427, 446, 461, 462, 491, 496], "unpickl": [154, 156], "load": [154, 156, 157, 224, 240, 241, 267, 281, 282, 351, 359, 384, 415, 416, 427, 445, 475, 479, 483, 488, 489, 494], "misc": [154, 460], "format_vers": 154, "compatible_format": 154, "except": [154, 156, 403, 416], "pickleerror": 154, "pickl": [154, 156], "picklingerror": 154, "unpicklingerror": 154, "problem": [154, 224, 267, 297, 350, 461, 463, 483], "secur": [154, 425, 487, 501], "violat": 154, "also": [154, 185, 223, 226, 241, 266, 269, 282, 290, 343, 350, 361, 384, 421, 423, 426, 427, 428, 445, 448, 452, 456, 458, 461, 462, 465, 470, 475, 476, 479, 482, 483, 484, 486, 487, 489, 490, 494, 497], "includ": [154, 173, 180, 184, 186, 201, 203, 208, 209, 224, 226, 233, 241, 243, 267, 269, 276, 282, 288, 298, 320, 325, 403, 416, 420, 421, 426, 427, 428, 445, 446, 448, 459, 460, 461, 462, 465, 468, 471, 476, 486, 489, 490, 491, 495, 497], "necessarili": 154, "limit": [154, 178, 329, 388, 416, 425, 448, 449, 491, 492, 495], "attributeerror": [154, 403], "eoferror": 154, "importerror": [154, 454], "indexerror": 154, "layerwisequ": 155, "pretrained_model_name_or_path": [155, 157], "op_cfg": 155, "output_dir": [155, 411, 462, 470, 471], "order": [155, 164, 290, 291, 326, 329, 332, 341, 343, 344, 388, 393, 402, 422, 448, 461, 488, 494, 495, 497], "memomeri": 155, "f": [156, 181, 449, 451, 489, 491, 494], "file_lik": 156, "map_loc": 156, "pickle_modul": [156, 181], "weights_onli": 156, "pickle_load_arg": 156, "facil": 156, "treat": [156, 445], "storag": [156, 425, 456, 461, 491, 494], "thei": [156, 242, 403, 420, 449, 455, 462, 470, 484], "deseri": 156, "were": [156, 297, 350, 468, 486], "fail": [156, 422, 445, 453], "e": [156, 186, 208, 209, 420, 449, 452, 456, 465, 470, 471, 475, 479, 486, 491, 494, 497], "becaus": [156, 190, 195, 241, 282, 320, 422, 489, 494, 496, 497], "doesn": [156, 241, 282, 426, 451, 462, 463, 483, 499], "certain": [156, 493], "howev": [156, 486, 491, 494], "dynam": [156, 209, 214, 257, 287, 339, 400, 426, 445, 449, 453, 458, 462, 465, 470, 471, 472, 473, 476, 482, 487, 497, 500], "altern": [156, 208, 209, 384], "argument": [156, 209, 403, 423, 448, 491], "callabl": [156, 208, 209, 295, 348, 405, 445], "locat": [156, 166, 204, 241, 282, 451, 468, 475, 479, 482, 489, 492, 496, 499], "resid": 156, "tag": [156, 359, 494, 495], "wa": [156, 208, 209, 426, 462, 487, 497], "builtin": [156, 451], "cuda": [156, 204, 463, 465, 467, 489], "device_id": 156, "either": [156, 209, 293, 346, 466, 470, 485, 488, 489], "final": [156, 184, 191, 204, 322, 427, 462, 468, 484, 486, 489, 492, 497], "alreadi": [156, 171, 226, 240, 242, 269, 281, 426, 446, 458, 477, 480, 497], "right": [156, 237, 279, 293, 346, 420, 422, 482, 494, 496], "otherwis": [156, 226, 241, 269, 282, 416, 420, 427, 446, 477, 480, 488, 496], "fall": [156, 164], "back": [156, 164, 241, 247, 282, 448, 482], "behavior": [156, 420, 421, 426, 427, 428, 455, 464, 495, 497, 499], "wasn": 156, "indic": [156, 172, 208, 209, 217, 222, 224, 260, 265, 267, 283, 293, 304, 346, 422, 445, 454, 491, 495], "appear": [156, 420, 476, 482], "ones": [156, 293, 346, 486], "put": [156, 226, 269, 446, 449], "user": [156, 171, 184, 196, 204, 208, 209, 212, 213, 226, 229, 233, 241, 242, 248, 255, 256, 269, 272, 276, 282, 288, 312, 317, 323, 325, 326, 350, 351, 361, 384, 389, 402, 405, 416, 422, 423, 425, 426, 427, 428, 433, 443, 445, 449, 450, 453, 455, 458, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 473, 476, 482, 484, 485, 486, 487, 489, 490, 492, 494, 495, 496, 497, 501], "register_packag": 156, "readlin": 156, "tell": [156, 350, 384, 488], "seek": 156, "o": [156, 403, 459, 467, 494], "pathlik": 156, "how": [156, 165, 172, 180, 186, 192, 193, 198, 199, 208, 209, 241, 282, 283, 320, 421, 422, 424, 426, 445, 446, 449, 450, 451, 457, 461, 462, 476, 477, 480, 481, 482, 486, 487, 489, 494, 496, 497, 498, 499], "metadata": 156, "primit": 156, "keyword": [156, 209], "unless": [156, 455], "implicitli": 156, "known": [156, 244, 329, 388, 462, 495, 497], "insecur": 156, "possibl": [156, 242, 448, 485, 486, 490, 497], "construct": [156, 224, 227, 228, 231, 239, 244, 246, 247, 249, 267, 270, 271, 274, 350, 355, 359, 402, 408, 420, 427, 428, 446, 451, 486, 497], "malici": 156, "arbitrari": [156, 462, 485], "code": [156, 184, 212, 213, 242, 255, 256, 299, 323, 326, 384, 405, 422, 425, 426, 427, 428, 446, 449, 450, 451, 457, 458, 460, 461, 465, 467, 469, 470, 471, 473, 476, 482, 484, 485, 486, 487, 488, 489, 493, 494, 495, 496], "never": [156, 497], "could": [156, 161, 169, 186, 212, 213, 226, 255, 256, 269, 326, 351, 384, 405, 420, 422, 450, 462, 485, 486, 489, 491, 494, 498], "come": [156, 497], "untrust": 156, "unsaf": 156, "tamper": 156, "trust": [156, 448], "load_state_dict": 156, "ram": 156, "surg": 156, "checkpoint": [156, 359, 415, 464], "By": [156, 184, 208, 209, 290, 343, 427, 428, 461, 464, 475, 476, 479, 487, 497], "decod": [156, 236, 237, 279, 290, 343, 461, 496], "byte": 156, "utf": [156, 240, 281], "unicodedecodeerror": 156, "ascii": 156, "codec": 156, "0x": 156, "incorrect": 156, "extra": [156, 295, 348, 462], "encod": [156, 293, 346, 496], "latin1": 156, "them": [156, 184, 224, 267, 422, 428, 445, 448, 453, 455, 457, 485, 486, 491, 497], "keep": [156, 195, 204, 321, 389, 422, 426, 481, 482, 492], "later": [156, 161, 169, 495], "byte_arrai": 156, "xdoctest": 156, "skip": [156, 495, 497], "undefin": [156, 204, 321], "filepath": [156, 416], "pt": [156, 415, 464, 487, 489, 490, 491], "onto": 156, "lambda": 156, "loc": 156, "bytesio": 156, "open": [156, 245, 289, 342, 408, 418, 420, 425, 453, 454, 462, 477, 480, 483, 487], "rb": 156, "buffer": 156, "get_children": 157, "get_named_children": 157, "dowload_hf_model": 157, "repo_id": 157, "cache_dir": 157, "repo_typ": 157, "revis": 157, "download": [157, 226, 269, 446, 448, 459, 492], "hug": [157, 425, 487], "face": [157, 420, 425, 433, 465, 469, 487, 492, 500], "hf": 157, "hub": [157, 425, 452, 456, 473], "load_shel": 157, "empti": [157, 208, 209, 468], "get_super_module_by_nam": 157, "module_nam": [157, 180, 181, 191, 192, 193, 194, 196, 197, 198, 199, 201, 203, 322, 416], "father": [157, 184], "update_modul": 157, "new_modul": [157, 161, 164], "load_layer_wise_quantized_model": 157, "load_tensor_from_shard": 157, "shard": 157, "load_tensor": 157, "ipex_mixed_precis": 158, "example_input": [158, 161, 163, 164, 165, 208, 209, 287, 453], "fakeaffinetensorquantfunct": 159, "affin": [159, 489], "teqlinearfakequ": 159, "orig_lay": 159, "teqmullinear": 159, "input_scal": 159, "trainabl": [159, 163], "teq": [159, 491], "detector": 160, "transformerbasedmodelblockpatterndetector": 160, "pattern_lst": 160, "block_pattern": 160, "detect": [160, 164, 184, 208, 209, 293, 297, 346, 350, 355, 422, 465, 472, 473, 486, 497], "ffn": [160, 195], "get_modul": 161, "set_modul": [161, 164], "torchsmoothqu": [161, 494], "q_func": [161, 212, 213, 255, 256, 327, 329, 332, 335, 385, 386, 388, 389, 391, 393, 396, 426, 462, 497], "traced_model": [161, 162], "whose": [161, 169, 186, 321, 457, 494, 497], "absorb": [161, 165, 169], "graphtrac": 161, "trace_and_fuse_sub_graph": 162, "is_qat": 162, "tequant": 163, "absorb_to_lay": [163, 165], "extra_config": [163, 165], "get_embedding_contigu": 164, "contigu": 164, "is_fused_modul": 164, "_propagate_qconfig_help": 164, "collate_torch_pr": 164, "fetch": [164, 168, 217, 260, 427, 446], "collate_result": 164, "input2tupl": 164, "append_attr": 164, "fx_model": 164, "fx_white_list": 164, "append": [164, 326, 329, 388, 422, 450, 462, 485], "graphmodul": [164, 422, 490], "addit": [164, 209, 405, 427, 428, 449, 476, 492, 497], "dir": [164, 224, 267, 415, 446, 454, 457], "generate_activation_observ": 164, "observ": [164, 428, 493, 495, 497], "what": [164, 191, 222, 265, 350, 384, 405, 420, 487], "check_cfg_and_qconfig": 164, "op_infos_from_cfg": 164, "output_tensor_ids_op_nam": 164, "paser_cfg": 164, "ops_nam": 164, "get_quantizable_ops_from_cfg": 164, "input_tensor_ids_op_nam": 164, "update_sq_scal": 164, "ipex_config_path": 164, "smoothquant_scale_info": 164, "ipex_config": 164, "json": [164, 225, 241, 268, 282, 446, 464, 483, 491, 496], "temporari": [164, 416, 420], "auto_copi": 164, "fetch_modul": 164, "op_nam": [164, 205, 208, 209, 340, 401, 416, 417, 427, 462, 486, 495], "simple_infer": 164, "get_example_input": 164, "example_inp": 164, "get_fallback_ord": 164, "confidence_batch": [164, 497], "fallback": [164, 209, 332, 333, 391, 393, 394, 453, 463, 490, 497], "requantize_cfg": 164, "confid": 164, "ordered_op": 164, "get_mse_order_per_fp32": 164, "influenc": [164, 486], "last": [164, 180, 204, 208, 209, 445, 463, 465, 467, 472, 476, 489, 494], "fallback_ord": 164, "get_mse_order_per_int8": 164, "get_torch_vers": 164, "match_datatype_pattern": 164, "calculate_quant_min_max": 164, "unsign": [164, 341, 402, 428], "qmin": 164, "qmax": 164, "get_depth": 164, "depth": [164, 449, 490], "get_dict_at_depth": 164, "target_depth": 164, "nest": [164, 206], "get_element_under_depth": 164, "ops_lst": 164, "get_op_type_by_nam": 164, "quantizable_op": 164, "collect_weight_info": 164, "fc": [164, 209], "param": [164, 171, 214, 242, 248, 257, 297, 329, 350, 388, 416, 426, 464, 497], "configu": 164, "_type_": 164, "qdq_weight_asym": 165, "quantil": [165, 497], "return_int": 165, "choos": [165, 226, 269, 458, 470, 487, 492, 494, 497, 499], "qdq_weight_sym": 165, "full_rang": 165, "rang": [165, 227, 228, 241, 270, 271, 282, 403, 405, 425, 426, 428, 444, 446, 448, 449, 450, 451, 462, 485, 486, 489, 491, 494, 496], "amax": 165, "qdq_weight_actor": 165, "quant_weight": 165, "mani": [165, 350, 384, 445, 459, 491, 497, 499], "element": [165, 188, 189, 204, 222, 265, 293, 320, 346, 416, 446, 458, 461, 486, 491, 494], "zp": [165, 494], "sym_full_rang": 165, "num": [165, 416, 445], "configir": 165, "gptq_perm": 165, "perm": [165, 241, 282, 496], "int32": [165, 446, 491], "get_module_input_output": 165, "module_hook_config": 165, "calib_func": [165, 384, 490], "help": [165, 250, 299, 464, 465, 471, 482, 491, 497, 498], "module_name_list": 165, "requir": [165, 208, 209, 215, 326, 359, 383, 422, 426, 427, 443, 444, 445, 448, 450, 451, 455, 462, 463, 464, 466, 476, 482, 486, 489, 491, 492, 493, 494, 495, 497, 499], "fc1": 165, "input_valu": 165, "output_valu": 165, "absorb_dict": 165, "absorb_lay": 165, "absorbed_lay": 165, "fc3": 165, "teq_quant": 165, "quant_weight_w_scal": 165, "algorithm_registri": 166, "algorithm_typ": 166, "registr": [166, 226, 233, 241, 269, 276, 282, 315], "algorithmschedul": 166, "conf": [166, 171, 172, 209, 212, 213, 242, 255, 256, 299, 306, 307, 309, 310, 311, 312, 317, 327, 329, 332, 335, 339, 351, 361, 384, 385, 386, 388, 389, 391, 393, 396, 400, 403, 405, 422, 423, 425, 428, 443, 449, 456, 457, 462, 463, 464, 485, 489, 490, 491, 493, 494, 497], "control": [166, 208, 209, 422, 462, 486, 497], "phase": [166, 423, 462, 486, 489, 490, 497], "fastbiascorrect": [167, 170], "fast_bias_correct": [168, 208, 209, 342, 489], "weight_correct": [168, 208, 209, 342, 489], "kernel": [169, 208, 209, 426, 427, 497], "futur": [169, 212, 213, 244, 255, 256, 458, 462, 473, 498], "weightcorrect": 170, "1e": [170, 494, 499], "05": [170, 209, 297, 350, 461, 494, 500], "evalu": [171, 172, 186, 208, 212, 213, 224, 242, 255, 256, 267, 283, 290, 293, 294, 295, 297, 299, 343, 346, 347, 348, 350, 351, 361, 384, 405, 408, 423, 426, 427, 446, 449, 450, 457, 458, 461, 462, 463, 465, 471, 473, 476, 482, 484, 486, 489, 493, 495, 497, 499], "set_env_var": [171, 242], "env_var": [171, 242], "overwrite_exist": [171, 242], "env": [171, 242, 454], "set_all_env_var": [171, 242], "physic": [171, 242, 420, 443], "core": [171, 208, 209, 242, 443, 460, 475, 479, 500], "get_architectur": [171, 242], "architectur": [171, 242, 300, 303, 425, 443, 449, 462, 486, 487, 491, 498], "get_threads_per_cor": [171, 242], "thread": [171, 208, 209, 242, 378, 383, 445], "get_thread": [171, 242], "get_physical_id": [171, 242], "socket": [171, 242, 416, 500], "get_core_id": [171, 242], "id": [171, 240, 242, 281, 290, 292, 293, 294, 295, 343, 345, 346, 347, 348, 461, 493, 497], "get_bounded_thread": [171, 242], "core_id": [171, 242], "bind": [171, 242], "run_inst": 171, "b_dataload": [171, 208, 209, 443, 462], "b_func": [171, 443], "benchmarkconfig": [171, 208, 209, 443, 448, 462], "accuraci": [171, 204, 208, 209, 212, 213, 255, 256, 283, 288, 297, 312, 317, 325, 350, 351, 361, 384, 389, 403, 405, 413, 422, 425, 427, 428, 444, 445, 446, 448, 450, 451, 452, 453, 461, 462, 473, 482, 484, 485, 486, 487, 488, 491, 492, 493, 494, 495, 498, 499, 500], "goal": [171, 283, 288, 312, 317, 325, 351, 384, 427, 445, 485, 489, 497], "prefer": [171, 288, 325, 384, 486, 491], "space": [171, 177, 178, 192, 193, 198, 199, 208, 209, 212, 213, 255, 256, 288, 295, 300, 303, 304, 305, 325, 329, 332, 339, 348, 351, 384, 388, 393, 400, 420, 421, 423, 426, 427, 428, 486, 489, 499], "etc": [171, 172, 240, 281, 283, 288, 295, 312, 317, 325, 348, 351, 384, 415, 449, 458, 486, 493, 497], "generate_prefix": 171, "core_list": 171, "command": [171, 242, 405, 448, 451, 465, 467, 470, 475, 479, 483], "numactl": [171, 454, 468, 476], "call_on": 171, "cmd": [171, 483], "log_fil": [171, 377, 382], "window": [171, 443, 482, 483], "config_inst": 171, "raw_cmd": 171, "multi": [171, 182, 184, 195, 293, 346, 350, 384, 423, 445, 446, 458, 462, 484, 486, 489, 497], "trigger": [171, 191, 322, 421], "raw": [171, 225, 229, 232, 268, 272, 275, 332, 393, 461, 497], "summary_benchmark": 171, "summari": [171, 405, 448, 477, 480, 495, 500], "profil": [171, 342], "benchmark_with_raw_cmd": 171, "commend": 171, "fit_with_raw_cmd": 171, "cores_per_inst": [171, 208, 209, 443, 462, 488], "num_of_inst": [171, 208, 209, 443, 462, 488], "test": [171, 208, 209, 241, 282, 421, 425, 448, 459, 500], "fit": [171, 186, 208, 209, 329, 351, 384, 388, 403, 405, 422, 425, 443, 445, 446, 448, 451, 456, 457, 461, 462, 463, 464, 486, 489, 490, 491], "pb": [171, 208, 209, 351, 359, 384, 425, 443, 451, 456, 462, 464, 495, 500], "eval_dataload": [171, 208, 209, 212, 213, 255, 256, 326, 327, 329, 332, 335, 351, 384, 385, 386, 388, 389, 391, 393, 396, 405, 443, 457, 461, 462, 489, 497], "compon": [172, 283, 289, 326, 342, 422, 448, 451, 459, 460, 465, 482, 485], "quantizationawaretrainingcallback": 172, "pruningcallback": 172, "distillationcallback": 172, "basecallback": 172, "design": [172, 223, 246, 251, 266, 350, 389, 423, 425, 462, 470, 473, 486, 489, 498], "mainli": [172, 202, 251, 324, 462, 486, 489], "prune": [172, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 208, 209, 251, 252, 289, 306, 307, 309, 310, 311, 315, 317, 318, 320, 321, 322, 324, 326, 342, 416, 425, 451, 452, 455, 456, 458, 485, 487, 498, 499], "distil": [172, 179, 208, 209, 243, 250, 251, 289, 342, 425, 452, 456, 458, 485, 498, 499], "In": [172, 188, 189, 190, 195, 196, 197, 201, 209, 223, 251, 266, 293, 320, 322, 346, 361, 420, 422, 423, 425, 426, 427, 445, 446, 448, 449, 450, 451, 461, 462, 472, 475, 476, 479, 484, 485, 486, 489, 490, 491, 493, 494, 495, 496, 497, 498], "adaptor": [172, 208, 209, 341, 402, 408, 425, 428, 458, 490, 492, 494, 495, 498], "deriv": [172, 180, 188, 189, 190, 196, 197, 198, 199, 200, 201, 202, 203, 283, 320, 322, 324], "pipelin": [172, 283, 300, 301, 326, 450, 462, 485], "knowledg": [172, 173, 208, 209, 243, 283, 450, 452, 456, 458, 462, 464, 499], "transfer": [172, 231, 274, 283, 446, 449, 450, 462, 494], "teacher": [172, 208, 209, 283, 449, 450, 462, 500], "student": [172, 208, 209, 224, 250, 267, 283, 446, 449, 450, 500], "distillation_conf": [172, 205, 283], "_epoch_ran": [172, 283], "integ": [172, 190, 191, 208, 209, 283, 293, 297, 304, 320, 322, 346, 350, 403, 426, 428, 444, 489, 494, 497], "much": [172, 180, 208, 209, 241, 282, 283, 449, 476, 494, 496], "epoch": [172, 192, 193, 198, 283, 322, 405, 445, 449, 450, 451, 462, 485, 486, 499], "ran": [172, 283], "eval_frequ": [172, 283], "frequenc": [172, 191, 208, 209, 283, 322, 462, 486, 499], "term": [172, 192, 193, 198, 199, 201, 283, 421, 444, 449, 460, 461, 484, 485, 497], "best_scor": [172, 283], "best": [172, 241, 282, 283, 288, 325, 332, 393, 420, 423, 459, 465, 471, 482, 484, 489, 491, 496, 497], "metric": [172, 208, 209, 212, 213, 245, 255, 256, 283, 288, 289, 304, 312, 317, 325, 326, 342, 351, 384, 405, 408, 423, 426, 427, 446, 448, 451, 462, 463, 489, 493, 495, 497, 498, 499, 500], "best_model": [172, 283, 491], "found": [172, 283, 425, 449, 463, 470, 494, 497, 500], "critet": [173, 243], "tensorflowknowledgedistillationloss": [173, 243], "pytorchknowledgedistillationloss": [173, 243, 462], "pytorchintermediatelayersknowledgedistillationloss": [173, 243], "tensorflowcriterion": [173, 243], "pytorchcriterion": [173, 243], "criterion_registri": [173, 243], "criterion_typ": [173, 243], "registry_criterion": [173, 243], "knowledgedistillationframework": [173, 243], "student_model": [173, 209, 243, 462], "teacher_model": [173, 208, 209, 243, 449, 450, 462], "knowledgedistillationloss": [173, 243, 462, 499], "temperatur": [173, 208, 209, 243, 462, 499], "loss_typ": [173, 177, 208, 209, 243, 462, 499], "ce": [173, 208, 209, 243, 462, 499], "loss_weight": [173, 208, 209, 243, 462, 499], "pytorchknowledgedistillationlosswrapp": [173, 243], "param_dict": [173, 243, 248], "tensorflowknowledgedistillationlosswrapp": [173, 243], "tensorflowknowledgedistillationlossextern": [173, 243], "intermediatelayersknowledgedistillationloss": [173, 243], "layer_map": [173, 209, 243, 449], "add_origin_loss": [173, 209, 243], "pytorch": [173, 181, 184, 187, 190, 191, 194, 199, 200, 208, 209, 223, 224, 226, 229, 233, 241, 243, 248, 250, 266, 267, 269, 272, 276, 282, 287, 288, 297, 298, 318, 320, 323, 325, 333, 342, 350, 351, 360, 384, 394, 409, 416, 422, 423, 425, 426, 427, 428, 444, 445, 449, 450, 452, 455, 458, 459, 462, 463, 464, 465, 467, 470, 471, 472, 473, 482, 486, 487, 488, 491, 492, 494, 497, 499], "pytorchintermediatelayersknowledgedistillationlosswrapp": [173, 243], "selfknowledgedistillationloss": [173, 243], "selfknowledg": [173, 243], "pytorchselfknowledgedistillationloss": [173, 243], "pytorchselfknowledgedistillationlosswrapp": [173, 243], "hyper": [175, 499], "sa_optim": [175, 179], "simul": [176, 428], "anneal": 176, "register_search": 177, "searcher": [177, 184, 209, 305], "registri": [177, 178, 180, 186, 191, 200, 201, 202, 203, 320, 322, 324, 423], "sure": [177, 186, 191, 200, 202, 320, 322, 324, 443], "search_spac": [177, 205, 209, 300, 303, 304, 305], "gridsearch": [177, 305], "grid": [177, 209, 305, 423, 486], "whole": [177, 305, 428, 489, 500], "exhaust": [177, 209, 289, 305, 331, 342, 392, 488], "randomsearch": [177, 305], "randomli": [177, 241, 282, 305, 329, 388, 423, 494, 496, 497], "bayesianoptimizationsearch": [177, 305], "42": [177, 209, 305, 500], "bayesian": [177, 209, 289, 305, 331, 342, 392, 423, 486, 488], "xgbsearcher": 177, "higher_is_bett": [177, 208, 209, 350, 384, 497, 499], "reg": [177, 179, 181, 192, 193, 198, 199, 209], "min_train_sampl": [177, 209], "10": [177, 208, 209, 226, 269, 329, 388, 425, 443, 446, 453, 459, 462, 486, 488, 496, 497, 500], "xgboost": [177, 486], "searchspac": 178, "factori": [178, 357, 364, 366, 371, 374, 376, 381], "actual": [178, 297, 350, 451, 494], "interv": [178, 197, 486], "descret": 178, "store": [178, 180, 181, 184, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 208, 209, 226, 269, 315, 322, 457], "continu": [178, 189, 293, 320, 346, 423, 462, 483, 486, 498], "learning_r": [178, 208, 209, 462, 488, 499], "001": [178, 226, 269, 446, 451, 494, 499], "num_train_epoch": [178, 462, 486], "20": [178, 241, 282, 494, 496, 499, 500], "weight_decai": [178, 462, 499], "register_searchspac": 178, "pruner": [178, 179, 289, 306, 307, 308, 309, 310, 312, 317, 318, 320, 323, 342, 462, 486, 499], "basesearchspac": 178, "discretesearchspac": 178, "continuoussearchspac": 178, "hpo": [179, 212, 255, 486], "model_slim": [179, 181, 195], "auto_slim": [179, 181, 183], "pattern_analyz": [179, 181, 183], "weight_slim": [179, 181, 183, 195], "mha": [179, 181, 187, 194], "ninm": [179, 181, 187], "nxm": [179, 181, 187, 197, 208, 209, 316, 320, 486], "basic": [179, 181, 184, 186, 194, 208, 209, 240, 281, 289, 300, 320, 331, 335, 338, 342, 392, 396, 399, 405, 458, 459, 462, 488, 493], "block_mask": [179, 180, 181, 194], "pattern_lock": [179, 181, 194, 208, 209, 289, 308, 342], "progress": [179, 181, 194, 226, 269, 476, 482, 486, 489], "retrain_fre": [179, 180, 181, 194], "criteria": [179, 181, 208, 209, 288, 312, 317, 320, 322, 325, 422, 482, 494], "schedul": [179, 181, 191, 192, 193, 198, 199, 201, 208, 209, 289, 318, 322, 342, 462, 485], "tf_criteria": [179, 181], "callback": [179, 312, 317, 405, 408, 422, 462, 485, 486, 489], "register_criterion": [180, 203], "get_criterion": 180, "pruningcriterion": [180, 203], "about": [180, 203, 416, 420, 445, 462, 490, 497, 498, 500], "score": [180, 186, 191, 195, 203, 208, 209, 290, 291, 293, 294, 295, 297, 322, 343, 344, 346, 347, 348, 350, 391, 408, 422, 461, 484, 486, 493, 497], "magnitudecriterion": [180, 203], "magnitud": [180, 203, 208, 209, 289, 297, 308, 342, 350, 458, 486], "criterion_class": [180, 203], "determin": [180, 186, 191, 203, 208, 209, 410, 420, 422, 444, 486, 489, 494], "gradientcriterion": 180, "gradient": [180, 306, 458, 462, 486, 500], "absolut": [180, 208, 209, 297, 350, 461, 462, 486, 489, 497], "snipcriterion": 180, "snip": [180, 208, 209, 322, 458, 486, 500], "product": [180, 425, 458, 463, 465, 466, 482, 487, 489, 493, 497], "singl": [180, 202, 208, 209, 217, 224, 241, 260, 267, 282, 293, 322, 324, 346, 350, 384, 422, 446, 448, 459, 486], "shot": [180, 198, 199, 202, 251, 322, 324, 423, 458, 462, 486, 487], "connect": [180, 322, 482, 486, 493], "sensit": [180, 306, 322, 458, 486], "1810": [180, 322], "02340": [180, 322], "snipmomentumcriterion": 180, "snip_momentum": [180, 208, 209, 462, 486], "momentum": [180, 322, 458, 462, 486, 499], "preserv": [180, 444], "step": [180, 190, 191, 192, 193, 197, 198, 202, 208, 209, 320, 322, 324, 405, 427, 428, 448, 449, 450, 451, 462, 477, 480, 482, 485, 486, 488, 490, 491, 493, 494, 495, 497], "beta": 180, "blockmaskcriterion": 180, "9": [180, 208, 209, 422, 459, 462, 486, 488, 494, 497, 499, 500], "retrainfreecriterion": 180, "pickle_protocol": 181, "_use_new_zipfile_seri": 181, "prepare_prun": [181, 486], "loss_func": [181, 200], "assertionerror": [181, 187, 194, 204, 320, 321, 322, 351], "cuurent": [181, 194, 322], "auto": [182, 184, 208, 209, 327, 342, 386, 392, 416, 422, 444, 465, 468, 470, 472, 473, 486, 489, 491], "slim": [182, 183, 184, 293, 346, 357, 359, 464, 486], "round_multipli": 182, "spars": [182, 196, 322, 446, 487], "automat": [182, 184, 185, 208, 209, 226, 229, 236, 237, 269, 272, 279, 288, 298, 325, 422, 425, 443, 446, 458, 462, 463, 465, 467, 470, 471, 473, 475, 476, 477, 479, 480, 482, 485, 486, 489, 494, 496, 497], "model_slim_ffn2": 182, "some": [182, 184, 208, 209, 224, 267, 321, 427, 428, 446, 448, 453, 459, 461, 462, 484, 486, 489, 490, 491, 494, 495, 497, 498, 500], "part": [182, 191, 320, 322, 422, 459, 463, 477, 480, 486, 494, 498], "perman": [182, 420, 486], "obtain": [182, 184, 193, 198, 201, 204, 321, 422, 427, 486, 493, 494, 497], "acceler": [182, 425, 449, 462, 465, 473, 482, 486, 487, 490, 491, 494, 497], "directli": [182, 208, 209, 223, 266, 293, 297, 321, 346, 350, 461, 462, 469, 486, 488, 489, 495], "sprase": 182, "multipl": [182, 208, 209, 210, 211, 215, 216, 224, 225, 227, 228, 229, 230, 231, 235, 238, 241, 248, 253, 254, 258, 259, 261, 267, 268, 270, 271, 272, 273, 274, 278, 280, 282, 298, 351, 352, 353, 355, 361, 443, 446, 453, 462, 485, 486, 493, 494, 497], "model_slim_mha": 182, "parse_auto_slim_config": 182, "ffn2_sparsiti": 182, "mha_spars": 182, "generate_ffn2_pruning_config": 182, "consecut": [182, 184, 185, 486], "generate_mha_pruning_config": 182, "head": [182, 184, 188, 195, 204, 486, 500], "get_attribut": 184, "level": [184, 389, 403, 412, 420, 494, 497], "descent": 184, "get_common_modul": 184, "layer1": [184, 208, 209, 462, 486, 489], "layer2": [184, 462, 486, 489], "nearest": [184, 241, 282, 491, 496], "print_iter": 184, "recipesearch": 184, "root": [184, 224, 225, 226, 229, 267, 268, 269, 272, 297, 350, 446, 451, 461, 462, 499], "levelwis": 184, "wai": [184, 225, 226, 229, 268, 269, 272, 423, 428, 445, 446, 448, 461, 462, 465, 468, 483, 485, 486, 489, 491, 494, 497, 499], "huggingfac": [184, 195, 224, 267, 411, 446, 452, 456, 470, 471, 472, 473, 494, 500], "bert": [184, 209, 220, 223, 224, 241, 263, 266, 267, 282, 425, 446, 449, 461, 463, 470, 486, 496, 500], "recipe_sampl": 184, "bertattent": 184, "dens": [184, 202, 208, 209, 324, 486, 500], "infom": [184, 244], "searching_result": 184, "jitbasicsearch": 184, "placeholder_shap": 184, "placeholder_dtyp": 184, "jit": [184, 208, 465, 467, 472, 494, 495], "script": [184, 290, 291, 294, 295, 343, 344, 347, 348, 451, 458, 465, 469, 472, 473, 476, 487], "static_graph": 184, "flatten_static_graph": 184, "target_lay": 184, "linear2linearsearch": 184, "target_op_lut": 184, "lookup": 184, "tabl": [184, 195, 416, 428, 448, 453, 500], "current_pattern": 184, "statu": [184, 413, 420, 445, 484, 486], "selfmhasearch": 184, "classifierheadsearch": 184, "classifi": [184, 204, 224, 267, 297, 350, 446, 449], "classifierheadsearchertf": 184, "squeezer": 185, "postcompressionutil": 185, "librari": [185, 245, 289, 342, 378, 418, 421, 425, 459, 462, 463, 467, 476, 482, 487, 489], "relat": [185, 201, 283, 293, 312, 317, 320, 346, 402, 408, 428, 465, 486, 499], "linearcompress": 185, "root_linear": 185, "target_linear": 185, "while": [185, 196, 204, 322, 329, 388, 426, 427, 446, 452, 458, 463, 465, 470, 482, 488, 489, 491, 494], "hidden": [185, 190, 320, 426], "layer_1": 185, "act_fn": 185, "layer_2": 185, "linearcompressioniter": 185, "linear_pattern": 185, "register_pattern": [186, 320], "basepattern": [186, 188, 190], "unit": [186, 320, 421, 486], "4x1": [186, 208, 209, 316, 462, 486, 500], "is_glob": [186, 320], "local": [186, 208, 209, 320, 416, 475, 479, 486, 493], "contrast": [186, 320, 496], "keep_mask_lay": 186, "invalid_lay": 186, "max_sparsity_ratio_per_op": [186, 191, 205, 208, 209, 462, 486], "sparsiti": [186, 188, 189, 191, 192, 193, 196, 198, 199, 202, 204, 208, 209, 322, 324, 416, 425, 446, 458, 462, 498, 500], "reach": [186, 202, 208, 209, 324, 421, 425, 445, 486, 497], "min_sparsity_ratio_per_op": [186, 205, 208, 209, 462, 486], "minimum": [186, 208, 209, 428, 444, 448, 462, 473, 486, 497], "target_spars": [186, 205, 208, 209, 462, 486, 488, 499], "pytorchbasepattern": [186, 201], "kerasbasepattern": 186, "get_pattern": [187, 320], "patternmha": 188, "doc": [188, 189, 208, 209, 320, 338, 339, 350, 384, 399, 400, 403, 416, 461, 462, 477, 480], "md": [188, 189, 208, 209, 320, 350, 384, 427, 444, 451, 489], "n": [188, 189, 208, 209, 225, 241, 268, 282, 291, 320, 344, 403, 428, 446, 448, 449, 486, 489, 491, 494, 496], "pytorchpatternninm": 189, "out": [189, 208, 209, 224, 225, 226, 267, 268, 269, 288, 320, 325, 421, 422, 425, 446, 465, 470, 475, 476, 477, 479, 480, 482, 486, 488, 489, 491], "pytorchpatternnxm": 190, "kept": [190, 320], "block_siz": [190, 320], "height": [190, 237, 241, 279, 282, 320, 451, 496, 499], "width": [190, 237, 241, 279, 282, 320, 444, 451, 486, 489, 496, 499], "vertic": [190, 241, 282, 320, 496], "keraspatternnxm": 190, "register_prun": [191, 200, 322], "baseprun": [191, 196, 198, 200], "current_sparsity_ratio": [191, 322], "global_step": [191, 322], "total": [191, 241, 282, 297, 322, 350, 446, 448, 486, 496, 500], "start_step": [191, 205, 208, 209, 322, 462, 486, 488], "end_step": [191, 205, 208, 209, 322, 462, 486, 488], "pruning_frequ": [191, 205, 208, 209, 462, 486], "target_sparsity_ratio": [191, 322], "show": [191, 416, 420, 449, 451, 462, 468, 483, 494, 497, 498], "pytorchbaseprun": [191, 199], "kerasbaseprun": 191, "pytorchbasicprun": 192, "arrang": [192, 193, 198, 199, 225, 226, 229, 268, 269, 272, 446, 486], "proce": [192, 193, 198, 199], "regul": [192, 193, 198, 199], "kerasbasicprun": 192, "pytorchblockmaskprun": 193, "grad": [193, 198], "parse_valid_pruner_typ": 194, "get_prun": [194, 322], "pythonmultiheadattentionprun": 195, "mha_modul": 195, "partial": [195, 486, 489], "qkv": 195, "feedward": 195, "simultan": [195, 465, 485, 488], "qkv_name": 195, "query_layer_nam": 195, "key_layer_nam": 195, "value_layer_nam": 195, "ffn_name": 195, "attention_ffn_nam": 195, "mha_nam": 195, "qkv_modul": 195, "ffn_modul": 195, "mha_compress": 195, "mhacompress": 195, "modifi": [195, 226, 269, 383, 402, 422, 428, 451, 455, 486, 499], "linear_lay": 195, "independ": [195, 378, 383, 428], "length": [195, 208, 209, 224, 241, 267, 282, 293, 346, 425, 446, 461, 487, 489, 496], "4x": [195, 423, 489], "subsequ": [195, 427, 465, 482], "head_mask": 195, "mha_head_s": 195, "similar": [195, 462, 488, 494, 497, 499], "mha_scor": 195, "lock": [196, 310, 311, 458, 485, 486], "pytorchpatternlockprun": 196, "parent": [196, 197, 202, 316, 322, 324, 495], "pytorchprogressiveprun": 197, "basicprun": [197, 200], "interpol": [197, 241, 282, 461, 486, 496], "fine": [197, 224, 267, 446, 468, 486, 487, 489], "grain": [197, 486, 487, 497], "improv": [197, 421, 444, 462, 465, 482, 483, 486, 487, 489, 490, 491, 497, 498, 500], "ad": [197, 224, 267, 290, 329, 343, 388, 427, 428, 448, 463, 465, 470, 473, 477, 480, 486, 495], "retrain": [198, 450, 486], "pytorchretrainfreeprun": 198, "pruner_class": [198, 199], "fast": [198, 208, 209, 425, 487], "retrainfreeprun": [198, 200], "effect": [198, 426, 487], "2204": 198, "09656": 198, "sparsegptprun": [199, 200], "most": [199, 208, 209, 297, 350, 448, 462, 463, 486, 489, 491, 494, 497, 500], "sparsegpt": [199, 200], "massiv": 199, "One": [199, 428, 446, 451, 458, 486, 487, 497], "2301": 199, "00774": 199, "opt": [200, 425, 470, 494, 497], "least": [200, 323, 462, 486, 497], "templat": [200, 323, 462, 486], "tree": [200, 323, 339, 400], "nlp": [200, 208, 209, 323, 470, 486, 489], "huggingface_model": [200, 323], "classif": [200, 224, 241, 267, 282, 297, 323, 350, 449, 453, 461, 471, 486, 487], "pytorch_prun": [200, 289, 342], "eager": [200, 323, 383, 451, 458, 489, 490, 495], "config_file_path": [200, 323], "pruner_info": [200, 323], "pruning_class": 200, "avil": 200, "regular": [201, 290, 321, 343], "register_reg": 201, "regulariz": 201, "get_reg_typ": 201, "get_reg": 201, "basereg": 201, "grouplasso": 201, "coeff": 201, "lasso": [201, 307, 458, 486], "select": [201, 204, 209, 224, 267, 422, 423, 444, 458, 459, 482, 486, 489, 491, 495, 497], "reg_term": 201, "coeffient": 201, "register_schedul": [202, 324], "get_schedul": [202, 324], "pruningschedul": 202, "gradual": [202, 324, 486], "oneshotschedul": [202, 324], "iterativeschedul": [202, 324], "get_tf_criterion": 203, "get_sparsity_ratio": 204, "elementwise_over_matmul_gemm_conv": 204, "elementwise_over_al": 204, "blockwise_over_matmul_gemm_conv": 204, "get_sparsity_ratio_tf": 204, "check_config": [204, 321], "prune_config": [204, 321], "everyth": [204, 321, 470], "reset_none_to_default": 204, "update_param": 204, "process_weight_config": 204, "global_config": [204, 306, 307, 309, 310, 311], "local_config": [204, 208, 209, 306, 307, 309, 310, 311], "default_config": 204, "pruners_info": 204, "process_yaml_config": 204, "check_key_valid": 204, "template_config": 204, "user_config": 204, "process_and_check_config": [204, 321], "process_config": [204, 321], "parse_last_linear": 204, "often": [204, 445, 449, 485, 486], "act": [204, 222, 265, 420], "might": [204, 422, 497], "caus": [204, 427, 445, 466, 486, 491], "drop": [204, 293, 321, 346, 462, 463, 476, 486, 491, 500], "parse_last_linear_tf": 204, "parse_to_prun": [204, 321], "parse_to_prune_tf": 204, "generate_pruner_config": 204, "dotdict": [204, 205, 209, 361, 416], "get_lay": 204, "collect_layer_input": 204, "layer_idx": 204, "layer_input": 204, "previou": [204, 427, 428, 462, 486, 492, 494, 495, 497, 498], "prunerv2": 205, "pruning_typ": [205, 208, 209, 462, 486], "pruning_scop": [205, 208, 209, 462, 486], "sparsity_decay_typ": [205, 208, 209, 462, 486], "pruning_op_typ": [205, 208, 209, 462, 486], "reg_typ": 205, "criterion_reduce_typ": 205, "resume_from_pruned_checkpoint": 205, "similiar": 205, "cfg_fname": 205, "parser": 205, "quantization_conf": 205, "pruning_conf": 205, "graph_optimization_conf": [205, 288], "mixedprecision_conf": 205, "benchmark_conf": 205, "nasconfig": [205, 209, 301, 303, 423], "approach": [205, 208, 209, 300, 301, 303, 422, 423, 444, 446, 449, 458, 462, 470, 482, 487, 488, 491, 497, 499], "search_algorithm": [205, 209, 289, 302, 342, 423], "na": [205, 209, 289, 342, 355, 458, 500], "procedur": [205, 423, 486], "defaultconf": 205, "instead": [205, 206, 209, 223, 266, 416, 468, 470, 473, 486], "notat": [205, 206, 209, 416], "deep_get": [206, 361], "dot": [206, 463, 489], "eg": [206, 226, 269, 446, 488], "person": [206, 420, 487], "john": 206, "deep": [206, 425, 426, 427, 445, 458, 459, 462, 463, 465, 467, 470, 471, 473, 476, 482, 487, 489, 497, 498, 500], "deep_set": [206, 361], "sex": [206, 420], "male": 206, "pythonic_config": 207, "random_se": [208, 209, 329, 388, 462, 499], "1978": [208, 209], "workspac": [208, 209, 415, 416, 464], "default_workspac": [208, 209], "resume_from": [208, 209, 416], "tensorboard": [208, 209, 408, 416, 426, 462], "set_random_se": [208, 209, 416], "set_workspac": [208, 209, 416], "set_resume_from": [208, 209, 416], "set_tensorboard": [208, 209, 416], "directori": [208, 209, 225, 226, 268, 269, 359, 411, 413, 415, 416, 446, 451, 454, 475, 477, 479, 480, 495], "histori": [208, 209, 415, 416, 482, 497], "nc_workspac": [208, 209], "datetim": [208, 209], "now": [208, 209, 241, 282, 422, 423, 428, 446, 451, 473, 488, 496, 497], "strftime": [208, 209], "d_": [208, 209], "resum": [208, 209, 212, 213, 255, 256, 327, 335, 385, 386, 388, 389, 391, 393, 396], "flag": [208, 209, 291, 344, 448], "visual": [208, 209, 425, 473, 482, 493, 495, 497, 498], "displai": [208, 209, 338, 339, 399, 400, 416, 482], "2022": [208, 209, 425, 460, 491, 494, 500], "workspace_path": [208, 209], "accuracycriterion": [208, 209, 462, 497], "rel": [208, 209, 361, 462, 488, 497, 499, 500], "tolerable_loss": [208, 209, 462, 497], "higher": [208, 209, 212, 213, 255, 256, 304, 351, 384, 405, 422, 448, 449, 453, 461, 486, 489, 493], "accept": [208, 209, 403, 420, 443, 445], "accuracy_criterion": [208, 209, 361, 462, 484, 488, 497, 499], "avail": [208, 209, 355, 429, 431, 435, 438, 441, 452, 454, 456, 458, 475, 479, 486, 497, 500], "warmup": [208, 209, 443, 462, 488], "inter_num_of_thread": [208, 209, 378, 383, 462, 488], "intra_num_of_thread": [208, 209, 378, 383, 462, 488], "benchmark": [208, 209, 244, 289, 326, 342, 361, 416, 425, 433, 464, 465, 469, 473, 476, 482, 497, 498, 499, 500], "onnxrt_trt_ep": [208, 209, 463, 489], "onnxrt_cuda_ep": [208, 209, 463, 489], "inter": [208, 209, 222, 226, 265, 269], "intra": [208, 209], "quantizationconfig": 208, "post_training_static_qu": [208, 446, 462, 488, 497], "calibration_sampling_s": [208, 209, 462], "op_type_dict": [208, 209, 428, 488, 489, 491, 497], "op_name_dict": [208, 209, 448, 462, 489, 497], "strategy_kwarg": [208, 209, 493, 497], "timeout": [208, 209, 462, 488, 497, 499], "max_trial": [208, 209, 462, 497], "quant_level": [208, 209, 497], "posttrainingquantconfig": [208, 209, 384, 422, 425, 428, 445, 448, 453, 456, 461, 462, 464, 489, 490, 491, 493, 494, 497], "quantizationawaretrainingconfig": [208, 209, 405, 422, 450, 453, 462, 489, 490, 497], "cv": [208, 209, 486], "object_detect": [208, 209, 293, 346], "recommendation_system": [208, 209], "explicitli": [208, 209, 457, 486], "overrid": [208, 209, 416], "quantiztaion": [208, 209], "smooth_quant_arg": [208, 209, 489, 494], "gemm_to_matmul": [208, 209, 489], "graph_optimization_level": [208, 209, 488, 489], "disable_al": [208, 209, 488], "enable_bas": [208, 209], "enable_extend": [208, 209], "enable_al": [208, 209], "first_conv_or_matmul_quant": [208, 209, 489], "last_conv_or_matmul_quant": [208, 209, 489], "pre_post_process_quant": [208, 209, 489], "preprocess": [208, 209, 224, 241, 267, 282, 402, 408, 451, 496], "postprocess": [208, 209, 235, 238, 241, 245, 282, 289, 342, 350, 384, 408, 426, 462, 495, 496], "vaild": [208, 209], "dedic": [208, 209], "quant_format": [208, 209, 287, 453], "constraint": [208, 209, 288, 325, 462, 486, 493, 497, 499], "conv1": [208, 209, 489, 499], "tuning_strategi": [208, 209], "guarante": [208, 209, 462], "models": [208, 209, 361, 462, 484, 488], "footprint": [208, 209, 288, 312, 317, 325, 361, 450, 462, 484, 486, 488], "earli": [208, 209, 462, 489, 497, 499], "stop": [208, 209, 462, 497, 498, 499], "field": [208, 209, 226, 269, 293, 346, 422, 426, 428, 451, 462, 493, 497, 499], "exit": [208, 209, 328, 385, 387, 462, 499], "excluded_precis": [208, 209, 490], "exclud": [208, 209, 426, 444, 490], "conserv": [208, 209, 342, 392], "use_distributed_tun": 208, "weightpruningconfig": [208, 209, 462, 485, 486], "pruning_config": [208, 209, 462], "98": [208, 209, 462, 486, 488, 500], "exp": [208, 209, 462, 486], "link": [208, 209, 224, 267, 350, 384, 444, 446, 453, 475, 479, 482, 500], "90": [208, 209, 499, 500], "magnitude_progress": [208, 209], "snip_progress": [208, 209], "snip_momentum_progress": [208, 209], "feasibl": [208, 209], "situat": [208, 209, 451, 486], "unstructur": [208, 209, 316, 458, 486, 500], "8x1": [208, 209], "channelx1": [208, 209, 486], "1xchannel": [208, 209, 486], "itrex": [208, 209], "start": [208, 209, 241, 282, 293, 346, 389, 459, 487, 496, 497, 498, 501], "togeth": [208, 209, 241, 282, 449, 459, 469, 487, 495, 496], "sort": [208, 209, 332, 393, 448, 497], "sinc": [208, 209, 288, 290, 312, 317, 325, 343, 449, 453, 459, 461, 476, 482, 485, 491, 492], "lead": [208, 209, 449, 462, 463, 486, 491, 494], "increas": [208, 209, 447, 458, 465, 482, 497], "cube": [208, 209, 486], "6": [208, 209, 425, 455, 489, 494, 497, 500], "update_config": [208, 209], "knowledgedistillationlossconfig": [208, 209, 449, 450, 462, 485], "hyperparamet": [208, 209, 338, 493, 494, 497], "entropi": [208, 209, 444, 497], "groundtruth": [208, 209, 293, 346], "label": [208, 209, 212, 213, 224, 226, 227, 228, 229, 232, 237, 241, 246, 255, 256, 267, 269, 270, 271, 272, 275, 279, 282, 290, 292, 297, 343, 345, 350, 351, 384, 405, 422, 445, 446, 448, 461, 462, 489, 496], "tpye": [208, 209], "sum": [208, 209, 297, 350, 448, 449], "distillationconfig": [208, 209, 405, 449, 450, 462, 485], "prepare_compress": [208, 209, 405, 422, 449, 450, 462, 485, 486, 489], "criterion_conf": [208, 209], "d_conf": [208, 209, 450, 462, 485], "compression_manag": [208, 209, 405, 422, 449, 450, 462, 485, 486, 489], "sgd": [208, 209, 248, 449, 462, 488, 499], "featur": [208, 209, 224, 225, 237, 241, 267, 268, 279, 282, 421, 425, 443, 445, 447, 449, 462, 463, 464, 465, 469, 470, 473, 482, 486, 487, 492, 496], "distil_loss": [208, 209, 462], "crossentropyloss": [208, 209, 243, 449, 462], "lr": [208, 209, 449, 451, 462], "onnxrt_dnnl_ep": [209, 463, 489], "tuningcriterion": [209, 462, 484, 493, 497], "tuning_criterion": [209, 462, 484, 493, 497], "ptq": [209, 384, 422, 448, 451, 458, 462, 489, 494, 495, 497], "tri": [209, 497], "meet": [209, 215, 326, 328, 385, 387, 422, 427, 484, 487, 488, 489, 491, 495, 497], "mse_v2": [209, 289, 331, 342, 392], "hawq_v2": [209, 342, 392], "docstr": [209, 403], "copi": [209, 321, 416, 445], "deepcopi": 209, "model_origin": [209, 384, 490], "qat_op_name_dict": 209, "low_memory_usag": 209, "hpoconfig": 209, "xgb": 209, "bo": 209, "intermediatelayersknowledgedistillationlossconfig": [209, 449], "relationship": 209, "student_layer_nam": 209, "student_layer_output_process": 209, "teacher_layer_nam": 209, "teacher_layer_output_process": 209, "desir": [209, 237, 241, 279, 282, 427, 428, 496], "serv": [209, 359], "numer": [209, 297, 350, 428, 463, 487, 489], "abbrevi": 209, "layer_nam": 209, "l1": 209, "selfknowledgedistillationlossconfig": [209, 449, 462], "student1_layer_name1": 209, "teacher_layer_name1": 209, "student2_layer_name1": 209, "student1_layer_name2": 209, "teacher_layer_name2": 209, "student2_layer_name2": 209, "soft": 209, "l2": [209, 486], "hard": [209, 445, 448], "resblock": 209, "deepst": 209, "02": [209, 494, 500], "mixedprecisionconfig": [209, 351, 403, 462, 463], "mixedprecis": [209, 298, 462], "fp16": [209, 339, 400, 489], "won": [209, 489], "work": [209, 288, 325, 424, 427, 445, 449, 477, 480, 490, 491, 492, 494, 495], "mix_precis": [209, 342, 403, 462, 463], "converted_model": [209, 351, 462, 463], "exportconfig": 209, "14": [209, 286, 287, 453, 459, 494, 500], "dynamic_ax": [209, 287, 453], "qlinear": [209, 226, 233, 269, 276, 297, 350, 426, 472], "ax": [209, 287], "onnxqlinear2qdqconfig": 209, "onnxqlinear2qdq": 209, "torch2onnxconfig": [209, 453], "torch2onnx": [209, 284, 289, 342], "qdq_op_fp32_bia": 209, "qdq_op_int32_bia": 209, "qdq_op_fp32_bias_qdq": 209, "resnet50": [209, 425, 448, 451, 453, 463, 465, 469, 486, 489, 493, 500], "int8_onnx_config": [209, 453], "randn": [209, 453], "224": [209, 237, 279, 425, 446, 451, 453, 456, 462, 465, 496, 499], "batch_siz": [209, 214, 216, 219, 222, 223, 224, 225, 244, 257, 259, 262, 265, 266, 267, 268, 287, 423, 445, 446, 451, 453, 457, 462, 465, 489], "tf2onnxconfig": [209, 453], "tf2onnx": [209, 284, 289, 342], "output_graph": 209, "dyna": [209, 289, 302, 342, 423, 458, 488], "sigopt": [210, 211, 253, 254, 289, 342, 487], "tpe": [210, 211, 253, 254, 289, 342], "sigopttunestrategi": [212, 255], "q_dataload": [212, 213, 255, 256, 327, 329, 332, 335, 385, 386, 388, 389, 391, 393, 396, 457, 497], "eval_func": [212, 213, 255, 256, 326, 327, 329, 332, 335, 351, 384, 385, 386, 388, 389, 391, 393, 396, 403, 405, 422, 445, 446, 448, 449, 450, 451, 462, 489, 490, 491, 497, 499], "eval_metr": [212, 213, 351, 384, 385, 386, 388, 389, 391, 393, 396, 405, 461, 489], "q_hook": [212, 213, 255, 256, 327, 329, 332, 335, 385, 386, 388, 389, 391, 393, 396], "mandatori": [212, 213, 255, 256, 384, 462, 499], "yield": [212, 213, 222, 244, 255, 256, 265, 329, 351, 384, 388, 403, 405, 445, 489, 497], "_": [212, 213, 255, 256, 384, 422, 423, 426, 427, 444, 445, 448, 449, 451, 453, 455, 462, 463, 464, 465, 471, 475, 477, 479, 480, 484, 486, 489, 491, 492, 493, 494, 495, 497, 499], "well": [212, 213, 255, 256, 351, 384, 405, 423, 425, 446, 486, 489, 492, 494, 499], "taken": [212, 213, 255, 256, 351, 384, 405, 489], "reserv": [212, 213, 255, 256], "abl": [212, 213, 255, 256, 351, 384, 405, 473, 482, 489], "tuner": [212, 213, 255, 256, 288, 325, 351, 384, 405, 489], "scalar": [212, 213, 255, 256, 351, 384, 405, 461, 489], "pseudo": [212, 213, 255, 256, 384, 405, 495], "someth": [212, 213, 226, 255, 256, 269, 384, 405], "fefin": [213, 256], "tpetunestrategi": [213, 256], "basedatalod": [214, 257], "basedataload": [214, 219, 221, 257, 262, 264], "last_batch": [214, 216, 219, 223, 244, 257, 259, 262, 266], "rollov": [214, 216, 219, 223, 244, 257, 259, 262, 266, 445], "collate_fn": [214, 216, 217, 219, 223, 244, 257, 259, 260, 262, 266, 446], "sampler": [214, 216, 218, 219, 223, 244, 257, 259, 261, 262, 266, 278, 289, 338, 399, 445, 451], "batch_sampl": [214, 216, 219, 223, 244, 257, 259, 262, 266], "num_work": [214, 216, 219, 223, 244, 257, 259, 262, 266, 462, 489], "pin_memori": [214, 216, 219, 223, 244, 257, 259, 262, 266], "shuffl": [214, 216, 219, 223, 244, 257, 259, 262, 266, 445, 462, 489], "_generate_dataload": [214, 257], "check_dataload": 215, "default_col": [216, 259], "outer": [216, 259], "defaultdataload": [216, 223, 259, 266], "definit": [217, 222, 260, 265], "style": [217, 231, 260, 274, 403, 421, 446, 457], "drop_last": [217, 222, 260, 265], "iterablefetch": [217, 260], "indexfetch": [217, 260], "base_dataload": [218, 261, 278, 289], "default_dataload": [218, 261, 278, 289], "fetcher": [218, 261, 278, 289], "mxnet_dataload": [218, 261, 278, 289], "onnxrt_dataload": [218, 261, 278, 289, 377], "pytorch_dataload": [218, 261, 278, 289], "tensorflow_dataload": [218, 261, 278, 289, 382], "mxnetdataload": [219, 262], "onnxrtbertdataload": [220, 263], "varient": [220, 263], "onnxrtdataload": [220, 263, 377], "pytorchdataload": [221, 264], "data_sourc": [222, 265, 408], "__iter__": [222, 226, 265, 269, 445, 446, 462], "matter": [222, 265, 490], "iterablesampl": [222, 265], "squential": [222, 265], "your": [222, 224, 265, 267, 421, 445, 446, 448, 451, 460, 462, 465, 468, 469, 470, 475, 476, 477, 479, 480, 482, 486, 487, 493, 495, 497, 498], "clear": [222, 265, 426, 455, 461, 462], "iterabledataset": [222, 226, 265, 269], "try": [222, 265, 422, 448, 486, 489, 494, 497], "indexdataset": [222, 265], "__getitem__": [222, 226, 241, 265, 269, 282, 446, 462], "__len__": [222, 226, 265, 269, 446], "retriev": [222, 265], "sequentialsampl": [222, 265], "sequenti": [222, 265, 326, 328, 385, 387, 497], "batchsampl": [222, 265], "tfdatadataload": [223, 266], "tensorflow1": [223, 266], "coupl": [223, 266], "satisfi": [223, 266, 448, 459], "usag": [223, 266, 293, 299, 326, 346, 403, 427, 446, 451, 452, 465, 473, 484, 488, 496], "tf1": [223, 266, 464], "although": [223, 266, 493], "tensorflowbertdataload": [223, 266], "tensorflowmodelzoobertdataload": [223, 266], "zoo": [223, 241, 266, 282, 425, 452, 456, 500], "tensorflowdataload": [223, 266, 382], "pytorchbertdataset": [224, 267], "model_typ": [224, 267, 416, 446], "tensordataset": [224, 267, 446], "repo": [224, 267, 419, 446, 452, 475, 477, 479, 480, 501], "easi": [224, 267, 325, 453, 462, 487, 489, 493], "squad": [224, 241, 267, 282, 294, 295, 297, 347, 348, 350, 446, 461, 486, 496, 500], "distilbert": [224, 267, 425, 446, 463, 487, 500], "xlnet": [224, 267, 446, 500], "xlm": [224, 267, 446, 500], "101": [224, 267, 297, 350, 461, 494, 500], "2043": [224, 267], "2001": [224, 267], "onnxrtbertdataset": [224, 267], "data_dir": [224, 267, 446], "model_name_or_path": [224, 267, 446, 462, 470, 471], "max_seq_length": [224, 241, 267, 282, 446, 496], "do_lower_cas": [224, 240, 241, 267, 281, 282, 446, 496], "mrpc": [224, 267, 297, 350, 446, 461, 470, 486, 497, 500], "dynamic_length": [224, 267, 446], "shortcut": [224, 267, 446], "token": [224, 235, 238, 241, 267, 278, 280, 282, 289, 290, 291, 342, 343, 344, 411, 446, 461, 462, 491, 493, 494, 496, 497], "longer": [224, 241, 267, 282, 446, 496], "truncat": [224, 241, 267, 282, 446, 496], "shorter": [224, 241, 267, 282, 446, 496], "lowercas": [224, 267, 446], "choic": [224, 267, 426, 446, 461, 494], "qqp": [224, 267, 446, 461, 500], "qnli": [224, 267, 446, 461, 500], "rte": [224, 267, 446, 461, 500], "st": [224, 267, 446, 461], "cola": [224, 267, 446, 461, 500], "mnli": [224, 267, 446, 461, 500], "wnli": [224, 267, 446, 461], "mobilebert": [224, 267, 446, 449, 500], "roberta": [224, 267, 446, 500], "uncas": [224, 241, 267, 282, 446, 496, 500], "load_and_cache_exampl": [224, 267], "cach": [224, 267, 454, 489, 491], "convert_examples_to_featur": [224, 241, 267, 282], "max_length": [224, 267], "label_list": [224, 267, 297, 350], "output_mod": [224, 267], "pad_token": [224, 267], "pad_token_segment_id": [224, 267], "mask_padding_with_zero": [224, 267], "inputfeatur": [224, 241, 267, 282], "properti": [224, 267, 402, 460], "input_id": [224, 241, 267, 282, 462], "vocabulari": [224, 240, 241, 267, 281, 282, 496], "attention_mask": [224, 267, 462], "usual": [224, 267, 427, 448, 449, 485, 486, 489, 494], "NOT": [224, 267, 455], "token_type_id": [224, 267, 462], "segment": [224, 267, 291, 293, 344, 346], "portion": [224, 267], "regress": [224, 267, 448], "seq_length": [224, 267], "tensorflowbertdataset": [224, 267], "label_fil": [224, 241, 267, 282, 446, 496], "tfrecord": [224, 225, 226, 267, 268, 269, 446], "guid": [224, 267, 422, 425, 446, 449, 459, 465, 473, 482, 501], "parsedecodebert": [224, 267], "tensorflowmodelzoobertdataset": [224, 225, 267, 268], "num_cor": [224, 225, 229, 267, 268, 272, 446], "28": [224, 225, 229, 267, 268, 272, 446, 500], "coco": [225, 232, 236, 268, 275, 293, 297, 346, 350, 461, 486], "parsedecodecoco": [225, 268], "cocorecorddataset": [225, 268], "interleav": [225, 268, 446], "parallel": [225, 268, 378, 383, 446, 462, 497], "cocoraw": [225, 268, 446], "img_dir": [225, 268, 446], "val2017": [225, 268, 446], "anno_dir": [225, 268, 446], "annot": [225, 268, 293, 346, 403, 427, 428, 446, 461, 486, 497], "instances_val2017": [225, 268, 446], "jpg": [225, 229, 231, 268, 272, 274, 446], "imag": [225, 226, 229, 231, 237, 241, 268, 269, 272, 274, 279, 282, 293, 346, 446, 451, 453, 486, 488, 494, 495, 496, 500], "coconpi": [225, 268, 446], "npy_dir": [225, 268, 446], "npy": [225, 268, 446], "tensorflowdataset": [226, 269], "pytorchdataset": [226, 269], "mxnetdataset": [226, 269], "onnxrtqldataset": [226, 269], "onnxrtitdataset": [226, 269], "IT": [226, 233, 269, 276, 487], "pytorchmxnetwrapdataset": [226, 269], "datafunc": [226, 269], "pytorchmxnetwrapfunct": [226, 241, 269, 282], "framework_dataset": [226, 269], "convent": [226, 269, 293, 346, 449], "imageclassifi": [226, 269], "tensorflow_itex": [226, 229, 231, 233, 269, 272, 274, 276, 445, 488], "onnxrt_qdq": [226, 233, 269, 276, 488], "onnxrt_qlinearop": [226, 233, 241, 269, 276, 282, 488], "onnxrt_integerop": [226, 233, 241, 269, 276, 282, 488], "pytorch_ipex": [226, 233, 269, 276, 462, 488, 499], "pytorch_fx": [226, 233, 269, 276, 462, 488], "dataset_registri": [226, 269], "dataset_typ": [226, 269], "dataset_format": [226, 269], "data_format": [226, 237, 269, 279], "raw_imag": [226, 269], "overwrit": [226, 269, 475, 479], "download_url": [226, 269], "filenam": [226, 269, 416, 446], "md5": [226, 269], "address": [226, 269, 420, 463, 487], "gen_bar_updat": [226, 269], "bar": [226, 269, 482, 487], "check_integr": [226, 269], "fpath": [226, 269], "checksum": [226, 269], "calculate_md5": [226, 269], "chunk_siz": [226, 269], "cifar10": [226, 269, 446], "cifar100": [226, 269, 446], "databas": [226, 269], "www": [226, 269, 446, 500], "toronto": [226, 269, 446], "kriz": [226, 269, 446], "cifar": [226, 269, 446, 500], "tar": [226, 269, 446, 448, 477, 480], "gz": [226, 269, 446, 448, 477, 480], "manual": [226, 269, 446, 465, 471, 473, 476], "subset": [226, 229, 269, 272, 446], "internet": [226, 269, 446], "again": [226, 269, 446, 490], "pytorchcifar10": [226, 269], "mxnetcifar10": [226, 269], "tensorflowcifar10": [226, 269], "pytorchcifar100": [226, 269], "mxnetcifar100": [226, 269], "tensorflowcifar100": [226, 269], "mnist": [226, 269, 446, 451], "nation": [226, 269, 420], "institut": [226, 269], "standard": [226, 241, 269, 282, 427, 448, 453, 461, 496, 497], "technologi": [226, 269, 462], "fashionmnist": [226, 269, 446], "npz": [226, 269, 446], "idx1": [226, 269, 446], "ubyt": [226, 269, 446], "idx3": [226, 269, 446], "t10k": [226, 269, 446], "pytorchmnist": [226, 269], "mxnetmnist": [226, 269], "tensorflowmnist": [226, 269], "pytorchfashionmnist": [226, 269], "mxnetfashionmnist": [226, 269], "tensorflowfashionmnist": [226, 269], "imagefold": [226, 269, 446, 451, 462], "expect": [226, 269, 420, 421, 454, 482, 489, 491, 497], "subfold": [226, 269], "belong": [226, 269, 355, 489], "class_1": [226, 269, 446], "xxx": [226, 269, 421, 446, 462], "png": [226, 269, 446], "xxy": [226, 269, 446], "xxz": [226, 269, 446], "class_n": [226, 269, 446], "123": [226, 269, 446, 496], "nsdf3": [226, 269, 446], "asd932_": [226, 269, 446], "categori": [226, 269, 292, 345, 443, 446, 472], "mxnetimagefold": [226, 269], "tensorflowtfrecorddataset": [226, 269], "tensorflowimagerecord": [226, 269], "imagenet": [226, 229, 237, 269, 272, 279, 423, 448, 462, 471, 486, 495, 496, 499, 500], "000": [226, 269, 425, 446], "099": [226, 269, 446], "tensorflowvocrecord": [226, 269], "pascal": [226, 269], "voc": [226, 269, 297, 350], "2012": [226, 269], "00000": [226, 269], "00004": [226, 269], "00001": [226, 269], "00003": [226, 269], "dummydataset": [227, 228, 270, 271], "127": [227, 228, 270, 271, 446, 489, 494], "float32": [227, 228, 241, 270, 271, 282, 293, 346, 426, 443, 446, 462, 489, 491, 494, 496], "stand_norm": [227, 228, 270, 271, 446], "dummy_v2": [228, 271, 446], "sparse_dummy_v2": [228, 271, 446], "label_shap": [228, 271, 446], "sparsedummydataset": [228, 271], "dense_shap": [228, 271, 446], "sparse_ratio": [228, 271, 446], "imagenetraw": [229, 272, 446], "data_path": [229, 272, 446], "image_list": [229, 272, 446], "img1": [229, 272, 446], "img2": [229, 272, 446], "imgx": [229, 272, 446], "val_map": [229, 272, 446], "txt": [229, 272, 446, 448, 459], "pytorchimagenetraw": [229, 272], "mxnetimagenetraw": [229, 272], "tensorflowimagenetraw": [229, 272], "inteltensorflow": [229, 231, 272, 274, 459], "tensorflowimagenetdataset": [229, 272], "onnxrtimagenetdataset": [229, 272], "bert_dataset": [230, 235, 273, 278, 289, 342], "coco_dataset": [230, 235, 273, 278, 289, 342], "dummy_dataset": [230, 235, 273, 278, 289, 342], "dummy_dataset_v2": [230, 235, 273, 278, 289, 342], "imagenet_dataset": [230, 235, 273, 278, 289, 342], "style_transfer_dataset": [230, 235, 273, 278, 289, 342], "styletransferdataset": [231, 274], "content_fold": [231, 274, 446], "style_fold": [231, 274, 446], "crop_ratio": [231, 274, 446], "resize_shap": [231, 274, 446], "256": [231, 237, 274, 279, 446, 451, 462, 496], "image_format": [231, 274, 446], "holder": [231, 274, 446], "labelbalancecocorecordfilt": [232, 275], "balanc": [232, 275, 491, 494], "labelbalancecocorawfilt": [232, 275], "tensorflowfilt": [233, 276], "onnxrtqlfilt": [233, 276], "onnxrtitfilt": [233, 276], "pytorchfilt": [233, 276], "mxnetfilt": [233, 276], "filter_registri": [233, 276], "filter_typ": [233, 276], "__call__": [233, 276], "coco_filt": [234, 235, 277, 278, 289, 342], "imagenet_transform": [235, 238, 278, 280, 289, 342], "parsedecodecocotransform": 236, "quantizedinput": [237, 279, 496], "labelshift": [237, 279, 496], "label_shift": [237, 279, 496], "parsedecodeimagenet": [237, 279, 496], "proto": [237, 241, 279, 282, 496], "parsedecodeimagenettransform": [237, 279], "tensorflowtransposelastchannel": 237, "tensorflowshiftrescal": 237, "rescal": [237, 241, 282, 496], "tensorflowresizecropimagenettransform": [237, 279], "random_crop": [237, 279, 496], "resize_sid": [237, 279, 496], "resize_method": [237, 279], "bilinear": [237, 241, 279, 282, 496], "random_flip_left_right": [237, 279, 496], "mean_valu": [237, 279, 496], "channels_last": [237, 279, 465], "subpixel": [237, 279], "rgb": [237, 279], "seri": [237, 279, 425, 459, 462, 496], "applic": [237, 279, 428, 453, 465, 482, 487, 491, 494, 495, 496, 498], "crop": [237, 241, 279, 282, 446, 496], "flip": [237, 241, 279, 282, 496], "left": [237, 241, 279, 282, 476, 482, 494, 496], "std": [237, 241, 279, 282, 462, 496], "bilinearimagenettransform": [237, 279], "central_fract": [237, 279, 496], "875": [237, 279, 496], "fraction": [237, 279, 496], "onnxbilinearimagenettransform": [237, 279], "onnxresizecropimagenettransform": [237, 279], "std_valu": [237, 279], "229": [237, 279, 462], "225": [237, 279, 462], "resizewithaspectratio": [237, 279], "87": [237, 279, 500], "inter_pol": [237, 279], "cv2": [237, 279], "inter_area": [237, 279], "aspect": [237, 241, 279, 282, 496], "postprocess_cl": [239, 249, 462], "user_postprocess": [239, 249], "convert_to_unicod": [240, 281], "unicod": [240, 281], "assum": [240, 281, 293, 304, 346, 426, 455, 482], "load_vocab": [240, 281], "vocab_fil": [240, 241, 281, 282, 496], "convert_by_vocab": [240, 281], "vocab": [240, 281], "whitespace_token": [240, 281], "whitespac": [240, 281, 295, 348], "clean": [240, 281, 421, 462], "piec": [240, 281, 290, 343, 461, 491], "fulltoken": [240, 281], "tokenzi": [240, 281], "basictoken": [240, 281], "punctuat": [240, 281, 290, 295, 343, 348], "lower": [240, 241, 281, 282, 295, 348, 389, 450, 486, 487, 489, 494, 496, 497], "wordpiecetoken": [240, 281], "unk_token": [240, 281], "unk": [240, 281], "max_input_chars_per_word": [240, 281], "200": [240, 281, 422, 497], "wordpiec": [240, 241, 281, 282, 496], "concat_gener": [241, 282], "inc": [241, 282, 420, 425, 427, 465, 472, 482, 487, 488, 492, 497], "tensorflowtransform": [241, 282], "mxnettransform": [241, 282], "pytorchtransform": [241, 282], "onnxrtqltransform": [241, 282], "onnxrtittransform": [241, 282], "transform_registri": [241, 282], "transform_typ": [241, 282], "basetransform": [241, 282], "tensorflowwrapfunct": [241, 282], "transform_func": [241, 282], "pytorchmxnettransform": [241, 282], "get_torchvision_map": [241, 282], "torchvis": [241, 282, 452, 456, 465, 471], "composetransform": [241, 282], "transform_list": [241, 282, 496], "compos": [241, 282, 408, 496], "croptoboundingbox": [241, 282, 496], "offset_height": [241, 282, 496], "offset_width": [241, 282, 496], "target_height": [241, 282, 496], "target_width": [241, 282, 496], "box": [241, 282, 293, 297, 346, 350, 422, 461, 465, 476, 482, 495, 496, 497], "coordin": [241, 282, 329, 388, 496, 497], "top": [241, 282, 288, 297, 312, 317, 325, 350, 461, 482, 496], "corner": [241, 282, 426, 428, 496], "horizont": [241, 282, 496], "mxnetcroptoboundingbox": [241, 282], "onnxrtcroptoboundingbox": [241, 282], "tensorflowcroptoboundingbox": [241, 282], "resizewithratio": [241, 282, 496], "min_dim": [241, 282, 496], "800": [241, 282, 496], "max_dim": [241, 282, 496], "1365": [241, 282, 496], "constant_valu": [241, 282], "longest": [241, 282, 496], "side": [241, 282, 446, 476, 496], "exce": [241, 282, 496], "tensorflowresizewithratio": [241, 282], "permut": [241, 282, 496], "tensorflowtranspos": [241, 282], "mxnettranspos": [241, 282], "pytorchtranspos": [241, 282], "randomverticalflip": [241, 282, 496], "tensorflowrandomverticalflip": [241, 282], "randomhorizontalflip": [241, 282, 462, 496], "tensorflowrandomhorizontalflip": [241, 282], "toarrai": [241, 282, 496], "pil": [241, 282, 496], "casttftransform": [241, 282], "castonnxtransform": [241, 282], "castpytorchtransform": [241, 282], "centercroptftransform": [241, 282], "center": [241, 282, 424, 425, 459, 496, 497], "paddedcentercroptransform": [241, 282], "crop_pad": [241, 282], "resizetftransform": [241, 282], "bicub": [241, 282, 496], "resizepytorchtransform": [241, 282], "randomcroptftransform": [241, 282], "randomresizedcroppytorchtransform": [241, 282], "08": [241, 282, 496, 500], "randomresizedcropmxnettransform": [241, 282], "randomresizedcroptftransform": [241, 282], "normalizetftransform": [241, 282], "deviat": [241, 282, 448, 496], "broadcast": [241, 282, 451, 496], "rescalekeraspretraintransform": [241, 282], "rescaletftransform": [241, 282], "rescaletransform": [241, 282], "alignimagechanneltransform": [241, 282], "dim": [241, 282, 491, 494, 496], "align": [241, 282, 420, 496], "must": [241, 282, 293, 346, 421, 422, 427, 443, 445, 459, 489, 496], "pytorchalignimagechannel": [241, 282], "tondarraytransform": [241, 282], "resizemxnettransform": [241, 282], "resizetransform": [241, 282], "cropresizetftransform": [241, 282], "boundari": [241, 282, 496], "area": [241, 282, 293, 346, 461, 496], "pytorchcropresizetransform": [241, 282], "mxnetcropresizetransform": [241, 282], "cropresizetransform": [241, 282], "centercroptransform": [241, 282], "mxnetnormalizetransform": [241, 282], "pytorchnormalizetransform": [241, 282], "normalizetransform": [241, 282], "randomcroptransform": [241, 282], "randomresizedcroptransform": [241, 282], "get_final_text": [241, 282], "pred_text": [241, 282], "orig_text": [241, 282], "project": [241, 282, 419, 420, 421, 487, 493, 497, 501], "squadexampl": [241, 282], "qas_id": [241, 282], "question_text": [241, 282], "doc_token": [241, 282], "orig_answer_text": [241, 282], "start_posit": [241, 282], "end_posit": [241, 282], "is_imposs": [241, 282], "simpl": [241, 282, 459, 462, 493, 494, 497], "answer": [241, 282, 294, 295, 347, 348, 420, 486, 496, 500], "posit": [241, 282, 420, 461, 465], "unique_id": [241, 282], "example_index": [241, 282], "doc_span_index": [241, 282], "token_to_orig_map": [241, 282], "token_is_max_context": [241, 282], "input_mask": [241, 282, 462], "segment_id": [241, 282, 462], "read_squad_exampl": [241, 282], "input_fil": [241, 282], "doc_strid": [241, 282, 496], "max_query_length": [241, 282, 496], "output_fn": [241, 282], "inputbatch": [241, 282], "collecttransform": [241, 282], "10833": [241, 282], "tfsquadv1posttransform": [241, 282], "n_best_siz": [241, 282, 496], "384": [241, 282, 496], "64": [241, 282, 423, 491, 494, 496, 500], "max_answer_length": [241, 282, 496], "30": [241, 282, 452, 456, 458, 494, 496, 500], "nbest_predict": [241, 282, 496], "question": [241, 282, 294, 295, 347, 348, 420, 421, 426, 459, 465, 486, 494, 496, 500], "anoth": [241, 282, 290, 299, 343, 416, 448, 449, 475, 479, 496, 497], "long": [241, 282, 454, 491, 496], "document": [241, 282, 403, 421, 427, 428, 433, 451, 463, 467, 477, 480, 481, 486, 492, 496, 498], "chunk": [241, 282, 496], "tfmodelzoocollecttransform": [241, 282], "tfsquadv1modelzooposttransform": [241, 282], "squadv1": [241, 282, 496], "parsedecodevoctransform": [241, 282], "conf_fname_or_obj": [242, 251, 283, 288, 298, 299, 300, 301, 303, 312, 317, 325], "unnecessari": [242, 462], "tensorflowcrossentropyloss": 243, "pytorchcrossentropyloss": 243, "tensorflowsparsecategoricalcrossentropi": 243, "sparsecategoricalcrossentropyloss": 243, "setter": 244, "calib_dataload": [244, 326, 384, 422, 425, 445, 446, 448, 456, 457, 461, 462, 489, 490], "reason": [244, 420, 427, 445, 491, 495, 497], "know": [244, 451, 492], "metric_cl": [246, 350, 384, 462], "user_metr": [246, 350, 384], "alwai": [246, 293, 346, 350, 384, 448, 461, 462], "recommend": [246, 350, 426, 446, 455, 473, 476, 481, 483, 486, 488, 497], "set_backend": 247, "tensorflowoptim": 248, "pytorchoptim": 248, "optimizer_registri": 248, "optimizer_typ": 248, "cross": [248, 297, 350, 457, 497], "tensorflowsgd": 248, "tensorflowadamw": 248, "tensorflow_addon": 248, "adamw": 248, "tensorflowadam": 248, "adam": [248, 499], "pytorchsgd": 248, "record_output": 250, "output_process": 250, "get_activ": 250, "tensorflowimagefold": 269, "qlinear2qdq": [284, 289, 342], "qlinearop": [285, 448, 458, 473, 489, 500], "check_model": 285, "onnx_qlinear_to_qdq": 285, "input_name_to_nod": 285, "destin": [285, 299], "tf_to_fp32_onnx": 286, "tf_to_int8_onnx": 286, "int8_model": [286, 287, 426], "get_node_map": 287, "fp32_onnx_path": 287, "module_node_map": 287, "get_quantizable_onnx_op": 287, "quantize_nod": 287, "dynamic_quant_export": 287, "pt_fp32_model": 287, "pt_int8_model": 287, "weight_typ": 287, "s8": 287, "static_quant_export": 287, "_quantiz": 287, "torch_to_fp32_onnx": 287, "do_constant_fold": 287, "verbos": [287, 329, 388], "torch_to_int8_onnx": 287, "achiev": [288, 325, 453, 462, 485, 486, 487, 489, 495, 497], "across": [288, 298, 325, 351, 447, 462, 486, 494, 497], "variou": [288, 298, 325, 351, 428, 458, 465, 486, 488], "dl": [288, 298, 312, 317, 325, 351, 448, 457, 469, 482, 487, 500], "bring": [288, 325, 476, 494], "unifi": [288, 325, 426, 427, 428, 445, 457, 458, 461, 462, 464], "vari": [288, 312, 317, 325, 486, 494, 500], "roc": [288, 297, 312, 317, 325, 350], "flexibl": [288, 312, 317, 325, 449, 486, 491], "via": [288, 312, 317, 325, 420, 451, 458, 462, 465, 482, 486], "popular": [289, 342, 418, 425, 426, 427, 444, 449, 452, 453, 456, 462, 486, 489, 491, 497, 498], "techniqu": [289, 342, 418, 425, 458, 462, 465, 485, 486, 487, 488, 489, 498, 499, 500], "bleu": [289, 291, 296, 342, 344, 349, 461, 486], "bleu_util": [289, 296, 342, 349], "coco_label_map": [289, 296, 342, 349], "coco_tool": [289, 296, 342, 349], "evaluate_squad": [289, 296, 342, 349], "f1": [289, 294, 296, 297, 342, 347, 349, 350, 451, 461, 462, 493, 500], "basic_na": [289, 302, 342], "nas_util": [289, 302, 342], "pruner_legaci": [289, 342], "gradient_sensit": [289, 308, 342], "group_lasso": [289, 308, 342], "pruning_recip": [289, 342], "tile_pattern": [289, 313, 314], "logger": [289, 318, 342, 406, 409, 416], "prune_util": [289, 318, 342], "tuning_sampl": [289, 331, 337, 342, 392, 398], "tuning_spac": [289, 331, 337, 338, 340, 342, 392, 398, 399, 401], "tuning_struct": [289, 331, 337, 338, 339, 342, 392, 398, 399, 400], "auto_mixed_precis": [289, 331, 342, 392], "graph_optim": [289, 342], "mixed_precis": [289, 342, 351, 462], "model_convers": [289, 342], "pruning_v2": [289, 342], "unicoderegex": [290, 343], "hoc": [290, 343], "hack": [290, 343], "recogn": [290, 343, 497], "nondigit_punct_r": [290, 343], "compil": [290, 343, 462], "express": [290, 343, 420], "preced": [290, 343, 494], "digit": [290, 343, 416, 487], "punct_nondigit_r": [290, 343], "symbol_r": [290, 343], "bleu_token": [290, 343], "mose": [290, 343, 491], "smt": [290, 343], "mosesdecod": [290, 343], "mteval": [290, 343], "v14": [290, 343], "pl": [290, 343], "l954": [290, 343], "l983": [290, 343], "bilingu": [290, 343], "understudi": [290, 343], "qualiti": [290, 343], "machin": [290, 343, 453, 459, 468, 482, 487, 494, 495], "translat": [290, 291, 343, 344, 486, 497], "natur": [290, 343, 453], "approxim": [290, 291, 343, 344, 427, 461], "glue": [290, 297, 343, 350, 446, 461, 462, 471], "word": [290, 343, 461, 486, 491, 500], "ngram": [290, 343, 461], "breviti": [290, 291, 343, 344, 461], "penalti": [290, 291, 343, 344, 461], "doe": [290, 343, 402, 445, 446, 461, 462, 491, 492, 496], "beam": [290, 343, 461], "tensor2tensor": [291, 344], "bleu_hook": [291, 344], "compute_bleu": [291, 344], "reference_corpu": [291, 344], "translation_corpu": [291, 344], "max_ord": [291, 344], "use_bp": [291, 344], "against": [291, 344], "gram": [291, 344], "bleu_scor": [291, 344], "third": [293, 346, 460], "parti": [293, 346, 460, 489], "pycocotool": [293, 346, 454, 459], "noth": [293, 346, 497], "thu": [293, 346, 462, 486, 489], "cannot": [293, 346, 422, 454, 495], "jonathanhuang": [293, 346], "image_id": [293, 346, 461], "invok": [293, 346, 427], "groundtruth_dict": [293, 346], "exportgroundtruthtococo": [293, 346], "groundtruth_boxes_list": [293, 346], "groundtruth_classes_list": [293, 346], "max_num_class": [293, 346], "output_path": [293, 346], "detections_list": [293, 346], "exportdetectionstococo": [293, 346], "detection_boxes_list": [293, 346], "detection_scores_list": [293, 346], "detection_classes_list": [293, 346], "cocowrapp": [293, 346], "loadannot": [293, 346], "cocoevalwrapp": [293, 346], "agnostic_mod": [293, 346], "computemetr": [293, 346], "detection_typ": [293, 346], "bbox": [293, 346, 422, 461], "hold": [293, 329, 346, 388, 446], "iou_typ": [293, 346], "iou_thr": [293, 297, 346, 350, 461], "map_point": [293, 297, 346, 350, 461], "cocoev": [293, 346], "mscoco": [293, 346], "Then": [293, 346, 427, 448, 475, 477, 479, 480, 494, 497], "exportsingleimagegroundtruthtococo": [293, 346], "next_annotation_id": [293, 346], "category_id_set": [293, 346], "groundtruth_box": [293, 346], "groundtruth_class": [293, 346], "groundtruth_mask": [293, 346], "groundtruth_is_crowd": [293, 346], "ingest": [293, 346], "here": [293, 346, 403, 427, 446, 451, 452, 453, 455, 456, 461, 470, 477, 480, 482, 489, 492, 493, 500], "exportsingleimagedetectionstococo": [293, 346], "uniqu": [293, 326, 346, 489], "assign": [293, 346, 416, 451, 488, 497], "num_gt_box": [293, 346], "num_detect": [293, 297, 346, 350, 461, 462, 499], "image_height": [293, 346], "image_width": [293, 346], "detection_mask": [293, 346], "crowd": [293, 346], "insid": [293, 346, 449, 450, 483, 486, 497], "exportsingleimagedetectionboxestococo": [293, 346], "detection_box": [293, 346, 462, 499], "detection_scor": [293, 346, 462, 499], "detection_class": [293, 346, 462, 499], "exporsingleimagedetectionboxestococo": [293, 346], "exportsingleimagedetectionmaskstococo": [293, 346], "allenai": [294, 295, 347, 348], "bi": [294, 295, 347, 348], "att": [294, 295, 347, 348], "flow": [294, 295, 347, 348, 422, 423, 462], "f1_score": [294, 295, 347, 348], "ground_truth": [294, 295, 347, 348], "ground": [294, 295, 347, 348], "truth": [294, 295, 347, 348], "metric_max_over_ground_truth": [294, 295, 347, 348], "metric_fn": [294, 295, 347, 348], "exact_match_scor": [294, 347], "exact": [294, 347], "articl": [294, 295, 347, 348], "paragraph": [294, 295, 347, 348], "qa": [294, 295, 347, 348], "cantain": [294, 295, 347, 348], "normalize_answ": [295, 348], "newlin": [295, 348, 416], "tab": [295, 348, 482, 495], "harmon": [295, 297, 348, 350], "recal": [295, 297, 348, 350], "answer_start": [295, 348], "177": [295, 348], "denver": [295, 348], "bronco": [295, 348], "nfl": [295, 348], "team": [295, 348, 420, 490], "afc": [295, 348], "super": [295, 348, 423], "bowl": [295, 348], "50": [295, 348, 423, 427, 494, 500], "56be4db0acb8001400a502ec": [295, 348], "form": [295, 348, 448, 449, 482], "percentag": [295, 348, 444, 499], "tensorflowmetr": [297, 350], "maintain": [297, 350, 420, 421, 425, 464, 465, 477, 480, 491, 492], "pytorchmetr": [297, 350], "mxnetmetr": [297, 350], "onnxrtqlmetr": [297, 350], "onnxrtitmetr": [297, 350], "metric_registri": [297, 350], "metric_typ": [297, 350], "decorator_metr": [297, 350], "basemetr": [297, 350, 384], "single_output": [297, 350], "hvd": [297, 350, 451], "wrappytorchmetr": [297, 350], "wrapmxnetmetr": [297, 350], "wraponnxrtmetr": [297, 350], "proport": [297, 350], "pred_list": [297, 350], "pytorchloss": [297, 350], "mae": [297, 350, 461], "compare_label": [297, 350, 384, 461], "rmse": [297, 350, 461, 497], "squar": [297, 332, 350, 393, 448, 461, 494, 497], "tensorflowtopk": [297, 350], "k": [297, 350, 384, 461], "among": [297, 350, 476, 494], "outcom": [297, 350], "num_correct": [297, 350], "num_sampl": [297, 350], "generaltopk": [297, 350], "cocomapv2": [297, 350, 461], "anno_path": [297, 350, 461], "map_kei": [297, 350], "detectionboxes_precis": [297, 350], "output_index_map": [297, 350, 461], "tensorflowmap": [297, 350], "tensorflowcocomap": [297, 350], "tensorflowvocmap": [297, 350], "squadf1": [297, 350, 461], "miou": [297, 350], "num_class": [297, 350], "21": [297, 350, 470, 471, 487, 494, 500], "iou": [297, 350], "intersect": [297, 350, 426, 461], "union": [297, 350, 405, 461], "onnxrtglu": [297, 350], "dlrm": [297, 350], "modelconvers": 299, "typic": [299, 326, 423, 425, 450, 452, 456, 486, 500], "basicna": 300, "model_build": [300, 303], "conf_fnam": 300, "nasbas": [303, 423], "nas_registri": 304, "nas_method": 304, "create_search_space_pool": 304, "idx": [304, 446], "enumer": [304, 405, 426, 449, 450, 451, 462, 485, 486, 495], "find_pareto_front": 304, "pareto": [304, 423], "front": [304, 423], "n_point": 304, "n_metric": 304, "n_pareto_point": 304, "gradientsensitivityprun": 306, "pytorchmodel": [306, 307, 309, 310, 311, 360], "overwritten": [306, 307, 309, 310, 311, 470], "grouplassoprun": 307, "legaci": 308, "basicmagnitudeprun": 309, "patternlockprun": [310, 322], "pruner_registri": 311, "clase": 311, "pruningconf": [312, 317], "tfpruningcallback": [312, 317], "input_model": [312, 317, 464, 495], "pure": [312, 317, 486], "pattern_registri": 315, "pattern_typ": 315, "patternbas": 315, "mask_shap": [315, 316], "is_contigu": 315, "tile": 316, "tilepatternbas": 316, "tilepattern_1x1": 316, "1x1": [316, 449, 462, 486], "tilepattern_2x2": 316, "2x2": [316, 494], "tilepattern_1x16": 316, "1x16": 316, "tilepattern_4x1": 316, "tilepattern_1x2": 316, "1x2": [316, 494], "patternnxm": 320, "patternninm": 320, "reset_non_value_to_default": 321, "obejct": 321, "parse_not_to_prun": 321, "update_frequency_on_step": [322, 488], "max_sparsity_ratio_per_lay": [322, 488], "magnitudeprun": 322, "snipprun": 322, "snipmomentumprun": 322, "moreoev": 322, "quantconf": 325, "server": [326, 482], "seper": 326, "opt_model": [326, 462], "fulli": [326, 462, 489, 494], "train_func": [326, 405, 451, 462, 489], "automixedprecisiontunestrategi": [327, 386], "basictunestrategi": [328, 387], "stage": [328, 333, 385, 387, 394, 449, 486, 495, 497], "polici": [328, 332, 385, 387, 393, 420, 425, 499, 501], "bayesiantunestrategi": [329, 388], "acq_max": [329, 388], "ac": [329, 388], "gp": [329, 388], "y_max": [329, 388], "n_warmup": [329, 388], "10000": [329, 388, 486], "n_iter": [329, 388], "acquisit": [329, 388], "gaussian": [329, 388, 497], "relev": [329, 388, 427, 428], "acq": [329, 388], "randomst": [329, 388], "scipi": [329, 388], "x_max": [329, 388], "targetspac": [329, 388], "pbound": [329, 388], "9527": [329, 388, 462, 499], "allow": [329, 388, 449, 451, 461, 462, 463, 488, 494, 497, 499], "bayesianoptim": [329, 388], "exhaustivetunestrategi": [330, 390], "msetunestrategi": [332, 393], "mse_v2tunestrategi": [333, 394], "revert": [333, 341, 394, 402, 497], "randomtunestrategi": [334, 395], "strategy_registri": [335, 396, 497], "tunestrategi": [335, 396, 497], "tuningsamplerregistri": 338, "tuningsampl": [338, 399], "tuningord": [338, 399], "Not": [338, 339, 399, 400, 416, 423], "tuningspac": [338, 339, 399, 400], "tuning_order_lst": [338, 399], "initial_op_tuning_cfg": [338, 399], "modelwisetuningsampl": [338, 399], "tuning_items_prior": [338, 399], "op_dtype_dict": [338, 399], "optuningconfig": [338, 339, 340, 399, 400, 401], "optypewisetuningsampl": [338, 399], "opwisetuningsampl": [338, 399], "fallbacktuningsampl": [338, 399], "op_dtyp": [338, 399], "accumul": [338, 399, 497], "skip_first": [338, 399], "smoothquantsampl": [338, 399], "tuningitem": [339, 400], "item_typ": [339, 400], "pattern_to_intern": [339, 400], "default_dtyp": [339, 400], "pattern_to_path": [339, 400], "quant_mode_from_pattern": [339, 400], "internal_pattern": [339, 400], "initial_tuning_cfg_with_quant_mod": [339, 400], "op_name_typ": [339, 400], "step1": [339, 400], "step2": [339, 400], "complet": [339, 400, 426, 427, 489, 497, 499, 500], "step3": [339, 400], "step4": [339, 400], "step5": [339, 400], "op_quant_mod": [340, 401], "ordereddefaultdict": [341, 402], "extract_data_typ": [341, 402], "data_typ": [341, 402], "sign": [341, 402, 421, 428, 444, 489, 493], "reverted_data_typ": [341, 402], "signed_flag": [341, 402], "get_adaptor_nam": [341, 402], "experiment": [342, 377, 382, 423, 446, 450, 451, 453, 462, 486, 488, 492, 496], "base_model": [342, 353], "keras_model": [342, 353], "mxnet_model": [342, 353], "nets_factori": [342, 353], "onnx_model": [342, 353, 377], "tensorflow_model": [342, 353, 382], "torch_model": [342, 353], "collect_layer_histogram": [342, 409], "create_obj_from_config": [342, 409], "kl_diverg": [342, 409], "load_huggingfac": [342, 409, 462], "neural_insights_util": [342, 409], "weights_detail": [342, 409], "sub_class": [350, 384], "register_customer_metr": 350, "topk": [350, 384, 451, 461, 462, 489], "frozen": [351, 359, 384, 464], "savedmodel": [351, 359, 384, 500], "chould": 351, "onnx_ml_pb2": [351, 464], "hybirdblock": [351, 384], "paramt": [351, 405], "basemodel": 352, "plai": [352, 487, 491, 494], "role": [352, 491, 494], "kerasmodel": 354, "get_model_fwk_nam": 355, "fwk": 355, "mxnetmodel": 356, "net": 357, "tfslimnetsfactori": 357, "get_model_typ": 359, "validate_graph_nod": 359, "validate_and_inference_input_output": 359, "output_tensor_nam": 359, "graph_sess": 359, "graph_def_sess": 359, "frozen_pb_sess": 359, "load_saved_model": 359, "saved_model_tag": 359, "signatur": 359, "saved_model_dir": 359, "metagraphdef": 359, "keras_sess": 359, "slim_sess": 359, "checkpoint_sess": 359, "estimator_sess": 359, "saved_model_sess": 359, "tensorflowbasemodel": [359, 382], "tensorflowsavedmodelmodel": 359, "tensorflowqatmodel": 359, "tensorflowcheckpointmodel": 359, "tensorflowmodel": 359, "pytorchbasemodel": 360, "pytorchfxmodel": 360, "ipexmodel": 360, "driven": [361, 425, 462, 482, 484, 495], "objective_registri": 361, "objective_custom_registri": 361, "obj_cl": 361, "eural_compressor": 361, "objective_cl": 361, "user_object": 361, "__class__": 361, "__name__": 361, "objective_cfg": 361, "usr_cfg": 361, "user_obj_cfg": 361, "easili": [361, 426, 466, 470, 482, 484, 494], "peak": [361, 484], "multiobject": 361, "metric_criterion": 361, "metric_weight": 361, "obj_criterion": 361, "obj_weight": 361, "is_measur": 361, "parserfactori": 363, "onnxrtparserfactori": 365, "onnxprofilingpars": 367, "respons": [367, 368, 372, 489], "profilingpars": 368, "profilingresult": 369, "total_execution_tim": 369, "accelerator_execution_tim": 369, "cpu_execution_tim": 369, "op_run": 369, "op_defin": 369, "tensorflowparserfactori": 370, "tensorflowprofilingpars": 372, "profilerfactori": [373, 375, 380], "create_onnx_config": 378, "ort": 378, "sessionopt": 378, "delete_assign": 383, "create_tf_config": 383, "tf_modul": 383, "configproto": 383, "set_eager_execut": 383, "entir": [384, 405, 422, 427, 428, 444, 486, 494], "autotunestrategi": 385, "conservativetunestrategi": 389, "o0": [389, 497], "who": [389, 420], "hawq_v2tunestrategi": 391, "made": [391, 426, 489, 492, 497], "impact": [391, 492, 497], "tunestrategymeta": 396, "metaclass": 396, "lowerbitssampl": 399, "blockfallbacktuningsampl": 399, "op_block_lst": 399, "target_dtyp": 399, "alpha_list": 399, "quantopt": 402, "quant_typ": 402, "quant_opt": 402, "preprocess_user_cfg": 402, "op_user_cfg": 402, "op_user_cfg_modifi": 402, "build_slave_faker_model": 402, "slave": [402, 497], "virtual": [402, 487], "classregist": 402, "fun": 403, "attribute1": 403, "module_debug_level1": 403, "debug": [403, 412, 448, 475, 479, 483, 497, 498], "function1": 403, "param1": 403, "param2": 403, "parameter1": 403, "parameter2": 403, "function2": 403, "pep": 403, "484": 403, "output_model": [403, 462, 495], "function3": 403, "section": [403, 428, 448, 449, 450, 482, 486, 488, 499], "restructuredtext": 403, "liter": 403, "generator1": 403, "example_gener": 403, "exampleclass": 403, "param3": 403, "public": [403, 420, 477, 480], "attr1": 403, "attr2": 403, "attr5": 403, "api_doc_exampl": 404, "loop": [405, 422, 423, 427, 428, 455, 493, 497], "compressionmanag": 405, "uesd": 405, "deal": 405, "pruningconfig": 405, "orchestr": [405, 425, 458, 498], "on_train_begin": [405, 422, 449, 450, 462, 485, 486, 489], "train_loop": [405, 462, 485], "on_epoch_begin": [405, 408, 449, 450, 462, 485], "on_step_begin": [405, 408, 449, 450, 462, 485, 486], "on_after_compute_loss": [405, 449, 450, 462, 485], "backward": [405, 449, 450, 451, 462, 485, 486, 489, 492], "on_before_optimizer_step": [405, 449, 450, 462, 485, 486], "on_step_end": [405, 408, 449, 450, 462, 485], "on_epoch_end": [405, 408, 449, 450, 462, 485], "on_train_end": [405, 449, 450, 462, 485, 486, 489], "path_to_sav": 405, "manag": [405, 408, 462, 465, 466, 476], "top1": [405, 461, 486, 489, 500], "callbacks_list": 405, "layerhistogramcollector": 406, "layer_tensor": 406, "include_lay": 406, "get_func_from_config": 408, "func_dict": 408, "get_preprocess": 408, "get_metr": 408, "get_postprocess": 408, "get_algorithm": 408, "algo": 408, "create_dataset": 408, "cfg_preprocess": 408, "cfg_filter": 408, "create_dataload": 408, "dataloader_cfg": 408, "create_eval_func": 408, "postprocess_cfg": 408, "fp32_baselin": [408, 426], "baselin": [408, 493, 495], "create_train_func": 408, "train_cfg": 408, "Their": 408, "auxiliari": 409, "optimizedmodel": 411, "from_pretrain": [411, 462], "save_for_huggingface_upstream": [411, 462], "msg": 412, "fatal": 412, "warn": 412, "warin": 412, "alia": [412, 416, 467, 472], "insight": [413, 425, 448, 487, 492, 497, 498], "register_neural_insights_workload": 413, "workload_loc": [413, 416], "workload_mod": 413, "workload": [413, 416, 487], "uuid": 413, "update_neural_insights_workload": 413, "workload_uuid": 413, "update_neural_insights_workload_accuracy_data": 413, "baseline_accuraci": 413, "optimized_accuraci": 413, "is_int8_model": 415, "checkpoint_dir": 415, "history_cfg": 415, "best_configur": 415, "best_model_weight": 415, "snapshot": 415, "cfg_from_fil": 416, "yaml_fil": [416, 446, 451], "lazyimport": 416, "lazi": 416, "till": [416, 497], "decorat": 416, "time_limit": 416, "get_siz": 416, "seen": [416, 426], "recurs": 416, "compute_spars": 416, "fault_tolerant_fil": 416, "equal_dict": 416, "d2": 416, "compare_kei": 416, "ignore_kei": 416, "cpuinfo": 416, "dump_elapsed_tim": [416, 426], "customized_msg": 416, "elaps": 416, "combine_histogram": 416, "old_hist": 416, "old": [416, 462, 492], "get_tensor_histogram": 416, "get_all_fp32_data": 416, "get_tuning_histori": 416, "tuning_history_path": 416, "offlin": [416, 420, 462, 489, 494], "str2arrai": 416, "dequantize_weight": 416, "weight_tensor": 416, "min_filter_tensor": 416, "max_filter_tensor": 416, "scale_info": 416, "captureoutputtofil": 416, "tmp_file_path": 416, "stream": [416, 500], "sy": [416, 468], "stderr": 416, "captur": 416, "statist": [416, 417], "header": [416, 454], "field_nam": 416, "output_handl": 416, "printer": 416, "global_st": 416, "load_data_from_pkl": 416, "pkl": 416, "dump_data_to_loc": 416, "show_memory_info": 416, "hint": 416, "dump_class_attr": 416, "compare_object": 416, "obj1": 416, "obj2": 416, "ignore_attr": 416, "comparison": [416, 492, 495], "alias_param": 416, "param_nam": 416, "param_alia": 416, "alias": 416, "print_tabl": 416, "column_map": 416, "table_entri": 416, "titl": [416, 460, 483, 497], "insert_newlin": 416, "prettyt": 416, "column": [416, 494], "func": [416, 427, 489, 499], "handler": [416, 497], "row": [416, 448, 494], "decim": 416, "get_tensors_info": 416, "get_weights_detail": 416, "weightdetail": 416, "dump_tabl": 416, "file_typ": 416, "csv": [416, 423], "dump_table_to_csv": 416, "get_number_of_socket": 416, "platform": [416, 425, 458, 465, 473, 487, 489], "opentri": 416, "activation_min": 416, "activation_max": 416, "print_op_list": 416, "get_op_list": 416, "minmax_file_path": 416, "input_model_tensor": 416, "optimized_model_tensor": 416, "activation_min_max": 416, "calculate_ms": 416, "mse_metric_gap": 416, "fp32_tensor": 416, "dequantize_tensor": 416, "euclidean": [416, 449], "distanc": [416, 449], "weightsdetail": 417, "input_tensor_data": 417, "optimized_tensor_data": 417, "weightsstatist": 417, "welcom": [419, 420, 421, 425, 501], "interest": [420, 425, 495], "foster": 420, "particip": 420, "commun": 420, "harass": 420, "experi": [420, 465, 493, 494, 497], "everyon": 420, "regardless": 420, "ag": 420, "bodi": 420, "ethnic": 420, "characterist": 420, "gender": 420, "educ": 420, "socio": 420, "econom": 420, "race": 420, "religion": 420, "sexual": 420, "orient": 420, "contribut": [420, 425, 486], "inclus": 420, "Being": 420, "respect": [420, 455, 486, 494, 499], "viewpoint": 420, "gracefulli": 420, "focus": [420, 426], "empathi": 420, "toward": [420, 449], "member": [420, 426], "unaccept": 420, "imageri": 420, "unwelcom": 420, "troll": 420, "insult": 420, "derogatori": 420, "polit": 420, "attack": 420, "privat": 420, "publish": [420, 460, 463, 483, 494], "electron": 420, "explicit": 420, "permiss": 420, "inappropri": 420, "profession": 420, "clarifi": 420, "appropri": [420, 444, 494], "fair": 420, "action": [420, 477, 480], "edit": 420, "reject": 420, "commit": [420, 421], "wiki": 420, "issu": [420, 421, 424, 459, 489, 495], "ban": 420, "temporarili": 420, "deem": 420, "threaten": 420, "offens": 420, "harm": 420, "mail": 420, "social": [420, 425, 487], "media": [420, 425, 487], "account": [420, 493, 497], "appoint": 420, "onlin": [420, 493], "event": [420, 495], "abus": 420, "report": [420, 421, 493], "contact": [420, 492, 493], "complaint": 420, "review": [420, 421], "investig": 420, "circumst": [420, 488], "oblig": 420, "confidenti": 420, "regard": [420, 490], "incid": 420, "separ": [420, 457, 460, 485, 488], "good": [420, 489, 497], "faith": 420, "repercuss": 420, "leadership": 420, "faq": [420, 425], "page": [420, 421], "send": [421, 427], "view": [421, 425, 452, 473, 482, 492], "pylint": 421, "flake8": 421, "autopep8": 421, "cover": [421, 453, 457, 487], "would": [421, 462, 486, 489, 494], "adopt": [421, 465, 486, 487, 494], "certif": 421, "agre": 421, "j": [421, 425, 494, 500], "bug": 421, "jira": 421, "ticket": 421, "potenti": [421, 423, 448], "risk": 421, "pr": [421, 445, 461, 477, 480, 492], "reproduc": 421, "hardwar": [421, 425, 426, 449, 458, 462, 482, 486, 487, 488], "submit": [421, 487], "intend": 421, "safe": 421, "collabor": [421, 467, 473], "adher": 421, "toolkit": [422, 459, 465, 473, 487, 498], "tracer": 422, "resolv": [422, 424], "floatfunct": 422, "cat": [422, 453, 468], "done": [422, 449, 450, 466, 482, 486, 489], "10004": [422, 423, 426, 445, 449, 450, 455, 458, 463, 485, 488, 491, 499], "neural_compressor": [422, 423, 425, 428, 443, 445, 446, 448, 449, 450, 451, 453, 456, 457, 461, 462, 463, 464, 484, 485, 486, 488, 489, 490, 492, 493, 494, 496, 497, 499], "eval": [422, 445, 448, 465, 489, 495], "conduct": [422, 462, 470, 482, 497, 498], "imper": 422, "therefor": [422, 462, 486, 489, 492, 494], "lot": [422, 494], "As": [422, 427, 445, 449, 461, 462, 476, 486, 491, 497], "failur": 422, "successfulli": [422, 451, 487], "suggest": [422, 493], "traceabl": 422, "proxi": 422, "tutori": [422, 473, 487, 498], "prototyp": 422, "html": [422, 425, 477, 480], "highlight": 422, "untrac": 422, "ssd": [422, 453, 500], "resnet34": [422, 500], "r34": 422, "bboxes_labels_scor": 422, "prob": 422, "45": [422, 494, 500], "max_output": 422, "zip": 422, "dbox": 422, "dlabel": 422, "dscore": 422, "decode_singl": 422, "autom": [423, 425, 465, 482, 483, 487, 494], "artifici": 423, "ann": 423, "par": 423, "outperform": 423, "hand": 423, "propos": [423, 426, 449, 463, 494], "lie": [423, 444], "predictor": 423, "shown": [423, 445, 448, 449, 461, 462, 476, 484, 485, 486, 494, 497], "figur": [423, 475, 476, 479], "popul": 423, "inner": 423, "evolutionari": 423, "cycl": 423, "until": [423, 427, 497], "conclud": 423, "met": [423, 455, 489, 495], "yet": [423, 477, 480, 483], "simplest": [423, 444, 468], "launcher": [423, 425, 449, 450, 473, 498], "agent": 423, "nsga2": 423, "supernet": 423, "ofa_mbv3_d234_e346_k357_w1": 423, "acc": [423, 486, 495, 500], "mac": [423, 483], "num_ev": 423, "250": [423, 486], "results_csv_path": 423, "search_result": 423, "dataset_path": 423, "ilsvrc2012": 423, "aim": [423, 425, 465, 486, 494, 497, 498], "mobilenetv3": 423, "lt": [423, 446, 500], "wmt": 423, "en": 423, "de": 423, "guidelin": [424, 425], "mainstream": [425, 498], "learn": [425, 426, 427, 445, 446, 453, 457, 458, 459, 462, 463, 465, 467, 470, 471, 473, 476, 477, 480, 482, 486, 487, 489, 494, 495, 497, 498], "runtim": [425, 426, 427, 429, 445, 448, 452, 455, 458, 463, 467, 472, 473, 488, 491, 492], "workflow": [425, 427, 428, 448, 449, 453, 459, 463, 477, 480, 495, 498], "particular": [425, 486], "wide": [425, 452, 463, 486, 489, 500], "xeon": [425, 459, 460, 463, 487, 489, 490, 500], "scalabl": [425, 459, 463, 487, 489, 490], "processor": [425, 463, 487, 489, 490], "flex": [425, 459], "amd": [425, 458, 459, 500], "arm": [425, 458, 459, 500], "nvidia": [425, 444, 458, 459, 500], "bloom": [425, 494], "176b": [425, 494], "7b": [425, 494, 500], "stabl": [425, 459, 486, 487], "diffus": [425, 487], "gpt": [425, 486, 494, 500], "vision": [425, 453, 469, 494], "coder": [425, 458, 466, 467, 470, 473, 476, 487], "cloud": [425, 487], "marketplac": [425, 483, 487], "googl": [425, 463, 487], "amazon": [425, 465, 473], "web": [425, 495], "servic": [425, 482, 487], "azur": [425, 487], "softwar": [425, 460, 486, 487, 492], "alibaba": [425, 472, 479, 480, 487], "tencent": [425, 487], "taco": [425, 487], "ai": [425, 465, 487, 490, 498], "ecosystem": [425, 487], "lightn": [425, 472], "pip": [425, 448, 451, 454, 456, 459, 467, 470, 475, 477, 479, 480, 492], "wget": [425, 448, 454, 456], "googleapi": [425, 456], "v1_6": [425, 456], "mobilenet_v1_1": [425, 456], "0_224_frozen": [425, 456], "overview": [425, 497], "jupyterlab": [425, 465, 471, 473, 475, 479, 498], "studio": [425, 473, 482, 498], "topic": 425, "innov": [425, 473, 487], "onnxcommunitymeetup2023": [425, 487], "juli": [425, 487], "2023": [425, 491, 494, 500], "blog": [425, 487], "llama": [425, 487], "msft": [425, 487], "oliv": [425, 487], "friendli": [425, 455, 462, 487, 494, 498, 499], "toolchain": [425, 454, 487], "june": [425, 487], "neurip": [425, 487], "oct": [425, 487], "quala": [425, 487], "minilm": [425, 487, 500], "releas": [425, 459, 471, 473, 475, 479, 481, 501], "legal": [425, 501], "idea": [425, 486, 494, 497], "feel": 425, "bridg": [426, 427, 458], "vanilla": [426, 427, 458], "abcadaptor": 426, "__init__": [426, 445, 446, 461, 497], "query_fw_cap": [426, 428], "query_fused_pattern": 426, "he": 426, "besid": [426, 449, 491], "describ": [426, 428, 448, 455, 495], "past": [426, 491], "mainten": 426, "difficult": [426, 494], "abil": [426, 427, 446, 455, 494], "modif": [426, 455, 470], "fragment": 426, "scenario": [426, 443, 449, 462, 486, 491], "granular": [426, 427, 428, 455, 458, 468, 489, 494, 499], "semant": [426, 455], "mla": [426, 463, 489], "becom": [426, 453, 486, 491], "explor": 426, "inspect_tensor": 426, "op_list": [426, 495], "iteration_list": 426, "inspect_typ": 426, "save_to_disk": 426, "quantization_cfg": 426, "set_tensor": 426, "tensor_dict": 426, "diagnosis_help": 426, "fw": 427, "outlin": [427, 428], "instruct": [427, 428, 449, 459, 463, 477, 480, 487, 488, 489], "extend": [427, 428], "accommod": [427, 428], "incorpor": [427, 428, 450, 497], "give": [427, 482, 497], "diagram": [427, 428, 448, 497], "illustr": [427, 428, 450, 497], "sequencediagram": [427, 428], "autonumb": [427, 428], "query_framework_cap": 427, "opwis": 427, "optypewis": 427, "travers": [427, 428, 497], "\u2776": 427, "\u2777": 427, "\u2778": 427, "\u2779": 427, "\u277a": 427, "\u277b": 427, "\u277c": 427, "These": [427, 458], "chapter": 427, "confirm": 427, "chosen": [427, 444], "framework_yaml": 427, "int8_conv_config": 427, "node_op": 427, "optype_wise_": 427, "per_tensor": [427, 428, 455, 489, 499], "exmapl": 427, "tuning_cfg_to_fw": 427, "Its": [427, 444], "calib_iter": 427, "dispatch": [427, 458], "is_perchannel": 427, "is_asymmetr": 427, "weight_bit": 427, "convert_bf16": 427, "calib": 427, "larger": [427, 486, 491, 494], "somewhat": 427, "distort": 427, "line": [427, 451, 458, 465, 470, 471, 495], "At": [427, 497], "explain": [428, 448, 494], "let": [428, 455, 470, 486, 488, 499], "overal": [428, 499], "drive": 428, "uint4": 428, "asymmetr": [428, 489, 497], "kullback": [428, 449], "leibler": [428, 449], "pytorch_cpu": 428, "1_11_capabl": 428, "cap_s8_1_11": 428, "cap_s8_1_11_conv1d": 428, "per_channel_symmetr": 428, "addition": [428, 451, 497], "per_tensor_symmetr": 428, "due": [428, 453, 486, 489, 494, 495], "nativ": 428, "with_arg": 428, "qscheme": 428, "torch_dtyp": 428, "quant_min": 428, "quant_max": 428, "linux": [443, 454, 476, 482], "x86_64": 443, "aarch64": 443, "prove": [444, 494], "benefici": 444, "uniform": 444, "\u03b2": 444, "\u03b1": 444, "fundament": [444, 462], "primari": [444, 497], "focu": [444, 497], "essenti": [444, 454], "remaind": 444, "enhanc": [444, 465, 487, 490], "resolut": 444, "extrem": 444, "still": [444, 462, 487, 489, 490], "retain": 444, "noteworthi": 444, "vanhouck": 444, "vincent": 444, "andrew": 444, "senior": 444, "mark": 444, "mao": 444, "speed": [444, 462, 473, 486, 487, 489, 497], "2011": 444, "szymon": 444, "migacz": 444, "2017": 444, "mckinstri": 444, "jeffrei": 444, "l": [444, 449, 495, 497], "discov": [444, 495], "preprint": [444, 486, 491, 494], "1809": 444, "04191": 444, "2018": 444, "encount": 445, "consum": 445, "previous": 445, "lack": [445, 454], "faster": [445, 447, 453, 487, 497, 500], "Of": 445, "getitem": 445, "fn": 445, "evenli": 445, "divid": [445, 494, 497], "discard": 445, "throw": 445, "awai": 445, "draw": [445, 493, 497], "worker": [445, 462, 489], "subprocess": 445, "pin": [445, 475, 479], "reshuffl": 445, "manner": [445, 449, 464], "newdataload": 445, "customis": [445, 446, 461], "ensp": [446, 496], "imagerecord": [446, 451, 499], "image_nam": 446, "cocorecord": 446, "gt": [446, 494, 496], "int64": 446, "offer": 446, "style_transf": 446, "content": 446, "tfrecorddataset": 446, "labelbal": 446, "300": 446, "16": [446, 491, 494, 500], "helloworld": [446, 463, 496], "aid": 447, "deploy": [447, 465, 482, 487, 494], "infrastructur": 447, "gap": [448, 464], "diagnos": 448, "gui": [448, 458, 486], "termin": [448, 475, 476, 479], "repeat": [448, 497], "durat": [448, 493], "git": [448, 454, 459], "clone": [448, 459, 475, 479], "cd": [448, 451, 459], "setup": [448, 455, 459, 477, 480, 486], "ilsvr2012": 448, "caff": 448, "berkeleyvis": 448, "caffe_ilsvrc12": 448, "xvzf": 448, "image_recognit": [448, 495], "resnet50_torchvis": 448, "ptq_static": 448, "resnet50_v1": [448, 451, 462], "dataset_loc": [448, 495], "label_path": 448, "quantiti": 448, "vec": 448, "mu": 448, "frac": [448, 494], "sigma": 448, "var": 448, "happen": 448, "dispers": 448, "rule": [448, 465, 486], "v0": [448, 495], "cg": [448, 495], "conv0": [448, 495], "expens": [449, 462, 497], "deploi": [449, 462, 491, 497], "power": [449, 462, 476, 487], "mobil": [449, 462, 500], "produc": 449, "logit": 449, "softmax": 449, "kd": 449, "patient": 449, "compact": [449, 462, 468, 486], "agnost": 449, "resourc": [449, 497], "convolut": [449, 487], "ia": 449, "attach": [449, 462, 494], "shallow": 449, "deepest": 449, "deeper": 449, "paper": [449, 486, 491, 494], "10006": [449, 450], "student_output": [449, 450], "student_loss": [449, 450], "training_func_for_nc": [449, 450], "distil_loss_conf": 449, "accordingli": [449, 473], "promis": [450, 462, 486], "huge": [450, 486], "heavi": 450, "light": 450, "booster": 450, "degrad": [450, 486, 497], "novel": [450, 465, 476, 482], "place": [450, 459, 486, 495], "comb": 450, "distillation_criterion": [450, 462, 485], "q_conf": 450, "horovod": 451, "instal": [451, 454, 456, 465, 467, 470, 473, 477, 480, 482, 483, 501], "program": [451, 460, 465, 482], "enable_eager_execut": 451, "yaml_file_path": 451, "pre_process": 451, "simpli": [451, 464, 465, 467, 470, 482], "evaluation_result": 451, "evaluation_time_cost": 451, "partit": [451, 486], "distributedsampl": 451, "train_sampl": 451, "train_dataset": [451, 489], "num_replica": 451, "rank": 451, "train_load": 451, "train_kwarg": 451, "adadelta": 451, "distributedoptim": 451, "named_paramet": 451, "broadcast_paramet": 451, "root_rank": 451, "broadcast_optimizer_st": 451, "set_epoch": 451, "batch_idx": 451, "zero_grad": [451, 462, 486], "nll_loss": 451, "log_interv": 451, "0f": 451, "tloss": 451, "6f": 451, "dry_run": 451, "test_func": 451, "host": 451, "num_of_process": 451, "002": 451, "ssh": [451, 482], "prompt": 451, "readm": 451, "exactli": [451, 466], "recognit": [451, 453, 486, 495], "resizecropimagenet": [451, 496], "realiz": [451, 484, 490, 493], "tow": 451, "node1": 451, "node2": 451, "TO": [451, 467], "your_node1_nam": 451, "your_node2_nam": 451, "resnet50_fp32_pretrained_model": 451, "nc_resnet50_v1": 451, "resnet": [451, 500], "varieti": [452, 488, 497], "demonstr": [452, 465, 495], "10k": [452, 456], "speedup": [452, 458, 489], "2x": [452, 458], "vnni": [452, 458, 488, 489], "exchang": 453, "hope": 453, "inc_model": [453, 464], "fp32_onnx_config": 453, "verifi": 453, "vgg16": [453, 500], "mobilenet": [453, 493, 500], "rcnn": 453, "torchscript": [453, 494], "unsupport": [453, 462, 486], "add_relu": 453, "conv1d_relu": 453, "conv2d_relu": 453, "group_norm": 453, "hardswish": 453, "instance_norm": 453, "layer_norm": 453, "leaky_relu": 453, "sigmoid": 453, "bare": 454, "metal": 454, "sudo": [454, 468], "apt": [454, 459, 468, 476], "python3": 454, "dev": [454, 475, 479], "distutil": 454, "libgl1": 454, "mesa": 454, "glx": 454, "libglib2": 454, "ln": 454, "sf": 454, "usr": 454, "incompat": 454, "88": [454, 493, 500], "80": [454, 494, 495, 500], "pyobject": 454, "reinstal": 454, "libgl": 454, "No": [454, 462, 487], "yum": [454, 459], "opencv": [454, 476], "conda": [454, 459, 468, 476, 492], "13": [454, 459, 492, 494, 500], "pend": 454, "sqlalchemi": 454, "27": [454, 500], "alemb": 454, "forg": [454, 459], "quick": [455, 463, 498, 499], "dive": [455, 498], "purpos": [455, 463, 482, 488, 489], "syntax": 455, "go": [455, 477, 480, 488, 496], "up1": 455, "up2": 455, "valid_mixed_precis": 455, "addn": 455, "grappler_optim": 455, "constfold": 455, "arithmet": 455, "debug_stripp": 455, "major": [457, 489, 494], "concept": [457, 493, 498], "rather": 457, "custom_metr": 457, "refin": [457, 486], "broad": [458, 471, 498], "420": 458, "geomean": 458, "snippet": 458, "upload": [458, 477, 480], "click": [458, 465, 466, 473, 476, 482, 487, 495], "button": [458, 476, 482], "qintegerop": [458, 489], "plan": 458, "oneapi": [459, 487, 498], "analyt": [459, 487, 498], "success": 459, "11": [459, 461, 463, 494, 497, 500], "frequent": 459, "ask": 459, "pypi": [459, 477, 480], "nightli": 459, "consolid": 459, "latest": [459, 487, 492], "eas": [459, 467, 487], "along": [459, 486], "streamlin": [459, 487], "scienc": 459, "websit": 459, "anaconda": 459, "suit": [459, 483, 495], "esri": 459, "formerli": 459, "skylak": 459, "cascad": 459, "lake": [459, 463, 487], "cooper": [459, 463, 487], "ic": [459, 487], "sapphir": 459, "rapid": 459, "hbm": 459, "arctic": 459, "sound": 459, "pont": 459, "vecchio": 459, "cento": [459, 500], "ubuntu": 459, "22": [459, 500], "04": [459, 500], "fortensorflow": 459, "forpytorch": 459, "12": 459, "tf_enable_onednn_opt": 459, "onednn": [459, 463, 489], "newer": 459, "copyright": 460, "subject": 460, "accompani": [460, 497], "research": [460, 494], "wish": 460, "bibtex": 460, "author": 460, "feng": 460, "tian": 460, "hanwen": 460, "haihao": [460, 486], "shen": [460, 486], "suyu": 460, "chen": 460, "howpublish": 460, "year": 460, "logo": 460, "atom": 460, "phi": 460, "pentium": 460, "vtune": 460, "corpor": 460, "subsidiari": 460, "brand": 460, "claim": 460, "popularli": 461, "industri": [461, 487], "label_map": 461, "decis": 461, "ap": 461, "curv": 461, "turn": [461, 476], "target_boxes_num": 461, "str_label": 461, "int_label": 461, "inturn": 461, "cocomap": 461, "vocmap": 461, "categor": 461, "multiclass": 461, "multilabel": 461, "newmetr": 461, "reset": 461, "reflect": [461, 496], "new_metr": 461, "deliv": [462, 487, 492], "conveni": 462, "upgrad": 462, "veri": [462, 483, 489, 497, 498], "comprehens": [462, 498], "kind": 462, "resort": 462, "automodelforsequenceclassif": 462, "autotoken": 462, "val_dataset": [462, 489], "val_dataload": [462, 489], "ping_memori": [462, 489], "formul": 462, "effort": 462, "written": 462, "onnxrt_integ": [462, 499], "onnxrt_qlinear": [462, 499], "image_tensor": [462, 499], "post_training_dynamic_qu": [462, 488, 497], "1000": [462, 499], "2000": 462, "sampling_s": [462, 499], "model_wis": [462, 499], "op_dict": 462, "op_wis": [462, 495, 499], "sigopt_api_token": [462, 493, 497], "sigopt_project_id": [462, 493, 497], "sigopt_experiment_nam": [462, 493, 497], "demo": 462, "600": 462, "training_arg": 462, "emul": [462, 489], "trainer": [462, 473], "briefli": [462, 494], "maxim": [462, 486, 497], "pruning_func": 462, "train_dataload": [462, 486, 489], "n_gpu": 462, "gradient_accumulation_step": 462, "clip_grad_norm_": 462, "max_grad_norm": 462, "rate": [462, 486, 489], "start_epoch": [462, 488, 499], "end_epoch": [462, 488, 499], "97": [462, 494, 500], "newli": [462, 486], "on_after_optimizer_step": [462, 486], "layer3": [462, 486], "lr_schedul": [462, 486], "0004": 462, "nesterov": [462, 499], "randomresizedcrop": [462, 496], "totensor": [462, 496], "485": [462, 500], "456": [462, 500], "406": 462, "nepoch": 462, "cnt": 462, "loss_sum": 462, "iter_bar": 462, "tqdm": 462, "desc": 462, "teacher_logit": 462, "train_fun": 462, "training_func": 462, "recent": [462, 463], "growth": [462, 463, 486], "complex": [462, 463, 486], "significantli": [462, 463, 486, 497], "bandwidth": [462, 463, 491], "exit_polici": [462, 499], "determinist": 462, "meaning": [462, 485], "reli": [462, 494], "prune_conf": 462, "quantization_aware_training_conf": 462, "aforement": 462, "inset": 462, "p_conf": [462, 485], "ssd_mobilenet_v1": 462, "benchmarkconf": 462, "half": [463, 473], "sixteen": 463, "launch": [463, 483], "3rd": [463, 487, 489, 490], "gen": [463, 487, 489, 490], "codenam": 463, "boost": [463, 466, 482, 486, 487], "x86": 463, "avx512": [463, 489], "vcvtne2ps2bf16": 463, "vcvtneps2bf16": 463, "vdpbf16p": 463, "fbgemm": [463, 489], "tensorrtexecutionprovid": [463, 489], "cudaexecutionprovid": [463, 489], "dnnlexecutionprovid": [463, 489], "avx512_bf16": 463, "plu": 463, "resnet18": [463, 467, 500], "persist": 464, "brought": [464, 466, 473, 489], "tf2": 464, "h5": 464, "hybridblock": 464, "0000": 464, "saved_result": [464, 491], "simplifi": [465, 476, 482, 486, 487], "acquir": 465, "analysi": [465, 482, 486, 493], "heurist": [465, 482], "great": 465, "facilit": 465, "autocast": 465, "my_model": 465, "no_grad": 465, "memory_format": 465, "112": [465, 500], "rand": [465, 494], "plugin": [465, 483], "aw": [465, 473, 487, 500], "sagemak": [465, 473], "inlin": [465, 470, 473], "neural_cod": [465, 467, 469, 470, 471, 473], "bench": 465, "superbench": 465, "enjoi": [466, 470, 473], "rebuild": [466, 475, 479], "reload": [466, 483], "modern": [467, 491], "democrat": [467, 487], "programm": [467, 473, 482], "nano_bf16_channels_last": 467, "nano_bf16_ipex_channels_last": 467, "nano_bf16_ipex": 467, "nano_bf16": 467, "nano_fp32_channels_last": 467, "nano_fp32_ipex_channels_last": 467, "nano_fp32_ipex": 467, "nano_gpu_to_cpu": 467, "nano_int8": 467, "nano_jit_bf16_channels_last": 467, "nano_jit_bf16_ipex_channels_last": 467, "nano_jit_bf16_ipex": 467, "nano_jit_bf16": 467, "nano_jit_fp32_channels_last": 467, "nano_jit_fp32_ipex_channels_last": 467, "nano_jit_fp32_ipex": 467, "nano_jit_fp32": 467, "nano_onnxruntime_fp32": 467, "nano_onnxruntime_int8_qlinear": 467, "openvino": 467, "nano_openvino_fp32": 467, "nano_openvino_int8": 467, "bc": [468, 476], "conda_prefix": 468, "echo": 468, "tradit": [468, 486], "libjemalloc": 468, "libiomp5": 468, "home": 468, "lib": 468, "ld_preload": 468, "malloc_conf": 468, "oversize_threshold": 468, "background_thread": 468, "metadata_thp": 468, "dirty_decay_m": 468, "9000000000": 468, "muzzy_decay_m": 468, "kmp_affin": 468, "kmp_blocktim": 468, "dnnl_primitive_cache_capac": 468, "cpufreq": 468, "scaling_governor": 468, "powersav": 468, "tee": 468, "pytorch_jit_script": [469, 472], "pytorch_channels_last": [469, 472], "run_bench": 469, "patch": [469, 482], "patch_path": 469, "your_patch_path": 469, "sweep": 469, "sweep_object": 469, "bench_config": 469, "bench_featur": 469, "sai": 470, "run_glu": [470, 471], "requisit": 470, "task_nam": [470, 471], "do_ev": [470, 471], "remain": 470, "itself": 470, "run_glue_optim": 470, "static_ipex": 470, "auto_qu": 471, "v4": [471, 500], "albert": [471, 500], "sst2": 471, "alexnet": [471, 500], "pytorch_amp": 472, "optimize_for_infer": 472, "pytorch_jit_trac": 472, "pytorch_jit_script_ofi": 472, "pytorch_jit_trace_ofi": 472, "torchdynamo": 472, "pytorch_torchdynamo_jit_script": 472, "pytorch_torchdynamo_jit_trac": 472, "pytorch_torchdynamo_jit_script_ofi": 472, "pytorch_torchdynamo_jit_trace_ofi": 472, "pytorch_inc_bf16": 472, "pytorch_inc_static_quant_fx": 472, "pytorch_inc_static_quant_ipex": 472, "pytorch_inc_dynamic_qu": 472, "pytorch_ipex_fp32": 472, "pytorch_ipex_bf16": 472, "pytorch_ipex_int8_static_qu": 472, "pytorch_ipex_int8_dynamic_qu": 472, "blade": 472, "disc": 472, "pytorch_aliblad": 472, "pytorch_lightning_bf16_cpu": 472, "tensorflow_amp": 472, "keras_amp": 472, "tensorflow_inc": 472, "keras_inc": 472, "onnx_inc_static_quant_qlinear": 472, "onnx_inc_static_quant_qdq": 472, "onnx_inc_dynamic_qu": 472, "optimum": [472, 473], "pytorch_inc_huggingface_optimum_stat": 472, "pytorch_inc_huggingface_optimum_dynam": 472, "intel_extension_for_transform": 472, "bigdl": [472, 473], "nano": [472, 473], "nano_": 472, "inc_auto": 472, "delight": 473, "announc": 473, "v": [473, 482, 486, 497, 499], "500": 473, "jupyt": [473, 475, 476, 479], "isa": 473, "adjust": [473, 489, 494], "xpu": 473, "delta": 473, "acc_delta": 473, "int8_acc": 473, "fp32_acc": 473, "ext": [475, 477, 479, 480, 481], "lab": [475, 476, 477, 479, 480], "nodej": [475, 479], "jlpm": [475, 479], "yarn": [475, 479], "npm": [475, 476, 479], "lieu": [475, 479], "labextens": [475, 476, 479], "typescript": [475, 479], "watch": [475, 479], "immedi": [475, 479, 486], "refresh": [475, 479], "browser": [475, 479], "wait": [475, 479, 482], "rebuilt": [475, 479], "easier": [475, 479, 482, 487], "symlink": [475, 479], "down": 476, "finish": 476, "enter": [476, 482], "blank": 476, "cell": 476, "gain": [476, 485, 487], "mkl": 476, "jemalloc": 476, "pip3": 476, "headless": 476, "pyproject": [477, 480], "toml": [477, 480], "twine": [477, 480], "whl": [477, 480], "dist": [477, 480], "sdist": [477, 480], "bdist_wheel": [477, 480], "deprec": [477, 480, 492, 496], "frontend": [477, 480], "login": [477, 480, 493], "repositori": [477, 480], "cut": [477, 480], "fork": [477, 480], "admin_github_token": [477, 480], "pypi_token": [477, 480], "npm_token": [477, 480], "secret": [477, 480], "panel": [477, 480, 482], "draft": [477, 480], "changelog": [477, 480, 481], "pkg": [477, 480], "bot": [477, 480], "pick": [477, 480, 483], "feedstock": [477, 480], "hatch": 480, "notabl": 481, "vscode": [481, 483], "daili": 482, "advantag": [482, 486, 488, 497], "remot": 482, "re": [482, 491], "market": 482, "uninstal": 482, "fill": [482, 493, 496, 497], "upper": 482, "sidebar": 482, "hover": 482, "track": [482, 493], "argpars": 482, "pop": 482, "diff": 482, "manifest": 483, "declar": 483, "palett": 483, "registercommand": 483, "amodio": 483, "tsl": 483, "matcher": 483, "dbaeumer": 483, "eslint": 483, "press": 483, "f5": 483, "ctrl": 483, "hello": 483, "world": 483, "breakpoint": 483, "consol": 483, "relaunch": 483, "toolbar": 483, "node_modul": 483, "viewlet": 483, "dropdown": 483, "runner": 483, "startup": 483, "bundl": 483, "multi_object": 484, "benefit": 485, "instanti": 485, "neuron": 486, "art": 486, "grown": 486, "unpreced": 486, "increasingli": 486, "crucial": 486, "stand": [486, 497], "delet": 486, "commonli": 486, "shrink": 486, "contextu": 486, "scene": 486, "haven": 486, "color": 486, "lowest": [486, 497], "formula": [486, 494], "emsp": 486, "downstream": 486, "finetun": [486, 500], "prone": 486, "co": 486, "discourag": 486, "push": [486, 491, 494], "penal": 486, "parameter": 486, "exemplifi": 486, "complement": 486, "fortieth": 486, "miss": [486, 489], "pruner2": 486, "mention": [486, 491], "readi": 486, "hesit": 486, "sst": [486, 500], "25": [486, 494, 500], "63": [486, 494, 500], "24": [486, 494, 497, 500], "35": [486, 500], "flan": 486, "t5": 486, "english": 486, "romanian": 486, "404": [486, 500], "381": 486, "yolov5": 486, "75": [486, 494, 500], "2x1": [486, 500], "801": 486, "7895": 486, "signific": [486, 487, 494], "reduct": [486, 499], "namhoon": 486, "lee": 486, "thalaiyasingam": 486, "ajanthan": 486, "philip": 486, "torr": 486, "2019": 486, "zafrir": 486, "ofir": 486, "ariel": 486, "larei": 486, "boudoukh": 486, "mosh": 486, "wasserblat": 486, "2111": 486, "05754": 486, "2021": 486, "medium": 487, "chatbot": 487, "netflix": 487, "apr": 487, "mlperf": [487, 500], "5x": 487, "heterogen": 487, "mar": 487, "busi": 487, "jan": 487, "amx": 487, "4th": [487, 489], "mleffici": 487, "dec": 487, "wechat": 487, "deepen": 487, "foundat": 487, "intellig": 487, "vmware": 487, "applianc": 487, "bitnami": 487, "nov": 487, "sota": 487, "few": [487, 497], "plug": 487, "twitter": 487, "linkedin": 487, "zone": 487, "land": 487, "gcp": 487, "pat": 487, "keynot": 487, "intelon": 487, "sep": 487, "chines": 487, "aug": 487, "purif": 487, "sacrif": 487, "jun": 487, "partner": 487, "feb": 487, "joint": 487, "bilibili": 487, "gestalt": 487, "ml": 487, "doubl": 487, "reconstruct": 487, "abound": 487, "lpot": [487, 492], "nextplatform": 487, "cern": 487, "gan": 487, "3dgan": 487, "iml": 487, "workshop": 487, "asplo": 487, "18": [487, 500], "highli": 487, "intelcaff": 487, "aris": 488, "henc": 488, "onnxrt_qoper": 488, "quant_aware_train": 488, "weight_compress": [488, 499], "initial_spars": [488, 499], "prune_typ": [488, 499], "basic_magnitud": [488, 499], "update_frequ": 488, "prune_domain": 488, "tile_pattern_1x1": 488, "invent": 489, "int4": 489, "cost": [489, 491], "On": [489, 500], "theoret": [489, 491], "zeropoint": 489, "255": [489, 494], "overflow": 489, "solv": [489, 492], "unseen": 489, "enough": 489, "peopl": 489, "mimic": 489, "fact": 489, "ultim": 489, "pain": 489, "lossi": 489, "chart": [489, 493, 495], "understand": [489, 495, 498], "philosophi": 489, "request": 489, "neither": 489, "nor": 489, "val_load": 489, "avg": 489, "themselv": 489, "ON": 490, "forc": 490, "postposttrainingquantconfig": 490, "bf16wrapper": 490, "retrac": 490, "preval": 491, "grow": 491, "demand": 491, "w8a8": 491, "trade": 491, "bottleneck": 491, "roughli": 491, "speak": 491, "capac": [491, 493], "flop": 491, "famou": 491, "approx": 491, "bmm": 491, "100x": 491, "straightforward": [491, 494], "excel": 491, "stai": [491, 494], "89": [491, 494, 500], "weightonlylinear": 491, "date": 491, "restor": 491, "qweight": 491, "wip": 491, "gptq_arg": 491, "awq_arg": 491, "compressed_model": 491, "export_compressed_model": 491, "compression_dtyp": 491, "compression_dim": 491, "scale_dtyp": 491, "xiao": [491, 494], "guangxuan": [491, 494], "2211": [491, 494], "10438": [491, 494], "wei": [491, 494], "xiui": [491, 494], "suppress": [491, 494], "2209": [491, 494], "13325": [491, 494], "lin": 491, "ji": 491, "2306": 491, "00978": 491, "frantar": 491, "elia": 491, "site": 492, "assist": 492, "sed": 492, "your_script": 492, "backbon": 493, "interact": 493, "sigopt_experiment_id": 493, "nc": [493, 497], "suffici": 493, "ordinari": 493, "receiv": 493, "latenc": [493, 497], "8266": 493, "8372": 493, "2132": 493, "83": [493, 494, 500], "7495": 493, "8299": 493, "8294": 493, "85": [493, 494, 500], "0837": 493, "8291": 493, "4469": 493, "gigant": 494, "systemat": 494, "quantif": 494, "migrat": [494, 498], "difficulti": 494, "mathemat": 494, "allevi": 494, "coarsest": 494, "finer": [494, 497], "matric": 494, "similarli": 494, "finest": 494, "consumpt": 494, "why": [494, 495], "suppos": 494, "6839": 494, "4741": 494, "7451": 494, "9301": 494, "1742": 494, "6835": 494, "q_min": 494, "q_max": 494, "q_x": 494, "clamp_": 494, "round_": 494, "w_q": 494, "00296431384049356": 494, "59": [494, 500], "172": 494, "192": 494, "w_dq": 494, "1220": 494, "0500": 494, "1430": 494, "2570": 494, "1890": 494, "mseloss": 494, "1983354538679123": 494, "6848": 494, "4743": 494, "7440": 494, "9308": 494, "1749": 494, "385297635664756e": 494, "07": [494, 499, 500], "affect": 494, "quantize_per_channel": 494, "x_tmp": 494, "detach": 494, "keepdim": 494, "dequantize_per_channel": 494, "0029": [494, 500], "0036": 494, "162": [494, 500], "48": [494, 500], "72": [494, 500], "93": [494, 500], "207": 494, "139": 494, "6837": 494, "4734": 494, "1751": 494, "6821": 494, "637690492221736e": 494, "6376e": 494, "3852e": 494, "cdot": 494, "quantize_per_tensor_absmax": 494, "n_bit": 494, "div_": 494, "0806": 494, "7589": 494, "6038": 494, "3815": 494, "5040": 494, "7174": 494, "5444": 494, "5826": 494, "7772": 494, "5555": 494, "3740": 494, "3253": 494, "0698": 494, "1381": 494, "5972": 494, "0086": 494, "0737": 494, "8298": 494, "6883": 494, "2991": 494, "1601": 494, "6506": 494, "8246": 494, "3924": 494, "3845": 494, "8768": 494, "w_scale": 494, "x_q": 494, "x_scale": 494, "84": [494, 500], "120": 494, "0059755356051027775": 494, "119": 494, "57": [494, 500], "91": [494, 500], "006533813662827015": 494, "y_q": 494, "17509": 494, "7608": 494, "4055": 494, "16599": 494, "21020": 494, "10016": 494, "9860": 494, "22444": 494, "y_dq": 494, "6836": 494, "2970": 494, "1583": 494, "6481": 494, "8207": 494, "3911": 494, "3850": 494, "8763": 494, "though": 494, "simplic": 494, "middl": 494, "denot": 494, "fp1": 494, "fp2": 494, "subsect": [494, 499], "even": 494, "intuit": 494, "x1": [494, 497], "x2": [494, 497], "herebi": 494, "recalcul": 494, "sq": 494, "overhead": 494, "hardtanh": 494, "t5norm": 494, "llamanorm": 494, "groupnorm": 494, "lambada": 494, "sweet": 494, "spot": 494, "region": 494, "bigscienc": 494, "560m": 494, "65": [494, 500], "44": [494, 500], "66": [494, 500], "76": [494, 500], "1b7": 494, "71": [494, 500], "43": [494, 500], "67": [494, 500], "78": [494, 496, 500], "56": [494, 500], "58": [494, 500], "55": [494, 500], "3b": 494, "73": [494, 500], "69": [494, 500], "74": [494, 500], "7b1": 494, "77": [494, 500], "46": [494, 500], "17": [494, 500], "82": [494, 500], "52": [494, 500], "facebook": 494, "125m": 494, "41": [494, 500], "70": [494, 500], "94": [494, 496, 500], "79": [494, 495, 500], "60": [494, 500], "81": [494, 500], "26": [494, 500], "39": [494, 500], "68": [494, 496, 500], "eleutherai": [494, 500], "6b": [494, 500], "29": [494, 500], "96": [494, 500], "jason": 494, "emerg": 494, "transact": 494, "yvinec": 494, "edouard": 494, "proceed": 494, "cvf": 494, "winter": 494, "valuabl": 495, "instrument": 495, "writer": 495, "_pre_eval_hook": 495, "_post_eval_hook": 495, "submodul": 495, "whitelist": 495, "_recordingobserv": 495, "output_tensors_dict": 495, "current_it": 495, "get_tensor_valu": 495, "_observer_forward_hook": 495, "activation_post_process": 495, "_add_observer_": 495, "named_children": 495, "leaf": 495, "add_modul": 495, "register_forward_hook": 495, "dump_tim": 495, "summarywrit": 495, "_acc": 495, "tune_": 495, "add_graph": 495, "get_observer_dict": 495, "observer_dict": 495, "is_quant": 495, "add_histogram": 495, "shell": 495, "bind_al": 495, "logdir_spec": 495, "tune_0_acc0": 495, "tune_1": 495, "tune_1_acc0": 495, "four": 495, "baseline_acc_0": 495, "776": 495, "tune_1_acc_0": 495, "095": 495, "runs_v3": 495, "run_tuning_dump_tensor": 495, "sh": 495, "inceptionv3": 495, "bash": 495, "run_quant": 495, "topologi": 495, "inception_v3": 495, "inceptionv3_fp32_pretrained_model": 495, "nc_inceptionv3": 495, "inceptionv3_dump_tensor": 495, "poor": 495, "eightbit": 495, "disappear": 495, "centercrop": 496, "randomcrop": 496, "cropres": 496, "decodeimag": 496, "jpeg": 496, "encodejp": 496, "alignimagechannel": 496, "116": 496, "103": 496, "017": 496, "bilinearimagenet": [496, 499], "topilimag": 496, "padding_mod": 496, "border": 496, "pixel": 496, "edg": 496, "colorjitt": 496, "bright": 496, "satur": 496, "hue": 496, "jitter": 496, "tondarrai": 496, "quickli": [497, 498], "human": 497, "concret": 497, "aggress": 497, "classic": 497, "flowchart": 497, "htmllabel": 497, "td": 497, "classdef": 497, "itemstyl": 497, "cce5ff": 497, "stroke": 497, "99ccff": 497, "s1": 497, "s2": 497, "s3": 497, "s4": 497, "s5": 497, "s6": 497, "s7": 497, "nbsp": 497, "subgraphstyl": 497, "ffffff": 497, "attempt": 497, "post_training_auto_qu": 497, "trial": 497, "increment": 497, "ii": 497, "highest": 497, "spent": 497, "hawq_v2_loss": 497, "model_loss": 497, "black": 497, "compli": 497, "posterior": 497, "short": 497, "loglevel": 497, "endlessli": 497, "perspect": 497, "smbo": 497, "appl": 497, "surrog": 497, "densiti": 497, "parzen": 497, "greatest": 497, "hour": 497, "dai": 497, "next_tune_cfg": 497, "overridden": 497, "cluster": 497, "seamlessli": 497, "mpi": 497, "replic": 497, "replica": 497, "fed": 497, "synchron": 497, "mpirun": 497, "number_of_process": 497, "run_cmd": 497, "abctunestrategi": 497, "familiar": 498, "notebook": 498, "introduct": 498, "organ": 499, "logic": 499, "mobilenet_v1": 499, "40": [499, 500], "06": [499, 500], "beta_1": 499, "beta_2": 499, "epsilon": 499, "sparsecategoricalcrossentropi": 499, "sum_over_batch_s": 499, "from_logit": 499, "54": [499, 500], "19": [499, 500], "1x": 500, "platinum": 500, "8480": 500, "8ghz": 500, "ht": 500, "turbo": 500, "256gb": 500, "16x16gb": 500, "ddr5": 500, "4800": 500, "mt": 500, "bio": 500, "3a14": 500, "tel2p1": 500, "microcod": 500, "0x2b0001b0": 500, "gcc": 500, "20210514": 500, "red": 500, "hat": 500, "visit": 500, "1s4c14ins1bsthroughput": 500, "sec": 500, "2721": 500, "638": 500, "26x": 500, "23": 500, "31": 500, "2123": 500, "552": 500, "84x": 500, "resnet101": 500, "37": 500, "1477": 500, "432": 500, "42x": 500, "incept": 500, "3267": 500, "92": 500, "1266": 500, "03": 500, "58x": 500, "38": 500, "2399": 500, "1098": 500, "18x": 500, "v3": 500, "1593": 500, "508": 500, "13x": 500, "1032": 500, "249": 500, "14x": 500, "34": 500, "427": 500, "185": 500, "30x": 500, "5503": 500, "1791": 500, "62": 500, "07x": 500, "3639": 500, "1864": 500, "95x": 500, "47": 500, "1538": 500, "236": 500, "51x": 500, "vgg19": 500, "1368": 500, "196": 500, "resnetv2": 500, "1105": 500, "657": 500, "68x": 500, "716": 500, "49": 500, "369": 500, "94x": 500, "152": 500, "269": 500, "89x": 500, "densenet": 500, "121": 500, "617": 500, "498": 500, "24x": 500, "161": 500, "372": 500, "242": 500, "54x": 500, "169": 500, "496": 500, "411": 500, "21x": 500, "efficientnet": 500, "b0": 500, "748": 500, "709": 500, "05x": 500, "00": 500, "134": 500, "34x": 500, "1273": 500, "671": 500, "90x": 500, "136": 500, "53": 500, "1235": 500, "477": 500, "09": 500, "179": 500, "85x": 500, "cnn": 500, "79x": 500, "83x": 500, "156": 500, "67x": 500, "23x": 500, "173": 500, "00x": 500, "yolov3": 500, "211": 500, "41x": 500, "82x": 500, "61": 500, "49x": 500, "86": 500, "424": 500, "174": 500, "44x": 500, "29x": 500, "55612": 500, "43479": 500, "28x": 500, "1s56c1ins1bsthroughput": 500, "65x": 500, "gpt2": 500, "2716": 500, "569": 500, "77x": 500, "2683": 500, "476": 500, "64x": 500, "2349": 500, "1035": 500, "27x": 500, "930": 500, "763": 500, "262": 500, "91x": 500, "4003": 500, "1677": 500, "39x": 500, "2766": 500, "36": 500, "2643": 500, "1495": 500, "238": 500, "1372": 500, "199": 500, "88x": 500, "1457": 500, "630": 500, "31x": 500, "842": 500, "338": 500, "645": 500, "231": 500, "938": 500, "707": 500, "33x": 500, "1533": 500, "1258": 500, "22x": 500, "981": 500, "647": 500, "52x": 500, "850": 500, "444": 500, "37x": 500, "543": 500, "74x": 500, "93x": 500, "947": 500, "233": 500, "788": 500, "462": 500, "71x": 500, "15x": 500, "51958": 500, "39974": 500, "1631": 500, "662": 500, "46x": 500, "1162": 500, "330": 500, "968": 500, "334": 500, "resnest50": 500, "394": 500, "resnext101_32x8d": 500, "558": 500, "108": 500, "efficientnet_b0": 500, "703": 500, "656": 500, "efficientnet_b3": 500, "510": 500, "391": 500, "efficientnet_b7": 500, "150": 500, "55x": 500, "peleenet": 500, "857": 500, "585": 500, "yolo": 500, "160": 500, "66x": 500, "141": 500, "407": 500, "camembert": 500, "402": 500, "32x": 500, "343": 500, "804": 500, "352": 500, "17x": 500, "302": 500, "183": 500, "382": 500, "19x": 500, "35x": 500, "51": 500, "414": 500, "stsb": 500, "413": 500, "410": 500, "138": 500, "69x": 500, "385": 500, "76x": 500, "126": 500, "wikitext": 500, "reform": 500, "crime": 500, "punish": 500, "449": 500, "364": 500, "lvwerra": 500, "pegasu": 500, "samsum": 500, "openai": 500, "whisper": 500, "abeja": 500, "neox": 500, "japanes": 500, "1723": 500, "654": 500, "63x": 500, "1141": 500, "306": 500, "73x": 500, "106": 500, "1379": 500, "729": 500, "389": 500, "25x": 500, "1980": 500, "672": 500, "5032": 500, "1500": 500, "resnext101_32x16d_wsl": 500, "533": 500, "36x": 500, "556": 500, "149": 500, "1412": 500, "710": 500, "99x": 500, "1564": 500, "712": 500, "20x": 500, "1377": 500, "719": 500, "1446": 500, "06x": 500, "1579": 500, "747": 500, "11x": 500, "1508": 500, "749": 500, "01x": 500, "6950": 500, "4214": 500, "6881": 500, "4192": 500, "6563": 500, "3804": 500, "6631": 500, "3922": 500, "423": 500, "158": 500, "571": 500, "53x": 500, "598": 500, "163": 500, "594": 500, "164": 500, "62x": 500, "5473": 500, "2567": 500, "5455": 500, "2563": 500, "shufflenet": 500, "6818": 500, "3839": 500, "78x": 500, "5750": 500, "3861": 500, "googlenet": 500, "1783": 500, "1095": 500, "1755": 500, "1071": 500, "squeezenet": 500, "9918": 500, "5639": 500, "9423": 500, "5501": 500, "caffenet": 500, "3363": 500, "1015": 500, "3276": 500, "798": 500, "10x": 500, "2104": 500, "985": 500, "2054": 500, "745": 500, "zfnet": 500, "864": 500, "866": 500, "455": 500, "1802": 500, "1170": 500, "1813": 500, "1164": 500, "56x": 500, "2615": 500, "1349": 500, "2343": 500, "1322": 500, "499": 500, "1288": 500, "878": 500, "47x": 500, "1173": 500, "851": 500, "38x": 500, "1114": 500, "825": 500, "1056": 500, "792": 500, "669": 500, "140": 500, "110": 500, "yolov4": 500, "12x": 500, "duc": 500, "tini": 500, "1163": 500, "993": 500, "ultra": 500, "8501": 500, "1922": 500, "emot": 500, "ferplu": 500, "3552": 500, "3114": 500, "arcfac": 500, "246": 500, "399": 500, "226": 500, "392": 500, "223": 500, "integerop": 500, "474": 500, "222": 500, "557": 500, "963": 500, "529": 500, "603": 500, "398": 500, "187": 500, "96x": 500, "144": 500, "124": 500, "bidaf": 500, "2757": 500, "2279": 500, "lm": 500, "357": 500, "472": 500, "365": 500, "214": 500, "70x": 500, "489": 500, "212": 500, "213": 500, "61x": 500, "270": 500, "215": 500, "491": 500, "l12": 500, "h384": 500, "1051": 500, "583": 500, "80x": 500, "1076": 500, "589": 500, "896": 500, "396": 500, "753": 500, "274": 500, "210": 500, "271": 500, "l6": 500, "1124": 500, "2010": 500, "1127": 500, "401": 500, "494": 500, "electra": 500, "discrimin": 500, "1804": 500, "1154": 500, "1961": 500, "1158": 500, "mini": 500, "4986": 500, "3444": 500, "45x": 500, "5603": 500, "3320": 500, "bart": 500, "deberta": 500, "147": 500, "170": 500, "16x": 500, "spanbert": 500, "multilingu": 500, "159": 500, "distilgpt2": 500, "layoutlm": 500, "funsd": 500, "50x": 500, "layoutlmv3": 500, "fcn": 500, "taskdataset": 500, "accuracyspars": 500, "ratiospars": 500, "commentsbalancedor": 500, "unbalanc": 500, "answeringsquad": 500, "87f1": 500, "momentumunbalanc": 500, "momentumbalanc": 500, "90f1": 500, "59f1": 500, "23f1": 500, "classificationmrpc": 500, "52f1": 500, "26f1": 500, "classificationsst": 500, "61accuraci": 500, "recognitionimagenet": 500, "95top1": 500, "v5s6": 500, "detectioncoco": 500, "ap0": 500, "6ap0": 500, "393": 500, "584": 500, "34f1": 500, "lassounbalanc": 500, "classificationmnli": 500, "mm": 500, "allbalanc": 500, "32accuraci": 500, "sensitivitybalanc": 500, "classificationqqp": 500, "classificationqnli": 500, "54accuraci": 500, "em": 500, "mobilenetv2": 500, "7965": 500, "wideresnet40": 500, "9522": 500, "8178": 500, "0213": 500, "8235": 500, "027": 500, "5494": 500, "7153": 500, "5540": 500, "0046": 500, "5523": 500, "vgg": 500, "bn": 500, "7022": 500, "7415": 500, "7025": 500, "0003": 500, "6739": 500, "7399": 500, "6845": 500, "0106": 500, "blendcnn": 500, "7034": 500, "8382": 500, "bilstm": 500, "8314": 500, "9403": 500, "9048": 500, "0734": 500, "7323": 500, "8256": 500, "8084": 500, "8814": 500, "7442": 500, "8371": 500, "0119": 500, "0115": 500, "tinybert": 500, "8018": 500, "8044": 500, "8363": 500, "8411": 500, "8025": 500, "8074": 500, "0007": 500, "0030": 500, "8626": 500, "8213": 500, "9091": 500, "8782": 500, "8684": 500, "8259": 500, "0058": 500, "distilroberta": 500, "6057": 500, "6455": 500, "6187": 500, "0130": 500, "c6i": 500, "2xlarg": 500, "c6a": 500, "c6g": 500, "a100cuda": 500, "executionprovid": 500}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [342, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "adaptor"], [168, 0, 0, "-", "algorithm"], [171, 0, 0, "-", "benchmark"], [179, 0, 0, "-", "compression"], [207, 0, 0, "-", "conf"], [209, 0, 0, "-", "config"], [210, 0, 0, "-", "contrib"], [235, 0, 0, "-", "data"], [289, 0, 0, "-", "experimental"], [349, 0, 0, "-", "metric"], [351, 0, 0, "-", "mix_precision"], [353, 0, 0, "-", "model"], [361, 0, 0, "-", "objective"], [362, 0, 0, "-", "profiling"], [384, 0, 0, "-", "quantization"], [392, 0, 0, "-", "strategy"], [404, 0, 0, "-", "template"], [405, 0, 0, "-", "training"], [409, 0, 0, "-", "utils"], [418, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "adaptor"], [3, 0, 0, "-", "keras"], [7, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [17, 0, 0, "-", "ox_utils"], [45, 0, 0, "-", "pytorch"], [46, 0, 0, "-", "query"], [47, 0, 0, "-", "tensorflow"], [111, 0, 0, "-", "tf_utils"], [152, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[1, 1, 1, "", "Adaptor"], [1, 2, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[3, 1, 1, "", "KerasAdaptor"], [3, 1, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras_utils": [[4, 0, 0, "-", "conv2d"], [5, 0, 0, "-", "dense"], [6, 0, 0, "-", "depthwise_conv2d"], [8, 0, 0, "-", "pool2d"], [9, 0, 0, "-", "quantizer"], [10, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, 1, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 1, 1, "", "CalibCollector"], [13, 1, 1, "", "CalibData"], [13, 1, 1, "", "CollectorBase"], [13, 1, 1, "", "DataIterLoader"], [13, 1, 1, "", "DataLoaderWrap"], [13, 1, 1, "", "NameCollector"], [13, 1, 1, "", "OpType"], [13, 1, 1, "", "TensorCollector"], [13, 2, 1, "", "amp_convert"], [13, 2, 1, "", "calib_model"], [13, 2, 1, "", "check_mx_version"], [13, 2, 1, "", "combine_capabilities"], [13, 2, 1, "", "create_data_example"], [13, 2, 1, "", "distribute_calib_tensors"], [13, 2, 1, "", "ensure_list"], [13, 2, 1, "", "fuse"], [13, 2, 1, "", "get_framework_name"], [13, 2, 1, "", "is_model_quantized"], [13, 2, 1, "", "isiterable"], [13, 2, 1, "", "make_module"], [13, 2, 1, "", "make_nc_model"], [13, 2, 1, "", "make_symbol_block"], [13, 2, 1, "", "ndarray_to_device"], [13, 2, 1, "", "parse_tune_config"], [13, 2, 1, "", "prepare_dataloader"], [13, 2, 1, "", "prepare_model"], [13, 2, 1, "", "prepare_model_data"], [13, 2, 1, "", "quantize_sym_model"], [13, 2, 1, "", "query_quantizable_nodes"], [13, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[14, 1, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 1, 1, "", "ONNXRT_QDQAdaptor"], [14, 1, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 1, 1, "", "ONNXRT_WeightOnlyAdaptor"], [14, 1, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [16, 0, 0, "-", "calibrator"], [29, 0, 0, "-", "operators"], [41, 0, 0, "-", "quantizer"], [42, 0, 0, "-", "smooth_quant"], [43, 0, 0, "-", "util"], [44, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, 1, 1, "", "CalibratorBase"], [16, 1, 1, "", "HistogramCollector"], [16, 1, 1, "", "KLCalibrator"], [16, 1, 1, "", "MinMaxCalibrator"], [16, 1, 1, "", "PercentileCalibrator"], [16, 2, 1, "", "calib_registry"], [16, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[18, 0, 0, "-", "activation"], [19, 0, 0, "-", "argmax"], [20, 0, 0, "-", "attention"], [21, 0, 0, "-", "binary_op"], [22, 0, 0, "-", "concat"], [23, 0, 0, "-", "conv"], [24, 0, 0, "-", "direct_q8"], [25, 0, 0, "-", "embed_layernorm"], [26, 0, 0, "-", "gather"], [27, 0, 0, "-", "gavgpool"], [28, 0, 0, "-", "gemm"], [30, 0, 0, "-", "lstm"], [31, 0, 0, "-", "matmul"], [32, 0, 0, "-", "maxpool"], [33, 0, 0, "-", "norm"], [34, 0, 0, "-", "ops"], [35, 0, 0, "-", "pad"], [36, 0, 0, "-", "pooling"], [37, 0, 0, "-", "reduce"], [38, 0, 0, "-", "resize"], [39, 0, 0, "-", "split"], [40, 0, 0, "-", "unary_op"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, 1, 1, "", "ActivationOperator"], [18, 1, 1, "", "Float16ActivationOperator"], [18, 1, 1, "", "QActivationOperator"], [18, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, 1, 1, "", "ArgMaxOperator"], [19, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, 1, 1, "", "AttentionOperator"], [20, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, 1, 1, "", "BinaryOperator"], [21, 1, 1, "", "Float16BinaryOperator"], [21, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, 1, 1, "", "ConcatOperator"], [22, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, 1, 1, "", "ConvOperator"], [23, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, 1, 1, "", "Direct8BitOperator"], [24, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, 1, 1, "", "EmbedLayerNormalizationOperator"], [25, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, 1, 1, "", "GatherOperator"], [26, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, 1, 1, "", "GlobalAveragePoolOperator"], [27, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, 1, 1, "", "GemmOperator"], [28, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, 1, 1, "", "FusedMatMulOperator"], [31, 1, 1, "", "MatMulOperator"], [31, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, 1, 1, "", "MaxPoolOperator"], [32, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, 1, 1, "", "BatchNormalizationOperator"], [33, 1, 1, "", "NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, 1, 1, "", "Operator"], [34, 1, 1, "", "QOperator"], [34, 2, 1, "", "op_registry"], [34, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, 1, 1, "", "PadOperator"], [35, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, 1, 1, "", "PoolOperator"], [36, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, 1, 1, "", "ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, 1, 1, "", "QResizeOperator"], [38, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, 1, 1, "", "QSplitOperator"], [39, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, 1, 1, "", "UnaryOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, 1, 1, "", "ORTSmoothQuant"], [42, 2, 1, "", "get_quant_dequant_output"], [42, 2, 1, "", "make_sub_graph"], [42, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[43, 1, 1, "", "QuantFormat"], [43, 1, 1, "", "QuantType"], [43, 1, 1, "", "QuantizationMode"], [43, 1, 1, "", "QuantizedInitializer"], [43, 1, 1, "", "QuantizedValue"], [43, 1, 1, "", "QuantizedValueType"], [43, 1, 1, "", "ValueInfo"], [43, 2, 1, "", "attribute_to_kwarg"], [43, 2, 1, "", "calculate_scale_zp"], [43, 2, 1, "", "cast_tensor"], [43, 2, 1, "", "collate_preds"], [43, 2, 1, "", "dequantize_data"], [43, 2, 1, "", "dequantize_data_with_scale_zero"], [43, 2, 1, "", "dtype_to_name"], [43, 2, 1, "", "find_by_name"], [43, 2, 1, "", "float_to_bfloat16"], [43, 2, 1, "", "float_to_float16"], [43, 2, 1, "", "is_B_transposed"], [43, 2, 1, "", "make_dquant_node"], [43, 2, 1, "", "make_quant_node"], [43, 2, 1, "", "quantize_data"], [43, 2, 1, "", "quantize_data_per_channel"], [43, 2, 1, "", "quantize_data_with_scale_zero"], [43, 2, 1, "", "quantize_nparray"], [43, 2, 1, "", "remove_init_from_model_input"], [43, 2, 1, "", "split_shared_bias"], [43, 2, 1, "", "to_numpy"], [43, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, 2, 1, "", "apply_awq_clip"], [44, 2, 1, "", "apply_awq_scale"], [44, 2, 1, "", "awq_quantize"], [44, 2, 1, "", "get_weight_scale"], [44, 2, 1, "", "gptq"], [44, 2, 1, "", "gptq_quantize"], [44, 2, 1, "", "prepare_inputs"], [44, 2, 1, "", "qdq_tensor"], [44, 2, 1, "", "rtn_quantize"]], "neural_compressor.adaptor.pytorch": [[45, 1, 1, "", "PyTorchAdaptor"], [45, 1, 1, "", "PyTorchQuery"], [45, 1, 1, "", "PyTorchWeightOnlyAdaptor"], [45, 1, 1, "", "PyTorch_FXAdaptor"], [45, 1, 1, "", "PyTorch_IPEXAdaptor"], [45, 1, 1, "", "TemplateAdaptor"], [45, 2, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[46, 1, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[47, 1, 1, "", "TensorFlowAdaptor"], [47, 1, 1, "", "TensorflowQuery"], [47, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[48, 0, 0, "-", "graph_converter"], [49, 0, 0, "-", "graph_converter_without_calib"], [87, 0, 0, "-", "graph_rewriter"], [110, 0, 0, "-", "graph_util"], [112, 0, 0, "-", "quantize_graph"], [139, 0, 0, "-", "quantize_graph_common"], [140, 0, 0, "-", "smooth_quant_calibration"], [141, 0, 0, "-", "smooth_quant_scaler"], [142, 0, 0, "-", "tf2onnx_converter"], [145, 0, 0, "-", "transform_graph"], [148, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[51, 0, 0, "-", "bf16"], [76, 0, 0, "-", "generic"], [86, 0, 0, "-", "graph_base"], [95, 0, 0, "-", "int8"], [101, 0, 0, "-", "onnx"], [106, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[52, 0, 0, "-", "convert_add_to_biasadd"], [53, 0, 0, "-", "convert_layout"], [54, 0, 0, "-", "convert_leakyrelu"], [55, 0, 0, "-", "convert_nan_to_random"], [56, 0, 0, "-", "convert_placeholder_to_const"], [57, 0, 0, "-", "dequantize_cast_optimizer"], [58, 0, 0, "-", "dilated_contraction"], [59, 0, 0, "-", "dummy_biasadd"], [60, 0, 0, "-", "expanddims_optimizer"], [61, 0, 0, "-", "fetch_weight_from_reshape"], [62, 0, 0, "-", "fold_batch_norm"], [63, 0, 0, "-", "fold_constant"], [64, 0, 0, "-", "fuse_biasadd_add"], [65, 0, 0, "-", "fuse_column_wise_mul"], [66, 0, 0, "-", "fuse_conv_with_math"], [67, 0, 0, "-", "fuse_decomposed_bn"], [68, 0, 0, "-", "fuse_decomposed_in"], [69, 0, 0, "-", "fuse_gelu"], [70, 0, 0, "-", "fuse_layer_norm"], [71, 0, 0, "-", "fuse_pad_with_conv"], [72, 0, 0, "-", "fuse_pad_with_fp32_conv"], [73, 0, 0, "-", "fuse_reshape_transpose"], [74, 0, 0, "-", "graph_cse_optimizer"], [75, 0, 0, "-", "grappler_pass"], [77, 0, 0, "-", "insert_print_node"], [78, 0, 0, "-", "move_squeeze_after_relu"], [79, 0, 0, "-", "pre_optimize"], [80, 0, 0, "-", "remove_training_nodes"], [81, 0, 0, "-", "rename_batch_norm"], [82, 0, 0, "-", "split_shared_input"], [83, 0, 0, "-", "strip_equivalent_nodes"], [84, 0, 0, "-", "strip_unused_nodes"], [85, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[52, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[53, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[54, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[55, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[56, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[57, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, 1, 1, "", "FuseDecomposedBNOptimizer"], [67, 2, 1, "", "bypass_reshape"], [67, 2, 1, "", "get_const_dim_count"], [67, 2, 1, "", "node_from_map"], [67, 2, 1, "", "node_name_from_input"], [67, 2, 1, "", "valid_reshape_inputs"], [67, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, 1, 1, "", "FuseDecomposedINOptimizer"], [68, 2, 1, "", "bypass_reshape"], [68, 2, 1, "", "get_const_dim_count"], [68, 2, 1, "", "node_from_map"], [68, 2, 1, "", "node_name_from_input"], [68, 2, 1, "", "valid_reshape_inputs"], [68, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, 1, 1, "", "FuseLayerNormOptimizer"], [70, 2, 1, "", "node_from_map"], [70, 2, 1, "", "node_name_from_input"], [70, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[88, 0, 0, "-", "freeze_fake_quant"], [89, 0, 0, "-", "freeze_value"], [90, 0, 0, "-", "freeze_value_without_calib"], [91, 0, 0, "-", "fuse_conv_redundant_dequantize"], [92, 0, 0, "-", "fuse_conv_requantize"], [93, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [94, 0, 0, "-", "fuse_matmul_requantize"], [96, 0, 0, "-", "meta_op_optimizer"], [97, 0, 0, "-", "post_hostconst_converter"], [98, 0, 0, "-", "post_quantized_op_cse"], [99, 0, 0, "-", "rnn_convert"], [100, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [94, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [94, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[102, 0, 0, "-", "onnx_graph"], [103, 0, 0, "-", "onnx_node"], [104, 0, 0, "-", "onnx_schema"], [105, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, 1, 1, "", "OnnxOpSchema"], [104, 2, 1, "", "get_max_supported_opset_version"], [104, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, 1, 1, "", "SeqType"], [105, 2, 1, "", "add_port_to_name"], [105, 2, 1, "", "are_shapes_equal"], [105, 2, 1, "", "assert_error"], [105, 2, 1, "", "compute_const_folding_using_tf"], [105, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [105, 2, 1, "", "find_opset"], [105, 2, 1, "", "get_index_from_strided_slice_of_shape"], [105, 2, 1, "", "get_subgraphs_from_onnx"], [105, 2, 1, "", "get_tensorflow_node_attr"], [105, 2, 1, "", "get_tensorflow_node_shape_attr"], [105, 2, 1, "", "get_tensorflow_tensor_data"], [105, 2, 1, "", "get_tensorflow_tensor_shape"], [105, 2, 1, "", "infer_onnx_shape_dtype"], [105, 2, 1, "", "initialize_name_counter"], [105, 2, 1, "", "is_list_or_tuple"], [105, 2, 1, "", "is_onnx_domain"], [105, 2, 1, "", "make_onnx_inputs_outputs"], [105, 2, 1, "", "make_onnx_shape"], [105, 2, 1, "", "map_numpy_to_onnx_dtype"], [105, 2, 1, "", "map_onnx_to_numpy_type"], [105, 2, 1, "", "map_tensorflow_dtype"], [105, 2, 1, "", "read_tensorflow_node_attrs"], [105, 2, 1, "", "save_protobuf"], [105, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[107, 0, 0, "-", "insert_qdq_pattern"], [108, 0, 0, "-", "merge_duplicated_qdq"], [109, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, 1, 1, "", "GraphAnalyzer"], [110, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[114, 0, 0, "-", "qat"], [130, 0, 0, "-", "qdq"], [132, 0, 0, "-", "quantize_graph_base"], [133, 0, 0, "-", "quantize_graph_bn"], [134, 0, 0, "-", "quantize_graph_concatv2"], [135, 0, 0, "-", "quantize_graph_conv"], [136, 0, 0, "-", "quantize_graph_for_intel_cpu"], [137, 0, 0, "-", "quantize_graph_matmul"], [138, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, 0, 0, "-", "fake_quantize"], [115, 0, 0, "-", "quantize_config"], [116, 0, 0, "-", "quantize_helper"], [117, 0, 0, "-", "quantize_layers"], [122, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, 1, 1, "", "FakeQuantize"], [113, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, 2, 1, "", "init_quantize_config"], [116, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[118, 0, 0, "-", "optimize_layer"], [119, 0, 0, "-", "quantize_layer_add"], [120, 0, 0, "-", "quantize_layer_base"], [121, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, 1, 1, "", "QuantizeWrapper"], [122, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[123, 0, 0, "-", "fuse_qdq_bn"], [124, 0, 0, "-", "fuse_qdq_concatv2"], [125, 0, 0, "-", "fuse_qdq_conv"], [126, 0, 0, "-", "fuse_qdq_deconv"], [127, 0, 0, "-", "fuse_qdq_in"], [128, 0, 0, "-", "fuse_qdq_matmul"], [129, 0, 0, "-", "fuse_qdq_pooling"], [131, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, 1, 1, "", "QuantizeGraphBase"], [132, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, 1, 1, "", "SmoothQuantCalibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, 1, 1, "", "SmoothQuantScaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[143, 0, 0, "-", "bias_correction"], [144, 0, 0, "-", "graph_transform_base"], [146, 0, 0, "-", "insert_logging"], [147, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[148, 2, 1, "", "collate_tf_preds"], [148, 2, 1, "", "disable_random"], [148, 2, 1, "", "fix_ref_type_of_graph_def"], [148, 2, 1, "", "generate_feed_dict"], [148, 2, 1, "", "get_estimator_graph"], [148, 2, 1, "", "get_graph_def"], [148, 2, 1, "", "get_input_output_node_names"], [148, 2, 1, "", "get_model_input_shape"], [148, 2, 1, "", "get_tensor_by_name"], [148, 2, 1, "", "get_tensor_val_from_graph_node"], [148, 2, 1, "", "get_weight_from_input_tensor"], [148, 2, 1, "", "int8_node_name_reverse"], [148, 2, 1, "", "is_ckpt_format"], [148, 2, 1, "", "is_saved_model_format"], [148, 2, 1, "", "iterator_sess_run"], [148, 2, 1, "", "read_graph"], [148, 2, 1, "", "strip_equivalent_nodes"], [148, 2, 1, "", "strip_unused_nodes"], [148, 2, 1, "", "tf_diagnosis_helper"], [148, 2, 1, "", "version1_eq_version2"], [148, 2, 1, "", "version1_gt_version2"], [148, 2, 1, "", "version1_gte_version2"], [148, 2, 1, "", "version1_lt_version2"], [148, 2, 1, "", "version1_lte_version2"], [148, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[149, 0, 0, "-", "bf16_convert"], [150, 0, 0, "-", "gptq"], [151, 0, 0, "-", "hawq_metric"], [153, 0, 0, "-", "layer_wise_quant"], [158, 0, 0, "-", "mixed_precision"], [159, 0, 0, "-", "model_wrapper"], [160, 0, 0, "-", "pattern_detector"], [161, 0, 0, "-", "smooth_quant"], [162, 0, 0, "-", "symbolic_trace"], [163, 0, 0, "-", "teq"], [164, 0, 0, "-", "util"], [165, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[149, 1, 1, "", "BF16ModuleWrapper"], [149, 2, 1, "", "Convert"], [149, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.gptq": [[150, 1, 1, "", "GPTQ"], [150, 1, 1, "", "GPTQuantizer"], [150, 2, 1, "", "find_layers"], [150, 2, 1, "", "find_layers_name"], [150, 2, 1, "", "is_leaf"], [150, 2, 1, "", "log_quantizable_layers_per_transformer"], [150, 2, 1, "", "quantize"], [150, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[151, 1, 1, "", "HessianTrace"], [151, 1, 1, "", "Node_collector"], [151, 2, 1, "", "compare_weights"], [151, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[154, 0, 0, "-", "modified_pickle"], [155, 0, 0, "-", "quantize"], [156, 0, 0, "-", "torch_load"], [157, 0, 0, "-", "utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[154, 3, 1, "", "PickleError"], [154, 3, 1, "", "PicklingError"], [154, 3, 1, "", "UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[155, 1, 1, "", "LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[156, 2, 1, "", "load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[157, 2, 1, "", "dowload_hf_model"], [157, 2, 1, "", "get_children"], [157, 2, 1, "", "get_named_children"], [157, 2, 1, "", "get_super_module_by_name"], [157, 2, 1, "", "load_layer_wise_quantized_model"], [157, 2, 1, "", "load_shell"], [157, 2, 1, "", "load_tensor"], [157, 2, 1, "", "load_tensor_from_shard"], [157, 2, 1, "", "update_module"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[158, 2, 1, "", "ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[159, 1, 1, "", "FakeAffineTensorQuantFunction"], [159, 1, 1, "", "TEQLinearFakeQuant"], [159, 1, 1, "", "TEQMulLinear"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[160, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[161, 1, 1, "", "GraphTrace"], [161, 1, 1, "", "TorchSmoothQuant"], [161, 2, 1, "", "get_module"], [161, 2, 1, "", "set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[162, 2, 1, "", "symbolic_trace"], [162, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.teq": [[163, 1, 1, "", "TEQuantizer"]], "neural_compressor.adaptor.torch_utils.util": [[164, 2, 1, "", "append_attr"], [164, 2, 1, "", "auto_copy"], [164, 2, 1, "", "calculate_quant_min_max"], [164, 2, 1, "", "check_cfg_and_qconfig"], [164, 2, 1, "", "collate_torch_preds"], [164, 2, 1, "", "collect_weight_info"], [164, 2, 1, "", "fetch_module"], [164, 2, 1, "", "generate_activation_observer"], [164, 2, 1, "", "get_depth"], [164, 2, 1, "", "get_dict_at_depth"], [164, 2, 1, "", "get_element_under_depth"], [164, 2, 1, "", "get_embedding_contiguous"], [164, 2, 1, "", "get_example_input"], [164, 2, 1, "", "get_fallback_order"], [164, 2, 1, "", "get_mse_order_per_fp32"], [164, 2, 1, "", "get_mse_order_per_int8"], [164, 2, 1, "", "get_op_type_by_name"], [164, 2, 1, "", "get_quantizable_ops_from_cfgs"], [164, 2, 1, "", "get_torch_version"], [164, 2, 1, "", "input2tuple"], [164, 2, 1, "", "is_fused_module"], [164, 2, 1, "", "match_datatype_pattern"], [164, 2, 1, "", "paser_cfgs"], [164, 2, 1, "", "set_module"], [164, 2, 1, "", "simple_inference"], [164, 2, 1, "", "update_sq_scale"]], "neural_compressor.adaptor.torch_utils.weight_only": [[165, 2, 1, "", "awq_quantize"], [165, 2, 1, "", "get_module_input_output"], [165, 2, 1, "", "gptq_quantize"], [165, 2, 1, "", "qdq_weight_actor"], [165, 2, 1, "", "qdq_weight_asym"], [165, 2, 1, "", "qdq_weight_sym"], [165, 2, 1, "", "quant_weight"], [165, 2, 1, "", "quant_weight_w_scale"], [165, 2, 1, "", "rtn_quantize"], [165, 2, 1, "", "teq_quantize"]], "neural_compressor.algorithm": [[166, 0, 0, "-", "algorithm"], [167, 0, 0, "-", "fast_bias_correction"], [169, 0, 0, "-", "smooth_quant"], [170, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[166, 1, 1, "", "ALGORITHMS"], [166, 1, 1, "", "Algorithm"], [166, 1, 1, "", "AlgorithmScheduler"], [166, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[167, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[169, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[170, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[171, 2, 1, "", "benchmark_with_raw_cmd"], [171, 2, 1, "", "call_one"], [171, 2, 1, "", "config_instance"], [171, 2, 1, "", "fit"], [171, 2, 1, "", "generate_prefix"], [171, 2, 1, "", "get_architecture"], [171, 2, 1, "", "get_bounded_threads"], [171, 2, 1, "", "get_core_ids"], [171, 2, 1, "", "get_physical_ids"], [171, 2, 1, "", "get_threads"], [171, 2, 1, "", "get_threads_per_core"], [171, 2, 1, "", "profile"], [171, 2, 1, "", "run_instance"], [171, 2, 1, "", "set_all_env_var"], [171, 2, 1, "", "set_env_var"], [171, 2, 1, "", "summary_benchmark"]], "neural_compressor.compression": [[172, 0, 0, "-", "callbacks"], [174, 0, 0, "-", "distillation"], [175, 0, 0, "-", "hpo"], [181, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[172, 1, 1, "", "BaseCallbacks"], [172, 1, 1, "", "DistillationCallbacks"], [172, 1, 1, "", "PruningCallbacks"], [172, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[172, 4, 1, "", "_epoch_ran"], [172, 4, 1, "", "best_model"], [172, 4, 1, "", "best_score"], [172, 4, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[173, 0, 0, "-", "criterions"]], "neural_compressor.compression.distillation.criterions": [[173, 1, 1, "", "Criterions"], [173, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [173, 1, 1, "", "KnowledgeDistillationFramework"], [173, 1, 1, "", "KnowledgeDistillationLoss"], [173, 1, 1, "", "PyTorchCriterions"], [173, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [173, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [173, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [173, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [173, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [173, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [173, 1, 1, "", "SelfKnowledgeDistillationLoss"], [173, 1, 1, "", "TensorflowCriterions"], [173, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [173, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [173, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [173, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.hpo": [[176, 0, 0, "-", "sa_optimizer"], [177, 0, 0, "-", "search_algorithms"], [178, 0, 0, "-", "search_space"]], "neural_compressor.compression.hpo.search_algorithms": [[177, 1, 1, "", "BayesianOptimizationSearcher"], [177, 1, 1, "", "GridSearcher"], [177, 1, 1, "", "RandomSearcher"], [177, 1, 1, "", "Searcher"], [177, 1, 1, "", "XgbSearcher"], [177, 2, 1, "", "register_searcher"]], "neural_compressor.compression.hpo.search_space": [[178, 1, 1, "", "BaseSearchSpace"], [178, 1, 1, "", "ContinuousSearchSpace"], [178, 1, 1, "", "DiscreteSearchSpace"], [178, 1, 1, "", "SearchSpace"], [178, 2, 1, "", "register_searchspace"]], "neural_compressor.compression.pruner": [[180, 0, 0, "-", "criteria"], [183, 0, 0, "-", "model_slim"], [187, 0, 0, "-", "patterns"], [181, 2, 1, "", "prepare_pruning"], [194, 0, 0, "-", "pruners"], [200, 0, 0, "-", "pruning"], [201, 0, 0, "-", "regs"], [181, 2, 1, "", "save"], [202, 0, 0, "-", "schedulers"], [203, 0, 0, "-", "tf_criteria"], [204, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[180, 1, 1, "", "BlockMaskCriterion"], [180, 1, 1, "", "GradientCriterion"], [180, 1, 1, "", "MagnitudeCriterion"], [180, 1, 1, "", "PruningCriterion"], [180, 1, 1, "", "RetrainFreeCriterion"], [180, 1, 1, "", "SnipCriterion"], [180, 1, 1, "", "SnipMomentumCriterion"], [180, 2, 1, "", "get_criterion"], [180, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.BlockMaskCriterion": [[180, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[180, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[180, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[180, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[180, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[180, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[180, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[182, 0, 0, "-", "auto_slim"], [184, 0, 0, "-", "pattern_analyzer"], [185, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[182, 2, 1, "", "generate_ffn2_pruning_config"], [182, 2, 1, "", "generate_mha_pruning_config"], [182, 2, 1, "", "model_slim"], [182, 2, 1, "", "model_slim_ffn2"], [182, 2, 1, "", "model_slim_mha"], [182, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[184, 1, 1, "", "ClassifierHeadSearcher"], [184, 1, 1, "", "ClassifierHeadSearcherTF"], [184, 1, 1, "", "JitBasicSearcher"], [184, 1, 1, "", "Linear2LinearSearcher"], [184, 1, 1, "", "RecipeSearcher"], [184, 1, 1, "", "SelfMHASearcher"], [184, 2, 1, "", "get_attributes"], [184, 2, 1, "", "get_common_module"], [184, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[184, 4, 1, "", "device"], [184, 4, 1, "", "flatten_static_graph"], [184, 4, 1, "", "model"], [184, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF": [[184, 4, 1, "", "device"], [184, 4, 1, "", "flatten_static_graph"], [184, 4, 1, "", "model"], [184, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[184, 4, 1, "", "device"], [184, 4, 1, "", "flatten_static_graph"], [184, 4, 1, "", "model"], [184, 4, 1, "", "searching_results"], [184, 4, 1, "", "static_graph"], [184, 4, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[184, 4, 1, "", "current_pattern"], [184, 4, 1, "", "device"], [184, 4, 1, "", "flatten_static_graph"], [184, 4, 1, "", "model"], [184, 4, 1, "", "searching_results"], [184, 4, 1, "", "static_graph"], [184, 4, 1, "", "target_layers"], [184, 4, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[184, 4, 1, "", "model"], [184, 4, 1, "", "recipe"], [184, 4, 1, "", "searching_results"], [184, 4, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[184, 4, 1, "", "device"], [184, 4, 1, "", "flatten_static_graph"], [184, 4, 1, "", "model"], [184, 4, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[185, 1, 1, "", "LinearCompression"], [185, 1, 1, "", "LinearCompressionIterator"], [185, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[185, 4, 1, "", "device"], [185, 4, 1, "", "layer_1"], [185, 4, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[185, 4, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[186, 0, 0, "-", "base"], [187, 2, 1, "", "get_pattern"], [188, 0, 0, "-", "mha"], [189, 0, 0, "-", "ninm"], [190, 0, 0, "-", "nxm"]], "neural_compressor.compression.pruner.patterns.base": [[186, 1, 1, "", "BasePattern"], [186, 1, 1, "", "KerasBasePattern"], [186, 1, 1, "", "PytorchBasePattern"], [186, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.base.BasePattern": [[186, 4, 1, "", "config"], [186, 4, 1, "", "invalid_layers"], [186, 4, 1, "", "is_global"], [186, 4, 1, "", "keep_mask_layers"], [186, 4, 1, "", "max_sparsity_ratio_per_op"], [186, 4, 1, "", "min_sparsity_ratio_per_op"], [186, 4, 1, "", "modules"], [186, 4, 1, "", "pattern"], [186, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.KerasBasePattern": [[186, 4, 1, "", "config"], [186, 4, 1, "", "invalid_layers"], [186, 4, 1, "", "is_global"], [186, 4, 1, "", "keep_mask_layers"], [186, 4, 1, "", "max_sparsity_ratio_per_op"], [186, 4, 1, "", "min_sparsity_ratio_per_op"], [186, 4, 1, "", "modules"], [186, 4, 1, "", "pattern"], [186, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern": [[186, 4, 1, "", "config"], [186, 4, 1, "", "invalid_layers"], [186, 4, 1, "", "is_global"], [186, 4, 1, "", "keep_mask_layers"], [186, 4, 1, "", "max_sparsity_ratio_per_op"], [186, 4, 1, "", "min_sparsity_ratio_per_op"], [186, 4, 1, "", "modules"], [186, 4, 1, "", "pattern"], [186, 4, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.mha": [[188, 1, 1, "", "PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha.PatternMHA": [[188, 4, 1, "", "M"], [188, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.ninm": [[189, 1, 1, "", "PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM": [[189, 4, 1, "", "M"], [189, 4, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.nxm": [[190, 1, 1, "", "KerasPatternNxM"], [190, 1, 1, "", "PytorchPatternNxM"]], "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM": [[190, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM": [[190, 4, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[191, 0, 0, "-", "base"], [192, 0, 0, "-", "basic"], [193, 0, 0, "-", "block_mask"], [194, 2, 1, "", "get_pruner"], [195, 0, 0, "-", "mha"], [194, 2, 1, "", "parse_valid_pruner_types"], [196, 0, 0, "-", "pattern_lock"], [197, 0, 0, "-", "progressive"], [198, 0, 0, "-", "retrain_free"], [199, 0, 0, "-", "sparse_gpt"]], "neural_compressor.compression.pruner.pruners.base": [[191, 1, 1, "", "BasePruner"], [191, 1, 1, "", "KerasBasePruner"], [191, 1, 1, "", "PytorchBasePruner"], [191, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.base.BasePruner": [[191, 4, 1, "", "config"], [191, 4, 1, "", "current_sparsity_ratio"], [191, 4, 1, "", "end_step"], [191, 4, 1, "", "global_step"], [191, 4, 1, "", "masks"], [191, 4, 1, "", "max_sparsity_ratio_per_op"], [191, 4, 1, "", "modules"], [191, 4, 1, "", "pattern"], [191, 4, 1, "", "pruning_frequency"], [191, 4, 1, "", "scheduler"], [191, 4, 1, "", "scores"], [191, 4, 1, "", "start_step"], [191, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.KerasBasePruner": [[191, 4, 1, "", "config"], [191, 4, 1, "", "current_sparsity_ratio"], [191, 4, 1, "", "end_step"], [191, 4, 1, "", "global_step"], [191, 4, 1, "", "masks"], [191, 4, 1, "", "max_sparsity_ratio_per_op"], [191, 4, 1, "", "modules"], [191, 4, 1, "", "pattern"], [191, 4, 1, "", "pruning_frequency"], [191, 4, 1, "", "scheduler"], [191, 4, 1, "", "scores"], [191, 4, 1, "", "start_step"], [191, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner": [[191, 4, 1, "", "config"], [191, 4, 1, "", "current_sparsity_ratio"], [191, 4, 1, "", "end_step"], [191, 4, 1, "", "global_step"], [191, 4, 1, "", "masks"], [191, 4, 1, "", "max_sparsity_ratio_per_op"], [191, 4, 1, "", "modules"], [191, 4, 1, "", "pattern"], [191, 4, 1, "", "pruning_frequency"], [191, 4, 1, "", "scheduler"], [191, 4, 1, "", "scores"], [191, 4, 1, "", "start_step"], [191, 4, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.basic": [[192, 1, 1, "", "KerasBasicPruner"], [192, 1, 1, "", "PytorchBasicPruner"]], "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner": [[192, 4, 1, "", "criterion"], [192, 4, 1, "", "pattern"], [192, 4, 1, "", "reg"], [192, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner": [[192, 4, 1, "", "criterion"], [192, 4, 1, "", "pattern"], [192, 4, 1, "", "reg"], [192, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.block_mask": [[193, 1, 1, "", "PytorchBlockMaskPruner"]], "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner": [[193, 4, 1, "", "criterion"], [193, 4, 1, "", "pattern"], [193, 4, 1, "", "reg"], [193, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.mha": [[195, 1, 1, "", "PythonMultiheadAttentionPruner"]], "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner": [[195, 4, 1, "", "head_masks"], [195, 4, 1, "", "linear_layers"], [195, 4, 1, "", "mha_compressions"], [195, 4, 1, "", "mha_scores"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[196, 1, 1, "", "PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[197, 1, 1, "", "PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[198, 1, 1, "", "PytorchRetrainFreePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner": [[198, 4, 1, "", "criterion"], [198, 4, 1, "", "pattern"], [198, 4, 1, "", "reg"], [198, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[199, 1, 1, "", "SparseGPTPruner"]], "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner": [[199, 4, 1, "", "criterion"], [199, 4, 1, "", "pattern"], [199, 4, 1, "", "reg"], [199, 4, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruning": [[200, 1, 1, "", "BasePruning"], [200, 1, 1, "", "BasicPruning"], [200, 1, 1, "", "RetrainFreePruning"], [200, 1, 1, "", "SparseGPTPruning"], [200, 2, 1, "", "register_pruning"]], "neural_compressor.compression.pruner.pruning.BasePruning": [[200, 4, 1, "", "config_file_path"], [200, 4, 1, "", "model"], [200, 4, 1, "", "pruner_info"], [200, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.BasicPruning": [[200, 4, 1, "", "config_file_path"], [200, 4, 1, "", "model"], [200, 4, 1, "", "pruner_info"], [200, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.pruning.RetrainFreePruning": [[200, 4, 1, "", "config_file_path"], [200, 4, 1, "", "model"], [200, 4, 1, "", "pruner_info"], [200, 4, 1, "", "pruners"]], "neural_compressor.compression.pruner.regs": [[201, 1, 1, "", "BaseReg"], [201, 1, 1, "", "GroupLasso"], [201, 2, 1, "", "get_reg"], [201, 2, 1, "", "get_reg_type"], [201, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[201, 4, 1, "", "alpha"], [201, 4, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[202, 1, 1, "", "IterativeScheduler"], [202, 1, 1, "", "OneshotScheduler"], [202, 1, 1, "", "PruningScheduler"], [202, 2, 1, "", "get_scheduler"], [202, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[202, 4, 1, "", "config"]], "neural_compressor.compression.pruner.tf_criteria": [[203, 1, 1, "", "MagnitudeCriterion"], [203, 1, 1, "", "PruningCriterion"], [203, 2, 1, "", "get_tf_criterion"], [203, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion": [[203, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.tf_criteria.PruningCriterion": [[203, 4, 1, "", "scores"]], "neural_compressor.compression.pruner.utils": [[204, 2, 1, "", "check_config"], [204, 2, 1, "", "check_key_validity"], [204, 2, 1, "", "collect_layer_inputs"], [204, 2, 1, "", "generate_pruner_config"], [204, 2, 1, "", "get_layers"], [204, 2, 1, "", "get_sparsity_ratio"], [204, 2, 1, "", "get_sparsity_ratio_tf"], [204, 2, 1, "", "parse_last_linear"], [204, 2, 1, "", "parse_last_linear_tf"], [204, 2, 1, "", "parse_to_prune"], [204, 2, 1, "", "parse_to_prune_tf"], [204, 2, 1, "", "process_and_check_config"], [204, 2, 1, "", "process_config"], [204, 2, 1, "", "process_weight_config"], [204, 2, 1, "", "process_yaml_config"], [204, 2, 1, "", "reset_none_to_default"], [204, 2, 1, "", "update_params"]], "neural_compressor.conf": [[205, 0, 0, "-", "config"], [206, 0, 0, "-", "dotdict"], [208, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[205, 1, 1, "", "Benchmark_Conf"], [205, 1, 1, "", "Conf"], [205, 1, 1, "", "DefaultConf"], [205, 1, 1, "", "Distillation_Conf"], [205, 1, 1, "", "Graph_Optimization_Conf"], [205, 1, 1, "", "MixedPrecision_Conf"], [205, 1, 1, "", "NASConfig"], [205, 1, 1, "", "PrunerV2"], [205, 1, 1, "", "Pruning_Conf"], [205, 1, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[206, 1, 1, "", "DotDict"], [206, 2, 1, "", "deep_get"], [206, 2, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[208, 1, 1, "", "AccuracyCriterion"], [208, 1, 1, "", "BenchmarkConfig"], [208, 1, 1, "", "DistillationConfig"], [208, 1, 1, "", "KnowledgeDistillationLossConfig"], [208, 1, 1, "", "Options"], [208, 1, 1, "", "QuantizationConfig"], [208, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[209, 1, 1, "", "AccuracyCriterion"], [209, 1, 1, "", "BenchmarkConfig"], [209, 1, 1, "", "DistillationConfig"], [209, 1, 1, "", "DotDict"], [209, 1, 1, "", "ExportConfig"], [209, 1, 1, "", "HPOConfig"], [209, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [209, 1, 1, "", "Keras"], [209, 1, 1, "", "KnowledgeDistillationLossConfig"], [209, 1, 1, "", "MXNet"], [209, 1, 1, "", "MixedPrecisionConfig"], [209, 1, 1, "", "NASConfig"], [209, 1, 1, "", "ONNX"], [209, 1, 1, "", "ONNXQlinear2QDQConfig"], [209, 1, 1, "", "Options"], [209, 1, 1, "", "PostTrainingQuantConfig"], [209, 1, 1, "", "PyTorch"], [209, 1, 1, "", "QuantizationAwareTrainingConfig"], [209, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [209, 1, 1, "", "TF2ONNXConfig"], [209, 1, 1, "", "TensorFlow"], [209, 1, 1, "", "Torch2ONNXConfig"], [209, 1, 1, "", "TuningCriterion"], [209, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[211, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[212, 0, 0, "-", "sigopt"], [213, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[212, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[213, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[218, 0, 0, "-", "dataloaders"], [230, 0, 0, "-", "datasets"], [234, 0, 0, "-", "filters"], [238, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[214, 0, 0, "-", "base_dataloader"], [215, 0, 0, "-", "dataloader"], [216, 0, 0, "-", "default_dataloader"], [217, 0, 0, "-", "fetcher"], [219, 0, 0, "-", "mxnet_dataloader"], [220, 0, 0, "-", "onnxrt_dataloader"], [221, 0, 0, "-", "pytorch_dataloader"], [222, 0, 0, "-", "sampler"], [223, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[214, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[215, 1, 1, "", "DataLoader"], [215, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[216, 1, 1, "", "DefaultDataLoader"], [216, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[217, 1, 1, "", "Fetcher"], [217, 1, 1, "", "IndexFetcher"], [217, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[219, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[220, 1, 1, "", "ONNXRTBertDataLoader"], [220, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[221, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[222, 1, 1, "", "BatchSampler"], [222, 1, 1, "", "IterableSampler"], [222, 1, 1, "", "Sampler"], [222, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[223, 1, 1, "", "TFDataDataLoader"], [223, 1, 1, "", "TensorflowBertDataLoader"], [223, 1, 1, "", "TensorflowDataLoader"], [223, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[224, 0, 0, "-", "bert_dataset"], [225, 0, 0, "-", "coco_dataset"], [226, 0, 0, "-", "dataset"], [227, 0, 0, "-", "dummy_dataset"], [228, 0, 0, "-", "dummy_dataset_v2"], [229, 0, 0, "-", "imagenet_dataset"], [231, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[224, 1, 1, "", "InputFeatures"], [224, 1, 1, "", "ONNXRTBertDataset"], [224, 1, 1, "", "ParseDecodeBert"], [224, 1, 1, "", "PytorchBertDataset"], [224, 1, 1, "", "TensorflowBertDataset"], [224, 1, 1, "", "TensorflowModelZooBertDataset"], [224, 2, 1, "", "convert_examples_to_features"], [224, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[225, 1, 1, "", "COCONpy"], [225, 1, 1, "", "COCORaw"], [225, 1, 1, "", "COCORecordDataset"], [225, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[226, 1, 1, "", "CIFAR10"], [226, 1, 1, "", "CIFAR100"], [226, 1, 1, "", "Dataset"], [226, 1, 1, "", "Datasets"], [226, 1, 1, "", "FashionMNIST"], [226, 1, 1, "", "ImageFolder"], [226, 1, 1, "", "IterableDataset"], [226, 1, 1, "", "MNIST"], [226, 1, 1, "", "MXNetCIFAR10"], [226, 1, 1, "", "MXNetCIFAR100"], [226, 1, 1, "", "MXNetDatasets"], [226, 1, 1, "", "MXNetFashionMNIST"], [226, 1, 1, "", "MXNetImageFolder"], [226, 1, 1, "", "MXNetMNIST"], [226, 1, 1, "", "ONNXRTITDatasets"], [226, 1, 1, "", "ONNXRTQLDatasets"], [226, 1, 1, "", "PyTorchDatasets"], [226, 1, 1, "", "PytorchCIFAR10"], [226, 1, 1, "", "PytorchCIFAR100"], [226, 1, 1, "", "PytorchFashionMNIST"], [226, 1, 1, "", "PytorchMNIST"], [226, 1, 1, "", "PytorchMxnetWrapDataset"], [226, 1, 1, "", "PytorchMxnetWrapFunction"], [226, 1, 1, "", "Tensorflow"], [226, 1, 1, "", "TensorflowCIFAR10"], [226, 1, 1, "", "TensorflowCIFAR100"], [226, 1, 1, "", "TensorflowDatasets"], [226, 1, 1, "", "TensorflowFashionMNIST"], [226, 1, 1, "", "TensorflowImageRecord"], [226, 1, 1, "", "TensorflowMNIST"], [226, 1, 1, "", "TensorflowTFRecordDataset"], [226, 1, 1, "", "TensorflowVOCRecord"], [226, 2, 1, "", "calculate_md5"], [226, 2, 1, "", "check_integrity"], [226, 2, 1, "", "dataset_registry"], [226, 2, 1, "", "download_url"], [226, 5, 1, "", "framework_datasets"], [226, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[227, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[228, 1, 1, "", "DummyDataset"], [228, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[229, 1, 1, "", "ImagenetRaw"], [229, 1, 1, "", "MXNetImagenetRaw"], [229, 1, 1, "", "ONNXRTImagenetDataset"], [229, 1, 1, "", "PytorchImagenetRaw"], [229, 1, 1, "", "TensorflowImagenetDataset"], [229, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[231, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[232, 0, 0, "-", "coco_filter"], [233, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[232, 1, 1, "", "LabelBalanceCOCORawFilter"], [232, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[233, 1, 1, "", "FILTERS"], [233, 1, 1, "", "Filter"], [233, 1, 1, "", "MXNetFilters"], [233, 1, 1, "", "ONNXRTITFilters"], [233, 1, 1, "", "ONNXRTQLFilters"], [233, 1, 1, "", "PyTorchFilters"], [233, 1, 1, "", "TensorflowFilters"], [233, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[236, 0, 0, "-", "coco_transform"], [237, 0, 0, "-", "imagenet_transform"], [239, 0, 0, "-", "postprocess"], [240, 0, 0, "-", "tokenization"], [241, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[236, 1, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[237, 1, 1, "", "BilinearImagenetTransform"], [237, 1, 1, "", "LabelShift"], [237, 1, 1, "", "ONNXResizeCropImagenetTransform"], [237, 1, 1, "", "OnnxBilinearImagenetTransform"], [237, 1, 1, "", "ParseDecodeImagenet"], [237, 1, 1, "", "ParseDecodeImagenetTransform"], [237, 1, 1, "", "QuantizedInput"], [237, 1, 1, "", "ResizeWithAspectRatio"], [237, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [237, 1, 1, "", "TensorflowShiftRescale"], [237, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[239, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[240, 1, 1, "", "BasicTokenizer"], [240, 1, 1, "", "FullTokenizer"], [240, 1, 1, "", "WordpieceTokenizer"], [240, 2, 1, "", "convert_by_vocab"], [240, 2, 1, "", "convert_to_unicode"], [240, 2, 1, "", "load_vocab"], [240, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[241, 1, 1, "", "AlignImageChannelTransform"], [241, 1, 1, "", "BaseTransform"], [241, 1, 1, "", "CastONNXTransform"], [241, 1, 1, "", "CastPyTorchTransform"], [241, 1, 1, "", "CastTFTransform"], [241, 1, 1, "", "CenterCropTFTransform"], [241, 1, 1, "", "CenterCropTransform"], [241, 1, 1, "", "CollectTransform"], [241, 1, 1, "", "ComposeTransform"], [241, 1, 1, "", "CropResizeTFTransform"], [241, 1, 1, "", "CropResizeTransform"], [241, 1, 1, "", "CropToBoundingBox"], [241, 1, 1, "", "InputFeatures"], [241, 1, 1, "", "MXNetCropResizeTransform"], [241, 1, 1, "", "MXNetCropToBoundingBox"], [241, 1, 1, "", "MXNetNormalizeTransform"], [241, 1, 1, "", "MXNetTransforms"], [241, 1, 1, "", "MXNetTranspose"], [241, 1, 1, "", "NormalizeTFTransform"], [241, 1, 1, "", "NormalizeTransform"], [241, 1, 1, "", "ONNXRTCropToBoundingBox"], [241, 1, 1, "", "ONNXRTITTransforms"], [241, 1, 1, "", "ONNXRTQLTransforms"], [241, 1, 1, "", "PaddedCenterCropTransform"], [241, 1, 1, "", "ParseDecodeVocTransform"], [241, 1, 1, "", "PyTorchAlignImageChannel"], [241, 1, 1, "", "PyTorchCropResizeTransform"], [241, 1, 1, "", "PyTorchNormalizeTransform"], [241, 1, 1, "", "PyTorchTransforms"], [241, 1, 1, "", "PyTorchTranspose"], [241, 1, 1, "", "PytorchMxnetTransform"], [241, 1, 1, "", "PytorchMxnetWrapFunction"], [241, 1, 1, "", "RandomCropTFTransform"], [241, 1, 1, "", "RandomCropTransform"], [241, 1, 1, "", "RandomHorizontalFlip"], [241, 1, 1, "", "RandomResizedCropMXNetTransform"], [241, 1, 1, "", "RandomResizedCropPytorchTransform"], [241, 1, 1, "", "RandomResizedCropTFTransform"], [241, 1, 1, "", "RandomResizedCropTransform"], [241, 1, 1, "", "RandomVerticalFlip"], [241, 1, 1, "", "RescaleKerasPretrainTransform"], [241, 1, 1, "", "RescaleTFTransform"], [241, 1, 1, "", "RescaleTransform"], [241, 1, 1, "", "ResizeMXNetTransform"], [241, 1, 1, "", "ResizePytorchTransform"], [241, 1, 1, "", "ResizeTFTransform"], [241, 1, 1, "", "ResizeTransform"], [241, 1, 1, "", "ResizeWithRatio"], [241, 1, 1, "", "SquadExample"], [241, 1, 1, "", "TFModelZooCollectTransform"], [241, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [241, 1, 1, "", "TFSquadV1PostTransform"], [241, 1, 1, "", "TRANSFORMS"], [241, 1, 1, "", "TensorflowCropToBoundingBox"], [241, 1, 1, "", "TensorflowRandomHorizontalFlip"], [241, 1, 1, "", "TensorflowRandomVerticalFlip"], [241, 1, 1, "", "TensorflowResizeWithRatio"], [241, 1, 1, "", "TensorflowTransform"], [241, 1, 1, "", "TensorflowTransforms"], [241, 1, 1, "", "TensorflowTranspose"], [241, 1, 1, "", "TensorflowWrapFunction"], [241, 1, 1, "", "ToArray"], [241, 1, 1, "", "ToNDArrayTransform"], [241, 1, 1, "", "Transforms"], [241, 1, 1, "", "Transpose"], [241, 2, 1, "", "convert_examples_to_features"], [241, 2, 1, "", "get_final_text"], [241, 2, 1, "", "get_torchvision_map"], [241, 2, 1, "", "read_squad_examples"], [241, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[242, 0, 0, "-", "benchmark"], [245, 0, 0, "-", "common"], [251, 0, 0, "-", "component"], [252, 0, 0, "-", "compression"], [253, 0, 0, "-", "contrib"], [278, 0, 0, "-", "data"], [283, 0, 0, "-", "distillation"], [284, 0, 0, "-", "export"], [288, 0, 0, "-", "graph_optimization"], [296, 0, 0, "-", "metric"], [298, 0, 0, "-", "mixed_precision"], [299, 0, 0, "-", "model_conversion"], [302, 0, 0, "-", "nas"], [308, 0, 0, "-", "pruner_legacy"], [312, 0, 0, "-", "pruning"], [313, 0, 0, "-", "pruning_recipes"], [317, 0, 0, "-", "pruning_v2"], [318, 0, 0, "-", "pytorch_pruner"], [325, 0, 0, "-", "quantization"], [326, 0, 0, "-", "scheduler"], [331, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[242, 1, 1, "", "Benchmark"], [242, 2, 1, "", "get_architecture"], [242, 2, 1, "", "get_bounded_threads"], [242, 2, 1, "", "get_core_ids"], [242, 2, 1, "", "get_physical_ids"], [242, 2, 1, "", "get_threads"], [242, 2, 1, "", "get_threads_per_core"], [242, 2, 1, "", "set_all_env_var"], [242, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[243, 0, 0, "-", "criterion"], [244, 0, 0, "-", "dataloader"], [246, 0, 0, "-", "metric"], [247, 0, 0, "-", "model"], [248, 0, 0, "-", "optimizer"], [249, 0, 0, "-", "postprocess"], [250, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[243, 1, 1, "", "Criterions"], [243, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [243, 1, 1, "", "KnowledgeDistillationFramework"], [243, 1, 1, "", "KnowledgeDistillationLoss"], [243, 1, 1, "", "PyTorchCriterions"], [243, 1, 1, "", "PyTorchCrossEntropyLoss"], [243, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [243, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [243, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [243, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [243, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [243, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [243, 1, 1, "", "SelfKnowledgeDistillationLoss"], [243, 1, 1, "", "TensorFlowCrossEntropyLoss"], [243, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [243, 1, 1, "", "TensorflowCriterions"], [243, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [243, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [243, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [243, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[244, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[246, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[247, 1, 1, "", "Model"], [247, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[248, 1, 1, "", "Optimizers"], [248, 1, 1, "", "PyTorchOptimizers"], [248, 1, 1, "", "PyTorchSGD"], [248, 1, 1, "", "TensorFlowAdam"], [248, 1, 1, "", "TensorFlowAdamW"], [248, 1, 1, "", "TensorFlowSGD"], [248, 1, 1, "", "TensorflowOptimizers"], [248, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[249, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[250, 2, 1, "", "get_activation"], [250, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[251, 1, 1, "", "Component"]], "neural_compressor.experimental.contrib": [[254, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[255, 0, 0, "-", "sigopt"], [256, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[255, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[256, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[261, 0, 0, "-", "dataloaders"], [273, 0, 0, "-", "datasets"], [277, 0, 0, "-", "filters"], [280, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[257, 0, 0, "-", "base_dataloader"], [258, 0, 0, "-", "dataloader"], [259, 0, 0, "-", "default_dataloader"], [260, 0, 0, "-", "fetcher"], [262, 0, 0, "-", "mxnet_dataloader"], [263, 0, 0, "-", "onnxrt_dataloader"], [264, 0, 0, "-", "pytorch_dataloader"], [265, 0, 0, "-", "sampler"], [266, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[257, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[259, 1, 1, "", "DefaultDataLoader"], [259, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[260, 1, 1, "", "Fetcher"], [260, 1, 1, "", "IndexFetcher"], [260, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[262, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[263, 1, 1, "", "ONNXRTBertDataLoader"], [263, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[264, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[265, 1, 1, "", "BatchSampler"], [265, 1, 1, "", "IterableSampler"], [265, 1, 1, "", "Sampler"], [265, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[266, 1, 1, "", "TFDataDataLoader"], [266, 1, 1, "", "TensorflowBertDataLoader"], [266, 1, 1, "", "TensorflowDataLoader"], [266, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[267, 0, 0, "-", "bert_dataset"], [268, 0, 0, "-", "coco_dataset"], [269, 0, 0, "-", "dataset"], [270, 0, 0, "-", "dummy_dataset"], [271, 0, 0, "-", "dummy_dataset_v2"], [272, 0, 0, "-", "imagenet_dataset"], [274, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[267, 1, 1, "", "InputFeatures"], [267, 1, 1, "", "ONNXRTBertDataset"], [267, 1, 1, "", "ParseDecodeBert"], [267, 1, 1, "", "PytorchBertDataset"], [267, 1, 1, "", "TensorflowBertDataset"], [267, 1, 1, "", "TensorflowModelZooBertDataset"], [267, 2, 1, "", "convert_examples_to_features"], [267, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[268, 1, 1, "", "COCONpy"], [268, 1, 1, "", "COCORaw"], [268, 1, 1, "", "COCORecordDataset"], [268, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[269, 1, 1, "", "CIFAR10"], [269, 1, 1, "", "CIFAR100"], [269, 1, 1, "", "Dataset"], [269, 1, 1, "", "Datasets"], [269, 1, 1, "", "FashionMNIST"], [269, 1, 1, "", "ImageFolder"], [269, 1, 1, "", "IterableDataset"], [269, 1, 1, "", "MNIST"], [269, 1, 1, "", "MXNetCIFAR10"], [269, 1, 1, "", "MXNetCIFAR100"], [269, 1, 1, "", "MXNetDatasets"], [269, 1, 1, "", "MXNetFashionMNIST"], [269, 1, 1, "", "MXNetImageFolder"], [269, 1, 1, "", "MXNetMNIST"], [269, 1, 1, "", "ONNXRTITDatasets"], [269, 1, 1, "", "ONNXRTQLDatasets"], [269, 1, 1, "", "PyTorchDatasets"], [269, 1, 1, "", "PytorchCIFAR10"], [269, 1, 1, "", "PytorchCIFAR100"], [269, 1, 1, "", "PytorchFashionMNIST"], [269, 1, 1, "", "PytorchMNIST"], [269, 1, 1, "", "PytorchMxnetWrapDataset"], [269, 1, 1, "", "PytorchMxnetWrapFunction"], [269, 1, 1, "", "TensorflowCIFAR10"], [269, 1, 1, "", "TensorflowCIFAR100"], [269, 1, 1, "", "TensorflowDatasets"], [269, 1, 1, "", "TensorflowFashionMNIST"], [269, 1, 1, "", "TensorflowImageFolder"], [269, 1, 1, "", "TensorflowImageRecord"], [269, 1, 1, "", "TensorflowMNIST"], [269, 1, 1, "", "TensorflowTFRecordDataset"], [269, 1, 1, "", "TensorflowVOCRecord"], [269, 2, 1, "", "calculate_md5"], [269, 2, 1, "", "check_integrity"], [269, 2, 1, "", "dataset_registry"], [269, 2, 1, "", "download_url"], [269, 5, 1, "", "framework_datasets"], [269, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[270, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[271, 1, 1, "", "DummyDataset"], [271, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[272, 1, 1, "", "ImagenetRaw"], [272, 1, 1, "", "MXNetImagenetRaw"], [272, 1, 1, "", "ONNXRTImagenetDataset"], [272, 1, 1, "", "PytorchImagenetRaw"], [272, 1, 1, "", "TensorflowImagenetDataset"], [272, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[274, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[275, 0, 0, "-", "coco_filter"], [276, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[275, 1, 1, "", "LabelBalanceCOCORawFilter"], [275, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[276, 1, 1, "", "FILTERS"], [276, 1, 1, "", "Filter"], [276, 1, 1, "", "MXNetFilters"], [276, 1, 1, "", "ONNXRTITFilters"], [276, 1, 1, "", "ONNXRTQLFilters"], [276, 1, 1, "", "PyTorchFilters"], [276, 1, 1, "", "TensorflowFilters"], [276, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[279, 0, 0, "-", "imagenet_transform"], [281, 0, 0, "-", "tokenization"], [282, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[279, 1, 1, "", "BilinearImagenetTransform"], [279, 1, 1, "", "LabelShift"], [279, 1, 1, "", "ONNXResizeCropImagenetTransform"], [279, 1, 1, "", "OnnxBilinearImagenetTransform"], [279, 1, 1, "", "ParseDecodeImagenet"], [279, 1, 1, "", "ParseDecodeImagenetTransform"], [279, 1, 1, "", "QuantizedInput"], [279, 1, 1, "", "ResizeWithAspectRatio"], [279, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[281, 1, 1, "", "BasicTokenizer"], [281, 1, 1, "", "FullTokenizer"], [281, 1, 1, "", "WordpieceTokenizer"], [281, 2, 1, "", "convert_by_vocab"], [281, 2, 1, "", "convert_to_unicode"], [281, 2, 1, "", "load_vocab"], [281, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[282, 1, 1, "", "AlignImageChannelTransform"], [282, 1, 1, "", "BaseTransform"], [282, 1, 1, "", "CastONNXTransform"], [282, 1, 1, "", "CastPyTorchTransform"], [282, 1, 1, "", "CastTFTransform"], [282, 1, 1, "", "CenterCropTFTransform"], [282, 1, 1, "", "CenterCropTransform"], [282, 1, 1, "", "CollectTransform"], [282, 1, 1, "", "ComposeTransform"], [282, 1, 1, "", "CropResizeTFTransform"], [282, 1, 1, "", "CropResizeTransform"], [282, 1, 1, "", "CropToBoundingBox"], [282, 1, 1, "", "InputFeatures"], [282, 1, 1, "", "MXNetCropResizeTransform"], [282, 1, 1, "", "MXNetCropToBoundingBox"], [282, 1, 1, "", "MXNetNormalizeTransform"], [282, 1, 1, "", "MXNetTransforms"], [282, 1, 1, "", "MXNetTranspose"], [282, 1, 1, "", "NormalizeTFTransform"], [282, 1, 1, "", "NormalizeTransform"], [282, 1, 1, "", "ONNXRTCropToBoundingBox"], [282, 1, 1, "", "ONNXRTITTransforms"], [282, 1, 1, "", "ONNXRTQLTransforms"], [282, 1, 1, "", "PaddedCenterCropTransform"], [282, 1, 1, "", "ParseDecodeVocTransform"], [282, 1, 1, "", "PyTorchAlignImageChannel"], [282, 1, 1, "", "PyTorchCropResizeTransform"], [282, 1, 1, "", "PyTorchNormalizeTransform"], [282, 1, 1, "", "PyTorchTransforms"], [282, 1, 1, "", "PyTorchTranspose"], [282, 1, 1, "", "PytorchMxnetTransform"], [282, 1, 1, "", "PytorchMxnetWrapFunction"], [282, 1, 1, "", "RandomCropTFTransform"], [282, 1, 1, "", "RandomCropTransform"], [282, 1, 1, "", "RandomHorizontalFlip"], [282, 1, 1, "", "RandomResizedCropMXNetTransform"], [282, 1, 1, "", "RandomResizedCropPytorchTransform"], [282, 1, 1, "", "RandomResizedCropTFTransform"], [282, 1, 1, "", "RandomResizedCropTransform"], [282, 1, 1, "", "RandomVerticalFlip"], [282, 1, 1, "", "RescaleKerasPretrainTransform"], [282, 1, 1, "", "RescaleTFTransform"], [282, 1, 1, "", "RescaleTransform"], [282, 1, 1, "", "ResizeMXNetTransform"], [282, 1, 1, "", "ResizePytorchTransform"], [282, 1, 1, "", "ResizeTFTransform"], [282, 1, 1, "", "ResizeTransform"], [282, 1, 1, "", "ResizeWithRatio"], [282, 1, 1, "", "SquadExample"], [282, 1, 1, "", "TFModelZooCollectTransform"], [282, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [282, 1, 1, "", "TFSquadV1PostTransform"], [282, 1, 1, "", "TRANSFORMS"], [282, 1, 1, "", "TensorflowCropToBoundingBox"], [282, 1, 1, "", "TensorflowRandomHorizontalFlip"], [282, 1, 1, "", "TensorflowRandomVerticalFlip"], [282, 1, 1, "", "TensorflowResizeWithRatio"], [282, 1, 1, "", "TensorflowTransform"], [282, 1, 1, "", "TensorflowTransforms"], [282, 1, 1, "", "TensorflowTranspose"], [282, 1, 1, "", "TensorflowWrapFunction"], [282, 1, 1, "", "ToArray"], [282, 1, 1, "", "ToNDArrayTransform"], [282, 1, 1, "", "Transforms"], [282, 1, 1, "", "Transpose"], [282, 2, 1, "", "convert_examples_to_features"], [282, 2, 1, "", "get_final_text"], [282, 2, 1, "", "get_torchvision_map"], [282, 2, 1, "", "read_squad_examples"], [282, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[283, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[283, 4, 1, "", "_epoch_ran"], [283, 4, 1, "", "best_model"], [283, 4, 1, "", "best_score"], [283, 4, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[285, 0, 0, "-", "qlinear2qdq"], [286, 0, 0, "-", "tf2onnx"], [287, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[285, 2, 1, "", "check_model"], [285, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[286, 2, 1, "", "tf_to_fp32_onnx"], [286, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[287, 2, 1, "", "dynamic_quant_export"], [287, 2, 1, "", "get_node_mapping"], [287, 2, 1, "", "get_quantizable_onnx_ops"], [287, 2, 1, "", "static_quant_export"], [287, 2, 1, "", "torch_to_fp32_onnx"], [287, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[288, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[290, 0, 0, "-", "bleu"], [291, 0, 0, "-", "bleu_util"], [292, 0, 0, "-", "coco_label_map"], [293, 0, 0, "-", "coco_tools"], [294, 0, 0, "-", "evaluate_squad"], [295, 0, 0, "-", "f1"], [297, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[290, 1, 1, "", "BLEU"], [290, 1, 1, "", "UnicodeRegex"], [290, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[290, 4, 1, "", "labels"], [290, 4, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[290, 4, 1, "", "nondigit_punct_re"], [290, 4, 1, "", "punct_nondigit_re"], [290, 4, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[291, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[293, 1, 1, "", "COCOEvalWrapper"], [293, 1, 1, "", "COCOWrapper"], [293, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [293, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [293, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[293, 4, 1, "", "dataset"], [293, 4, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[294, 2, 1, "", "evaluate"], [294, 2, 1, "", "exact_match_score"], [294, 2, 1, "", "f1_score"], [294, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[295, 2, 1, "", "evaluate"], [295, 2, 1, "", "f1_score"], [295, 2, 1, "", "metric_max_over_ground_truths"], [295, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[297, 1, 1, "", "Accuracy"], [297, 1, 1, "", "BaseMetric"], [297, 1, 1, "", "COCOmAPv2"], [297, 1, 1, "", "F1"], [297, 1, 1, "", "GeneralTopK"], [297, 1, 1, "", "Loss"], [297, 1, 1, "", "MAE"], [297, 1, 1, "", "METRICS"], [297, 1, 1, "", "MSE"], [297, 1, 1, "", "MXNetMetrics"], [297, 1, 1, "", "ONNXRTGLUE"], [297, 1, 1, "", "ONNXRTITMetrics"], [297, 1, 1, "", "ONNXRTQLMetrics"], [297, 1, 1, "", "PyTorchLoss"], [297, 1, 1, "", "PyTorchMetrics"], [297, 1, 1, "", "RMSE"], [297, 1, 1, "", "ROC"], [297, 1, 1, "", "SquadF1"], [297, 1, 1, "", "TensorflowCOCOMAP"], [297, 1, 1, "", "TensorflowMAP"], [297, 1, 1, "", "TensorflowMetrics"], [297, 1, 1, "", "TensorflowTopK"], [297, 1, 1, "", "TensorflowVOCMAP"], [297, 1, 1, "", "WrapMXNetMetric"], [297, 1, 1, "", "WrapONNXRTMetric"], [297, 1, 1, "", "WrapPyTorchMetric"], [297, 1, 1, "", "mIOU"], [297, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[297, 4, 1, "", "label_list"], [297, 4, 1, "", "pred_list"], [297, 4, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[297, 4, 1, "", "k"], [297, 4, 1, "", "num_correct"], [297, 4, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[297, 4, 1, "", "sample"], [297, 4, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[297, 4, 1, "", "compare_label"], [297, 4, 1, "", "label_list"], [297, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[297, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[297, 4, 1, "", "compare_label"], [297, 4, 1, "", "label_list"], [297, 4, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[297, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[297, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[297, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[297, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[297, 4, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[297, 4, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[297, 4, 1, "", "k"], [297, 4, 1, "", "num_correct"], [297, 4, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[298, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[299, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[300, 0, 0, "-", "basic_nas"], [301, 0, 0, "-", "dynas"], [303, 0, 0, "-", "nas"], [304, 0, 0, "-", "nas_utils"], [305, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[300, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[301, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[303, 1, 1, "", "NAS"], [303, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[304, 2, 1, "", "create_search_space_pool"], [304, 2, 1, "", "find_pareto_front"], [304, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[305, 1, 1, "", "BayesianOptimizationSearcher"], [305, 1, 1, "", "GridSearcher"], [305, 1, 1, "", "RandomSearcher"], [305, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[306, 0, 0, "-", "gradient_sensitivity"], [307, 0, 0, "-", "group_lasso"], [309, 0, 0, "-", "magnitude"], [310, 0, 0, "-", "pattern_lock"], [311, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[306, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[307, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[309, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[310, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[311, 1, 1, "", "Pruner"], [311, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[312, 1, 1, "", "Pruning"], [312, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[312, 4, 1, "", "conf"], [312, 4, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[314, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[315, 0, 0, "-", "pattern"], [316, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[315, 1, 1, "", "PATTERNS"], [315, 1, 1, "", "PatternBase"], [315, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[315, 4, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[316, 1, 1, "", "TilePatternBase"], [316, 1, 1, "", "TilePattern_1x1"], [316, 1, 1, "", "TilePattern_1x16"], [316, 1, 1, "", "TilePattern_1x2"], [316, 1, 1, "", "TilePattern_2x2"], [316, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[317, 1, 1, "", "Pruning"], [317, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[317, 4, 1, "", "conf"], [317, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[319, 0, 0, "-", "logger"], [320, 0, 0, "-", "patterns"], [321, 0, 0, "-", "prune_utils"], [322, 0, 0, "-", "pruner"], [323, 0, 0, "-", "pruning"], [324, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[320, 1, 1, "", "Pattern"], [320, 1, 1, "", "PatternNInM"], [320, 1, 1, "", "PatternNxM"], [320, 2, 1, "", "get_pattern"], [320, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[320, 4, 1, "", "is_global"], [320, 4, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[320, 4, 1, "", "M"], [320, 4, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[320, 4, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[321, 2, 1, "", "check_config"], [321, 2, 1, "", "parse_not_to_prune"], [321, 2, 1, "", "parse_to_prune"], [321, 2, 1, "", "process_and_check_config"], [321, 2, 1, "", "process_config"], [321, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[322, 1, 1, "", "MagnitudePruner"], [322, 1, 1, "", "PatternLockPruner"], [322, 1, 1, "", "Pruner"], [322, 1, 1, "", "SnipMomentumPruner"], [322, 1, 1, "", "SnipPruner"], [322, 2, 1, "", "get_pruner"], [322, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[322, 4, 1, "", "config"], [322, 4, 1, "", "current_sparsity_ratio"], [322, 4, 1, "", "end_step"], [322, 4, 1, "", "global_step"], [322, 4, 1, "", "masks"], [322, 4, 1, "", "max_sparsity_ratio_per_layer"], [322, 4, 1, "", "modules"], [322, 4, 1, "", "pattern"], [322, 4, 1, "", "scheduler"], [322, 4, 1, "", "scores"], [322, 4, 1, "", "start_step"], [322, 4, 1, "", "target_sparsity_ratio"], [322, 4, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[323, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[323, 4, 1, "", "config_file_path"], [323, 4, 1, "", "model"], [323, 4, 1, "", "pruner_info"], [323, 4, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[324, 1, 1, "", "IterativeScheduler"], [324, 1, 1, "", "OneshotScheduler"], [324, 1, 1, "", "Scheduler"], [324, 2, 1, "", "get_scheduler"], [324, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[324, 4, 1, "", "config"]], "neural_compressor.experimental.quantization": [[325, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[326, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[327, 0, 0, "-", "auto_mixed_precision"], [328, 0, 0, "-", "basic"], [329, 0, 0, "-", "bayesian"], [330, 0, 0, "-", "exhaustive"], [332, 0, 0, "-", "mse"], [333, 0, 0, "-", "mse_v2"], [334, 0, 0, "-", "random"], [335, 0, 0, "-", "strategy"], [337, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[327, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[328, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[329, 1, 1, "", "BayesianOptimization"], [329, 1, 1, "", "BayesianTuneStrategy"], [329, 1, 1, "", "TargetSpace"], [329, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[330, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[332, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[333, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[334, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[335, 1, 1, "", "TuneStrategy"], [335, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[336, 0, 0, "-", "constant"], [338, 0, 0, "-", "tuning_sampler"], [339, 0, 0, "-", "tuning_space"], [340, 0, 0, "-", "tuning_structs"], [341, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[338, 1, 1, "", "FallbackTuningSampler"], [338, 1, 1, "", "ModelWiseTuningSampler"], [338, 1, 1, "", "OpTypeWiseTuningSampler"], [338, 1, 1, "", "OpWiseTuningSampler"], [338, 1, 1, "", "SmoothQuantSampler"], [338, 1, 1, "", "TuningOrder"], [338, 1, 1, "", "TuningSampler"], [338, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[339, 1, 1, "", "TuningItem"], [339, 1, 1, "", "TuningSpace"], [339, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [339, 2, 1, "", "pattern_to_internal"], [339, 2, 1, "", "pattern_to_path"], [339, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[340, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[341, 1, 1, "", "OrderedDefaultDict"], [341, 2, 1, "", "extract_data_type"], [341, 2, 1, "", "get_adaptor_name"], [341, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[343, 0, 0, "-", "bleu"], [344, 0, 0, "-", "bleu_util"], [345, 0, 0, "-", "coco_label_map"], [346, 0, 0, "-", "coco_tools"], [347, 0, 0, "-", "evaluate_squad"], [348, 0, 0, "-", "f1"], [350, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[343, 1, 1, "", "BLEU"], [343, 1, 1, "", "UnicodeRegex"], [343, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[343, 4, 1, "", "labels"], [343, 4, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[343, 4, 1, "", "nondigit_punct_re"], [343, 4, 1, "", "punct_nondigit_re"], [343, 4, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[344, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[346, 1, 1, "", "COCOEvalWrapper"], [346, 1, 1, "", "COCOWrapper"], [346, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [346, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [346, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[346, 4, 1, "", "dataset"], [346, 4, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[347, 2, 1, "", "evaluate"], [347, 2, 1, "", "exact_match_score"], [347, 2, 1, "", "f1_score"], [347, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[348, 2, 1, "", "evaluate"], [348, 2, 1, "", "f1_score"], [348, 2, 1, "", "metric_max_over_ground_truths"], [348, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[350, 1, 1, "", "Accuracy"], [350, 1, 1, "", "BaseMetric"], [350, 1, 1, "", "COCOmAPv2"], [350, 1, 1, "", "F1"], [350, 1, 1, "", "GeneralTopK"], [350, 1, 1, "", "Loss"], [350, 1, 1, "", "MAE"], [350, 1, 1, "", "METRICS"], [350, 1, 1, "", "MSE"], [350, 1, 1, "", "MXNetMetrics"], [350, 1, 1, "", "Metric"], [350, 1, 1, "", "ONNXRTGLUE"], [350, 1, 1, "", "ONNXRTITMetrics"], [350, 1, 1, "", "ONNXRTQLMetrics"], [350, 1, 1, "", "PyTorchLoss"], [350, 1, 1, "", "PyTorchMetrics"], [350, 1, 1, "", "RMSE"], [350, 1, 1, "", "ROC"], [350, 1, 1, "", "SquadF1"], [350, 1, 1, "", "TensorflowCOCOMAP"], [350, 1, 1, "", "TensorflowMAP"], [350, 1, 1, "", "TensorflowMetrics"], [350, 1, 1, "", "TensorflowTopK"], [350, 1, 1, "", "TensorflowVOCMAP"], [350, 1, 1, "", "WrapMXNetMetric"], [350, 1, 1, "", "WrapONNXRTMetric"], [350, 1, 1, "", "WrapPyTorchMetric"], [350, 1, 1, "", "mIOU"], [350, 2, 1, "", "metric_registry"], [350, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[350, 4, 1, "", "label_list"], [350, 4, 1, "", "pred_list"], [350, 4, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[350, 4, 1, "", "k"], [350, 4, 1, "", "num_correct"], [350, 4, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[350, 4, 1, "", "sample"], [350, 4, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[350, 4, 1, "", "compare_label"], [350, 4, 1, "", "label_list"], [350, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[350, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[350, 4, 1, "", "compare_label"], [350, 4, 1, "", "label_list"], [350, 4, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[350, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[350, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[350, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[350, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[350, 4, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[350, 4, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[350, 4, 1, "", "k"], [350, 4, 1, "", "num_correct"], [350, 4, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[351, 2, 1, "", "fit"]], "neural_compressor.model": [[352, 0, 0, "-", "base_model"], [354, 0, 0, "-", "keras_model"], [355, 0, 0, "-", "model"], [356, 0, 0, "-", "mxnet_model"], [357, 0, 0, "-", "nets_factory"], [358, 0, 0, "-", "onnx_model"], [359, 0, 0, "-", "tensorflow_model"], [360, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[352, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[354, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[355, 1, 1, "", "Model"], [355, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[356, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[357, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[358, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[359, 1, 1, "", "TensorflowBaseModel"], [359, 1, 1, "", "TensorflowCheckpointModel"], [359, 1, 1, "", "TensorflowModel"], [359, 1, 1, "", "TensorflowQATModel"], [359, 1, 1, "", "TensorflowSavedModelModel"], [359, 2, 1, "", "checkpoint_session"], [359, 2, 1, "", "estimator_session"], [359, 2, 1, "", "frozen_pb_session"], [359, 2, 1, "", "get_model_type"], [359, 2, 1, "", "graph_def_session"], [359, 2, 1, "", "graph_session"], [359, 2, 1, "", "keras_session"], [359, 2, 1, "", "load_saved_model"], [359, 2, 1, "", "saved_model_session"], [359, 2, 1, "", "slim_session"], [359, 2, 1, "", "validate_and_inference_input_output"], [359, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[360, 1, 1, "", "IPEXModel"], [360, 1, 1, "", "PyTorchBaseModel"], [360, 1, 1, "", "PyTorchFXModel"], [360, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[361, 1, 1, "", "Accuracy"], [361, 1, 1, "", "Footprint"], [361, 1, 1, "", "ModelSize"], [361, 1, 1, "", "MultiObjective"], [361, 1, 1, "", "Objective"], [361, 1, 1, "", "Performance"], [361, 2, 1, "", "objective_custom_registry"], [361, 2, 1, "", "objective_registry"]], "neural_compressor.profiling": [[364, 0, 0, "-", "parser"], [374, 0, 0, "-", "profiler"]], "neural_compressor.profiling.parser": [[363, 0, 0, "-", "factory"], [366, 0, 0, "-", "onnx_parser"], [368, 0, 0, "-", "parser"], [369, 0, 0, "-", "result"], [371, 0, 0, "-", "tensorflow_parser"]], "neural_compressor.profiling.parser.factory": [[363, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[365, 0, 0, "-", "factory"], [367, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[365, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[367, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[368, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[369, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[370, 0, 0, "-", "factory"], [372, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[370, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[372, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[373, 0, 0, "-", "factory"], [376, 0, 0, "-", "onnxrt_profiler"], [379, 0, 0, "-", "profiler"], [381, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.profiling.profiler.factory": [[373, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[375, 0, 0, "-", "factory"], [377, 0, 0, "-", "profiler"], [378, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[375, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[377, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[378, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[379, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[380, 0, 0, "-", "factory"], [382, 0, 0, "-", "profiler"], [383, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[380, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[382, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[383, 2, 1, "", "create_tf_config"], [383, 2, 1, "", "delete_assign"], [383, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[384, 2, 1, "", "fit"]], "neural_compressor.strategy": [[385, 0, 0, "-", "auto"], [386, 0, 0, "-", "auto_mixed_precision"], [387, 0, 0, "-", "basic"], [388, 0, 0, "-", "bayesian"], [389, 0, 0, "-", "conservative"], [390, 0, 0, "-", "exhaustive"], [391, 0, 0, "-", "hawq_v2"], [393, 0, 0, "-", "mse"], [394, 0, 0, "-", "mse_v2"], [395, 0, 0, "-", "random"], [396, 0, 0, "-", "strategy"], [398, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[385, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[386, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[387, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[388, 1, 1, "", "BayesianOptimization"], [388, 1, 1, "", "BayesianTuneStrategy"], [388, 1, 1, "", "TargetSpace"], [388, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[389, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[390, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[391, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[393, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[394, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[395, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[396, 1, 1, "", "TuneStrategy"], [396, 1, 1, "", "TuneStrategyMeta"], [396, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[397, 0, 0, "-", "constant"], [399, 0, 0, "-", "tuning_sampler"], [400, 0, 0, "-", "tuning_space"], [401, 0, 0, "-", "tuning_structs"], [402, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[399, 1, 1, "", "BlockFallbackTuningSampler"], [399, 1, 1, "", "FallbackTuningSampler"], [399, 1, 1, "", "LowerBitsSampler"], [399, 1, 1, "", "ModelWiseTuningSampler"], [399, 1, 1, "", "OpTypeWiseTuningSampler"], [399, 1, 1, "", "OpWiseTuningSampler"], [399, 1, 1, "", "SmoothQuantSampler"], [399, 1, 1, "", "TuningOrder"], [399, 1, 1, "", "TuningSampler"]], "neural_compressor.strategy.utils.tuning_space": [[400, 1, 1, "", "TuningItem"], [400, 1, 1, "", "TuningSpace"], [400, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [400, 2, 1, "", "pattern_to_internal"], [400, 2, 1, "", "pattern_to_path"], [400, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[401, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[402, 1, 1, "", "ClassRegister"], [402, 1, 1, "", "OrderedDefaultDict"], [402, 1, 1, "", "QuantOptions"], [402, 1, 1, "", "QuantType"], [402, 2, 1, "", "build_slave_faker_model"], [402, 2, 1, "", "extract_data_type"], [402, 2, 1, "", "get_adaptor_name"], [402, 2, 1, "", "preprocess_user_cfg"], [402, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[403, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[403, 1, 1, "", "ExampleClass"], [403, 4, 1, "", "attribute1"], [403, 2, 1, "", "function1"], [403, 2, 1, "", "function2"], [403, 2, 1, "", "function3"], [403, 2, 1, "", "generator1"], [403, 5, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[403, 4, 1, "", "attr1"], [403, 4, 1, "", "attr2"], [403, 4, 1, "", "attr5"]], "neural_compressor.training": [[405, 1, 1, "", "CallBacks"], [405, 1, 1, "", "CompressionManager"], [405, 2, 1, "", "fit"], [405, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[406, 0, 0, "-", "collect_layer_histogram"], [407, 0, 0, "-", "constant"], [408, 0, 0, "-", "create_obj_from_config"], [410, 0, 0, "-", "kl_divergence"], [411, 0, 0, "-", "load_huggingface"], [412, 0, 0, "-", "logger"], [413, 0, 0, "-", "neural_insights_utils"], [414, 0, 0, "-", "options"], [415, 0, 0, "-", "pytorch"], [416, 0, 0, "-", "utility"], [417, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[406, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[408, 2, 1, "", "create_dataloader"], [408, 2, 1, "", "create_dataset"], [408, 2, 1, "", "create_eval_func"], [408, 2, 1, "", "create_train_func"], [408, 2, 1, "", "get_algorithm"], [408, 2, 1, "", "get_func_from_config"], [408, 2, 1, "", "get_metrics"], [408, 2, 1, "", "get_postprocess"], [408, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[410, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[411, 1, 1, "", "OptimizedModel"], [411, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[412, 1, 1, "", "Logger"], [412, 2, 1, "", "debug"], [412, 2, 1, "", "error"], [412, 2, 1, "", "fatal"], [412, 2, 1, "", "info"], [412, 2, 1, "", "log"], [412, 2, 1, "", "warn"], [412, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[413, 2, 1, "", "register_neural_insights_workload"], [413, 2, 1, "", "update_neural_insights_workload"], [413, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[414, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[415, 2, 1, "", "is_int8_model"], [415, 2, 1, "", "load"]], "neural_compressor.utils.utility": [[416, 1, 1, "", "CaptureOutputToFile"], [416, 1, 1, "", "CpuInfo"], [416, 2, 1, "", "Dequantize"], [416, 1, 1, "", "DotDict"], [416, 1, 1, "", "GLOBAL_STATE"], [416, 1, 1, "", "LazyImport"], [416, 1, 1, "", "MODE"], [416, 1, 1, "", "OpEntry"], [416, 1, 1, "", "Statistics"], [416, 2, 1, "", "alias_param"], [416, 2, 1, "", "calculate_mse"], [416, 2, 1, "", "combine_histogram"], [416, 2, 1, "", "compare_objects"], [416, 2, 1, "", "compute_sparsity"], [416, 2, 1, "", "dequantize_weight"], [416, 2, 1, "", "dump_class_attrs"], [416, 2, 1, "", "dump_data_to_local"], [416, 2, 1, "", "dump_elapsed_time"], [416, 2, 1, "", "dump_table"], [416, 2, 1, "", "dump_table_to_csv"], [416, 2, 1, "", "equal_dicts"], [416, 2, 1, "", "fault_tolerant_file"], [416, 2, 1, "", "get_all_fp32_data"], [416, 2, 1, "", "get_number_of_sockets"], [416, 2, 1, "", "get_op_list"], [416, 2, 1, "", "get_size"], [416, 2, 1, "", "get_tensor_histogram"], [416, 2, 1, "", "get_tensors_info"], [416, 2, 1, "", "get_tuning_history"], [416, 2, 1, "", "get_weights_details"], [416, 2, 1, "", "load_data_from_pkl"], [416, 2, 1, "", "mse_metric_gap"], [416, 2, 1, "", "print_op_list"], [416, 2, 1, "", "print_table"], [416, 2, 1, "", "recover"], [416, 2, 1, "", "set_random_seed"], [416, 2, 1, "", "set_resume_from"], [416, 2, 1, "", "set_tensorboard"], [416, 2, 1, "", "set_workspace"], [416, 2, 1, "", "show_memory_info"], [416, 2, 1, "", "singleton"], [416, 2, 1, "", "str2array"], [416, 2, 1, "", "time_limit"], [416, 2, 1, "", "version1_eq_version2"], [416, 2, 1, "", "version1_gt_version2"], [416, 2, 1, "", "version1_gte_version2"], [416, 2, 1, "", "version1_lt_version2"], [416, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[417, 1, 1, "", "WeightsDetails"], [417, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:exception", "4": "py:attribute", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "exception", "Python exception"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "data", "Python data"]}, "titleterms": {"block_mask": [0, 193], "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418], "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 426, 427, 429], "modul": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 177, 178, 180, 182, 184, 185, 186, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 255, 256, 257, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 279, 281, 282, 283, 285, 286, 287, 288, 290, 291, 293, 294, 295, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 338, 339, 340, 341, 343, 344, 346, 347, 348, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 363, 365, 367, 368, 369, 370, 372, 373, 375, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 399, 400, 401, 402, 403, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417], "content": [1, 2, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 365, 367, 368, 369, 370, 372, 373, 375, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 403, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 425], "class": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 155, 159, 160, 161, 163, 166, 167, 168, 169, 170, 172, 173, 177, 178, 180, 184, 185, 186, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 209, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 255, 256, 257, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 288, 289, 290, 293, 296, 297, 298, 299, 300, 301, 303, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 338, 339, 340, 341, 343, 346, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 365, 367, 368, 369, 370, 372, 373, 375, 377, 379, 380, 382, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 399, 400, 401, 402, 403, 405, 406, 409, 410, 411, 412, 414, 416, 417, 426], "function": [1, 13, 16, 34, 42, 43, 44, 45, 67, 68, 70, 104, 105, 116, 118, 148, 149, 150, 151, 156, 157, 158, 161, 162, 164, 165, 166, 168, 171, 173, 177, 178, 180, 181, 182, 184, 186, 187, 191, 194, 200, 201, 202, 203, 204, 206, 215, 216, 224, 226, 230, 233, 234, 235, 238, 240, 241, 242, 243, 245, 247, 248, 250, 259, 267, 269, 273, 276, 277, 278, 280, 281, 282, 285, 286, 287, 290, 291, 293, 294, 295, 296, 297, 304, 311, 315, 320, 321, 322, 324, 329, 335, 339, 341, 343, 344, 346, 347, 348, 349, 350, 351, 355, 359, 361, 378, 383, 384, 388, 396, 400, 402, 403, 405, 408, 409, 411, 412, 413, 415, 416, 451], "subpackag": [2, 17, 87, 111, 112, 114, 152, 179, 181, 210, 235, 253, 278, 289, 313, 331, 342, 392], "submodul": [2, 12, 17, 29, 51, 76, 87, 95, 101, 106, 111, 112, 114, 117, 130, 145, 152, 153, 168, 174, 175, 179, 181, 183, 187, 194, 207, 211, 218, 230, 234, 238, 245, 254, 261, 273, 277, 280, 284, 289, 296, 302, 308, 314, 318, 331, 337, 342, 349, 353, 364, 366, 371, 374, 376, 381, 392, 398, 404, 409], "packag": [2, 29, 168, 181, 187, 194, 218, 230, 234, 235, 238, 245, 261, 273, 277, 278, 280, 289, 296, 308, 313, 314, 331, 349, 353, 392, 409, 475, 477, 479, 480], "kera": 3, "keras_util": [4, 5, 6, 7, 8, 9, 10], "conv2d": 4, "dens": 5, "depthwise_conv2d": 6, "pool2d": 8, "quantiz": [9, 41, 155, 325, 384, 422, 425, 427, 428, 440, 444, 448, 450, 453, 456, 459, 462, 463, 471, 482, 488, 489, 490, 491, 494, 500], "separable_conv2d": 10, "mxnet": [11, 446, 461, 489, 496], "mxnet_util": [12, 13], "util": [13, 43, 148, 157, 164, 204, 336, 337, 338, 339, 340, 341, 378, 383, 397, 398, 399, 400, 401, 402, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 431], "onnxrt": [14, 446, 461, 496], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "calibr": [15, 16, 427, 444], "oper": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 427, 428], "activ": 18, "argmax": 19, "attent": 20, "binary_op": 21, "concat": 22, "conv": 23, "direct_q8": 24, "embed_layernorm": 25, "gather": 26, "gavgpool": 27, "gemm": 28, "lstm": 30, "matmul": [31, 494], "maxpool": 32, "norm": 33, "op": [34, 453], "pad": 35, "pool": 36, "reduc": 37, "resiz": 38, "split": 39, "unary_op": 40, "smooth_quant": [42, 161, 169], "weight_onli": [44, 165], "pytorch": [45, 415, 446, 451, 453, 461, 489, 490, 495, 496, 500], "queri": [46, 426], "tensorflow": [47, 446, 451, 453, 461, 489, 490, 495, 496, 500], "tf_util": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "graph_convert": 48, "graph_converter_without_calib": 49, "graph_rewrit": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "bf16": [50, 51, 463], "bf16_convert": [50, 149], "gener": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 427], "convert_add_to_biasadd": 52, "convert_layout": 53, "convert_leakyrelu": 54, "convert_nan_to_random": 55, "convert_placeholder_to_const": 56, "dequantize_cast_optim": 57, "dilated_contract": 58, "dummy_biasadd": 59, "expanddims_optim": 60, "fetch_weight_from_reshap": 61, "fold_batch_norm": 62, "fold_const": 63, "fuse_biasadd_add": 64, "fuse_column_wise_mul": 65, "fuse_conv_with_math": 66, "fuse_decomposed_bn": 67, "fuse_decomposed_in": 68, "fuse_gelu": 69, "fuse_layer_norm": 70, "fuse_pad_with_conv": 71, "fuse_pad_with_fp32_conv": 72, "fuse_reshape_transpos": 73, "graph_cse_optim": 74, "grappler_pass": 75, "insert_print_nod": 77, "move_squeeze_after_relu": 78, "pre_optim": 79, "remove_training_nod": 80, "rename_batch_norm": 81, "split_shared_input": 82, "strip_equivalent_nod": 83, "strip_unused_nod": 84, "switch_optim": 85, "graph_bas": 86, "int8": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 453, 500], "freeze_fake_qu": 88, "freeze_valu": 89, "freeze_value_without_calib": 90, "fuse_conv_redundant_dequant": 91, "fuse_conv_requant": 92, "fuse_matmul_redundant_dequant": 93, "fuse_matmul_requant": 94, "meta_op_optim": 96, "post_hostconst_convert": 97, "post_quantized_op_cs": 98, "rnn_convert": 99, "scale_propag": 100, "onnx": [101, 102, 103, 104, 105, 430, 459, 489, 500], "onnx_graph": 102, "onnx_nod": 103, "onnx_schema": 104, "tf2onnx_util": 105, "qdq": [106, 107, 108, 109, 123, 124, 125, 126, 127, 128, 129, 130, 131, 500], "insert_qdq_pattern": 107, "merge_duplicated_qdq": 108, "share_qdq_y_pattern": 109, "graph_util": 110, "quantize_graph": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], "qat": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 500], "fake_quant": 113, "quantize_config": 115, "quantize_help": 116, "quantize_lay": [117, 118, 119, 120, 121], "optimize_lay": 118, "quantize_layer_add": 119, "quantize_layer_bas": 120, "quantize_layer_bn": 121, "quantize_wrapp": 122, "fuse_qdq_bn": 123, "fuse_qdq_concatv2": 124, "fuse_qdq_conv": 125, "fuse_qdq_deconv": 126, "fuse_qdq_in": 127, "fuse_qdq_matmul": 128, "fuse_qdq_pool": 129, "optimize_qdq": 131, "quantize_graph_bas": 132, "quantize_graph_bn": 133, "quantize_graph_concatv2": 134, "quantize_graph_conv": 135, "quantize_graph_for_intel_cpu": 136, "quantize_graph_matmul": 137, "quantize_graph_pool": 138, "quantize_graph_common": 139, "smooth_quant_calibr": 140, "smooth_quant_scal": 141, "tf2onnx_convert": 142, "transform_graph": [143, 144, 145, 146, 147], "bias_correct": 143, "graph_transform_bas": 144, "insert_log": 146, "rerange_quantized_concat": 147, "torch_util": [149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 250], "gptq": 150, "hawq_metr": 151, "layer_wise_qu": [153, 154, 155, 156, 157], "modified_pickl": 154, "torch_load": 156, "mixed_precis": [158, 298], "model_wrapp": 159, "pattern_detector": 160, "symbolic_trac": 162, "teq": 163, "algorithm": [166, 167, 168, 169, 170, 444, 494, 497], "fast_bias_correct": 167, "weight_correct": 170, "benchmark": [171, 242, 434, 443, 448, 462, 488], "compress": [172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 252, 435, 491], "callback": 172, "distil": [173, 174, 283, 449, 450, 462, 488, 500], "criterion": [173, 243], "hpo": [175, 176, 177, 178], "sa_optim": 176, "search_algorithm": [177, 305], "search_spac": 178, "pruner": [180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 311, 322], "criteria": [180, 486, 497], "model_slim": [182, 183, 184, 185], "auto_slim": 182, "pattern_analyz": 184, "weight_slim": 185, "pattern": [186, 187, 188, 189, 190, 314, 315, 316, 320, 486], "base": [186, 191, 459, 498], "mha": [188, 195], "ninm": 189, "nxm": 190, "basic": [192, 328, 387, 423, 497], "pattern_lock": [196, 310], "progress": 197, "retrain_fre": 198, "sparse_gpt": 199, "prune": [200, 312, 323, 462, 486, 488, 500], "reg": 201, "schedul": [202, 324, 326, 486], "tf_criteria": 203, "conf": [205, 206, 207, 208], "config": [205, 209, 436, 446, 484], "dotdict": 206, "pythonic_config": 208, "contrib": [210, 211, 212, 213, 253, 254, 255, 256], "strategi": [211, 212, 213, 254, 255, 256, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 441, 493, 497], "sigopt": [212, 255, 493, 497], "tpe": [213, 256, 497], "data": [214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 427, 428, 448, 452], "dataload": [214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 244, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 445, 446], "base_dataload": [214, 257], "default_dataload": [216, 259], "fetcher": [217, 260], "attribut": [218, 226, 235, 269, 278, 289, 313, 353, 403, 409, 420], "mxnet_dataload": [219, 262], "onnxrt_dataload": [220, 263], "pytorch_dataload": [221, 264], "sampler": [222, 265], "tensorflow_dataload": [223, 266], "dataset": [224, 225, 226, 227, 228, 229, 230, 231, 267, 268, 269, 270, 271, 272, 273, 274, 446, 448, 457], "bert_dataset": [224, 267], "coco_dataset": [225, 268], "dummy_dataset": [227, 270], "dummy_dataset_v2": [228, 271], "imagenet_dataset": [229, 272], "style_transfer_dataset": [231, 274], "filter": [232, 233, 234, 275, 276, 277], "coco_filt": [232, 275], "transform": [236, 237, 238, 239, 240, 241, 279, 280, 281, 282, 457, 496], "coco_transform": 236, "imagenet_transform": [237, 279], "postprocess": [239, 249], "token": [240, 281], "experiment": [242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341], "common": [243, 244, 245, 246, 247, 248, 249, 250, 422, 454], "metric": [246, 290, 291, 292, 293, 294, 295, 296, 297, 343, 344, 345, 346, 347, 348, 349, 350, 457, 461], "model": [247, 352, 353, 354, 355, 356, 357, 358, 359, 360, 427, 438, 453, 456, 459, 462, 464, 471, 486, 491, 494, 500], "optim": [248, 472, 482, 485, 486, 498], "compon": 251, "export": [284, 285, 286, 287, 453, 491], "qlinear2qdq": 285, "tf2onnx": 286, "torch2onnx": 287, "graph_optim": 288, "bleu": [290, 343], "bleu_util": [291, 344], "coco_label_map": [292, 345], "coco_tool": [293, 346], "evaluate_squad": [294, 347], "f1": [295, 348], "model_convers": 299, "na": [300, 301, 302, 303, 304, 305, 423, 488], "basic_na": 300, "dyna": 301, "nas_util": 304, "pruner_legaci": [306, 307, 308, 309, 310, 311], "gradient_sensit": 306, "group_lasso": 307, "magnitud": 309, "pruning_recip": [313, 314, 315, 316], "tile_pattern": 316, "pruning_v2": 317, "pytorch_prun": [318, 319, 320, 321, 322, 323, 324], "logger": [319, 412], "prune_util": 321, "auto_mixed_precis": [327, 386], "bayesian": [329, 388, 497], "exhaust": [330, 390, 497], "mse": [332, 393, 497], "mse_v2": [333, 394, 497], "random": [334, 395, 497], "constant": [336, 397, 407], "tuning_sampl": [338, 399], "tuning_spac": [339, 400], "tuning_struct": [340, 401], "mix_precis": 351, "base_model": 352, "keras_model": 354, "mxnet_model": 356, "nets_factori": 357, "onnx_model": 358, "tensorflow_model": 359, "torch_model": 360, "object": [361, 439, 484], "profil": [362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 448], "parser": [363, 364, 365, 366, 367, 368, 369, 370, 371, 372], "factori": [363, 365, 370, 373, 375, 380], "onnx_pars": [365, 366, 367], "result": 369, "tensorflow_pars": [370, 371, 372], "onnxrt_profil": [375, 376, 377, 378], "tensorflow_profil": [380, 381, 382, 383], "auto": [385, 476, 482, 490, 494, 497], "conserv": [389, 497], "hawq_v2": [391, 497], "templat": [403, 404, 421], "api_doc_exampl": 403, "train": [405, 422, 442, 451, 462, 489], "collect_layer_histogram": 406, "create_obj_from_config": 408, "kl_diverg": 410, "load_huggingfac": 411, "neural_insights_util": 413, "option": [414, 451, 470], "weights_detail": 417, "version": 418, "intel": [419, 425, 445, 448, 458, 459, 461, 462, 468, 476, 482, 500, 501], "neural": [419, 422, 423, 425, 445, 448, 458, 459, 461, 462, 465, 469, 471, 476, 482, 486, 493, 498, 501], "compressor": [419, 422, 425, 445, 448, 458, 459, 461, 462, 476, 482, 493, 501], "document": [419, 425, 432, 501], "section": [419, 501], "contributor": [420, 421], "coven": [420, 421], "code": [420, 421, 423, 462, 483, 491, 498], "conduct": [420, 421], "our": [420, 494], "pledg": 420, "standard": 420, "respons": 420, "scope": [420, 486], "enforc": 420, "contribut": [421, 475, 479], "guidelin": 421, "pull": 421, "request": [421, 463], "checklist": 421, "support": [421, 422, 423, 426, 428, 443, 444, 445, 446, 448, 449, 450, 451, 453, 455, 458, 459, 461, 463, 464, 466, 467, 471, 472, 484, 485, 486, 488, 489, 491, 494, 495, 496, 499], "fx": 422, "introduct": [422, 423, 426, 427, 428, 443, 444, 445, 446, 448, 449, 450, 451, 453, 455, 458, 461, 463, 464, 482, 484, 485, 486, 488, 489, 491, 493, 494, 495, 496, 497, 499], "mode": [422, 500], "matrix": [422, 423, 426, 443, 444, 445, 446, 448, 449, 450, 451, 453, 455, 458, 461, 463, 464, 467, 484, 485, 486, 488, 489, 491, 494, 495, 499], "get": [422, 423, 425, 426, 443, 445, 446, 448, 449, 450, 451, 455, 456, 461, 463, 465, 476, 483, 484, 485, 486, 488, 489, 495, 499], "start": [422, 423, 425, 426, 443, 445, 446, 448, 449, 450, 451, 455, 456, 461, 463, 465, 466, 470, 476, 484, 485, 486, 488, 489, 495, 499], "post": [422, 462, 489], "static": [422, 489], "dynam": [422, 423, 489], "awar": [422, 462, 489], "exampl": [422, 423, 426, 432, 443, 445, 446, 448, 449, 450, 451, 452, 453, 461, 462, 463, 464, 467, 471, 484, 485, 486, 489, 491, 494, 495, 500], "note": [422, 492], "detail": 422, "problem": 422, "architectur": [423, 447, 458, 459], "search": [423, 482], "api": [423, 425, 426, 427, 432, 433, 443, 445, 446, 449, 450, 451, 456, 457, 461, 463, 465, 469, 483, 484, 485, 486, 488, 498], "usag": [423, 471, 482, 495, 497], "1": [423, 451, 454, 457, 462, 482, 500], "python": [423, 425, 445, 456, 461, 465, 469, 470, 477, 480, 488, 498], "yaml": [423, 427, 446, 451, 455, 499], "2": [423, 451, 454, 457, 462, 482, 500], "onli": [423, 491], "advanc": [423, 498], "custom": [423, 445, 461, 497], "secur": [424, 451], "polici": [424, 497], "report": 424, "vulner": 424, "instal": [425, 448, 459, 466, 468, 475, 476, 479], "from": [425, 427, 459, 462], "pypi": [425, 471], "select": [425, 476], "public": [425, 487], "event": [425, 487], "addit": 425, "research": 425, "collabor": 425, "work": [426, 489], "flow": [426, 489], "background": [426, 482], "ad": 426, "new": [426, 428, 477, 480, 497], "backend": [426, 489], "capabl": [426, 491], "implement": [426, 427], "onnxrtadaptor": 426, "how": [427, 428, 448], "add": 427, "an": 427, "list": [427, 452, 496], "need": 427, "design": [427, 447, 497], "framework": [427, 445, 446, 453, 455, 464, 488, 491, 494], "query_fw_cap": 427, "accord": [427, 428], "tune_cfg": 427, "prepar": [427, 448, 493], "fp32": [427, 453], "graph": 427, "run": [427, 448, 483], "sampl": [427, 456], "iter": 427, "calcul": 427, "rang": 427, "type": [428, 486], "like": 428, "int4": 428, "few": 428, "line": 428, "chang": [428, 457, 481, 483, 492], "defin": [428, 451], "abil": 428, "specif": [428, 446], "invok": 428, "kernel": 428, "tune": [428, 489, 494, 497], "configur": [428, 451, 455, 488, 493, 499], "us": [428, 445, 461], "summari": 428, "runtim": [430, 459, 489, 500], "torch": [431, 500], "mix": [437, 462, 463, 490], "precis": [437, 462, 463, 490], "refer": [444, 486, 489, 491, 494], "build": [445, 454, 461], "file": [446, 455, 499], "user": [446, 451, 457, 488, 491, 498, 499], "workflow": 447, "diagnosi": 448, "featur": [448, 451, 455, 458, 471, 472, 476, 488, 489, 495, 499], "modifi": 448, "script": 448, "see": 448, "do": [448, 465], "paramet": 448, "descript": 448, "suggest": 448, "fallback": 448, "set": [448, 468, 482], "knowledg": [449, 500], "intermedi": 449, "layer": [449, 494], "self": 449, "distribut": [451, 471, 497], "infer": 451, "evalu": 451, "pure": 451, "horovodrun": 451, "execut": 451, "releas": [452, 477, 480, 492], "appendix": 453, "frequent": 454, "ask": 454, "question": 454, "issu": [454, 492], "3": [454, 466, 482], "4": [454, 473, 482, 487], "quick": [456, 470], "valid": [456, 459, 494, 500], "incompat": [457, 492], "between": 457, "v1": 457, "face": 457, "built": [457, 459, 461], "infrastructur": 458, "linux": 459, "prerequisit": 459, "binari": 459, "sourc": 459, "ai": 459, "kit": 459, "window": 459, "system": 459, "requir": [459, 475, 479], "hardwar": [459, 463, 500], "environ": [459, 468], "cpu": [459, 468, 500], "64": 459, "compat": 459, "processor": 459, "gpu": 459, "": [459, 483], "xe": 459, "multipl": [459, 484, 500], "vendor": 459, "through": [459, 500], "softwar": [459, 463], "legal": 460, "inform": 460, "licens": 460, "citat": 460, "trademark": 460, "migrat": 462, "x": 462, "orchestr": [462, 485], "fp16": 463, "dure": [463, 490], "accuraci": [463, 489, 497], "driven": 463, "coder": [465, 469, 471, 482, 498], "what": [465, 483], "we": 465, "offer": 465, "jupyt": [465, 466, 477, 480], "lab": [465, 466], "extens": [465, 475, 476, 479, 482, 483, 500], "launcher": [465, 470], "contact": 465, "aw": 466, "amazon": 466, "sagemak": 466, "For": 466, "studio": 466, "notebook": 466, "instanc": 466, "guid": [466, 498], "bigdl": 467, "nano": 467, "platform": [468, 493], "best": [468, 476], "perform": [468, 493], "mkl": 468, "openmp": 468, "jemalloc": 468, "numa": 468, "control": 468, "variabl": 468, "frequenc": 468, "govern": 468, "enabl": [469, 476, 482], "bench": 469, "superbench": 469, "argument": 470, "v0": 473, "highlight": 473, "other": 473, "changelog": [474, 478], "neural_compressor_ext_lab": [475, 477], "uninstal": [475, 479], "develop": [475, 479], "jupyterlab": 476, "Or": 476, "let": 476, "u": 476, "help": 476, "you": 476, "pre": 476, "requisit": 476, "make": [477, 480, 483], "manual": [477, 480], "npm": [477, 480], "autom": [477, 480], "publish": [477, 480], "conda": [477, 480], "forg": [477, 480], "neural_compressor_ext_lab_alibaba": [479, 480], "log": 481, "unreleas": 481, "vscode": 482, "open": 482, "icon": 482, "5": 482, "welcom": 483, "your": 483, "v": 483, "folder": 483, "setup": 483, "up": 483, "straight": 483, "awai": 483, "explor": 483, "test": 483, "go": 483, "further": 483, "singl": 484, "One": 485, "shot": 485, "network": 486, "sparsiti": 486, "decai": 486, "regular": 486, "spars": 486, "deploy": 486, "hyperparamet": 486, "full": 487, "70": 487, "2023": 487, "17": 487, "2022": 487, "34": 487, "2021": 487, "15": [487, 500], "2018": 487, "2020": 487, "style": 488, "access": 488, "fundament": [489, 494], "scheme": 489, "ipex": 489, "approach": 489, "With": 489, "without": 489, "specifi": 489, "rule": 489, "recip": 489, "devic": 489, "turn": 490, "off": 490, "weight": 491, "known": 492, "benefit": 493, "comparison": 493, "differ": 493, "smooth": 494, "quant": 494, "per": 494, "tensor": 494, "channel": 494, "limit": 494, "smoothquant": 494, "enhanc": 494, "wise": 494, "alpha": 494, "engin": 494, "tensorboard": 495, "space": 497, "exit": 497, "process": 497, "overview": 498, "zero": 498, "topic": 498, "innov": 498, "product": 498, "12": 500, "0": 500, "ptq": 500}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [113, "module-contents"], [115, "module-contents"], [116, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [177, "module-contents"], [178, "module-contents"], [180, "module-contents"], [182, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [206, "module-contents"], [208, "module-contents"], [209, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [228, "module-contents"], [229, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [236, "module-contents"], [237, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [246, "module-contents"], [247, "module-contents"], [248, "module-contents"], [249, "module-contents"], [250, "module-contents"], [251, "module-contents"], [255, "module-contents"], [256, "module-contents"], [257, "module-contents"], [259, "module-contents"], [260, "module-contents"], [262, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [266, "module-contents"], [267, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [279, "module-contents"], [281, "module-contents"], [282, "module-contents"], [283, "module-contents"], [285, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [290, "module-contents"], [291, "module-contents"], [293, "module-contents"], [294, "module-contents"], [295, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [309, "module-contents"], [310, "module-contents"], [311, "module-contents"], [312, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [320, "module-contents"], [321, "module-contents"], [322, "module-contents"], [323, "module-contents"], [324, "module-contents"], [325, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [343, "module-contents"], [344, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [363, "module-contents"], [365, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [372, "module-contents"], [373, "module-contents"], [375, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [391, "module-contents"], [393, "module-contents"], [394, "module-contents"], [395, "module-contents"], [396, "module-contents"], [399, "module-contents"], [400, "module-contents"], [401, "module-contents"], [402, "module-contents"], [403, "module-contents"], [405, "module-contents"], [406, "module-contents"], [408, "module-contents"], [410, "module-contents"], [411, "module-contents"], [412, "module-contents"], [413, "module-contents"], [414, "module-contents"], [415, "module-contents"], [416, "module-contents"], [417, "module-contents"]], "Classes": [[1, "classes"], [3, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [113, "classes"], [115, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [144, "classes"], [146, "classes"], [147, "classes"], [149, "classes"], [150, "classes"], [151, "classes"], [155, "classes"], [159, "classes"], [160, "classes"], [161, "classes"], [163, "classes"], [166, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [172, "classes"], [173, "classes"], [177, "classes"], [178, "classes"], [180, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [205, "classes"], [206, "classes"], [208, "classes"], [209, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [228, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [251, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [259, "classes"], [260, "classes"], [262, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [278, "classes"], [279, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [283, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [293, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [303, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [309, "classes"], [310, "classes"], [311, "classes"], [312, "classes"], [313, "classes"], [314, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [320, "classes"], [322, "classes"], [323, "classes"], [324, "classes"], [325, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [343, "classes"], [346, "classes"], [349, "classes"], [350, "classes"], [352, "classes"], [353, "classes"], [354, "classes"], [355, "classes"], [356, "classes"], [357, "classes"], [358, "classes"], [359, "classes"], [360, "classes"], [361, "classes"], [363, "classes"], [365, "classes"], [367, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [372, "classes"], [373, "classes"], [375, "classes"], [377, "classes"], [379, "classes"], [380, "classes"], [382, "classes"], [385, "classes"], [386, "classes"], [387, "classes"], [388, "classes"], [389, "classes"], [390, "classes"], [391, "classes"], [393, "classes"], [394, "classes"], [395, "classes"], [396, "classes"], [399, "classes"], [400, "classes"], [401, "classes"], [402, "classes"], [403, "classes"], [405, "classes"], [406, "classes"], [409, "classes"], [410, "classes"], [411, "classes"], [412, "classes"], [414, "classes"], [416, "classes"], [417, "classes"]], "Functions": [[1, "functions"], [13, "functions"], [16, "functions"], [34, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [45, "functions"], [67, "functions"], [68, "functions"], [70, "functions"], [104, "functions"], [105, "functions"], [116, "functions"], [118, "functions"], [148, "functions"], [149, "functions"], [150, "functions"], [151, "functions"], [156, "functions"], [157, "functions"], [158, "functions"], [161, "functions"], [162, "functions"], [164, "functions"], [165, "functions"], [166, "functions"], [168, "functions"], [171, "functions"], [173, "functions"], [177, "functions"], [178, "functions"], [180, "functions"], [181, "functions"], [182, "functions"], [184, "functions"], [186, "functions"], [187, "functions"], [191, "functions"], [194, "functions"], [200, "functions"], [201, "functions"], [202, "functions"], [203, "functions"], [204, "functions"], [206, "functions"], [215, "functions"], [216, "functions"], [224, "functions"], [226, "functions"], [230, "functions"], [233, "functions"], [234, "functions"], [235, "functions"], [238, "functions"], [240, "functions"], [241, "functions"], [242, "functions"], [243, "functions"], [245, "functions"], [247, "functions"], [248, "functions"], [250, "functions"], [259, "functions"], [267, "functions"], [269, "functions"], [273, "functions"], [276, "functions"], [277, "functions"], [278, "functions"], [280, "functions"], [281, "functions"], [282, "functions"], [285, "functions"], [286, "functions"], [287, "functions"], [290, "functions"], [291, "functions"], [293, "functions"], [294, "functions"], [295, "functions"], [296, "functions"], [297, "functions"], [304, "functions"], [311, "functions"], [315, "functions"], [320, "functions"], [321, "functions"], [322, "functions"], [324, "functions"], [329, "functions"], [335, "functions"], [339, "functions"], [341, "functions"], [343, "functions"], [344, "functions"], [346, "functions"], [347, "functions"], [348, "functions"], [349, "functions"], [350, "functions"], [351, "functions"], [355, "functions"], [359, "functions"], [361, "functions"], [378, "functions"], [383, "functions"], [384, "functions"], [388, "functions"], [396, "functions"], [400, "functions"], [402, "functions"], [403, "functions"], [405, "functions"], [408, "functions"], [409, "functions"], [411, "functions"], [412, "functions"], [413, "functions"], [415, "functions"], [416, "functions"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "Subpackages": [[2, "subpackages"], [17, "subpackages"], [87, "subpackages"], [111, "subpackages"], [112, "subpackages"], [114, "subpackages"], [152, "subpackages"], [179, "subpackages"], [181, "subpackages"], [210, "subpackages"], [235, "subpackages"], [253, "subpackages"], [278, "subpackages"], [289, "subpackages"], [313, "subpackages"], [331, "subpackages"], [342, "subpackages"], [392, "subpackages"]], "Submodules": [[2, "submodules"], [12, "submodules"], [17, "submodules"], [29, "submodules"], [51, "submodules"], [76, "submodules"], [87, "submodules"], [95, "submodules"], [101, "submodules"], [106, "submodules"], [111, "submodules"], [112, "submodules"], [114, "submodules"], [117, "submodules"], [130, "submodules"], [145, "submodules"], [152, "submodules"], [153, "submodules"], [168, "submodules"], [174, "submodules"], [175, "submodules"], [179, "submodules"], [181, "submodules"], [183, "submodules"], [187, "submodules"], [194, "submodules"], [207, "submodules"], [211, "submodules"], [218, "submodules"], [230, "submodules"], [234, "submodules"], [238, "submodules"], [245, "submodules"], [254, "submodules"], [261, "submodules"], [273, "submodules"], [277, "submodules"], [280, "submodules"], [284, "submodules"], [289, "submodules"], [296, "submodules"], [302, "submodules"], [308, "submodules"], [314, "submodules"], [318, "submodules"], [331, "submodules"], [337, "submodules"], [342, "submodules"], [349, "submodules"], [353, "submodules"], [364, "submodules"], [366, "submodules"], [371, "submodules"], [374, "submodules"], [376, "submodules"], [381, "submodules"], [392, "submodules"], [398, "submodules"], [404, "submodules"], [409, "submodules"]], "Package Contents": [[2, "package-contents"], [29, "package-contents"], [168, "package-contents"], [181, "package-contents"], [187, "package-contents"], [194, "package-contents"], [218, "package-contents"], [230, "package-contents"], [234, "package-contents"], [235, "package-contents"], [238, "package-contents"], [245, "package-contents"], [261, "package-contents"], [273, "package-contents"], [277, "package-contents"], [278, "package-contents"], [280, "package-contents"], [289, "package-contents"], [296, "package-contents"], [308, "package-contents"], [313, "package-contents"], [314, "package-contents"], [331, "package-contents"], [349, "package-contents"], [353, "package-contents"], [392, "package-contents"], [409, "package-contents"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[149, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.gptq": [[150, "module-neural_compressor.adaptor.torch_utils.gptq"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[151, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[152, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[153, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[154, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[155, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[156, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[157, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[158, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[159, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[160, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[161, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[162, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.teq": [[163, "module-neural_compressor.adaptor.torch_utils.teq"]], "neural_compressor.adaptor.torch_utils.util": [[164, "module-neural_compressor.adaptor.torch_utils.util"]], "}": [[164, "id3"]], "neural_compressor.adaptor.torch_utils.weight_only": [[165, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "neural_compressor.algorithm.algorithm": [[166, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[167, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[168, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[169, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[170, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[171, "module-neural_compressor.benchmark"]], "neural_compressor.compression.callbacks": [[172, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[173, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[174, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression.hpo": [[175, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[176, "module-neural_compressor.compression.hpo.sa_optimizer"]], "neural_compressor.compression.hpo.search_algorithms": [[177, "module-neural_compressor.compression.hpo.search_algorithms"]], "neural_compressor.compression.hpo.search_space": [[178, "module-neural_compressor.compression.hpo.search_space"]], "neural_compressor.compression": [[179, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[180, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[181, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[182, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[183, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[184, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[185, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns.base": [[186, "module-neural_compressor.compression.pruner.patterns.base"]], "neural_compressor.compression.pruner.patterns": [[187, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.patterns.mha": [[188, "module-neural_compressor.compression.pruner.patterns.mha"]], "neural_compressor.compression.pruner.patterns.ninm": [[189, "module-neural_compressor.compression.pruner.patterns.ninm"]], "neural_compressor.compression.pruner.patterns.nxm": [[190, "module-neural_compressor.compression.pruner.patterns.nxm"]], "neural_compressor.compression.pruner.pruners.base": [[191, "module-neural_compressor.compression.pruner.pruners.base"]], "neural_compressor.compression.pruner.pruners.basic": [[192, "module-neural_compressor.compression.pruner.pruners.basic"]], "neural_compressor.compression.pruner.pruners.block_mask": [[193, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "neural_compressor.compression.pruner.pruners": [[194, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.pruners.mha": [[195, "module-neural_compressor.compression.pruner.pruners.mha"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[196, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "neural_compressor.compression.pruner.pruners.progressive": [[197, "module-neural_compressor.compression.pruner.pruners.progressive"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[198, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[199, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "neural_compressor.compression.pruner.pruning": [[200, "module-neural_compressor.compression.pruner.pruning"]], "neural_compressor.compression.pruner.regs": [[201, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[202, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.tf_criteria": [[203, "module-neural_compressor.compression.pruner.tf_criteria"]], "neural_compressor.compression.pruner.utils": [[204, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[205, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[206, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[207, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[208, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[209, "module-neural_compressor.config"]], "neural_compressor.contrib": [[210, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[211, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[212, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[213, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[214, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[215, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[216, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[217, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[218, "module-neural_compressor.data.dataloaders"]], "Attributes": [[218, "attributes"], [226, "attributes"], [235, "attributes"], [269, "attributes"], [278, "attributes"], [289, "attributes"], [313, "attributes"], [353, "attributes"], [403, "attributes"], [409, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[219, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[220, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[221, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[222, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[223, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[224, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[225, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[226, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[227, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[228, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[229, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[230, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[231, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[232, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[233, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[234, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[235, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[236, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[237, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[238, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[239, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[240, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[241, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[242, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[243, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[244, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[245, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[246, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[247, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[248, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[249, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[250, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[251, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[252, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[253, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[254, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[255, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[256, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[257, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[258, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[259, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[260, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[261, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[262, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[263, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[264, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[265, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[266, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[267, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[268, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[269, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[270, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[271, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[272, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[273, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[274, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[275, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[276, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[277, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[278, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[279, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[280, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[281, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[282, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[283, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[284, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[285, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[286, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[287, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[288, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[289, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[290, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[291, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[292, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[293, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[294, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[295, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[296, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[297, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[298, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[299, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[300, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[301, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[302, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[303, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[304, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[305, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[306, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[307, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[308, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[309, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[310, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[311, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[312, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[313, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[314, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[315, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[316, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[317, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[318, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[319, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[320, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[321, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[322, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[323, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[324, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[325, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[326, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[327, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[328, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[329, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[330, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[331, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[332, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[333, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[334, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[335, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[336, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[337, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[338, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[339, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[340, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[341, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[342, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[343, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[344, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[345, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[346, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[347, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[348, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[349, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[350, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[351, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[352, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[353, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[354, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[355, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[356, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[357, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[358, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[359, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[360, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[361, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[362, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[363, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[364, "module-neural_compressor.profiling.parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[365, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[366, "module-neural_compressor.profiling.parser.onnx_parser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[367, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[368, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[369, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[370, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[371, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[372, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[373, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[374, "module-neural_compressor.profiling.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[375, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[376, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[377, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[378, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[379, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[380, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[381, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[382, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[383, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[384, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[385, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[386, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[387, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[388, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[389, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[390, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[391, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[392, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[393, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[394, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[395, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[396, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[397, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[398, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[399, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[400, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[401, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[402, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[403, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[404, "module-neural_compressor.template"]], "neural_compressor.training": [[405, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[406, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[407, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[408, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[409, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[410, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[411, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[412, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[413, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[414, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[415, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[416, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[417, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[418, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[419, "intel-neural-compressor-documentation"], [501, "intel-neural-compressor-documentation"]], "Sections": [[419, "sections"], [501, "sections"]], "Contributor Covenant Code of Conduct": [[420, "contributor-covenant-code-of-conduct"], [421, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[420, "our-pledge"]], "Our Standards": [[420, "our-standards"]], "Our Responsibilities": [[420, "our-responsibilities"]], "Scope": [[420, "scope"]], "Enforcement": [[420, "enforcement"]], "Attribution": [[420, "attribution"]], "Contribution Guidelines": [[421, "contribution-guidelines"]], "Pull Request Checklist": [[421, "pull-request-checklist"]], "Pull Request Template": [[421, "pull-request-template"]], "Support": [[421, "support"]], "FX": [[422, "fx"]], "Introduction": [[422, "introduction"], [423, "introduction"], [426, "introduction"], [427, "introduction"], [428, "introduction"], [443, "introduction"], [444, "introduction"], [445, "introduction"], [446, "introduction"], [449, "introduction"], [450, "introduction"], [451, "introduction"], [453, "introduction"], [455, "introduction"], [458, "introduction"], [461, "introduction"], [463, "introduction"], [464, "introduction"], [484, "introduction"], [485, "introduction"], [486, "introduction"], [488, "introduction"], [491, "introduction"], [493, "introduction"], [494, "introduction"], [495, "introduction"], [496, "introduction"], [497, "introduction"], [499, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[422, "fx-mode-support-matrix-in-neural-compressor"]], "Get Started": [[422, "get-started"], [448, "get-started"], [489, "get-started"]], "Post Training Static Quantization": [[422, "post-training-static-quantization"], [489, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[422, "post-training-dynamic-quantization"], [489, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[422, "quantization-aware-training"]], "Examples": [[422, "examples"], [423, "examples"], [443, "examples"], [445, "examples"], [446, "examples"], [449, "examples"], [450, "examples"], [451, "examples"], [452, "examples"], [453, "examples"], [462, "examples"], [463, "examples"], [464, "examples"], [485, "examples"], [486, "examples"], [489, "examples"], [491, "examples"], [495, "examples"]], "Note": [[422, "note"]], "Details": [[422, "details"]], "Common Problem": [[422, "common-problem"]], "Dynamic Quantization": [[422, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[422, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[423, "neural-architecture-search"]], "Basic NAS": [[423, "basic-nas"]], "Dynamic NAS": [[423, "dynamic-nas"]], "NAS Support Matrix": [[423, "nas-support-matrix"]], "Get Started with NAS API": [[423, "get-started-with-nas-api"]], "Basic Usage": [[423, "basic-usage"]], "1. Python code + YAML": [[423, "python-code-yaml"]], "2. Python code only": [[423, "python-code-only"]], "Advanced Usage (Custom NAS)": [[423, "advanced-usage-custom-nas"]], "Security Policy": [[424, "security-policy"]], "Report a Vulnerability": [[424, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[425, "intel-neural-compressor"], [482, "intel-neural-compressor"]], "Installation": [[425, "installation"], [459, "installation"], [476, "installation"]], "Install from pypi": [[425, "install-from-pypi"]], "Getting Started": [[425, "getting-started"], [456, "getting-started"]], "Quantization with Python API": [[425, "quantization-with-python-api"], [456, "quantization-with-python-api"]], "Documentation": [[425, "documentation"]], "Selected Publications/Events": [[425, "selected-publications-events"]], "Additional Content": [[425, "additional-content"]], "Research Collaborations": [[425, "research-collaborations"]], "Adaptor": [[426, "adaptor"], [429, "adaptor"]], "Adaptor Support Matrix": [[426, "adaptor-support-matrix"]], "Working Flow": [[426, "working-flow"], [489, "working-flow"]], "Get Started with Adaptor API": [[426, "get-started-with-adaptor-api"]], "Query API": [[426, "query-api"]], "Background": [[426, "background"]], "Query API Introduction": [[426, "query-api-introduction"]], "Example of Adding a New Backend Support": [[426, "example-of-adding-a-new-backend-support"]], "Capability": [[426, "capability"]], "Implement ONNXRTAdaptor Class": [[426, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[427, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[427, "api-list-that-need-to-implement"]], "Design the framework YAML": [[427, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[427, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[427, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[427, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[427, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[427, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[428, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[428, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[428, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[428, "use-the-new-data-type"]], "Summary": [[428, "summary"]], "ONNX Runtime": [[430, "onnx-runtime"]], "Torch Utils": [[431, "torch-utils"]], "API Document Example": [[432, "api-document-example"]], "APIs": [[433, "apis"]], "Benchmark": [[434, "benchmark"], [462, "benchmark"], [488, "benchmark"]], "Compression": [[435, "compression"]], "Config": [[436, "config"]], "Mix Precision": [[437, "mix-precision"], [462, "mix-precision"]], "Model": [[438, "model"], [464, "model"]], "Objective": [[439, "objective"], [484, "objective"]], "Quantization": [[440, "quantization"], [488, "quantization"], [489, "quantization"]], "Strategy": [[441, "strategy"]], "Training": [[442, "training"]], "Benchmarking": [[443, "benchmarking"]], "Benchmark Support Matrix": [[443, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[443, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[444, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[444, "calibration-algorithms"]], "Support Matrix": [[444, "support-matrix"], [467, "support-matrix"]], "Reference": [[444, "reference"], [486, "reference"], [489, "reference"], [491, "reference"], [494, "reference"]], "DataLoader": [[445, "dataloader"]], "Supported Framework Dataloader Matrix": [[445, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[445, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[445, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[445, "build-custom-dataloader-with-python-api"]], "Dataset": [[446, "dataset"]], "Supported Framework Dataset Matrix": [[446, "supported-framework-dataset-matrix"]], "TensorFlow": [[446, "tensorflow"], [461, "tensorflow"], [496, "tensorflow"]], "PyTorch": [[446, "pytorch"], [461, "pytorch"], [490, "pytorch"]], "MXNet": [[446, "mxnet"], [461, "mxnet"], [496, "mxnet"]], "ONNXRT": [[446, "onnxrt"], [461, "onnxrt"], [496, "onnxrt"]], "Get start with Dataset API": [[446, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[446, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[446, "user-specific-dataset"]], "Design": [[447, "design"], [497, "design"], [497, "id1"], [497, "id3"], [497, "id5"], [497, "id7"], [497, "id9"], [497, "id11"], [497, "id13"], [497, "id15"], [497, "id17"], [497, "id19"], [497, "id21"]], "Architecture": [[447, "architecture"], [458, "architecture"]], "Workflow": [[447, "workflow"]], "Diagnosis": [[448, "diagnosis"]], "Diagnosis Introduction": [[448, "diagnosis-introduction"]], "Supported Feature Matrix": [[448, "supported-feature-matrix"], [451, "supported-feature-matrix"], [455, "supported-feature-matrix"], [458, "supported-feature-matrix"], [488, "supported-feature-matrix"], [489, "supported-feature-matrix"], [495, "supported-feature-matrix"], [499, "supported-feature-matrix"]], "Install Intel\u00ae Neural Compressor": [[448, "install-intel-neural-compressor"]], "Modify script": [[448, "modify-script"]], "Quantization diagnosis": [[448, "quantization-diagnosis"]], "Benchmark diagnosis": [[448, "benchmark-diagnosis"]], "Example": [[448, "example"], [461, "example"], [467, "example"], [471, "example"], [484, "example"], [494, "example"]], "Prepare dataset": [[448, "prepare-dataset"]], "Run quantization script": [[448, "run-quantization-script"]], "Run benchmark script": [[448, "run-benchmark-script"]], "See quantization data": [[448, "see-quantization-data"]], "How to do diagnosis": [[448, "how-to-do-diagnosis"]], "Parameter description": [[448, "parameter-description"]], "Diagnosis suggestions": [[448, "diagnosis-suggestions"]], "Fallback setting example": [[448, "fallback-setting-example"]], "See profiling data": [[448, "see-profiling-data"]], "Distillation": [[449, "distillation"], [462, "distillation"], [488, "distillation"]], "Knowledge Distillation": [[449, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[449, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[449, "self-distillation"]], "Distillation Support Matrix": [[449, "distillation-support-matrix"]], "Get Started with Distillation API": [[449, "get-started-with-distillation-api"]], "Distillation for Quantization": [[450, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[450, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[450, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[451, "distributed-training-and-inference-evaluation"]], "Get Started with Distributed Training and Inference API": [[451, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[451, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[451, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[451, "horovodrun-execution"]], "Security": [[451, "security"]], "PyTorch Examples:": [[451, "pytorch-examples"]], "TensorFlow Examples:": [[451, "tensorflow-examples"]], "Example List": [[452, "example-list"]], "Release Data": [[452, "release-data"]], "Export": [[453, "export"]], "Supported Framework Model Matrix": [[453, "supported-framework-model-matrix"], [464, "supported-framework-model-matrix"], [491, "supported-framework-model-matrix"]], "PyTorch Model": [[453, "pytorch-model"]], "FP32 Model Export": [[453, "fp32-model-export"], [453, "id1"]], "INT8 Model Export": [[453, "int8-model-export"], [453, "id2"]], "Tensorflow Model": [[453, "tensorflow-model"]], "Appendix": [[453, "appendix"]], "Supported quantized ops": [[453, "supported-quantized-ops"]], "Frequently Asked Questions": [[454, "frequently-asked-questions"]], "Common Build Issues": [[454, "common-build-issues"]], "Issue 1:": [[454, "issue-1"]], "Issue 2:": [[454, "issue-2"]], "Issue 3:": [[454, "issue-3"]], "Issue 4:": [[454, "issue-4"]], "Framework YAML Configuration Files": [[455, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[455, "get-started-with-framework-yaml-files"]], "Quick Samples": [[456, "quick-samples"]], "Validated Models": [[456, "validated-models"], [494, "validated-models"], [500, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[457, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[457, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[457, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[458, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[459, "linux-installation"]], "Prerequisites": [[459, "prerequisites"], [459, "id1"]], "Install from Binary": [[459, "install-from-binary"], [459, "id2"]], "Install from Source": [[459, "install-from-source"], [459, "id3"]], "Install from AI Kit": [[459, "install-from-ai-kit"]], "Windows Installation": [[459, "windows-installation"]], "System Requirements": [[459, "system-requirements"]], "Validated Hardware Environment": [[459, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[459, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[459, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[459, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[459, "validated-software-environment"]], "Legal Information": [[460, "legal-information"]], "License": [[460, "license"]], "Citation": [[460, "citation"]], "Trademarks": [[460, "trademarks"]], "Metrics": [[461, "metrics"]], "Supported Built-in Metric Matrix": [[461, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[461, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[461, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[461, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[462, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[462, "model-quantization"]], "Post-training Quantization": [[462, "post-training-quantization"]], "Quantization Aware Training": [[462, "quantization-aware-training"], [489, "quantization-aware-training"], [489, "id1"]], "Pruning": [[462, "pruning"], [486, "pruning"], [488, "pruning"]], "Orchestration": [[462, "orchestration"]], "Mixed Precision": [[463, "mixed-precision"]], "Mixed Precision Support Matrix": [[463, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[463, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[463, "hardware-and-software-requests-for-fp16"]], "During quantization mixed precision": [[463, "during-quantization-mixed-precision"]], "Accuracy-driven mixed precision": [[463, "accuracy-driven-mixed-precision"]], "Get Started with Mixed Precision API": [[463, "get-started-with-mixed-precision-api"]], "Neural Coder": [[465, "neural-coder"], [482, "neural-coder"], [482, "id1"]], "What do we offer?": [[465, "what-do-we-offer"]], "Getting Started!": [[465, "getting-started"], [476, "getting-started"]], "Jupyter Lab Extension": [[465, "jupyter-lab-extension"]], "Python Launcher": [[465, "python-launcher"], [470, "python-launcher"]], "Python API": [[465, "python-api"]], "Contact": [[465, "contact"]], "AWS Amazon SageMaker Support": [[466, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[466, "start-jupyter-lab-3"]], "For SageMaker Studio": [[466, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[466, "for-sagemaker-notebook-instance"]], "Installation Guide": [[466, "installation-guide"]], "BigDL Nano Support": [[467, "bigdl-nano-support"]], "Intel CPU Platforms: Best Performance Setting": [[468, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[468, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[468, "install-numa-controller"]], "Environment Variables": [[468, "environment-variables"]], "Frequency Governers": [[468, "frequency-governers"]], "Neural Coder as Python API": [[469, "neural-coder-as-python-api"]], "Enable": [[469, "enable"]], "Bench": [[469, "bench"]], "SuperBench": [[469, "superbench"]], "Quick-Start": [[470, "quick-start"]], "Launcher Arguments (Optional)": [[470, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[471, "neural-coder-for-quantization"]], "Features Supported": [[471, "features-supported"]], "Models Supported": [[471, "models-supported"]], "Usage": [[471, "usage"], [495, "usage"], [495, "id1"], [497, "usage"], [497, "id2"], [497, "id4"], [497, "id6"], [497, "id8"], [497, "id10"], [497, "id12"], [497, "id14"], [497, "id16"], [497, "id18"], [497, "id20"], [497, "id22"]], "PyPI distribution:": [[471, "pypi-distribution"]], "Supported Optimization Features": [[472, "supported-optimization-features"]], "v0.4": [[473, "v0-4"]], "Highlights": [[473, "highlights"]], "Others": [[473, "others"]], "Changelog": [[474, "changelog"], [478, "changelog"]], "neural_compressor_ext_lab": [[475, "neural-compressor-ext-lab"]], "Requirements": [[475, "requirements"], [479, "requirements"]], "Install": [[475, "install"], [479, "install"]], "Uninstall": [[475, "uninstall"], [479, "uninstall"]], "Contributing": [[475, "contributing"], [479, "contributing"]], "Development install": [[475, "development-install"], [479, "development-install"]], "Development uninstall": [[475, "development-uninstall"], [479, "development-uninstall"]], "Packaging the extension": [[475, "packaging-the-extension"], [479, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[476, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[476, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[476, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[476, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[477, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[477, "manual-release"], [480, "manual-release"]], "Python package": [[477, "python-package"], [480, "python-package"]], "NPM package": [[477, "npm-package"], [480, "npm-package"]], "Automated releases with the Jupyter Releaser": [[477, "automated-releases-with-the-jupyter-releaser"], [480, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[477, "publishing-to-conda-forge"], [480, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[479, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[480, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[481, "change-log"]], "[Unreleased]": [[481, "unreleased"]], "Background Introduction": [[482, "background-introduction"]], "Neural Coder Extension in VSCode": [[482, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[482, "neural-coder-extension-usage"]], "1. Open": [[482, "open"]], "2. Search": [[482, "search"]], "3. Setting": [[482, "setting"]], "4. Icon": [[482, "icon"]], "5. optimization (quantization)": [[482, "optimization-quantization"]], "5.1 Enable": [[482, "enable"]], "5.2 Auto": [[482, "auto"]], "Welcome to your VS Code Extension": [[483, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[483, "what-s-in-the-folder"]], "Setup": [[483, "setup"]], "Get up and running straight away": [[483, "get-up-and-running-straight-away"]], "Make changes": [[483, "make-changes"]], "Explore the API": [[483, "explore-the-api"]], "Run tests": [[483, "run-tests"]], "Go further": [[483, "go-further"]], "Single Objective": [[484, "single-objective"]], "Multiple Objectives": [[484, "multiple-objectives"]], "Objective Support Matrix": [[484, "objective-support-matrix"]], "Get Started with Objective API": [[484, "get-started-with-objective-api"]], "Config Single Objective": [[484, "config-single-objective"]], "Config Multiple Objectives": [[484, "config-multiple-objectives"]], "Optimization Orchestration": [[485, "optimization-orchestration"]], "One-shot": [[485, "one-shot"]], "Orchestration Support Matrix": [[485, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[485, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[486, "neural-network-pruning"]], "Pruning Patterns": [[486, "pruning-patterns"]], "Pruning Criteria": [[486, "pruning-criteria"]], "Pruning Types": [[486, "pruning-types"]], "Pruning Schedules": [[486, "pruning-schedules"]], "Pruning Scope": [[486, "pruning-scope"]], "Sparsity Decay Types": [[486, "sparsity-decay-types"]], "Regularization": [[486, "regularization"]], "Pruning Support Matrix": [[486, "pruning-support-matrix"]], "Get Started with Pruning API": [[486, "get-started-with-pruning-api"]], "Sparse Model Deployment": [[486, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[486, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (70)": [[487, "full-publications-events-70"]], "2023 (17)": [[487, "id1"]], "2022 (34)": [[487, "id2"]], "2021 (15)": [[487, "id3"]], "2018 - 2020 (4)": [[487, "id4"]], "Pythonic Style Access for Configurations": [[488, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[488, "pythonic-api-for-user-configurations"], [488, "id1"]], "Pythonic API for Framework Configurations": [[488, "pythonic-api-for-framework-configurations"], [488, "id2"]], "Get Started with Pythonic API for Configurations": [[488, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[488, "nas"]], "Quantization Introduction": [[489, "quantization-introduction"]], "Quantization Fundamentals": [[489, "quantization-fundamentals"], [494, "quantization-fundamentals"]], "Quantization Support Matrix": [[489, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[489, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[489, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[489, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[489, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[489, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[489, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[489, "with-or-without-accuracy-aware-tuning"]], "Post Training Quantization": [[489, "post-training-quantization"]], "Specify Quantization Rules": [[489, "specify-quantization-rules"]], "Specify Quantization Recipes": [[489, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[489, "specify-quantization-backend-and-device"]], "Turn OFF Auto Mixed Precision during Quantization": [[490, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[490, "tensorflow"]], "Weight Only Quantization": [[491, "weight-only-quantization"]], "Quantization Capability:": [[491, "quantization-capability"]], "Export Compressed Model": [[491, "export-compressed-model"]], "User code:": [[491, "user-code"]], "Release": [[492, "release"]], "Release Notes": [[492, "release-notes"]], "Known Issues": [[492, "known-issues"]], "Incompatible Changes": [[492, "incompatible-changes"]], "SigOpt Strategy": [[493, "sigopt-strategy"]], "Preparation": [[493, "preparation"]], "SigOpt Platform": [[493, "sigopt-platform"]], "Neural Compressor Configuration": [[493, "neural-compressor-configuration"]], "Performance": [[493, "performance"]], "Benefit of SigOpt Strategy": [[493, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[493, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[494, "smooth-quant"]], "Per-tensor & Per-channel": [[494, "per-tensor-per-channel"]], "Per-tensor example": [[494, "per-tensor-example"]], "Per-channel example": [[494, "per-channel-example"]], "Matmul quantization example": [[494, "matmul-quantization-example"]], "Per-channel limitation": [[494, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[494, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[494, "smoothquant"]], "Our enhancement:": [[494, "our-enhancement"]], "Algorithm: Layer-wise Auto-tuning of $\\alpha$.": [[494, "algorithm-layer-wise-auto-tuning-of-alpha"]], "Engineering": [[494, "engineering"]], "Supported Framework Matrix": [[494, "supported-framework-matrix"]], "TensorBoard": [[495, "tensorboard"]], "Get Started with TensorBoard": [[495, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[495, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[495, "tensorflow-tensorboard"]], "PyTorch Examples": [[495, "pytorch-examples"]], "TensorFlow Examples": [[495, "tensorflow-examples"]], "Transform": [[496, "transform"]], "Transform Support List": [[496, "transform-support-list"]], "Pytorch": [[496, "pytorch"]], "Tuning Strategies": [[497, "tuning-strategies"]], "Strategy Design": [[497, "strategy-design"]], "Tuning Space": [[497, "tuning-space"]], "Exit Policy": [[497, "exit-policy"]], "Accuracy Criteria": [[497, "accuracy-criteria"]], "Tuning Process": [[497, "tuning-process"]], "Tuning Algorithms": [[497, "tuning-algorithms"]], "Auto": [[497, "auto"]], "Conservative Tuning": [[497, "conservative-tuning"]], "Basic": [[497, "basic"]], "MSE": [[497, "mse"]], "MSE_V2": [[497, "mse-v2"]], "HAWQ_V2": [[497, "hawq-v2"]], "Bayesian": [[497, "bayesian"]], "Exhaustive": [[497, "exhaustive"]], "Random": [[497, "random"]], "SigOpt": [[497, "sigopt"]], "TPE": [[497, "tpe"]], "Distributed Tuning": [[497, "distributed-tuning"]], "Customize a New Tuning Strategy": [[497, "customize-a-new-tuning-strategy"]], "User Guide": [[498, "user-guide"]], "Overview": [[498, "overview"]], "Python-based APIs": [[498, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[498, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[498, "advanced-topics"]], "Innovations for Productivity": [[498, "innovations-for-productivity"]], "User YAML Configuration Files": [[499, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[499, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[500, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.12.0": [[500, "tensorflow-models-with-intel-tensorflow-2-12-0"]], "TensorFlow Models with Intel\u00ae Extension for TensorFlow* 1.2.0": [[500, "tensorflow-models-with-intel-extension-for-tensorflow-1-2-0"]], "PyTorch Models with Torch 2.0.1+cpu in PTQ Mode": [[500, "pytorch-models-with-torch-2-0-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.0.1+cpu in QAT Mode": [[500, "pytorch-models-with-torch-2-0-1-cpu-in-qat-mode"]], "PyTorch Models with Intel\u00ae Extension for PyTorch* 2.0.1+cpu": [[500, "pytorch-models-with-intel-extension-for-pytorch-2-0-1-cpu"]], "ONNX Models with ONNX Runtime 1.15.0": [[500, "onnx-models-with-onnx-runtime-1-15-0"]], "Validated Pruning Examples": [[500, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[500, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[500, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.adaptor.adaptor"], [2, "module-neural_compressor.adaptor"], [3, "module-neural_compressor.adaptor.keras"], [4, "module-neural_compressor.adaptor.keras_utils.conv2d"], [5, "module-neural_compressor.adaptor.keras_utils.dense"], [6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [7, "module-neural_compressor.adaptor.keras_utils"], [8, "module-neural_compressor.adaptor.keras_utils.pool2d"], [9, "module-neural_compressor.adaptor.keras_utils.quantizer"], [10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils.calibrator"], [17, "module-neural_compressor.adaptor.ox_utils"], [18, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [20, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [22, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [23, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [29, "module-neural_compressor.adaptor.ox_utils.operators"], [30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [33, "module-neural_compressor.adaptor.ox_utils.operators.norm"], [34, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"], [38, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [39, "module-neural_compressor.adaptor.ox_utils.operators.split"], [40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"], [41, "module-neural_compressor.adaptor.ox_utils.quantizer"], [42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"], [43, "module-neural_compressor.adaptor.ox_utils.util"], [44, "module-neural_compressor.adaptor.ox_utils.weight_only"], [45, "module-neural_compressor.adaptor.pytorch"], [46, "module-neural_compressor.adaptor.query"], [47, "module-neural_compressor.adaptor.tensorflow"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [110, "module-neural_compressor.adaptor.tf_utils.graph_util"], [111, "module-neural_compressor.adaptor.tf_utils"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"], [141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"], [142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [145, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [148, "module-neural_compressor.adaptor.tf_utils.util"], [149, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [150, "module-neural_compressor.adaptor.torch_utils.gptq"], [151, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [152, "module-neural_compressor.adaptor.torch_utils"], [153, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"], [154, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"], [155, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"], [156, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"], [157, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"], [158, "module-neural_compressor.adaptor.torch_utils.mixed_precision"], [159, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [160, "module-neural_compressor.adaptor.torch_utils.pattern_detector"], [161, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [162, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [163, "module-neural_compressor.adaptor.torch_utils.teq"], [164, "module-neural_compressor.adaptor.torch_utils.util"], [165, "module-neural_compressor.adaptor.torch_utils.weight_only"], [166, "module-neural_compressor.algorithm.algorithm"], [167, "module-neural_compressor.algorithm.fast_bias_correction"], [168, "module-neural_compressor.algorithm"], [169, "module-neural_compressor.algorithm.smooth_quant"], [170, "module-neural_compressor.algorithm.weight_correction"], [171, "module-neural_compressor.benchmark"], [172, "module-neural_compressor.compression.callbacks"], [173, "module-neural_compressor.compression.distillation.criterions"], [174, "module-neural_compressor.compression.distillation"], [175, "module-neural_compressor.compression.hpo"], [176, "module-neural_compressor.compression.hpo.sa_optimizer"], [177, "module-neural_compressor.compression.hpo.search_algorithms"], [178, "module-neural_compressor.compression.hpo.search_space"], [179, "module-neural_compressor.compression"], [180, "module-neural_compressor.compression.pruner.criteria"], [181, "module-neural_compressor.compression.pruner"], [182, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [183, "module-neural_compressor.compression.pruner.model_slim"], [184, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [185, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [186, "module-neural_compressor.compression.pruner.patterns.base"], [187, "module-neural_compressor.compression.pruner.patterns"], [188, "module-neural_compressor.compression.pruner.patterns.mha"], [189, "module-neural_compressor.compression.pruner.patterns.ninm"], [190, "module-neural_compressor.compression.pruner.patterns.nxm"], [191, "module-neural_compressor.compression.pruner.pruners.base"], [192, "module-neural_compressor.compression.pruner.pruners.basic"], [193, "module-neural_compressor.compression.pruner.pruners.block_mask"], [194, "module-neural_compressor.compression.pruner.pruners"], [195, "module-neural_compressor.compression.pruner.pruners.mha"], [196, "module-neural_compressor.compression.pruner.pruners.pattern_lock"], [197, "module-neural_compressor.compression.pruner.pruners.progressive"], [198, "module-neural_compressor.compression.pruner.pruners.retrain_free"], [199, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"], [200, "module-neural_compressor.compression.pruner.pruning"], [201, "module-neural_compressor.compression.pruner.regs"], [202, "module-neural_compressor.compression.pruner.schedulers"], [203, "module-neural_compressor.compression.pruner.tf_criteria"], [204, "module-neural_compressor.compression.pruner.utils"], [205, "module-neural_compressor.conf.config"], [206, "module-neural_compressor.conf.dotdict"], [207, "module-neural_compressor.conf"], [208, "module-neural_compressor.conf.pythonic_config"], [209, "module-neural_compressor.config"], [210, "module-neural_compressor.contrib"], [211, "module-neural_compressor.contrib.strategy"], [212, "module-neural_compressor.contrib.strategy.sigopt"], [213, "module-neural_compressor.contrib.strategy.tpe"], [214, "module-neural_compressor.data.dataloaders.base_dataloader"], [215, "module-neural_compressor.data.dataloaders.dataloader"], [216, "module-neural_compressor.data.dataloaders.default_dataloader"], [217, "module-neural_compressor.data.dataloaders.fetcher"], [218, "module-neural_compressor.data.dataloaders"], [219, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [220, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [221, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [222, "module-neural_compressor.data.dataloaders.sampler"], [223, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [224, "module-neural_compressor.data.datasets.bert_dataset"], [225, "module-neural_compressor.data.datasets.coco_dataset"], [226, "module-neural_compressor.data.datasets.dataset"], [227, "module-neural_compressor.data.datasets.dummy_dataset"], [228, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [229, "module-neural_compressor.data.datasets.imagenet_dataset"], [230, "module-neural_compressor.data.datasets"], [231, "module-neural_compressor.data.datasets.style_transfer_dataset"], [232, "module-neural_compressor.data.filters.coco_filter"], [233, "module-neural_compressor.data.filters.filter"], [234, "module-neural_compressor.data.filters"], [235, "module-neural_compressor.data"], [236, "module-neural_compressor.data.transforms.coco_transform"], [237, "module-neural_compressor.data.transforms.imagenet_transform"], [238, "module-neural_compressor.data.transforms"], [239, "module-neural_compressor.data.transforms.postprocess"], [240, "module-neural_compressor.data.transforms.tokenization"], [241, "module-neural_compressor.data.transforms.transform"], [242, "module-neural_compressor.experimental.benchmark"], [243, "module-neural_compressor.experimental.common.criterion"], [244, "module-neural_compressor.experimental.common.dataloader"], [245, "module-neural_compressor.experimental.common"], [246, "module-neural_compressor.experimental.common.metric"], [247, "module-neural_compressor.experimental.common.model"], [248, "module-neural_compressor.experimental.common.optimizer"], [249, "module-neural_compressor.experimental.common.postprocess"], [250, "module-neural_compressor.experimental.common.torch_utils"], [251, "module-neural_compressor.experimental.component"], [252, "module-neural_compressor.experimental.compression"], [253, "module-neural_compressor.experimental.contrib"], [254, "module-neural_compressor.experimental.contrib.strategy"], [255, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [256, "module-neural_compressor.experimental.contrib.strategy.tpe"], [257, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [258, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [259, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [260, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [261, "module-neural_compressor.experimental.data.dataloaders"], [262, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [263, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [264, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [265, "module-neural_compressor.experimental.data.dataloaders.sampler"], [266, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [267, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [268, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [269, "module-neural_compressor.experimental.data.datasets.dataset"], [270, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [271, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [272, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [273, "module-neural_compressor.experimental.data.datasets"], [274, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [275, "module-neural_compressor.experimental.data.filters.coco_filter"], [276, "module-neural_compressor.experimental.data.filters.filter"], [277, "module-neural_compressor.experimental.data.filters"], [278, "module-neural_compressor.experimental.data"], [279, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [280, "module-neural_compressor.experimental.data.transforms"], [281, "module-neural_compressor.experimental.data.transforms.tokenization"], [282, "module-neural_compressor.experimental.data.transforms.transform"], [283, "module-neural_compressor.experimental.distillation"], [284, "module-neural_compressor.experimental.export"], [285, "module-neural_compressor.experimental.export.qlinear2qdq"], [286, "module-neural_compressor.experimental.export.tf2onnx"], [287, "module-neural_compressor.experimental.export.torch2onnx"], [288, "module-neural_compressor.experimental.graph_optimization"], [289, "module-neural_compressor.experimental"], [290, "module-neural_compressor.experimental.metric.bleu"], [291, "module-neural_compressor.experimental.metric.bleu_util"], [292, "module-neural_compressor.experimental.metric.coco_label_map"], [293, "module-neural_compressor.experimental.metric.coco_tools"], [294, "module-neural_compressor.experimental.metric.evaluate_squad"], [295, "module-neural_compressor.experimental.metric.f1"], [296, "module-neural_compressor.experimental.metric"], [297, "module-neural_compressor.experimental.metric.metric"], [298, "module-neural_compressor.experimental.mixed_precision"], [299, "module-neural_compressor.experimental.model_conversion"], [300, "module-neural_compressor.experimental.nas.basic_nas"], [301, "module-neural_compressor.experimental.nas.dynas"], [302, "module-neural_compressor.experimental.nas"], [303, "module-neural_compressor.experimental.nas.nas"], [304, "module-neural_compressor.experimental.nas.nas_utils"], [305, "module-neural_compressor.experimental.nas.search_algorithms"], [306, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [307, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [308, "module-neural_compressor.experimental.pruner_legacy"], [309, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [310, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [311, "module-neural_compressor.experimental.pruner_legacy.pruner"], [312, "module-neural_compressor.experimental.pruning"], [313, "module-neural_compressor.experimental.pruning_recipes"], [314, "module-neural_compressor.experimental.pruning_recipes.patterns"], [315, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [316, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [317, "module-neural_compressor.experimental.pruning_v2"], [318, "module-neural_compressor.experimental.pytorch_pruner"], [319, "module-neural_compressor.experimental.pytorch_pruner.logger"], [320, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [321, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [322, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [323, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [324, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [325, "module-neural_compressor.experimental.quantization"], [326, "module-neural_compressor.experimental.scheduler"], [327, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [328, "module-neural_compressor.experimental.strategy.basic"], [329, "module-neural_compressor.experimental.strategy.bayesian"], [330, "module-neural_compressor.experimental.strategy.exhaustive"], [331, "module-neural_compressor.experimental.strategy"], [332, "module-neural_compressor.experimental.strategy.mse"], [333, "module-neural_compressor.experimental.strategy.mse_v2"], [334, "module-neural_compressor.experimental.strategy.random"], [335, "module-neural_compressor.experimental.strategy.strategy"], [336, "module-neural_compressor.experimental.strategy.utils.constant"], [337, "module-neural_compressor.experimental.strategy.utils"], [338, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [339, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [340, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [341, "module-neural_compressor.experimental.strategy.utils.utility"], [342, "module-neural_compressor"], [343, "module-neural_compressor.metric.bleu"], [344, "module-neural_compressor.metric.bleu_util"], [345, "module-neural_compressor.metric.coco_label_map"], [346, "module-neural_compressor.metric.coco_tools"], [347, "module-neural_compressor.metric.evaluate_squad"], [348, "module-neural_compressor.metric.f1"], [349, "module-neural_compressor.metric"], [350, "module-neural_compressor.metric.metric"], [351, "module-neural_compressor.mix_precision"], [352, "module-neural_compressor.model.base_model"], [353, "module-neural_compressor.model"], [354, "module-neural_compressor.model.keras_model"], [355, "module-neural_compressor.model.model"], [356, "module-neural_compressor.model.mxnet_model"], [357, "module-neural_compressor.model.nets_factory"], [358, "module-neural_compressor.model.onnx_model"], [359, "module-neural_compressor.model.tensorflow_model"], [360, "module-neural_compressor.model.torch_model"], [361, "module-neural_compressor.objective"], [362, "module-neural_compressor.profiling"], [363, "module-neural_compressor.profiling.parser.factory"], [364, "module-neural_compressor.profiling.parser"], [365, "module-neural_compressor.profiling.parser.onnx_parser.factory"], [366, "module-neural_compressor.profiling.parser.onnx_parser"], [367, "module-neural_compressor.profiling.parser.onnx_parser.parser"], [368, "module-neural_compressor.profiling.parser.parser"], [369, "module-neural_compressor.profiling.parser.result"], [370, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"], [371, "module-neural_compressor.profiling.parser.tensorflow_parser"], [372, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"], [373, "module-neural_compressor.profiling.profiler.factory"], [374, "module-neural_compressor.profiling.profiler"], [375, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"], [376, "module-neural_compressor.profiling.profiler.onnxrt_profiler"], [377, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"], [378, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"], [379, "module-neural_compressor.profiling.profiler.profiler"], [380, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"], [381, "module-neural_compressor.profiling.profiler.tensorflow_profiler"], [382, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"], [383, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"], [384, "module-neural_compressor.quantization"], [385, "module-neural_compressor.strategy.auto"], [386, "module-neural_compressor.strategy.auto_mixed_precision"], [387, "module-neural_compressor.strategy.basic"], [388, "module-neural_compressor.strategy.bayesian"], [389, "module-neural_compressor.strategy.conservative"], [390, "module-neural_compressor.strategy.exhaustive"], [391, "module-neural_compressor.strategy.hawq_v2"], [392, "module-neural_compressor.strategy"], [393, "module-neural_compressor.strategy.mse"], [394, "module-neural_compressor.strategy.mse_v2"], [395, "module-neural_compressor.strategy.random"], [396, "module-neural_compressor.strategy.strategy"], [397, "module-neural_compressor.strategy.utils.constant"], [398, "module-neural_compressor.strategy.utils"], [399, "module-neural_compressor.strategy.utils.tuning_sampler"], [400, "module-neural_compressor.strategy.utils.tuning_space"], [401, "module-neural_compressor.strategy.utils.tuning_structs"], [402, "module-neural_compressor.strategy.utils.utility"], [403, "module-neural_compressor.template.api_doc_example"], [404, "module-neural_compressor.template"], [405, "module-neural_compressor.training"], [406, "module-neural_compressor.utils.collect_layer_histogram"], [407, "module-neural_compressor.utils.constant"], [408, "module-neural_compressor.utils.create_obj_from_config"], [409, "module-neural_compressor.utils"], [410, "module-neural_compressor.utils.kl_divergence"], [411, "module-neural_compressor.utils.load_huggingface"], [412, "module-neural_compressor.utils.logger"], [413, "module-neural_compressor.utils.neural_insights_utils"], [414, "module-neural_compressor.utils.options"], [415, "module-neural_compressor.utils.pytorch"], [416, "module-neural_compressor.utils.utility"], [417, "module-neural_compressor.utils.weights_details"], [418, "module-neural_compressor.version"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasQuery"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxrt_weightonlyadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_WeightOnlyAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "float16activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.Float16ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "float16binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.Float16BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[30, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "fusedmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.FusedMatMulOperator"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "batchnormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.BatchNormalizationOperator"]], "normalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "reduceoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "unaryoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[41, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant"]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output"]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "to_numpy() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.to_numpy"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "apply_awq_clip() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_clip"]], "apply_awq_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.apply_awq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.awq_quantize"]], "get_weight_scale() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.get_weight_scale"]], "gptq() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq"]], "gptq_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.gptq_quantize"]], "neural_compressor.adaptor.ox_utils.weight_only": [[44, "module-neural_compressor.adaptor.ox_utils.weight_only"]], "prepare_inputs() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.prepare_inputs"]], "qdq_tensor() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.qdq_tensor"]], "rtn_quantize() (in module neural_compressor.adaptor.ox_utils.weight_only)": [[44, "neural_compressor.adaptor.ox_utils.weight_only.rtn_quantize"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorchweightonlyadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchWeightOnlyAdaptor"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[46, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[49, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[141, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[141, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[142, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[142, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[144, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[146, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[147, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[147, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[148, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[148, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[149, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[149, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[149, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[149, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "gptq (class in neural_compressor.adaptor.torch_utils.gptq)": [[150, "neural_compressor.adaptor.torch_utils.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.adaptor.torch_utils.gptq)": [[150, "neural_compressor.adaptor.torch_utils.gptq.GPTQuantizer"]], "find_layers() (in module neural_compressor.adaptor.torch_utils.gptq)": [[150, "neural_compressor.adaptor.torch_utils.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.adaptor.torch_utils.gptq)": [[150, "neural_compressor.adaptor.torch_utils.gptq.find_layers_name"]], "is_leaf() (in module neural_compressor.adaptor.torch_utils.gptq)": [[150, "neural_compressor.adaptor.torch_utils.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.adaptor.torch_utils.gptq)": [[150, "neural_compressor.adaptor.torch_utils.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.adaptor.torch_utils.gptq": [[150, "module-neural_compressor.adaptor.torch_utils.gptq"]], "quantize() (in module neural_compressor.adaptor.torch_utils.gptq)": [[150, "neural_compressor.adaptor.torch_utils.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.adaptor.torch_utils.gptq)": [[150, "neural_compressor.adaptor.torch_utils.gptq.trace_gptq_target_blocks"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[151, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[151, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[151, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[151, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[151, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[152, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant": [[153, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant"]], "pickleerror": [[154, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PickleError"]], "picklingerror": [[154, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.PicklingError"]], "unpicklingerror": [[154, "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle.UnpicklingError"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle": [[154, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.modified_pickle"]], "layerwisequant (class in neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize)": [[155, "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize.LayerWiseQuant"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize": [[155, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.quantize"]], "load() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load)": [[156, "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load.load"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load": [[156, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.torch_load"]], "dowload_hf_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[157, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.dowload_hf_model"]], "get_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[157, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_children"]], "get_named_children() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[157, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_named_children"]], "get_super_module_by_name() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[157, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.get_super_module_by_name"]], "load_layer_wise_quantized_model() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[157, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_layer_wise_quantized_model"]], "load_shell() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[157, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_shell"]], "load_tensor() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[157, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor"]], "load_tensor_from_shard() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[157, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.load_tensor_from_shard"]], "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils": [[157, "module-neural_compressor.adaptor.torch_utils.layer_wise_quant.utils"]], "update_module() (in module neural_compressor.adaptor.torch_utils.layer_wise_quant.utils)": [[157, "neural_compressor.adaptor.torch_utils.layer_wise_quant.utils.update_module"]], "ipex_mixed_precision() (in module neural_compressor.adaptor.torch_utils.mixed_precision)": [[158, "neural_compressor.adaptor.torch_utils.mixed_precision.ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[158, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "fakeaffinetensorquantfunction (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[159, "neural_compressor.adaptor.torch_utils.model_wrapper.FakeAffineTensorQuantFunction"]], "teqlinearfakequant (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[159, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQLinearFakeQuant"]], "teqmullinear (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[159, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQMulLinear"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[159, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[160, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[160, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "graphtrace (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[161, "neural_compressor.adaptor.torch_utils.smooth_quant.GraphTrace"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[161, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[161, "neural_compressor.adaptor.torch_utils.smooth_quant.get_module"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[161, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "set_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[161, "neural_compressor.adaptor.torch_utils.smooth_quant.set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[162, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[162, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[162, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "tequantizer (class in neural_compressor.adaptor.torch_utils.teq)": [[163, "neural_compressor.adaptor.torch_utils.teq.TEQuantizer"]], "neural_compressor.adaptor.torch_utils.teq": [[163, "module-neural_compressor.adaptor.torch_utils.teq"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[164, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[164, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[164, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[164, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[164, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "collect_weight_info() (in module neural_compressor.adaptor.torch_utils.util)": [[164, "neural_compressor.adaptor.torch_utils.util.collect_weight_info"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[164, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[164, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[164, "neural_compressor.adaptor.torch_utils.util.get_depth"]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[164, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[164, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[164, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[164, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[164, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[164, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[164, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[164, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[164, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[164, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[164, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[164, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[164, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "neural_compressor.adaptor.torch_utils.util": [[164, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[164, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[164, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[164, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[164, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[165, "neural_compressor.adaptor.torch_utils.weight_only.awq_quantize"]], "get_module_input_output() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[165, "neural_compressor.adaptor.torch_utils.weight_only.get_module_input_output"]], "gptq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[165, "neural_compressor.adaptor.torch_utils.weight_only.gptq_quantize"]], "neural_compressor.adaptor.torch_utils.weight_only": [[165, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "qdq_weight_actor() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[165, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[165, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[165, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_sym"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[165, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight"]], "quant_weight_w_scale() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[165, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight_w_scale"]], "rtn_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[165, "neural_compressor.adaptor.torch_utils.weight_only.rtn_quantize"]], "teq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[165, "neural_compressor.adaptor.torch_utils.weight_only.teq_quantize"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[166, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[166, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[166, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[166, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[166, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[167, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[167, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[168, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[169, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[169, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[170, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[170, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[171, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[171, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[171, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[171, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[171, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[171, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[171, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[171, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[171, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[171, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[171, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[171, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[171, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[171, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[171, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[171, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[171, "neural_compressor.benchmark.summary_benchmark"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[172, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[172, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[172, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[172, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[172, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[172, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[172, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[172, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[172, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[173, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[173, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[173, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[173, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[173, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[173, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[173, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[173, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[173, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[173, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[173, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[173, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[173, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[173, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[173, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[173, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[173, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[173, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[174, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression.hpo": [[175, "module-neural_compressor.compression.hpo"]], "neural_compressor.compression.hpo.sa_optimizer": [[176, "module-neural_compressor.compression.hpo.sa_optimizer"]], "bayesianoptimizationsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[177, "neural_compressor.compression.hpo.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[177, "neural_compressor.compression.hpo.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[177, "neural_compressor.compression.hpo.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.compression.hpo.search_algorithms)": [[177, "neural_compressor.compression.hpo.search_algorithms.Searcher"]], "xgbsearcher (class in neural_compressor.compression.hpo.search_algorithms)": [[177, "neural_compressor.compression.hpo.search_algorithms.XgbSearcher"]], "neural_compressor.compression.hpo.search_algorithms": [[177, "module-neural_compressor.compression.hpo.search_algorithms"]], "register_searcher() (in module neural_compressor.compression.hpo.search_algorithms)": [[177, "neural_compressor.compression.hpo.search_algorithms.register_searcher"]], "basesearchspace (class in neural_compressor.compression.hpo.search_space)": [[178, "neural_compressor.compression.hpo.search_space.BaseSearchSpace"]], "continuoussearchspace (class in neural_compressor.compression.hpo.search_space)": [[178, "neural_compressor.compression.hpo.search_space.ContinuousSearchSpace"]], "discretesearchspace (class in neural_compressor.compression.hpo.search_space)": [[178, "neural_compressor.compression.hpo.search_space.DiscreteSearchSpace"]], "searchspace (class in neural_compressor.compression.hpo.search_space)": [[178, "neural_compressor.compression.hpo.search_space.SearchSpace"]], "neural_compressor.compression.hpo.search_space": [[178, "module-neural_compressor.compression.hpo.search_space"]], "register_searchspace() (in module neural_compressor.compression.hpo.search_space)": [[178, "neural_compressor.compression.hpo.search_space.register_searchspace"]], "neural_compressor.compression": [[179, "module-neural_compressor.compression"]], "blockmaskcriterion (class in neural_compressor.compression.pruner.criteria)": [[180, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[180, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[180, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[180, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[180, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[180, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[180, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[180, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[180, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[180, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.blockmaskcriterion attribute)": [[180, "neural_compressor.compression.pruner.criteria.BlockMaskCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[180, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[180, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[180, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[180, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[180, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[180, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[181, "module-neural_compressor.compression.pruner"]], "prepare_pruning() (in module neural_compressor.compression.pruner)": [[181, "neural_compressor.compression.pruner.prepare_pruning"]], "save() (in module neural_compressor.compression.pruner)": [[181, "neural_compressor.compression.pruner.save"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[182, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[182, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[182, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[182, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[182, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[182, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[182, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[183, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "classifierheadsearchertf (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[184, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[184, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[185, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[185, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[185, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[185, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[185, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[185, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[185, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[185, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns.base)": [[186, "neural_compressor.compression.pruner.patterns.base.BasePattern"]], "kerasbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[186, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern"]], "pytorchbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[186, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern"]], "config (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[186, "neural_compressor.compression.pruner.patterns.base.BasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[186, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[186, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.config"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[186, "neural_compressor.compression.pruner.patterns.base.BasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[186, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[186, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[186, "neural_compressor.compression.pruner.patterns.base.BasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[186, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[186, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[186, "neural_compressor.compression.pruner.patterns.base.BasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[186, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[186, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[186, "neural_compressor.compression.pruner.patterns.base.BasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[186, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[186, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[186, "neural_compressor.compression.pruner.patterns.base.BasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[186, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[186, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[186, "neural_compressor.compression.pruner.patterns.base.BasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[186, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[186, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.modules"]], "neural_compressor.compression.pruner.patterns.base": [[186, "module-neural_compressor.compression.pruner.patterns.base"]], "pattern (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[186, "neural_compressor.compression.pruner.patterns.base.BasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[186, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[186, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns.base)": [[186, "neural_compressor.compression.pruner.patterns.base.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[186, "neural_compressor.compression.pruner.patterns.base.BasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[186, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[186, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.target_sparsity"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[187, "neural_compressor.compression.pruner.patterns.get_pattern"]], "neural_compressor.compression.pruner.patterns": [[187, "module-neural_compressor.compression.pruner.patterns"]], "m (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[188, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.M"]], "n (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[188, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.N"]], "patternmha (class in neural_compressor.compression.pruner.patterns.mha)": [[188, "neural_compressor.compression.pruner.patterns.mha.PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha": [[188, "module-neural_compressor.compression.pruner.patterns.mha"]], "m (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[189, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[189, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.N"]], "pytorchpatternninm (class in neural_compressor.compression.pruner.patterns.ninm)": [[189, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm": [[189, "module-neural_compressor.compression.pruner.patterns.ninm"]], "keraspatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[190, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM"]], "pytorchpatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[190, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.keraspatternnxm attribute)": [[190, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM.block_size"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.pytorchpatternnxm attribute)": [[190, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM.block_size"]], "neural_compressor.compression.pruner.patterns.nxm": [[190, "module-neural_compressor.compression.pruner.patterns.nxm"]], "basepruner (class in neural_compressor.compression.pruner.pruners.base)": [[191, "neural_compressor.compression.pruner.pruners.base.BasePruner"]], "kerasbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[191, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner"]], "pytorchbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[191, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner"]], "config (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.BasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.config"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.BasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.BasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.end_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.BasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.BasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.BasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.BasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.modules"]], "neural_compressor.compression.pruner.pruners.base": [[191, "module-neural_compressor.compression.pruner.pruners.base"]], "pattern (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.BasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pruning_frequency"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners.base)": [[191, "neural_compressor.compression.pruner.pruners.base.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.BasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.BasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.BasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[191, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.target_sparsity_ratio"]], "kerasbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[192, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner"]], "pytorchbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[192, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner"]], "criterion (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.criterion"]], "neural_compressor.compression.pruner.pruners.basic": [[192, "module-neural_compressor.compression.pruner.pruners.basic"]], "pattern (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[192, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.scheduler"]], "pytorchblockmaskpruner (class in neural_compressor.compression.pruner.pruners.block_mask)": [[193, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner"]], "criterion (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[193, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.criterion"]], "neural_compressor.compression.pruner.pruners.block_mask": [[193, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "pattern (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[193, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[193, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[193, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.scheduler"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[194, "neural_compressor.compression.pruner.pruners.get_pruner"]], "neural_compressor.compression.pruner.pruners": [[194, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[194, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pythonmultiheadattentionpruner (class in neural_compressor.compression.pruner.pruners.mha)": [[195, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner"]], "head_masks (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[195, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.head_masks"]], "linear_layers (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[195, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.linear_layers"]], "mha_compressions (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[195, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_compressions"]], "mha_scores (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[195, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_scores"]], "neural_compressor.compression.pruner.pruners.mha": [[195, "module-neural_compressor.compression.pruner.pruners.mha"]], "pytorchpatternlockpruner (class in neural_compressor.compression.pruner.pruners.pattern_lock)": [[196, "neural_compressor.compression.pruner.pruners.pattern_lock.PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[196, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "pytorchprogressivepruner (class in neural_compressor.compression.pruner.pruners.progressive)": [[197, "neural_compressor.compression.pruner.pruners.progressive.PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[197, "module-neural_compressor.compression.pruner.pruners.progressive"]], "pytorchretrainfreepruner (class in neural_compressor.compression.pruner.pruners.retrain_free)": [[198, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner"]], "criterion (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.criterion"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[198, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "pattern (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[198, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.scheduler"]], "sparsegptpruner (class in neural_compressor.compression.pruner.pruners.sparse_gpt)": [[199, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner"]], "criterion (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[199, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.criterion"]], "neural_compressor.compression.pruner.pruners.sparse_gpt": [[199, "module-neural_compressor.compression.pruner.pruners.sparse_gpt"]], "pattern (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[199, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[199, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.sparse_gpt.sparsegptpruner attribute)": [[199, "neural_compressor.compression.pruner.pruners.sparse_gpt.SparseGPTPruner.scheduler"]], "basepruning (class in neural_compressor.compression.pruner.pruning)": [[200, "neural_compressor.compression.pruner.pruning.BasePruning"]], "basicpruning (class in neural_compressor.compression.pruner.pruning)": [[200, "neural_compressor.compression.pruner.pruning.BasicPruning"]], "retrainfreepruning (class in neural_compressor.compression.pruner.pruning)": [[200, "neural_compressor.compression.pruner.pruning.RetrainFreePruning"]], "sparsegptpruning (class in neural_compressor.compression.pruner.pruning)": [[200, "neural_compressor.compression.pruner.pruning.SparseGPTPruning"]], "config_file_path (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[200, "neural_compressor.compression.pruner.pruning.BasePruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[200, "neural_compressor.compression.pruner.pruning.BasicPruning.config_file_path"]], "config_file_path (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[200, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.config_file_path"]], "model (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[200, "neural_compressor.compression.pruner.pruning.BasePruning.model"]], "model (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[200, "neural_compressor.compression.pruner.pruning.BasicPruning.model"]], "model (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[200, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.model"]], "neural_compressor.compression.pruner.pruning": [[200, "module-neural_compressor.compression.pruner.pruning"]], "pruner_info (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[200, "neural_compressor.compression.pruner.pruning.BasePruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[200, "neural_compressor.compression.pruner.pruning.BasicPruning.pruner_info"]], "pruner_info (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[200, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruner_info"]], "pruners (neural_compressor.compression.pruner.pruning.basepruning attribute)": [[200, "neural_compressor.compression.pruner.pruning.BasePruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.basicpruning attribute)": [[200, "neural_compressor.compression.pruner.pruning.BasicPruning.pruners"]], "pruners (neural_compressor.compression.pruner.pruning.retrainfreepruning attribute)": [[200, "neural_compressor.compression.pruner.pruning.RetrainFreePruning.pruners"]], "register_pruning() (in module neural_compressor.compression.pruner.pruning)": [[200, "neural_compressor.compression.pruner.pruning.register_pruning"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[201, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[201, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[201, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[201, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[201, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[201, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[201, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[201, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[202, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[202, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[202, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[202, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[202, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[202, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[202, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "magnitudecriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[203, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[203, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion"]], "get_tf_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[203, "neural_compressor.compression.pruner.tf_criteria.get_tf_criterion"]], "neural_compressor.compression.pruner.tf_criteria": [[203, "module-neural_compressor.compression.pruner.tf_criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[203, "neural_compressor.compression.pruner.tf_criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.tf_criteria.magnitudecriterion attribute)": [[203, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.tf_criteria.pruningcriterion attribute)": [[203, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion.scores"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[204, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[204, "neural_compressor.compression.pruner.utils.check_key_validity"]], "collect_layer_inputs() (in module neural_compressor.compression.pruner.utils)": [[204, "neural_compressor.compression.pruner.utils.collect_layer_inputs"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[204, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_layers() (in module neural_compressor.compression.pruner.utils)": [[204, "neural_compressor.compression.pruner.utils.get_layers"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[204, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "get_sparsity_ratio_tf() (in module neural_compressor.compression.pruner.utils)": [[204, "neural_compressor.compression.pruner.utils.get_sparsity_ratio_tf"]], "neural_compressor.compression.pruner.utils": [[204, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[204, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_last_linear_tf() (in module neural_compressor.compression.pruner.utils)": [[204, "neural_compressor.compression.pruner.utils.parse_last_linear_tf"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[204, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "parse_to_prune_tf() (in module neural_compressor.compression.pruner.utils)": [[204, "neural_compressor.compression.pruner.utils.parse_to_prune_tf"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[204, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[204, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[204, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[204, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[204, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[204, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[205, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[205, "neural_compressor.conf.config.Conf"]], "defaultconf (class in neural_compressor.conf.config)": [[205, "neural_compressor.conf.config.DefaultConf"]], "distillation_conf (class in neural_compressor.conf.config)": [[205, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[205, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[205, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[205, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[205, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[205, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[205, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[205, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[206, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[206, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[206, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[206, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[207, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[208, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[208, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[208, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[208, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[208, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[208, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[208, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[208, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[209, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[209, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[209, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[209, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[209, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[209, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[209, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[209, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[209, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[209, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[209, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[209, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[209, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[209, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[209, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[209, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[209, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[209, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[209, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[209, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[209, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[209, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[209, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[209, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[209, "module-neural_compressor.config"]], "neural_compressor.contrib": [[210, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[211, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[212, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[212, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[213, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[213, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[214, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[214, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[215, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[215, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[215, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[216, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[216, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[216, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[217, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[217, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[217, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[217, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[218, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[219, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[219, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[220, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[220, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[220, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[221, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[221, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[222, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[222, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[222, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[222, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[222, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[223, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[223, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[223, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[223, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[223, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[224, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[224, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[224, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[224, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[224, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[224, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[224, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[224, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[224, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[225, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[225, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[225, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[225, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[225, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[226, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[226, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[227, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[227, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[228, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[228, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[228, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[229, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[229, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[229, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[229, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[229, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[229, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[229, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[230, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[231, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[231, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[232, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[232, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[232, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[233, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[233, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[233, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[233, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[233, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[233, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[233, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[233, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[233, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[234, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[235, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[236, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[236, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[237, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[237, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[237, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[237, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[237, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[237, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[237, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[237, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[237, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[237, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[237, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[237, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[238, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[239, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[239, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[240, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[240, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[240, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[240, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[240, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[240, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[240, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[240, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.TRANSFORMS"], [241, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[241, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[241, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[242, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[242, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[242, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[242, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[242, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[242, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[242, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[242, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[242, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[242, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[243, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[243, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[243, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[243, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[243, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[243, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[243, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[243, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[243, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[243, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[243, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[243, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[243, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[243, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[243, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[243, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[243, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[243, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[243, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[243, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[243, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[244, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[244, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[245, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[246, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[246, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[247, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[247, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[247, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[248, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[248, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[248, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[248, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[248, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[248, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[248, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[248, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[248, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[249, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[249, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[250, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[250, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[250, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[251, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[251, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[252, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.contrib": [[253, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[254, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[255, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[255, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[256, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[256, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[257, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[257, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[258, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[259, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[259, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[259, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[260, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[260, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[260, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[260, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[261, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[262, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[262, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[263, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[263, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[263, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[264, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[264, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[265, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[265, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[265, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[265, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[265, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[266, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[266, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[266, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[266, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[266, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[267, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[267, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[267, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[267, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[267, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[267, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[267, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[267, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[267, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[268, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[268, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[268, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[268, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[268, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[269, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[269, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[270, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[270, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[271, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[271, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[271, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[272, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[272, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[272, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[272, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[272, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[272, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[272, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[273, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[274, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[274, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[275, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[275, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[275, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[276, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[276, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[276, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[276, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[276, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[276, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[276, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[276, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[276, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[277, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[278, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[279, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[279, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[279, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[279, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[279, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[279, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[279, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[279, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[279, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[279, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[280, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[281, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[281, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[281, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[281, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[281, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[281, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[281, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[281, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [282, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[282, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[282, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[283, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[283, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[283, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[283, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[283, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[283, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[284, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[285, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[285, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[285, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[286, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[286, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[286, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[287, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[287, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[287, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[287, "module-neural_compressor.experimental.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[287, "neural_compressor.experimental.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[287, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[287, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[288, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[288, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[289, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[290, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[290, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[290, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[290, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[290, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[290, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[290, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[290, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[290, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[291, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[291, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[292, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[293, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[293, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[293, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[293, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[293, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[293, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[293, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[293, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[294, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[294, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[294, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[294, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[294, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[295, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[295, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[295, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[295, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[295, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[296, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[297, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[297, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[297, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[297, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[297, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[297, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[297, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[297, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[297, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[297, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[297, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[297, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[297, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[297, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[297, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[297, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[297, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[297, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[297, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[297, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[297, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[297, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[297, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[297, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[297, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[297, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[297, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[297, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[297, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[297, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[297, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[297, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[297, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[297, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[297, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[297, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[297, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[297, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[297, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[297, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[297, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[297, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[297, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[297, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[297, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[297, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[297, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[297, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[297, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[297, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[297, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[297, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[297, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[298, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[298, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[299, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[299, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[300, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[300, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[301, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[301, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[302, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[303, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[303, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[303, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[304, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[304, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[304, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[304, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[305, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[305, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[305, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[305, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[305, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[306, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[306, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[307, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[307, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[308, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[309, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[309, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[310, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[310, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[311, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[311, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[311, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[312, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[312, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[312, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[312, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[312, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[313, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[314, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[315, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[315, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[315, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[315, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[315, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[316, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[316, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[316, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[316, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[316, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[316, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[316, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[317, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[317, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[317, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[317, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[317, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[318, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[319, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[320, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[320, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[320, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[320, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[320, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[320, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[320, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[320, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[320, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[320, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[320, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[321, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[321, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[321, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[321, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[321, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[321, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[321, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[322, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[322, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[322, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[322, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[322, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[322, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[322, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[322, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[322, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[322, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[322, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[322, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[322, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[322, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[322, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[322, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[322, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[322, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[322, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[322, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[322, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[323, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[323, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[323, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[323, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[323, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[323, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[324, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[324, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[324, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[324, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[324, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[324, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[324, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[325, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[325, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[326, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[326, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[327, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[327, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[328, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[328, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[329, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[329, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[329, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[329, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[329, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[330, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[330, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[331, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[332, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[332, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[333, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[333, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[334, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[334, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[335, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[335, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[335, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[336, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[337, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[338, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[338, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[338, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[338, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[338, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[338, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[338, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[338, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[338, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[339, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[339, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[339, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[339, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[339, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[339, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[339, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[340, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[340, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[341, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[341, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[341, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[341, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[341, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[342, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[343, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[343, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[343, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[343, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[343, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[343, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[343, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[343, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[343, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[344, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[344, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[345, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[346, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[346, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[346, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[346, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[346, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[346, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[346, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[346, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[347, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[347, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[347, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[347, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[347, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[348, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[348, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[348, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[348, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[348, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[349, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[350, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[350, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[350, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[350, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[350, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[350, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[350, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[350, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[350, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[350, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[350, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[350, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[350, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[350, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[350, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[350, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[350, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[350, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[350, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[350, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[350, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[350, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[350, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[350, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[350, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[350, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[350, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[350, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[350, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[350, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[350, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[350, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[350, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[350, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[350, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[350, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[350, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[350, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[350, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[350, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[350, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[350, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[350, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[350, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[350, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[350, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[350, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[350, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[350, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[350, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[350, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[350, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[350, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[350, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[350, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[351, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[351, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[352, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[352, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[353, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[354, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[354, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[355, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[355, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[355, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[356, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[356, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[357, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[357, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[358, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[358, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[359, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[359, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[359, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[359, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[359, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[359, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[359, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[359, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[359, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[359, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[359, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[359, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[359, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[359, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[359, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[359, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[359, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[359, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[360, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[360, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[360, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[360, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[360, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[361, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[361, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[361, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[361, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[361, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[361, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[361, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[361, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[361, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[362, "module-neural_compressor.profiling"]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[363, "neural_compressor.profiling.parser.factory.ParserFactory"]], "neural_compressor.profiling.parser.factory": [[363, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[364, "module-neural_compressor.profiling.parser"]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[365, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[365, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[366, "module-neural_compressor.profiling.parser.onnx_parser"]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[367, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[367, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[368, "neural_compressor.profiling.parser.parser.ProfilingParser"]], "neural_compressor.profiling.parser.parser": [[368, "module-neural_compressor.profiling.parser.parser"]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[369, "neural_compressor.profiling.parser.result.ProfilingResult"]], "neural_compressor.profiling.parser.result": [[369, "module-neural_compressor.profiling.parser.result"]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[370, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[370, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[371, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[372, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[372, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[373, "neural_compressor.profiling.profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.factory": [[373, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[374, "module-neural_compressor.profiling.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[375, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[375, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[376, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[377, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[377, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[378, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[378, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[379, "neural_compressor.profiling.profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.profiler": [[379, "module-neural_compressor.profiling.profiler.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[380, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[380, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[381, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[382, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[382, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[383, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config"]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[383, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[383, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[383, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution"]], "fit() (in module neural_compressor.quantization)": [[384, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[384, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[385, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[385, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[386, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[386, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[387, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[387, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[388, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[388, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[388, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[388, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[388, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[389, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[389, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[390, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[390, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[391, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[391, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[392, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[393, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[393, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[394, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[394, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[395, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[395, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[396, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[396, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[396, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[396, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[397, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[398, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[399, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[399, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[399, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[399, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[399, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[399, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[399, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[399, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[399, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[399, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[400, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[400, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[400, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[400, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[400, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[400, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[400, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[401, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[401, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[402, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[402, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[402, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[402, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[402, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[402, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[402, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[402, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[402, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[402, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[403, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[403, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[403, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[403, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[403, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[403, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[403, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[403, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[403, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[403, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[403, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[404, "module-neural_compressor.template"]], "callbacks (class in neural_compressor.training)": [[405, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[405, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[405, "neural_compressor.training.fit"]], "neural_compressor.training": [[405, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[405, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[406, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[406, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[407, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[408, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[408, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[408, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[408, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[408, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[408, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[408, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[408, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[408, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[408, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[409, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[410, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[410, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[411, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "neural_compressor.utils.load_huggingface": [[411, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[411, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[412, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[412, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[412, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[412, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[412, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[412, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[412, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[412, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[412, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.neural_insights_utils": [[413, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[413, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[413, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[413, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[414, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[414, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[415, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[415, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[415, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.calculate_mse"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.compute_sparsity"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[416, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[416, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[417, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[417, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[417, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[418, "module-neural_compressor.version"]]}})