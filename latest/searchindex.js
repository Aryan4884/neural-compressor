Search.setIndex({"docnames": ["autoapi/644ec953a7dc_pruning_support/index", "autoapi/6ece06672ed3_v1_14/index", "autoapi/6f0d0f71d92e_v1_13/index", "autoapi/9e89549a08c8_v1_11/index", "autoapi/block_mask/index", "autoapi/env/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/compression/pruning/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/export/utils/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/index", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index", "autoapi/neural_compressor/ux/components/configuration_wizard/index", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index", "autoapi/neural_compressor/ux/components/db_manager/utils/index", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/factory/index", "autoapi/neural_compressor/ux/components/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index", "autoapi/neural_compressor/ux/components/file_browser/index", "autoapi/neural_compressor/ux/components/graph/attribute/index", "autoapi/neural_compressor/ux/components/graph/collapser/index", "autoapi/neural_compressor/ux/components/graph/edge/index", "autoapi/neural_compressor/ux/components/graph/graph/index", "autoapi/neural_compressor/ux/components/graph/graph_reader/index", "autoapi/neural_compressor/ux/components/graph/index", "autoapi/neural_compressor/ux/components/graph/node/index", "autoapi/neural_compressor/ux/components/graph/reader/index", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index", "autoapi/neural_compressor/ux/components/index", "autoapi/neural_compressor/ux/components/jobs_management/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index", "autoapi/neural_compressor/ux/components/jobs_management/request/index", "autoapi/neural_compressor/ux/components/manage_workspace/index", "autoapi/neural_compressor/ux/components/model/domain/index", "autoapi/neural_compressor/ux/components/model/index", "autoapi/neural_compressor/ux/components/model/model/index", "autoapi/neural_compressor/ux/components/model/model_type_getter/index", "autoapi/neural_compressor/ux/components/model/onnxrt/index", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index", "autoapi/neural_compressor/ux/components/model/pytorch/index", "autoapi/neural_compressor/ux/components/model/pytorch/model/index", "autoapi/neural_compressor/ux/components/model/repository/index", "autoapi/neural_compressor/ux/components/model/shape/index", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index", "autoapi/neural_compressor/ux/components/model/tensorflow/index", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index", "autoapi/neural_compressor/ux/components/model_zoo/index", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index", "autoapi/neural_compressor/ux/components/names_mapper/index", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index", "autoapi/neural_compressor/ux/components/optimization/factory/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/optimization/index", "autoapi/neural_compressor/ux/components/optimization/pruning/index", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index", "autoapi/neural_compressor/ux/components/optimization/tune/index", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index", "autoapi/neural_compressor/ux/components/profiling/factory/index", "autoapi/neural_compressor/ux/components/profiling/index", "autoapi/neural_compressor/ux/components/profiling/profile_model/index", "autoapi/neural_compressor/ux/components/profiling/profiler/index", "autoapi/neural_compressor/ux/components/profiling/profiling/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index", "autoapi/neural_compressor/ux/inc_bench/index", "autoapi/neural_compressor/ux/index", "autoapi/neural_compressor/ux/utils/consts/index", "autoapi/neural_compressor/ux/utils/environment/index", "autoapi/neural_compressor/ux/utils/exceptions/index", "autoapi/neural_compressor/ux/utils/executor/index", "autoapi/neural_compressor/ux/utils/expiring_dict/index", "autoapi/neural_compressor/ux/utils/github_info/index", "autoapi/neural_compressor/ux/utils/hw_info/index", "autoapi/neural_compressor/ux/utils/index", "autoapi/neural_compressor/ux/utils/json_serializer/index", "autoapi/neural_compressor/ux/utils/logger/index", "autoapi/neural_compressor/ux/utils/parser/index", "autoapi/neural_compressor/ux/utils/proc/index", "autoapi/neural_compressor/ux/utils/processes/index", "autoapi/neural_compressor/ux/utils/singleton/index", "autoapi/neural_compressor/ux/utils/status_updates/index", "autoapi/neural_compressor/ux/utils/templates/index", "autoapi/neural_compressor/ux/utils/templates/metric/index", "autoapi/neural_compressor/ux/utils/templates/workdir/index", "autoapi/neural_compressor/ux/utils/utils/index", "autoapi/neural_compressor/ux/utils/workload/config/index", "autoapi/neural_compressor/ux/utils/workload/dataloader/index", "autoapi/neural_compressor/ux/utils/workload/evaluation/index", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index", "autoapi/neural_compressor/ux/utils/workload/index", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index", "autoapi/neural_compressor/ux/utils/workload/model/index", "autoapi/neural_compressor/ux/utils/workload/pruning/index", "autoapi/neural_compressor/ux/utils/workload/quantization/index", "autoapi/neural_compressor/ux/utils/workload/tuning/index", "autoapi/neural_compressor/ux/utils/yaml_utils/index", "autoapi/neural_compressor/ux/web/communication/index", "autoapi/neural_compressor/ux/web/configuration/index", "autoapi/neural_compressor/ux/web/exceptions/index", "autoapi/neural_compressor/ux/web/index", "autoapi/neural_compressor/ux/web/router/index", "autoapi/neural_compressor/ux/web/server/index", "autoapi/neural_compressor/ux/web/service/benchmark/index", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index", "autoapi/neural_compressor/ux/web/service/index", "autoapi/neural_compressor/ux/web/service/model/index", "autoapi/neural_compressor/ux/web/service/optimization/index", "autoapi/neural_compressor/ux/web/service/profiling/index", "autoapi/neural_compressor/ux/web/service/request_data_processor/index", "autoapi/neural_compressor/ux/web/service/response_generator/index", "autoapi/neural_compressor/ux/web/service/workload/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/bench", "docs/source/benchmark", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/objective", "docs/source/orchestration", "docs/source/platform_configuration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/644ec953a7dc_pruning_support/index.rst", "autoapi/6ece06672ed3_v1_14/index.rst", "autoapi/6f0d0f71d92e_v1_13/index.rst", "autoapi/9e89549a08c8_v1_11/index.rst", "autoapi/block_mask/index.rst", "autoapi/env/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/compression/pruning/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/export/utils/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index.rst", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/index.rst", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index.rst", "autoapi/neural_compressor/ux/components/db_manager/utils/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/factory/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index.rst", "autoapi/neural_compressor/ux/components/file_browser/index.rst", "autoapi/neural_compressor/ux/components/graph/attribute/index.rst", "autoapi/neural_compressor/ux/components/graph/collapser/index.rst", "autoapi/neural_compressor/ux/components/graph/edge/index.rst", "autoapi/neural_compressor/ux/components/graph/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/graph_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/node/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index.rst", "autoapi/neural_compressor/ux/components/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/request/index.rst", "autoapi/neural_compressor/ux/components/manage_workspace/index.rst", "autoapi/neural_compressor/ux/components/model/domain/index.rst", "autoapi/neural_compressor/ux/components/model/index.rst", "autoapi/neural_compressor/ux/components/model/model/index.rst", "autoapi/neural_compressor/ux/components/model/model_type_getter/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/model/index.rst", "autoapi/neural_compressor/ux/components/model/repository/index.rst", "autoapi/neural_compressor/ux/components/model/shape/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/factory/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/profile_model/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/ux/inc_bench/index.rst", "autoapi/neural_compressor/ux/index.rst", "autoapi/neural_compressor/ux/utils/consts/index.rst", "autoapi/neural_compressor/ux/utils/environment/index.rst", "autoapi/neural_compressor/ux/utils/exceptions/index.rst", "autoapi/neural_compressor/ux/utils/executor/index.rst", "autoapi/neural_compressor/ux/utils/expiring_dict/index.rst", "autoapi/neural_compressor/ux/utils/github_info/index.rst", "autoapi/neural_compressor/ux/utils/hw_info/index.rst", "autoapi/neural_compressor/ux/utils/index.rst", "autoapi/neural_compressor/ux/utils/json_serializer/index.rst", "autoapi/neural_compressor/ux/utils/logger/index.rst", "autoapi/neural_compressor/ux/utils/parser/index.rst", "autoapi/neural_compressor/ux/utils/proc/index.rst", "autoapi/neural_compressor/ux/utils/processes/index.rst", "autoapi/neural_compressor/ux/utils/singleton/index.rst", "autoapi/neural_compressor/ux/utils/status_updates/index.rst", "autoapi/neural_compressor/ux/utils/templates/index.rst", "autoapi/neural_compressor/ux/utils/templates/metric/index.rst", "autoapi/neural_compressor/ux/utils/templates/workdir/index.rst", "autoapi/neural_compressor/ux/utils/utils/index.rst", "autoapi/neural_compressor/ux/utils/workload/config/index.rst", "autoapi/neural_compressor/ux/utils/workload/dataloader/index.rst", "autoapi/neural_compressor/ux/utils/workload/evaluation/index.rst", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index.rst", "autoapi/neural_compressor/ux/utils/workload/index.rst", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index.rst", "autoapi/neural_compressor/ux/utils/workload/model/index.rst", "autoapi/neural_compressor/ux/utils/workload/pruning/index.rst", "autoapi/neural_compressor/ux/utils/workload/quantization/index.rst", "autoapi/neural_compressor/ux/utils/workload/tuning/index.rst", "autoapi/neural_compressor/ux/utils/yaml_utils/index.rst", "autoapi/neural_compressor/ux/web/communication/index.rst", "autoapi/neural_compressor/ux/web/configuration/index.rst", "autoapi/neural_compressor/ux/web/exceptions/index.rst", "autoapi/neural_compressor/ux/web/index.rst", "autoapi/neural_compressor/ux/web/router/index.rst", "autoapi/neural_compressor/ux/web/server/index.rst", "autoapi/neural_compressor/ux/web/service/benchmark/index.rst", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index.rst", "autoapi/neural_compressor/ux/web/service/index.rst", "autoapi/neural_compressor/ux/web/service/model/index.rst", "autoapi/neural_compressor/ux/web/service/optimization/index.rst", "autoapi/neural_compressor/ux/web/service/profiling/index.rst", "autoapi/neural_compressor/ux/web/service/request_data_processor/index.rst", "autoapi/neural_compressor/ux/web/service/response_generator/index.rst", "autoapi/neural_compressor/ux/web/service/workload/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/bench.md", "docs/source/benchmark.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/platform_configuration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">644ec953a7dc_pruning_support</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6ece06672ed3_v1_14</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6f0d0f71d92e_v1_13</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">9e89549a08c8_v1_11</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">env</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.pattern_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.execute_benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.benchmark_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.graph_optimization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.mixed_precision_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.profiling_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.pruning_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.quantization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.configuration_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_boundary_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.params_feeder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.pruning_config_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain_flavour</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.framework</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.project</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.pruning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.examples_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.model_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.project_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.params_interfaces</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.attribute</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.collapser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.edge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.onnxrt_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.tensorflow_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_control_queue</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.request</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.manage_workspace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model_type_getter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.shape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.frozen_pb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.meta_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.saved_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.list_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.execute_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tune_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.execute_profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profile_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.inc_bench</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.consts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.environment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.executor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.expiring_dict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.github_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.hw_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.json_serializer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.proc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.processes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.status_updates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.workdir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.yaml_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.communication</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.server</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.history_snapshot_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.request_data_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.response_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Intel\u00ae Neural Compressor Bench", "Benchmarking", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Full Publications/Events (59)", "Pythonic Style Access for Configurations", "Quantization", "Turn OFF Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"pruning_support": 0, "revis": [0, 1, 2, 3], "id": [0, 1, 2, 3, 160, 211, 213, 253, 263, 265, 266, 267, 268, 316, 318, 319, 320, 321, 438, 588, 620, 624], "644ec953a7dc": 0, "6ece06672ed3": [0, 1], "creat": [0, 1, 2, 3, 5, 18, 21, 105, 179, 180, 185, 195, 197, 215, 229, 239, 241, 266, 276, 277, 312, 319, 351, 354, 359, 533, 550, 553, 556, 574, 591, 602, 604, 606, 607, 610, 617, 620, 622, 624], "date": [0, 1, 2, 3], "2022": [0, 1, 2, 3, 179, 180, 555, 587, 621], "12": [0, 571, 583, 586, 627], "09": [0, 627], "17": [0, 621, 627], "22": [0, 3, 586, 627], "310141": 0, "v1": [1, 2, 3, 146, 207, 208, 251, 267, 268, 270, 320, 321, 323, 332, 578, 583, 588, 591, 614, 619, 620, 627], "14": [1, 2, 180, 258, 259, 580, 586, 621, 627], "6f0d0f71d92e": [1, 2], "08": [1, 212, 254, 623, 627], "31": [1, 627], "07": [1, 2, 621, 626, 627], "16": [1, 573, 574, 621, 627], "24": [1, 614, 621, 624, 627], "229939": 1, "update_dataload": 1, "db_session": [1, 420], "sqlalchemi": [1, 407, 420, 581, 586], "orm": [1, 407, 420], "session": [1, 146, 194, 238, 332, 420, 589, 622], "sourc": [1, 5, 6, 8, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 227, 228, 229, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 251, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 288, 289, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 350, 351, 352, 353, 354, 356, 357, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 419, 420, 421, 422, 425, 426, 427, 429, 430, 432, 433, 434, 435, 436, 438, 440, 441, 447, 448, 450, 451, 453, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 469, 471, 472, 473, 474, 476, 477, 479, 480, 482, 483, 485, 486, 488, 489, 490, 491, 492, 494, 495, 496, 497, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 552, 555, 587, 589, 602, 604, 606, 607, 609, 615], "updat": [1, 74, 154, 165, 171, 175, 259, 295, 323, 335, 369, 420, 490, 517, 571, 580, 581, 588, 589, 595, 600, 603, 613, 614, 621, 624, 625], "dataload": [1, 18, 20, 148, 152, 154, 160, 167, 169, 183, 184, 195, 206, 216, 227, 228, 239, 250, 255, 262, 285, 290, 299, 315, 335, 356, 359, 367, 394, 418, 420, 442, 483, 496, 502, 510, 521, 526, 552, 555, 556, 571, 576, 577, 578, 583, 584, 588, 589, 590, 612, 617, 618, 621, 622, 623, 626], "exist": [1, 53, 160, 177, 213, 332, 453, 521, 580, 588, 596, 624], "databas": [1, 197, 241, 385, 388, 390, 393, 394, 395, 398, 399, 404, 408, 409, 413, 418], "update_transform": 1, "transform": [1, 44, 50, 141, 143, 144, 145, 151, 172, 195, 196, 197, 198, 199, 200, 202, 204, 206, 239, 240, 241, 242, 243, 244, 246, 248, 250, 262, 315, 394, 418, 420, 442, 521, 523, 552, 553, 573, 574, 576, 577, 578, 579, 583, 589, 592, 597, 598, 599, 600, 614, 615, 618, 621, 622, 626, 627], "13": [2, 3, 571, 586, 621], "9e89549a08c8": [2, 3], "29": [2, 621, 627], "41": [2, 621, 627], "291905": 2, "11": [3, 571, 586, 588, 590, 621, 624], "03": [3, 627], "34": [3, 627], "52": [3, 621, 627], "916541": 3, "block": [4, 151, 165, 171, 172, 175, 293, 334, 354, 538, 585, 611, 614, 621], "mask": [4, 170, 171, 172, 195, 239, 266, 295, 319, 614, 627], "run_migrations_offlin": 5, "run": [5, 18, 146, 160, 172, 175, 179, 180, 183, 184, 194, 211, 213, 227, 228, 238, 253, 294, 295, 302, 324, 335, 339, 356, 468, 514, 536, 538, 551, 556, 571, 572, 578, 581, 582, 589, 590, 592, 594, 596, 597, 598, 600, 602, 603, 604, 606, 607, 609, 615, 617, 619, 620, 622, 624, 626], "migrat": [5, 621, 625], "offlin": [5, 366, 550, 589, 617, 621], "mode": [5, 43, 44, 45, 110, 152, 204, 248, 266, 312, 319, 332, 351, 366, 556, 571, 585, 586, 602, 606, 617, 618, 624], "thi": [5, 45, 86, 110, 132, 139, 141, 145, 148, 154, 159, 161, 167, 169, 171, 172, 173, 174, 179, 180, 183, 184, 194, 195, 196, 197, 198, 199, 200, 202, 212, 215, 221, 222, 227, 228, 238, 239, 240, 241, 242, 243, 244, 246, 254, 263, 266, 267, 268, 270, 279, 280, 282, 283, 284, 285, 290, 293, 295, 297, 298, 299, 302, 305, 316, 319, 320, 321, 323, 324, 334, 335, 339, 344, 354, 356, 365, 366, 550, 551, 552, 553, 556, 571, 573, 574, 576, 577, 578, 582, 585, 587, 588, 589, 590, 591, 592, 594, 595, 597, 598, 600, 602, 604, 606, 607, 608, 609, 610, 614, 617, 618, 619, 620, 621, 622, 623, 624, 625], "configur": [5, 16, 18, 19, 45, 118, 147, 154, 160, 175, 176, 179, 180, 183, 184, 186, 197, 200, 213, 218, 227, 228, 241, 244, 255, 259, 261, 272, 273, 274, 276, 285, 290, 294, 298, 299, 305, 315, 323, 324, 334, 335, 344, 356, 358, 359, 364, 365, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 384, 472, 502, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 536, 538, 552, 553, 556, 571, 574, 588, 589, 596, 610, 611, 614, 617, 619, 623, 624, 627], "context": [5, 18, 366, 616], "just": [5, 97, 185, 210, 212, 215, 217, 218, 220, 229, 254, 334, 553, 589, 599, 603, 609, 612, 617, 621, 623, 624], "url": [5, 197, 241, 587], "an": [5, 18, 67, 68, 70, 105, 141, 148, 154, 159, 172, 179, 180, 188, 193, 197, 212, 216, 221, 232, 237, 241, 254, 262, 263, 267, 268, 276, 277, 299, 315, 316, 320, 321, 324, 335, 354, 356, 366, 430, 548, 550, 552, 553, 555, 556, 573, 574, 575, 580, 588, 589, 590, 592, 596, 597, 600, 609, 611, 614, 615, 617, 620, 621, 622, 623, 624], "engin": 5, "though": [5, 621], "i": [5, 18, 44, 45, 48, 49, 53, 54, 57, 60, 64, 70, 82, 85, 105, 132, 141, 146, 148, 153, 154, 159, 160, 161, 165, 169, 170, 172, 173, 175, 179, 180, 183, 184, 185, 193, 194, 195, 196, 197, 198, 199, 202, 204, 208, 212, 213, 215, 219, 221, 222, 227, 228, 229, 237, 238, 239, 240, 241, 242, 243, 246, 248, 251, 254, 263, 266, 268, 270, 272, 277, 285, 290, 294, 295, 299, 306, 316, 319, 321, 323, 324, 334, 335, 340, 345, 354, 356, 365, 366, 430, 469, 509, 513, 519, 521, 529, 536, 550, 551, 552, 553, 555, 556, 557, 559, 563, 566, 569, 571, 572, 573, 574, 576, 577, 578, 580, 582, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 600, 602, 603, 604, 606, 607, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627], "accept": [5, 179, 180, 354, 550, 571, 572], "here": [5, 266, 319, 354, 571, 574, 578, 579, 580, 582, 583, 588, 597, 604, 607, 609, 617, 619, 620, 627], "well": [5, 183, 184, 227, 228, 324, 335, 356, 553, 555, 574, 614, 617, 619, 621, 626], "By": [5, 169, 179, 180, 263, 316, 555, 588, 591, 602, 603, 606, 615, 624], "skip": [5, 622, 624], "creation": [5, 382], "we": [5, 44, 67, 68, 70, 74, 86, 141, 152, 158, 159, 160, 169, 179, 180, 194, 213, 215, 238, 263, 266, 316, 319, 342, 550, 552, 556, 573, 578, 580, 582, 588, 589, 596, 597, 600, 604, 607, 609, 610, 611, 612, 614, 616, 617, 620, 621, 622, 624, 625], "don": [5, 141, 159, 171, 179, 180, 552, 571, 614, 624], "t": [5, 67, 68, 70, 141, 159, 171, 179, 180, 212, 215, 254, 268, 321, 552, 556, 571, 576, 578, 589, 610, 614, 617, 624, 626], "even": [5, 571, 621], "need": [5, 18, 44, 105, 109, 152, 160, 169, 180, 183, 184, 185, 193, 194, 197, 204, 212, 215, 217, 218, 227, 228, 229, 237, 238, 241, 248, 254, 299, 305, 323, 324, 334, 335, 344, 356, 365, 366, 552, 556, 571, 573, 574, 576, 578, 585, 589, 590, 592, 594, 595, 598, 602, 603, 604, 606, 607, 609, 610, 614, 616, 617, 618, 619, 621, 623, 624, 626], "dbapi": 5, "avail": [5, 179, 180, 328, 469, 557, 559, 563, 566, 569, 571, 579, 583, 585, 602, 606, 613, 614, 624, 627], "call": [5, 18, 152, 155, 169, 172, 266, 295, 319, 552, 553, 556, 571, 573, 584, 598, 600, 610, 617, 621, 622, 623], "execut": [5, 44, 53, 160, 172, 179, 180, 295, 299, 301, 335, 336, 338, 356, 359, 365, 366, 368, 369, 472, 476, 480, 484, 485, 488, 491, 503, 506, 514, 515, 537, 571, 576, 577, 589, 590, 594, 595, 602, 603, 606, 609, 610, 612, 614, 617, 620, 624, 627], "emit": 5, "given": [5, 18, 21, 67, 68, 70, 104, 105, 116, 146, 154, 212, 254, 266, 319, 335, 430, 507, 521, 553, 614, 621, 623], "string": [5, 44, 45, 116, 146, 160, 162, 169, 171, 172, 173, 174, 175, 176, 179, 180, 197, 214, 219, 241, 255, 259, 261, 263, 266, 272, 273, 274, 276, 277, 285, 290, 293, 294, 295, 296, 297, 298, 316, 319, 328, 332, 359, 366, 379, 521, 588, 621, 623], "script": [5, 169, 263, 264, 267, 268, 316, 317, 320, 321, 368, 369, 455, 472, 476, 480, 482, 485, 488, 494, 578, 585, 592, 596, 599, 600, 603, 615], "output": [5, 44, 53, 57, 59, 74, 98, 105, 110, 146, 154, 169, 170, 171, 177, 179, 180, 183, 184, 217, 221, 227, 228, 258, 259, 263, 293, 316, 323, 324, 332, 335, 356, 362, 363, 366, 476, 480, 552, 556, 571, 576, 577, 578, 580, 582, 584, 588, 589, 591, 600, 609, 610, 612, 614, 616, 617, 621, 622, 623, 624, 626], "run_migrations_onlin": 5, "onlin": [5, 550, 620], "In": [5, 161, 171, 172, 173, 180, 194, 222, 238, 266, 293, 295, 319, 334, 550, 552, 553, 555, 556, 571, 573, 574, 576, 577, 578, 588, 589, 599, 602, 603, 606, 611, 612, 614, 617, 618, 620, 621, 622, 623, 624], "scenario": [5, 383, 556, 571, 572, 576, 589, 614], "associ": [5, 266, 319, 408, 409], "connect": [5, 165, 295, 407, 408, 410, 411, 412, 414, 415, 416, 417, 571, 609, 613, 614, 620], "adaptor_registri": [6, 556], "cl": [6, 155, 162, 171, 172, 173, 174, 197, 204, 212, 214, 219, 241, 248, 254, 277, 284, 288, 293, 295, 297, 308, 323, 334, 347, 366], "The": [6, 8, 16, 19, 21, 38, 44, 53, 74, 113, 119, 121, 146, 154, 155, 160, 161, 162, 165, 169, 171, 172, 173, 174, 175, 176, 177, 179, 180, 183, 184, 185, 195, 196, 197, 198, 199, 203, 204, 212, 214, 217, 219, 222, 224, 227, 228, 229, 239, 240, 241, 242, 243, 247, 248, 254, 255, 261, 263, 264, 265, 267, 268, 270, 272, 273, 274, 276, 277, 279, 280, 282, 283, 284, 285, 288, 290, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 305, 306, 307, 308, 312, 314, 316, 317, 318, 320, 321, 323, 324, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 351, 353, 354, 356, 357, 359, 361, 362, 365, 366, 386, 387, 389, 392, 396, 397, 400, 401, 403, 405, 406, 413, 418, 421, 423, 424, 425, 426, 427, 428, 429, 442, 449, 450, 502, 550, 552, 553, 556, 557, 559, 563, 566, 569, 571, 572, 573, 574, 576, 578, 580, 582, 584, 585, 586, 588, 589, 590, 591, 594, 595, 597, 600, 602, 603, 604, 606, 607, 609, 610, 611, 612, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627], "decor": [6, 21, 38, 67, 68, 70, 146, 155, 171, 172, 174, 212, 219, 254, 270, 277, 284, 288, 293, 295, 297, 308, 311, 323, 334, 347, 350, 366, 516, 552, 553, 556, 624], "us": [6, 18, 21, 38, 44, 48, 49, 70, 103, 105, 116, 148, 154, 160, 162, 165, 169, 170, 171, 172, 174, 177, 179, 180, 183, 184, 193, 194, 195, 196, 197, 198, 199, 202, 211, 212, 213, 214, 219, 227, 228, 237, 238, 239, 240, 241, 242, 243, 246, 253, 254, 258, 259, 261, 263, 264, 266, 270, 271, 272, 277, 284, 285, 288, 290, 293, 295, 296, 297, 298, 299, 302, 305, 308, 311, 312, 316, 317, 319, 323, 334, 335, 339, 342, 344, 347, 350, 351, 354, 357, 358, 359, 360, 366, 413, 418, 423, 424, 428, 430, 442, 449, 451, 476, 480, 521, 533, 550, 551, 552, 553, 556, 571, 572, 573, 574, 576, 577, 578, 580, 582, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 600, 602, 604, 606, 607, 609, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627], "regist": [6, 21, 38, 155, 162, 165, 171, 172, 173, 174, 197, 204, 212, 214, 219, 241, 248, 254, 270, 277, 284, 288, 293, 295, 297, 308, 311, 323, 334, 347, 350, 553, 556, 574, 578, 588, 589, 610, 611, 621, 624], "all": [6, 18, 21, 38, 45, 63, 97, 154, 155, 157, 160, 161, 171, 172, 175, 179, 180, 185, 186, 193, 197, 204, 212, 213, 219, 222, 224, 229, 237, 241, 248, 254, 259, 263, 266, 268, 270, 277, 284, 288, 289, 293, 299, 308, 311, 316, 319, 321, 323, 325, 334, 347, 350, 359, 366, 370, 382, 394, 418, 423, 424, 437, 439, 442, 443, 449, 468, 475, 477, 481, 482, 484, 487, 493, 498, 502, 515, 538, 550, 555, 556, 571, 573, 574, 578, 582, 586, 589, 592, 600, 603, 604, 607, 608, 609, 610, 612, 613, 614, 615, 617, 618, 621, 623, 624], "subclass": [6, 21, 38, 155, 171, 172, 174, 190, 194, 197, 204, 212, 219, 234, 238, 241, 248, 254, 270, 277, 284, 288, 293, 295, 297, 308, 311, 323, 334, 347, 350, 556], "paramet": [6, 16, 18, 19, 21, 44, 45, 67, 68, 70, 86, 105, 116, 132, 146, 147, 148, 152, 153, 154, 155, 160, 161, 162, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 183, 184, 194, 195, 197, 204, 208, 212, 214, 219, 224, 227, 228, 238, 239, 241, 248, 251, 254, 255, 257, 258, 259, 260, 261, 263, 264, 266, 267, 268, 270, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 288, 290, 293, 294, 295, 296, 297, 298, 302, 308, 312, 314, 316, 317, 319, 320, 321, 323, 324, 328, 332, 334, 335, 339, 347, 351, 353, 354, 356, 359, 363, 365, 366, 383, 408, 409, 419, 430, 501, 521, 523, 533, 552, 571, 573, 574, 576, 578, 585, 588, 589, 603, 609, 610, 614, 617, 620, 621, 623, 624, 626], "framework_specific_info": [6, 8, 16, 19, 45, 47, 556], "base": [6, 8, 18, 21, 38, 45, 46, 47, 86, 105, 116, 120, 122, 132, 142, 148, 151, 154, 155, 161, 165, 180, 185, 188, 193, 195, 197, 204, 212, 222, 229, 232, 237, 239, 241, 248, 254, 270, 276, 278, 284, 285, 288, 290, 295, 305, 308, 312, 323, 325, 332, 333, 334, 344, 347, 351, 381, 521, 553, 555, 556, 574, 577, 578, 582, 589, 597, 598, 600, 609, 613, 614, 617, 620, 622, 624, 627], "framework": [6, 8, 16, 18, 19, 45, 160, 162, 172, 181, 182, 186, 187, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 206, 209, 212, 214, 215, 219, 225, 226, 230, 231, 233, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 250, 252, 254, 261, 270, 271, 298, 306, 312, 323, 324, 325, 326, 328, 345, 351, 359, 368, 394, 418, 420, 442, 469, 476, 480, 485, 488, 503, 509, 521, 555, 556, 571, 578, 579, 583, 584, 585, 586, 588, 589, 590, 614, 615, 617, 622, 623, 624, 625, 626], "layer": [6, 8, 16, 19, 44, 45, 46, 47, 116, 117, 118, 119, 121, 122, 152, 158, 162, 167, 169, 170, 171, 175, 179, 180, 214, 221, 293, 294, 357, 359, 366, 533, 556, 577, 585, 614, 619], "mxnet_util": 7, "util": [7, 17, 22, 105, 110, 111, 139, 140, 147, 148, 149, 153, 164, 166, 169, 179, 180, 221, 256, 262, 264, 294, 304, 315, 317, 343, 381, 418, 442, 449, 459, 493, 498, 502, 557, 578, 589, 592, 617, 624, 625], "ox_util": 7, "oper": [7, 22, 44, 104, 110, 146, 169, 170, 171, 179, 180, 208, 251, 293, 533, 552, 571, 572, 573, 580, 609, 617, 621, 623, 624], "activ": [7, 22, 34, 154, 179, 180, 221, 259, 312, 351, 426, 556, 571, 577, 582, 589, 610, 613, 616, 617, 621, 622, 626], "argmax": [7, 22, 34], "attent": [7, 22, 34, 151, 167, 169, 179, 180, 195, 239, 550, 576, 614], "binary_op": [7, 22, 34], "concat": [7, 22, 34, 145], "conv": [7, 22, 34, 58, 62, 66, 71, 72, 73, 92, 109, 158, 179, 180, 552, 589, 614, 616, 617, 624], "direct_q8": [7, 22, 34], "embed_layernorm": [7, 22, 34], "gather": [7, 18, 22, 34, 179, 180, 293, 509], "gavgpool": [7, 22, 34], "gemm": [7, 22, 34, 179, 180], "lstm": [7, 22, 34], "matmul": [7, 22, 34, 52, 59, 65, 73, 94, 109, 128, 137, 171, 179, 180, 259, 293, 580, 582, 624], "maxpool": [7, 22, 34, 129, 138, 582], "op": [7, 18, 22, 34, 44, 45, 52, 57, 65, 66, 67, 68, 69, 70, 71, 72, 74, 78, 81, 85, 88, 91, 92, 93, 94, 96, 105, 107, 109, 123, 124, 125, 131, 133, 134, 135, 136, 141, 144, 146, 147, 148, 153, 154, 158, 169, 179, 180, 259, 305, 312, 313, 340, 342, 344, 351, 352, 361, 426, 427, 537, 556, 571, 582, 589, 590, 614, 617, 618, 619, 621, 622, 624, 626], "pad": [7, 22, 34, 71, 72, 195, 212, 239, 254, 574, 623], "pool": [7, 22, 34], "resiz": [7, 22, 34, 195, 196, 208, 212, 239, 240, 251, 254, 573, 574, 623], "split": [7, 22, 34, 44, 82, 211, 212, 253, 254, 552, 621, 623], "calibr": [7, 16, 18, 19, 22, 44, 49, 89, 90, 154, 160, 179, 180, 183, 184, 227, 228, 261, 298, 335, 361, 530, 556, 573, 574, 584, 585, 617, 624, 626], "quantiz": [7, 16, 18, 19, 21, 22, 44, 48, 49, 88, 92, 94, 96, 99, 107, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 147, 148, 152, 154, 158, 160, 161, 179, 180, 183, 184, 208, 215, 222, 227, 228, 251, 259, 260, 261, 262, 272, 299, 305, 311, 315, 340, 342, 344, 356, 357, 361, 365, 366, 502, 510, 526, 556, 561, 571, 573, 574, 578, 579, 580, 582, 584, 585, 588, 590, 591, 592, 597, 599, 600, 603, 612, 615, 619, 622, 623, 624, 625, 626], "tf_util": 7, "graph_rewrit": [7, 111], "bf16": [7, 57, 87, 111, 147, 179, 180, 312, 351, 556, 582, 589, 590, 594, 599, 603, 609, 618, 624], "gener": [7, 18, 48, 49, 87, 111, 122, 146, 154, 160, 169, 175, 183, 184, 185, 194, 197, 198, 199, 200, 212, 227, 228, 229, 238, 241, 242, 243, 244, 254, 259, 263, 271, 302, 316, 324, 335, 339, 354, 356, 368, 371, 372, 373, 374, 375, 376, 377, 378, 419, 488, 494, 495, 505, 546, 552, 556, 571, 573, 576, 588, 589, 590, 592, 597, 602, 604, 606, 607, 609, 611, 613, 614, 615, 617, 618, 621, 622, 623, 624], "int8": [7, 23, 24, 44, 87, 111, 123, 124, 125, 131, 133, 134, 135, 136, 141, 146, 159, 160, 179, 180, 208, 251, 257, 258, 259, 312, 314, 351, 353, 365, 552, 556, 571, 572, 574, 577, 582, 589, 594, 597, 599, 600, 603, 609, 616, 617, 618, 619, 620, 621, 622, 623, 626], "onnx": [7, 19, 20, 21, 34, 43, 44, 87, 111, 140, 158, 179, 180, 191, 235, 257, 258, 259, 260, 324, 331, 364, 369, 472, 555, 556, 557, 573, 579, 580, 582, 583, 585, 591, 594, 599, 600, 615, 616, 621, 624], "qdq": [7, 87, 111, 112, 113, 140, 154, 179, 180, 257, 258, 259, 556, 580, 585, 599, 600, 617, 621], "graph_bas": [7, 87, 111], "quantize_graph": [7, 111], "qat": [7, 111, 112, 153, 180, 259, 272, 332, 577, 578, 580, 585, 589, 617], "quantize_graph_bas": [7, 111, 112], "quantize_graph_bn": [7, 111, 112], "quantize_graph_concatv2": [7, 111, 112], "quantize_graph_conv": [7, 111, 112], "quantize_graph_for_intel_cpu": [7, 111, 112], "quantize_graph_matmul": [7, 111, 112], "quantize_graph_pool": [7, 111, 112], "transform_graph": [7, 111], "bias_correct": [7, 111, 143], "graph_transform_bas": [7, 111, 143], "insert_log": [7, 111, 143], "rerange_quantized_concat": [7, 111, 143], "graph_convert": [7, 111], "graph_converter_without_calib": [7, 111], "graph_util": [7, 111], "quantize_graph_common": [7, 111], "tf2onnx_convert": [7, 111], "torch_util": [7, 216, 262, 315, 621], "bf16_convert": [7, 51, 87, 111, 149], "hawq_metr": [7, 149], "model_wrapp": [7, 20, 149], "pattern_detector": [7, 149], "symbolic_trac": [7, 149], "tensorflow": [7, 51, 53, 75, 76, 77, 87, 95, 101, 102, 103, 104, 105, 106, 110, 111, 112, 114, 117, 130, 140, 143, 146, 179, 180, 194, 195, 196, 197, 200, 202, 204, 212, 214, 219, 238, 239, 240, 241, 244, 246, 248, 254, 258, 259, 260, 261, 264, 266, 270, 271, 272, 298, 306, 317, 319, 323, 324, 332, 335, 345, 366, 428, 429, 441, 442, 449, 498, 499, 500, 502, 553, 555, 556, 571, 573, 576, 577, 579, 580, 582, 583, 585, 586, 589, 591, 599, 600, 614, 615, 616, 620, 624, 626], "kerasadaptor": 8, "kerasqueri": 8, "local_config_fil": [8, 45, 47], "none": [8, 18, 43, 44, 45, 47, 48, 49, 63, 89, 102, 104, 105, 110, 116, 140, 146, 148, 152, 154, 160, 161, 162, 167, 169, 175, 176, 177, 179, 180, 183, 184, 185, 187, 191, 193, 195, 196, 197, 198, 199, 200, 202, 208, 212, 213, 214, 215, 222, 224, 227, 228, 229, 231, 235, 237, 239, 240, 241, 242, 243, 244, 246, 251, 254, 255, 258, 259, 261, 266, 270, 271, 272, 273, 276, 285, 290, 294, 298, 302, 303, 305, 306, 307, 308, 312, 319, 323, 324, 334, 335, 336, 339, 340, 341, 342, 344, 345, 346, 347, 351, 354, 356, 357, 359, 365, 366, 368, 369, 380, 381, 385, 388, 390, 391, 393, 395, 398, 399, 404, 407, 408, 409, 420, 457, 469, 476, 480, 485, 488, 489, 491, 501, 506, 507, 509, 512, 514, 521, 527, 529, 530, 531, 538, 556, 574, 588, 617, 622, 623, 624], "defin": [8, 45, 46, 86, 148, 150, 169, 171, 172, 173, 174, 179, 180, 183, 184, 227, 228, 273, 274, 276, 277, 278, 285, 290, 293, 294, 295, 297, 324, 335, 356, 365, 444, 445, 446, 533, 550, 553, 556, 571, 573, 574, 576, 577, 582, 585, 588, 589, 610, 612, 614, 617, 620, 621, 622, 624, 626], "queri": [8, 18, 45, 47, 146, 154, 169, 179, 180, 407, 408, 410, 411, 412, 414, 415, 416, 417, 617], "interfac": [8, 45, 46, 86, 113, 176, 261, 285, 290, 298, 299, 359, 367, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 483, 489, 496, 508, 585, 589, 600, 613, 617, 619], "each": [8, 44, 45, 46, 148, 179, 180, 193, 197, 200, 208, 212, 237, 241, 244, 251, 254, 264, 266, 267, 268, 305, 317, 319, 320, 321, 344, 551, 556, 571, 574, 576, 577, 582, 589, 590, 594, 600, 603, 609, 611, 614, 620, 621, 622, 623, 624, 625], "adapt": [8, 45, 46, 550, 555, 574, 600, 615], "should": [8, 45, 46, 54, 115, 116, 161, 167, 169, 179, 180, 183, 184, 193, 195, 197, 212, 217, 227, 228, 237, 239, 241, 254, 259, 264, 317, 323, 324, 335, 354, 356, 366, 430, 552, 553, 556, 571, 574, 576, 578, 588, 589, 590, 595, 604, 607, 609, 611, 614, 617, 623, 624, 626], "implement": [8, 45, 46, 110, 141, 145, 183, 184, 190, 193, 194, 195, 197, 227, 228, 234, 237, 238, 239, 241, 263, 316, 324, 334, 335, 342, 356, 573, 574, 589, 600, 610, 614, 617, 619, 622, 624, 626], "inherit": [8, 45, 46, 161, 162, 172, 174, 179, 192, 212, 214, 222, 236, 254, 295, 297, 553, 556, 574], "specif": [8, 16, 19, 45, 46, 104, 116, 160, 175, 179, 180, 195, 196, 197, 198, 202, 204, 219, 239, 240, 241, 242, 246, 248, 272, 279, 280, 282, 283, 284, 323, 335, 408, 409, 550, 553, 556, 571, 576, 582, 584, 588, 589, 590, 591, 592, 596, 597, 599, 603, 609, 611, 614, 616, 624, 626], "backend": [8, 20, 43, 45, 46, 158, 179, 180, 181, 182, 186, 187, 191, 195, 196, 198, 199, 200, 201, 202, 206, 209, 212, 218, 219, 225, 226, 230, 231, 233, 235, 239, 240, 242, 243, 244, 245, 246, 250, 252, 254, 271, 306, 324, 325, 326, 328, 345, 552, 578, 584, 585, 589, 590, 598, 616, 623, 626], "own": [8, 45, 46, 74, 193, 212, 237, 254, 334, 553, 571, 573, 574, 585, 588, 611, 620, 625], "mxnetadaptor": 16, "do": [16, 19, 161, 179, 180, 194, 195, 238, 239, 255, 259, 263, 266, 296, 316, 319, 365, 550, 571, 574, 578, 582, 585, 586, 588, 589, 604, 607, 614, 618, 619, 621, 624], "inspect": [16, 19, 571, 619, 622], "tensor": [16, 18, 19, 20, 21, 44, 70, 105, 146, 148, 154, 165, 171, 172, 173, 180, 212, 254, 257, 259, 293, 295, 305, 332, 344, 366, 552, 574, 614, 617, 619, 622, 623, 624], "dict": [16, 18, 19, 44, 45, 116, 146, 147, 148, 154, 155, 160, 165, 169, 170, 171, 172, 173, 174, 175, 177, 179, 180, 183, 184, 194, 213, 219, 227, 228, 238, 257, 259, 265, 266, 267, 268, 270, 273, 276, 277, 278, 285, 288, 290, 293, 294, 295, 296, 297, 302, 305, 311, 314, 318, 319, 320, 321, 323, 324, 332, 335, 350, 353, 354, 356, 357, 359, 365, 366, 367, 369, 372, 380, 381, 383, 388, 390, 391, 393, 395, 398, 399, 404, 408, 409, 420, 426, 430, 438, 447, 465, 466, 467, 469, 472, 474, 479, 483, 486, 489, 490, 491, 494, 496, 499, 506, 507, 509, 511, 517, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 533, 537, 538, 552, 588, 614, 616, 617, 621, 622, 624], "mxnet": [17, 18, 21, 180, 190, 194, 197, 200, 204, 212, 234, 238, 241, 244, 248, 254, 261, 270, 298, 323, 324, 329, 335, 555, 556, 573, 579, 582, 585, 586, 589, 590, 591, 616, 624, 626], "init": [17, 22, 157, 163, 166, 168, 574, 588], "optyp": [18, 179, 180, 257], "enum": 18, "type": [18, 21, 44, 45, 74, 96, 105, 116, 122, 132, 146, 147, 148, 154, 155, 162, 169, 170, 171, 172, 173, 174, 175, 177, 179, 180, 193, 195, 197, 204, 212, 214, 219, 237, 239, 241, 248, 254, 259, 260, 263, 264, 266, 270, 277, 284, 288, 293, 295, 297, 302, 308, 312, 314, 316, 317, 319, 323, 332, 334, 339, 340, 347, 351, 353, 354, 365, 379, 384, 408, 409, 451, 509, 517, 551, 556, 571, 574, 578, 582, 585, 589, 590, 610, 617, 620, 623, 624, 626], "isiter": 18, "obj": [18, 105, 175, 194, 224, 238, 255, 261, 272, 273, 274, 276, 285, 290, 294, 298, 324, 334, 335, 356, 359, 366], "bool": [18, 146, 153, 154, 171, 179, 180, 195, 197, 208, 212, 239, 241, 251, 254, 259, 264, 270, 293, 311, 317, 323, 350, 354, 365, 366, 430, 438, 457, 469, 472, 506, 509, 521, 540, 574, 588, 616, 623], "check": [18, 67, 68, 105, 146, 154, 175, 186, 197, 241, 257, 294, 365, 366, 469, 472, 509, 521, 551, 555, 571, 578, 586, 593, 595, 597, 604, 607, 608, 619], "whether": [18, 105, 116, 146, 171, 179, 180, 193, 195, 208, 212, 237, 239, 251, 254, 264, 266, 270, 293, 317, 319, 323, 359, 365, 366, 472, 556, 574, 588, 617, 621, 623], "object": [18, 44, 45, 74, 86, 105, 116, 132, 147, 148, 153, 154, 160, 161, 165, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 183, 184, 185, 195, 196, 197, 212, 213, 215, 224, 227, 228, 229, 239, 240, 241, 254, 255, 259, 261, 266, 274, 276, 279, 280, 282, 283, 284, 285, 290, 293, 294, 295, 296, 297, 298, 302, 315, 319, 323, 324, 332, 333, 335, 339, 356, 359, 365, 366, 446, 521, 533, 534, 538, 552, 553, 561, 571, 572, 573, 574, 581, 588, 589, 591, 612, 614, 616, 617, 623, 624, 625, 627], "iter": [18, 20, 105, 146, 160, 170, 172, 174, 179, 180, 183, 184, 188, 193, 197, 198, 215, 227, 228, 232, 237, 241, 242, 295, 297, 324, 335, 356, 359, 552, 553, 556, 572, 574, 589, 614, 616, 617, 622, 624, 626], "return": [18, 21, 44, 45, 53, 67, 68, 70, 74, 105, 116, 146, 147, 148, 153, 154, 155, 160, 162, 169, 171, 172, 173, 174, 175, 177, 183, 184, 197, 204, 208, 212, 213, 214, 219, 224, 227, 228, 241, 248, 251, 254, 259, 260, 263, 264, 266, 267, 268, 270, 276, 277, 284, 288, 293, 294, 295, 297, 302, 308, 312, 314, 316, 317, 319, 320, 321, 323, 324, 328, 332, 334, 335, 339, 347, 351, 353, 354, 356, 359, 365, 366, 430, 509, 521, 552, 553, 574, 578, 588, 591, 611, 614, 617, 621, 622, 624], "true": [18, 85, 113, 144, 146, 160, 179, 180, 193, 195, 197, 198, 211, 212, 213, 237, 239, 241, 242, 253, 254, 259, 264, 270, 288, 311, 317, 323, 334, 335, 350, 354, 359, 365, 366, 506, 509, 521, 574, 578, 582, 588, 589, 592, 595, 596, 616, 617, 621, 622, 623, 624, 626], "els": [18, 146, 180, 193, 237, 334, 521, 597, 622], "fals": [18, 20, 43, 47, 48, 49, 71, 72, 89, 92, 99, 102, 103, 105, 113, 131, 136, 141, 144, 145, 146, 153, 154, 160, 162, 179, 180, 185, 187, 191, 195, 197, 208, 212, 213, 214, 215, 221, 229, 231, 235, 239, 241, 251, 254, 266, 270, 319, 323, 334, 335, 354, 359, 366, 438, 457, 509, 521, 540, 556, 574, 582, 588, 589, 602, 606, 616, 617, 621, 622, 623, 626], "boolean": [18, 521], "ensure_list": 18, "x": [18, 54, 74, 170, 179, 180, 194, 212, 238, 254, 302, 339, 354, 578, 580, 590, 591, 617, 621, 622, 623, 625], "ensur": [18, 212, 254, 302, 339, 571, 578, 580, 617, 623], "list": [18, 44, 53, 105, 146, 147, 148, 151, 154, 160, 169, 170, 171, 179, 180, 183, 184, 188, 195, 208, 212, 213, 227, 228, 232, 239, 251, 254, 258, 259, 263, 264, 266, 267, 268, 270, 277, 285, 290, 293, 296, 311, 316, 317, 319, 320, 321, 323, 324, 332, 335, 350, 354, 356, 357, 366, 379, 381, 383, 388, 390, 391, 393, 395, 398, 399, 404, 408, 409, 420, 430, 433, 438, 464, 469, 472, 476, 480, 506, 513, 514, 515, 521, 533, 540, 552, 555, 556, 574, 582, 586, 589, 592, 597, 599, 602, 603, 606, 611, 614, 616, 617, 618, 621, 622, 624], "input": [18, 20, 44, 45, 53, 60, 64, 67, 68, 70, 71, 72, 74, 82, 83, 85, 86, 105, 109, 110, 116, 122, 146, 147, 152, 153, 154, 158, 169, 170, 179, 180, 183, 184, 195, 196, 197, 199, 208, 211, 212, 217, 227, 228, 239, 240, 241, 243, 251, 253, 254, 257, 258, 259, 323, 324, 328, 332, 335, 356, 365, 366, 368, 464, 476, 480, 485, 488, 494, 553, 556, 571, 572, 573, 574, 576, 577, 578, 580, 582, 584, 588, 589, 591, 592, 597, 614, 616, 617, 621, 622, 623, 626], "check_mx_vers": 18, "version": [18, 53, 104, 154, 169, 180, 258, 259, 315, 469, 509, 521, 550, 552, 556, 571, 582, 586, 587, 589, 602, 604, 606, 607, 613, 615, 621, 624, 625], "str": [18, 147, 148, 151, 152, 153, 154, 155, 162, 169, 179, 180, 195, 196, 197, 204, 208, 212, 214, 218, 219, 239, 240, 241, 248, 251, 254, 258, 259, 260, 263, 264, 266, 268, 270, 277, 288, 311, 314, 316, 317, 319, 321, 323, 350, 353, 354, 359, 366, 368, 369, 372, 379, 380, 381, 383, 385, 408, 409, 420, 426, 427, 430, 432, 433, 438, 447, 448, 450, 451, 453, 455, 457, 460, 461, 462, 463, 465, 466, 467, 469, 472, 476, 480, 485, 488, 490, 491, 494, 495, 506, 509, 514, 517, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 533, 537, 538, 574, 588, 616, 622, 623], "mx": 18, "__version__": 18, "combine_cap": 18, "current": [18, 44, 70, 104, 152, 165, 169, 171, 172, 179, 180, 272, 279, 280, 282, 283, 284, 293, 295, 302, 306, 339, 345, 552, 553, 556, 571, 578, 582, 586, 588, 589, 592, 596, 609, 611, 614, 617, 621, 624], "new": [18, 21, 146, 152, 160, 185, 197, 212, 213, 229, 241, 254, 294, 334, 533, 551, 578, 589, 590, 603, 609, 610, 614, 615, 617, 619, 620, 623, 625, 626], "combin": [18, 154, 179, 180, 183, 184, 208, 222, 227, 228, 251, 324, 335, 356, 366, 552, 556, 585, 589, 612, 615, 617, 618, 623, 624], "capabl": [18, 47, 312, 351, 572, 582, 589, 590, 600, 614, 616, 617, 624, 626], "contain": [18, 67, 68, 70, 74, 139, 146, 148, 154, 160, 161, 169, 171, 172, 174, 175, 179, 180, 183, 184, 195, 196, 197, 227, 228, 239, 240, 241, 255, 259, 261, 266, 267, 268, 272, 285, 288, 290, 293, 294, 295, 296, 297, 298, 319, 320, 321, 324, 335, 356, 359, 365, 370, 374, 382, 388, 390, 391, 393, 394, 395, 398, 399, 402, 404, 413, 418, 423, 424, 428, 431, 437, 442, 443, 449, 468, 475, 477, 478, 481, 482, 484, 487, 493, 498, 502, 574, 576, 585, 588, 610, 614, 622, 624, 625], "make_nc_model": 18, "target": [18, 44, 102, 169, 174, 175, 180, 294, 297, 302, 339, 434, 574, 578, 589, 614, 622, 623, 624, 626], "sym_model": 18, "ctx": 18, "input_desc": 18, "convert": [18, 44, 48, 49, 50, 52, 53, 54, 55, 56, 66, 74, 86, 99, 100, 102, 103, 104, 105, 131, 136, 140, 147, 154, 169, 179, 180, 195, 208, 211, 212, 239, 251, 253, 254, 258, 266, 272, 294, 312, 319, 351, 354, 552, 589, 590, 594, 617, 618, 621, 623, 624], "symbol": [18, 147, 153, 154, 263, 316, 324, 335, 552, 591], "model": [18, 20, 21, 34, 43, 44, 45, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 116, 118, 140, 146, 147, 148, 151, 152, 153, 154, 158, 160, 161, 167, 169, 172, 174, 175, 179, 180, 183, 184, 191, 194, 195, 197, 212, 213, 216, 217, 224, 227, 228, 235, 238, 239, 241, 254, 255, 257, 258, 259, 260, 261, 262, 270, 271, 272, 273, 276, 279, 280, 282, 283, 284, 285, 290, 294, 295, 296, 297, 298, 299, 302, 303, 305, 306, 307, 308, 315, 323, 324, 334, 335, 336, 339, 340, 341, 342, 344, 345, 346, 347, 354, 356, 362, 365, 366, 368, 369, 370, 394, 410, 412, 414, 418, 419, 430, 435, 436, 437, 440, 441, 442, 466, 467, 469, 472, 475, 476, 477, 478, 480, 481, 482, 487, 488, 493, 498, 502, 503, 510, 521, 526, 536, 537, 541, 548, 552, 553, 555, 556, 561, 572, 573, 574, 576, 577, 578, 579, 584, 585, 587, 588, 590, 592, 597, 599, 600, 603, 609, 611, 612, 613, 615, 617, 619, 620, 622, 623, 624, 625, 626], "neural": [18, 148, 160, 161, 171, 179, 180, 207, 208, 209, 212, 213, 216, 219, 222, 251, 252, 254, 256, 262, 269, 270, 272, 285, 290, 293, 296, 298, 299, 304, 310, 315, 322, 323, 324, 328, 335, 342, 343, 349, 501, 508, 521, 548, 551, 556, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 588, 590, 591, 593, 594, 597, 599, 600, 602, 604, 606, 607, 608, 611, 612, 615, 617, 619, 621, 622, 623, 624, 626, 627], "compressor": [18, 160, 161, 171, 179, 180, 207, 208, 209, 212, 213, 216, 219, 222, 251, 252, 254, 256, 262, 269, 270, 272, 293, 296, 298, 299, 304, 310, 315, 322, 323, 324, 328, 335, 343, 349, 501, 508, 521, 548, 551, 553, 556, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 588, 590, 591, 592, 593, 597, 599, 600, 602, 604, 606, 607, 608, 611, 612, 614, 615, 617, 619, 621, 622, 623, 624, 625, 626, 627], "tupl": [18, 105, 154, 180, 183, 184, 208, 212, 227, 228, 251, 254, 259, 311, 324, 335, 350, 356, 521, 574, 588, 589, 617, 623], "symnet": 18, "arg": [18, 53, 105, 195, 196, 197, 239, 240, 241, 293, 302, 339, 354, 362, 363, 371, 373, 375, 376, 377, 378, 388, 390, 391, 393, 395, 398, 399, 404, 573, 574, 578, 589, 598, 617, 621, 622, 623], "aux": 18, "data": [18, 44, 55, 105, 146, 148, 152, 154, 158, 169, 179, 180, 183, 184, 213, 215, 227, 228, 259, 260, 262, 302, 312, 314, 315, 324, 335, 339, 351, 353, 356, 359, 366, 369, 372, 380, 381, 383, 407, 419, 430, 446, 447, 457, 465, 466, 467, 469, 472, 489, 491, 506, 519, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 533, 537, 545, 555, 556, 571, 573, 574, 578, 582, 583, 586, 588, 589, 590, 617, 618, 619, 620, 621, 622, 623, 624], "descript": [18, 132, 259, 260, 354, 551, 552, 621], "ncmodel": 18, "fuse": [18, 58, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 91, 92, 93, 94, 96, 131, 136, 153, 154, 158, 552, 621, 622], "suppli": 18, "get_framework_nam": 18, "get": [18, 44, 45, 67, 68, 70, 104, 105, 146, 152, 154, 160, 165, 167, 169, 171, 172, 173, 174, 177, 180, 188, 212, 213, 219, 221, 232, 254, 259, 260, 293, 295, 297, 305, 312, 314, 323, 332, 335, 344, 351, 353, 359, 366, 380, 381, 383, 420, 430, 447, 451, 464, 469, 472, 490, 501, 509, 517, 521, 537, 538, 571, 581, 585, 586, 589, 595, 621, 624, 625, 628], "name": [18, 44, 45, 53, 67, 68, 70, 104, 105, 110, 116, 146, 147, 148, 152, 153, 154, 155, 160, 165, 169, 171, 172, 173, 174, 177, 179, 180, 195, 196, 197, 200, 204, 210, 212, 213, 217, 220, 221, 239, 240, 241, 244, 248, 254, 257, 258, 259, 265, 270, 288, 293, 295, 297, 312, 314, 318, 323, 328, 332, 334, 335, 351, 353, 357, 359, 366, 430, 432, 469, 470, 471, 472, 509, 521, 523, 552, 571, 574, 578, 582, 587, 588, 589, 591, 595, 602, 606, 610, 613, 614, 617, 619, 620, 622, 624, 626, 627], "prepare_model_data": 18, "nc_model": [18, 285, 290], "data_x": 18, "prepar": [18, 154, 501, 552, 555, 574, 578, 583, 617], "loader": [18, 183, 184, 227, 228, 324, 335, 356, 362, 617], "dataloaderwrap": 18, "prepare_model": 18, "create_data_exampl": 18, "exampl": [18, 148, 154, 160, 169, 170, 179, 180, 195, 196, 197, 208, 212, 239, 240, 241, 251, 254, 266, 267, 268, 270, 296, 319, 320, 321, 323, 324, 334, 335, 354, 356, 394, 412, 418, 442, 466, 467, 468, 469, 521, 550, 551, 555, 561, 571, 584, 585, 592, 595, 596, 597, 600, 618, 619, 623, 624, 625, 628], "prepare_dataload": 18, "io": 18, "ndarray_to_devic": 18, "ndarrai": [18, 67, 68, 70, 212, 254, 357, 581, 623], "devic": [18, 79, 89, 90, 91, 92, 93, 94, 97, 107, 131, 136, 145, 169, 170, 179, 180, 576, 589, 590, 592, 595, 600, 609, 616], "is_model_quant": 18, "query_quantizable_nod": 18, "node": [18, 44, 50, 53, 54, 55, 56, 60, 62, 64, 67, 68, 70, 74, 77, 80, 82, 83, 84, 98, 102, 103, 105, 110, 132, 146, 257, 259, 332, 432, 434, 437, 442, 500, 502, 556, 571, 578, 622, 624], "map": [18, 44, 105, 180, 212, 254, 257, 259, 261, 265, 267, 268, 270, 285, 290, 295, 298, 318, 320, 321, 323, 471, 574, 578, 588, 589, 602, 606, 614, 617], "quantize_sym_model": 18, "qconfig": [18, 622], "accord": [18, 122, 154, 160, 179, 180, 195, 196, 197, 212, 239, 240, 241, 254, 305, 342, 344, 359, 553, 556, 574, 578, 614, 618, 621, 623, 624], "run_forward": 18, "b_filter": 18, "collector": [18, 148, 357], "pre_batch": 18, "post_batch": 18, "forward": [18, 555, 589, 614, 616, 617, 621, 622], "propag": [18, 100], "filter": [18, 195, 196, 197, 198, 199, 200, 202, 206, 239, 240, 241, 242, 243, 244, 246, 250, 262, 315, 366, 430, 523, 573, 574, 585, 614, 622], "which": [18, 55, 83, 110, 148, 152, 165, 169, 170, 171, 172, 174, 175, 179, 180, 195, 196, 197, 208, 213, 239, 240, 241, 251, 263, 268, 277, 279, 280, 282, 283, 284, 288, 293, 294, 295, 297, 302, 316, 321, 323, 328, 334, 335, 339, 366, 519, 550, 552, 553, 556, 571, 573, 574, 576, 578, 581, 582, 585, 588, 589, 590, 591, 593, 597, 600, 603, 609, 610, 612, 614, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626], "batch": [18, 154, 185, 187, 188, 193, 194, 215, 229, 231, 232, 237, 238, 356, 571, 573, 576, 577, 589, 612, 614, 623, 624, 627], "infer": [18, 105, 169, 261, 298, 332, 334, 335, 356, 555, 556, 576, 577, 589, 590, 609, 611, 614, 615, 617, 621, 622, 624], "collect": [18, 21, 44, 210, 212, 215, 217, 218, 220, 254, 268, 270, 321, 323, 357, 366, 472, 509, 521, 580, 617, 622, 624], "inform": [18, 44, 148, 165, 169, 171, 172, 173, 174, 175, 180, 183, 184, 215, 217, 218, 227, 228, 293, 295, 296, 297, 299, 323, 383, 508, 509, 515, 550, 551, 554, 555, 556, 557, 559, 563, 566, 569, 576, 580, 582, 589, 591, 604, 607, 610, 614, 618, 619, 622, 626, 627, 628], "dure": [18, 171, 174, 179, 180, 293, 297, 334, 366, 589, 590, 591, 611, 612, 614, 617, 621, 622, 626], "prior": [18, 88, 624], "after": [18, 44, 78, 154, 167, 171, 172, 179, 180, 195, 208, 212, 215, 239, 251, 254, 259, 295, 340, 354, 507, 553, 571, 573, 574, 576, 577, 580, 585, 588, 589, 602, 603, 606, 610, 611, 612, 614, 617, 618, 620, 621, 622, 623, 624], "count": [18, 553, 574], "int": [18, 21, 44, 105, 146, 151, 154, 167, 179, 180, 194, 195, 196, 208, 212, 238, 239, 240, 251, 254, 258, 259, 264, 266, 270, 277, 317, 319, 323, 354, 366, 385, 420, 464, 507, 509, 512, 521, 529, 574, 588, 589, 616, 623], "make_symbol_block": 18, "gluon": [18, 324, 335, 591], "symbolblock": 18, "make_modul": 18, "parse_tune_config": 18, "tune_cfg": [18, 146, 147, 154, 556, 624], "quantizable_nod": 18, "strategi": [18, 154, 172, 179, 180, 181, 197, 225, 241, 262, 315, 503, 521, 531, 555, 556, 561, 578, 585, 589, 597, 609, 615, 616, 617, 618, 619, 625, 626], "config": [18, 115, 116, 118, 122, 154, 160, 165, 167, 171, 172, 173, 174, 175, 179, 183, 184, 195, 224, 227, 228, 239, 279, 280, 282, 283, 284, 285, 290, 293, 294, 295, 296, 297, 312, 313, 315, 324, 351, 352, 354, 356, 359, 365, 366, 368, 381, 420, 465, 476, 480, 485, 488, 502, 510, 521, 524, 526, 532, 553, 555, 561, 571, 572, 576, 577, 578, 580, 583, 585, 589, 590, 591, 612, 614, 616, 617, 618, 620, 622, 624], "tune": [18, 45, 160, 179, 180, 183, 184, 195, 197, 227, 228, 239, 241, 261, 298, 300, 301, 302, 303, 305, 306, 307, 308, 311, 312, 313, 314, 324, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 350, 351, 352, 353, 356, 366, 405, 406, 419, 442, 472, 477, 490, 502, 510, 526, 556, 571, 573, 574, 578, 585, 587, 589, 590, 609, 611, 614, 615, 618, 619, 620, 622, 626], "from": [18, 44, 45, 61, 67, 68, 70, 105, 146, 152, 154, 160, 161, 162, 165, 171, 172, 173, 174, 175, 179, 180, 183, 184, 185, 188, 192, 195, 196, 197, 198, 199, 200, 202, 207, 208, 214, 215, 218, 227, 228, 229, 232, 236, 239, 240, 241, 242, 243, 244, 246, 251, 255, 257, 258, 259, 260, 263, 266, 267, 268, 272, 277, 293, 294, 295, 297, 312, 314, 316, 319, 320, 321, 324, 332, 334, 335, 351, 353, 354, 356, 359, 365, 366, 419, 430, 453, 465, 466, 467, 469, 494, 514, 519, 521, 538, 550, 552, 553, 556, 572, 573, 574, 576, 577, 578, 579, 580, 581, 583, 585, 588, 590, 591, 592, 596, 597, 598, 600, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625], "distribute_calib_tensor": 18, "calib_tensor": 18, "calib_cfg": 18, "tensor_to_nod": 18, "distribut": [18, 21, 141, 159, 179, 180, 185, 187, 188, 191, 193, 215, 229, 231, 232, 235, 237, 361, 509, 555, 576, 586, 604, 607, 615, 617, 619, 621, 625, 627], "depend": [18, 183, 184, 213, 227, 228, 324, 335, 356, 551, 571, 581, 582, 616, 617, 624], "algorithm": [18, 154, 176, 263, 270, 278, 315, 316, 323, 359, 361, 553, 556, 576, 577, 582, 585, 598, 603, 614, 617, 622, 626], "set": [18, 44, 57, 96, 105, 115, 146, 152, 154, 160, 175, 177, 179, 180, 183, 184, 185, 195, 197, 200, 212, 213, 218, 219, 227, 228, 229, 239, 241, 244, 254, 259, 266, 272, 285, 290, 294, 299, 319, 323, 324, 332, 335, 354, 356, 366, 368, 408, 409, 430, 476, 480, 488, 533, 538, 550, 553, 571, 572, 574, 576, 578, 582, 584, 585, 586, 588, 589, 590, 592, 594, 596, 610, 614, 616, 617, 620, 621, 624, 626], "kl": [18, 21, 179, 180, 357, 361, 582, 589, 624, 626], "minmax": [18, 21, 582, 617, 626], "calib_model": 18, "qsym_model": 18, "calib_data": 18, "calibdata": 18, "threshold": [18, 156, 357, 361, 588], "amp_convert": 18, "amp_cfg": 18, "support": [18, 44, 97, 104, 152, 158, 162, 171, 172, 179, 180, 183, 184, 194, 195, 197, 204, 208, 212, 214, 215, 216, 219, 224, 227, 228, 238, 239, 241, 248, 251, 254, 262, 270, 272, 277, 293, 295, 299, 306, 312, 315, 323, 324, 328, 334, 335, 345, 351, 354, 356, 359, 361, 469, 503, 521, 548, 555, 571, 589, 592, 597, 600, 603, 609, 615, 618, 620, 624, 625], "amp": [18, 592, 599, 613], "wrap": [18, 105, 116, 162, 214, 266, 319, 379, 552, 578, 604, 607], "dataiterload": 18, "data_it": [18, 169], "collectorbas": 18, "calibcollector": 18, "include_tensors_kl": 18, "include_tensors_minmax": 18, "num_bin": [18, 21, 357], "8001": [18, 357], "tensorcollector": 18, "include_nod": 18, "qtensor_to_tensor": 18, "build": [18, 115, 155, 156, 158, 159, 170, 259, 260, 273, 276, 327, 329, 331, 332, 333, 430, 490, 521, 538, 556, 571, 586, 591, 602, 604, 606, 607, 610, 615, 620, 624], "up": [18, 100, 212, 254, 294, 407, 571, 578, 579, 582, 585, 600, 604, 607, 609, 615, 616, 617, 620, 623, 624, 626], "namecollector": 18, "cache_kl": 18, "cache_minmax": 18, "tensors_kl": 18, "tensors_minmax": 18, "onnxruntimeadaptor": 19, "rt": 19, "onnxrt_qlinearopsadaptor": [19, 556], "onnxrt_integeropsadaptor": 19, "onnxrt_qdqadaptor": 19, "onnxrtaug": 20, "dump_op_typ": 20, "black_nod": 20, "white_nod": 20, "cpuexecutionprovid": [20, 43, 617], "reduce_rang": [20, 43, 179, 180, 616], "augment": 20, "dump": [20, 160, 259, 366, 617, 622], "calib_registri": 21, "calib_method": 21, "calibratorbas": 21, "minmaxcalibr": 21, "percentilecalibr": 21, "2048": [21, 366], "percentil": 21, "99": [21, 621, 627], "999": [21, 626, 627], "option": [21, 105, 171, 179, 180, 183, 184, 195, 212, 227, 228, 239, 254, 258, 259, 266, 272, 293, 299, 312, 315, 319, 323, 324, 335, 351, 354, 356, 360, 366, 574, 582, 586, 589, 603, 614, 617, 620, 623, 624, 626], "number": [21, 67, 68, 105, 154, 167, 170, 171, 179, 180, 193, 196, 208, 212, 237, 240, 251, 254, 267, 268, 270, 293, 302, 320, 321, 323, 339, 354, 359, 366, 453, 509, 571, 572, 574, 578, 588, 614, 617, 620, 623, 624], "bin": [21, 366, 581], "histogram": [21, 357, 366, 571, 622], "valu": [21, 44, 55, 67, 68, 70, 89, 90, 105, 141, 146, 154, 159, 160, 165, 169, 170, 175, 177, 179, 180, 183, 184, 195, 198, 199, 208, 212, 213, 227, 228, 239, 242, 243, 251, 254, 266, 270, 294, 302, 305, 312, 319, 323, 324, 335, 339, 344, 351, 354, 356, 357, 359, 366, 379, 381, 383, 388, 390, 391, 393, 395, 398, 399, 404, 408, 409, 430, 432, 503, 507, 521, 529, 532, 552, 571, 574, 582, 588, 589, 595, 611, 614, 616, 617, 621, 623, 624, 626], "default": [21, 97, 146, 175, 177, 179, 180, 183, 184, 187, 195, 196, 197, 208, 212, 227, 228, 231, 239, 240, 241, 251, 254, 258, 259, 263, 272, 294, 314, 316, 323, 332, 353, 359, 366, 388, 390, 391, 393, 395, 398, 399, 404, 430, 447, 521, 552, 556, 571, 574, 580, 582, 585, 586, 588, 589, 590, 597, 600, 602, 606, 611, 614, 616, 617, 618, 620, 621, 623, 624, 626], "float": [21, 44, 148, 171, 172, 173, 175, 179, 180, 195, 208, 239, 251, 264, 266, 267, 268, 295, 317, 319, 320, 321, 354, 369, 427, 482, 507, 521, 529, 532, 574, 588, 616, 617, 621, 623], "A": [21, 44, 54, 74, 75, 103, 116, 146, 154, 161, 165, 169, 171, 172, 173, 174, 175, 179, 180, 197, 212, 215, 217, 218, 224, 241, 254, 255, 263, 266, 267, 268, 270, 273, 276, 277, 278, 285, 288, 290, 293, 294, 295, 296, 297, 302, 316, 319, 320, 321, 323, 324, 328, 332, 339, 356, 366, 574, 579, 582, 588, 589, 591, 602, 603, 606, 609, 614, 615, 617, 621, 623, 624, 626], "between": [21, 141, 159, 172, 179, 180, 212, 254, 267, 270, 320, 323, 533, 537, 552, 556, 576, 580, 585, 588, 589, 600, 617, 619, 620, 621, 623, 624], "0": [21, 44, 53, 90, 105, 146, 154, 156, 158, 162, 167, 179, 180, 185, 187, 191, 195, 198, 199, 202, 208, 212, 214, 215, 229, 231, 235, 239, 242, 243, 246, 251, 254, 259, 261, 270, 277, 285, 290, 298, 323, 334, 335, 340, 354, 552, 571, 574, 576, 578, 580, 581, 582, 583, 586, 587, 588, 589, 590, 595, 597, 602, 606, 613, 614, 616, 617, 619, 620, 621, 622, 623, 624, 626], "100": [21, 160, 179, 180, 197, 241, 354, 572, 574, 578, 584, 589, 616, 617, 621, 623, 624, 626, 627], "klcalibr": 21, "128": [21, 195, 198, 199, 212, 239, 242, 243, 254, 574, 589, 617, 623], "num_quantized_bin": 21, "histogramcollector": 21, "collctor": 21, "smooth_distribut": 21, "p": [21, 571, 610], "ep": [21, 159, 590], "0001": [21, 179, 180, 576, 589, 616], "smooth": [21, 44, 152, 158, 179, 180, 311, 614], "discret": [21, 624], "mai": [21, 146, 279, 280, 282, 283, 284, 354, 550, 551, 571, 573, 581, 587, 590, 602, 606, 613, 615, 617, 624], "have": [21, 44, 74, 83, 146, 170, 171, 172, 193, 215, 237, 263, 266, 293, 295, 316, 319, 323, 335, 354, 550, 551, 571, 573, 574, 578, 582, 587, 588, 589, 590, 592, 609, 611, 614, 617, 621, 624], "been": [21, 171, 172, 263, 293, 295, 316, 551, 553, 571, 576, 589, 590, 609, 621], "normal": [21, 212, 254, 268, 321, 521, 589, 611, 621, 623], "1": [21, 44, 54, 74, 89, 105, 109, 113, 144, 146, 152, 154, 156, 158, 159, 160, 162, 172, 179, 180, 185, 187, 191, 194, 195, 196, 198, 199, 202, 203, 208, 212, 213, 214, 215, 229, 231, 235, 238, 239, 240, 242, 243, 246, 247, 251, 254, 261, 266, 267, 268, 270, 285, 290, 295, 298, 299, 319, 320, 321, 323, 334, 335, 354, 359, 369, 491, 550, 552, 555, 556, 573, 574, 576, 580, 582, 583, 586, 588, 590, 593, 595, 611, 612, 613, 614, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626], "replac": [21, 152, 268, 321, 521, 578, 589, 600, 619], "zero": [21, 44, 172, 175, 212, 254, 295, 366, 555, 614, 617, 621, 623, 624], "multipli": 21, "scale": [21, 44, 100, 141, 152, 154, 158, 159, 208, 212, 251, 254, 259, 580, 617, 620, 621, 623, 624], "factor": [21, 613, 621, 627], "take": [21, 171, 180, 183, 184, 188, 212, 217, 227, 228, 232, 254, 293, 302, 323, 324, 335, 339, 356, 550, 552, 553, 571, 573, 576, 582, 589, 609, 614, 617, 618, 623, 624, 626], "correspond": [21, 44, 148, 169, 179, 180, 195, 239, 263, 266, 270, 316, 319, 323, 359, 556, 582, 589, 614, 616, 617, 620, 621, 624], "amount": 21, "off": [21, 67, 68, 70, 551], "non": [21, 294, 366, 552, 613, 624], "ref": [21, 146], "http": [21, 148, 165, 171, 172, 195, 197, 239, 241, 263, 264, 266, 267, 268, 293, 295, 296, 316, 317, 319, 320, 321, 323, 335, 552, 555, 571, 574, 583, 586, 587, 589, 598, 604, 607, 619], "hanj": 21, "c": [21, 74, 197, 241, 571, 574, 581, 586, 624], "illinoi": 21, "edu": [21, 197, 241, 574], "cs412": 21, "bk3": 21, "diverg": [21, 357, 361, 576, 624], "pdf": 21, "github": [21, 148, 171, 195, 239, 263, 264, 267, 268, 293, 296, 316, 317, 320, 321, 323, 335, 465, 508, 551, 571, 574, 579, 583, 586, 587, 589, 598, 604, 607, 619], "com": [21, 148, 171, 195, 239, 263, 264, 267, 268, 293, 296, 316, 317, 320, 321, 323, 335, 550, 555, 571, 574, 583, 586, 587, 589, 592, 598, 619, 620, 627], "apach": [21, 587], "incub": 21, "blob": [21, 148, 171, 263, 264, 267, 268, 293, 316, 317, 320, 321, 323, 335, 589, 598], "master": [21, 171, 263, 264, 267, 268, 293, 296, 316, 317, 320, 321, 323, 335, 589, 624], "python": [21, 75, 146, 197, 216, 241, 262, 315, 354, 366, 469, 548, 551, 552, 571, 574, 578, 581, 586, 589, 594, 600, 603, 609, 615, 623], "contrib": [21, 262, 315], "py": [21, 146, 148, 160, 172, 179, 180, 264, 266, 267, 268, 295, 317, 319, 320, 321, 354, 537, 552, 556, 571, 578, 586, 589, 594, 596, 597, 598, 604, 607, 617, 619, 622], "microsoft": [21, 556], "onnxruntim": [21, 179, 180, 191, 197, 204, 235, 241, 248, 271, 425, 429, 556, 583, 585, 586, 590, 616], "main": [21, 219, 296, 501, 538, 552, 578, 583, 589, 596, 598, 610, 614, 617], "tool": [21, 146, 258, 366, 555, 556, 589, 602, 606, 614, 615, 617], "arrai": [21, 44, 146, 212, 254, 266, 277, 319, 366, 623], "small": [21, 67, 68, 69, 342, 553, 571, 614, 624], "probabl": [21, 179, 180, 361], "activationoper": 23, "onnx_quant": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42], "onnx_nod": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 87, 101, 111], "removableactivationoper": 23, "remov": [23, 44, 56, 57, 60, 74, 80, 83, 84, 85, 96, 98, 167, 259, 268, 321, 407, 453, 550, 551, 589, 602, 606, 614, 622], "qactivationoper": 23, "children": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39, 40, 41, 42], "initi": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39, 40, 41, 42, 44, 105, 116, 146, 162, 172, 183, 184, 192, 195, 214, 227, 228, 236, 239, 294, 295, 312, 335, 351, 356, 408, 409, 501, 553, 571, 573, 574, 588, 608, 614, 617, 621, 624], "qoper": [23, 38, 179, 180], "format": [23, 44, 53, 146, 179, 180, 195, 196, 197, 239, 240, 241, 259, 266, 272, 312, 319, 351, 354, 472, 574, 578, 580, 588, 589, 590, 591, 592, 617], "argmaxoper": 24, "qargmaxoper": 24, "attentionoper": 25, "qattentionoper": 25, "qattent": 25, "binari": [26, 146, 270, 323, 581, 588, 604, 607], "binaryoper": 26, "qbinaryoper": 26, "qbinari": 26, "concatoper": 27, "qconcatoper": 27, "qconcat": 27, "convoper": 28, "qconvoper": 28, "qlinearconv": 28, "direct8bit": 29, "direct8bitoper": 29, "qdirectoper": 29, "qdirect": 29, "embedlayernorm": 30, "embedlayernormalizationoper": 30, "qembedlayernormalizationoper": 30, "qembedlayernorm": 30, "gatheroper": 31, "qgatheroper": 31, "qgather": 31, "globalaveragepool": 32, "globalaveragepooloper": 32, "qglobalaveragepooloper": 32, "qlinearglobalaveragepool": 32, "gemmoper": 33, "qgemmoper": 33, "qgemm": 33, "lstmoper": 35, "matmuloper": 36, "qmatmuloper": 36, "qlinearmatmul": 36, "maxpooloper": 37, "qmaxpooloper": 37, "qmaxpool": 37, "op_registri": 38, "op_typ": [38, 313, 352], "qop_registri": 38, "padoper": 39, "qpadoper": 39, "qpad": 39, "averagepool": 40, "pooloper": 40, "qpooloper": 40, "qlinearaveragepool": 40, "resizeoper": 41, "qresizeoper": 41, "qresiz": 41, "splitoper": 42, "qsplitoper": 42, "qsplit": 42, "q_config": [43, 259, 556], "static": [43, 47, 152, 158, 169, 180, 260, 312, 335, 351, 538, 556, 585, 589, 592, 597, 598, 599, 600, 603, 609, 621, 624, 627], "quantization_param": 43, "op_types_to_quant": 43, "fallback_list": 43, "fp32": [43, 79, 131, 136, 141, 154, 159, 179, 180, 183, 184, 227, 228, 258, 259, 270, 305, 312, 323, 340, 344, 351, 359, 365, 366, 555, 556, 571, 582, 583, 588, 589, 590, 599, 616, 617, 618, 619, 620, 621, 622, 624, 626, 627], "add_qdq_pair_to_weight": [43, 179, 180, 617], "optypes_to_exclude_output_qu": [43, 179, 180, 617], "dedicated_qdq_pair": [43, 179, 180, 617], "helper": [44, 45, 110, 116, 146, 154, 195, 196, 197, 211, 239, 240, 241, 253, 257, 258, 259, 332, 364, 515], "onnxrt": [44, 195, 197, 204, 212, 239, 241, 248, 254, 270, 323, 364, 424, 425, 440, 442, 449, 502, 556, 590, 617], "dtype_to_nam": 44, "dtype_map": 44, "dtype": [44, 102, 105, 179, 180, 198, 199, 208, 212, 242, 243, 251, 254, 259, 260, 574, 580, 582, 592, 616, 617, 621, 622, 623, 626], "its": [44, 60, 96, 148, 169, 172, 180, 191, 197, 212, 235, 241, 254, 257, 264, 265, 295, 302, 317, 318, 339, 550, 571, 574, 576, 587, 588, 590, 600, 602, 606, 609, 610, 613, 614, 620, 623, 624], "represent": [44, 386, 387, 389, 392, 396, 397, 400, 401, 403, 405, 406, 532, 550, 552, 577, 614, 617], "quanttyp": 44, "repres": [44, 171, 172, 173, 175, 197, 202, 241, 246, 266, 268, 270, 319, 321, 323, 388, 390, 391, 393, 395, 398, 399, 402, 404, 519, 550, 574, 580, 614, 617, 624], "make_quant_nod": 44, "make": [44, 105, 141, 159, 171, 172, 174, 193, 237, 293, 295, 297, 366, 550, 551, 556, 571, 572, 573, 582, 588, 589, 597, 602, 606, 609, 617, 618, 620, 621, 624], "quantizelinear": [44, 580], "make_dquant_nod": 44, "axi": [44, 180], "dequantizelinear": [44, 580], "is_b_transpos": 44, "wheter": 44, "inuput": 44, "b": [44, 74, 195, 239, 259, 574, 588, 614, 621, 624], "transpos": [44, 73, 171, 212, 254, 258, 293, 623], "split_shared_bia": 44, "share": [44, 82, 98, 109, 581, 582, 621, 624], "float_to_float16": 44, "float16": [44, 574], "float_to_bfloat16": 44, "bfloat16": [44, 590, 592, 600, 618], "cast_tensor": 44, "tensorproto": [44, 105], "remove_init_from_model_input": 44, "collate_pr": 44, "result": [44, 146, 148, 154, 208, 212, 251, 254, 263, 266, 267, 268, 270, 316, 319, 320, 321, 323, 335, 342, 356, 365, 366, 369, 387, 401, 419, 550, 553, 555, 571, 573, 576, 578, 585, 587, 588, 589, 597, 598, 609, 610, 611, 614, 615, 617, 620, 621, 622, 623, 624, 625, 627], "quantize_data_with_scale_zero": 44, "qtype": [44, 556], "scheme": [44, 154, 538, 556, 573, 582, 600, 624, 626], "zero_point": [44, 259], "point": [44, 208, 251, 267, 268, 277, 302, 320, 321, 339, 588, 609, 617, 621, 623, 624], "To": [44, 266, 319, 334, 551, 571, 574, 578, 580, 590, 593, 596, 602, 604, 606, 607, 616, 618, 619, 621, 624, 626], "pack": [44, 61], "weight": [44, 60, 61, 122, 141, 148, 152, 159, 165, 170, 171, 172, 173, 179, 180, 259, 293, 295, 312, 323, 335, 342, 351, 366, 426, 556, 571, 577, 580, 582, 584, 588, 589, 611, 614, 616, 617, 621, 622, 624, 626], "comput": [44, 105, 148, 154, 263, 264, 267, 268, 270, 316, 317, 320, 321, 323, 356, 366, 555, 577, 580, 588, 589, 590, 592, 603, 614, 615, 617, 621, 624], "linear": [44, 158, 167, 169, 170, 171, 175, 179, 180, 259, 293, 552, 576, 580, 589, 614, 621, 624], "when": [44, 53, 64, 70, 146, 170, 172, 175, 179, 180, 195, 196, 204, 212, 239, 240, 248, 254, 264, 294, 295, 317, 335, 356, 521, 538, 550, 553, 571, 573, 574, 589, 600, 602, 603, 606, 610, 614, 617, 621, 623, 624], "uint8": [44, 208, 251, 266, 314, 319, 353, 556, 574, 582, 616, 617, 623, 626], "rmin": [44, 617], "rmax": [44, 617], "2": [44, 53, 74, 105, 109, 152, 156, 158, 160, 171, 172, 179, 180, 196, 213, 240, 266, 268, 270, 295, 302, 319, 321, 323, 334, 339, 354, 552, 556, 574, 576, 582, 583, 585, 586, 587, 588, 590, 611, 613, 614, 617, 619, 620, 621, 623, 624, 625], "m": [44, 148, 171, 179, 180, 293, 576, 586, 592, 594, 597, 600, 604, 607, 614, 627], "where": [44, 179, 180, 266, 270, 319, 323, 576, 602, 606, 610, 621, 622], "max": [44, 104, 141, 159, 179, 180, 212, 254, 267, 268, 302, 320, 321, 339, 366, 555, 571, 586, 589, 614, 617, 621, 623, 624], "ab": [44, 165, 172, 295, 617, 621], "np": [44, 212, 254, 302, 339, 578, 623], "sym": [44, 582, 617, 626], "asym": [44, 582, 626], "calculate_scale_zp": 44, "quantize_rang": 44, "calcul": [44, 60, 154, 165, 175, 180, 198, 199, 242, 243, 267, 268, 293, 295, 305, 320, 321, 344, 357, 574, 588, 589, 600, 611, 614, 617, 620, 621, 624, 626], "quantize_data": 44, "add": [44, 52, 64, 109, 119, 146, 175, 179, 180, 195, 197, 219, 239, 241, 294, 312, 351, 379, 419, 521, 551, 552, 571, 573, 574, 578, 580, 582, 588, 589, 590, 604, 607, 620, 622, 624], "necessari": [44, 550, 553, 591, 610, 614, 620, 624], "intermedi": [44, 148, 162, 179, 180, 214, 552, 585, 617], "trasnform": 44, "full": [44, 195, 196, 197, 239, 240, 241, 366, 555, 571, 574, 581, 583, 586, 587, 610, 614], "equat": [44, 268, 270, 321, 323, 617, 621], "r": [44, 141, 159, 571, 586, 610, 613, 617, 627], "": [44, 105, 141, 146, 159, 169, 170, 171, 172, 176, 177, 179, 180, 194, 197, 211, 212, 213, 215, 217, 224, 238, 241, 253, 254, 268, 293, 295, 321, 323, 324, 328, 335, 366, 507, 550, 553, 576, 578, 582, 585, 589, 590, 597, 600, 602, 606, 609, 612, 613, 614, 615, 616, 617, 619, 620, 621, 624, 626], "q": [44, 107, 109, 131, 621], "z": [44, 576, 621], "real": [44, 198, 215, 242, 578, 615, 617], "origin": [44, 152, 154, 169, 172, 175, 180, 195, 212, 213, 239, 254, 279, 280, 282, 283, 284, 294, 295, 314, 340, 353, 366, 369, 551, 574, 597, 614, 617, 623, 624, 626], "quantize_data_per_channel": 44, "per": [44, 152, 158, 160, 179, 180, 213, 361, 556, 571, 613, 618, 627], "channel": [44, 141, 152, 158, 159, 167, 170, 171, 179, 180, 208, 212, 251, 254, 293, 556, 585, 586, 592, 594, 599, 614, 623, 627], "dequantize_data_with_scale_zero": 44, "tensor_valu": 44, "scale_valu": 44, "zo_valu": 44, "dequant": [44, 57, 88, 91, 92, 93, 94, 96, 148, 154, 366, 552, 621, 622], "sacal": 44, "dequantize_data": 44, "valueinfo": 44, "tensor_nam": [44, 146], "new_dtyp": 44, "cast": [44, 57, 580, 618, 623], "info": [44, 154, 171, 175, 210, 215, 220, 259, 293, 328, 363, 366, 509, 521, 537, 552, 571, 580, 591], "quantizedvalu": 44, "new_quantized_nam": 44, "scale_nam": 44, "zero_point_nam": 44, "quantized_value_typ": 44, "quint8": 44, "linearli": 44, "intial": 44, "quantizediniti": 44, "quantized_data": 44, "quantizationmod": 44, "quantizedvaluetyp": 44, "quantformat": [44, 259], "quantize_nparrai": 44, "arr": [44, 366], "low": [44, 183, 184, 198, 199, 227, 228, 242, 243, 261, 271, 298, 324, 556, 572, 574, 578, 589, 590, 615, 617, 621, 624], "high": [44, 198, 199, 242, 243, 574, 586, 615, 624], "numpi": [44, 67, 68, 70, 105, 146, 212, 254, 260, 266, 277, 319, 581, 623], "attribute_to_kwarg": 44, "attribut": [44, 83, 104, 105, 154, 169, 177, 180, 366, 437, 438, 442, 502, 556, 573, 582, 584, 589, 616, 626], "kwarg": [44, 105, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 135, 137, 167, 179, 180, 197, 210, 212, 217, 220, 241, 254, 311, 313, 323, 324, 325, 327, 329, 331, 332, 333, 335, 350, 352, 354, 356, 362, 363, 365, 366, 371, 373, 375, 376, 377, 378, 388, 390, 391, 393, 395, 398, 399, 404, 573], "make_nod": 44, "find_by_nam": 44, "item_list": 44, "find": [44, 67, 68, 70, 105, 146, 270, 277, 302, 323, 339, 366, 537, 556, 571, 595, 602, 606, 609, 610, 620, 622, 624], "item": [44, 175, 177, 179, 180, 211, 253, 294, 312, 351, 419, 507, 578, 614, 621, 624], "get_smooth_scales_per_op": 44, "max_vals_per_channel": 44, "input_tensors_2_weight": 44, "input_tensors_2_weights_nod": 44, "alpha": [44, 158, 165, 173, 617], "same": [44, 83, 146, 170, 172, 180, 195, 212, 239, 254, 266, 319, 366, 556, 572, 573, 574, 576, 578, 582, 589, 593, 597, 602, 606, 613, 614, 616, 617, 621, 622, 623, 624], "one": [44, 109, 110, 115, 154, 160, 170, 171, 172, 174, 212, 222, 254, 263, 266, 270, 272, 293, 296, 297, 316, 319, 323, 553, 556, 571, 576, 577, 578, 582, 583, 585, 586, 588, 589, 590, 592, 593, 597, 598, 600, 602, 603, 606, 609, 610, 611, 612, 614, 616, 617, 619, 621, 623, 624], "mul": [44, 54, 65, 66, 69, 158, 580, 621], "todo": [44, 195, 198, 239, 242, 266, 312, 319, 351], "individu": [44, 171, 293, 550, 614, 621], "save": [44, 105, 175, 179, 180, 197, 224, 241, 258, 259, 299, 332, 335, 356, 357, 362, 366, 552, 556, 573, 584, 589, 590, 591, 593, 597, 602, 606, 612, 617, 621], "paper": [44, 576, 614, 621], "onli": [44, 53, 63, 70, 86, 109, 115, 141, 152, 158, 159, 160, 170, 171, 172, 179, 180, 195, 213, 215, 219, 239, 272, 293, 295, 306, 335, 345, 354, 521, 533, 555, 556, 572, 573, 576, 578, 580, 582, 589, 590, 597, 610, 614, 615, 616, 617, 621, 622, 624, 626], "get_smooth_scales_per_input": 44, "insert_smooth_mul_op_per_input": 44, "shape_info": 44, "insert": [44, 77, 105, 107, 109, 113, 144, 152, 158, 259, 552, 585, 589, 592, 614, 617, 618, 621, 622], "inupt": 44, "shape": [44, 105, 146, 171, 198, 199, 208, 212, 242, 243, 251, 254, 266, 319, 442, 449, 453, 464, 502, 555, 571, 574, 582, 583, 589, 621, 623], "ad": [44, 172, 195, 239, 263, 302, 316, 339, 571, 590, 592, 597, 600, 604, 607, 614, 622], "new_init_tensor": 44, "new_added_mul_nod": 44, "adjust_weights_per_op": 44, "adjust": [44, 600, 617, 621], "ha": [44, 67, 68, 70, 74, 171, 172, 213, 263, 293, 295, 316, 354, 551, 553, 556, 571, 573, 580, 585, 589, 590, 595, 609, 614, 616, 617, 618, 620, 621, 624], "whose": [44, 152, 158, 171, 294, 584, 621, 624], "adjustd": 44, "adjust_weights_per_input": 44, "insert_smooth_mul_op_per_op": 44, "befor": [44, 107, 109, 158, 171, 172, 174, 179, 180, 195, 239, 259, 293, 295, 297, 407, 551, 571, 574, 576, 577, 578, 581, 582, 586, 589, 604, 607, 617, 620, 622, 624], "name_2_nod": 44, "kei": [44, 146, 148, 152, 169, 175, 177, 179, 180, 277, 294, 332, 354, 357, 359, 366, 529, 555, 571, 580, 615, 622, 624], "fold_scal": 44, "fold": [44, 62, 63, 259, 582, 621], "quant": [44, 154, 179, 180, 312, 351, 552, 589, 617], "trt_env_setup": 44, "environ": [44, 160, 213, 315, 469, 501, 502, 510, 550, 571, 572, 602, 606, 609, 624], "variabl": [44, 160, 173, 179, 180, 197, 213, 241, 302, 339, 571, 586, 614, 624], "tensorrt": [44, 617], "provid": [44, 102, 105, 110, 169, 183, 184, 212, 227, 228, 254, 261, 266, 285, 290, 298, 299, 319, 324, 335, 356, 360, 362, 430, 506, 515, 553, 555, 556, 571, 572, 573, 577, 578, 579, 580, 585, 586, 589, 590, 591, 592, 596, 600, 603, 609, 610, 614, 616, 617, 622, 624, 625, 626, 627], "get_ops_recurs": 45, "prefix": [45, 146, 147, 153, 160, 592, 597, 622], "graph_info": 45, "templateadaptor": 45, "tampl": 45, "dictionari": [45, 67, 68, 70, 147, 148, 154, 177, 179, 180, 211, 253, 266, 273, 276, 278, 319, 366, 388, 390, 391, 393, 395, 398, 399, 404, 408, 409, 411], "yaml": [45, 175, 177, 180, 183, 184, 195, 197, 213, 227, 228, 239, 241, 255, 261, 272, 273, 274, 276, 285, 290, 298, 299, 365, 366, 374, 380, 381, 465, 521, 532, 556, 584, 588, 589, 611, 616, 622, 623], "file": [45, 105, 146, 154, 157, 175, 176, 179, 180, 183, 184, 195, 196, 197, 200, 211, 212, 218, 221, 227, 228, 239, 240, 241, 244, 253, 254, 255, 259, 261, 266, 272, 273, 274, 276, 285, 290, 294, 296, 298, 299, 319, 324, 334, 335, 365, 366, 374, 430, 476, 480, 490, 513, 521, 538, 553, 556, 571, 578, 581, 584, 587, 588, 589, 591, 595, 604, 607, 608, 609, 610, 611, 616, 617, 622, 623], "pytorchadaptor": 45, "api": [45, 70, 75, 110, 223, 261, 266, 298, 311, 312, 319, 323, 335, 350, 351, 354, 366, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 537, 538, 551, 552, 557, 559, 563, 566, 569, 580, 585, 589, 594, 598, 599, 600, 619, 620, 624, 628], "pytorch_ipexadaptor": 45, "intel": [45, 171, 216, 219, 256, 262, 269, 270, 293, 296, 304, 310, 315, 322, 323, 335, 343, 349, 501, 548, 550, 551, 553, 554, 556, 573, 574, 575, 576, 577, 579, 580, 582, 583, 587, 590, 591, 592, 597, 599, 600, 611, 612, 613, 614, 615, 617, 618, 619, 621, 622, 624, 625, 626], "extens": [45, 521, 553, 555, 556, 582, 585, 586, 589, 590, 591, 593, 598, 599, 600, 604, 607, 608, 614, 615, 621, 624, 625, 626], "ipex": [45, 154, 179, 180, 585, 589, 594, 598, 599, 621, 627], "pytorch_fxadaptor": 45, "fx": [45, 154, 179, 306, 345, 585, 598, 599, 615, 617, 618, 627], "graph": [45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 117, 130, 132, 136, 139, 140, 141, 143, 144, 145, 146, 169, 194, 238, 259, 261, 315, 325, 332, 442, 464, 475, 476, 481, 482, 500, 502, 525, 537, 552, 556, 574, 576, 578, 584, 588, 591, 592, 617, 618, 622], "pytorchqueri": 45, "querybackendcap": [46, 556], "tensorflowadaptor": 47, "stock": [47, 598, 621], "spr": 47, "tensorflow_itexadaptor": 47, "itex": [47, 109, 179, 180, 258, 617], "tensorflowqueri": [47, 556], "performance_onli": [47, 48, 49, 107, 131, 136, 145, 179, 589], "itex_mod": [47, 48, 89, 107, 131, 136], "quant_mod": [47, 312, 351], "graphconvert": 48, "qt_config": 48, "recip": [48, 169, 179, 180, 259, 261, 298, 580, 589, 621, 624], "int8_sequ": 48, "fp32_op": [48, 50, 107], "bf16_op": [48, 50, 107, 618], "data_load": [48, 49, 556], "fake_qu": [48, 88, 107, 131, 136], "qdq_enabl": 48, "new_api": [48, 49, 71, 72, 77, 79, 92, 99, 131, 136, 141], "use_bf16": [48, 49, 179, 616], "without": [49, 90, 146, 172, 212, 254, 295, 314, 353, 521, 550, 571, 573, 576, 578, 588, 589, 600, 614, 615, 616, 624, 625], "graphconverterwithoutcalib": 49, "recover_config": 49, "rewrit": [50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107, 108, 109, 224], "bf16convert": [50, 618], "biasadd": [52, 59, 64, 66, 109, 582], "convertaddtobiasaddoptim": 52, "conv2d": [52, 59, 60, 61, 65, 66, 71, 125, 135, 141, 582, 621, 622, 624], "addv2": [52, 69, 582], "layout": 53, "convertlayoutoptim": 53, "optim": [53, 74, 75, 79, 80, 116, 118, 169, 172, 176, 179, 180, 216, 222, 224, 261, 262, 278, 298, 302, 315, 339, 356, 357, 369, 394, 408, 409, 415, 418, 419, 421, 422, 423, 424, 425, 428, 429, 442, 502, 503, 513, 519, 525, 529, 536, 541, 553, 555, 572, 576, 577, 578, 582, 583, 585, 586, 589, 591, 592, 594, 596, 597, 600, 603, 613, 614, 615, 616, 617, 618, 620, 621, 622, 624, 626], "nchw": 53, "nhwc": 53, "It": [53, 161, 171, 183, 184, 221, 227, 228, 268, 270, 277, 293, 298, 305, 321, 323, 324, 335, 340, 344, 356, 556, 571, 576, 589, 595, 598, 603, 609, 610, 614, 617, 620, 624, 626], "4": [53, 160, 171, 179, 180, 204, 207, 208, 212, 248, 251, 254, 263, 264, 266, 316, 317, 319, 354, 550, 556, 571, 572, 578, 579, 582, 585, 586, 588, 589, 597, 613, 614, 617, 621, 623, 624, 627], "abov": [53, 556, 576, 614, 617, 621], "graph_def": [53, 146, 258, 324, 332, 335, 464, 500], "leakyrelu": [54, 621], "convertleakyreluoptim": 54, "below": [54, 66, 74, 179, 180, 299, 323, 335, 551, 552, 555, 556, 571, 573, 576, 578, 584, 588, 592, 594, 602, 603, 606, 609, 611, 612, 614, 616, 617, 620, 621, 622, 624, 625], "subgraph": [54, 66, 105, 153, 580], "maximum": [54, 171, 172, 179, 180, 195, 212, 239, 254, 264, 295, 302, 317, 339, 574, 589, 614, 617, 623], "note": [54, 171, 266, 306, 319, 345, 553, 571, 578, 580, 582, 586, 589, 594, 597, 602, 606, 609, 614, 617, 621, 622, 624, 625, 626], "coeffici": [54, 614], "less": [54, 146, 179, 180, 366, 572, 576, 589, 614], "than": [54, 146, 195, 212, 239, 254, 366, 553, 555, 572, 574, 584, 588, 611, 612, 614, 617, 620, 623], "convers": [54, 180, 272, 556, 589, 590, 617, 618, 621], "valid": [54, 67, 68, 105, 172, 175, 179, 180, 197, 241, 266, 294, 295, 319, 332, 469, 521, 538, 551, 553, 555, 556, 574, 576, 579, 582, 585, 587, 589, 600, 614, 617, 619], "nan": 55, "random": [55, 146, 179, 180, 208, 212, 251, 254, 262, 278, 302, 304, 315, 339, 343, 366, 551, 553, 589, 616, 623, 626], "convertnantorandom": 55, "const": [55, 56, 63, 64, 67, 68, 70, 82, 98, 315, 420, 502, 510], "consist": [55, 63, 551, 552, 571, 580, 621, 624], "placehold": [56, 193, 237], "convertplaceholdertoconst": 56, "train": [56, 80, 152, 158, 161, 170, 172, 179, 180, 183, 184, 195, 197, 212, 222, 227, 228, 239, 241, 254, 255, 272, 295, 315, 335, 359, 529, 553, 555, 556, 561, 574, 576, 577, 580, 585, 590, 592, 598, 609, 612, 614, 615, 620, 621, 624, 626], "rerewrit": 57, "dequantizecastoptim": 57, "b16": 57, "dilat": 58, "contract": 58, "dilatedcontract": 58, "spacetobatchnd": 58, "batchtospacend": 58, "pattern": [58, 59, 61, 78, 96, 107, 108, 109, 131, 136, 154, 164, 166, 169, 170, 172, 173, 176, 179, 180, 197, 241, 262, 283, 284, 286, 291, 295, 312, 315, 351, 426, 537, 556, 574, 582, 585, 589, 610, 612, 616, 621, 627], "inject": [59, 589], "dummi": [59, 169, 198, 199, 242, 243, 260, 270, 323, 555, 571, 574, 583, 588, 589], "injectdummybiasaddoptim": 59, "fusion": [59, 61, 70, 78, 109, 126, 127, 128, 131, 132, 133, 137, 552, 556, 582], "expanddim": 60, "expanddimsoptim": 60, "next": [60, 188, 232, 354, 553, 571, 616, 624], "featch": 61, "reshap": [61, 67, 68, 73, 621], "fetchweightfromreshapeoptim": 61, "handl": [61, 146, 152, 158, 363, 538, 552, 554, 573, 621], "batchnorm": [62, 67, 121, 552, 621], "foldbatchnormnodesoptim": 62, "graphfoldconstantoptim": 63, "sequenc": [63, 105, 170, 171, 179, 180, 195, 211, 212, 239, 253, 254, 264, 268, 293, 317, 321, 556, 574, 582, 614, 623], "self": [63, 169, 179, 180, 334, 556, 571, 573, 574, 585, 588, 620, 622, 624], "supported_op_typ": 63, "fusebiasaddandaddoptim": 64, "second": [64, 170, 179, 180, 195, 239, 340, 366, 430, 571, 589, 602, 606, 610, 621, 624, 626], "columnwis": 65, "fusecolumnwisemuloptim": 65, "depthwiseconv2dn": [65, 71, 125, 135, 582], "math": [66, 617], "fuseconvwithmathoptim": 66, "elimin": 66, "sub": [66, 154, 160, 169, 213, 259, 553, 624], "realdiv": [66, 69], "decompos": [67, 68], "fusedecomposedbnoptim": 67, "input_graph_def": [67, 68, 70], "node_name_from_input": [67, 68, 70], "node_nam": [67, 68, 70, 146, 259, 332], "strip": [67, 68, 70, 83, 84, 146, 622], "port": [67, 68, 70, 538, 571], "other": [67, 68, 70, 152, 158, 194, 238, 268, 321, 332, 538, 550, 551, 552, 571, 582, 585, 586, 587, 589, 591, 611, 613, 614, 617, 621, 623, 624, 627], "underli": [67, 68, 70], "node_from_map": [67, 68, 70], "node_map": [67, 68, 70], "pull": [67, 68, 70], "def": [67, 68, 70, 183, 184, 227, 228, 335, 354, 356, 552, 556, 573, 574, 576, 577, 578, 588, 589, 617, 621, 622, 624], "entri": [67, 68, 70, 148, 219, 261, 299, 427, 430, 521, 587], "index": [67, 68, 70, 105, 160, 180, 188, 193, 197, 232, 237, 241, 277, 366, 538, 574, 588, 610, 621], "everi": [67, 68, 70, 171, 172, 179, 180, 293, 295, 556, 597, 602, 606, 624], "identifi": [67, 68, 70, 266, 319, 332, 614], "want": [67, 68, 70, 169, 179, 180, 193, 195, 237, 239, 295, 340, 356, 552, 556, 571, 574, 578, 586, 588, 589, 590, 597, 609, 610, 611, 620, 622, 624], "nodedef": [67, 68, 70], "rais": [67, 68, 70, 105, 171, 172, 175, 266, 293, 294, 295, 319, 324, 354, 521, 555, 614, 615], "valueerror": [67, 68, 70, 266, 319, 354, 581], "If": [67, 68, 70, 74, 160, 179, 180, 183, 184, 197, 212, 227, 228, 241, 254, 294, 324, 335, 354, 356, 551, 552, 571, 572, 574, 578, 580, 586, 587, 588, 589, 590, 595, 603, 604, 607, 609, 611, 617, 620, 621, 622, 623, 624], "isn": [67, 68, 70], "present": [67, 68, 70, 571, 615, 621], "values_from_const": [67, 68, 70], "node_def": [67, 68, 70], "extract": [67, 68, 70, 169, 197, 241, 314, 353, 521, 574], "access": [67, 68, 70, 177, 180, 362, 366, 505, 521, 538, 571, 604, 607], "valid_reshape_input": [67, 68], "reshape_in0_ndef": [67, 68], "reshape_in1_ndef": [67, 68], "ar": [67, 68, 105, 154, 171, 172, 179, 180, 195, 212, 239, 254, 266, 270, 277, 293, 294, 295, 299, 301, 302, 319, 323, 336, 338, 339, 354, 359, 365, 366, 521, 550, 551, 552, 553, 555, 556, 571, 573, 574, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 595, 597, 600, 603, 609, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 626], "bypass_reshap": [67, 68], "input_node_map": [67, 68], "input_nam": [67, 68, 102, 140, 180, 258, 259, 580], "get_const_dim_count": [67, 68], "dimens": [67, 68, 105, 187, 212, 231, 254, 574, 576, 623], "instancenorm": [68, 621], "fusedecomposedinoptim": 68, "gelu": 69, "fusegeluoptim": 69, "sqrt": 69, "erf": 69, "samll": 70, "layernorm": [70, 621], "fuselayernormoptim": 70, "remap": 70, "smaller": [70, 212, 254, 576, 589, 614, 623], "case": [70, 74, 160, 180, 194, 211, 212, 213, 238, 253, 254, 261, 285, 290, 298, 334, 521, 571, 573, 576, 577, 578, 582, 584, 588, 593, 597, 609, 610, 611, 614, 615, 617, 619, 623, 625, 626, 627], "fusedbatcnormv3": 70, "And": [70, 552, 572, 589, 595, 621], "further": [70, 180, 550, 590, 591, 592, 594, 603, 609], "restrict": [70, 179, 180, 614, 620], "2d": [70, 621], "3d": [70, 615, 621], "kera": [70, 116, 180, 197, 204, 219, 241, 248, 327, 332, 442, 449, 459, 578, 591, 599, 600, 627], "fusepadwithconv2doptim": 71, "excluded_op_nam": [71, 72, 176, 179, 180, 589, 614], "cfg": [71, 72, 154, 176, 312, 351, 359], "itex_qdq_mod": [71, 72], "conv3d": [71, 125], "fusepadwithfp32conv2doptim": 72, "fusetransposereshapeoptim": 73, "cse": [74, 98], "graphcseoptim": 74, "introduc": [74, 551, 556, 580, 582, 589, 617, 619, 621, 625], "ident": [74, 80, 170, 550, 576], "three": [74, 175, 195, 239, 301, 336, 338, 552, 556, 571, 573, 580, 586, 590, 603, 612, 617, 618, 620, 621, 622], "d": [74, 154, 576, 584, 610, 627], "those": [74, 305, 344, 366, 576, 577, 584, 589, 612, 614, 617, 624], "child": [74, 622], "b1": 74, "c1c2": 74, "d1": [74, 366], "c1": 74, "c2": 74, "memori": [74, 261, 285, 290, 298, 334, 366, 573, 577, 589, 590, 592, 611, 614, 617, 621, 624], "bound": [74, 160, 212, 254, 266, 302, 319, 339, 588, 623], "like": [74, 96, 98, 146, 169, 175, 180, 183, 184, 185, 197, 227, 228, 229, 241, 261, 270, 295, 298, 299, 323, 332, 335, 356, 551, 552, 553, 556, 571, 576, 577, 585, 597, 612, 614, 617, 619, 621, 624], "relu": [74, 78, 109, 552, 582, 621, 622], "relu6": [74, 582], "graphdef": [74, 146, 332, 591], "grappler": [75, 582], "grappleroptim": 75, "input_output_nam": 75, "opt_cfg": 75, "wrapper": [75, 102, 103, 104, 105, 122, 147, 162, 194, 212, 214, 215, 217, 218, 224, 238, 254, 266, 270, 319, 323, 328, 332, 538, 618], "leverag": [75, 553, 555, 576, 580, 592, 609, 612, 617, 624], "built": [75, 181, 182, 186, 191, 195, 196, 201, 203, 205, 206, 208, 209, 212, 217, 219, 225, 226, 230, 233, 235, 239, 240, 245, 247, 249, 250, 251, 252, 254, 299, 323, 326, 334, 335, 356, 553, 556, 574, 578, 589, 602, 606, 611, 617, 623, 624, 626], "convert_add_to_biasadd": [76, 87, 111], "convert_layout": [76, 87, 111], "convert_leakyrelu": [76, 87, 111], "convert_nan_to_random": [76, 87, 111], "convert_placeholder_to_const": [76, 87, 111], "dequantize_cast_optim": [76, 87, 111], "dilated_contract": [76, 87, 111], "dummy_biasadd": [76, 87, 111], "expanddims_optim": [76, 87, 111], "fetch_weight_from_reshap": [76, 87, 111], "fold_batch_norm": [76, 87, 111], "fold_const": [76, 87, 111], "fuse_biasadd_add": [76, 87, 111], "fuse_column_wise_mul": [76, 87, 111], "fuse_conv_with_math": [76, 87, 111], "fuse_decomposed_bn": [76, 87, 111], "fuse_decomposed_in": [76, 87, 111], "fuse_gelu": [76, 87, 111], "fuse_layer_norm": [76, 87, 111], "fuse_pad_with_conv": [76, 87, 111], "fuse_pad_with_fp32_conv": [76, 87, 111], "fuse_reshape_transpos": [76, 87, 111], "graph_cse_optim": [76, 87, 111], "grappler_pass": [76, 87, 111], "insert_print_nod": [76, 87, 111], "move_squeeze_after_relu": [76, 87, 111], "pre_optim": [76, 87, 111], "remove_training_nod": [76, 87, 111], "rename_batch_norm": [76, 87, 111], "split_shared_input": [76, 87, 111], "strip_equivalent_nod": [76, 87, 111, 146], "strip_unused_nod": [76, 87, 111, 146], "switch_optim": [76, 87, 111], "print": [77, 148, 169, 270, 323, 354, 571, 578, 588, 589, 614, 621, 624], "insertprintminmaxnod": 77, "pre_node_nam": 77, "post_node_nam": 77, "pass": [77, 146, 160, 323, 335, 366, 464, 533, 552, 556, 572, 574, 576, 577, 578, 580, 584, 588, 589, 610, 614, 616, 617, 618, 621, 626], "sampl": [77, 179, 180, 188, 193, 195, 196, 197, 208, 212, 232, 237, 239, 240, 241, 251, 254, 270, 277, 302, 323, 339, 453, 553, 555, 574, 579, 585, 610, 617, 623, 624, 626, 627], "move": [78, 552, 616, 619], "squeez": [78, 552], "movesqueezeafterreluoptim": 78, "match": [78, 102, 169, 266, 267, 319, 320, 576, 610], "pre": [79, 116, 169, 183, 184, 195, 227, 228, 239, 324, 335, 356, 574, 576, 577, 589, 590, 597, 614, 615, 617, 622, 624], "entranc": [79, 186], "preoptim": 79, "removetrainingnodesoptim": 80, "protected_nod": 80, "types_to_splic": 80, "checknumer": 80, "stopgradi": 80, "renam": [81, 619], "fusedbatchnorm": 81, "fusedbatchnormv2": 81, "renamebatchnormoptim": 81, "splitsharedinputoptim": 82, "equival": [83, 621], "stripequivalentnodesoptim": 83, "output_node_nam": [83, 84, 131, 132, 136, 146], "unus": [84, 146], "stripunusednodesoptim": 84, "input_node_nam": [84, 131, 136, 146], "switch": [85, 592, 622], "switchoptim": 85, "condit": [85, 195, 196, 197, 212, 239, 240, 241, 254, 301, 336, 338, 574, 587, 623, 624], "graphrewriterbas": 86, "abstract": [86, 161, 212, 254, 255, 261, 298, 450, 462, 513, 537, 556, 584], "freeze_fake_qu": [87, 95, 111], "freeze_valu": [87, 95, 111], "freeze_value_without_calib": [87, 95, 111], "fuse_conv_redundant_dequant": [87, 95, 111], "fuse_conv_requant": [87, 95, 111], "fuse_matmul_redundant_dequant": [87, 95, 111], "fuse_matmul_requant": [87, 95, 111], "meta_op_optim": [87, 95, 111], "post_hostconst_convert": [87, 95, 111], "post_quantized_op_cs": [87, 95, 111], "rnn_convert": [87, 95, 111], "scale_propag": [87, 95, 111], "onnx_graph": [87, 101, 111], "onnx_schema": [87, 101, 111], "tf2onnx_util": [87, 101, 111], "insert_qdq_pattern": [87, 106, 111], "merge_duplicated_qdq": [87, 106, 111], "share_qdq_y_pattern": [87, 106, 111], "freez": [88, 89, 90, 592, 614], "fakequ": 88, "freezefakequantopoptim": 88, "follow": [88, 110, 170, 197, 241, 263, 266, 316, 319, 550, 551, 552, 553, 556, 571, 573, 574, 576, 577, 578, 580, 582, 586, 587, 588, 589, 590, 591, 592, 593, 594, 602, 606, 612, 614, 616, 617, 621, 622, 624], "freezevaluetransform": 89, "max_min_data": [89, 90], "postfix": [89, 90], "tensor_data": [89, 366], "th": [89, 90], "gpu": [89, 90, 97, 179, 180, 555, 572, 585, 589, 590, 594, 600, 609, 616, 617], "freezevaluewithoutcalibtransform": 90, "95": [90, 270, 323, 588, 621, 627], "quantizedconv": [91, 92], "quantizeddeconv": 91, "redund": [91, 93], "fuseconvredundantdequantizetransform": 91, "cpu": [91, 92, 93, 94, 179, 180, 366, 555, 572, 585, 589, 590, 592, 594, 600, 609, 613, 615, 616, 617, 618, 622], "_quantizedconv": 91, "_quantizeddeconv": 91, "successor": [91, 92, 93, 94], "requant": [92, 94, 622], "fuseconvrequantizetransform": 92, "quantizedmatmul": [93, 94], "fusematmulredundantdequantizetransform": 93, "_quantizedmatmul": [93, 94], "fusematmulrequantizedequantizetransform": 94, "quantizedmatmulwithbiasanddequant": 94, "fusematmulrequantizetransform": 94, "fusematmulrequantizedequantizenewapitransform": 94, "fusematmulrequantizenewapitransform": 94, "newapi": 94, "meta": [96, 615], "metainfochangingmemopoptim": 96, "metaop": 96, "With": [96, 334, 552, 555, 556, 573, 589, 597, 602, 606, 610, 611, 614, 615, 620, 621, 624, 627], "chang": [96, 141, 152, 159, 172, 174, 179, 180, 295, 297, 342, 366, 381, 490, 512, 551, 573, 578, 581, 587, 588, 589, 592, 602, 603, 606, 609, 614, 622, 623, 624], "better": [96, 179, 180, 183, 184, 227, 228, 277, 324, 335, 356, 577, 588, 590, 614, 615, 617, 620, 624], "perform": [96, 160, 173, 179, 180, 195, 207, 208, 213, 239, 251, 261, 285, 290, 298, 305, 323, 334, 335, 340, 344, 513, 524, 552, 553, 556, 571, 572, 573, 574, 575, 577, 579, 580, 585, 586, 588, 589, 590, 591, 592, 594, 598, 600, 603, 609, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 624, 626, 627], "post": [97, 98, 152, 158, 172, 180, 183, 184, 227, 228, 259, 335, 550, 555, 556, 577, 578, 585, 586, 592, 598, 609, 614, 615, 621, 622, 624], "hostconst": 97, "posthostconstconvert": 97, "postcseoptim": 98, "duplic": [98, 108, 302, 339], "quantizev2": 98, "decreas": [98, 614], "size": [98, 171, 187, 188, 194, 197, 203, 208, 212, 231, 232, 238, 241, 247, 251, 254, 293, 334, 366, 521, 550, 571, 573, 574, 578, 581, 589, 609, 610, 611, 614, 621, 623, 626, 627], "rnn": 99, "quantizedrnnconvert": 99, "calibration_data": [99, 107], "rnn_detail": 99, "scalepropagationtransform": 100, "direct": [100, 171, 293, 471, 614], "export": [101, 180, 262, 266, 315, 319, 521, 555, 583, 595, 610, 622, 625], "onnxgraph": 102, "output_shap": 102, "opset": [102, 104, 105, 180, 258, 259], "extra_opset": 102, "output_nam": [102, 140, 180, 258, 259, 580], "is_subgraph": 102, "graph_nam": 102, "manipul": [102, 103], "onnxnod": 103, "skip_convers": 103, "schema": 104, "onnxopschema": 104, "domain": [104, 105, 179, 180, 394, 418, 442, 449, 502, 503, 505, 521, 533, 538, 571, 614, 624], "since_vers": 104, "get_schema": 104, "max_inclusive_opset_vers": 104, "within": [104, 172, 261, 266, 298, 319, 332, 550, 552, 590, 602, 606, 609, 615, 621], "get_max_supported_opset_vers": 104, "packag": [104, 374, 382, 388, 390, 391, 393, 394, 395, 398, 399, 402, 404, 413, 418, 423, 424, 428, 431, 437, 439, 442, 443, 449, 468, 470, 475, 478, 481, 482, 484, 487, 493, 498, 502, 536, 556, 571, 581, 586, 609, 610, 615, 619, 624], "set_nam": 105, "find_opset": 105, "assert_error": 105, "bool_val": 105, "error_msg": 105, "error": [105, 148, 270, 305, 323, 344, 363, 505, 588, 593, 621, 624], "messag": [105, 144, 521, 533, 538, 624], "map_numpy_to_onnx_dtyp": 105, "np_dtype": 105, "map_onnx_to_numpy_typ": 105, "onnx_typ": 105, "add_port_to_nam": 105, "nr": 105, "get_tensorflow_node_attr": 105, "pars": [105, 154, 195, 196, 208, 212, 239, 240, 251, 254, 368, 379, 472, 476, 480, 485, 488, 494, 513, 521, 529, 623], "get_tensorflow_tensor_shap": 105, "get_tensorflow_node_shape_attr": 105, "attr": [105, 146, 169], "map_tensorflow_dtyp": 105, "get_tensorflow_tensor_data": 105, "convert_tensorflow_tensor_to_onnx": 105, "read_tensorflow_node_attr": 105, "read": [105, 146, 200, 212, 244, 254, 294, 574, 618, 620], "infer_onnx_shape_dtyp": 105, "opset_vers": [105, 140, 180, 258, 259, 580], "input_shap": [105, 199, 243, 573, 574], "input_dtyp": 105, "sometim": [105, 552, 617], "so": [105, 212, 254, 552, 556, 581, 585, 588, 595, 597, 617, 618, 621, 622, 623, 625], "make_onnx_shap": 105, "seqtyp": 105, "tensor_dtyp": 105, "around": 105, "signifi": 105, "make_onnx_inputs_output": 105, "elem_typ": 105, "text": [105, 211, 212, 253, 254, 263, 268, 296, 316, 321, 580, 587, 598, 614, 615, 621, 623, 627], "datatyp": [105, 154, 618, 624], "save_protobuf": 105, "path": [105, 146, 154, 169, 175, 176, 195, 196, 197, 212, 239, 240, 241, 254, 255, 258, 259, 261, 272, 273, 274, 276, 285, 290, 294, 296, 298, 299, 312, 324, 332, 335, 351, 366, 430, 447, 450, 453, 455, 460, 461, 462, 463, 490, 521, 552, 553, 556, 571, 573, 574, 578, 584, 588, 589, 590, 591, 595, 598, 609, 612, 623, 626], "as_text": 105, "protobuf": 105, "is_onnx_domain": 105, "is_list_or_tupl": 105, "are_shapes_equ": 105, "src": [105, 610], "dest": 105, "equal": [105, 141, 146, 159, 354, 366, 588, 614], "get_subgraphs_from_onnx": 105, "model_proto": 105, "over": [105, 197, 241, 270, 323, 579, 583, 585, 588, 600, 609, 616, 621, 624], "df": 105, "initialize_name_count": 105, "avoid": [105, 195, 239, 552, 622], "conflict": [105, 581], "counter": 105, "make_nam": 105, "get_index_from_strided_slice_of_shap": 105, "outputs_to_valu": 105, "stride": [105, 212, 254, 623], "slice": 105, "compute_const_folding_using_tf": 105, "g": [105, 171, 179, 180, 576, 579, 583, 592, 597, 614, 619, 621, 624], "const_node_valu": 105, "graph_output": 105, "constant": [105, 259, 262, 302, 304, 310, 315, 339, 343, 349, 360, 503, 573, 582, 623], "tf": [105, 116, 146, 194, 195, 196, 197, 212, 238, 239, 240, 241, 254, 330, 332, 369, 571, 578, 591, 615, 618, 623], "generategraphwithqdqpattern": 107, "op_wise_config": [107, 131, 136], "quantized_nod": 107, "dq": [107, 109, 131, 621], "pair": [107, 179, 180, 573, 589, 590], "merg": [108, 187, 231, 312, 351, 604, 607, 622, 624], "mergeduplicatedqdqoptim": 108, "y": [109, 179, 180, 212, 254, 302, 339, 581, 595, 621, 623], "shareqdqforitexypatternoptim": 109, "enabl": [109, 148, 172, 179, 180, 295, 509, 571, 578, 586, 590, 592, 594, 597, 598, 600, 613, 614, 615, 624], "break": [109, 578, 589], "graphanalyz": 110, "extend_engin": 110, "analyz": [110, 169, 332, 620, 621, 622], "under": [110, 179, 180, 197, 241, 365, 553, 571, 574, 587, 588, 589, 592, 597, 598, 609, 612, 614, 621, 622, 624], "singleton": [110, 315, 366, 502, 510], "specifi": [110, 154, 160, 179, 180, 183, 184, 212, 213, 227, 228, 254, 261, 266, 270, 273, 276, 285, 290, 298, 299, 319, 323, 324, 335, 354, 356, 365, 366, 383, 420, 472, 517, 521, 538, 571, 578, 582, 588, 589, 597, 611, 616, 623, 624, 626], "graphrewriterhelp": 110, "encapsul": [110, 183, 184, 227, 228, 324, 335, 356, 591], "quantize_lay": [111, 112, 114], "fake_quant": [111, 112, 114], "quantize_config": [111, 112, 114], "quantize_help": [111, 112, 114], "quantize_wrapp": [111, 112, 114], "fuse_qdq_bn": [111, 112, 130], "fuse_qdq_concatv2": [111, 112, 130], "fuse_qdq_conv": [111, 112, 130], "fuse_qdq_deconv": [111, 112, 130], "fuse_qdq_in": [111, 112, 130], "fuse_qdq_matmul": [111, 112, 130], "fuse_qdq_pool": [111, 112, 130], "optimize_qdq": [111, 112, 130], "optimize_lay": [112, 114, 117], "quantize_layer_add": [112, 114, 117], "quantize_layer_bas": [112, 114, 117], "quantize_layer_bn": [112, 114, 117], "fake": [113, 152, 158, 589, 617, 621], "fakequantizebas": 113, "abc": [113, 268, 321, 556, 622, 624], "appli": [113, 126, 127, 128, 131, 133, 137, 161, 172, 222, 264, 317, 550, 571, 589, 592, 594, 600, 609, 612, 614, 617, 618, 620, 621, 624, 625, 626], "fakequant": 113, "per_channel": [113, 582, 617, 626], "num_bit": [113, 154, 621], "8": [113, 179, 180, 211, 253, 552, 582, 586, 614, 615, 621, 624, 627], "channel_axi": [113, 156, 159], "symmetr": [113, 617, 623, 624], "narrow_rang": 113, "quantizeconfig": [115, 116], "custom": [115, 160, 299, 323, 334, 365, 572, 576, 577, 592, 614, 620], "There": [115, 299, 301, 336, 338, 571, 576, 582, 585, 588, 589, 590, 592, 621, 624, 626], "instanc": [115, 116, 160, 179, 180, 183, 184, 213, 227, 228, 267, 268, 270, 273, 276, 279, 280, 282, 283, 284, 302, 314, 320, 321, 323, 324, 335, 339, 353, 356, 366, 550, 552, 556, 571, 572, 589, 594, 600, 626, 627], "global": [115, 171, 179, 180, 279, 280, 282, 283, 284, 293, 366, 552, 589, 614, 616, 624], "class": [116, 150, 154, 277, 324, 335, 444, 445, 552, 553, 573, 574, 576, 588, 589, 600, 611, 612, 617, 619, 622, 624, 626], "init_quantize_config": 116, "quantize_recip": 116, "begin": [116, 172, 295, 576, 577, 589, 614, 624], "process": [116, 148, 160, 171, 172, 174, 175, 179, 180, 183, 184, 195, 196, 197, 208, 212, 213, 227, 228, 239, 240, 241, 251, 254, 259, 293, 295, 297, 301, 302, 315, 324, 335, 336, 338, 339, 356, 365, 366, 382, 465, 466, 469, 502, 510, 514, 553, 556, 571, 573, 574, 576, 577, 578, 580, 589, 593, 612, 614, 617, 621, 622, 623, 626], "model_nam": [116, 179, 180, 521], "special": [116, 169, 334, 552, 573, 588, 589, 611, 614, 625], "decid": [116, 179, 180, 264, 295, 317, 430, 556, 589, 617, 619, 624], "qat_clone_funct": 116, "leav": [116, 603], "quantizewrapp": [116, 122], "wrapped_lay": 116, "config_quantizable_lay": 118, "quantizelayeradd": 119, "quantizelay": 120, "quantizelayerbas": 120, "quantizelayerbatchnorm": 121, "quantizewrapperbas": 122, "fusedbatchnormv3": [123, 133], "fusenodestartwithfusedbatchnormv3": [123, 133], "_quantizedfusedbatchnorm": 123, "concatv2": [124, 134, 145, 582], "fusenodestartwithconcatv2": [124, 134], "quantizedconcatv2": [124, 134], "fusenodestartwithconv2d": [125, 135], "conv2dbackpropinput": 126, "conv3dbackpropinputv2": 126, "fusenodestartwithdeconv2d": 126, "fusedinstancenorm": 127, "fusenodestartwithfusedinstancenorm": 127, "batchmatmul": 128, "batchmatmulv2": 128, "fusenodestartwithmatmul": [128, 137], "avgpool": [129, 138, 582], "fusenodestartwithpool": [129, 138], "optimizeqdqgraph": 131, "input_graph": [131, 136, 141, 368, 476, 480, 485, 488, 495, 556], "op_wise_sequ": [131, 136], "quantizegraph": 132, "quantizegraphbas": 132, "quantizenodebas": 132, "quantizegraphforintel": 136, "common": [139, 180, 210, 262, 272, 276, 277, 278, 315, 359, 514, 515, 521, 550, 574, 577, 578, 580, 584, 586, 589, 617, 621], "herlper": 139, "quantizegraphhelp": 139, "sever": [139, 174, 212, 254, 297, 553, 571, 576, 577, 585, 589, 590, 602, 606, 614, 616, 621, 623, 624, 626], "staticmethod": 139, "function": [139, 179, 180, 183, 184, 196, 227, 228, 240, 273, 276, 285, 290, 552, 553, 556, 571, 572, 573, 576, 577, 584, 585, 586, 588, 589, 590, 600, 610, 614, 617, 620, 621, 622, 624, 625], "tensorflowqdqtoonnxqdqconvert": 140, "shape_overrid": 140, "inputs_as_nchw": [140, 258], "default_opset_vers": 140, "bia": [141, 179, 180, 259, 622], "correct": [141, 159, 175, 179, 180, 266, 267, 268, 270, 294, 319, 320, 321, 323, 550, 571, 592], "biascorrect": 141, "fp32_graph": 141, "method": [141, 154, 173, 179, 180, 188, 193, 194, 195, 197, 204, 212, 215, 232, 237, 238, 239, 241, 248, 254, 276, 277, 278, 312, 351, 359, 360, 362, 363, 515, 533, 552, 553, 555, 574, 576, 577, 588, 589, 612, 614, 617, 618, 621, 623, 624], "weight_empir": 141, "Will": [141, 576, 585], "our": [141, 154, 179, 180, 553, 555, 580, 589, 610, 620, 625], "task": [141, 195, 202, 239, 246, 270, 323, 574, 576, 577, 580, 585, 588, 589, 614, 621], "close": [141, 159], "w_int8": [141, 159], "u": [141, 159, 555, 592], "w_fp32": [141, 159], "varianc": [141, 159], "ratio": [141, 159, 171, 172, 175, 179, 180, 208, 212, 251, 254, 295, 574, 589, 614, 623, 627], "differ": [141, 155, 159, 162, 170, 179, 180, 188, 197, 212, 214, 232, 241, 254, 261, 270, 276, 278, 287, 298, 323, 334, 361, 550, 552, 553, 571, 573, 574, 576, 578, 579, 580, 584, 585, 588, 589, 591, 602, 606, 611, 614, 617, 621, 622, 623, 624], "wise": [141, 159, 179, 180, 302, 305, 339, 340, 344, 521, 571, 585, 614, 622, 624, 626], "minim": [141, 159, 302, 339, 576, 579, 588, 589, 602, 606, 614, 617, 624], "round": [141, 159, 617, 621], "scale_c": [141, 159], "shift": [141, 159, 208, 251, 610, 623], "notic": [141, 159, 213, 587, 619], "can": [141, 148, 152, 159, 169, 170, 171, 172, 174, 179, 180, 183, 184, 194, 197, 212, 213, 215, 227, 228, 238, 241, 254, 266, 268, 270, 293, 295, 297, 319, 321, 323, 324, 334, 335, 356, 366, 472, 521, 552, 553, 555, 556, 571, 572, 573, 574, 576, 577, 578, 580, 582, 585, 586, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 600, 602, 603, 604, 606, 607, 609, 610, 611, 612, 613, 614, 616, 617, 618, 620, 621, 622, 623, 624, 626, 627], "first": [141, 159, 170, 177, 179, 180, 195, 239, 266, 312, 319, 340, 351, 366, 430, 552, 553, 556, 571, 574, 580, 586, 590, 594, 603, 604, 607, 610, 616, 617, 618, 620, 621, 622, 624, 626], "empir": [141, 159], "solut": [141, 159, 555, 556, 581, 594, 598, 603, 615, 621, 624], "min": [141, 159, 366, 571, 614, 617, 621, 623, 624], "graphtransform": 142, "graphtransformbas": 142, "input_pb": [142, 144, 145], "log": [144, 160, 169, 363, 369, 472, 512, 513, 552, 571, 600, 620, 622, 624], "insertlog": 144, "node_name_list": 144, "show_nam": 144, "show_op": 144, "first_n": 144, "summar": [144, 576], "1024": [144, 197, 241, 595], "dump_fp32": 144, "rerang": 145, "rerangequantizedconcat": 145, "rerange_quant": 145, "version1_lt_version2": [146, 366], "version1": [146, 366], "version2": [146, 366], "version1_gt_version2": [146, 366], "greater": [146, 366, 614], "version1_eq_version2": [146, 366], "version1_gte_version2": [146, 366], "version1_lte_version2": [146, 366], "disable_random": 146, "seed": [146, 179, 180, 278, 366, 589, 626], "disabl": [146, 179, 180, 509, 538, 550, 609, 618], "read_graph": 146, "in_graph": 146, "in_graph_is_binari": 146, "write_graph": 146, "out_graph_def": 146, "out_graph_fil": 146, "write": [146, 204, 248, 366, 578, 584, 589, 592, 622], "is_ckpt_format": 146, "model_path": [146, 451, 521], "ckpt": [146, 324, 332, 335, 627], "folder": [146, 197, 202, 241, 246, 324, 335, 365, 574, 597, 602, 606, 622], "is_saved_model_format": 146, "saved_model": [146, 272, 442, 449, 459], "get_estimator_graph": 146, "estim": [146, 270, 323, 332, 624], "input_fn": [146, 332], "get_tensor_by_nam": 146, "try_cnt": 146, "3": [146, 172, 180, 197, 212, 241, 254, 266, 319, 354, 552, 553, 555, 571, 573, 574, 576, 578, 580, 582, 583, 586, 588, 589, 590, 592, 596, 600, 602, 606, 611, 616, 617, 620, 621, 623, 624, 627], "consid": [146, 270, 323, 550, 576, 610, 624], "import": [146, 160, 179, 180, 272, 324, 334, 335, 354, 356, 366, 552, 553, 555, 572, 573, 574, 576, 577, 578, 580, 583, 588, 589, 590, 591, 592, 596, 598, 611, 612, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624], "scope": [146, 589], "more": [146, 152, 158, 171, 212, 254, 293, 553, 554, 555, 571, 574, 576, 578, 583, 585, 586, 588, 589, 590, 592, 600, 604, 607, 611, 612, 614, 618, 621, 624, 625, 627], "onc": [146, 174, 219, 297, 301, 336, 338, 571, 573, 609, 614, 615, 624, 627], "both": [146, 180, 550, 553, 556, 577, 586, 589, 593, 614, 616, 617, 621, 624], "compat": [146, 332, 578, 591, 604, 607, 609, 619], "suffix": 146, "time": [146, 179, 180, 212, 254, 270, 302, 323, 334, 339, 366, 507, 578, 581, 589, 597, 599, 602, 606, 609, 610, 611, 614, 615, 617, 620, 622, 623, 624], "got": [146, 581, 622], "iterator_sess_run": 146, "sess": [146, 332], "iter_op": 146, "feed_dict": [146, 194, 238], "output_tensor": [146, 332], "measur": [146, 213, 324, 361, 553, 556, 572, 576, 588, 589, 622, 624], "integr": [146, 162, 214, 556, 571, 589, 610], "makeiter": 146, "feed": [146, 194, 238, 576, 614], "end": [146, 172, 179, 180, 195, 211, 212, 239, 253, 254, 295, 301, 336, 338, 556, 576, 577, 582, 586, 589, 603, 611, 614, 622, 623, 624], "predict": [146, 212, 217, 254, 263, 267, 268, 270, 316, 320, 321, 323, 335, 553, 576, 588, 600, 621, 622, 623], "pred": [146, 270, 323, 588], "collate_tf_pr": 146, "collat": [146, 154], "tbe": 146, "get_input_output_node_nam": 146, "fix_ref_type_of_graph_def": 146, "fix": [146, 172, 195, 239, 295, 551, 574, 596, 614, 621, 624], "strip_unused_lib": 146, "offici": [146, 263, 267, 268, 316, 320, 321, 550, 571, 588, 621], "r1": 146, "15": [146, 582, 627], "branch": [146, 571], "get_graph_def": 146, "auto_input_output": 146, "get_model_input_shap": 146, "inout": 146, "get_tensor_val_from_graph_nod": 146, "graph_node_name_map": 146, "val": [146, 175, 197, 200, 241, 244, 294, 589], "tensor_v": 146, "int8_node_name_revers": 146, "revers": [146, 571], "tf_diagnosis_help": 146, "fp32_model": [146, 148, 154, 259, 366, 556], "quan_model": 146, "save_path": [146, 258, 259, 556, 591], "diagnosi": [146, 180, 315, 410, 419, 442, 502, 531, 537, 589], "generate_feed_dict": 146, "input_tensor": [146, 332], "torch": [147, 148, 149, 150, 151, 152, 153, 154, 158, 169, 170, 171, 176, 179, 180, 224, 259, 324, 335, 365, 552, 555, 557, 576, 578, 580, 589, 590, 591, 592, 597, 600, 617, 621, 622], "bf16modulewrapp": 147, "bf16modul": 147, "mix": [147, 179, 180, 300, 312, 324, 337, 351, 478, 479, 480, 527, 555, 556, 561, 585, 592, 598, 599, 600, 625], "precis": [147, 179, 180, 183, 184, 227, 228, 261, 268, 270, 271, 298, 300, 312, 321, 323, 324, 334, 337, 340, 351, 394, 408, 409, 418, 442, 476, 478, 479, 480, 503, 527, 555, 556, 561, 571, 572, 577, 578, 582, 585, 592, 598, 599, 600, 615, 616, 617, 621, 624, 625], "mixed_precision_model": 147, "bf16_symbolic_trac": 147, "fx_sub_module_list": 147, "trace": [147, 148, 153, 154, 169, 179, 180, 259, 342, 552, 599, 624], "_description_": 147, "hessian": [148, 342, 624], "awar": [148, 161, 180, 222, 272, 293, 342, 356, 556, 577, 578, 580, 585, 590, 609, 612, 624], "node_collector": 148, "hook": [148, 161, 221, 222, 285, 290, 359, 576, 577, 589, 614, 621, 622], "record": [148, 154, 162, 195, 196, 197, 203, 214, 221, 239, 240, 241, 247, 366, 574, 620, 622, 624], "hessiantrac": 148, "q_model": [148, 180, 272, 335, 552, 555, 573, 574, 578, 580, 583, 584, 588, 589, 591, 617, 618], "criterion": [148, 161, 163, 164, 165, 171, 172, 179, 180, 216, 219, 262, 315, 489, 529, 576, 577, 580, 589, 614, 617, 624, 626], "pleas": [148, 152, 158, 165, 171, 172, 179, 180, 195, 196, 197, 200, 239, 240, 241, 244, 293, 295, 296, 323, 335, 354, 552, 553, 554, 555, 556, 571, 572, 574, 577, 578, 586, 588, 590, 592, 593, 597, 600, 614, 617, 618, 619, 620, 621, 625], "refer": [148, 152, 158, 165, 171, 172, 175, 179, 180, 195, 239, 263, 264, 270, 293, 295, 296, 316, 317, 323, 335, 354, 552, 556, 572, 573, 574, 577, 578, 584, 586, 587, 588, 589, 590, 592, 597, 600, 611, 616, 619, 623, 624], "yao": 148, "zhewei": 148, "et": [148, 621], "al": [148, 621], "pyhessian": 148, "network": [148, 165, 171, 295, 342, 553, 571, 576, 577, 580, 589, 613, 615, 617, 621, 624], "through": [148, 183, 184, 227, 228, 323, 324, 335, 555, 572, 582, 584, 585, 588, 595, 611, 612, 614, 616, 617, 621], "len": [148, 180, 212, 254, 574, 578, 623], "2020": 148, "ieee": [148, 590, 621], "intern": [148, 312, 351, 505, 573, 574, 614], "confer": [148, 614, 621], "big": 148, "dong": 148, "zhen": 148, "hawq": [148, 342, 624], "v2": [148, 342, 578, 586, 598, 619, 624, 627], "advanc": [148, 179, 180, 530, 550, 555, 561, 617, 626], "system": [148, 160, 213, 366, 509, 536, 537, 572, 595], "33": [148, 627], "18518": 148, "18529": 148, "openvinotoolkit": 148, "nncf": 148, "develop": [148, 334, 521, 551, 552, 586, 589, 590, 592, 598, 609, 614, 615, 618, 620], "hessian_trac": 148, "compare_weight": 148, "float_dict": 148, "ani": [148, 266, 268, 311, 319, 321, 350, 354, 368, 369, 371, 373, 375, 376, 377, 378, 379, 380, 381, 383, 408, 409, 430, 432, 438, 447, 464, 467, 469, 472, 476, 480, 482, 485, 488, 491, 494, 500, 507, 509, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 537, 538, 550, 551, 555, 571, 573, 578, 592, 597, 610, 614, 620], "quantized_dict": 148, "compar": [148, 270, 323, 366, 571, 577, 588, 614, 617, 620, 622, 624], "being": [148, 266, 319, 438], "two": [148, 160, 170, 171, 172, 174, 197, 202, 213, 241, 246, 266, 293, 297, 299, 306, 319, 345, 366, 552, 553, 571, 574, 576, 578, 580, 582, 588, 589, 590, 617, 618, 620, 624, 626], "wt_compare_dict": 148, "float_model": 148, "state_dict": [148, 578, 622], "qmodel": 148, "compute_error": 148, "state": [148, 170, 595, 614], "weight_dict": 148, "hawq_top": 148, "enable_act": 148, "modul": [149, 150, 275, 281, 291, 292, 510, 518, 526, 552, 571, 573, 576, 580, 585, 588, 589, 591, 614, 616, 618, 622, 625], "nn": [150, 152, 154, 169, 170, 179, 180, 224, 259, 324, 335, 365, 552, 576, 580, 589, 591, 621, 622], "detector": 151, "transformerbasedmodelblockpatterndetector": 151, "pattern_lst": 151, "block_pattern": 151, "detect": [151, 154, 169, 179, 180, 266, 270, 319, 323, 328, 521, 552, 571, 592, 599, 600, 614], "ffn": 151, "get_modul": 152, "set_modul": [152, 154], "new_modul": [152, 154], "torchsmoothqu": [152, 621], "example_input": [152, 154, 179, 180, 259, 580], "q_func": [152, 183, 184, 227, 228, 302, 303, 305, 306, 307, 308, 336, 339, 340, 341, 342, 344, 345, 346, 347, 556, 589, 624], "traced_model": [152, 153], "detail": [152, 158, 169, 212, 254, 403, 405, 426, 489, 494, 508, 521, 550, 551, 555, 576, 582, 583, 584, 588, 589, 590, 592, 600, 609, 614, 619, 620, 622, 624, 625, 627], "smoothquant": [152, 154, 158, 555, 615, 625], "accur": [152, 158, 621], "effici": [152, 158, 553, 573, 576, 592, 612, 615, 621, 624], "larg": [152, 158, 555, 573, 576, 589, 614, 615, 621, 627], "languag": [152, 158, 263, 316, 550, 555, 580, 614, 615, 621], "spiq": [152, 158, 621], "free": [152, 158, 170, 172, 183, 184, 227, 228, 335, 550, 555, 588, 598, 603, 611, 620, 621], "could": [152, 158, 171, 183, 184, 197, 227, 228, 241, 299, 324, 335, 356, 550, 552, 577, 589, 612, 614, 617, 621, 625], "absorb": [152, 158], "later": [152, 158, 622], "inplac": 152, "mean": [152, 171, 179, 180, 208, 212, 251, 254, 268, 270, 293, 305, 321, 323, 344, 552, 573, 578, 582, 588, 589, 595, 614, 617, 621, 623, 624, 626], "you": [152, 179, 180, 193, 195, 237, 239, 295, 323, 335, 551, 552, 571, 574, 578, 580, 586, 587, 588, 592, 594, 595, 597, 602, 606, 609, 610, 614, 617, 619, 620, 621, 622, 625], "recov": [152, 366, 556, 577, 621], "graphtrac": 152, "trace_and_fuse_sub_graph": 153, "is_qat": 153, "get_embedding_contigu": 154, "embed": [154, 614], "contigu": 154, "is_fused_modul": 154, "_propagate_qconfig_help": 154, "collate_torch_pr": 154, "fetch": [154, 157, 188, 232, 574], "collate_result": 154, "input2tupl": 154, "append_attr": 154, "fx_model": 154, "fx_white_list": 154, "append": [154, 299, 302, 339, 552, 577, 589, 612], "graphmodul": [154, 552, 618], "addit": [154, 180, 356, 571, 576, 603, 619], "dir": [154, 195, 239, 365, 574, 581, 584], "generate_activation_observ": 154, "observ": [154, 620, 622, 624], "what": [154, 172, 193, 237, 323, 335, 356, 550, 571], "check_cfg_and_qconfig": 154, "op_infos_from_cfg": 154, "output_tensor_ids_op_nam": 154, "paser_cfg": 154, "ops_nam": 154, "get_quantizable_ops_from_cfg": 154, "input_tensor_ids_op_nam": 154, "update_sq_scal": 154, "ipex_config_path": 154, "smoothquant_scale_info": 154, "ipex_config": 154, "json": [154, 196, 212, 240, 254, 494, 521, 574, 591, 610, 623], "temporari": [154, 366, 550], "auto_copi": 154, "fetch_modul": 154, "op_nam": [154, 176, 179, 180, 313, 352, 426, 427, 589, 614, 622], "simple_infer": 154, "get_example_input": 154, "dataset": [154, 183, 184, 185, 187, 188, 191, 192, 193, 194, 206, 215, 227, 228, 229, 231, 232, 235, 236, 237, 238, 250, 262, 266, 267, 268, 270, 299, 315, 319, 320, 321, 323, 324, 335, 356, 359, 394, 408, 418, 419, 430, 442, 521, 523, 553, 555, 556, 573, 578, 583, 588, 589, 597, 614, 617, 619, 621, 624, 626, 627], "example_inp": 154, "get_fallback_ord": 154, "confidence_batch": [154, 624], "fallback": [154, 305, 306, 342, 344, 345, 590, 618, 624], "requantize_cfg": 154, "fall": 154, "back": [154, 212, 218, 254, 609], "order": [154, 263, 264, 299, 302, 305, 314, 316, 317, 339, 344, 353, 552, 588, 616, 621, 622, 624], "confid": 154, "ordered_op": 154, "get_mse_order_per_fp32": 154, "mse": [154, 179, 180, 262, 270, 304, 315, 323, 335, 343, 427, 571, 588, 616, 619], "influenc": [154, 614], "last": [154, 165, 175, 179, 180, 571, 590, 592, 594, 599, 603, 617, 621], "fallback_ord": 154, "get_mse_order_per_int8": 154, "get_torch_vers": 154, "match_datatype_pattern": 154, "calculate_quant_min_max": 154, "unsign": [154, 314, 353], "qmin": 154, "qmax": 154, "get_depth": 154, "depth": [154, 576, 618], "get_dict_at_depth": 154, "target_depth": 154, "nest": [154, 177], "get_element_under_depth": 154, "ops_lst": 154, "get_op_type_by_nam": 154, "quantizable_op": 154, "algorithm_registri": 155, "algorithm_typ": 155, "locat": [155, 175, 212, 254, 578, 595, 602, 606, 609, 617, 619, 623, 626], "registr": [155, 197, 204, 212, 241, 248, 254, 288], "algorithmschedul": 155, "conf": [155, 160, 161, 180, 183, 184, 213, 227, 228, 272, 279, 280, 282, 283, 284, 285, 290, 302, 303, 305, 306, 307, 308, 312, 324, 334, 335, 336, 339, 340, 341, 342, 344, 345, 346, 347, 351, 354, 356, 532, 552, 553, 555, 572, 576, 583, 584, 589, 590, 591, 612, 617, 618, 620, 621, 624], "control": [155, 179, 180, 413, 418, 552, 571, 589, 614, 624], "phase": [155, 553, 589, 614, 617, 618, 624], "fastbiascorrect": [156, 159], "fast_bias_correct": [157, 179, 180, 315, 617], "smooth_quant": [157, 179, 180, 315, 617, 621], "weight_correct": [157, 179, 180, 315, 617], "5": [158, 162, 179, 180, 199, 208, 214, 243, 251, 270, 323, 335, 556, 571, 574, 582, 588, 589, 613, 614, 616, 617, 621, 623, 624, 626, 627], "For": [158, 169, 170, 171, 180, 197, 212, 241, 254, 267, 268, 270, 293, 296, 320, 321, 323, 324, 335, 550, 552, 554, 556, 571, 576, 577, 578, 580, 582, 585, 592, 594, 595, 597, 600, 614, 618, 621, 622, 624, 626, 627], "kernel": [158, 179, 180, 509, 556, 613, 624], "futur": [158, 183, 184, 215, 227, 228, 585, 589, 600, 625], "weightcorrect": 159, "1e": [159, 621, 626], "05": [159, 180, 270, 323, 588, 621, 627], "evalu": [160, 161, 171, 179, 183, 184, 195, 213, 227, 228, 239, 255, 263, 266, 267, 268, 270, 272, 316, 319, 320, 321, 323, 324, 334, 335, 356, 359, 502, 510, 526, 553, 556, 573, 574, 576, 577, 584, 585, 588, 589, 590, 592, 598, 600, 603, 609, 611, 614, 617, 620, 622, 624, 626], "set_env_var": [160, 213], "env_var": [160, 213], "overwrite_exist": [160, 213], "env": [160, 213, 581], "alreadi": [160, 197, 211, 213, 241, 253, 507, 556, 571, 574, 585, 604, 607, 624], "param": [160, 185, 213, 219, 229, 270, 302, 323, 339, 366, 420, 521, 556, 591, 624], "set_all_env_var": [160, 213], "physic": [160, 213, 550, 572], "core": [160, 179, 180, 213, 571, 572, 587, 602, 606, 613, 627], "get_architectur": [160, 213], "architectur": [160, 213, 273, 276, 555, 571, 572, 576, 589, 614, 615, 625], "get_threads_per_cor": [160, 213], "thread": [160, 179, 180, 213, 537, 571, 573, 613], "get_thread": [160, 213], "get_physical_id": [160, 213], "socket": [160, 213, 509, 538, 613, 627], "get_core_id": [160, 213], "get_bounded_thread": [160, 213], "core_id": [160, 213], "bind": [160, 213], "run_inst": 160, "b_dataload": [160, 179, 180, 572, 589], "b_func": [160, 572], "benchmarkconfig": [160, 179, 180, 572, 589], "accuraci": [160, 175, 179, 180, 183, 184, 227, 228, 255, 261, 270, 285, 290, 298, 323, 324, 334, 335, 340, 354, 356, 489, 513, 524, 552, 555, 571, 573, 574, 577, 578, 579, 580, 588, 589, 590, 600, 609, 611, 612, 614, 615, 616, 619, 620, 621, 622, 626, 627], "goal": [160, 255, 261, 285, 290, 298, 324, 335, 573, 612, 617, 624], "prefer": [160, 261, 298, 335, 614], "space": [160, 172, 179, 180, 183, 184, 227, 228, 261, 268, 273, 276, 277, 278, 298, 302, 305, 312, 321, 324, 335, 339, 344, 351, 521, 550, 551, 553, 556, 614, 617, 626], "etc": [160, 161, 211, 253, 255, 261, 268, 285, 290, 298, 321, 324, 335, 365, 576, 585, 614, 620, 624], "user": [160, 169, 172, 175, 179, 180, 183, 184, 197, 200, 204, 212, 213, 219, 224, 227, 228, 241, 244, 248, 254, 261, 285, 290, 296, 298, 299, 323, 324, 334, 335, 340, 356, 366, 505, 552, 553, 556, 561, 572, 576, 577, 580, 582, 585, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 600, 603, 609, 611, 612, 614, 615, 617, 618, 619, 621, 622, 623, 624, 628], "generate_prefix": 160, "core_list": 160, "command": [160, 213, 356, 506, 514, 571, 578, 592, 594, 597, 602, 606, 610], "numactl": [160, 581, 595, 603], "call_on": 160, "cmd": [160, 610], "log_fil": 160, "window": [160, 572, 609, 610], "config_inst": 160, "raw_cmd": 160, "multi": [160, 167, 169, 266, 319, 323, 335, 379, 553, 573, 574, 585, 589, 611, 614, 617, 624], "trigger": [160, 172, 295, 551], "raw": [160, 196, 200, 203, 240, 244, 247, 305, 344, 583, 588, 624], "summary_benchmark": 160, "summari": [160, 356, 571, 604, 607, 613, 622], "benchmark_with_raw_cmd": 160, "commend": 160, "fit_with_raw_cmd": 160, "cores_per_inst": [160, 179, 180, 572, 589, 616], "num_of_inst": [160, 179, 180, 572, 589, 616], "7": [160, 179, 180, 334, 572, 581, 582, 586, 589, 614, 617, 619, 621, 624, 627], "test": [160, 170, 179, 180, 212, 254, 551, 555, 571, 586, 627], "fit": [160, 171, 179, 180, 302, 324, 335, 339, 354, 356, 552, 555, 572, 573, 574, 578, 583, 584, 588, 589, 590, 591, 614, 617, 618], "pb": [160, 179, 180, 324, 332, 335, 458, 461, 472, 555, 572, 578, 583, 589, 591, 622, 627], "eval_dataload": [160, 179, 180, 183, 184, 227, 228, 299, 302, 303, 305, 306, 307, 308, 324, 335, 336, 339, 340, 341, 342, 344, 345, 346, 347, 356, 555, 572, 583, 584, 589, 617, 624], "compon": [161, 255, 262, 299, 315, 502, 537, 552, 578, 586, 587, 592, 609, 612, 613], "quantizationawaretrainingcallback": 161, "pruningcallback": 161, "distillationcallback": 161, "basecallback": 161, "design": [161, 194, 217, 222, 238, 323, 340, 553, 555, 589, 597, 600, 614, 617, 625], "mainli": [161, 174, 222, 297, 589, 614, 617], "prune": [161, 165, 166, 167, 170, 171, 172, 173, 174, 175, 179, 180, 222, 223, 262, 279, 280, 282, 283, 284, 288, 290, 291, 293, 294, 295, 297, 299, 315, 366, 377, 384, 403, 442, 477, 502, 510, 521, 526, 555, 578, 579, 582, 583, 585, 612, 615, 625, 626], "distil": [161, 164, 179, 180, 214, 221, 222, 262, 315, 555, 579, 583, 585, 612, 625, 626], "adaptor": [161, 179, 180, 314, 353, 359, 555, 585, 618, 619, 621, 622, 625], "deriv": [161, 165, 171, 172, 173, 174, 255, 293, 295, 297], "pipelin": [161, 255, 273, 274, 299, 577, 589, 612], "knowledg": [161, 162, 179, 180, 214, 255, 577, 579, 583, 585, 589, 591, 626], "transfer": [161, 202, 246, 255, 574, 576, 577, 589, 621], "teacher": [161, 179, 180, 255, 576, 577, 589, 627], "student": [161, 179, 180, 195, 221, 239, 255, 574, 576, 577, 627], "distillation_conf": [161, 176, 255], "_epoch_ran": [161, 255], "integ": [161, 171, 172, 179, 180, 255, 266, 270, 277, 293, 295, 319, 323, 354, 556, 617, 621, 624], "indic": [161, 179, 180, 188, 193, 195, 232, 237, 239, 255, 266, 277, 319, 552, 571, 581, 622], "how": [161, 165, 171, 172, 179, 180, 212, 254, 255, 293, 551, 552, 554, 556, 571, 573, 574, 576, 577, 578, 584, 589, 603, 604, 607, 608, 609, 614, 617, 621, 623, 624, 625, 626], "much": [161, 165, 179, 180, 212, 254, 255, 576, 603, 621, 623], "epoch": [161, 172, 255, 295, 356, 576, 577, 578, 589, 612, 614, 626], "ran": [161, 255], "eval_frequ": [161, 255], "frequenc": [161, 172, 179, 180, 255, 295, 589, 613, 614, 626], "term": [161, 172, 173, 255, 551, 576, 587, 588, 611, 612, 624], "best_scor": [161, 255], "best": [161, 212, 254, 255, 261, 298, 305, 344, 550, 553, 586, 592, 598, 609, 611, 617, 623, 624], "metric": [161, 179, 180, 183, 184, 216, 227, 228, 255, 261, 262, 277, 285, 290, 298, 299, 315, 324, 335, 356, 359, 394, 418, 442, 502, 510, 518, 521, 524, 553, 556, 571, 573, 574, 578, 589, 590, 617, 620, 622, 624, 625, 626, 627], "best_model": [161, 255], "found": [161, 255, 505, 521, 538, 555, 571, 576, 590, 597, 621, 624, 627], "critet": [162, 214], "includ": [162, 165, 169, 171, 173, 179, 180, 195, 197, 204, 212, 214, 239, 241, 248, 254, 261, 271, 293, 298, 354, 550, 551, 556, 571, 574, 586, 587, 588, 589, 590, 592, 595, 598, 603, 614, 617, 618, 622, 624], "tensorflowknowledgedistillationloss": [162, 214], "pytorchknowledgedistillationloss": [162, 214, 589], "pytorchintermediatelayersknowledgedistillationloss": [162, 214], "tensorflowcriterion": [162, 214], "pytorchcriterion": [162, 214], "criterion_registri": [162, 214], "criterion_typ": [162, 214], "registry_criterion": [162, 214], "knowledgedistillationframework": [162, 214], "student_model": [162, 180, 214, 589], "teacher_model": [162, 179, 180, 214, 576, 577, 589], "knowledgedistillationloss": [162, 214, 589, 626], "temperatur": [162, 179, 180, 214, 589, 626], "loss_typ": [162, 179, 180, 214, 589, 626], "ce": [162, 179, 180, 214, 589, 626], "loss_weight": [162, 179, 180, 214, 589, 626], "pytorchknowledgedistillationlosswrapp": [162, 214], "param_dict": [162, 214, 219], "tensorflowknowledgedistillationlosswrapp": [162, 214], "tensorflowknowledgedistillationlossextern": [162, 214], "intermediatelayersknowledgedistillationloss": [162, 214, 529], "layer_map": [162, 180, 214, 576], "add_origin_loss": [162, 180, 214], "pytorch": [162, 169, 171, 179, 180, 194, 195, 197, 200, 204, 212, 214, 219, 221, 238, 239, 241, 244, 248, 254, 259, 260, 261, 270, 271, 291, 293, 296, 298, 306, 315, 323, 324, 333, 335, 345, 360, 366, 369, 442, 449, 472, 482, 502, 552, 553, 555, 556, 573, 576, 577, 579, 580, 582, 585, 586, 589, 591, 592, 594, 597, 598, 599, 600, 609, 614, 615, 616, 619, 621, 624, 626], "loss": [162, 179, 180, 214, 261, 270, 285, 290, 298, 323, 356, 576, 577, 578, 579, 588, 589, 590, 600, 612, 614, 617, 621, 624, 626], "pytorchintermediatelayersknowledgedistillationlosswrapp": [162, 214], "selfknowledgedistillationloss": [162, 214, 529], "selfknowledg": [162, 214], "pytorchselfknowledgedistillationloss": [162, 214], "pytorchselfknowledgedistillationlosswrapp": [162, 214], "pruner": [164, 262, 279, 280, 281, 282, 283, 285, 290, 291, 293, 296, 315, 532, 589, 614, 626], "model_slim": [164, 166], "auto_slim": [164, 166, 168], "pattern_analyz": [164, 166, 168], "weight_slim": [164, 166, 168], "criteria": [164, 166, 179, 180, 261, 285, 290, 293, 295, 298, 552, 609, 621], "reg": [164, 166, 172], "schedul": [164, 166, 172, 173, 179, 180, 262, 291, 295, 315, 589, 612], "callback": [164, 285, 290, 356, 359, 537, 552, 589, 612, 614, 617], "register_criterion": 165, "registri": [165, 171, 172, 173, 174, 293, 295, 297, 553], "get_criterion": 165, "pruningcriterion": 165, "about": [165, 508, 509, 515, 550, 571, 573, 589, 618, 624, 625, 627], "module_nam": [165, 172, 173, 295, 366, 521], "store": [165, 169, 172, 173, 179, 180, 197, 241, 288, 295, 584], "score": [165, 171, 172, 179, 180, 263, 264, 266, 267, 268, 270, 295, 316, 317, 319, 320, 321, 323, 342, 359, 552, 588, 611, 614, 620, 624], "magnitudecriterion": 165, "magnitud": [165, 179, 180, 262, 270, 281, 315, 323, 585, 614], "criterion_class": 165, "determin": [165, 171, 172, 179, 180, 361, 550, 552, 614, 617, 621], "gradientcriterion": 165, "gradient": [165, 279, 585, 589, 614, 627], "absolut": [165, 179, 180, 270, 323, 588, 589, 613, 614, 617, 624], "snipcriterion": 165, "snip": [165, 179, 180, 295, 585, 614, 627], "product": [165, 585, 590, 592, 593, 609, 613, 615, 617, 620, 624], "singl": [165, 174, 179, 180, 188, 195, 212, 232, 239, 254, 266, 295, 297, 319, 323, 335, 402, 419, 438, 552, 574, 586, 614], "shot": [165, 172, 174, 222, 295, 297, 553, 585, 589, 614, 615], "sensit": [165, 279, 295, 585, 614], "arxiv": [165, 172, 295, 614, 621], "org": [165, 172, 266, 295, 319, 551, 552, 571, 586, 604, 607], "1810": [165, 295], "02340": [165, 295], "snipmomentumcriterion": 165, "snip_momentum": [165, 179, 180, 589, 614], "momentum": [165, 295, 585, 589, 614, 626], "mechan": [165, 614, 620, 625], "preserv": 165, "step": [165, 171, 172, 174, 179, 180, 293, 295, 297, 356, 571, 576, 577, 578, 589, 604, 607, 609, 612, 614, 616, 618, 620, 621, 622, 624], "beta": 165, "snipmomentumblockcriterion": 165, "snip_momentum_block": 165, "retrainfreecriterion": 165, "retrain_fre": [165, 172], "auto": [167, 169, 179, 180, 300, 315, 337, 343, 366, 552, 592, 595, 597, 599, 600, 614, 617], "slim": [167, 168, 169, 266, 319, 330, 332, 591, 614], "round_multipli": 167, "32": [167, 578, 584, 613, 621, 627], "spars": [167, 172, 295, 574, 615], "automat": [167, 169, 170, 179, 180, 197, 200, 207, 208, 241, 244, 251, 261, 271, 298, 552, 555, 571, 572, 574, 585, 589, 590, 592, 594, 597, 598, 600, 602, 603, 604, 606, 607, 609, 612, 614, 617, 621, 623, 624], "model_slim_ffn2": 167, "some": [167, 169, 179, 180, 195, 239, 294, 521, 571, 574, 586, 588, 589, 590, 611, 614, 617, 618, 621, 622, 624], "part": [167, 172, 293, 295, 552, 586, 590, 604, 607, 614, 621, 625], "perman": [167, 550, 614], "obtain": [167, 169, 172, 173, 175, 294, 552, 580, 614, 620, 621, 624], "acceler": [167, 576, 589, 592, 600, 609, 614, 615, 618, 621, 624], "directli": [167, 179, 180, 194, 238, 266, 270, 294, 319, 323, 580, 588, 589, 596, 614, 616, 617, 622], "sprase": 167, "multipl": [167, 179, 180, 181, 182, 186, 187, 195, 196, 198, 199, 200, 201, 202, 206, 209, 212, 219, 225, 226, 230, 231, 233, 239, 240, 242, 243, 244, 245, 246, 250, 252, 254, 271, 324, 325, 326, 328, 334, 572, 574, 580, 589, 612, 614, 620, 621, 624], "model_slim_mha": 167, "parse_auto_slim_config": 167, "ffn2_sparsiti": 167, "mha_spars": 167, "generate_ffn2_pruning_config": 167, "consecut": [167, 169, 170, 614], "generate_mha_pruning_config": 167, "head": [167, 169, 170, 175, 614], "get_attribut": 169, "level": [169, 340, 354, 363, 512, 550, 621, 624], "descent": 169, "print_iter": 169, "recipesearch": 169, "searcher": [169, 278], "search": [169, 172, 176, 183, 184, 227, 228, 261, 263, 273, 276, 277, 278, 298, 302, 316, 339, 408, 409, 555, 571, 583, 585, 588, 592, 593, 603, 615, 622, 624, 625], "root": [169, 195, 196, 197, 200, 239, 240, 241, 244, 270, 323, 538, 573, 574, 578, 588, 589, 626], "levelwis": 169, "wai": [169, 196, 197, 200, 240, 241, 244, 521, 553, 571, 573, 574, 588, 589, 592, 595, 610, 612, 614, 617, 621, 624, 626], "huggingfac": [169, 170, 195, 239, 362, 574, 579, 583, 597, 598, 599, 600, 621], "bert": [169, 180, 191, 194, 195, 212, 235, 238, 239, 254, 555, 574, 576, 588, 597, 614, 623, 627], "recipe_sampl": 169, "bertattent": 169, "dens": [169, 174, 179, 180, 297, 614, 627], "infom": [169, 215, 259], "basic": [169, 171, 179, 180, 211, 253, 262, 273, 293, 304, 308, 311, 315, 343, 347, 350, 356, 585, 586, 589, 616, 620], "searching_result": 169, "jitbasicsearch": 169, "placeholder_shap": 169, "placeholder_dtyp": 169, "jit": [169, 179, 592, 594, 599, 621, 622], "them": [169, 195, 239, 552, 573, 580, 582, 584, 612, 614, 624], "static_graph": 169, "flatten_static_graph": 169, "target_lay": 169, "linear2linearsearch": 169, "target_op_lut": 169, "lookup": 169, "tabl": [169, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 408, 409, 627], "code": [169, 183, 184, 213, 227, 228, 272, 296, 299, 335, 356, 431, 449, 552, 555, 556, 571, 573, 574, 576, 577, 578, 584, 585, 587, 588, 592, 594, 596, 597, 598, 600, 603, 609, 611, 612, 614, 615, 616, 617, 620, 621, 622, 623], "current_pattern": 169, "statu": [169, 517, 533, 550, 573, 611, 614], "selfmhasearch": 169, "classifierheadsearch": 169, "final": [169, 172, 175, 295, 589, 595, 611, 614, 617, 619, 624], "classifi": [169, 175, 195, 239, 270, 323, 574, 576], "squeezer": 170, "postcompressionutil": 170, "librari": [170, 216, 262, 315, 548, 551, 555, 586, 589, 594, 603, 609, 615, 617], "relat": [170, 173, 255, 266, 285, 290, 293, 319, 359, 449, 452, 454, 459, 539, 542, 543, 544, 547, 592, 614, 626], "linearcompress": 170, "root_linear": 170, "target_linear": 170, "also": [170, 194, 197, 212, 238, 241, 254, 263, 316, 323, 334, 335, 551, 553, 555, 556, 571, 573, 579, 583, 585, 588, 589, 592, 597, 602, 603, 606, 609, 610, 611, 614, 615, 617, 618, 621, 624], "while": [170, 172, 175, 295, 302, 339, 556, 571, 574, 579, 585, 590, 592, 597, 609, 616, 617, 621], "hidden": [170, 171, 293, 521, 556], "structur": [170, 172, 179, 180, 295, 313, 352, 446, 585, 608, 610, 614, 617, 622, 625, 627], "layer_1": 170, "act_fn": 170, "layer_2": 170, "linearcompressioniter": 170, "linear_pattern": 170, "mhacompress": 170, "mha": 170, "head_num": 170, "head_siz": 170, "progress": [170, 197, 241, 603, 609, 614, 617], "register_pattern": [171, 293], "sure": [171, 172, 174, 293, 295, 297, 571, 572], "get_pattern": [171, 293], "assertionerror": [171, 172, 175, 293, 294, 295, 324], "basepattern": [171, 173], "unit": [171, 293, 521, 551, 614], "e": [171, 179, 180, 538, 550, 576, 579, 583, 592, 597, 598, 602, 606, 614, 621, 624], "4x1": [171, 179, 180, 289, 589, 614, 627], "is_glob": [171, 293], "local": [171, 179, 180, 293, 366, 381, 413, 418, 431, 451, 571, 602, 606, 614, 620], "contrast": [171, 293, 623], "keep_mask_lay": 171, "invalid_lay": 171, "max_sparsity_ratio_per_op": [171, 172, 176, 179, 180, 589, 614], "sparsiti": [171, 172, 174, 175, 179, 180, 295, 297, 366, 555, 574, 585, 589, 625, 627], "reach": [171, 174, 179, 180, 297, 551, 555, 573, 614, 624], "min_sparsity_ratio_per_op": [171, 176, 179, 180, 589, 614], "minimum": [171, 179, 180, 589, 600, 614, 624], "target_spars": [171, 176, 179, 180, 589, 614, 616, 626], "patternnxm": [171, 293], "nxm": [171, 172, 179, 180, 289, 293, 614], "kept": [171, 293], "block_siz": [171, 293], "height": [171, 208, 212, 251, 254, 293, 578, 623, 626], "width": [171, 208, 212, 251, 254, 293, 578, 614, 617, 623, 626], "vertic": [171, 212, 254, 293, 623], "becaus": [171, 212, 254, 293, 552, 617, 621, 623, 624], "patternninm": [171, 293], "n": [171, 179, 180, 196, 212, 240, 254, 264, 293, 317, 354, 509, 574, 576, 614, 617, 621, 623], "out": [171, 179, 180, 195, 196, 197, 239, 240, 241, 261, 293, 298, 551, 552, 555, 574, 592, 597, 602, 603, 604, 606, 607, 609, 614, 616, 617], "continu": [171, 266, 293, 319, 553, 589, 610, 614], "doc": [171, 179, 180, 293, 311, 312, 323, 335, 350, 351, 354, 366, 588, 589, 604, 607], "md": [171, 179, 180, 293, 323, 335, 578, 617], "element": [171, 175, 193, 237, 266, 293, 319, 366, 574, 585, 588, 614, 621], "register_prun": [172, 295], "parse_valid_pruner_typ": 172, "get_prun": [172, 295], "cuurent": [172, 295], "baseprun": 172, "current_sparsity_ratio": [172, 295], "global_step": [172, 295], "total": [172, 212, 254, 270, 295, 323, 574, 614, 623], "start_step": [172, 176, 179, 180, 295, 589, 614, 616], "end_step": [172, 176, 179, 180, 295, 589, 614, 616], "pruning_frequ": [172, 176, 179, 180, 589, 614], "target_sparsity_ratio": [172, 295], "show": [172, 366, 550, 571, 576, 578, 589, 595, 610, 621, 624, 625], "basicprun": 172, "arrang": [172, 196, 197, 200, 240, 241, 244, 574, 614], "proce": 172, "regul": 172, "patternlockprun": [172, 283, 295], "parent": [172, 174, 289, 295, 297, 622], "blockmaskprun": 172, "grad": 172, "retrainfreeprun": 172, "pruner_class": 172, "rearrang": 172, "fast": [172, 179, 180, 555, 615], "retrain": [172, 577, 614], "effect": [172, 555, 556, 615], "2204": 172, "09656": 172, "progressiveprun": 172, "interpol": [172, 212, 254, 588, 614, 623], "fine": [172, 195, 239, 574, 595, 614, 615, 617], "grain": [172, 614, 615, 624], "improv": [172, 551, 555, 589, 592, 609, 610, 614, 615, 617, 618, 624, 627], "interv": [172, 614], "regular": [173, 263, 294, 316], "register_reg": 173, "regulariz": 173, "get_reg_typ": 173, "get_reg": 173, "basereg": 173, "grouplasso": 173, "coeff": 173, "group": [173, 280, 438, 585, 614, 622, 623, 624, 627], "lasso": [173, 280, 585, 614], "select": [173, 180, 195, 239, 552, 553, 571, 585, 586, 609, 614, 617, 622, 624], "reg_term": 173, "coeffient": 173, "register_schedul": [174, 297], "get_schedul": [174, 297], "pruningschedul": 174, "gradual": [174, 297, 614], "oneshotschedul": [174, 297], "iterativeschedul": [174, 297], "get_sparsity_ratio": 175, "elementwise_over_matmul_gemm_conv": 175, "elementwise_over_al": 175, "blockwise_over_matmul_gemm_conv": 175, "check_config": [175, 294], "prune_config": [175, 294], "everyth": [175, 294, 597], "reset_none_to_default": 175, "undefin": [175, 294], "update_param": 175, "process_weight_config": 175, "global_config": [175, 279, 280, 282, 283, 284], "local_config": [175, 179, 180, 279, 280, 282, 283, 284], "default_config": 175, "pruners_info": 175, "process_yaml_config": 175, "check_key_valid": 175, "template_config": 175, "user_config": 175, "process_and_check_config": [175, 294], "process_config": [175, 294], "parse_last_linear": 175, "often": [175, 573, 576, 612, 614], "act": [175, 193, 237, 550], "might": [175, 552, 571, 624], "caus": [175, 593, 614], "drop": [175, 266, 294, 319, 589, 590, 603, 614, 627], "parse_to_prun": [175, 294], "keep": [175, 294, 340, 552, 556, 608, 609, 619], "generate_pruner_config": 175, "dotdict": [175, 176, 180, 334, 366], "prunerv2": 176, "pruning_typ": [176, 179, 180, 589, 614], "pruning_scop": [176, 179, 180, 589, 614], "sparsity_decay_typ": [176, 179, 180, 589, 614], "pruning_op_typ": [176, 179, 180, 589, 614], "reg_typ": 176, "criterion_reduce_typ": 176, "resume_from_pruned_checkpoint": 176, "similiar": 176, "cfg_fname": 176, "parser": [176, 315, 379, 384, 502, 510, 540], "quantization_conf": 176, "pruning_conf": 176, "graph_optimization_conf": [176, 261], "mixedprecision_conf": 176, "benchmark_conf": 176, "nasconfig": [176, 180, 274, 276, 553], "approach": [176, 179, 180, 273, 274, 276, 529, 552, 553, 555, 573, 574, 576, 585, 589, 597, 609, 615, 616, 624, 626], "search_spac": [176, 180, 273, 276, 277, 278], "search_algorithm": [176, 180, 262, 275, 315, 553], "na": [176, 180, 262, 315, 328, 585], "procedur": [176, 553, 614], "deep_get": [177, 334], "dot": [177, 521, 590, 617], "eg": [177, 197, 241, 574, 616], "person": [177, 550, 615], "john": 177, "deep": [177, 555, 556, 573, 585, 586, 589, 590, 592, 594, 597, 598, 600, 603, 609, 615, 617, 624, 625, 627], "deep_set": [177, 334], "sex": [177, 550], "male": 177, "instead": [177, 180, 194, 238, 366, 595, 597, 600, 614], "notat": [177, 180, 366], "pythonic_config": 178, "random_se": [179, 180, 302, 339, 589, 626], "1978": [179, 180], "workspac": [179, 180, 365, 366, 447, 520, 531, 591], "default_workspac": [179, 180], "resume_from": [179, 180, 366], "tensorboard": [179, 180, 359, 366, 556, 589], "set_random_se": [179, 180, 366], "set_workspac": [179, 180, 366], "set_resume_from": [179, 180, 366], "set_tensorboard": [179, 180, 366], "directori": [179, 180, 196, 197, 240, 241, 332, 362, 365, 366, 430, 521, 574, 578, 581, 602, 604, 606, 607, 622], "histori": [179, 180, 365, 366, 406, 419, 472, 490, 540, 609, 624], "nc_workspac": [179, 180], "datetim": [179, 180], "now": [179, 180, 212, 254, 552, 553, 574, 578, 600, 616, 623, 624], "strftime": [179, 180], "d_": [179, 180], "h": [179, 180, 212, 254, 578, 623], "resum": [179, 180, 183, 184, 227, 228, 303, 306, 307, 308, 336, 339, 340, 341, 342, 344, 345, 346, 347], "wa": [179, 180, 556, 571, 589, 615, 624], "flag": [179, 180, 264, 317], "visual": [179, 180, 555, 600, 609, 620, 622, 624, 625], "displai": [179, 180, 311, 312, 350, 351, 366, 437, 609], "workspace_path": [179, 180, 506, 521], "accuracycriterion": [179, 180, 489, 589, 624], "higher_is_bett": [179, 180, 323, 335, 588, 624, 626], "rel": [179, 180, 334, 589, 616, 624, 626, 627], "tolerable_loss": [179, 180, 589, 624], "01": [179, 180, 589, 613, 616, 624, 626, 627], "higher": [179, 180, 183, 184, 227, 228, 277, 324, 335, 356, 552, 576, 580, 588, 614, 617, 620], "accuracy_criterion": [179, 180, 334, 589, 611, 616, 624, 626], "warmup": [179, 180, 572, 589, 616], "inter_num_of_thread": [179, 180, 589, 616], "intra_num_of_thread": [179, 180, 589, 616], "benchmark": [179, 180, 215, 262, 299, 315, 334, 366, 387, 394, 407, 418, 419, 442, 502, 503, 513, 519, 536, 541, 555, 561, 591, 592, 596, 600, 603, 609, 624, 625, 626, 627], "empti": [179, 180, 595], "onnxrt_trt_ep": [179, 180, 617], "onnxrt_cuda_ep": [179, 180, 590, 617], "inter": [179, 180, 193, 197, 237, 241], "intra": [179, 180], "quantizationconfig": 179, "post_training_static_qu": [179, 573, 574, 589, 616, 624], "calibration_sampling_s": [179, 180, 589], "op_type_dict": [179, 180, 616, 617, 624], "op_name_dict": [179, 180, 589, 617, 624], "strategy_kwarg": [179, 180, 620, 624], "timeout": [179, 180, 589, 616, 624, 626], "max_trial": [179, 180, 589, 624], "quant_level": [179, 180, 624], "use_distributed_tun": [179, 180, 624], "posttrainingquantconfig": [179, 180, 335, 552, 555, 573, 583, 589, 591, 617, 618, 620, 621, 624], "quantizationawaretrainingconfig": [179, 180, 356, 552, 577, 589, 617, 618, 624], "requir": [179, 180, 186, 299, 332, 368, 370, 382, 437, 443, 468, 475, 476, 477, 478, 480, 481, 482, 484, 487, 488, 493, 498, 502, 552, 556, 571, 572, 573, 577, 578, 582, 589, 590, 591, 593, 603, 609, 613, 614, 617, 619, 620, 621, 622, 624, 626], "cv": [179, 180, 614], "object_detect": [179, 180, 266, 319], "nlp": [179, 180, 296, 597, 614, 617], "recommendation_system": [179, 180], "explicitli": [179, 180, 584, 614], "overrid": [179, 180, 366], "quantiztaion": [179, 180], "smooth_quant_arg": [179, 180, 617, 621], "gemm_to_matmul": [179, 180, 617], "graph_optimization_level": [179, 180, 616, 617], "disable_al": [179, 180, 616], "enable_bas": [179, 180], "enable_extend": [179, 180], "enable_al": [179, 180], "first_conv_or_matmul_quant": [179, 180, 617], "last_conv_or_matmul_quant": [179, 180, 617], "pre_post_process_quant": [179, 180, 617], "preprocess": [179, 180, 195, 212, 239, 254, 359, 578, 623], "postprocess": [179, 180, 206, 209, 212, 216, 254, 262, 315, 323, 335, 359, 524, 556, 589, 622, 623], "vaild": [179, 180], "dedic": [179, 180], "quant_format": [179, 180, 259, 580], "constraint": [179, 180, 261, 298, 589, 614, 620, 624, 626], "reduc": [179, 180, 556, 577, 589, 590, 609, 610, 614, 615, 617, 618, 621, 624, 626], "layer1": [179, 180, 589, 614, 617], "conv1": [179, 180, 617, 626], "tuning_strategi": [179, 180], "guarante": [179, 180, 589], "models": [179, 180, 334, 589, 611, 616], "footprint": [179, 180, 261, 285, 290, 298, 334, 577, 589, 611, 614, 616], "earli": [179, 180, 589, 617, 624, 626], "stop": [179, 180, 589, 624, 625, 626], "field": [179, 180, 197, 241, 266, 319, 552, 556, 571, 578, 589, 620, 624, 626], "exit": [179, 180, 301, 336, 338, 571, 589, 590, 626], "bit": [179, 180, 577, 590, 615, 617, 621], "excluded_precis": [179, 180, 618], "exclud": [179, 180, 556, 590, 618], "conserv": [179, 180, 315, 343], "weightpruningconfig": [179, 180, 224, 589, 612, 614], "pruning_config": [179, 180, 589], "9": [179, 180, 552, 586, 589, 614, 616, 621, 624, 626], "98": [179, 180, 589, 614, 616, 627], "exp": [179, 180, 589, 614], "link": [179, 180, 195, 239, 323, 335, 571, 574, 602, 606, 609, 627], "90": [179, 180, 626, 627], "magnitude_progress": [179, 180], "snip_progress": [179, 180], "snip_momentum_progress": [179, 180], "pattern_lock": [179, 180, 262, 281, 315], "most": [179, 180, 270, 323, 571, 589, 590, 614, 617, 621, 624], "feasibl": [179, 180], "situat": [179, 180, 578, 614], "unstructur": [179, 180, 289, 585, 614, 627], "8x1": [179, 180], "channelx1": [179, 180, 614], "1xchannel": [179, 180, 614], "itrex": [179, 180], "start": [179, 180, 212, 254, 266, 319, 340, 586, 623, 624, 625, 628], "togeth": [179, 180, 212, 254, 576, 586, 596, 615, 622, 623], "sort": [179, 180, 305, 344, 430, 624], "sinc": [179, 180, 261, 263, 285, 290, 298, 316, 576, 580, 586, 588, 603, 609, 612], "lead": [179, 180, 521, 576, 589, 590, 614, 621], "increas": [179, 180, 575, 585, 592, 609, 624], "cube": [179, 180, 614], "6": [179, 180, 555, 571, 582, 617, 621, 624, 627], "update_config": [179, 180], "10": [179, 180, 197, 241, 302, 339, 555, 571, 572, 574, 586, 589, 614, 616, 623, 624, 627], "knowledgedistillationlossconfig": [179, 180, 576, 577, 589, 612], "hyperparamet": [179, 180, 311, 620, 621, 624], "entropi": [179, 180, 624], "length": [179, 180, 195, 212, 239, 254, 266, 319, 555, 574, 588, 615, 617, 623], "groundtruth": [179, 180, 266, 319], "label": [179, 180, 183, 184, 195, 197, 198, 199, 200, 203, 208, 212, 217, 227, 228, 239, 241, 242, 243, 244, 247, 251, 254, 263, 265, 270, 316, 318, 323, 324, 335, 356, 438, 552, 573, 574, 588, 589, 617, 623], "tpye": [179, 180], "sum": [179, 180, 270, 323, 576], "distillationconfig": [179, 180, 356, 576, 577, 589, 612], "prepare_compress": [179, 180, 356, 552, 576, 577, 589, 612, 614, 617], "criterion_conf": [179, 180], "d_conf": [179, 180, 577, 589, 612], "compression_manag": [179, 180, 356, 552, 576, 577, 589, 612, 614, 617], "sgd": [179, 180, 219, 576, 589, 616, 626], "learning_r": [179, 180, 589, 616, 626], "callabl": [179, 180, 268, 321, 356, 517, 521, 537, 538], "featur": [179, 180, 195, 196, 208, 212, 239, 240, 251, 254, 551, 555, 572, 573, 575, 576, 589, 590, 591, 592, 596, 597, 600, 609, 614, 615, 619, 623], "altern": [179, 180, 335], "distil_loss": [179, 180, 589], "crossentropyloss": [179, 180, 214, 576, 589], "lr": [179, 180, 576, 578, 589], "tuningcriterion": [180, 589, 611, 620, 624], "tuning_criterion": [180, 589, 611, 620, 624], "dynam": [180, 185, 229, 259, 312, 351, 374, 556, 573, 576, 585, 589, 592, 597, 598, 599, 600, 603, 609, 615, 624, 627], "ptq": [180, 335, 552, 578, 585, 589, 617, 621, 622, 624], "tri": [180, 624], "meet": [180, 186, 299, 301, 336, 338, 552, 580, 611, 615, 616, 617, 622, 624], "bayesian": [180, 262, 278, 304, 315, 343, 553, 616], "mse_v2": [180, 262, 304, 315, 343], "hawq_v2": [180, 315, 343], "exhaust": [180, 262, 278, 304, 315, 343, 616], "docstr": [180, 354], "copi": [180, 294, 366], "deepcopi": 180, "model_origin": [180, 335, 618], "qat_op_name_dict": 180, "intermediatelayersknowledgedistillationlossconfig": [180, 576], "relationship": 180, "student_layer_nam": 180, "student_layer_output_process": 180, "teacher_layer_nam": 180, "teacher_layer_output_process": 180, "desir": [180, 208, 212, 251, 254, 623], "either": [180, 266, 319, 593, 597, 612, 616, 617], "serv": [180, 332, 538], "numer": [180, 270, 323, 590, 615, 617], "abbrevi": 180, "layer_nam": 180, "l1": 180, "selfknowledgedistillationlossconfig": [180, 576, 589], "student1_layer_name1": 180, "teacher_layer_name1": 180, "student2_layer_name1": 180, "student1_layer_name2": 180, "teacher_layer_name2": 180, "student2_layer_name2": 180, "soft": 180, "l2": [180, 614], "hard": [180, 573], "resblock": 180, "deepst": 180, "fc": 180, "02": [180, 621, 627], "mixedprecisionconfig": [180, 324, 354, 589, 590], "mixedprecis": [180, 271, 479, 527, 589], "fp16": [180, 312, 351, 590, 617], "won": [180, 617], "work": [180, 261, 298, 554, 573, 576, 604, 607, 614, 618, 619, 621, 622], "mix_precis": [180, 315, 354, 589, 590], "converted_model": [180, 324, 589, 590], "exportconfig": 180, "dynamic_ax": [180, 259, 580], "qlinear": [180, 197, 204, 241, 248, 270, 323, 556, 580, 599, 627], "ax": [180, 259], "onnxqlinear2qdqconfig": 180, "onnxqlinear2qdq": 180, "torch2onnxconfig": [180, 580], "qdq_op_fp32_bia": [180, 259, 580], "torch2onnx": [180, 256, 262, 315], "qdq_op_int32_bia": [180, 259, 580], "qdq_op_fp32_bias_qdq": [180, 259, 580], "resnet50": [180, 555, 578, 583, 592, 596, 614, 617, 620, 627], "int8_onnx_config": [180, 580], "randn": [180, 580], "224": [180, 208, 251, 555, 573, 574, 578, 580, 583, 589, 592, 623, 626, 627], "batch_siz": [180, 185, 187, 191, 193, 194, 195, 196, 215, 229, 231, 235, 237, 238, 239, 240, 259, 553, 573, 574, 578, 580, 584, 589, 592, 617], "tf2onnxconfig": 180, "tf2onnx": [180, 256, 262, 315], "keyword": 180, "argument": [180, 354, 368, 476, 480, 485, 488, 494, 553], "output_graph": [180, 476, 480, 485, 488], "42": [180, 278, 613, 627], "dyna": [180, 262, 275, 315, 553, 585, 616], "sigopt": [181, 182, 225, 226, 262, 315, 615], "tpe": [181, 182, 225, 226, 262, 315], "sigopttunestrategi": [183, 227], "q_dataload": [183, 184, 227, 228, 302, 303, 305, 306, 307, 308, 336, 339, 340, 341, 342, 344, 345, 346, 347, 584, 624], "eval_func": [183, 184, 227, 228, 299, 302, 303, 305, 306, 307, 308, 324, 335, 336, 339, 340, 341, 342, 344, 345, 346, 347, 354, 356, 552, 573, 574, 576, 577, 578, 589, 617, 618, 624, 626], "eval_metr": [183, 184, 324, 335, 336, 339, 340, 341, 342, 344, 345, 346, 347, 356, 617], "q_hook": [183, 184, 227, 228, 302, 303, 305, 306, 307, 308, 336, 339, 340, 341, 342, 344, 345, 346, 347], "hpo": [183, 227], "mandatori": [183, 184, 227, 228, 335, 589, 626], "yield": [183, 184, 193, 215, 227, 228, 237, 302, 324, 335, 339, 354, 356, 573, 617, 624], "_": [183, 184, 227, 228, 335, 552, 553, 556, 571, 576, 578, 582, 588, 589, 590, 591, 592, 598, 602, 604, 606, 607, 611, 614, 617, 619, 620, 621, 622, 624, 626], "taken": [183, 184, 227, 228, 324, 335, 356, 617], "reserv": [183, 184, 227, 228], "abl": [183, 184, 227, 228, 324, 335, 356, 600, 609, 617], "tuner": [183, 184, 227, 228, 261, 298, 324, 335, 356, 617], "scalar": [183, 184, 227, 228, 324, 335, 356, 588, 617], "pseudo": [183, 184, 227, 228, 335, 356, 622], "someth": [183, 184, 197, 227, 228, 241, 335, 356], "fefin": [184, 228], "tpetunestrategi": [184, 228], "basedatalod": [185, 229], "basedataload": [185, 190, 192, 229, 234, 236], "last_batch": [185, 187, 191, 194, 215, 229, 231, 235, 238], "rollov": [185, 187, 191, 194, 215, 229, 231, 235, 238], "collate_fn": [185, 187, 188, 191, 215, 229, 231, 232, 235, 574], "sampler": [185, 187, 189, 191, 215, 229, 231, 233, 235, 250, 262, 311, 350, 578], "batch_sampl": [185, 187, 191, 215, 229, 231, 235], "num_work": [185, 187, 191, 215, 229, 231, 235, 589, 617], "pin_memori": [185, 187, 191, 215, 229, 231, 235], "shuffl": [185, 187, 191, 215, 229, 231, 235, 589, 617], "_generate_dataload": [185, 229], "check_dataload": 186, "default_col": [187, 231], "outer": [187, 231], "defaultdataload": [187, 194, 231, 238], "definit": [188, 193, 232, 237, 435, 448, 457, 506, 537], "style": [188, 202, 232, 246, 354, 551, 574, 584], "drop_last": [188, 193, 232, 237], "iterablefetch": [188, 232], "indexfetch": [188, 232], "base_dataload": [189, 233, 250, 262], "default_dataload": [189, 233, 250, 262], "fetcher": [189, 233, 250, 262], "mxnet_dataload": [189, 233, 250, 262], "onnxrt_dataload": [189, 233, 250, 262], "pytorch_dataload": [189, 233, 250, 262], "tensorflow_dataload": [189, 233, 250, 262], "mxnetdataload": [190, 234], "onnxrtbertdataload": [191, 235], "varient": [191, 235], "onnxrtdataload": [191, 235], "pytorchdataload": [192, 236], "data_sourc": [193, 237, 359], "__iter__": [193, 197, 237, 241, 573, 574, 589], "matter": [193, 237, 618], "iterablesampl": [193, 237], "squential": [193, 237], "your": [193, 195, 237, 239, 551, 571, 574, 578, 580, 586, 587, 589, 592, 595, 596, 597, 602, 603, 604, 606, 607, 609, 614, 620, 622, 624], "clear": [193, 237, 556, 582, 588, 589], "iterabledataset": [193, 197, 237, 241], "try": [193, 237, 552, 580, 614, 617, 621, 624], "indexdataset": [193, 237], "__getitem__": [193, 197, 212, 237, 241, 254, 574, 589], "__len__": [193, 197, 237, 241, 574], "retriev": [193, 237, 515], "sequentialsampl": [193, 237], "sequenti": [193, 237, 299, 301, 336, 338, 624], "batchsampl": [193, 237], "tfdatadataload": [194, 238], "tensorflow1": [194, 238], "coupl": [194, 238], "satisfi": [194, 238, 586], "usag": [194, 238, 266, 272, 299, 319, 354, 521, 571, 574, 578, 579, 588, 592, 600, 611, 616, 623], "tf1": [194, 238, 591], "although": [194, 238, 620], "tensorflowbertdataload": [194, 238], "tensorflowmodelzoobertdataload": [194, 238], "zoo": [194, 212, 238, 254, 555, 579, 583, 627], "tensorflowdataload": [194, 238], "pytorchbertdataset": [195, 239], "model_typ": [195, 239, 451, 574], "construct": [195, 198, 199, 202, 210, 215, 217, 218, 220, 239, 242, 243, 246, 323, 328, 332, 359, 550, 574, 578, 614, 624], "tensordataset": [195, 239, 574], "repo": [195, 239, 549, 574, 579, 602, 604, 606, 607, 628], "easi": [195, 239, 298, 571, 573, 580, 589, 615, 617, 620], "load": [195, 211, 212, 239, 253, 254, 324, 332, 335, 365, 366, 494, 521, 573, 602, 606, 610, 616, 617, 621], "squad": [195, 212, 239, 254, 267, 268, 270, 320, 321, 323, 574, 588, 614, 623, 627], "distilbert": [195, 239, 555, 574, 615, 627], "xlnet": [195, 239, 574], "xlm": [195, 239, 574, 627], "101": [195, 239, 270, 323, 588, 621, 627], "2043": [195, 239], "2001": [195, 239], "onnxrtbertdataset": [195, 239], "data_dir": [195, 239, 574], "model_name_or_path": [195, 239, 574, 589, 597, 598], "max_seq_length": [195, 212, 239, 254, 574, 623], "do_lower_cas": [195, 211, 212, 239, 253, 254, 574, 623], "mrpc": [195, 239, 270, 323, 574, 588, 597, 614, 624, 627], "dynamic_length": [195, 239, 574], "shortcut": [195, 239, 574], "token": [195, 206, 209, 212, 239, 250, 252, 254, 262, 263, 264, 315, 316, 317, 362, 538, 571, 574, 588, 589, 620, 621, 623, 624], "longer": [195, 212, 239, 254, 574, 623], "truncat": [195, 212, 239, 254, 574, 623], "shorter": [195, 212, 239, 254, 574, 623], "lowercas": [195, 239, 574], "choic": [195, 239, 556, 571, 574, 588, 621], "qqp": [195, 239, 574, 588, 627], "qnli": [195, 239, 574, 588, 627], "rte": [195, 239, 574, 588, 627], "st": [195, 239, 574, 588], "cola": [195, 239, 574, 588, 627], "mnli": [195, 239, 574, 588, 627], "wnli": [195, 239, 574, 588, 627], "mobilebert": [195, 239, 574, 576, 627], "roberta": [195, 239, 574, 627], "uncas": [195, 212, 239, 254, 574, 623, 627], "load_and_cache_exampl": [195, 239], "cach": [195, 239, 451, 538, 581, 617], "convert_examples_to_featur": [195, 212, 239, 254], "max_length": [195, 239], "label_list": [195, 239, 270, 323], "output_mod": [195, 239], "classif": [195, 212, 239, 254, 270, 296, 323, 576, 580, 583, 588, 598, 614, 615], "pad_token": [195, 239], "pad_token_segment_id": [195, 239], "mask_padding_with_zero": [195, 239], "inputfeatur": [195, 212, 239, 254], "properti": [195, 239, 438, 587, 613], "input_id": [195, 212, 239, 254, 589], "vocabulari": [195, 211, 212, 239, 253, 254, 623], "attention_mask": [195, 239, 589], "usual": [195, 239, 576, 612, 614, 617, 621], "NOT": [195, 239, 582, 586], "token_type_id": [195, 239, 589], "segment": [195, 239, 264, 266, 317, 319], "portion": [195, 239], "problem": [195, 239, 270, 323, 588, 590, 610], "regress": [195, 239], "seq_length": [195, 239], "tensorflowbertdataset": [195, 239], "label_fil": [195, 212, 239, 254, 574, 623], "tfrecord": [195, 196, 197, 239, 240, 241, 574], "guid": [195, 239, 552, 555, 574, 576, 586, 592, 600, 609, 628], "parsedecodebert": [195, 239], "tensorflowmodelzoobertdataset": [195, 196, 239, 240], "num_cor": [195, 196, 200, 239, 240, 244, 574], "28": [195, 196, 200, 239, 240, 244, 574, 627], "coco": [196, 203, 207, 240, 247, 266, 270, 319, 323, 588, 614], "parsedecodecoco": [196, 240], "cocorecorddataset": [196, 240], "interleav": [196, 240, 574], "parallel": [196, 240, 574, 589, 624], "cocoraw": [196, 240, 573, 574], "img_dir": [196, 240, 574], "val2017": [196, 240, 574], "anno_dir": [196, 240, 574], "annot": [196, 240, 266, 319, 354, 574, 588, 614], "instances_val2017": [196, 240, 574], "jpg": [196, 200, 202, 240, 244, 246, 574], "imag": [196, 197, 200, 202, 208, 212, 240, 241, 244, 246, 251, 254, 266, 319, 571, 574, 578, 580, 614, 616, 621, 622, 623, 627], "coconpi": [196, 240, 574], "npy_dir": [196, 240, 574], "npy": [196, 240, 574], "tensorflowdataset": [197, 241], "pytorchdataset": [197, 241], "mxnetdataset": [197, 241], "onnxrtqldataset": [197, 241], "onnxrtitdataset": [197, 241], "IT": [197, 204, 241, 248, 615], "pytorchmxnetwrapdataset": [197, 241], "datafunc": [197, 241], "pytorchmxnetwrapfunct": [197, 212, 241, 254], "framework_dataset": [197, 241], "convent": [197, 241, 266, 319, 576], "imageclassifi": [197, 241], "choos": [197, 241, 571, 585, 586, 597, 619, 621, 624, 626], "tensorflow_itex": [197, 200, 202, 204, 241, 244, 246, 248, 616], "onnxrt_qdq": [197, 204, 241, 248, 616], "onnxrt_qlinearop": [197, 204, 212, 241, 248, 254, 616], "onnxrt_integerop": [197, 204, 212, 241, 248, 254, 616], "pytorch_ipex": [197, 204, 241, 248, 589, 616, 626], "pytorch_fx": [197, 204, 241, 248, 589, 616], "dataset_registri": [197, 241], "dataset_typ": [197, 241], "dataset_format": [197, 241], "data_format": [197, 208, 241, 251], "raw_imag": [197, 241], "overwrit": [197, 241, 602, 606], "download_url": [197, 241], "filenam": [197, 241, 366, 490, 514, 521, 574], "md5": [197, 241], "download": [197, 241, 442, 465, 466, 468, 469, 502, 571, 574, 586, 619], "address": [197, 241, 538, 550, 571, 590, 615], "gen_bar_updat": [197, 241], "bar": [197, 241, 555, 571, 609, 615], "check_integr": [197, 241], "fpath": [197, 241], "checksum": [197, 241], "calculate_md5": [197, 241], "chunk_siz": [197, 241], "cifar10": [197, 241, 574], "cifar100": [197, 241, 574], "otherwis": [197, 212, 241, 254, 366, 550, 574, 604, 607, 616, 623], "www": [197, 241, 574, 627], "toronto": [197, 241, 574], "kriz": [197, 241, 574], "cifar": [197, 241, 574, 627], "tar": [197, 241, 574, 604, 607], "gz": [197, 241, 574, 604, 607], "manual": [197, 241, 574, 592, 598, 600, 603], "subset": [197, 200, 241, 244, 574], "internet": [197, 241, 571, 574], "put": [197, 241, 574, 576], "again": [197, 241, 574, 618], "pytorchcifar10": [197, 241], "mxnetcifar10": [197, 241], "tensorflowcifar10": [197, 241], "pytorchcifar100": [197, 241], "mxnetcifar100": [197, 241], "tensorflowcifar100": [197, 241], "mnist": [197, 241, 574, 578], "modifi": [197, 224, 241, 500, 552, 571, 578, 582, 614, 626], "nation": [197, 241, 550], "institut": [197, 241], "standard": [197, 212, 241, 254, 580, 588, 623, 624], "technologi": [197, 241, 589, 613], "fashionmnist": [197, 241, 574], "npz": [197, 241, 574], "idx1": [197, 241, 574], "ubyt": [197, 241, 574], "idx3": [197, 241, 574], "t10k": [197, 241, 574], "pytorchmnist": [197, 241], "mxnetmnist": [197, 241], "tensorflowmnist": [197, 241], "pytorchfashionmnist": [197, 241], "mxnetfashionmnist": [197, 241], "tensorflowfashionmnist": [197, 241], "imagefold": [197, 241, 574, 578, 589], "expect": [197, 241, 369, 491, 550, 551, 581, 609, 617, 624], "subfold": [197, 241], "belong": [197, 241, 259, 328, 617], "class_1": [197, 241, 574], "xxx": [197, 241, 551, 574, 589], "png": [197, 241, 574], "xxy": [197, 241, 574], "xxz": [197, 241, 574], "class_n": [197, 241, 574], "123": [197, 241, 574, 623], "nsdf3": [197, 241, 574], "asd932_": [197, 241, 574], "categori": [197, 241, 265, 318, 572, 574, 599], "mxnetimagefold": [197, 241], "tensorflowtfrecorddataset": [197, 241], "tensorflowimagerecord": [197, 241], "imagenet": [197, 200, 208, 241, 244, 251, 553, 571, 589, 598, 614, 622, 623, 626, 627], "000": [197, 241, 555, 574], "001": [197, 241, 574, 578, 621, 626], "099": [197, 241, 574], "tensorflowvocrecord": [197, 241], "pascal": [197, 241], "voc": [197, 241, 270, 323], "2012": [197, 241], "00000": [197, 241], "00004": [197, 241], "00001": [197, 241], "00003": [197, 241], "dummydataset": [198, 199, 242, 243], "127": [198, 199, 242, 243, 574, 617, 621], "float32": [198, 199, 212, 242, 243, 254, 266, 319, 556, 572, 574, 589, 617, 621, 623], "rang": [198, 199, 212, 242, 243, 254, 354, 356, 555, 556, 574, 576, 577, 578, 589, 612, 614, 617, 621, 623], "stand_norm": [198, 199, 242, 243, 574], "dummy_v2": [199, 243, 573, 574], "sparse_dummy_v2": [199, 243, 574], "label_shap": [199, 243, 574], "sparsedummydataset": [199, 243], "dense_shap": [199, 243, 574], "sparse_ratio": [199, 243, 574], "imagenetraw": [200, 244, 574], "data_path": [200, 244, 574], "image_list": [200, 244, 574], "img1": [200, 244, 574], "img2": [200, 244, 574], "imgx": [200, 244, 574], "val_map": [200, 244, 574], "txt": [200, 244, 571, 574, 586], "pytorchimagenetraw": [200, 244], "mxnetimagenetraw": [200, 244], "tensorflowimagenetraw": [200, 244], "inteltensorflow": [200, 202, 244, 246, 586], "tensorflowimagenetdataset": [200, 244], "onnxrtimagenetdataset": [200, 244], "bert_dataset": [201, 206, 245, 250, 262, 315], "coco_dataset": [201, 206, 245, 250, 262, 315], "dummy_dataset": [201, 206, 245, 250, 262, 315], "dummy_dataset_v2": [201, 206, 245, 250, 262, 315], "imagenet_dataset": [201, 206, 245, 250, 262, 315], "style_transfer_dataset": [201, 206, 245, 250, 262, 315], "styletransferdataset": [202, 246], "content_fold": [202, 246, 574], "style_fold": [202, 246, 574], "crop_ratio": [202, 246, 574], "resize_shap": [202, 246, 574], "256": [202, 208, 246, 251, 574, 578, 589, 623], "image_format": [202, 246, 574], "holder": [202, 246, 574], "labelbalancecocorecordfilt": [203, 247], "balanc": [203, 247, 613, 621], "labelbalancecocorawfilt": [203, 247], "tensorflowfilt": [204, 248], "onnxrtqlfilt": [204, 248], "onnxrtitfilt": [204, 248], "pytorchfilt": [204, 248], "mxnetfilt": [204, 248], "filter_registri": [204, 248], "filter_typ": [204, 248], "__call__": [204, 248], "coco_filt": [205, 206, 249, 250, 262, 315], "imagenet_transform": [206, 209, 250, 252, 262, 315], "parsedecodecocotransform": 207, "decod": [207, 208, 251, 263, 316, 588, 623], "quantizedinput": [208, 251, 623], "labelshift": [208, 251, 623], "label_shift": [208, 251, 623], "parsedecodeimagenet": [208, 251, 623], "proto": [208, 212, 251, 254, 623], "parsedecodeimagenettransform": [208, 251], "tensorflowresizecropimagenettransform": [208, 251], "random_crop": [208, 251, 623], "resize_sid": [208, 251, 623], "resize_method": [208, 251], "bilinear": [208, 212, 251, 254, 623], "random_flip_left_right": [208, 251, 623], "mean_valu": [208, 251, 623], "channels_last": [208, 251, 592], "subpixel": [208, 251], "rgb": [208, 251], "seri": [208, 251, 555, 586, 589, 623], "applic": [208, 251, 505, 536, 538, 571, 580, 592, 609, 615, 621, 622, 623], "crop": [208, 212, 251, 254, 574, 623], "flip": [208, 212, 251, 254, 623], "left": [208, 212, 251, 254, 571, 603, 609, 621, 623], "right": [208, 251, 266, 319, 550, 552, 571, 609, 621, 623], "std": [208, 212, 251, 254, 589, 623], "bilinearimagenettransform": [208, 251], "central_fract": [208, 251, 623], "875": [208, 251, 623], "fraction": [208, 251, 623], "onnxbilinearimagenettransform": [208, 251], "onnxresizecropimagenettransform": [208, 251], "std_valu": [208, 251], "229": [208, 251, 589, 627], "225": [208, 251, 589, 627], "resizewithaspectratio": [208, 251], "87": [208, 251, 627], "inter_pol": [208, 251], "cv2": [208, 251], "inter_area": [208, 251], "aspect": [208, 212, 251, 254, 623], "postprocess_cl": [210, 220, 589], "user_postprocess": [210, 220], "convert_to_unicod": [211, 253], "unicod": [211, 253], "assum": [211, 253, 266, 277, 319, 556, 582, 609], "utf": [211, 253], "load_vocab": [211, 253], "vocab_fil": [211, 212, 253, 254, 623], "convert_by_vocab": [211, 253], "vocab": [211, 253], "whitespace_token": [211, 253], "whitespac": [211, 253, 268, 321], "clean": [211, 253, 407, 551, 589], "piec": [211, 253, 263, 316, 580, 588], "fulltoken": [211, 253], "tokenzi": [211, 253], "basictoken": [211, 253], "punctuat": [211, 253, 263, 268, 316, 321], "lower": [211, 212, 253, 254, 268, 321, 340, 521, 577, 614, 615, 617, 621, 623, 624], "wordpiecetoken": [211, 253], "unk_token": [211, 253], "unk": [211, 253], "max_input_chars_per_word": [211, 253], "200": [211, 253, 552, 624], "wordpiec": [211, 212, 253, 254, 623], "concat_gener": [212, 254], "inc": [212, 254, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 550, 555, 592, 599, 609, 615, 616, 619], "tensorflowtransform": [212, 254], "mxnettransform": [212, 254], "pytorchtransform": [212, 254], "onnxrtqltransform": [212, 254], "onnxrtittransform": [212, 254], "transform_registri": [212, 254], "transform_typ": [212, 254], "basetransform": [212, 254], "tensorflowwrapfunct": [212, 254], "transform_func": [212, 254], "pytorchmxnettransform": [212, 254], "get_torchvision_map": [212, 254], "torchvis": [212, 254, 571, 579, 583, 592, 598], "composetransform": [212, 254], "transform_list": [212, 254, 623], "compos": [212, 254, 359, 623], "croptoboundingbox": [212, 254, 623], "offset_height": [212, 254, 623], "offset_width": [212, 254, 623], "target_height": [212, 254, 623], "target_width": [212, 254, 623], "box": [212, 254, 266, 270, 319, 323, 552, 571, 588, 592, 603, 609, 622, 623, 624], "coordin": [212, 254, 302, 339, 623, 624], "top": [212, 254, 261, 270, 285, 290, 298, 323, 588, 609, 623], "corner": [212, 254, 556, 623], "horizont": [212, 254, 623], "mxnetcroptoboundingbox": [212, 254], "onnxrtcroptoboundingbox": [212, 254], "tensorflowcroptoboundingbox": [212, 254], "resizewithratio": [212, 254, 623], "min_dim": [212, 254, 623], "800": [212, 254, 623], "max_dim": [212, 254, 623], "1365": [212, 254, 623, 627], "constant_valu": [212, 254], "longest": [212, 254, 623], "side": [212, 254, 571, 574, 603, 623], "doesn": [212, 254, 556, 578, 589, 610, 626], "exce": [212, 254, 623], "tensorflowresizewithratio": [212, 254], "perm": [212, 254, 623], "permut": [212, 254, 623], "tensorflowtranspos": [212, 254], "mxnettranspos": [212, 254], "pytorchtranspos": [212, 254], "randomverticalflip": [212, 254, 623], "randomli": [212, 254, 278, 302, 339, 553, 621, 623, 624], "tensorflowrandomverticalflip": [212, 254], "randomhorizontalflip": [212, 254, 589, 623], "tensorflowrandomhorizontalflip": [212, 254], "toarrai": [212, 254, 623], "pil": [212, 254, 623], "casttftransform": [212, 254], "castonnxtransform": [212, 254], "castpytorchtransform": [212, 254], "centercroptftransform": [212, 254], "center": [212, 254, 554, 555, 586, 623, 624], "paddedcentercroptransform": [212, 254], "crop_pad": [212, 254], "resizetftransform": [212, 254], "nearest": [212, 254, 623], "bicub": [212, 254, 623], "resizepytorchtransform": [212, 254], "randomcroptftransform": [212, 254], "randomresizedcroppytorchtransform": [212, 254], "randomresizedcropmxnettransform": [212, 254], "randomresizedcroptftransform": [212, 254], "normalizetftransform": [212, 254], "rescal": [212, 254, 623], "deviat": [212, 254, 623], "broadcast": [212, 254, 578, 623], "rescalekeraspretraintransform": [212, 254], "rescaletftransform": [212, 254], "rescaletransform": [212, 254], "alignimagechanneltransform": [212, 254], "dim": [212, 254, 621, 623], "align": [212, 254, 550, 623], "w": [212, 254, 614, 621, 623], "must": [212, 254, 266, 319, 551, 552, 571, 572, 573, 586, 617, 623], "pytorchalignimagechannel": [212, 254], "tondarraytransform": [212, 254], "resizemxnettransform": [212, 254], "resizetransform": [212, 254], "cropresizetftransform": [212, 254], "boundari": [212, 254, 623], "area": [212, 254, 266, 319, 588, 623], "pytorchcropresizetransform": [212, 254], "mxnetcropresizetransform": [212, 254], "cropresizetransform": [212, 254], "centercroptransform": [212, 254], "mxnetnormalizetransform": [212, 254], "pytorchnormalizetransform": [212, 254], "normalizetransform": [212, 254], "randomcroptransform": [212, 254], "randomresizedcroptransform": [212, 254], "get_final_text": [212, 254], "pred_text": [212, 254], "orig_text": [212, 254], "project": [212, 254, 394, 417, 418, 442, 549, 550, 551, 615, 620, 624, 628], "squadexampl": [212, 254], "qas_id": [212, 254], "question_text": [212, 254], "doc_token": [212, 254], "orig_answer_text": [212, 254], "start_posit": [212, 254], "end_posit": [212, 254], "is_imposs": [212, 254], "simpl": [212, 254, 571, 586, 589, 620, 621, 624], "answer": [212, 254, 267, 268, 320, 321, 550, 614, 623, 627], "posit": [212, 254, 550, 571, 588, 592], "unique_id": [212, 254], "example_index": [212, 254], "doc_span_index": [212, 254], "token_to_orig_map": [212, 254], "token_is_max_context": [212, 254], "input_mask": [212, 254, 589], "segment_id": [212, 254, 589], "read_squad_exampl": [212, 254], "input_fil": [212, 254], "doc_strid": [212, 254, 623], "max_query_length": [212, 254, 623], "output_fn": [212, 254], "inputbatch": [212, 254], "collecttransform": [212, 254], "10833": [212, 254], "tfsquadv1posttransform": [212, 254], "n_best_siz": [212, 254, 623], "20": [212, 254, 613, 621, 623, 626, 627], "384": [212, 254, 623], "64": [212, 254, 553, 621, 623, 627], "max_answer_length": [212, 254, 623], "30": [212, 254, 579, 583, 585, 621, 623, 627], "nbest_predict": [212, 254, 623], "question": [212, 254, 267, 268, 320, 321, 550, 551, 556, 586, 592, 614, 621, 623, 627], "anoth": [212, 254, 263, 272, 316, 366, 576, 590, 602, 606, 623, 624], "long": [212, 254, 581, 623], "document": [212, 254, 354, 551, 561, 578, 590, 594, 604, 607, 608, 619, 623, 625], "chunk": [212, 254, 623], "tfmodelzoocollecttransform": [212, 254], "tfsquadv1modelzooposttransform": [212, 254], "squadv1": [212, 254, 623], "see": [212, 254, 263, 316, 550, 552, 554, 571, 587, 589, 602, 603, 606, 609, 610, 621, 622, 624, 627], "parsedecodevoctransform": [212, 254], "conf_fname_or_obj": [213, 222, 255, 261, 271, 272, 273, 274, 276, 285, 290, 298], "thei": [213, 354, 550, 576, 582, 588, 589, 590, 597, 611], "possibl": [213, 383, 571, 612, 614, 618, 624], "unnecessari": [213, 589], "tensorflowcrossentropyloss": 214, "pytorchcrossentropyloss": 214, "tensorflowsparsecategoricalcrossentropi": 214, "sparsecategoricalcrossentropyloss": 214, "setter": 215, "calib_dataload": [215, 299, 335, 552, 555, 573, 574, 583, 584, 588, 589, 617, 618], "reason": [215, 550, 573, 622, 624], "know": [215, 507, 578, 619], "known": [215, 302, 339, 580, 589, 622, 624], "open": [216, 262, 315, 359, 548, 550, 555, 571, 580, 581, 589, 604, 607, 610, 615], "metric_cl": [217, 323, 335, 589], "user_metr": [217, 323, 335], "alwai": [217, 266, 319, 323, 335, 588, 589], "recommend": [217, 323, 556, 574, 580, 582, 600, 603, 608, 610, 614, 616, 624], "set_backend": 218, "tensorflowoptim": 219, "pytorchoptim": 219, "optimizer_registri": 219, "optimizer_typ": 219, "cross": [219, 270, 323, 584, 624], "tensorflowsgd": 219, "tensorflowadamw": 219, "tensorflow_addon": 219, "adamw": 219, "tensorflowadam": 219, "adam": [219, 626], "pytorchsgd": 219, "record_output": 221, "output_process": 221, "help": [221, 272, 383, 521, 591, 592, 598, 609, 624, 625], "get_activ": 221, "f": [224, 576, 578, 617, 621], "pickle_modul": 224, "pickle_protocol": 224, "_use_new_zipfile_seri": 224, "prepare_prun": [224, 614], "opt": [224, 555, 597, 621], "tensorflowimagefold": 241, "qlinear2qdq": [256, 262, 315], "qlinearop": [257, 585, 600, 617], "check_model": 257, "modelproto": [257, 259, 324, 591], "onnx_qlinear_to_qdq": 257, "input_name_to_nod": 257, "destin": [257, 272], "tf_to_fp32_onnx": 258, "tf_to_int8_onnx": 258, "int8_model": [258, 259, 556], "update_weight_bia": 259, "fp32_onnx_path": [259, 260], "wegiht": 259, "set_data_typ": 259, "weight_typ": 259, "activation_typ": 259, "get_node_map": 259, "module_node_map": 259, "get_quantizable_onnx_op": 259, "quantize_nod": 259, "build_scale_map": 259, "int8_scale_info": 259, "scale_zp_dict": 259, "set_scale_info": 259, "int8_onnx_model": 259, "int8_onnx_path": 259, "recalculate_bia": 259, "recalcul": [259, 621], "remove_nodes_by_nam": 259, "sub_graph_with_int32_bia": 259, "a_info": 259, "b_info": 259, "bias_nam": 259, "int32": [259, 574], "nodeproto": 259, "_type_": 259, "qdq_fp32_bia": 259, "excut": 259, "qdq_int32_bia": 259, "qdq_fp32_bias_qdq": 259, "torch_to_fp32_onnx": 259, "do_constant_fold": 259, "verbos": [259, 302, 339], "torch_to_int8_onnx": 259, "u8s8": 259, "optionl": 259, "onnx2numpy_dtyp": 260, "onnx_node_typ": 260, "dummydataread": 260, "dataread": 260, "achiev": [261, 298, 580, 588, 589, 612, 614, 615, 617, 622, 624], "across": [261, 271, 298, 324, 575, 589, 614, 621, 624], "variou": [261, 271, 298, 324, 585, 592, 614, 616], "dl": [261, 271, 285, 290, 298, 324, 584, 596, 609, 615], "bring": [261, 298, 603, 617, 621], "unifi": [261, 298, 556, 573, 584, 585, 589, 591], "vari": [261, 285, 290, 298, 613, 614, 621, 627], "roc": [261, 270, 285, 290, 298, 323], "flexibl": [261, 285, 290, 298, 576, 614], "via": [261, 285, 290, 298, 538, 550, 578, 585, 589, 592, 609, 614], "popular": [262, 315, 548, 555, 556, 576, 579, 580, 583, 589, 614, 617, 624, 625], "compress": [262, 285, 290, 315, 334, 356, 548, 555, 561, 576, 585, 589, 609, 611, 612, 614, 615, 617, 621, 625, 627], "techniqu": [262, 315, 548, 555, 585, 589, 592, 612, 614, 616, 617, 625, 626, 627], "bleu": [262, 264, 269, 315, 317, 322, 588, 614], "bleu_util": [262, 269, 315, 322], "coco_label_map": [262, 269, 315, 322], "coco_tool": [262, 269, 315, 322], "evaluate_squad": [262, 269, 315, 322], "f1": [262, 267, 269, 270, 315, 320, 322, 323, 578, 588, 589, 620, 627], "basic_na": [262, 275, 315], "nas_util": [262, 275, 315], "pruner_legaci": [262, 315], "gradient_sensit": [262, 281, 315], "group_lasso": [262, 281, 315], "pruning_recip": [262, 315], "tile_pattern": [262, 286, 287], "pytorch_prun": [262, 315], "logger": [262, 291, 315, 357, 360, 366, 502, 510], "prune_util": [262, 291, 315], "tuning_sampl": [262, 304, 310, 315, 343, 349], "tuning_spac": [262, 304, 310, 311, 313, 315, 343, 349, 350, 352], "tuning_struct": [262, 304, 310, 311, 312, 315, 343, 349, 350, 351], "auto_mixed_precis": [262, 304, 315, 343], "graph_optim": [262, 315, 442, 477, 481, 482, 502, 510, 526], "mixed_precis": [262, 315, 324, 442, 477, 502, 510, 526, 589], "model_convers": [262, 315], "pruning_v2": [262, 315], "unicoderegex": [263, 316], "hoc": [263, 316], "hack": [263, 316], "recogn": [263, 316, 624], "nondigit_punct_r": [263, 316], "compil": [263, 316, 589, 613], "express": [263, 316, 550], "preced": [263, 316, 621], "digit": [263, 316, 615], "punct_nondigit_r": [263, 316], "symbol_r": [263, 316], "bleu_token": [263, 316], "mose": [263, 316], "smt": [263, 316], "mosesdecod": [263, 316], "mteval": [263, 316], "v14": [263, 316], "pl": [263, 316], "l954": [263, 316], "l983": [263, 316], "bilingu": [263, 316], "understudi": [263, 316], "qualiti": [263, 316], "machin": [263, 316, 381, 571, 580, 586, 595, 609, 615, 621, 622], "translat": [263, 264, 316, 317, 614, 624], "natur": [263, 316, 580], "approxim": [263, 264, 316, 317, 588], "glue": [263, 270, 316, 323, 574, 588, 589, 598], "word": [263, 316, 588, 614], "ngram": [263, 316, 588], "breviti": [263, 264, 316, 317, 588], "penalti": [263, 264, 316, 317, 588], "doe": [263, 316, 574, 588, 589, 619, 623], "beam": [263, 316, 588], "tensor2tensor": [264, 317], "bleu_hook": [264, 317], "compute_bleu": [264, 317], "reference_corpu": [264, 317], "translation_corpu": [264, 317], "max_ord": [264, 317], "use_bp": [264, 317], "against": [264, 317], "gram": [264, 317], "bleu_scor": [264, 317], "third": [266, 319, 571, 587], "parti": [266, 319, 587, 617], "pycocotool": [266, 319, 581, 586], "noth": [266, 319, 624], "thu": [266, 319, 589, 614, 617], "cannot": [266, 319, 509, 552, 580, 581, 590, 622], "jonathanhuang": [266, 319], "image_id": [266, 319, 588], "encod": [266, 319, 623], "invok": [266, 319], "groundtruth_dict": [266, 319], "exportgroundtruthtococo": [266, 319], "groundtruth_boxes_list": [266, 319], "groundtruth_classes_list": [266, 319], "max_num_class": [266, 319], "output_path": [266, 319], "detections_list": [266, 319], "exportdetectionstococo": [266, 319], "detection_boxes_list": [266, 319], "detection_scores_list": [266, 319], "detection_classes_list": [266, 319], "cocowrapp": [266, 319], "loadannot": [266, 319], "cocoevalwrapp": [266, 319], "agnostic_mod": [266, 319], "computemetr": [266, 319], "detection_typ": [266, 319], "bbox": [266, 319, 552, 588], "hold": [266, 302, 319, 339, 574], "iou_typ": [266, 319], "iou_thr": [266, 270, 319, 323, 588], "map_point": [266, 270, 319, 323, 588], "cocoev": [266, 319], "mscoco": [266, 319], "Then": [266, 319, 571, 602, 604, 606, 607, 621, 624], "exportsingleimagegroundtruthtococo": [266, 319], "next_annotation_id": [266, 319], "category_id_set": [266, 319], "groundtruth_box": [266, 319], "groundtruth_class": [266, 319], "groundtruth_mask": [266, 319], "groundtruth_is_crowd": [266, 319], "ingest": [266, 319], "ones": [266, 319, 614], "exportsingleimagedetectionstococo": [266, 319], "uniqu": [266, 299, 319, 408, 409, 617], "assign": [266, 319, 366, 571, 578, 616], "num_gt_box": [266, 319], "num_detect": [266, 270, 319, 323, 588, 589, 626], "image_height": [266, 319], "image_width": [266, 319], "detection_mask": [266, 319], "crowd": [266, 319], "insid": [266, 319, 576, 577, 610, 614, 624], "exportsingleimagedetectionboxestococo": [266, 319], "detection_box": [266, 319, 589, 626], "detection_scor": [266, 319, 589, 626], "detection_class": [266, 319, 589, 626], "exporsingleimagedetectionboxestococo": [266, 319], "exportsingleimagedetectionmaskstococo": [266, 319], "allenai": [267, 268, 320, 321], "bi": [267, 268, 320, 321], "att": [267, 268, 320, 321], "flow": [267, 268, 320, 321, 552, 553, 589], "f1_score": [267, 268, 320, 321], "ground_truth": [267, 268, 320, 321], "ground": [267, 268, 320, 321], "truth": [267, 268, 320, 321], "metric_max_over_ground_truth": [267, 268, 320, 321], "metric_fn": [267, 268, 320, 321], "exact_match_scor": [267, 320], "exact": [267, 320], "averag": [267, 268, 270, 320, 321, 323, 588, 589, 624], "articl": [267, 268, 320, 321], "paragraph": [267, 268, 320, 321], "qa": [267, 268, 320, 321], "cantain": [267, 268, 320, 321], "normalize_answ": [268, 321], "extra": [268, 321, 589], "newlin": [268, 321], "tab": [268, 321, 419, 537, 609, 622], "harmon": [268, 270, 321, 323], "recal": [268, 270, 321, 323], "answer_start": [268, 321], "177": [268, 321], "denver": [268, 321], "bronco": [268, 321], "nfl": [268, 321], "team": [268, 321, 550, 618], "afc": [268, 321], "super": [268, 321, 553], "bowl": [268, 321], "50": [268, 321, 553, 621, 627], "56be4db0acb8001400a502ec": [268, 321], "form": [268, 321, 571, 576, 609], "percentag": [268, 321, 626], "tensorflowmetr": [270, 323], "maintain": [270, 323, 550, 551, 555, 591, 592, 604, 607, 619], "pytorchmetr": [270, 323], "mxnetmetr": [270, 323], "onnxrtqlmetr": [270, 323], "onnxrtitmetr": [270, 323], "metric_registri": [270, 323], "metric_typ": [270, 323], "decorator_metr": [270, 323], "basemetr": [270, 323, 335], "single_output": [270, 323], "hvd": [270, 323, 578], "wrappytorchmetr": [270, 323], "wrapmxnetmetr": [270, 323], "wraponnxrtmetr": [270, 323], "proport": [270, 323], "were": [270, 323, 595, 614], "pred_list": [270, 323], "pytorchloss": [270, 323], "mae": [270, 323, 588], "compare_label": [270, 323, 335, 588], "actual": [270, 323, 578, 621], "rmse": [270, 323, 588, 624], "squar": [270, 305, 323, 344, 588, 621, 624], "tensorflowtopk": [270, 323], "k": [270, 323, 335, 588], "among": [270, 323, 603, 621], "outcom": [270, 323], "num_correct": [270, 323], "num_sampl": [270, 323], "generaltopk": [270, 323], "cocomapv2": [270, 323, 588], "anno_path": [270, 323, 588], "map_kei": [270, 323], "detectionboxes_precis": [270, 323], "output_index_map": [270, 323, 588], "tensorflowmap": [270, 323], "tensorflowcocomap": [270, 323], "tensorflowvocmap": [270, 323], "squadf1": [270, 323, 588], "miou": [270, 323], "num_class": [270, 323], "21": [270, 323, 597, 598, 615, 621, 627], "iou": [270, 323], "intersect": [270, 323, 556, 588], "union": [270, 323, 356, 588], "onnxrtglu": [270, 323], "dlrm": [270, 323], "modelconvers": 272, "typic": [272, 299, 553, 555, 577, 579, 583, 614, 627], "basicna": 273, "model_build": [273, 276], "conf_fnam": 273, "nasbas": [276, 553], "nas_registri": 277, "nas_method": 277, "create_search_space_pool": 277, "idx": [277, 574], "enumer": [277, 356, 370, 471, 477, 503, 556, 576, 577, 578, 589, 612, 614, 622], "find_pareto_front": 277, "pareto": [277, 553], "front": [277, 553], "n_point": 277, "n_metric": 277, "n_pareto_point": 277, "gridsearch": 278, "grid": [278, 553], "whole": [278, 536, 571, 617], "randomsearch": 278, "bayesianoptimizationsearch": 278, "gradientsensitivityprun": 279, "pytorchmodel": [279, 280, 282, 283, 284, 333], "overwritten": [279, 280, 282, 283, 284, 597], "grouplassoprun": 280, "legaci": 281, "basicmagnitudeprun": 282, "lock": [283, 284, 585, 612, 614], "pruner_registri": 284, "clase": 284, "pruningconf": [285, 290], "tfpruningcallback": [285, 290], "input_model": [285, 290, 591, 622], "pure": [285, 290, 590, 614], "pattern_registri": 288, "pattern_typ": 288, "patternbas": 288, "mask_shap": [288, 289], "is_contigu": 288, "tile": 289, "tilepatternbas": 289, "tilepattern_1x1": 289, "1x1": [289, 576, 589, 614], "tilepattern_2x2": 289, "2x2": [289, 621], "tilepattern_1x16": 289, "1x16": 289, "tilepattern_4x1": 289, "tilepattern_1x2": 289, "1x2": [289, 621], "reset_non_value_to_default": 294, "obejct": 294, "parse_not_to_prun": 294, "update_frequency_on_step": [295, 616], "max_sparsity_ratio_per_lay": [295, 616], "magnitudeprun": 295, "snipprun": 295, "snipmomentumprun": 295, "moreoev": 295, "least": [296, 589, 614, 624], "templat": [296, 315, 502, 510, 571, 589, 614], "tree": [296, 312, 351], "huggingface_model": 296, "eager": [296, 368, 476, 480, 488, 578, 585, 617, 618, 622, 627], "config_file_path": 296, "pruner_info": 296, "quantconf": 298, "server": [299, 315, 442, 449, 501, 502, 509, 510, 518, 521, 532, 534, 536, 571, 609], "seper": 299, "opt_model": [299, 589], "fulli": [299, 589, 617, 621], "train_func": [299, 356, 578, 589, 617], "automixedprecisiontunestrategi": [300, 337], "basictunestrategi": [301, 338], "stage": [301, 306, 336, 338, 345, 576, 614, 622, 624], "polici": [301, 305, 336, 338, 344, 550, 555, 613, 626, 628], "bayesiantunestrategi": [302, 339], "acq_max": [302, 339], "ac": [302, 339], "gp": [302, 339], "y_max": [302, 339], "n_warmup": [302, 339], "10000": [302, 339, 614], "n_iter": [302, 339], "acquisit": [302, 339], "gaussian": [302, 339, 624], "relev": [302, 339], "limit": [302, 339, 366, 555, 576, 622], "acq": [302, 339], "randomst": [302, 339], "scipi": [302, 339], "x_max": [302, 339], "targetspac": [302, 339], "pbound": [302, 339], "9527": [302, 339, 589, 626], "allow": [302, 339, 538, 571, 576, 578, 588, 589, 590, 616, 621, 624, 626], "bayesianoptim": [302, 339], "exhaustivetunestrategi": [303, 341], "msetunestrategi": [305, 344], "mse_v2tunestrategi": [306, 345], "revert": [306, 314, 345, 353, 624], "randomtunestrategi": [307, 346], "strategy_registri": [308, 347, 624], "tunestrategi": [308, 347, 624], "tuningsamplerregistri": [311, 350], "tuningsampl": [311, 350], "tuningord": [311, 350], "Not": [311, 312, 350, 351, 366, 505, 553], "tuningspac": [311, 312, 350, 351], "tuning_order_lst": [311, 350], "initial_op_tuning_cfg": [311, 350], "modelwisetuningsampl": [311, 350], "tuning_items_prior": [311, 350], "op_dtype_dict": [311, 350], "optuningconfig": [311, 312, 313, 350, 351, 352], "optypewisetuningsampl": [311, 350], "opwisetuningsampl": [311, 350], "fallbacktuningsampl": [311, 350], "op_dtyp": [311, 350], "accumul": [311, 350, 624], "skip_first": [311, 350], "smoothquantsampl": 311, "tuningitem": [312, 351], "item_typ": [312, 351], "pattern_to_intern": [312, 351], "default_dtyp": [312, 351], "pattern_to_path": [312, 351], "quant_mode_from_pattern": [312, 351], "internal_pattern": [312, 351], "initial_tuning_cfg_with_quant_mod": [312, 351], "op_name_typ": [312, 351], "step1": [312, 351], "step2": [312, 351], "complet": [312, 351, 556, 571, 617, 624, 626, 627], "step3": [312, 351], "step4": [312, 351], "step5": [312, 351], "op_quant_mod": [313, 352], "ordereddefaultdict": [314, 353], "extract_data_typ": [314, 353], "data_typ": [314, 353], "sign": [314, 353, 551, 571, 617, 620], "reverted_data_typ": [314, 353], "signed_flag": [314, 353], "get_adaptor_nam": [314, 353], "experiment": [315, 553, 574, 577, 578, 580, 589, 614, 616, 619, 623], "base_model": [315, 326], "keras_model": [315, 326], "mxnet_model": [315, 326], "nets_factori": [315, 326], "onnx_model": [315, 326], "tensorflow_model": [315, 326], "torch_model": [315, 326], "collect_layer_histogram": [315, 360], "create_obj_from_config": [315, 360], "kl_diverg": [315, 360], "load_huggingfac": [315, 360, 589], "ux": 315, "config_gener": [315, 442, 502], "configuration_wizard": [315, 442, 502], "db_manag": [315, 442, 502], "file_brows": [315, 442, 502], "jobs_manag": [315, 442, 502], "model_zoo": [315, 442, 502], "names_mapp": [315, 442, 502], "profil": [315, 394, 401, 416, 418, 419, 442, 502, 503, 513, 536, 541], "manage_workspac": [315, 442, 502], "workload": [315, 381, 502, 510, 521, 536, 541, 542, 615], "except": [315, 354, 366, 502, 510, 521, 536], "executor": [315, 369, 502, 510], "expiring_dict": [315, 502, 510], "github_info": [315, 502, 510], "hw_info": [315, 502, 510], "json_seri": [315, 502, 510], "proc": [315, 502, 510], "status_upd": [315, 502, 510], "yaml_util": [315, 502, 510], "web": [315, 501, 502, 555, 571, 622], "servic": [315, 502, 535, 536, 555, 609, 613], "commun": [315, 502, 536, 538, 550, 571], "router": [315, 502, 536], "inc_bench": [315, 502, 571, 583], "sub_class": [323, 335], "register_customer_metr": 323, "mani": [323, 335, 586, 624, 626], "tell": [323, 335, 616], "topk": [323, 335, 578, 588, 589, 617], "matrix": [323, 335, 555, 600, 625], "frozen": [324, 332, 335, 458, 461, 571, 591], "savedmodel": [324, 332, 335, 627], "chould": 324, "onnx_ml_pb2": [324, 591], "hybirdblock": [324, 335], "paramt": [324, 356], "basemodel": 325, "plai": [325, 615, 621], "role": [325, 621], "kerasmodel": [327, 460], "get_model_fwk_nam": 328, "fwk": 328, "mxnetmodel": 329, "net": 330, "factori": [330, 423, 442, 477, 493, 498, 502, 513, 517], "tfslimnetsfactori": 330, "onnxmodel": 331, "get_model_typ": [332, 451], "validate_graph_nod": 332, "validate_and_inference_input_output": 332, "input_tensor_nam": 332, "output_tensor_nam": 332, "graph_sess": 332, "graph_def_sess": 332, "frozen_pb_sess": 332, "load_saved_model": 332, "saved_model_tag": 332, "signatur": 332, "saved_model_dir": 332, "tag": [332, 521, 621, 622], "metagraphdef": 332, "keras_sess": 332, "slim_sess": 332, "checkpoint_sess": 332, "estimator_sess": 332, "saved_model_sess": 332, "tensorflowbasemodel": 332, "tensorflowsavedmodelmodel": 332, "tensorflowqatmodel": 332, "tensorflowcheckpointmodel": 332, "checkpoint": [332, 365, 591], "tensorflowmodel": [332, 462], "pytorchbasemodel": 333, "pytorchfxmodel": 333, "ipexmodel": 333, "driven": [334, 555, 589, 590, 609, 611, 622], "objective_registri": 334, "objective_custom_registri": 334, "obj_cl": 334, "eural_compressor": 334, "objective_cl": 334, "user_object": 334, "__class__": 334, "__name__": 334, "objective_cfg": 334, "usr_cfg": 334, "user_obj_cfg": 334, "easili": [334, 556, 593, 597, 609, 611, 621], "peak": [334, 611], "multiobject": [334, 531], "metric_criterion": 334, "metric_weight": 334, "obj_criterion": 334, "obj_weight": 334, "is_measur": 334, "calib_func": [335, 618], "entir": [335, 356, 552, 614, 621], "autotunestrategi": 336, "conservativetunestrategi": 340, "o0": [340, 624], "who": [340, 550], "hawq_v2tunestrategi": 342, "made": [342, 556, 617, 619, 624], "impact": [342, 619, 624], "tunestrategymeta": 347, "metaclass": 347, "blockfallbacktuningsampl": 350, "op_block_lst": 350, "target_dtyp": 350, "fun": 354, "attribute1": 354, "module_debug_level1": 354, "debug": [354, 363, 423, 424, 428, 571, 602, 606, 610, 624], "function1": 354, "param1": 354, "param2": 354, "parameter1": 354, "parameter2": 354, "o": [354, 430, 586, 594, 613, 621], "function2": 354, "pep": 354, "484": 354, "output_model": [354, 573, 589, 622], "function3": 354, "section": [354, 571, 576, 577, 609, 614, 616, 626], "restructuredtext": 354, "liter": 354, "attributeerror": 354, "generator1": 354, "example_gener": 354, "exampleclass": 354, "param3": 354, "public": [354, 550, 604, 607], "attr1": 354, "attr2": 354, "attr5": 354, "api_doc_exampl": 355, "loop": [356, 552, 553, 582, 620, 624], "compressionmanag": 356, "uesd": 356, "deal": 356, "pruningconfig": 356, "orchestr": [356, 555, 585, 625], "on_train_begin": [356, 552, 576, 577, 589, 612, 614, 617], "train_loop": [356, 589, 612], "on_epoch_begin": [356, 359, 576, 577, 589, 612], "on_step_begin": [356, 359, 576, 577, 589, 612, 614], "on_after_compute_loss": [356, 576, 577, 589, 612], "backward": [356, 576, 577, 578, 589, 612, 614, 617, 619], "on_before_optimizer_step": [356, 576, 577, 589, 612, 614], "on_step_end": [356, 359, 576, 577, 589, 612], "on_epoch_end": [356, 359, 576, 577, 589, 612], "on_train_end": [356, 576, 577, 589, 612, 614, 617], "path_to_sav": 356, "manag": [356, 359, 385, 420, 443, 504, 520, 583, 589, 592, 593, 603], "top1": [356, 614, 617, 627], "callbacks_list": 356, "layerhistogramcollector": 357, "layer_tensor": 357, "include_lay": 357, "get_func_from_config": 359, "func_dict": 359, "get_preprocess": 359, "get_metr": 359, "get_postprocess": 359, "get_algorithm": 359, "algo": 359, "create_dataset": 359, "cfg_preprocess": 359, "cfg_filter": 359, "create_dataload": 359, "dataloader_cfg": 359, "create_eval_func": 359, "postprocess_cfg": 359, "fp32_baselin": [359, 556], "baselin": [359, 620, 622], "create_train_func": 359, "train_cfg": 359, "Their": 359, "auxiliari": 360, "pretrain": [362, 592, 598], "optimizedmodel": 362, "from_pretrain": [362, 589], "save_for_huggingface_upstream": [362, 589], "output_dir": [362, 514, 589, 597, 598], "msg": 363, "fatal": 363, "warn": [363, 571], "warin": 363, "alia": [363, 366, 594, 599], "is_int8_model": 365, "checkpoint_dir": 365, "history_cfg": 365, "best_configur": 365, "best_model_weight": 365, "pt": [365, 591, 615, 617, 618], "snapshot": [365, 540], "cfg_from_fil": 366, "yaml_fil": [366, 574, 578, 588], "lazyimport": 366, "lazi": 366, "till": [366, 624], "decorat": 366, "time_limit": 366, "get_siz": [366, 521], "seen": [366, 556], "recurs": 366, "compute_spars": 366, "fault_tolerant_fil": 366, "equal_dict": 366, "d2": 366, "compare_kei": 366, "ignore_kei": 366, "ignor": [366, 574, 621], "cpuinfo": 366, "dump_elapsed_tim": [366, 556], "customized_msg": 366, "elaps": 366, "combine_histogram": 366, "old_hist": 366, "old": [366, 589, 619], "get_tensor_histogram": 366, "get_all_fp32_data": 366, "get_tuning_histori": 366, "tuning_history_path": [366, 490], "num": [366, 588], "str2arrai": 366, "dequantizeweight": 366, "weight_tensor": 366, "min_filter_tensor": 366, "max_filter_tensor": 366, "scale_info": 366, "captureoutputtofil": 366, "tmp_file_path": 366, "stream": 366, "sy": [366, 595], "stderr": 366, "captur": 366, "statist": 366, "header": [366, 581], "field_nam": 366, "output_handl": 366, "printer": 366, "global_st": 366, "load_data_from_pkl": 366, "pkl": 366, "dump_data_to_loc": 366, "show_memory_info": 366, "hint": 366, "dump_class_attr": 366, "compare_object": 366, "obj1": 366, "obj2": 366, "ignore_attr": 366, "comparison": [366, 619, 622], "alias_param": 366, "param_nam": 366, "param_alia": 366, "alias": 366, "project_data": [367, 474, 479, 483, 486, 489, 496], "benchmark_data": 367, "dataloaderinterfac": [367, 483, 496], "dataloader_data": [367, 483, 496], "parse_arg": [368, 476, 480, 485, 488, 494], "benchmark_mod": 368, "set_eager_execut": [368, 476, 480, 488], "request_id": [369, 472, 490, 491, 514], "asd": [369, 491], "benchmark_id": 369, "benchmark_result_upd": 369, "benchmark_result_update_pytorch_script": 369, "neural_coder_perform": 369, "neural_coder_tim": 369, "pytorch_script_bench_optim": 369, "command_line_of_script": 369, "pytorch_script_bench_original_model": 369, "execute_real_benchmark": 369, "project_detail": [369, 472, 491], "benchmark_detail": 369, "benchmark_model": [370, 442, 502], "execute_benchmark": [370, 442, 502], "benchmarkconfiggener": 371, "configgener": 372, "workload_directori": 372, "configuration_path": 372, "graphoptimizationconfiggener": 373, "benchmark_config_gener": [374, 442, 502], "graph_optimization_config_gener": [374, 442, 502], "mixed_precision_config_gener": [374, 442, 502], "profiling_config_gener": [374, 442, 502], "pruning_config_gener": [374, 442, 502], "quantization_config_gener": [374, 442, 502], "mixedprecisionconfiggener": 375, "profilingconfiggener": 376, "pruningconfiggener": 377, "quantizationconfiggener": 378, "configurationpars": 379, "parse_list_valu": 379, "required_typ": 379, "parse_multidim_list": 379, "dimension": 379, "normalize_string_list": 379, "string_list": 379, "bracket": 379, "miss": [379, 614, 617], "get_predefined_configur": 381, "update_config_to_machine_specif": 381, "configuration_pars": [382, 442, 502], "get_boundary_nod": [382, 442, 502], "get_configur": [382, 442, 502], "params_feed": [382, 442, 502], "pruning_config_pars": [382, 442, 502], "feeder": 383, "get_possible_valu": 383, "pruningconfigpars": 384, "bench": [385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 472, 501, 592], "dbmanag": 385, "database_loc": 385, "log_level": [385, 512], "benchmarkresult": 387, "fill_dictionari": [388, 390, 391, 393, 395, 398, 399, 404], "fill": [388, 390, 391, 393, 395, 398, 399, 404, 571, 609, 620, 623], "domainflavour": [391, 503], "db": [391, 419, 420], "benchmark_result": [394, 418, 442], "domain_flavour": [394, 418, 442, 448, 521], "optimization_typ": [394, 418, 442], "profiling_result": [394, 418, 442], "pruning_detail": [394, 418, 442], "tuning_detail": [394, 418, 442], "tuning_histori": [394, 418, 442, 477, 502], "optimizationtyp": [398, 503], "profilingresult": 401, "pruningdetail": 403, "tuningdetail": [405, 489], "tuninghistori": [406, 490], "benchmarkapiinterfac": 407, "before_delete_benchmark_entri": 407, "mapper": [407, 470, 471], "sqlite3": 407, "db_model": [407, 418, 442, 502], "datasetapiinterfac": 408, "set_database_vers": [408, 409], "version_num": [408, 409], "alembic_vers": [408, 409], "initialize_associ": [408, 409], "initialize_precision_optimization_types_associ": [408, 409], "search_in_list_of_dict_for_unique_valu": [408, 409], "list_of_dict": [408, 409], "search_in_list_of_dict": [408, 409], "diagnosisapiinterfac": 410, "dictionariesapiinterfac": 411, "dictonari": 411, "examplesapiinterfac": 412, "predefin": [412, 521], "benchmark_api_interfac": [413, 418, 442], "dataset_api_interfac": [413, 418, 442], "diagnosis_api_interfac": [413, 418, 442], "dictionaries_api_interfac": [413, 418, 442], "examples_api_interfac": [413, 418, 442], "model_api_interfac": [413, 418, 442], "optimization_api_interfac": [413, 418, 442], "profiling_api_interfac": [413, 418, 442], "project_api_interfac": [413, 418, 442], "modelapiinterfac": 414, "optimizationapiinterfac": 415, "profilingapiinterfac": 416, "projectapiinterfac": 417, "db_oper": [418, 442, 502], "params_interfac": [418, 442, 502], "modeladdparamsinterfac": 419, "datasetaddparamsinterfac": 419, "optimizationaddparamsinterfac": 419, "optimizationeditparamsinterfac": 419, "edit": [419, 550], "benchmarkaddparamsinterfac": 419, "benchmarkeditparamsinterfac": 419, "profilingaddparamsinterfac": 419, "profilingeditparamsinterfac": 419, "profilingresultaddparamsinterfac": 419, "tuninghistoryiteminterfac": 419, "tuninghistoryinterfac": 419, "diagnosisoptimizationparamsinterfac": 419, "update_dataloaders_param": 420, "framework_id": 420, "dataloaders_to_upd": 420, "framework_dataloaders_config": 420, "get_framework_dataloaders_config": 420, "get_framework_transforms_config": 420, "diagnosisfactori": 422, "onnx_diagnosi": [423, 442, 502], "onnxrt_diagnosi": [423, 424, 442], "tensorflow_diagnosi": [423, 442, 502], "op_detail": [423, 442, 502], "op_entri": [423, 442, 502], "onnxrtdiagnosi": 425, "opdetail": 426, "oppattern": 426, "pattern_data": 426, "opweight": 426, "weights_data": 426, "opactiv": 426, "op_activ": 426, "opentri": 427, "activation_min": 427, "activation_max": 427, "tensorflowdiagnosi": 429, "browser": [430, 571, 602, 606], "get_directory_entri": 430, "get_requested_path": 430, "request": [430, 442, 443, 444, 465, 466, 469, 490, 502, 533, 535, 538, 545, 571, 617], "get_non_hidden_directory_entri": 430, "create_dir_entri": 430, "direntri": 430, "create_file_entri": 430, "create_entri": 430, "is_directori": 430, "sort_entri": 430, "should_show_fil": 430, "should_show_only_model_fil": 430, "get_setting_valu": 430, "get_filter_valu": 430, "filter_requested_entri": 430, "filter_nam": 430, "is_directory_entri": 430, "is_model_or_directory_entri": 430, "shown": [430, 553, 571, 573, 576, 588, 589, 603, 611, 612, 614, 621, 624], "is_dataset_or_directory_entri": 430, "brows": 431, "filesystem": [431, 521], "attribute_typ": 432, "expanded_group": 433, "reader": [436, 437, 442, 502], "graphread": 436, "onnxrt_read": [437, 439, 442], "tensorflow_read": [437, 439, 442], "collaps": [437, 442, 502, 571], "edg": [437, 442, 502, 623], "graph_read": [437, 442, 502], "highlight": [438, 552, 571], "groupnod": 438, "group_nam": 438, "onnxrtread": 440, "tensorflowread": 441, "jobs_control_queu": [442, 443, 502], "frozen_pb": [442, 449, 459], "meta_graph": [442, 449, 459], "model_type_gett": [442, 449, 502], "repositori": [442, 447, 449, 502, 508, 604, 607], "download_config": [442, 468, 502], "download_model": [442, 468, 502], "list_model": [442, 468, 502], "optimize_model": [442, 475, 477, 478, 481, 484], "neural_coder_optim": [442, 477, 502], "tune_model": [442, 477, 487], "execute_optim": [442, 477, 502], "tensorflow_profil": [442, 493, 502], "execute_profil": [442, 493, 502], "profile_model": [442, 493, 502], "job": [443, 517], "_jobscontrolqueu": 444, "queu": 444, "jobsmanag": 444, "_jobsmmanag": 445, "_job": 445, "get_default_path": 447, "getter": 451, "onnxrtmodel": 453, "remove_number_of_samples_from_shap": 453, "pytorchscriptmodel": 455, "modelrepositori": 456, "trust": [457, 571], "frozenpbmodel": 458, "metagraphmodel": 461, "metagraph": 461, "savedmodelmodel": 463, "get_input_shap": 464, "fix_dynamic_shap": 464, "get_available_model": 469, "check_vers": 469, "framework_vers": 469, "supported_vers": 469, "validate_model_list": 469, "model_list": 469, "get_framework_module_nam": 469, "framework_nam": [469, 509], "get_installed_framework": 469, "instal": [469, 578, 581, 583, 592, 594, 597, 600, 604, 607, 609, 610, 613, 628], "mappingdirect": 471, "namesmapp": 471, "execute_optimization_pytorch_script": 472, "optimization_id": 472, "execute_optimization_regular": 472, "parse_model_data_to_bench_nam": 472, "parse_log": 472, "optimization_detail": 472, "check_if_collect_tuning_histori": 472, "optimizationfactori": 473, "graphoptim": [474, 525], "optimization_data": [474, 479, 483, 486, 489], "dataset_data": [474, 479, 483, 486, 489], "optimize_graph": [476, 480], "optimize_graph_config": [476, 480], "optimize_pt_script": 482, "optimizationinterfac": 483, "optimization_workdir": 490, "watcher": 490, "send": [490, 533, 538, 551], "profiling_id": 491, "execute_real_profil": 491, "profiling_detail": 491, "profilerfactori": [492, 497], "load_profiling_detail": 494, "json_path": 494, "profiling_data": [496, 499], "delete_assign": 500, "wsgi": 501, "prepare_environ": 501, "app": [502, 536], "workdir": [502, 510, 518], "history_snapshot_pars": [502, 536, 541], "request_data_processor": [502, 536, 541], "response_gener": [502, 536, 541], "flavour": 503, "executionstatu": 503, "status": 503, "notfoundexcept": 505, "accessdeniedexcept": 505, "deni": 505, "clienterrorexcept": 505, "internalexcept": 505, "subject": [506, 533, 587], "send_respons": 506, "log_nam": 506, "additional_log_nam": [506, 514], "shell": [506, 514, 622], "expir": 507, "expiringdictitem": 507, "expires_at": 507, "expiringdict": 507, "initial_valu": 507, "ttl": 507, "120": [507, 621], "githubinfo": 508, "hw": 509, "hwinfo": 509, "respons": [509, 513, 520, 533, 538, 546, 617], "platform": [509, 555, 585, 592, 600, 615, 617, 627], "hardwar": [509, 551, 555, 556, 576, 585, 589, 590, 609, 613, 614, 615, 616], "get_number_of_socket": 509, "get_distribut": 509, "distibut": 509, "get_bios_vers": 509, "bio": [509, 613], "is_turbo_boost_en": 509, "turbo": [509, 613], "boost": [509, 590, 593, 609, 614, 615], "get_kernel_vers": 509, "get_framework_info": 509, "get_framework_dependency_info": 509, "subdepend": 509, "jsonseri": 511, "serializ": 511, "change_log_level": 512, "optimizationpars": 513, "performancepars": 513, "accuracypars": 513, "benchmarkparserfactori": 513, "profilingpars": 513, "pid": 514, "ncprocess": 515, "aggreg": 515, "get_status_update_funct": 517, "job_typ": 517, "sent": 519, "deprec": [521, 604, 607, 623], "func": [521, 538, 617, 626], "signal": 521, "is_hidden": 521, "get_dataset_path": 521, "get_framework_from_path": 521, "get_file_extens": 521, "is_dataset_fil": 521, "get_predefined_config_path": 521, "normalize_domain": 521, "underscor": 521, "normalize_framework": 521, "normalize_str": 521, "string_to_norm": 521, "get_model_zoo_config_path": 521, "model_dict": 521, "get_model_zoo_model_path": 521, "check_modul": 521, "get_module_vers": 521, "mb": 521, "add_unit": 521, "load_model_config": 521, "load_dataloader_config": 521, "load_transforms_config": 521, "load_transforms_filter_config": 521, "meaning": [521, 589, 612], "load_precisions_config": 521, "load_pruning_details_config": 521, "get_default_pruning_config_path": 521, "load_model_wise_param": 521, "load_metrics_config": 521, "get_metrics_dict": 521, "load_help_nc_param": 521, "replace_with_valu": 521, "file_path": 521, "verify_file_path": 521, "determine_ip": 521, "ip": 521, "is_development_env": 521, "nc_mode": 521, "filter_transform": 521, "parse_bool_valu": 521, "release_tag": 521, "releas": [521, 555, 586, 598, 600, 602, 606, 608, 628], "get_shape_from_transform": 521, "shape_elements_ord": 521, "get_height_width_from_s": 521, "parse_to_string_list": 521, "parse_to_float_list": 521, "export_to_csv": 521, "csv": [521, 553, 571], "parse_vers": 521, "string_vers": 521, "are_archive_filenames_valid": 521, "archiv": 521, "malici": 521, "safe_extract_arch": 521, "zipfil": 521, "tarfil": 521, "destination_dir": 521, "member": [521, 550, 556], "safe": [521, 551], "labelbal": [523, 573, 574], "postprocessschema": 524, "sgdoptim": 529, "adamwoptim": 529, "adamoptim": 529, "crossentropylosscriterion": 529, "sparsecategoricalcrossentropycriterion": 529, "knowledgedistillationlosscriterion": 529, "weightcompressionapproach": 529, "parse_dict_value_to_float": 529, "parse_dict_value_to_int": 529, "wiseconfigdetail": 530, "wiseconfig": 530, "acccriterion": 531, "exitpolici": 531, "float_represent": 532, "dumper": 532, "pruner_represent": 532, "logic": [533, 626], "outsid": 533, "create_simple_respons": 533, "gui": [533, 538, 555, 571, 585, 586, 614, 625], "messagequeu": 533, "queue": [533, 538], "servicenotfoundexcept": 535, "unknown": 535, "connector": 537, "routingdefinit": 537, "rout": 537, "realtimeroutingdefinit": 537, "realtim": 537, "deferredroutingdefinit": 537, "separ": [537, 550, 571, 584, 587, 612, 616], "deferredsubprocessroutingdefinit": 537, "spawn": 537, "subprocess": 537, "get_model_graph": 537, "find_pattern_in_graph": 537, "get_system_info": 537, "endpoint": 538, "run_serv": 538, "webserv": 538, "get_tls_arg": 538, "tl": [538, 571], "block_ifram": 538, "werkzeug": 538, "ifram": 538, "csp": 538, "block_snif": 538, "mime": 538, "snif": 538, "require_api_token": 538, "author": [538, 587], "j": [538, 551, 555, 621, 627], "handle_api_cal": 538, "subpath": 538, "allow_api_cal": 538, "page_not_found": 538, "disable_cach": 538, "build_paramet": 538, "flask": [538, 571], "web_socket_publish": 538, "web_socket": 538, "flask_socketio": 538, "socketio": [538, 571], "benchmarkservic": 539, "historysnapshotpars": 540, "history_snapshot": 540, "provide_perform": 540, "modelservic": 542, "optimizationservic": 543, "profilingservic": 544, "processor": [545, 555, 590, 613, 615, 617, 618, 627], "requestdataprocessor": 545, "responsegener": 546, "workloadservic": 547, "welcom": [549, 550, 551, 555, 628], "interest": [550, 555, 622], "foster": 550, "particip": 550, "harass": 550, "experi": [550, 592, 620, 621, 624], "everyon": 550, "regardless": 550, "ag": 550, "bodi": 550, "ethnic": 550, "characterist": 550, "gender": 550, "educ": 550, "socio": 550, "econom": 550, "appear": [550, 571, 603, 609], "race": 550, "religion": 550, "sexual": 550, "orient": 550, "behavior": [550, 551, 556, 582, 591, 622, 624, 626], "contribut": [550, 555, 614], "inclus": 550, "Being": 550, "respect": [550, 582, 614, 621, 626], "viewpoint": 550, "gracefulli": 550, "critic": 550, "focus": [550, 556], "empathi": 550, "toward": [550, 576], "unaccept": 550, "imageri": 550, "unwelcom": 550, "troll": 550, "insult": 550, "derogatori": 550, "comment": [550, 574, 588, 589, 623], "polit": 550, "attack": 550, "privat": 550, "publish": [550, 587, 590, 610, 621], "electron": 550, "explicit": 550, "permiss": 550, "inappropri": 550, "profession": 550, "clarifi": 550, "appropri": [550, 621], "fair": 550, "action": [550, 604, 607], "reject": 550, "commit": [550, 551], "wiki": 550, "issu": [550, 551, 554, 571, 586, 617, 622], "ban": 550, "temporarili": 550, "deem": 550, "threaten": 550, "offens": 550, "harm": 550, "mail": 550, "social": [550, 555, 615], "media": [550, 555, 615], "account": [550, 620, 624], "appoint": 550, "event": [550, 622], "abus": 550, "report": [550, 551, 571, 620], "contact": [550, 619, 620], "complaint": 550, "review": [550, 551], "investig": 550, "circumst": [550, 616], "oblig": 550, "confidenti": [550, 571], "regard": [550, 618], "incid": 550, "good": [550, 617, 624], "faith": 550, "face": [550, 555, 561, 592, 596, 615, 619], "repercuss": 550, "leadership": 550, "faq": [550, 555], "page": [550, 551, 555], "view": [551, 555, 571, 579, 600, 609, 619], "pylint": 551, "flake8": 551, "autopep8": 551, "cover": [551, 580, 584, 615], "would": [551, 589, 590, 614, 617, 621], "adopt": [551, 555, 592, 614, 615, 621], "certif": [551, 571], "agre": 551, "bug": 551, "jira": 551, "ticket": 551, "potenti": [551, 553], "risk": 551, "pr": [551, 588, 604, 607, 619], "reproduc": 551, "submit": [551, 615], "intend": 551, "collabor": [551, 594, 600], "adher": 551, "toolkit": [552, 555, 586, 592, 600, 615, 625], "tracer": 552, "resolv": [552, 554], "floatfunct": 552, "cat": [552, 595], "done": [552, 576, 577, 593, 609, 614, 617], "10004": [552, 553, 556, 573, 576, 577, 580, 582, 585, 590, 612, 616, 626], "neural_compressor": [552, 553, 555, 572, 573, 574, 576, 577, 578, 580, 583, 584, 588, 589, 590, 591, 611, 612, 614, 616, 617, 618, 619, 620, 621, 623, 624, 626], "eval": [552, 573, 592, 617, 622], "fail": 552, "conduct": [552, 589, 597, 609, 625], "imper": 552, "therefor": [552, 589, 614, 617, 619, 621], "lot": [552, 621], "As": [552, 571, 573, 576, 589, 603, 614, 624], "failur": 552, "successfulli": [552, 578, 615], "suggest": [552, 620], "traceabl": 552, "proxi": 552, "tutori": [552, 600, 615, 625], "prototyp": 552, "html": [552, 555, 604, 607], "untrac": 552, "ssd": [552, 627], "resnet34": [552, 627], "r34": 552, "bboxes_labels_scor": 552, "prob": 552, "45": [552, 621, 627], "max_output": 552, "zip": 552, "dbox": 552, "dlabel": 552, "dscore": 552, "decode_singl": 552, "autom": [553, 592, 609, 610, 621], "artifici": 553, "ann": 553, "par": 553, "outperform": 553, "hand": [553, 571], "propos": [553, 556, 576, 590, 621], "lie": 553, "predictor": 553, "4x": [553, 617], "figur": [553, 602, 603, 606], "popul": 553, "inner": 553, "evolutionari": 553, "cycl": 553, "until": [553, 624], "conclud": 553, "met": [553, 582, 590, 617, 622], "yet": [553, 571, 604, 607, 610], "simplest": [553, 595], "launcher": [553, 555, 576, 577, 600, 625], "agent": 553, "nsga2": 553, "supernet": 553, "ofa_mbv3_d234_e346_k357_w1": 553, "acc": [553, 614, 622, 627], "mac": [553, 610], "num_ev": 553, "250": [553, 614], "results_csv_path": 553, "search_result": 553, "dataset_path": 553, "ilsvrc2012": 553, "aim": [553, 555, 592, 614, 621, 624, 625], "mobilenetv3": 553, "lt": [553, 574, 613, 627], "wmt": 553, "en": 553, "de": 553, "guidelin": [554, 555], "mainstream": [555, 625], "learn": [555, 556, 573, 574, 580, 584, 585, 586, 589, 590, 592, 594, 597, 598, 600, 603, 604, 607, 609, 614, 615, 617, 621, 622, 624, 625], "runtim": [555, 556, 557, 573, 579, 582, 585, 594, 599, 600, 616], "workflow": [555, 576, 586, 590, 604, 607, 622, 625], "particular": [555, 614], "wide": [555, 579, 590, 614, 617, 627], "xeon": [555, 586, 587, 590, 613, 615, 617, 618, 627], "scalabl": [555, 586, 590, 613, 615, 617, 618, 627], "flex": [555, 586], "amd": [555, 585, 586, 627], "arm": [555, 585, 586, 627], "nvidia": [555, 585, 586, 617, 627], "bloom": [555, 621], "176b": [555, 621], "7b": [555, 621], "stabl": [555, 571, 586, 614, 615], "diffus": [555, 615, 627], "gpt": [555, 614, 621, 627], "hub": [555, 579, 583, 600], "hug": [555, 615], "vision": [555, 580, 583, 596, 621], "coder": [555, 585, 593, 594, 597, 600, 603, 615], "cloud": [555, 615], "marketplac": [555, 610, 615], "googl": [555, 590, 615], "amazon": [555, 592, 600], "azur": [555, 615], "softwar": [555, 587, 590, 613, 614, 615, 619], "alibaba": [555, 599, 606, 607, 615], "tencent": [555, 615], "taco": [555, 615], "ai": [555, 592, 615, 618, 625], "ecosystem": [555, 615], "lightn": [555, 599], "pip": [555, 571, 578, 581, 583, 586, 594, 597, 602, 604, 606, 607, 619], "wget": [555, 581, 583], "storag": [555, 583, 588, 621], "googleapi": [555, 583], "v1_6": [555, 583], "mobilenet_v1_1": [555, 583], "0_224_frozen": [555, 583], "quick": [555, 582, 625, 626], "overview": 555, "notebook": [555, 625], "oneapi": [555, 586, 615, 625], "analyt": [555, 586, 615, 625], "jupyterlab": [555, 592, 598, 600, 602, 606, 625], "studio": [555, 600, 609, 625], "topic": 555, "blog": [555, 615], "medium": [555, 615], "enhanc": [555, 592, 615, 618], "apr": [555, 615], "2023": [555, 621, 627], "still": [555, 589, 615, 617, 618], "mlperf": [555, 615, 627], "5x": [555, 615], "heterogen": [555, 615], "power": [555, 576, 589, 603, 613, 615], "mar": [555, 615], "busi": [555, 615], "jan": [555, 615], "neurip": [555, 615], "oct": [555, 615], "quala": [555, 615], "minilm": [555, 615, 627], "legal": [555, 628], "secur": [555, 613, 615, 628], "idea": [555, 614, 621, 624], "feel": 555, "look": [555, 556, 582, 588, 626], "bridg": [556, 585], "vanilla": [556, 585], "abcadaptor": 556, "__init__": [556, 573, 574, 588, 624], "query_fw_cap": 556, "query_fused_pattern": 556, "he": 556, "besid": [556, 576], "describ": [556, 571, 582, 622], "past": 556, "mainten": 556, "difficult": [556, 621], "abil": [556, 574, 582, 621], "modif": [556, 573, 582, 597], "fragment": 556, "granular": [556, 582, 585, 595, 617, 621, 626], "semant": [556, 582], "mla": [556, 617], "becom": [556, 580, 614], "explor": 556, "inspect_tensor": 556, "op_list": [556, 622], "iteration_list": 556, "inspect_typ": 556, "save_to_disk": 556, "quantization_cfg": 556, "set_tensor": 556, "tensor_dict": 556, "diagnosis_help": 556, "easier": [571, 602, 606, 609, 615], "nightli": [571, 586], "pypi": [571, 586, 604, 607], "conda": [571, 581, 586, 595, 603, 619], "forg": [571, 581, 586], "git": [571, 581, 586], "clone": [571, 586, 602, 606], "cd": [571, 578, 586], "setup": [571, 582, 586, 604, 607, 614], "instruct": [571, 576, 586, 590, 604, 607, 615, 616, 617], "ui": 571, "5000": 571, "338174d13706855fc6924cec7b3a8ae8": 571, "listen": 571, "firewal": 571, "8080": 571, "tf_enable_onednn_opt": [571, 586], "cert": 571, "path_to_cert": 571, "crt": 571, "path_to_private_kei": 571, "encrypt": 571, "insecur": 571, "expos": 571, "forfeit": 571, "client": 571, "extern": 571, "threat": 571, "button": [571, 585, 603, 609], "click": [571, 583, 585, 592, 593, 600, 603, 609, 615, 622], "pop": [571, 609], "recognit": [571, 578, 580, 614, 622], "few": [571, 615, 624], "finish": [571, 603], "chosen": 571, "synthet": 571, "plu": 571, "icon": 571, "unfold": 571, "On": [571, 617], "panel": [571, 604, 607, 609], "navig": 571, "previou": [571, 589, 614, 619, 621, 622, 624, 625], "trash": 571, "visibl": 571, "cursor": 571, "prompt": [571, 578], "confirm": 571, "bottom": 571, "pencil": 571, "light": [571, 577], "blue": 571, "color": [571, 614], "That": 571, "row": [571, 621], "arrow": 571, "line": [571, 578, 585, 592, 597, 598, 622], "checkbox": 571, "column": [571, 621], "chart": [571, 617, 620, 622], "offer": [571, 574], "conveni": [571, 589], "variat": 571, "pictur": 571, "yellow": 571, "remind": 571, "ofa": 571, "fvcore": 571, "autograd": 571, "pymoo": 571, "numba": 571, "ilsvrc": 571, "hour": [571, 624], "One": [571, 574, 578, 585, 614, 615, 624], "dialog": 571, "organ": [571, 626], "cryptographi": 571, "linux": [572, 581, 603, 609], "x86_64": 572, "aarch64": 572, "encount": 573, "consum": 573, "previous": 573, "lack": [573, 581], "faster": [573, 575, 615, 624, 627], "treat": 573, "manner": [573, 576, 591], "300": [573, 574], "input_data": 573, "customis": [573, 574], "ensp": [574, 588, 623], "imagerecord": [574, 578, 626], "image_nam": 574, "cocorecord": 574, "gt": [574, 580, 621, 623], "int64": 574, "style_transf": 574, "content": 574, "tfrecorddataset": 574, "helloworld": [574, 623], "aid": 575, "deploy": [575, 592, 609, 621], "infrastructur": 575, "expens": [576, 589, 624], "deploi": [576, 589, 624], "mobil": [576, 589, 627], "produc": 576, "logit": 576, "softmax": 576, "l": [576, 622, 624], "kd": 576, "distanc": 576, "euclidean": 576, "kullback": 576, "leibler": 576, "patient": 576, "compact": [576, 589, 595, 614], "agnost": 576, "resourc": [576, 624], "convolut": [576, 615], "ia": 576, "attach": [576, 589, 621], "shallow": 576, "deepest": 576, "deeper": 576, "10006": [576, 577], "student_output": [576, 577], "student_loss": [576, 577], "training_func_for_nc": [576, 577], "distil_loss_conf": 576, "accordingli": [576, 600], "promis": [577, 589, 614], "huge": [577, 614], "heavi": 577, "booster": 577, "degrad": [577, 614, 624], "incorpor": [577, 624], "novel": [577, 592, 603, 609], "place": [577, 586, 614, 622], "illustr": 577, "comb": 577, "distillation_criterion": [577, 589, 612], "q_conf": 577, "horovod": 578, "builtin": 578, "program": [578, 587, 590, 592, 609], "addition": [578, 624], "enable_eager_execut": 578, "yaml_file_path": 578, "pre_process": 578, "simpli": [578, 591, 592, 594, 597, 609], "evaluation_result": 578, "evaluation_time_cost": 578, "partit": [578, 614], "distributedsampl": 578, "train_sampl": 578, "train_dataset": [578, 617], "num_replica": 578, "rank": 578, "train_load": 578, "train_kwarg": 578, "adadelta": 578, "distributedoptim": 578, "named_paramet": 578, "broadcast_paramet": 578, "root_rank": 578, "broadcast_optimizer_st": 578, "set_epoch": 578, "batch_idx": 578, "zero_grad": [578, 589, 614], "nll_loss": 578, "log_interv": 578, "0f": 578, "tloss": 578, "6f": 578, "dry_run": 578, "test_func": 578, "host": 578, "num_of_process": 578, "002": 578, "ssh": [578, 609], "readm": 578, "exactli": [578, 593], "resnet50_v1": [578, 589], "resizecropimagenet": [578, 623], "realiz": [578, 588, 611, 618, 620], "tow": 578, "node1": 578, "node2": 578, "TO": [578, 594], "your_node1_nam": 578, "your_node2_nam": 578, "resnet50_fp32_pretrained_model": 578, "nc_resnet50_v1": 578, "resnet": [578, 583, 627], "varieti": [579, 616, 624], "demonstr": [579, 592, 622], "10k": [579, 583], "speedup": [579, 585, 617], "2x": [579, 585, 613], "vnni": [579, 585, 616, 617], "exchang": 580, "howev": [580, 614, 621], "hope": 580, "briefli": [580, 589, 621], "matur": 580, "major": [580, 584, 617, 621], "reus": 580, "inc_model": [580, 591], "fp32_onnx_config": 580, "verifi": 580, "gap": [580, 591], "matmulintegertofloat": 580, "matmulinteg": 580, "toolchain": 581, "bare": 581, "metal": 581, "sudo": [581, 595], "apt": [581, 586, 595, 603], "python3": 581, "dev": [581, 602, 606], "distutil": 581, "essenti": 581, "libgl1": 581, "mesa": 581, "glx": 581, "libglib2": 581, "ln": 581, "sf": 581, "usr": 581, "incompat": 581, "88": [581, 620, 627], "80": [581, 621, 622, 627], "pyobject": 581, "reinstal": 581, "importerror": 581, "libgl": 581, "No": [581, 589, 613, 615], "yum": [581, 586], "opencv": [581, 603], "pend": 581, "27": [581, 586, 627], "alemb": [581, 586], "friendli": [582, 589, 621, 626], "dive": [582, 625], "unless": 582, "purpos": [582, 590, 609, 616, 617], "let": [582, 597, 614, 616, 626], "syntax": 582, "go": [582, 604, 607, 616, 623], "up1": 582, "up2": 582, "valid_mixed_precis": 582, "per_tensor": [582, 617, 626], "addn": 582, "grappler_optim": 582, "constfold": 582, "arithmet": 582, "debug_stripp": 582, "jupyt": [583, 600, 602, 603, 606], "lab": [583, 602, 603, 604, 606, 607], "concept": [584, 620, 625], "rather": 584, "custom_metr": 584, "refin": [584, 614], "These": 585, "broad": [585, 598, 625], "420": 585, "geomean": 585, "snippet": 585, "upload": [585, 604, 607], "dispatch": 585, "qintegerop": [585, 617], "plan": 585, "success": 586, "re": [586, 609], "uninstal": [586, 609], "frequent": 586, "ask": 586, "consolid": 586, "latest": [586, 615, 619], "eas": [586, 594, 615], "along": [586, 614], "streamlin": 586, "scienc": 586, "websit": 586, "anaconda": 586, "suit": [586, 610, 622], "esri": 586, "formerli": 586, "skylak": 586, "cascad": 586, "lake": [586, 590, 615], "cooper": [586, 590, 615], "ic": [586, 615], "sapphir": 586, "rapid": 586, "hbm": 586, "arctic": 586, "sound": 586, "pont": 586, "vecchio": 586, "cento": 586, "ubuntu": [586, 613], "04": [586, 613, 627], "fortensorflow": 586, "forpytorch": 586, "onednn": [586, 617], "newer": 586, "copyright": 587, "accompani": 587, "research": [587, 621], "wish": 587, "bibtex": 587, "misc": 587, "feng": 587, "tian": 587, "hanwen": 587, "haihao": [587, 614], "shen": [587, 614], "suyu": 587, "chen": 587, "titl": [587, 610], "howpublish": 587, "year": 587, "logo": [587, 613], "atom": 587, "phi": 587, "pentium": 587, "vtune": 587, "corpor": [587, 613], "subsidiari": [587, 613], "brand": [587, 613], "claim": [587, 613], "popularli": 588, "industri": [588, 615], "label_map": 588, "decis": 588, "ap": 588, "curv": 588, "turn": [588, 603], "target_boxes_num": 588, "str_label": 588, "int_label": 588, "inturn": 588, "cocomap": 588, "vocmap": 588, "categor": 588, "multiclass": 588, "multilabel": 588, "multi_metr": 588, "newmetr": 588, "reset": 588, "reflect": [588, 613, 623], "deliv": [589, 615], "upgrad": 589, "veri": [589, 610, 617, 624], "speed": [589, 600, 614, 615, 617, 624], "fundament": 589, "comprehens": [589, 625], "kind": 589, "resort": 589, "automodelforsequenceclassif": 589, "autotoken": 589, "val_dataset": [589, 617], "val_dataload": [589, 617], "worker": [589, 617], "ping_memori": [589, 617], "formul": 589, "effort": 589, "written": 589, "onnxrt_integ": [589, 626], "onnxrt_qlinear": [589, 626], "unsupport": [589, 614], "image_tensor": [589, 626], "post_training_dynamic_qu": [589, 616, 624], "1000": [589, 626], "2000": 589, "sampling_s": [589, 626], "model_wis": [589, 626], "op_dict": 589, "op_wis": [589, 622, 626], "sigopt_api_token": [589, 620, 624], "sigopt_project_id": [589, 620, 624], "sigopt_experiment_nam": [589, 620, 624], "demo": 589, "600": [589, 627], "training_arg": 589, "emul": [589, 617], "trainer": [589, 600], "similar": [589, 616, 621, 624, 626], "maxim": [589, 614, 624], "pruning_func": 589, "num_train_epoch": [589, 614], "train_dataload": [589, 614, 617], "n_gpu": 589, "gradient_accumulation_step": 589, "clip_grad_norm_": 589, "max_grad_norm": 589, "rate": [589, 614, 617], "start_epoch": [589, 616, 626], "end_epoch": [589, 616, 626], "97": [589, 621, 627], "newli": [589, 614], "on_after_optimizer_step": [589, 614], "layer3": [589, 614], "layer2": [589, 614, 617], "lr_schedul": [589, 614], "weight_decai": [589, 626], "0004": 589, "nesterov": [589, 626], "randomresizedcrop": [589, 623], "totensor": [589, 623], "485": 589, "456": 589, "406": 589, "nepoch": 589, "cnt": 589, "loss_sum": 589, "iter_bar": 589, "tqdm": 589, "desc": 589, "teacher_logit": 589, "train_fun": 589, "training_func": 589, "recent": [589, 590], "growth": [589, 590, 614], "complex": [589, 590, 614], "significantli": [589, 590, 614, 624], "bandwidth": [589, 590], "exit_polici": [589, 626], "determinist": 589, "arbitrari": [589, 612], "reli": [589, 621], "prune_conf": 589, "quantization_aware_training_conf": 589, "aforement": 589, "inset": 589, "p_conf": [589, 612], "ssd_mobilenet_v1": 589, "benchmarkconf": 589, "half": [590, 600], "sixteen": 590, "launch": [590, 610], "3rd": [590, 615, 617, 618], "gen": [590, 615, 618], "codenam": 590, "x86": 590, "avx512": [590, 617], "vcvtne2ps2bf16": 590, "vcvtneps2bf16": 590, "vdpbf16p": 590, "consequ": 590, "avx512_bf16": 590, "cuda": [590, 592, 594, 617], "persist": 591, "brought": [591, 593, 600, 617], "tf2": 591, "h5": 591, "hybridblock": 591, "0000": 591, "saved_result": 591, "simplifi": [592, 603, 609, 614], "subsequ": [592, 609], "acquir": 592, "analysi": [592, 609, 614, 620], "heurist": [592, 609], "rule": [592, 614], "great": 592, "facilit": 592, "autocast": 592, "simultan": [592, 612, 616], "my_model": 592, "no_grad": 592, "memory_format": 592, "112": [592, 627], "rand": [592, 621], "plugin": [592, 610], "aw": [592, 600, 615, 627], "sagemak": [592, 600], "inlin": [592, 597, 600], "neural_cod": [592, 594, 596, 597, 598, 600], "superbench": 592, "enjoi": [593, 597, 600], "rebuild": [593, 602, 606], "reload": [593, 610], "modern": 594, "democrat": [594, 615], "programm": [594, 600, 609], "nano_bf16_channels_last": 594, "resnet18": [594, 627], "nano_bf16_ipex_channels_last": 594, "nano_bf16_ipex": 594, "nano_bf16": 594, "nano_fp32_channels_last": 594, "nano_fp32_ipex_channels_last": 594, "nano_fp32_ipex": 594, "nano_gpu_to_cpu": 594, "nano_int8": 594, "nano_jit_bf16_channels_last": 594, "nano_jit_bf16_ipex_channels_last": 594, "nano_jit_bf16_ipex": 594, "nano_jit_bf16": 594, "nano_jit_fp32_channels_last": 594, "nano_jit_fp32_ipex_channels_last": 594, "nano_jit_fp32_ipex": 594, "nano_jit_fp32": 594, "nano_onnxruntime_fp32": 594, "nano_onnxruntime_int8_qlinear": 594, "openvino": 594, "nano_openvino_fp32": 594, "nano_openvino_int8": 594, "bc": [595, 603], "conda_prefix": 595, "echo": 595, "tradit": [595, 614], "libjemalloc": 595, "libiomp5": 595, "home": 595, "lib": 595, "ld_preload": 595, "malloc_conf": 595, "oversize_threshold": 595, "background_thread": 595, "metadata_thp": 595, "dirty_decay_m": 595, "9000000000": 595, "muzzy_decay_m": 595, "kmp_affin": 595, "kmp_blocktim": 595, "dnnl_primitive_cache_capac": 595, "cpufreq": 595, "scaling_governor": 595, "powersav": 595, "tee": 595, "pytorch_jit_script": [596, 599], "pytorch_channels_last": [596, 599], "run_bench": 596, "patch": [596, 609], "patch_path": 596, "your_patch_path": 596, "sweep": 596, "sweep_object": 596, "bench_config": 596, "bench_featur": 596, "sai": 597, "run_glu": [597, 598], "requisit": 597, "task_nam": [597, 598], "do_ev": [597, 598], "remain": 597, "itself": 597, "run_glue_optim": 597, "static_ipex": 597, "auto_qu": 598, "v4": [598, 627], "albert": [598, 627], "sst2": 598, "alexnet": [598, 627], "pytorch_amp": 599, "optimize_for_infer": 599, "pytorch_jit_trac": 599, "pytorch_jit_script_ofi": 599, "pytorch_jit_trace_ofi": 599, "torchdynamo": 599, "pytorch_torchdynamo_jit_script": 599, "pytorch_torchdynamo_jit_trac": 599, "pytorch_torchdynamo_jit_script_ofi": 599, "pytorch_torchdynamo_jit_trace_ofi": 599, "pytorch_inc_bf16": 599, "pytorch_inc_static_quant_fx": 599, "pytorch_inc_static_quant_ipex": 599, "pytorch_inc_dynamic_qu": 599, "pytorch_ipex_fp32": 599, "pytorch_ipex_bf16": 599, "pytorch_ipex_int8_static_qu": 599, "pytorch_ipex_int8_dynamic_qu": 599, "blade": 599, "disc": 599, "pytorch_aliblad": 599, "pytorch_lightning_bf16_cpu": 599, "tensorflow_amp": 599, "keras_amp": 599, "tensorflow_inc": 599, "keras_inc": 599, "onnx_inc_static_quant_qlinear": 599, "onnx_inc_static_quant_qdq": 599, "onnx_inc_dynamic_qu": 599, "optimum": [599, 600], "pytorch_inc_huggingface_optimum_stat": 599, "pytorch_inc_huggingface_optimum_dynam": 599, "intel_extension_for_transform": 599, "bigdl": [599, 600], "nano": [599, 600], "nano_": 599, "inc_auto": 599, "delight": 600, "announc": 600, "v": [600, 609, 614, 624, 626], "500": 600, "innov": [600, 615, 625], "isa": 600, "xpu": 600, "delta": 600, "acc_delta": 600, "int8_acc": 600, "fp32_acc": 600, "ext": [602, 604, 606, 607, 608], "nodej": [602, 606], "jlpm": [602, 606], "pin": [602, 606], "yarn": [602, 606], "npm": [602, 603, 606], "lieu": [602, 606], "labextens": [602, 603, 606], "typescript": [602, 606], "watch": [602, 606], "termin": [602, 603, 606], "immedi": [602, 606, 614], "refresh": [602, 606], "wait": [602, 606, 609], "rebuilt": [602, 606], "symlink": [602, 606], "down": 603, "enter": [603, 609], "blank": 603, "cell": 603, "gain": [603, 612, 615], "mkl": 603, "jemalloc": 603, "pip3": 603, "headless": 603, "pyproject": [604, 607], "toml": [604, 607], "twine": [604, 607], "whl": [604, 607], "dist": [604, 607], "sdist": [604, 607], "bdist_wheel": [604, 607], "frontend": [604, 607], "login": [604, 607, 620], "cut": [604, 607], "fork": [604, 607], "admin_github_token": [604, 607], "pypi_token": [604, 607], "npm_token": [604, 607], "secret": [604, 607], "draft": [604, 607], "changelog": [604, 607, 608], "pkg": [604, 607], "bot": [604, 607], "pick": [604, 607, 610], "feedstock": [604, 607], "hatch": 607, "notabl": 608, "vscode": [608, 610], "daili": 609, "give": [609, 624], "advantag": [609, 614, 616, 624], "remot": 609, "market": 609, "upper": 609, "sidebar": 609, "hover": 609, "track": [609, 620], "argpars": 609, "diff": 609, "manifest": 610, "declar": 610, "palett": 610, "registercommand": 610, "amodio": 610, "tsl": 610, "matcher": 610, "dbaeumer": 610, "eslint": 610, "press": 610, "f5": 610, "ctrl": [610, 627], "hello": 610, "world": 610, "breakpoint": 610, "consol": 610, "relaunch": 610, "toolbar": 610, "node_modul": 610, "viewlet": 610, "dropdown": 610, "runner": 610, "startup": 610, "bundl": 610, "multi_object": 611, "benefit": 612, "instanti": 612, "platinum": [613, 627], "8358": 613, "manufactur": 613, "m50cyp2sbstd": 613, "se5c620": 613, "86b": 613, "0005": 613, "2202160810": 613, "microcod": 613, "0xd000332": 613, "irq": 613, "60ghz": 613, "6chz": 613, "perf": 613, "512gb": 613, "16x32gb": 613, "ddr4": 613, "3200": 613, "mt": 613, "nic": 613, "1x": 613, "ethernet": 613, "100mb": 613, "i350": 613, "gigabit": 613, "drive": 613, "intel_ssdsckkb48": 613, "447": 613, "1g": 613, "publicli": 613, "degre": 613, "mark": 613, "trademark": 613, "neuron": 614, "art": 614, "grown": 614, "unpreced": 614, "increasingli": 614, "crucial": 614, "stand": 614, "delet": 614, "due": [614, 617, 621, 622], "commonli": 614, "salient": 614, "shrink": 614, "contextu": 614, "scene": 614, "haven": 614, "lowest": [614, 624], "formula": [614, 621], "emsp": 614, "partial": [614, 617], "downstream": 614, "finetun": 614, "prone": 614, "larger": [614, 621], "co": 614, "discourag": 614, "push": [614, 621], "penal": 614, "parameter": 614, "exemplifi": 614, "complement": 614, "fortieth": 614, "pruner2": 614, "mention": 614, "readi": 614, "hesit": 614, "sst": [614, 627], "25": [614, 621, 627], "63": [614, 621, 627], "35": [614, 627], "flan": 614, "t5": 614, "english": 614, "romanian": 614, "404": [614, 627], "381": 614, "yolov5": 614, "75": [614, 621, 627], "2x1": [614, 627], "801": 614, "7895": 614, "signific": [614, 615, 617, 621], "reduct": [614, 626], "namhoon": 614, "lee": 614, "thalaiyasingam": 614, "ajanthan": 614, "philip": 614, "torr": 614, "2019": 614, "zafrir": 614, "ofir": 614, "ariel": 614, "larei": 614, "boudoukh": 614, "mosh": 614, "wasserblat": 614, "preprint": [614, 621], "2111": 614, "05754": 614, "2021": 614, "amx": 615, "4th": 615, "mleffici": 615, "dec": 615, "wechat": 615, "deepen": 615, "foundat": 615, "intellig": 615, "vmware": 615, "virtual": 615, "applianc": 615, "bitnami": 615, "nov": 615, "sota": 615, "plug": 615, "twitter": 615, "linkedin": 615, "zone": 615, "land": 615, "gcp": 615, "pat": 615, "keynot": 615, "intelon": 615, "sep": 615, "chines": 615, "aug": 615, "purif": 615, "sacrif": 615, "jun": 615, "partner": 615, "feb": 615, "joint": 615, "msft": 615, "bilibili": 615, "gestalt": 615, "ml": 615, "doubl": 615, "reconstruct": 615, "abound": 615, "lpot": [615, 619], "nextplatform": 615, "cern": 615, "gan": 615, "3dgan": 615, "iml": 615, "workshop": 615, "asplo": 615, "18": [615, 627], "highli": 615, "intelcaff": 615, "aris": 616, "henc": 616, "onnxrt_qoper": 616, "quant_aware_train": 616, "weight_compress": [616, 626], "initial_spars": [616, 626], "prune_typ": [616, 626], "basic_magnitud": [616, 626], "update_frequ": 616, "prune_domain": 616, "tile_pattern_1x1": 616, "invent": 617, "int4": 617, "cost": 617, "theoret": 617, "affin": 617, "zeropoint": 617, "asymmetr": [617, 624], "255": [617, 621], "overflow": 617, "solv": [617, 619], "fbgemm": 617, "unseen": 617, "enough": 617, "peopl": 617, "mimic": 617, "fact": 617, "ultim": 617, "pain": 617, "lossi": 617, "understand": [617, 622, 625], "philosophi": 617, "neither": 617, "nor": 617, "val_load": 617, "avg": 617, "themselv": 617, "tensorrtexecutionprovid": 617, "cudaexecutionprovid": 617, "ON": 618, "forc": 618, "postposttrainingquantconfig": 618, "bf16wrapper": 618, "retrac": 618, "site": 619, "assist": 619, "sed": 619, "your_script": 619, "backbon": 620, "interact": 620, "sigopt_experiment_id": 620, "nc": [620, 624], "certain": 620, "suffici": 620, "ordinari": 620, "capac": 620, "receiv": 620, "latenc": [620, 624], "draw": [620, 624], "mobilenet": [620, 627], "durat": 620, "8266": 620, "8372": 620, "2132": 620, "83": [620, 621, 627], "7495": 620, "8299": 620, "8294": 620, "85": [620, 621, 627], "0837": 620, "8291": 620, "4469": 620, "llm": 621, "gigant": 621, "systemat": 621, "outlier": 621, "quantif": 621, "difficulti": 621, "mathemat": 621, "allevi": 621, "coarsest": 621, "finer": [621, 624], "matric": 621, "similarli": 621, "finest": 621, "consumpt": 621, "why": [621, 622], "suppos": 621, "6839": 621, "4741": 621, "7451": 621, "9301": 621, "1742": 621, "6835": 621, "frac": 621, "q_min": 621, "q_max": 621, "clip": 621, "zp": 621, "q_x": 621, "clamp_": 621, "round_": 621, "w_q": 621, "00296431384049356": 621, "59": [621, 627], "172": 621, "192": 621, "w_dq": 621, "1220": 621, "0500": 621, "1430": 621, "2570": 621, "1890": 621, "mseloss": 621, "1983354538679123": 621, "6848": 621, "4743": 621, "7440": 621, "9308": 621, "1749": 621, "385297635664756e": 621, "affect": 621, "quantize_per_channel": 621, "x_tmp": 621, "detach": 621, "keepdim": 621, "divid": [621, 624], "dequantize_per_channel": 621, "0029": [621, 627], "0036": 621, "162": [621, 627], "48": [621, 627], "72": [621, 627], "93": [621, 627], "207": [621, 627], "139": [621, 627], "6837": 621, "4734": 621, "1751": 621, "6821": 621, "637690492221736e": 621, "6376e": 621, "3852e": 621, "cdot": 621, "quantize_per_tensor_absmax": 621, "n_bit": 621, "div_": 621, "0806": 621, "7589": 621, "6038": 621, "3815": 621, "5040": 621, "7174": 621, "5444": 621, "5826": 621, "7772": 621, "5555": 621, "3740": 621, "3253": 621, "0698": 621, "1381": 621, "5972": 621, "0086": 621, "0737": 621, "8298": 621, "6883": 621, "2991": 621, "1601": 621, "6506": 621, "8246": 621, "3924": 621, "3845": 621, "8768": 621, "w_scale": 621, "x_q": 621, "x_scale": 621, "84": [621, 627], "0059755356051027775": 621, "89": [621, 627], "119": [621, 627], "57": [621, 627], "91": [621, 627], "006533813662827015": 621, "y_q": 621, "17509": 621, "7608": 621, "4055": 621, "16599": 621, "21020": 621, "10016": 621, "9860": 621, "22444": 621, "y_dq": 621, "6836": 621, "2970": 621, "1583": 621, "6481": 621, "8207": 621, "3911": 621, "3850": 621, "8763": 621, "prove": 621, "simplic": 621, "middl": 621, "denot": 621, "fp1": 621, "fp2": 621, "subsect": [621, 626], "explain": 621, "suppress": 621, "straightforward": 621, "intuit": 621, "x1": [621, 624], "x2": [621, 624], "herebi": 621, "sq": 621, "torchscript": 621, "overhead": 621, "stai": 621, "hardtanh": 621, "t5norm": 621, "llamanorm": 621, "groupnorm": 621, "lambada": 621, "sweet": 621, "spot": 621, "region": 621, "bigscienc": 621, "560m": 621, "65": [621, 627], "44": [621, 627], "66": [621, 627], "76": [621, 627], "1b7": 621, "71": [621, 627], "43": [621, 627], "67": [621, 627], "78": [621, 623, 627], "56": [621, 627], "58": [621, 627], "55": [621, 627], "3b": 621, "73": [621, 627], "69": [621, 627], "74": [621, 627], "7b1": 621, "77": [621, 627], "46": [621, 627], "82": [621, 627], "facebook": 621, "125m": 621, "70": [621, 627], "94": [621, 623, 627], "79": [621, 622, 627], "60": [621, 627], "81": [621, 627], "26": [621, 627], "39": [621, 627], "68": [621, 623, 627], "eleutherai": 621, "6b": 621, "96": [621, 627], "jason": 621, "wei": 621, "emerg": 621, "transact": 621, "yvinec": 621, "edouard": 621, "proceed": 621, "cvf": 621, "winter": 621, "xiui": 621, "2209": 621, "13325": 621, "xiao": 621, "guangxuan": 621, "2211": 621, "10438": 621, "discov": 622, "valuabl": 622, "instrument": 622, "writer": 622, "_pre_eval_hook": 622, "_post_eval_hook": 622, "submodul": 622, "whitelist": 622, "_recordingobserv": 622, "output_tensors_dict": 622, "current_it": 622, "get_tensor_valu": 622, "_observer_forward_hook": 622, "activation_post_process": 622, "_add_observer_": 622, "named_children": 622, "leaf": 622, "add_modul": 622, "register_forward_hook": 622, "dump_tim": 622, "summarywrit": 622, "_acc": 622, "tune_": 622, "add_graph": 622, "get_observer_dict": 622, "observer_dict": 622, "is_quant": 622, "add_histogram": 622, "bind_al": 622, "logdir_spec": 622, "tune_0_acc0": 622, "tune_1": 622, "tune_1_acc0": 622, "four": 622, "baseline_acc_0": 622, "776": 622, "tune_1_acc_0": 622, "095": 622, "runs_v3": 622, "image_recognit": 622, "run_tuning_dump_tensor": 622, "sh": 622, "inceptionv3": 622, "v0": 622, "cg": 622, "conv0": 622, "bash": 622, "run_tun": 622, "topologi": 622, "inception_v3": 622, "dataset_loc": 622, "inceptionv3_fp32_pretrained_model": 622, "nc_inceptionv3": 622, "inceptionv3_dump_tensor": 622, "poor": 622, "eightbit": 622, "disappear": 622, "centercrop": 623, "randomcrop": 623, "cropres": 623, "decodeimag": 623, "jpeg": 623, "encodejp": 623, "alignimagechannel": 623, "116": 623, "103": 623, "017": 623, "bilinearimagenet": [623, 626], "topilimag": 623, "padding_mod": 623, "border": 623, "pixel": 623, "colorjitt": 623, "bright": 623, "satur": 623, "hue": 623, "jitter": 623, "tondarrai": 623, "quickli": [624, 625], "travers": 624, "human": 624, "concret": 624, "insight": 624, "aggress": 624, "classic": 624, "six": 624, "At": 624, "ii": 624, "iii": 624, "post_training_auto_qu": 624, "iv": 624, "vi": 624, "increment": 624, "primari": 624, "highest": 624, "spent": 624, "hawq_v2_loss": 624, "model_loss": 624, "black": 624, "come": 624, "compli": 624, "posterior": 624, "focu": 624, "short": 624, "never": 624, "loglevel": 624, "endlessli": 624, "perspect": 624, "smbo": 624, "trial": 624, "appl": 624, "surrog": 624, "repeat": 624, "quantil": 624, "densiti": 624, "parzen": 624, "greatest": 624, "dai": 624, "next_tune_cfg": 624, "overridden": 624, "cluster": 624, "seamlessli": 624, "mpi": 624, "replic": 624, "replica": 624, "fed": 624, "handler": 624, "synchron": 624, "slave": 624, "abctunestrategi": 624, "familiar": 625, "mobilenet_v1": 626, "hyper": 626, "40": [626, 627], "06": [626, 627], "beta_1": 626, "beta_2": 626, "epsilon": 626, "sparsecategoricalcrossentropi": 626, "sum_over_batch_s": 626, "from_logit": 626, "54": [626, 627], "19": [626, 627], "overal": 626, "8380": 627, "visit": 627, "performancethroughput": 627, "sec": 627, "86": 627, "00": 627, "170": 627, "82x": 627, "92": 627, "85x": 627, "61": 627, "83x": 627, "densenet": 627, "121": 627, "274": 627, "148": 627, "161": 627, "132": 627, "39x": 627, "169": 627, "38": 627, "36": 627, "191": 627, "118": 627, "61x": 627, "cnn": 627, "incept": 627, "37": 627, "84x": 627, "resnet101": 627, "21x": 627, "70x": 627, "51": 627, "14x": 627, "955": 627, "328": 627, "91x": 627, "709": 627, "282": 627, "51x": 627, "v3": 627, "337": 627, "160": 627, "11x": 627, "438": 627, "204": 627, "223": 627, "105": 627, "12x": 627, "10x": 627, "47": 627, "1347": 627, "439": 627, "07x": 627, "1192": 627, "492": 627, "42x": 627, "412": 627, "376": 627, "662": 627, "397": 627, "66x": 627, "299": 627, "23": 627, "154": 627, "93x": 627, "476": 627, "227": 627, "fashion": 627, "2734": 627, "1299": 627, "498": 627, "178": 627, "79x": 627, "427": 627, "173": 627, "47x": 627, "resnetv2": 627, "194": 627, "146": 627, "33x": 627, "237": 627, "187": 627, "27x": 627, "152": 627, "155": 627, "38x": 627, "302": 627, "215": 627, "40x": 627, "346": 627, "312": 627, "277": 627, "60x": 627, "273": 627, "31x": 627, "18x": 627, "53x": 627, "24x": 627, "vgg16": 627, "219": 627, "vgg19": 627, "193": 627, "11506": 627, "9665": 627, "19x": 627, "xception": 627, "262": 627, "137": 627, "barthez": 627, "143": 627, "02x": 627, "20x": 627, "209": 627, "08x": 627, "221": 627, "stsb": 627, "218": 627, "16x": 627, "62": 627, "57x": 627, "55x": 627, "56x": 627, "53": 627, "89x": 627, "blendcnn": 627, "4885": 627, "3715": 627, "camembert": 627, "206": 627, "09x": 627, "deberta": 627, "125": 627, "366": 627, "197": 627, "399": 627, "flaubert": 627, "592": 627, "385": 627, "54x": 627, "wikitext": 627, "hubert": 627, "446": 627, "181": 627, "46x": 627, "layoutlm": 627, "longform": 627, "49": 627, "mbart": 627, "625": 627, "451": 627, "lvwerra": 627, "pegasu": 627, "samsum": 627, "peleenet": 627, "402": 627, "29x": 627, "pokemon": 627, "275": 627, "334": 627, "48x": 627, "reform": 627, "crime": 627, "punish": 627, "153": 627, "06x": 627, "657": 627, "327": 627, "01x": 627, "812": 627, "344": 627, "36x": 627, "360": 627, "23x": 627, "resnext101": 627, "32x8d": 627, "182": 627, "squeezebert": 627, "195": 627, "150": 627, "30x": 627, "75x": 627, "transfo": 627, "xl": 627, "41x": 627, "wave2vec2": 627, "22x": 627, "102": 627, "00x": 627, "115": 627, "17x": 627, "yolo": 627, "232": 627, "28x": 627, "664": 627, "329": 627, "832": 627, "338": 627, "433": 627, "164": 627, "63x": 627, "836": 627, "1396": 627, "463": 627, "90x": 627, "159": 627, "32x": 627, "968": 627, "473": 627, "05x": 627, "958": 627, "477": 627, "arcfac": 627, "126": 627, "78x": 627, "298": 627, "124": 627, "624": 627, "254": 627, "45x": 627, "caffenet": 627, "1432": 627, "540": 627, "65x": 627, "1460": 627, "357": 627, "265": 627, "35x": 627, "86x": 627, "524": 627, "duc": 627, "efficientnet": 627, "1211": 627, "758": 627, "856": 627, "762": 627, "emot": 627, "ferplu": 627, "925": 627, "694": 627, "fcn": 627, "25x": 627, "googlenet": 627, "771": 627, "571": 627, "763": 627, "579": 627, "hf": 627, "156": 627, "multilingu": 627, "99x": 627, "199": 627, "104": 627, "73x": 627, "449": 627, "74x": 627, "l12": 627, "h384": 627, "466": 627, "247": 627, "88x": 627, "l6": 627, "523": 627, "354": 627, "183": 627, "107": 627, "spanbert": 627, "208": 627, "795": 627, "780": 627, "591": 627, "515": 627, "15x": 627, "2370": 627, "1526": 627, "2216": 627, "1506": 627, "2078": 627, "1028": 627, "1762": 627, "76x": 627, "mobilenetv2": 627, "2615": 627, "1645": 627, "59x": 627, "2461": 627, "1674": 627, "766": 627, "431": 627, "77x": 627, "575": 627, "430": 627, "34x": 627, "747": 627, "564": 627, "594": 627, "590": 627, "643": 627, "253": 627, "shufflenet": 627, "2354": 627, "1461": 627, "1850": 627, "1368": 627, "squeezenet": 627, "2484": 627, "1912": 627, "2526": 627, "1911": 627, "710": 627, "549": 627, "622": 627, "497": 627, "652": 627, "507": 627, "573": 627, "470": 627, "527": 627, "396": 627, "68x": 627, "tini": 627, "647": 627, "514": 627, "26x": 627, "ultrafac": 627, "314": 627, "50x": 627, "304": 627, "316": 627, "315": 627, "zfnet": 627, "462": 627, "268": 627, "72x": 627, "465": 627, "62x": 627, "436": 627, "270": 627, "429": 627, "92x": 627, "94x": 627, "331": 627, "242": 627, "37x": 627, "98x": 627, "taskdataset": 627, "accuracyspars": 627, "ratiospars": 627, "commentsbalancedor": 627, "unbalanc": 627, "mini": 627, "answeringsquad": 627, "87f1": 627, "momentumunbalanc": 627, "momentumbalanc": 627, "90f1": 627, "59f1": 627, "23f1": 627, "classificationmrpc": 627, "52f1": 627, "26f1": 627, "classificationsst": 627, "61accuraci": 627, "recognitionimagenet": 627, "95top1": 627, "v5s6": 627, "detectioncoco": 627, "ap0": 627, "6ap0": 627, "393": 627, "584": 627, "34f1": 627, "lassounbalanc": 627, "classificationmnli": 627, "mm": 627, "allbalanc": 627, "32accuraci": 627, "sensitivitybalanc": 627, "classificationqqp": 627, "classificationqnli": 627, "54accuraci": 627, "em": 627, "7965": 627, "wideresnet40": 627, "9522": 627, "8178": 627, "0213": 627, "8235": 627, "027": 627, "5494": 627, "7153": 627, "5540": 627, "0046": 627, "5523": 627, "vgg": 627, "bn": 627, "7022": 627, "7415": 627, "7025": 627, "0003": 627, "wip": 627, "6739": 627, "7399": 627, "6845": 627, "0106": 627, "7034": 627, "8382": 627, "bilstm": 627, "8314": 627, "9403": 627, "9048": 627, "0734": 627, "7323": 627, "8256": 627, "8084": 627, "8814": 627, "7442": 627, "8371": 627, "0119": 627, "0115": 627, "tinybert": 627, "8018": 627, "8044": 627, "8363": 627, "8411": 627, "8025": 627, "8074": 627, "0007": 627, "0030": 627, "8626": 627, "8213": 627, "9091": 627, "8782": 627, "8684": 627, "8259": 627, "0058": 627, "distilroberta": 627, "6057": 627, "6455": 627, "6187": 627, "0130": 627, "c6i": 627, "2xlarg": 627, "c6a": 627, "c6g": 627, "a100cuda": 627, "executionprovid": 627}, "objects": {"": [[0, 0, 0, "-", "644ec953a7dc_pruning_support"], [1, 0, 0, "-", "6ece06672ed3_v1_14"], [2, 0, 0, "-", "6f0d0f71d92e_v1_13"], [3, 0, 0, "-", "9e89549a08c8_v1_11"], [4, 0, 0, "-", "block_mask"], [5, 0, 0, "-", "env"], [315, 0, 0, "-", "neural_compressor"]], "6ece06672ed3_v1_14": [[1, 1, 1, "ece06672ed3_v1_14.update_dataloaders", "update_dataloaders"], [1, 1, 1, "ece06672ed3_v1_14.update_transformations", "update_transformations"]], "env": [[5, 1, 1, "", "run_migrations_offline"], [5, 1, 1, "", "run_migrations_online"]], "neural_compressor": [[7, 0, 0, "-", "adaptor"], [157, 0, 0, "-", "algorithm"], [160, 0, 0, "-", "benchmark"], [164, 0, 0, "-", "compression"], [178, 0, 0, "-", "conf"], [180, 0, 0, "-", "config"], [181, 0, 0, "-", "contrib"], [206, 0, 0, "-", "data"], [262, 0, 0, "-", "experimental"], [322, 0, 0, "-", "metric"], [324, 0, 0, "-", "mix_precision"], [326, 0, 0, "-", "model"], [334, 0, 0, "-", "objective"], [335, 0, 0, "-", "quantization"], [343, 0, 0, "-", "strategy"], [355, 0, 0, "-", "template"], [356, 0, 0, "-", "training"], [360, 0, 0, "-", "utils"], [502, 0, 0, "-", "ux"], [548, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[6, 0, 0, "-", "adaptor"], [8, 0, 0, "-", "keras"], [12, 0, 0, "-", "keras_utils"], [16, 0, 0, "-", "mxnet"], [17, 0, 0, "-", "mxnet_utils"], [19, 0, 0, "-", "onnxrt"], [22, 0, 0, "-", "ox_utils"], [45, 0, 0, "-", "pytorch"], [46, 0, 0, "-", "query"], [47, 0, 0, "-", "tensorflow"], [111, 0, 0, "-", "tf_utils"], [149, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[6, 2, 1, "", "Adaptor"], [6, 1, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[8, 2, 1, "", "KerasAdaptor"], [8, 2, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras_utils": [[9, 0, 0, "-", "conv2d"], [10, 0, 0, "-", "dense"], [11, 0, 0, "-", "depthwise_conv2d"], [13, 0, 0, "-", "pool2d"], [14, 0, 0, "-", "quantizer"], [15, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[16, 2, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[18, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[18, 2, 1, "", "CalibCollector"], [18, 2, 1, "", "CalibData"], [18, 2, 1, "", "CollectorBase"], [18, 2, 1, "", "DataIterLoader"], [18, 2, 1, "", "DataLoaderWrap"], [18, 2, 1, "", "NameCollector"], [18, 2, 1, "", "OpType"], [18, 2, 1, "", "TensorCollector"], [18, 1, 1, "", "amp_convert"], [18, 1, 1, "", "calib_model"], [18, 1, 1, "", "check_mx_version"], [18, 1, 1, "", "combine_capabilities"], [18, 1, 1, "", "create_data_example"], [18, 1, 1, "", "distribute_calib_tensors"], [18, 1, 1, "", "ensure_list"], [18, 1, 1, "", "fuse"], [18, 1, 1, "", "get_framework_name"], [18, 1, 1, "", "is_model_quantized"], [18, 1, 1, "", "isiterable"], [18, 1, 1, "", "make_module"], [18, 1, 1, "", "make_nc_model"], [18, 1, 1, "", "make_symbol_block"], [18, 1, 1, "", "ndarray_to_device"], [18, 1, 1, "", "parse_tune_config"], [18, 1, 1, "", "prepare_dataloader"], [18, 1, 1, "", "prepare_model"], [18, 1, 1, "", "prepare_model_data"], [18, 1, 1, "", "quantize_sym_model"], [18, 1, 1, "", "query_quantizable_nodes"], [18, 1, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[19, 2, 1, "", "ONNXRT_IntegerOpsAdaptor"], [19, 2, 1, "", "ONNXRT_QDQAdaptor"], [19, 2, 1, "", "ONNXRT_QLinearOpsAdaptor"], [19, 2, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[20, 0, 0, "-", "calibration"], [21, 0, 0, "-", "calibrator"], [34, 0, 0, "-", "operators"], [43, 0, 0, "-", "quantizer"], [44, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[20, 2, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[21, 2, 1, "", "CalibratorBase"], [21, 2, 1, "", "HistogramCollector"], [21, 2, 1, "", "KLCalibrator"], [21, 2, 1, "", "MinMaxCalibrator"], [21, 2, 1, "", "PercentileCalibrator"], [21, 1, 1, "", "calib_registry"], [21, 1, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[23, 0, 0, "-", "activation"], [24, 0, 0, "-", "argmax"], [25, 0, 0, "-", "attention"], [26, 0, 0, "-", "binary_op"], [27, 0, 0, "-", "concat"], [28, 0, 0, "-", "conv"], [29, 0, 0, "-", "direct_q8"], [30, 0, 0, "-", "embed_layernorm"], [31, 0, 0, "-", "gather"], [32, 0, 0, "-", "gavgpool"], [33, 0, 0, "-", "gemm"], [35, 0, 0, "-", "lstm"], [36, 0, 0, "-", "matmul"], [37, 0, 0, "-", "maxpool"], [38, 0, 0, "-", "ops"], [39, 0, 0, "-", "pad"], [40, 0, 0, "-", "pooling"], [41, 0, 0, "-", "resize"], [42, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[23, 2, 1, "", "ActivationOperator"], [23, 2, 1, "", "QActivationOperator"], [23, 2, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[24, 2, 1, "", "ArgMaxOperator"], [24, 2, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[25, 2, 1, "", "AttentionOperator"], [25, 2, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[26, 2, 1, "", "BinaryOperator"], [26, 2, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[27, 2, 1, "", "ConcatOperator"], [27, 2, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[28, 2, 1, "", "ConvOperator"], [28, 2, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[29, 2, 1, "", "Direct8BitOperator"], [29, 2, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[30, 2, 1, "", "EmbedLayerNormalizationOperator"], [30, 2, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[31, 2, 1, "", "GatherOperator"], [31, 2, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[32, 2, 1, "", "GlobalAveragePoolOperator"], [32, 2, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[33, 2, 1, "", "GemmOperator"], [33, 2, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[35, 2, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[36, 2, 1, "", "MatMulOperator"], [36, 2, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[37, 2, 1, "", "MaxPoolOperator"], [37, 2, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[38, 2, 1, "", "Operator"], [38, 2, 1, "", "QOperator"], [38, 1, 1, "", "op_registry"], [38, 1, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[39, 2, 1, "", "PadOperator"], [39, 2, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[40, 2, 1, "", "PoolOperator"], [40, 2, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[41, 2, 1, "", "QResizeOperator"], [41, 2, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[42, 2, 1, "", "QSplitOperator"], [42, 2, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[43, 2, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[44, 2, 1, "", "QuantFormat"], [44, 2, 1, "", "QuantType"], [44, 2, 1, "", "QuantizationMode"], [44, 2, 1, "", "QuantizedInitializer"], [44, 2, 1, "", "QuantizedValue"], [44, 2, 1, "", "QuantizedValueType"], [44, 2, 1, "", "ValueInfo"], [44, 1, 1, "", "adjust_weights_per_input"], [44, 1, 1, "", "adjust_weights_per_op"], [44, 1, 1, "", "attribute_to_kwarg"], [44, 1, 1, "", "calculate_scale_zp"], [44, 1, 1, "", "cast_tensor"], [44, 1, 1, "", "collate_preds"], [44, 1, 1, "", "dequantize_data"], [44, 1, 1, "", "dequantize_data_with_scale_zero"], [44, 1, 1, "", "dtype_to_name"], [44, 1, 1, "", "find_by_name"], [44, 1, 1, "", "float_to_bfloat16"], [44, 1, 1, "", "float_to_float16"], [44, 1, 1, "", "fold_scale"], [44, 1, 1, "", "get_smooth_scales_per_input"], [44, 1, 1, "", "get_smooth_scales_per_op"], [44, 1, 1, "", "insert_smooth_mul_op_per_input"], [44, 1, 1, "", "insert_smooth_mul_op_per_op"], [44, 1, 1, "", "is_B_transposed"], [44, 1, 1, "", "make_dquant_node"], [44, 1, 1, "", "make_quant_node"], [44, 1, 1, "", "quantize_data"], [44, 1, 1, "", "quantize_data_per_channel"], [44, 1, 1, "", "quantize_data_with_scale_zero"], [44, 1, 1, "", "quantize_nparray"], [44, 1, 1, "", "remove_init_from_model_input"], [44, 1, 1, "", "split_shared_bias"], [44, 1, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.pytorch": [[45, 2, 1, "", "PyTorchAdaptor"], [45, 2, 1, "", "PyTorchQuery"], [45, 2, 1, "", "PyTorch_FXAdaptor"], [45, 2, 1, "", "PyTorch_IPEXAdaptor"], [45, 2, 1, "", "TemplateAdaptor"], [45, 1, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[46, 2, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[47, 2, 1, "", "TensorFlowAdaptor"], [47, 2, 1, "", "TensorflowQuery"], [47, 2, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[48, 0, 0, "-", "graph_converter"], [49, 0, 0, "-", "graph_converter_without_calib"], [87, 0, 0, "-", "graph_rewriter"], [110, 0, 0, "-", "graph_util"], [112, 0, 0, "-", "quantize_graph"], [139, 0, 0, "-", "quantize_graph_common"], [140, 0, 0, "-", "tf2onnx_converter"], [143, 0, 0, "-", "transform_graph"], [146, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, 2, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, 2, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[51, 0, 0, "-", "bf16"], [76, 0, 0, "-", "generic"], [86, 0, 0, "-", "graph_base"], [95, 0, 0, "-", "int8"], [101, 0, 0, "-", "onnx"], [106, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, 2, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[52, 0, 0, "-", "convert_add_to_biasadd"], [53, 0, 0, "-", "convert_layout"], [54, 0, 0, "-", "convert_leakyrelu"], [55, 0, 0, "-", "convert_nan_to_random"], [56, 0, 0, "-", "convert_placeholder_to_const"], [57, 0, 0, "-", "dequantize_cast_optimizer"], [58, 0, 0, "-", "dilated_contraction"], [59, 0, 0, "-", "dummy_biasadd"], [60, 0, 0, "-", "expanddims_optimizer"], [61, 0, 0, "-", "fetch_weight_from_reshape"], [62, 0, 0, "-", "fold_batch_norm"], [63, 0, 0, "-", "fold_constant"], [64, 0, 0, "-", "fuse_biasadd_add"], [65, 0, 0, "-", "fuse_column_wise_mul"], [66, 0, 0, "-", "fuse_conv_with_math"], [67, 0, 0, "-", "fuse_decomposed_bn"], [68, 0, 0, "-", "fuse_decomposed_in"], [69, 0, 0, "-", "fuse_gelu"], [70, 0, 0, "-", "fuse_layer_norm"], [71, 0, 0, "-", "fuse_pad_with_conv"], [72, 0, 0, "-", "fuse_pad_with_fp32_conv"], [73, 0, 0, "-", "fuse_reshape_transpose"], [74, 0, 0, "-", "graph_cse_optimizer"], [75, 0, 0, "-", "grappler_pass"], [77, 0, 0, "-", "insert_print_node"], [78, 0, 0, "-", "move_squeeze_after_relu"], [79, 0, 0, "-", "pre_optimize"], [80, 0, 0, "-", "remove_training_nodes"], [81, 0, 0, "-", "rename_batch_norm"], [82, 0, 0, "-", "split_shared_input"], [83, 0, 0, "-", "strip_equivalent_nodes"], [84, 0, 0, "-", "strip_unused_nodes"], [85, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[52, 2, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[53, 2, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[54, 2, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[55, 2, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[56, 2, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[57, 2, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, 2, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, 2, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, 2, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, 2, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, 2, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, 2, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, 2, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, 2, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, 2, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, 2, 1, "", "FuseDecomposedBNOptimizer"], [67, 1, 1, "", "bypass_reshape"], [67, 1, 1, "", "get_const_dim_count"], [67, 1, 1, "", "node_from_map"], [67, 1, 1, "", "node_name_from_input"], [67, 1, 1, "", "valid_reshape_inputs"], [67, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, 2, 1, "", "FuseDecomposedINOptimizer"], [68, 1, 1, "", "bypass_reshape"], [68, 1, 1, "", "get_const_dim_count"], [68, 1, 1, "", "node_from_map"], [68, 1, 1, "", "node_name_from_input"], [68, 1, 1, "", "valid_reshape_inputs"], [68, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, 2, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, 2, 1, "", "FuseLayerNormOptimizer"], [70, 1, 1, "", "node_from_map"], [70, 1, 1, "", "node_name_from_input"], [70, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, 2, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, 2, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, 2, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, 2, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, 2, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, 2, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, 2, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, 2, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, 2, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, 2, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, 2, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, 2, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, 2, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, 2, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, 2, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[88, 0, 0, "-", "freeze_fake_quant"], [89, 0, 0, "-", "freeze_value"], [90, 0, 0, "-", "freeze_value_without_calib"], [91, 0, 0, "-", "fuse_conv_redundant_dequantize"], [92, 0, 0, "-", "fuse_conv_requantize"], [93, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [94, 0, 0, "-", "fuse_matmul_requantize"], [96, 0, 0, "-", "meta_op_optimizer"], [97, 0, 0, "-", "post_hostconst_converter"], [98, 0, 0, "-", "post_quantized_op_cse"], [99, 0, 0, "-", "rnn_convert"], [100, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, 2, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, 2, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, 2, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, 2, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, 2, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, 2, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, 2, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [94, 2, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [94, 2, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [94, 2, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, 2, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, 2, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, 2, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, 2, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, 2, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[102, 0, 0, "-", "onnx_graph"], [103, 0, 0, "-", "onnx_node"], [104, 0, 0, "-", "onnx_schema"], [105, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, 2, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, 2, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, 2, 1, "", "OnnxOpSchema"], [104, 1, 1, "", "get_max_supported_opset_version"], [104, 1, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, 2, 1, "", "SeqType"], [105, 1, 1, "", "add_port_to_name"], [105, 1, 1, "", "are_shapes_equal"], [105, 1, 1, "", "assert_error"], [105, 1, 1, "", "compute_const_folding_using_tf"], [105, 1, 1, "", "convert_tensorflow_tensor_to_onnx"], [105, 1, 1, "", "find_opset"], [105, 1, 1, "", "get_index_from_strided_slice_of_shape"], [105, 1, 1, "", "get_subgraphs_from_onnx"], [105, 1, 1, "", "get_tensorflow_node_attr"], [105, 1, 1, "", "get_tensorflow_node_shape_attr"], [105, 1, 1, "", "get_tensorflow_tensor_data"], [105, 1, 1, "", "get_tensorflow_tensor_shape"], [105, 1, 1, "", "infer_onnx_shape_dtype"], [105, 1, 1, "", "initialize_name_counter"], [105, 1, 1, "", "is_list_or_tuple"], [105, 1, 1, "", "is_onnx_domain"], [105, 1, 1, "", "make_onnx_inputs_outputs"], [105, 1, 1, "", "make_onnx_shape"], [105, 1, 1, "", "map_numpy_to_onnx_dtype"], [105, 1, 1, "", "map_onnx_to_numpy_type"], [105, 1, 1, "", "map_tensorflow_dtype"], [105, 1, 1, "", "read_tensorflow_node_attrs"], [105, 1, 1, "", "save_protobuf"], [105, 1, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[107, 0, 0, "-", "insert_qdq_pattern"], [108, 0, 0, "-", "merge_duplicated_qdq"], [109, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, 2, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, 2, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, 2, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, 2, 1, "", "GraphAnalyzer"], [110, 2, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[114, 0, 0, "-", "qat"], [130, 0, 0, "-", "qdq"], [132, 0, 0, "-", "quantize_graph_base"], [133, 0, 0, "-", "quantize_graph_bn"], [134, 0, 0, "-", "quantize_graph_concatv2"], [135, 0, 0, "-", "quantize_graph_conv"], [136, 0, 0, "-", "quantize_graph_for_intel_cpu"], [137, 0, 0, "-", "quantize_graph_matmul"], [138, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, 0, 0, "-", "fake_quantize"], [115, 0, 0, "-", "quantize_config"], [116, 0, 0, "-", "quantize_helper"], [117, 0, 0, "-", "quantize_layers"], [122, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, 2, 1, "", "FakeQuantize"], [113, 2, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, 2, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, 1, 1, "", "init_quantize_config"], [116, 1, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[118, 0, 0, "-", "optimize_layer"], [119, 0, 0, "-", "quantize_layer_add"], [120, 0, 0, "-", "quantize_layer_base"], [121, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, 1, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, 2, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, 2, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, 2, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, 2, 1, "", "QuantizeWrapper"], [122, 2, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[123, 0, 0, "-", "fuse_qdq_bn"], [124, 0, 0, "-", "fuse_qdq_concatv2"], [125, 0, 0, "-", "fuse_qdq_conv"], [126, 0, 0, "-", "fuse_qdq_deconv"], [127, 0, 0, "-", "fuse_qdq_in"], [128, 0, 0, "-", "fuse_qdq_matmul"], [129, 0, 0, "-", "fuse_qdq_pooling"], [131, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, 2, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, 2, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, 2, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, 2, 1, "", "QuantizeGraphBase"], [132, 2, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, 2, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, 2, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[140, 2, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[141, 0, 0, "-", "bias_correction"], [142, 0, 0, "-", "graph_transform_base"], [144, 0, 0, "-", "insert_logging"], [145, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[141, 2, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[142, 2, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[144, 2, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[145, 2, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[146, 1, 1, "", "collate_tf_preds"], [146, 1, 1, "", "disable_random"], [146, 1, 1, "", "fix_ref_type_of_graph_def"], [146, 1, 1, "", "generate_feed_dict"], [146, 1, 1, "", "get_estimator_graph"], [146, 1, 1, "", "get_graph_def"], [146, 1, 1, "", "get_input_output_node_names"], [146, 1, 1, "", "get_model_input_shape"], [146, 1, 1, "", "get_tensor_by_name"], [146, 1, 1, "", "get_tensor_val_from_graph_node"], [146, 1, 1, "", "int8_node_name_reverse"], [146, 1, 1, "", "is_ckpt_format"], [146, 1, 1, "", "is_saved_model_format"], [146, 1, 1, "", "iterator_sess_run"], [146, 1, 1, "", "read_graph"], [146, 1, 1, "", "strip_equivalent_nodes"], [146, 1, 1, "", "strip_unused_nodes"], [146, 1, 1, "", "tf_diagnosis_helper"], [146, 1, 1, "", "version1_eq_version2"], [146, 1, 1, "", "version1_gt_version2"], [146, 1, 1, "", "version1_gte_version2"], [146, 1, 1, "", "version1_lt_version2"], [146, 1, 1, "", "version1_lte_version2"], [146, 1, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[147, 0, 0, "-", "bf16_convert"], [148, 0, 0, "-", "hawq_metric"], [150, 0, 0, "-", "model_wrapper"], [151, 0, 0, "-", "pattern_detector"], [152, 0, 0, "-", "smooth_quant"], [153, 0, 0, "-", "symbolic_trace"], [154, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[147, 2, 1, "", "BF16ModuleWrapper"], [147, 1, 1, "", "Convert"], [147, 1, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[148, 2, 1, "", "HessianTrace"], [148, 2, 1, "", "Node_collector"], [148, 1, 1, "", "compare_weights"], [148, 1, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[151, 2, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[152, 2, 1, "", "GraphTrace"], [152, 2, 1, "", "TorchSmoothQuant"], [152, 1, 1, "", "get_module"], [152, 1, 1, "", "set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[153, 1, 1, "", "symbolic_trace"], [153, 1, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.util": [[154, 1, 1, "", "append_attr"], [154, 1, 1, "", "auto_copy"], [154, 1, 1, "", "calculate_quant_min_max"], [154, 1, 1, "", "check_cfg_and_qconfig"], [154, 1, 1, "", "collate_torch_preds"], [154, 1, 1, "", "fetch_module"], [154, 1, 1, "", "generate_activation_observer"], [154, 1, 1, "", "get_depth"], [154, 1, 1, "", "get_dict_at_depth"], [154, 1, 1, "", "get_element_under_depth"], [154, 1, 1, "", "get_embedding_contiguous"], [154, 1, 1, "", "get_example_input"], [154, 1, 1, "", "get_fallback_order"], [154, 1, 1, "", "get_mse_order_per_fp32"], [154, 1, 1, "", "get_mse_order_per_int8"], [154, 1, 1, "", "get_op_type_by_name"], [154, 1, 1, "", "get_quantizable_ops_from_cfgs"], [154, 1, 1, "", "get_torch_version"], [154, 1, 1, "", "input2tuple"], [154, 1, 1, "", "is_fused_module"], [154, 1, 1, "", "match_datatype_pattern"], [154, 1, 1, "", "paser_cfgs"], [154, 1, 1, "", "set_module"], [154, 1, 1, "", "simple_inference"], [154, 1, 1, "", "update_sq_scale"]], "neural_compressor.algorithm": [[155, 0, 0, "-", "algorithm"], [156, 0, 0, "-", "fast_bias_correction"], [158, 0, 0, "-", "smooth_quant"], [159, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[155, 2, 1, "", "ALGORITHMS"], [155, 2, 1, "", "Algorithm"], [155, 2, 1, "", "AlgorithmScheduler"], [155, 1, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[156, 2, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[158, 2, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[159, 2, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[160, 1, 1, "", "benchmark_with_raw_cmd"], [160, 1, 1, "", "call_one"], [160, 1, 1, "", "config_instance"], [160, 1, 1, "", "fit"], [160, 1, 1, "", "generate_prefix"], [160, 1, 1, "", "get_architecture"], [160, 1, 1, "", "get_bounded_threads"], [160, 1, 1, "", "get_core_ids"], [160, 1, 1, "", "get_physical_ids"], [160, 1, 1, "", "get_threads"], [160, 1, 1, "", "get_threads_per_core"], [160, 1, 1, "", "run_instance"], [160, 1, 1, "", "set_all_env_var"], [160, 1, 1, "", "set_env_var"], [160, 1, 1, "", "summary_benchmark"]], "neural_compressor.compression": [[161, 0, 0, "-", "callbacks"], [163, 0, 0, "-", "distillation"], [166, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[161, 2, 1, "", "BaseCallbacks"], [161, 2, 1, "", "DistillationCallbacks"], [161, 2, 1, "", "PruningCallbacks"], [161, 2, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[161, 3, 1, "", "_epoch_ran"], [161, 3, 1, "", "best_model"], [161, 3, 1, "", "best_score"], [161, 3, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[162, 0, 0, "-", "criterions"]], "neural_compressor.compression.distillation.criterions": [[162, 2, 1, "", "Criterions"], [162, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [162, 2, 1, "", "KnowledgeDistillationFramework"], [162, 2, 1, "", "KnowledgeDistillationLoss"], [162, 2, 1, "", "PyTorchCriterions"], [162, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [162, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [162, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [162, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [162, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [162, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [162, 2, 1, "", "SelfKnowledgeDistillationLoss"], [162, 2, 1, "", "TensorflowCriterions"], [162, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [162, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [162, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [162, 1, 1, "", "criterion_registry"]], "neural_compressor.compression.pruner": [[165, 0, 0, "-", "criteria"], [168, 0, 0, "-", "model_slim"], [171, 0, 0, "-", "patterns"], [172, 0, 0, "-", "pruners"], [173, 0, 0, "-", "regs"], [174, 0, 0, "-", "schedulers"], [175, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[165, 2, 1, "", "GradientCriterion"], [165, 2, 1, "", "MagnitudeCriterion"], [165, 2, 1, "", "PruningCriterion"], [165, 2, 1, "", "RetrainFreeCriterion"], [165, 2, 1, "", "SnipCriterion"], [165, 2, 1, "", "SnipMomentumBlockCriterion"], [165, 2, 1, "", "SnipMomentumCriterion"], [165, 1, 1, "", "get_criterion"], [165, 1, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[165, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[165, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[165, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[165, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[165, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion": [[165, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[165, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[167, 0, 0, "-", "auto_slim"], [169, 0, 0, "-", "pattern_analyzer"], [170, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[167, 1, 1, "", "generate_ffn2_pruning_config"], [167, 1, 1, "", "generate_mha_pruning_config"], [167, 1, 1, "", "model_slim"], [167, 1, 1, "", "model_slim_ffn2"], [167, 1, 1, "", "model_slim_mha"], [167, 1, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[169, 2, 1, "", "ClassifierHeadSearcher"], [169, 2, 1, "", "JitBasicSearcher"], [169, 2, 1, "", "Linear2LinearSearcher"], [169, 2, 1, "", "RecipeSearcher"], [169, 2, 1, "", "SelfMHASearcher"], [169, 1, 1, "", "get_attributes"], [169, 1, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[169, 3, 1, "", "device"], [169, 3, 1, "", "flatten_static_graph"], [169, 3, 1, "", "model"], [169, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[169, 3, 1, "", "device"], [169, 3, 1, "", "flatten_static_graph"], [169, 3, 1, "", "model"], [169, 3, 1, "", "searching_results"], [169, 3, 1, "", "static_graph"], [169, 3, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[169, 3, 1, "", "current_pattern"], [169, 3, 1, "", "device"], [169, 3, 1, "", "flatten_static_graph"], [169, 3, 1, "", "model"], [169, 3, 1, "", "searching_results"], [169, 3, 1, "", "static_graph"], [169, 3, 1, "", "target_layers"], [169, 3, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[169, 3, 1, "", "model"], [169, 3, 1, "", "recipe"], [169, 3, 1, "", "searching_results"], [169, 3, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[169, 3, 1, "", "device"], [169, 3, 1, "", "flatten_static_graph"], [169, 3, 1, "", "model"], [169, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[170, 2, 1, "", "LinearCompression"], [170, 2, 1, "", "LinearCompressionIterator"], [170, 2, 1, "", "MHACompression"], [170, 2, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[170, 3, 1, "", "device"], [170, 3, 1, "", "layer_1"], [170, 3, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[170, 3, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[171, 2, 1, "", "BasePattern"], [171, 2, 1, "", "PatternNInM"], [171, 2, 1, "", "PatternNxM"], [171, 1, 1, "", "get_pattern"], [171, 1, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.BasePattern": [[171, 3, 1, "", "config"], [171, 3, 1, "", "invalid_layers"], [171, 3, 1, "", "is_global"], [171, 3, 1, "", "keep_mask_layers"], [171, 3, 1, "", "max_sparsity_ratio_per_op"], [171, 3, 1, "", "min_sparsity_ratio_per_op"], [171, 3, 1, "", "modules"], [171, 3, 1, "", "pattern"], [171, 3, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.PatternNInM": [[171, 3, 1, "", "M"], [171, 3, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.PatternNxM": [[171, 3, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[172, 2, 1, "", "BasePruner"], [172, 2, 1, "", "BasicPruner"], [172, 2, 1, "", "BlockMaskPruner"], [172, 2, 1, "", "PatternLockPruner"], [172, 2, 1, "", "ProgressivePruner"], [172, 2, 1, "", "RetrainFreePruner"], [172, 1, 1, "", "get_pruner"], [172, 1, 1, "", "parse_valid_pruner_types"], [172, 1, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.BasePruner": [[172, 3, 1, "", "config"], [172, 3, 1, "", "current_sparsity_ratio"], [172, 3, 1, "", "end_step"], [172, 3, 1, "", "global_step"], [172, 3, 1, "", "masks"], [172, 3, 1, "", "max_sparsity_ratio_per_op"], [172, 3, 1, "", "modules"], [172, 3, 1, "", "pattern"], [172, 3, 1, "", "pruning_frequency"], [172, 3, 1, "", "scheduler"], [172, 3, 1, "", "scores"], [172, 3, 1, "", "start_step"], [172, 3, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.BasicPruner": [[172, 3, 1, "", "criterion"], [172, 3, 1, "", "pattern"], [172, 3, 1, "", "reg"], [172, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.BlockMaskPruner": [[172, 3, 1, "", "criterion"], [172, 3, 1, "", "pattern"], [172, 3, 1, "", "reg"], [172, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.RetrainFreePruner": [[172, 3, 1, "", "criterion"], [172, 3, 1, "", "pattern"], [172, 3, 1, "", "reg"], [172, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.regs": [[173, 2, 1, "", "BaseReg"], [173, 2, 1, "", "GroupLasso"], [173, 1, 1, "", "get_reg"], [173, 1, 1, "", "get_reg_type"], [173, 1, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[173, 3, 1, "", "alpha"], [173, 3, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[174, 2, 1, "", "IterativeScheduler"], [174, 2, 1, "", "OneshotScheduler"], [174, 2, 1, "", "PruningScheduler"], [174, 1, 1, "", "get_scheduler"], [174, 1, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[174, 3, 1, "", "config"]], "neural_compressor.compression.pruner.utils": [[175, 1, 1, "", "check_config"], [175, 1, 1, "", "check_key_validity"], [175, 1, 1, "", "generate_pruner_config"], [175, 1, 1, "", "get_sparsity_ratio"], [175, 1, 1, "", "parse_last_linear"], [175, 1, 1, "", "parse_to_prune"], [175, 1, 1, "", "process_and_check_config"], [175, 1, 1, "", "process_config"], [175, 1, 1, "", "process_weight_config"], [175, 1, 1, "", "process_yaml_config"], [175, 1, 1, "", "reset_none_to_default"], [175, 1, 1, "", "update_params"]], "neural_compressor.conf": [[176, 0, 0, "-", "config"], [177, 0, 0, "-", "dotdict"], [179, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[176, 2, 1, "", "Benchmark_Conf"], [176, 2, 1, "", "Conf"], [176, 2, 1, "", "Distillation_Conf"], [176, 2, 1, "", "Graph_Optimization_Conf"], [176, 2, 1, "", "MixedPrecision_Conf"], [176, 2, 1, "", "NASConfig"], [176, 2, 1, "", "PrunerV2"], [176, 2, 1, "", "Pruning_Conf"], [176, 2, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[177, 2, 1, "", "DotDict"], [177, 1, 1, "", "deep_get"], [177, 1, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[179, 2, 1, "", "AccuracyCriterion"], [179, 2, 1, "", "BenchmarkConfig"], [179, 2, 1, "", "DistillationConfig"], [179, 2, 1, "", "KnowledgeDistillationLossConfig"], [179, 2, 1, "", "Options"], [179, 2, 1, "", "QuantizationConfig"], [179, 2, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[180, 2, 1, "", "AccuracyCriterion"], [180, 2, 1, "", "BenchmarkConfig"], [180, 2, 1, "", "DistillationConfig"], [180, 2, 1, "", "DotDict"], [180, 2, 1, "", "ExportConfig"], [180, 2, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [180, 2, 1, "", "Keras"], [180, 2, 1, "", "KnowledgeDistillationLossConfig"], [180, 2, 1, "", "MXNet"], [180, 2, 1, "", "MixedPrecisionConfig"], [180, 2, 1, "", "NASConfig"], [180, 2, 1, "", "ONNX"], [180, 2, 1, "", "ONNXQlinear2QDQConfig"], [180, 2, 1, "", "Options"], [180, 2, 1, "", "PostTrainingQuantConfig"], [180, 2, 1, "", "PyTorch"], [180, 2, 1, "", "QuantizationAwareTrainingConfig"], [180, 2, 1, "", "SelfKnowledgeDistillationLossConfig"], [180, 2, 1, "", "TF2ONNXConfig"], [180, 2, 1, "", "TensorFlow"], [180, 2, 1, "", "Torch2ONNXConfig"], [180, 2, 1, "", "TuningCriterion"], [180, 2, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[182, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[183, 0, 0, "-", "sigopt"], [184, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[183, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[184, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[189, 0, 0, "-", "dataloaders"], [201, 0, 0, "-", "datasets"], [205, 0, 0, "-", "filters"], [209, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[185, 0, 0, "-", "base_dataloader"], [186, 0, 0, "-", "dataloader"], [187, 0, 0, "-", "default_dataloader"], [188, 0, 0, "-", "fetcher"], [190, 0, 0, "-", "mxnet_dataloader"], [191, 0, 0, "-", "onnxrt_dataloader"], [192, 0, 0, "-", "pytorch_dataloader"], [193, 0, 0, "-", "sampler"], [194, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[185, 2, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[186, 2, 1, "", "DataLoader"], [186, 1, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[187, 2, 1, "", "DefaultDataLoader"], [187, 1, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[188, 2, 1, "", "Fetcher"], [188, 2, 1, "", "IndexFetcher"], [188, 2, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[190, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[191, 2, 1, "", "ONNXRTBertDataLoader"], [191, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[192, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[193, 2, 1, "", "BatchSampler"], [193, 2, 1, "", "IterableSampler"], [193, 2, 1, "", "Sampler"], [193, 2, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[194, 2, 1, "", "TFDataDataLoader"], [194, 2, 1, "", "TensorflowBertDataLoader"], [194, 2, 1, "", "TensorflowDataLoader"], [194, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[195, 0, 0, "-", "bert_dataset"], [196, 0, 0, "-", "coco_dataset"], [197, 0, 0, "-", "dataset"], [198, 0, 0, "-", "dummy_dataset"], [199, 0, 0, "-", "dummy_dataset_v2"], [200, 0, 0, "-", "imagenet_dataset"], [202, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[195, 2, 1, "", "InputFeatures"], [195, 2, 1, "", "ONNXRTBertDataset"], [195, 2, 1, "", "ParseDecodeBert"], [195, 2, 1, "", "PytorchBertDataset"], [195, 2, 1, "", "TensorflowBertDataset"], [195, 2, 1, "", "TensorflowModelZooBertDataset"], [195, 1, 1, "", "convert_examples_to_features"], [195, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[196, 2, 1, "", "COCONpy"], [196, 2, 1, "", "COCORaw"], [196, 2, 1, "", "COCORecordDataset"], [196, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[197, 2, 1, "", "CIFAR10"], [197, 2, 1, "", "CIFAR100"], [197, 2, 1, "", "Dataset"], [197, 2, 1, "", "Datasets"], [197, 2, 1, "", "FashionMNIST"], [197, 2, 1, "", "ImageFolder"], [197, 2, 1, "", "IterableDataset"], [197, 2, 1, "", "MNIST"], [197, 2, 1, "", "MXNetCIFAR10"], [197, 2, 1, "", "MXNetCIFAR100"], [197, 2, 1, "", "MXNetDatasets"], [197, 2, 1, "", "MXNetFashionMNIST"], [197, 2, 1, "", "MXNetImageFolder"], [197, 2, 1, "", "MXNetMNIST"], [197, 2, 1, "", "ONNXRTITDatasets"], [197, 2, 1, "", "ONNXRTQLDatasets"], [197, 2, 1, "", "PyTorchDatasets"], [197, 2, 1, "", "PytorchCIFAR10"], [197, 2, 1, "", "PytorchCIFAR100"], [197, 2, 1, "", "PytorchFashionMNIST"], [197, 2, 1, "", "PytorchMNIST"], [197, 2, 1, "", "PytorchMxnetWrapDataset"], [197, 2, 1, "", "PytorchMxnetWrapFunction"], [197, 2, 1, "", "Tensorflow"], [197, 2, 1, "", "TensorflowCIFAR10"], [197, 2, 1, "", "TensorflowCIFAR100"], [197, 2, 1, "", "TensorflowDatasets"], [197, 2, 1, "", "TensorflowFashionMNIST"], [197, 2, 1, "", "TensorflowImageRecord"], [197, 2, 1, "", "TensorflowMNIST"], [197, 2, 1, "", "TensorflowTFRecordDataset"], [197, 2, 1, "", "TensorflowVOCRecord"], [197, 1, 1, "", "calculate_md5"], [197, 1, 1, "", "check_integrity"], [197, 1, 1, "", "dataset_registry"], [197, 1, 1, "", "download_url"], [197, 4, 1, "", "framework_datasets"], [197, 1, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[198, 2, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[199, 2, 1, "", "DummyDataset"], [199, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[200, 2, 1, "", "ImagenetRaw"], [200, 2, 1, "", "MXNetImagenetRaw"], [200, 2, 1, "", "ONNXRTImagenetDataset"], [200, 2, 1, "", "PytorchImagenetRaw"], [200, 2, 1, "", "TensorflowImagenetDataset"], [200, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[202, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[203, 0, 0, "-", "coco_filter"], [204, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[203, 2, 1, "", "LabelBalanceCOCORawFilter"], [203, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[204, 2, 1, "", "FILTERS"], [204, 2, 1, "", "Filter"], [204, 2, 1, "", "MXNetFilters"], [204, 2, 1, "", "ONNXRTITFilters"], [204, 2, 1, "", "ONNXRTQLFilters"], [204, 2, 1, "", "PyTorchFilters"], [204, 2, 1, "", "TensorflowFilters"], [204, 1, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[207, 0, 0, "-", "coco_transform"], [208, 0, 0, "-", "imagenet_transform"], [210, 0, 0, "-", "postprocess"], [211, 0, 0, "-", "tokenization"], [212, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[207, 2, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[208, 2, 1, "", "BilinearImagenetTransform"], [208, 2, 1, "", "LabelShift"], [208, 2, 1, "", "ONNXResizeCropImagenetTransform"], [208, 2, 1, "", "OnnxBilinearImagenetTransform"], [208, 2, 1, "", "ParseDecodeImagenet"], [208, 2, 1, "", "ParseDecodeImagenetTransform"], [208, 2, 1, "", "QuantizedInput"], [208, 2, 1, "", "ResizeWithAspectRatio"], [208, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.postprocess": [[210, 2, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[211, 2, 1, "", "BasicTokenizer"], [211, 2, 1, "", "FullTokenizer"], [211, 2, 1, "", "WordpieceTokenizer"], [211, 1, 1, "", "convert_by_vocab"], [211, 1, 1, "", "convert_to_unicode"], [211, 1, 1, "", "load_vocab"], [211, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[212, 2, 1, "", "AlignImageChannelTransform"], [212, 2, 1, "", "BaseTransform"], [212, 2, 1, "", "CastONNXTransform"], [212, 2, 1, "", "CastPyTorchTransform"], [212, 2, 1, "", "CastTFTransform"], [212, 2, 1, "", "CenterCropTFTransform"], [212, 2, 1, "", "CenterCropTransform"], [212, 2, 1, "", "CollectTransform"], [212, 2, 1, "", "ComposeTransform"], [212, 2, 1, "", "CropResizeTFTransform"], [212, 2, 1, "", "CropResizeTransform"], [212, 2, 1, "", "CropToBoundingBox"], [212, 2, 1, "", "InputFeatures"], [212, 2, 1, "", "MXNetCropResizeTransform"], [212, 2, 1, "", "MXNetCropToBoundingBox"], [212, 2, 1, "", "MXNetNormalizeTransform"], [212, 2, 1, "", "MXNetTransforms"], [212, 2, 1, "", "MXNetTranspose"], [212, 2, 1, "", "NormalizeTFTransform"], [212, 2, 1, "", "NormalizeTransform"], [212, 2, 1, "", "ONNXRTCropToBoundingBox"], [212, 2, 1, "", "ONNXRTITTransforms"], [212, 2, 1, "", "ONNXRTQLTransforms"], [212, 2, 1, "", "PaddedCenterCropTransform"], [212, 2, 1, "", "ParseDecodeVocTransform"], [212, 2, 1, "", "PyTorchAlignImageChannel"], [212, 2, 1, "", "PyTorchCropResizeTransform"], [212, 2, 1, "", "PyTorchNormalizeTransform"], [212, 2, 1, "", "PyTorchTransforms"], [212, 2, 1, "", "PyTorchTranspose"], [212, 2, 1, "", "PytorchMxnetTransform"], [212, 2, 1, "", "PytorchMxnetWrapFunction"], [212, 2, 1, "", "RandomCropTFTransform"], [212, 2, 1, "", "RandomCropTransform"], [212, 2, 1, "", "RandomHorizontalFlip"], [212, 2, 1, "", "RandomResizedCropMXNetTransform"], [212, 2, 1, "", "RandomResizedCropPytorchTransform"], [212, 2, 1, "", "RandomResizedCropTFTransform"], [212, 2, 1, "", "RandomResizedCropTransform"], [212, 2, 1, "", "RandomVerticalFlip"], [212, 2, 1, "", "RescaleKerasPretrainTransform"], [212, 2, 1, "", "RescaleTFTransform"], [212, 2, 1, "", "RescaleTransform"], [212, 2, 1, "", "ResizeMXNetTransform"], [212, 2, 1, "", "ResizePytorchTransform"], [212, 2, 1, "", "ResizeTFTransform"], [212, 2, 1, "", "ResizeTransform"], [212, 2, 1, "", "ResizeWithRatio"], [212, 2, 1, "", "SquadExample"], [212, 2, 1, "", "TFModelZooCollectTransform"], [212, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [212, 2, 1, "", "TFSquadV1PostTransform"], [212, 2, 1, "", "TRANSFORMS"], [212, 2, 1, "", "TensorflowCropToBoundingBox"], [212, 2, 1, "", "TensorflowRandomHorizontalFlip"], [212, 2, 1, "", "TensorflowRandomVerticalFlip"], [212, 2, 1, "", "TensorflowResizeWithRatio"], [212, 2, 1, "", "TensorflowTransform"], [212, 2, 1, "", "TensorflowTransforms"], [212, 2, 1, "", "TensorflowTranspose"], [212, 2, 1, "", "TensorflowWrapFunction"], [212, 2, 1, "", "ToArray"], [212, 2, 1, "", "ToNDArrayTransform"], [212, 2, 1, "", "Transforms"], [212, 2, 1, "", "Transpose"], [212, 1, 1, "", "convert_examples_to_features"], [212, 1, 1, "", "get_final_text"], [212, 1, 1, "", "get_torchvision_map"], [212, 1, 1, "", "read_squad_examples"], [212, 1, 1, "", "transform_registry"]], "neural_compressor.experimental": [[213, 0, 0, "-", "benchmark"], [216, 0, 0, "-", "common"], [222, 0, 0, "-", "component"], [223, 0, 0, "-", "compression"], [225, 0, 0, "-", "contrib"], [250, 0, 0, "-", "data"], [255, 0, 0, "-", "distillation"], [256, 0, 0, "-", "export"], [261, 0, 0, "-", "graph_optimization"], [269, 0, 0, "-", "metric"], [271, 0, 0, "-", "mixed_precision"], [272, 0, 0, "-", "model_conversion"], [275, 0, 0, "-", "nas"], [281, 0, 0, "-", "pruner_legacy"], [285, 0, 0, "-", "pruning"], [286, 0, 0, "-", "pruning_recipes"], [290, 0, 0, "-", "pruning_v2"], [291, 0, 0, "-", "pytorch_pruner"], [298, 0, 0, "-", "quantization"], [299, 0, 0, "-", "scheduler"], [304, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[213, 2, 1, "", "Benchmark"], [213, 1, 1, "", "get_architecture"], [213, 1, 1, "", "get_bounded_threads"], [213, 1, 1, "", "get_core_ids"], [213, 1, 1, "", "get_physical_ids"], [213, 1, 1, "", "get_threads"], [213, 1, 1, "", "get_threads_per_core"], [213, 1, 1, "", "set_all_env_var"], [213, 1, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[214, 0, 0, "-", "criterion"], [215, 0, 0, "-", "dataloader"], [217, 0, 0, "-", "metric"], [218, 0, 0, "-", "model"], [219, 0, 0, "-", "optimizer"], [220, 0, 0, "-", "postprocess"], [221, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[214, 2, 1, "", "Criterions"], [214, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [214, 2, 1, "", "KnowledgeDistillationFramework"], [214, 2, 1, "", "KnowledgeDistillationLoss"], [214, 2, 1, "", "PyTorchCriterions"], [214, 2, 1, "", "PyTorchCrossEntropyLoss"], [214, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [214, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [214, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [214, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [214, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [214, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [214, 2, 1, "", "SelfKnowledgeDistillationLoss"], [214, 2, 1, "", "TensorFlowCrossEntropyLoss"], [214, 2, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [214, 2, 1, "", "TensorflowCriterions"], [214, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [214, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [214, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [214, 1, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[215, 2, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[217, 2, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[218, 2, 1, "", "Model"], [218, 1, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[219, 2, 1, "", "Optimizers"], [219, 2, 1, "", "PyTorchOptimizers"], [219, 2, 1, "", "PyTorchSGD"], [219, 2, 1, "", "TensorFlowAdam"], [219, 2, 1, "", "TensorFlowAdamW"], [219, 2, 1, "", "TensorFlowSGD"], [219, 2, 1, "", "TensorflowOptimizers"], [219, 1, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[220, 2, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[221, 1, 1, "", "get_activation"], [221, 1, 1, "", "record_output"]], "neural_compressor.experimental.component": [[222, 2, 1, "", "Component"]], "neural_compressor.experimental.compression": [[224, 0, 0, "-", "pruning"]], "neural_compressor.experimental.compression.pruning": [[224, 1, 1, "", "prepare_pruning"], [224, 1, 1, "", "save"]], "neural_compressor.experimental.contrib": [[226, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[227, 0, 0, "-", "sigopt"], [228, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[227, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[228, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[233, 0, 0, "-", "dataloaders"], [245, 0, 0, "-", "datasets"], [249, 0, 0, "-", "filters"], [252, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[229, 0, 0, "-", "base_dataloader"], [230, 0, 0, "-", "dataloader"], [231, 0, 0, "-", "default_dataloader"], [232, 0, 0, "-", "fetcher"], [234, 0, 0, "-", "mxnet_dataloader"], [235, 0, 0, "-", "onnxrt_dataloader"], [236, 0, 0, "-", "pytorch_dataloader"], [237, 0, 0, "-", "sampler"], [238, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[229, 2, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[231, 2, 1, "", "DefaultDataLoader"], [231, 1, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[232, 2, 1, "", "Fetcher"], [232, 2, 1, "", "IndexFetcher"], [232, 2, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[234, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[235, 2, 1, "", "ONNXRTBertDataLoader"], [235, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[236, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[237, 2, 1, "", "BatchSampler"], [237, 2, 1, "", "IterableSampler"], [237, 2, 1, "", "Sampler"], [237, 2, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[238, 2, 1, "", "TFDataDataLoader"], [238, 2, 1, "", "TensorflowBertDataLoader"], [238, 2, 1, "", "TensorflowDataLoader"], [238, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[239, 0, 0, "-", "bert_dataset"], [240, 0, 0, "-", "coco_dataset"], [241, 0, 0, "-", "dataset"], [242, 0, 0, "-", "dummy_dataset"], [243, 0, 0, "-", "dummy_dataset_v2"], [244, 0, 0, "-", "imagenet_dataset"], [246, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[239, 2, 1, "", "InputFeatures"], [239, 2, 1, "", "ONNXRTBertDataset"], [239, 2, 1, "", "ParseDecodeBert"], [239, 2, 1, "", "PytorchBertDataset"], [239, 2, 1, "", "TensorflowBertDataset"], [239, 2, 1, "", "TensorflowModelZooBertDataset"], [239, 1, 1, "", "convert_examples_to_features"], [239, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[240, 2, 1, "", "COCONpy"], [240, 2, 1, "", "COCORaw"], [240, 2, 1, "", "COCORecordDataset"], [240, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[241, 2, 1, "", "CIFAR10"], [241, 2, 1, "", "CIFAR100"], [241, 2, 1, "", "Dataset"], [241, 2, 1, "", "Datasets"], [241, 2, 1, "", "FashionMNIST"], [241, 2, 1, "", "ImageFolder"], [241, 2, 1, "", "IterableDataset"], [241, 2, 1, "", "MNIST"], [241, 2, 1, "", "MXNetCIFAR10"], [241, 2, 1, "", "MXNetCIFAR100"], [241, 2, 1, "", "MXNetDatasets"], [241, 2, 1, "", "MXNetFashionMNIST"], [241, 2, 1, "", "MXNetImageFolder"], [241, 2, 1, "", "MXNetMNIST"], [241, 2, 1, "", "ONNXRTITDatasets"], [241, 2, 1, "", "ONNXRTQLDatasets"], [241, 2, 1, "", "PyTorchDatasets"], [241, 2, 1, "", "PytorchCIFAR10"], [241, 2, 1, "", "PytorchCIFAR100"], [241, 2, 1, "", "PytorchFashionMNIST"], [241, 2, 1, "", "PytorchMNIST"], [241, 2, 1, "", "PytorchMxnetWrapDataset"], [241, 2, 1, "", "PytorchMxnetWrapFunction"], [241, 2, 1, "", "TensorflowCIFAR10"], [241, 2, 1, "", "TensorflowCIFAR100"], [241, 2, 1, "", "TensorflowDatasets"], [241, 2, 1, "", "TensorflowFashionMNIST"], [241, 2, 1, "", "TensorflowImageFolder"], [241, 2, 1, "", "TensorflowImageRecord"], [241, 2, 1, "", "TensorflowMNIST"], [241, 2, 1, "", "TensorflowTFRecordDataset"], [241, 2, 1, "", "TensorflowVOCRecord"], [241, 1, 1, "", "calculate_md5"], [241, 1, 1, "", "check_integrity"], [241, 1, 1, "", "dataset_registry"], [241, 1, 1, "", "download_url"], [241, 4, 1, "", "framework_datasets"], [241, 1, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[242, 2, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[243, 2, 1, "", "DummyDataset"], [243, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[244, 2, 1, "", "ImagenetRaw"], [244, 2, 1, "", "MXNetImagenetRaw"], [244, 2, 1, "", "ONNXRTImagenetDataset"], [244, 2, 1, "", "PytorchImagenetRaw"], [244, 2, 1, "", "TensorflowImagenetDataset"], [244, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[246, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[247, 0, 0, "-", "coco_filter"], [248, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[247, 2, 1, "", "LabelBalanceCOCORawFilter"], [247, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[248, 2, 1, "", "FILTERS"], [248, 2, 1, "", "Filter"], [248, 2, 1, "", "MXNetFilters"], [248, 2, 1, "", "ONNXRTITFilters"], [248, 2, 1, "", "ONNXRTQLFilters"], [248, 2, 1, "", "PyTorchFilters"], [248, 2, 1, "", "TensorflowFilters"], [248, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[251, 0, 0, "-", "imagenet_transform"], [253, 0, 0, "-", "tokenization"], [254, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[251, 2, 1, "", "BilinearImagenetTransform"], [251, 2, 1, "", "LabelShift"], [251, 2, 1, "", "ONNXResizeCropImagenetTransform"], [251, 2, 1, "", "OnnxBilinearImagenetTransform"], [251, 2, 1, "", "ParseDecodeImagenet"], [251, 2, 1, "", "ParseDecodeImagenetTransform"], [251, 2, 1, "", "QuantizedInput"], [251, 2, 1, "", "ResizeWithAspectRatio"], [251, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[253, 2, 1, "", "BasicTokenizer"], [253, 2, 1, "", "FullTokenizer"], [253, 2, 1, "", "WordpieceTokenizer"], [253, 1, 1, "", "convert_by_vocab"], [253, 1, 1, "", "convert_to_unicode"], [253, 1, 1, "", "load_vocab"], [253, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[254, 2, 1, "", "AlignImageChannelTransform"], [254, 2, 1, "", "BaseTransform"], [254, 2, 1, "", "CastONNXTransform"], [254, 2, 1, "", "CastPyTorchTransform"], [254, 2, 1, "", "CastTFTransform"], [254, 2, 1, "", "CenterCropTFTransform"], [254, 2, 1, "", "CenterCropTransform"], [254, 2, 1, "", "CollectTransform"], [254, 2, 1, "", "ComposeTransform"], [254, 2, 1, "", "CropResizeTFTransform"], [254, 2, 1, "", "CropResizeTransform"], [254, 2, 1, "", "CropToBoundingBox"], [254, 2, 1, "", "InputFeatures"], [254, 2, 1, "", "MXNetCropResizeTransform"], [254, 2, 1, "", "MXNetCropToBoundingBox"], [254, 2, 1, "", "MXNetNormalizeTransform"], [254, 2, 1, "", "MXNetTransforms"], [254, 2, 1, "", "MXNetTranspose"], [254, 2, 1, "", "NormalizeTFTransform"], [254, 2, 1, "", "NormalizeTransform"], [254, 2, 1, "", "ONNXRTCropToBoundingBox"], [254, 2, 1, "", "ONNXRTITTransforms"], [254, 2, 1, "", "ONNXRTQLTransforms"], [254, 2, 1, "", "PaddedCenterCropTransform"], [254, 2, 1, "", "ParseDecodeVocTransform"], [254, 2, 1, "", "PyTorchAlignImageChannel"], [254, 2, 1, "", "PyTorchCropResizeTransform"], [254, 2, 1, "", "PyTorchNormalizeTransform"], [254, 2, 1, "", "PyTorchTransforms"], [254, 2, 1, "", "PyTorchTranspose"], [254, 2, 1, "", "PytorchMxnetTransform"], [254, 2, 1, "", "PytorchMxnetWrapFunction"], [254, 2, 1, "", "RandomCropTFTransform"], [254, 2, 1, "", "RandomCropTransform"], [254, 2, 1, "", "RandomHorizontalFlip"], [254, 2, 1, "", "RandomResizedCropMXNetTransform"], [254, 2, 1, "", "RandomResizedCropPytorchTransform"], [254, 2, 1, "", "RandomResizedCropTFTransform"], [254, 2, 1, "", "RandomResizedCropTransform"], [254, 2, 1, "", "RandomVerticalFlip"], [254, 2, 1, "", "RescaleKerasPretrainTransform"], [254, 2, 1, "", "RescaleTFTransform"], [254, 2, 1, "", "RescaleTransform"], [254, 2, 1, "", "ResizeMXNetTransform"], [254, 2, 1, "", "ResizePytorchTransform"], [254, 2, 1, "", "ResizeTFTransform"], [254, 2, 1, "", "ResizeTransform"], [254, 2, 1, "", "ResizeWithRatio"], [254, 2, 1, "", "SquadExample"], [254, 2, 1, "", "TFModelZooCollectTransform"], [254, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [254, 2, 1, "", "TFSquadV1PostTransform"], [254, 2, 1, "", "TRANSFORMS"], [254, 2, 1, "", "TensorflowCropToBoundingBox"], [254, 2, 1, "", "TensorflowRandomHorizontalFlip"], [254, 2, 1, "", "TensorflowRandomVerticalFlip"], [254, 2, 1, "", "TensorflowResizeWithRatio"], [254, 2, 1, "", "TensorflowTransform"], [254, 2, 1, "", "TensorflowTransforms"], [254, 2, 1, "", "TensorflowTranspose"], [254, 2, 1, "", "TensorflowWrapFunction"], [254, 2, 1, "", "ToArray"], [254, 2, 1, "", "ToNDArrayTransform"], [254, 2, 1, "", "Transforms"], [254, 2, 1, "", "Transpose"], [254, 1, 1, "", "convert_examples_to_features"], [254, 1, 1, "", "get_final_text"], [254, 1, 1, "", "get_torchvision_map"], [254, 1, 1, "", "read_squad_examples"], [254, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[255, 2, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[255, 3, 1, "", "_epoch_ran"], [255, 3, 1, "", "best_model"], [255, 3, 1, "", "best_score"], [255, 3, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[257, 0, 0, "-", "qlinear2qdq"], [258, 0, 0, "-", "tf2onnx"], [259, 0, 0, "-", "torch2onnx"], [260, 0, 0, "-", "utils"]], "neural_compressor.experimental.export.qlinear2qdq": [[257, 1, 1, "", "check_model"], [257, 1, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[258, 1, 1, "", "tf_to_fp32_onnx"], [258, 1, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[259, 1, 1, "", "build_scale_mapping"], [259, 1, 1, "", "get_node_mapping"], [259, 1, 1, "", "get_quantizable_onnx_ops"], [259, 1, 1, "", "qdq_fp32_bias"], [259, 1, 1, "", "qdq_fp32_bias_qdq"], [259, 1, 1, "", "qdq_int32_bias"], [259, 1, 1, "", "recalculate_bias"], [259, 1, 1, "", "remove_nodes_by_name"], [259, 1, 1, "", "set_data_type"], [259, 1, 1, "", "set_scale_info"], [259, 1, 1, "", "sub_graph_with_int32_bias"], [259, 1, 1, "", "torch_to_fp32_onnx"], [259, 1, 1, "", "torch_to_int8_onnx"], [259, 1, 1, "", "update_weight_bias"]], "neural_compressor.experimental.export.utils": [[260, 2, 1, "", "DummyDataReader"], [260, 1, 1, "", "ONNX2Numpy_dtype"]], "neural_compressor.experimental.graph_optimization": [[261, 2, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[263, 0, 0, "-", "bleu"], [264, 0, 0, "-", "bleu_util"], [265, 0, 0, "-", "coco_label_map"], [266, 0, 0, "-", "coco_tools"], [267, 0, 0, "-", "evaluate_squad"], [268, 0, 0, "-", "f1"], [270, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[263, 2, 1, "", "BLEU"], [263, 2, 1, "", "UnicodeRegex"], [263, 1, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[263, 3, 1, "", "labels"], [263, 3, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[263, 3, 1, "", "nondigit_punct_re"], [263, 3, 1, "", "punct_nondigit_re"], [263, 3, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[264, 1, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[266, 2, 1, "", "COCOEvalWrapper"], [266, 2, 1, "", "COCOWrapper"], [266, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [266, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [266, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[266, 3, 1, "", "dataset"], [266, 3, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[267, 1, 1, "", "evaluate"], [267, 1, 1, "", "exact_match_score"], [267, 1, 1, "", "f1_score"], [267, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[268, 1, 1, "", "evaluate"], [268, 1, 1, "", "f1_score"], [268, 1, 1, "", "metric_max_over_ground_truths"], [268, 1, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[270, 2, 1, "", "Accuracy"], [270, 2, 1, "", "BaseMetric"], [270, 2, 1, "", "COCOmAPv2"], [270, 2, 1, "", "F1"], [270, 2, 1, "", "GeneralTopK"], [270, 2, 1, "", "Loss"], [270, 2, 1, "", "MAE"], [270, 2, 1, "", "METRICS"], [270, 2, 1, "", "MSE"], [270, 2, 1, "", "MXNetMetrics"], [270, 2, 1, "", "ONNXRTGLUE"], [270, 2, 1, "", "ONNXRTITMetrics"], [270, 2, 1, "", "ONNXRTQLMetrics"], [270, 2, 1, "", "PyTorchLoss"], [270, 2, 1, "", "PyTorchMetrics"], [270, 2, 1, "", "RMSE"], [270, 2, 1, "", "ROC"], [270, 2, 1, "", "SquadF1"], [270, 2, 1, "", "TensorflowCOCOMAP"], [270, 2, 1, "", "TensorflowMAP"], [270, 2, 1, "", "TensorflowMetrics"], [270, 2, 1, "", "TensorflowTopK"], [270, 2, 1, "", "TensorflowVOCMAP"], [270, 2, 1, "", "WrapMXNetMetric"], [270, 2, 1, "", "WrapONNXRTMetric"], [270, 2, 1, "", "WrapPyTorchMetric"], [270, 2, 1, "", "mIOU"], [270, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[270, 3, 1, "", "label_list"], [270, 3, 1, "", "pred_list"], [270, 3, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[270, 3, 1, "", "k"], [270, 3, 1, "", "num_correct"], [270, 3, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[270, 3, 1, "", "sample"], [270, 3, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[270, 3, 1, "", "compare_label"], [270, 3, 1, "", "label_list"], [270, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[270, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[270, 3, 1, "", "compare_label"], [270, 3, 1, "", "label_list"], [270, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[270, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[270, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[270, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[270, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[270, 3, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[270, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[270, 3, 1, "", "k"], [270, 3, 1, "", "num_correct"], [270, 3, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[271, 2, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[272, 2, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[273, 0, 0, "-", "basic_nas"], [274, 0, 0, "-", "dynas"], [276, 0, 0, "-", "nas"], [277, 0, 0, "-", "nas_utils"], [278, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[273, 2, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[274, 2, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[276, 2, 1, "", "NAS"], [276, 2, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[277, 1, 1, "", "create_search_space_pool"], [277, 1, 1, "", "find_pareto_front"], [277, 1, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[278, 2, 1, "", "BayesianOptimizationSearcher"], [278, 2, 1, "", "GridSearcher"], [278, 2, 1, "", "RandomSearcher"], [278, 2, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[279, 0, 0, "-", "gradient_sensitivity"], [280, 0, 0, "-", "group_lasso"], [282, 0, 0, "-", "magnitude"], [283, 0, 0, "-", "pattern_lock"], [284, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[279, 2, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[280, 2, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[282, 2, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[283, 2, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[284, 2, 1, "", "Pruner"], [284, 1, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[285, 2, 1, "", "Pruning"], [285, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[285, 3, 1, "", "conf"], [285, 3, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[287, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[288, 0, 0, "-", "pattern"], [289, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[288, 2, 1, "", "PATTERNS"], [288, 2, 1, "", "PatternBase"], [288, 1, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[288, 3, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[289, 2, 1, "", "TilePatternBase"], [289, 2, 1, "", "TilePattern_1x1"], [289, 2, 1, "", "TilePattern_1x16"], [289, 2, 1, "", "TilePattern_1x2"], [289, 2, 1, "", "TilePattern_2x2"], [289, 2, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[290, 2, 1, "", "Pruning"], [290, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[290, 3, 1, "", "conf"], [290, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[292, 0, 0, "-", "logger"], [293, 0, 0, "-", "patterns"], [294, 0, 0, "-", "prune_utils"], [295, 0, 0, "-", "pruner"], [296, 0, 0, "-", "pruning"], [297, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[293, 2, 1, "", "Pattern"], [293, 2, 1, "", "PatternNInM"], [293, 2, 1, "", "PatternNxM"], [293, 1, 1, "", "get_pattern"], [293, 1, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[293, 3, 1, "", "is_global"], [293, 3, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[293, 3, 1, "", "M"], [293, 3, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[293, 3, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[294, 1, 1, "", "check_config"], [294, 1, 1, "", "parse_not_to_prune"], [294, 1, 1, "", "parse_to_prune"], [294, 1, 1, "", "process_and_check_config"], [294, 1, 1, "", "process_config"], [294, 1, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[295, 2, 1, "", "MagnitudePruner"], [295, 2, 1, "", "PatternLockPruner"], [295, 2, 1, "", "Pruner"], [295, 2, 1, "", "SnipMomentumPruner"], [295, 2, 1, "", "SnipPruner"], [295, 1, 1, "", "get_pruner"], [295, 1, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[295, 3, 1, "", "config"], [295, 3, 1, "", "current_sparsity_ratio"], [295, 3, 1, "", "end_step"], [295, 3, 1, "", "global_step"], [295, 3, 1, "", "masks"], [295, 3, 1, "", "max_sparsity_ratio_per_layer"], [295, 3, 1, "", "modules"], [295, 3, 1, "", "pattern"], [295, 3, 1, "", "scheduler"], [295, 3, 1, "", "scores"], [295, 3, 1, "", "start_step"], [295, 3, 1, "", "target_sparsity_ratio"], [295, 3, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[296, 2, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[296, 3, 1, "", "config_file_path"], [296, 3, 1, "", "model"], [296, 3, 1, "", "pruner_info"], [296, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[297, 2, 1, "", "IterativeScheduler"], [297, 2, 1, "", "OneshotScheduler"], [297, 2, 1, "", "Scheduler"], [297, 1, 1, "", "get_scheduler"], [297, 1, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[297, 3, 1, "", "config"]], "neural_compressor.experimental.quantization": [[298, 2, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[299, 2, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[300, 0, 0, "-", "auto_mixed_precision"], [301, 0, 0, "-", "basic"], [302, 0, 0, "-", "bayesian"], [303, 0, 0, "-", "exhaustive"], [305, 0, 0, "-", "mse"], [306, 0, 0, "-", "mse_v2"], [307, 0, 0, "-", "random"], [308, 0, 0, "-", "strategy"], [310, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[300, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[301, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[302, 2, 1, "", "BayesianOptimization"], [302, 2, 1, "", "BayesianTuneStrategy"], [302, 2, 1, "", "TargetSpace"], [302, 1, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[303, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[305, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[306, 2, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[307, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[308, 2, 1, "", "TuneStrategy"], [308, 1, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[309, 0, 0, "-", "constant"], [311, 0, 0, "-", "tuning_sampler"], [312, 0, 0, "-", "tuning_space"], [313, 0, 0, "-", "tuning_structs"], [314, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[311, 2, 1, "", "FallbackTuningSampler"], [311, 2, 1, "", "ModelWiseTuningSampler"], [311, 2, 1, "", "OpTypeWiseTuningSampler"], [311, 2, 1, "", "OpWiseTuningSampler"], [311, 2, 1, "", "SmoothQuantSampler"], [311, 2, 1, "", "TuningOrder"], [311, 2, 1, "", "TuningSampler"], [311, 2, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[312, 2, 1, "", "TuningItem"], [312, 2, 1, "", "TuningSpace"], [312, 1, 1, "", "initial_tuning_cfg_with_quant_mode"], [312, 1, 1, "", "pattern_to_internal"], [312, 1, 1, "", "pattern_to_path"], [312, 1, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[313, 2, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[314, 2, 1, "", "OrderedDefaultDict"], [314, 1, 1, "", "extract_data_type"], [314, 1, 1, "", "get_adaptor_name"], [314, 1, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[316, 0, 0, "-", "bleu"], [317, 0, 0, "-", "bleu_util"], [318, 0, 0, "-", "coco_label_map"], [319, 0, 0, "-", "coco_tools"], [320, 0, 0, "-", "evaluate_squad"], [321, 0, 0, "-", "f1"], [323, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[316, 2, 1, "", "BLEU"], [316, 2, 1, "", "UnicodeRegex"], [316, 1, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[316, 3, 1, "", "labels"], [316, 3, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[316, 3, 1, "", "nondigit_punct_re"], [316, 3, 1, "", "punct_nondigit_re"], [316, 3, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[317, 1, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[319, 2, 1, "", "COCOEvalWrapper"], [319, 2, 1, "", "COCOWrapper"], [319, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [319, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [319, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[319, 3, 1, "", "dataset"], [319, 3, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[320, 1, 1, "", "evaluate"], [320, 1, 1, "", "exact_match_score"], [320, 1, 1, "", "f1_score"], [320, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[321, 1, 1, "", "evaluate"], [321, 1, 1, "", "f1_score"], [321, 1, 1, "", "metric_max_over_ground_truths"], [321, 1, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[323, 2, 1, "", "Accuracy"], [323, 2, 1, "", "BaseMetric"], [323, 2, 1, "", "COCOmAPv2"], [323, 2, 1, "", "F1"], [323, 2, 1, "", "GeneralTopK"], [323, 2, 1, "", "Loss"], [323, 2, 1, "", "MAE"], [323, 2, 1, "", "METRICS"], [323, 2, 1, "", "MSE"], [323, 2, 1, "", "MXNetMetrics"], [323, 2, 1, "", "Metric"], [323, 2, 1, "", "ONNXRTGLUE"], [323, 2, 1, "", "ONNXRTITMetrics"], [323, 2, 1, "", "ONNXRTQLMetrics"], [323, 2, 1, "", "PyTorchLoss"], [323, 2, 1, "", "PyTorchMetrics"], [323, 2, 1, "", "RMSE"], [323, 2, 1, "", "ROC"], [323, 2, 1, "", "SquadF1"], [323, 2, 1, "", "TensorflowCOCOMAP"], [323, 2, 1, "", "TensorflowMAP"], [323, 2, 1, "", "TensorflowMetrics"], [323, 2, 1, "", "TensorflowTopK"], [323, 2, 1, "", "TensorflowVOCMAP"], [323, 2, 1, "", "WrapMXNetMetric"], [323, 2, 1, "", "WrapONNXRTMetric"], [323, 2, 1, "", "WrapPyTorchMetric"], [323, 2, 1, "", "mIOU"], [323, 1, 1, "", "metric_registry"], [323, 1, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[323, 3, 1, "", "label_list"], [323, 3, 1, "", "pred_list"], [323, 3, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[323, 3, 1, "", "k"], [323, 3, 1, "", "num_correct"], [323, 3, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[323, 3, 1, "", "sample"], [323, 3, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[323, 3, 1, "", "compare_label"], [323, 3, 1, "", "label_list"], [323, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[323, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[323, 3, 1, "", "compare_label"], [323, 3, 1, "", "label_list"], [323, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[323, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[323, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[323, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[323, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[323, 3, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[323, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[323, 3, 1, "", "k"], [323, 3, 1, "", "num_correct"], [323, 3, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[324, 1, 1, "", "fit"]], "neural_compressor.model": [[325, 0, 0, "-", "base_model"], [327, 0, 0, "-", "keras_model"], [328, 0, 0, "-", "model"], [329, 0, 0, "-", "mxnet_model"], [330, 0, 0, "-", "nets_factory"], [331, 0, 0, "-", "onnx_model"], [332, 0, 0, "-", "tensorflow_model"], [333, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[325, 2, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[327, 2, 1, "", "KerasModel"]], "neural_compressor.model.model": [[328, 2, 1, "", "Model"], [328, 1, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[329, 2, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[330, 2, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[331, 2, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[332, 2, 1, "", "TensorflowBaseModel"], [332, 2, 1, "", "TensorflowCheckpointModel"], [332, 2, 1, "", "TensorflowModel"], [332, 2, 1, "", "TensorflowQATModel"], [332, 2, 1, "", "TensorflowSavedModelModel"], [332, 1, 1, "", "checkpoint_session"], [332, 1, 1, "", "estimator_session"], [332, 1, 1, "", "frozen_pb_session"], [332, 1, 1, "", "get_model_type"], [332, 1, 1, "", "graph_def_session"], [332, 1, 1, "", "graph_session"], [332, 1, 1, "", "keras_session"], [332, 1, 1, "", "load_saved_model"], [332, 1, 1, "", "saved_model_session"], [332, 1, 1, "", "slim_session"], [332, 1, 1, "", "validate_and_inference_input_output"], [332, 1, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[333, 2, 1, "", "IPEXModel"], [333, 2, 1, "", "PyTorchBaseModel"], [333, 2, 1, "", "PyTorchFXModel"], [333, 2, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[334, 2, 1, "", "Accuracy"], [334, 2, 1, "", "Footprint"], [334, 2, 1, "", "ModelSize"], [334, 2, 1, "", "MultiObjective"], [334, 2, 1, "", "Objective"], [334, 2, 1, "", "Performance"], [334, 1, 1, "", "objective_custom_registry"], [334, 1, 1, "", "objective_registry"]], "neural_compressor.quantization": [[335, 1, 1, "", "fit"]], "neural_compressor.strategy": [[336, 0, 0, "-", "auto"], [337, 0, 0, "-", "auto_mixed_precision"], [338, 0, 0, "-", "basic"], [339, 0, 0, "-", "bayesian"], [340, 0, 0, "-", "conservative"], [341, 0, 0, "-", "exhaustive"], [342, 0, 0, "-", "hawq_v2"], [344, 0, 0, "-", "mse"], [345, 0, 0, "-", "mse_v2"], [346, 0, 0, "-", "random"], [347, 0, 0, "-", "strategy"], [349, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[336, 2, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[337, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[338, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[339, 2, 1, "", "BayesianOptimization"], [339, 2, 1, "", "BayesianTuneStrategy"], [339, 2, 1, "", "TargetSpace"], [339, 1, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[340, 2, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[341, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[342, 2, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[344, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[345, 2, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[346, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[347, 2, 1, "", "TuneStrategy"], [347, 2, 1, "", "TuneStrategyMeta"], [347, 1, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[348, 0, 0, "-", "constant"], [350, 0, 0, "-", "tuning_sampler"], [351, 0, 0, "-", "tuning_space"], [352, 0, 0, "-", "tuning_structs"], [353, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[350, 2, 1, "", "BlockFallbackTuningSampler"], [350, 2, 1, "", "FallbackTuningSampler"], [350, 2, 1, "", "ModelWiseTuningSampler"], [350, 2, 1, "", "OpTypeWiseTuningSampler"], [350, 2, 1, "", "OpWiseTuningSampler"], [350, 2, 1, "", "TuningOrder"], [350, 2, 1, "", "TuningSampler"], [350, 2, 1, "", "TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_space": [[351, 2, 1, "", "TuningItem"], [351, 2, 1, "", "TuningSpace"], [351, 1, 1, "", "initial_tuning_cfg_with_quant_mode"], [351, 1, 1, "", "pattern_to_internal"], [351, 1, 1, "", "pattern_to_path"], [351, 1, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[352, 2, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[353, 2, 1, "", "OrderedDefaultDict"], [353, 1, 1, "", "extract_data_type"], [353, 1, 1, "", "get_adaptor_name"], [353, 1, 1, "", "reverted_data_type"]], "neural_compressor.template": [[354, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[354, 2, 1, "", "ExampleClass"], [354, 3, 1, "", "attribute1"], [354, 1, 1, "", "function1"], [354, 1, 1, "", "function2"], [354, 1, 1, "", "function3"], [354, 1, 1, "", "generator1"], [354, 4, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[354, 3, 1, "", "attr1"], [354, 3, 1, "", "attr2"], [354, 3, 1, "", "attr5"]], "neural_compressor.training": [[356, 2, 1, "", "CallBacks"], [356, 2, 1, "", "CompressionManager"], [356, 1, 1, "", "fit"], [356, 1, 1, "", "prepare_compression"]], "neural_compressor.utils": [[357, 0, 0, "-", "collect_layer_histogram"], [358, 0, 0, "-", "constant"], [359, 0, 0, "-", "create_obj_from_config"], [361, 0, 0, "-", "kl_divergence"], [362, 0, 0, "-", "load_huggingface"], [363, 0, 0, "-", "logger"], [364, 0, 0, "-", "options"], [365, 0, 0, "-", "pytorch"], [366, 0, 0, "-", "utility"]], "neural_compressor.utils.collect_layer_histogram": [[357, 2, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[359, 1, 1, "", "create_dataloader"], [359, 1, 1, "", "create_dataset"], [359, 1, 1, "", "create_eval_func"], [359, 1, 1, "", "create_train_func"], [359, 1, 1, "", "get_algorithm"], [359, 1, 1, "", "get_func_from_config"], [359, 1, 1, "", "get_metrics"], [359, 1, 1, "", "get_postprocess"], [359, 1, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[361, 2, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[362, 2, 1, "", "OptimizedModel"], [362, 1, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[363, 2, 1, "", "Logger"], [363, 1, 1, "", "debug"], [363, 1, 1, "", "error"], [363, 1, 1, "", "fatal"], [363, 1, 1, "", "info"], [363, 1, 1, "", "log"], [363, 1, 1, "", "warn"], [363, 1, 1, "", "warning"]], "neural_compressor.utils.options": [[364, 2, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[365, 1, 1, "", "is_int8_model"], [365, 1, 1, "", "load"]], "neural_compressor.utils.utility": [[366, 2, 1, "", "CaptureOutputToFile"], [366, 2, 1, "", "CpuInfo"], [366, 1, 1, "", "Dequantize"], [366, 1, 1, "", "DequantizeWeight"], [366, 2, 1, "", "DotDict"], [366, 2, 1, "", "GLOBAL_STATE"], [366, 2, 1, "", "LazyImport"], [366, 2, 1, "", "MODE"], [366, 2, 1, "", "Statistics"], [366, 1, 1, "", "alias_param"], [366, 1, 1, "", "combine_histogram"], [366, 1, 1, "", "compare_objects"], [366, 1, 1, "", "compute_sparsity"], [366, 1, 1, "", "dump_class_attrs"], [366, 1, 1, "", "dump_data_to_local"], [366, 1, 1, "", "dump_elapsed_time"], [366, 1, 1, "", "equal_dicts"], [366, 1, 1, "", "fault_tolerant_file"], [366, 1, 1, "", "get_all_fp32_data"], [366, 1, 1, "", "get_size"], [366, 1, 1, "", "get_tensor_histogram"], [366, 1, 1, "", "get_tuning_history"], [366, 1, 1, "", "load_data_from_pkl"], [366, 1, 1, "", "recover"], [366, 1, 1, "", "set_random_seed"], [366, 1, 1, "", "set_resume_from"], [366, 1, 1, "", "set_tensorboard"], [366, 1, 1, "", "set_workspace"], [366, 1, 1, "", "show_memory_info"], [366, 1, 1, "", "singleton"], [366, 1, 1, "", "str2array"], [366, 1, 1, "", "time_limit"], [366, 1, 1, "", "version1_eq_version2"], [366, 1, 1, "", "version1_gt_version2"], [366, 1, 1, "", "version1_gte_version2"], [366, 1, 1, "", "version1_lt_version2"], [366, 1, 1, "", "version1_lte_version2"]], "neural_compressor.ux": [[442, 0, 0, "-", "components"], [501, 0, 0, "-", "inc_bench"], [510, 0, 0, "-", "utils"], [536, 0, 0, "-", "web"]], "neural_compressor.ux.components": [[370, 0, 0, "-", "benchmark"], [374, 0, 0, "-", "config_generator"], [382, 0, 0, "-", "configuration_wizard"], [418, 0, 0, "-", "db_manager"], [423, 0, 0, "-", "diagnosis"], [431, 0, 0, "-", "file_browser"], [437, 0, 0, "-", "graph"], [443, 0, 0, "-", "jobs_management"], [447, 0, 0, "-", "manage_workspace"], [449, 0, 0, "-", "model"], [468, 0, 0, "-", "model_zoo"], [470, 0, 0, "-", "names_mapper"], [477, 0, 0, "-", "optimization"], [493, 0, 0, "-", "profiling"]], "neural_compressor.ux.components.benchmark": [[370, 2, 1, "", "Benchmarks"], [367, 0, 0, "-", "benchmark"], [368, 0, 0, "-", "benchmark_model"], [369, 0, 0, "-", "execute_benchmark"]], "neural_compressor.ux.components.benchmark.benchmark": [[367, 2, 1, "", "Benchmark"], [367, 2, 1, "", "DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[368, 1, 1, "", "benchmark_model"], [368, 1, 1, "", "parse_args"], [368, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[369, 1, 1, "", "benchmark_result_update"], [369, 1, 1, "", "benchmark_result_update_pytorch_script"], [369, 1, 1, "", "execute_benchmark"], [369, 1, 1, "", "execute_real_benchmark"], [369, 1, 1, "", "pytorch_script_bench_optimizations"], [369, 1, 1, "", "pytorch_script_bench_original_model"]], "neural_compressor.ux.components.config_generator": [[371, 0, 0, "-", "benchmark_config_generator"], [372, 0, 0, "-", "config_generator"], [373, 0, 0, "-", "graph_optimization_config_generator"], [375, 0, 0, "-", "mixed_precision_config_generator"], [376, 0, 0, "-", "profiling_config_generator"], [377, 0, 0, "-", "pruning_config_generator"], [378, 0, 0, "-", "quantization_config_generator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[371, 2, 1, "", "BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator": [[372, 2, 1, "", "ConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[373, 2, 1, "", "GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[375, 2, 1, "", "MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[376, 2, 1, "", "ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[377, 2, 1, "", "PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[378, 2, 1, "", "QuantizationConfigGenerator"]], "neural_compressor.ux.components.configuration_wizard": [[379, 0, 0, "-", "configuration_parser"], [380, 0, 0, "-", "get_boundary_nodes"], [381, 0, 0, "-", "get_configuration"], [383, 0, 0, "-", "params_feeder"], [384, 0, 0, "-", "pruning_config_parser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[379, 2, 1, "", "ConfigurationParser"], [379, 1, 1, "", "normalize_string_list"], [379, 1, 1, "", "parse_list_value"], [379, 1, 1, "", "parse_multidim_list"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[380, 1, 1, "", "get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[381, 1, 1, "", "get_predefined_configuration"], [381, 1, 1, "", "update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[383, 2, 1, "", "Feeder"], [383, 1, 1, "", "get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[384, 2, 1, "", "PruningConfigParser"]], "neural_compressor.ux.components.db_manager": [[385, 0, 0, "-", "db_manager"], [394, 0, 0, "-", "db_models"], [413, 0, 0, "-", "db_operations"], [419, 0, 0, "-", "params_interfaces"], [420, 0, 0, "-", "utils"]], "neural_compressor.ux.components.db_manager.db_manager": [[385, 2, 1, "", "DBManager"]], "neural_compressor.ux.components.db_manager.db_models": [[386, 0, 0, "-", "benchmark"], [387, 0, 0, "-", "benchmark_result"], [388, 0, 0, "-", "dataloader"], [389, 0, 0, "-", "dataset"], [390, 0, 0, "-", "domain"], [391, 0, 0, "-", "domain_flavour"], [392, 0, 0, "-", "example"], [393, 0, 0, "-", "framework"], [395, 0, 0, "-", "metric"], [396, 0, 0, "-", "model"], [397, 0, 0, "-", "optimization"], [398, 0, 0, "-", "optimization_type"], [399, 0, 0, "-", "precision"], [400, 0, 0, "-", "profiling"], [401, 0, 0, "-", "profiling_result"], [402, 0, 0, "-", "project"], [403, 0, 0, "-", "pruning_details"], [404, 0, 0, "-", "transform"], [405, 0, 0, "-", "tuning_details"], [406, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[386, 2, 1, "", "Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[387, 2, 1, "", "BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[388, 2, 1, "", "Dataloader"], [388, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[389, 2, 1, "", "Dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[390, 2, 1, "", "Domain"], [390, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[391, 2, 1, "", "DomainFlavour"], [391, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.example": [[392, 2, 1, "", "Example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[393, 2, 1, "", "Framework"], [393, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[395, 2, 1, "", "Metric"], [395, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.model": [[396, 2, 1, "", "Model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[397, 2, 1, "", "Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[398, 2, 1, "", "OptimizationType"], [398, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[399, 2, 1, "", "Precision"], [399, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[400, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[401, 2, 1, "", "ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.project": [[402, 2, 1, "", "Project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[403, 2, 1, "", "PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[404, 2, 1, "", "Transform"], [404, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[405, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[406, 2, 1, "", "TuningHistory"]], "neural_compressor.ux.components.db_manager.db_operations": [[407, 0, 0, "-", "benchmark_api_interface"], [408, 0, 0, "-", "dataset_api_interface"], [409, 0, 0, "-", "db_operations"], [410, 0, 0, "-", "diagnosis_api_interface"], [411, 0, 0, "-", "dictionaries_api_interface"], [412, 0, 0, "-", "examples_api_interface"], [414, 0, 0, "-", "model_api_interface"], [415, 0, 0, "-", "optimization_api_interface"], [416, 0, 0, "-", "profiling_api_interface"], [417, 0, 0, "-", "project_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[407, 2, 1, "", "BenchmarkAPIInterface"], [407, 1, 1, "", "before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[408, 2, 1, "", "DatasetAPIInterface"], [408, 1, 1, "", "initialize_associations"], [408, 1, 1, "", "initialize_precision_optimization_types_association"], [408, 1, 1, "", "search_in_list_of_dict"], [408, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [408, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[409, 1, 1, "", "initialize_associations"], [409, 1, 1, "", "initialize_precision_optimization_types_association"], [409, 1, 1, "", "search_in_list_of_dict"], [409, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [409, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[410, 2, 1, "", "DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[411, 2, 1, "", "DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[412, 2, 1, "", "ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[414, 2, 1, "", "ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[415, 2, 1, "", "OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[416, 2, 1, "", "ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[417, 2, 1, "", "ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[419, 2, 1, "", "BenchmarkAddParamsInterface"], [419, 2, 1, "", "BenchmarkEditParamsInterface"], [419, 2, 1, "", "DatasetAddParamsInterface"], [419, 2, 1, "", "DiagnosisOptimizationParamsInterface"], [419, 2, 1, "", "ModelAddParamsInterface"], [419, 2, 1, "", "OptimizationAddParamsInterface"], [419, 2, 1, "", "OptimizationEditParamsInterface"], [419, 2, 1, "", "ProfilingAddParamsInterface"], [419, 2, 1, "", "ProfilingEditParamsInterface"], [419, 2, 1, "", "ProfilingResultAddParamsInterface"], [419, 2, 1, "", "TuningHistoryInterface"], [419, 2, 1, "", "TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.utils": [[420, 1, 1, "", "get_framework_dataloaders_config"], [420, 1, 1, "", "get_framework_transforms_config"], [420, 1, 1, "", "update_dataloaders_params"]], "neural_compressor.ux.components.diagnosis": [[421, 0, 0, "-", "diagnosis"], [422, 0, 0, "-", "factory"], [424, 0, 0, "-", "onnx_diagnosis"], [426, 0, 0, "-", "op_details"], [427, 0, 0, "-", "op_entry"], [428, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[421, 2, 1, "", "Diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[422, 2, 1, "", "DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[425, 0, 0, "-", "onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[425, 2, 1, "", "OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[426, 2, 1, "", "OpActivation"], [426, 2, 1, "", "OpDetails"], [426, 2, 1, "", "OpPattern"], [426, 2, 1, "", "OpWeights"]], "neural_compressor.ux.components.diagnosis.op_entry": [[427, 2, 1, "", "OpEntry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[429, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[429, 2, 1, "", "TensorflowDiagnosis"]], "neural_compressor.ux.components.file_browser": [[430, 0, 0, "-", "file_browser"]], "neural_compressor.ux.components.file_browser.file_browser": [[430, 1, 1, "", "create_dir_entry"], [430, 1, 1, "", "create_entry"], [430, 1, 1, "", "create_file_entry"], [430, 1, 1, "", "filter_requested_entries"], [430, 1, 1, "", "get_directory_entries"], [430, 1, 1, "", "get_filter_value"], [430, 1, 1, "", "get_non_hidden_directory_entries"], [430, 1, 1, "", "get_requested_path"], [430, 1, 1, "", "get_setting_value"], [430, 1, 1, "", "is_dataset_or_directory_entry"], [430, 1, 1, "", "is_directory_entry"], [430, 1, 1, "", "is_model_or_directory_entry"], [430, 1, 1, "", "should_show_files"], [430, 1, 1, "", "should_show_only_model_files"], [430, 1, 1, "", "sort_entries"]], "neural_compressor.ux.components.graph": [[432, 0, 0, "-", "attribute"], [433, 0, 0, "-", "collapser"], [434, 0, 0, "-", "edge"], [435, 0, 0, "-", "graph"], [436, 0, 0, "-", "graph_reader"], [438, 0, 0, "-", "node"], [439, 0, 0, "-", "reader"]], "neural_compressor.ux.components.graph.attribute": [[432, 2, 1, "", "Attribute"]], "neural_compressor.ux.components.graph.collapser": [[433, 2, 1, "", "Collapser"]], "neural_compressor.ux.components.graph.edge": [[434, 2, 1, "", "Edge"]], "neural_compressor.ux.components.graph.graph": [[435, 2, 1, "", "Graph"]], "neural_compressor.ux.components.graph.graph_reader": [[436, 2, 1, "", "GraphReader"]], "neural_compressor.ux.components.graph.node": [[438, 2, 1, "", "GroupNode"], [438, 2, 1, "", "Node"]], "neural_compressor.ux.components.graph.reader": [[440, 0, 0, "-", "onnxrt_reader"], [441, 0, 0, "-", "tensorflow_reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[440, 2, 1, "", "OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[441, 2, 1, "", "TensorflowReader"]], "neural_compressor.ux.components.jobs_management": [[444, 0, 0, "-", "jobs_control_queue"], [445, 0, 0, "-", "jobs_manager"], [446, 0, 0, "-", "request"]], "neural_compressor.ux.components.manage_workspace": [[447, 1, 1, "", "get_default_path"]], "neural_compressor.ux.components.model": [[448, 0, 0, "-", "domain"], [450, 0, 0, "-", "model"], [451, 0, 0, "-", "model_type_getter"], [452, 0, 0, "-", "onnxrt"], [454, 0, 0, "-", "pytorch"], [456, 0, 0, "-", "repository"], [457, 0, 0, "-", "shape"], [459, 0, 0, "-", "tensorflow"]], "neural_compressor.ux.components.model.domain": [[448, 2, 1, "", "Domain"]], "neural_compressor.ux.components.model.model": [[450, 2, 1, "", "Model"]], "neural_compressor.ux.components.model.model_type_getter": [[451, 1, 1, "", "get_model_type"]], "neural_compressor.ux.components.model.onnxrt": [[453, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.onnxrt.model": [[453, 2, 1, "", "OnnxrtModel"], [453, 1, 1, "", "remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.pytorch": [[455, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.pytorch.model": [[455, 2, 1, "", "PyTorchScriptModel"]], "neural_compressor.ux.components.model.repository": [[456, 2, 1, "", "ModelRepository"]], "neural_compressor.ux.components.model.shape": [[457, 2, 1, "", "Shape"]], "neural_compressor.ux.components.model.tensorflow": [[458, 0, 0, "-", "frozen_pb"], [460, 0, 0, "-", "keras"], [461, 0, 0, "-", "meta_graph"], [462, 0, 0, "-", "model"], [463, 0, 0, "-", "saved_model"], [464, 0, 0, "-", "utils"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[458, 2, 1, "", "FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.keras": [[460, 2, 1, "", "KerasModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[461, 2, 1, "", "MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.model": [[462, 2, 1, "", "TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[463, 2, 1, "", "SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.utils": [[464, 1, 1, "", "get_input_shape"]], "neural_compressor.ux.components.model_zoo": [[465, 0, 0, "-", "download_config"], [466, 0, 0, "-", "download_model"], [467, 0, 0, "-", "downloader"], [469, 0, 0, "-", "list_models"]], "neural_compressor.ux.components.model_zoo.download_config": [[465, 1, 1, "", "download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[466, 1, 1, "", "download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[467, 2, 1, "", "Downloader"]], "neural_compressor.ux.components.model_zoo.list_models": [[469, 1, 1, "", "check_version"], [469, 1, 1, "", "get_available_models"], [469, 1, 1, "", "get_framework_module_name"], [469, 1, 1, "", "get_installed_frameworks"], [469, 1, 1, "", "list_models"], [469, 1, 1, "", "validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[471, 0, 0, "-", "names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[471, 2, 1, "", "MappingDirection"], [471, 2, 1, "", "NamesMapper"]], "neural_compressor.ux.components.optimization": [[477, 2, 1, "", "Optimizations"], [472, 0, 0, "-", "execute_optimization"], [473, 0, 0, "-", "factory"], [475, 0, 0, "-", "graph_optimizer"], [478, 0, 0, "-", "mixed_precision"], [481, 0, 0, "-", "neural_coder_optimization"], [483, 0, 0, "-", "optimization"], [484, 0, 0, "-", "pruning"], [487, 0, 0, "-", "tune"], [490, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.optimization.execute_optimization": [[472, 1, 1, "", "check_if_collect_tuning_history"], [472, 1, 1, "", "execute_optimization"], [472, 1, 1, "", "execute_optimization_pytorch_script"], [472, 1, 1, "", "execute_optimization_regular"], [472, 1, 1, "", "parse_logs"], [472, 1, 1, "", "parse_model_data_to_bench_names"]], "neural_compressor.ux.components.optimization.factory": [[473, 2, 1, "", "OptimizationFactory"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[474, 0, 0, "-", "graph_optimization"], [476, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[474, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[476, 1, 1, "", "optimize_graph"], [476, 1, 1, "", "optimize_graph_config"], [476, 1, 1, "", "parse_args"], [476, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.mixed_precision": [[479, 0, 0, "-", "mixed_precision"], [480, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[479, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[480, 1, 1, "", "optimize_graph"], [480, 1, 1, "", "optimize_graph_config"], [480, 1, 1, "", "parse_args"], [480, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[482, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[482, 1, 1, "", "optimize_pt_script"]], "neural_compressor.ux.components.optimization.optimization": [[483, 2, 1, "", "DataloaderInterface"], [483, 2, 1, "", "Optimization"], [483, 2, 1, "", "OptimizationInterface"]], "neural_compressor.ux.components.optimization.pruning": [[485, 0, 0, "-", "optimize_model"], [486, 0, 0, "-", "pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[485, 1, 1, "", "optimize_model"], [485, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[486, 2, 1, "", "Pruning"]], "neural_compressor.ux.components.optimization.tune": [[488, 0, 0, "-", "tune_model"], [489, 0, 0, "-", "tuning"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[488, 1, 1, "", "parse_args"], [488, 1, 1, "", "set_eager_execution"], [488, 1, 1, "", "tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[489, 2, 1, "", "AccuracyCriterion"], [489, 2, 1, "", "Tuning"], [489, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.optimization.tuning_history": [[490, 2, 1, "", "TuningHistory"], [490, 2, 1, "", "Watcher"], [490, 1, 1, "", "tuning_history"], [490, 1, 1, "", "tuning_history_path"]], "neural_compressor.ux.components.profiling": [[491, 0, 0, "-", "execute_profiling"], [492, 0, 0, "-", "factory"], [494, 0, 0, "-", "profile_model"], [495, 0, 0, "-", "profiler"], [496, 0, 0, "-", "profiling"], [498, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.ux.components.profiling.execute_profiling": [[491, 1, 1, "", "execute_profiling"], [491, 1, 1, "", "execute_real_profiling"]], "neural_compressor.ux.components.profiling.factory": [[492, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.profile_model": [[494, 1, 1, "", "load_profiling_details"], [494, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.profiling.profiler": [[495, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.profiling": [[496, 2, 1, "", "DataloaderInterface"], [496, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[497, 0, 0, "-", "factory"], [499, 0, 0, "-", "profiler"], [500, 0, 0, "-", "utils"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[497, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[499, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[500, 1, 1, "", "delete_assign"]], "neural_compressor.ux.inc_bench": [[501, 1, 1, "", "main"], [501, 1, 1, "", "prepare_environment"]], "neural_compressor.ux.utils": [[503, 0, 0, "-", "consts"], [504, 0, 0, "-", "environment"], [505, 0, 0, "-", "exceptions"], [506, 0, 0, "-", "executor"], [507, 0, 0, "-", "expiring_dict"], [508, 0, 0, "-", "github_info"], [509, 0, 0, "-", "hw_info"], [511, 0, 0, "-", "json_serializer"], [512, 0, 0, "-", "logger"], [513, 0, 0, "-", "parser"], [514, 0, 0, "-", "proc"], [515, 0, 0, "-", "processes"], [516, 0, 0, "-", "singleton"], [517, 0, 0, "-", "status_updates"], [518, 0, 0, "-", "templates"], [521, 0, 0, "-", "utils"], [526, 0, 0, "-", "workload"], [532, 0, 0, "-", "yaml_utils"]], "neural_compressor.ux.utils.consts": [[503, 2, 1, "", "DomainFlavours"], [503, 2, 1, "", "Domains"], [503, 2, 1, "", "ExecutionStatus"], [503, 2, 1, "", "Frameworks"], [503, 2, 1, "", "OptimizationTypes"], [503, 2, 1, "", "Precisions"], [503, 2, 1, "", "Strategies"]], "neural_compressor.ux.utils.environment": [[504, 2, 1, "", "Environment"]], "neural_compressor.ux.utils.exceptions": [[505, 5, 1, "", "AccessDeniedException"], [505, 5, 1, "", "ClientErrorException"], [505, 5, 1, "", "InternalException"], [505, 5, 1, "", "NotFoundException"]], "neural_compressor.ux.utils.executor": [[506, 2, 1, "", "Executor"]], "neural_compressor.ux.utils.expiring_dict": [[507, 2, 1, "", "ExpiringDict"], [507, 2, 1, "", "ExpiringDictItem"]], "neural_compressor.ux.utils.github_info": [[508, 2, 1, "", "GithubInfo"]], "neural_compressor.ux.utils.hw_info": [[509, 2, 1, "", "HWInfo"], [509, 1, 1, "", "get_bios_version"], [509, 1, 1, "", "get_distribution"], [509, 1, 1, "", "get_framework_dependency_info"], [509, 1, 1, "", "get_framework_info"], [509, 1, 1, "", "get_kernel_version"], [509, 1, 1, "", "get_number_of_sockets"], [509, 1, 1, "", "is_turbo_boost_enabled"]], "neural_compressor.ux.utils.json_serializer": [[511, 2, 1, "", "JsonSerializer"]], "neural_compressor.ux.utils.logger": [[512, 1, 1, "", "change_log_level"]], "neural_compressor.ux.utils.parser": [[513, 2, 1, "", "AccuracyParser"], [513, 2, 1, "", "BenchmarkParserFactory"], [513, 2, 1, "", "OptimizationParser"], [513, 2, 1, "", "Parser"], [513, 2, 1, "", "PerformanceParser"], [513, 2, 1, "", "ProfilingParser"]], "neural_compressor.ux.utils.proc": [[514, 2, 1, "", "Proc"]], "neural_compressor.ux.utils.processes": [[515, 2, 1, "", "NCProcesses"]], "neural_compressor.ux.utils.singleton": [[516, 2, 1, "", "Singleton"]], "neural_compressor.ux.utils.status_updates": [[517, 1, 1, "", "get_status_update_function"]], "neural_compressor.ux.utils.templates": [[519, 0, 0, "-", "metric"], [520, 0, 0, "-", "workdir"]], "neural_compressor.ux.utils.templates.metric": [[519, 2, 1, "", "Metric"]], "neural_compressor.ux.utils.templates.workdir": [[520, 2, 1, "", "Workdir"]], "neural_compressor.ux.utils.utils": [[521, 1, 1, "", "are_archive_filenames_valid"], [521, 1, 1, "", "check_module"], [521, 1, 1, "", "deprecated"], [521, 1, 1, "", "determine_ip"], [521, 1, 1, "", "export_to_csv"], [521, 1, 1, "", "filter_transforms"], [521, 1, 1, "", "get_dataset_path"], [521, 1, 1, "", "get_default_pruning_config_path"], [521, 1, 1, "", "get_file_extension"], [521, 1, 1, "", "get_framework_from_path"], [521, 1, 1, "", "get_height_width_from_size"], [521, 1, 1, "", "get_metrics_dict"], [521, 1, 1, "", "get_model_zoo_config_path"], [521, 1, 1, "", "get_model_zoo_model_path"], [521, 1, 1, "", "get_module_version"], [521, 1, 1, "", "get_predefined_config_path"], [521, 1, 1, "", "get_shape_from_transforms"], [521, 1, 1, "", "get_size"], [521, 1, 1, "", "is_dataset_file"], [521, 1, 1, "", "is_development_env"], [521, 1, 1, "", "is_hidden"], [521, 1, 1, "", "load_dataloader_config"], [521, 1, 1, "", "load_help_nc_params"], [521, 1, 1, "", "load_metrics_config"], [521, 1, 1, "", "load_model_config"], [521, 1, 1, "", "load_model_wise_params"], [521, 1, 1, "", "load_precisions_config"], [521, 1, 1, "", "load_pruning_details_config"], [521, 1, 1, "", "load_transforms_config"], [521, 1, 1, "", "load_transforms_filter_config"], [521, 1, 1, "", "normalize_domain"], [521, 1, 1, "", "normalize_framework"], [521, 1, 1, "", "normalize_string"], [521, 1, 1, "", "parse_bool_value"], [521, 1, 1, "", "parse_to_float_list"], [521, 1, 1, "", "parse_to_string_list"], [521, 1, 1, "", "parse_version"], [521, 1, 1, "", "release_tag"], [521, 1, 1, "", "replace_with_values"], [521, 1, 1, "", "safe_extract_archive"], [521, 1, 1, "", "verify_file_path"]], "neural_compressor.ux.utils.workload": [[522, 0, 0, "-", "config"], [523, 0, 0, "-", "dataloader"], [524, 0, 0, "-", "evaluation"], [525, 0, 0, "-", "graph_optimization"], [527, 0, 0, "-", "mixed_precision"], [528, 0, 0, "-", "model"], [529, 0, 0, "-", "pruning"], [530, 0, 0, "-", "quantization"], [531, 0, 0, "-", "tuning"]], "neural_compressor.ux.utils.workload.config": [[522, 2, 1, "", "Config"]], "neural_compressor.ux.utils.workload.dataloader": [[523, 2, 1, "", "Dataloader"], [523, 2, 1, "", "Dataset"], [523, 2, 1, "", "Filter"], [523, 2, 1, "", "LabelBalance"], [523, 2, 1, "", "Transform"]], "neural_compressor.ux.utils.workload.evaluation": [[524, 2, 1, "", "Accuracy"], [524, 2, 1, "", "Configs"], [524, 2, 1, "", "Evaluation"], [524, 2, 1, "", "Metric"], [524, 2, 1, "", "Performance"], [524, 2, 1, "", "Postprocess"], [524, 2, 1, "", "PostprocessSchema"]], "neural_compressor.ux.utils.workload.graph_optimization": [[525, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.utils.workload.mixed_precision": [[527, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.utils.workload.model": [[528, 2, 1, "", "Model"]], "neural_compressor.ux.utils.workload.pruning": [[529, 2, 1, "", "AdamOptimizer"], [529, 2, 1, "", "AdamWOptimizer"], [529, 2, 1, "", "Approach"], [529, 2, 1, "", "Criterion"], [529, 2, 1, "", "CrossEntropyLossCriterion"], [529, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [529, 2, 1, "", "KnowledgeDistillationLossCriterion"], [529, 2, 1, "", "Optimizer"], [529, 2, 1, "", "Pruning"], [529, 2, 1, "", "SGDOptimizer"], [529, 2, 1, "", "SelfKnowledgeDistillationLoss"], [529, 2, 1, "", "SparseCategoricalCrossentropyCriterion"], [529, 2, 1, "", "Train"], [529, 2, 1, "", "WeightCompressionApproach"], [529, 1, 1, "", "parse_dict_value_to_float"], [529, 1, 1, "", "parse_dict_value_to_int"]], "neural_compressor.ux.utils.workload.quantization": [[530, 2, 1, "", "Advance"], [530, 2, 1, "", "Calibration"], [530, 2, 1, "", "Quantization"], [530, 2, 1, "", "WiseConfig"], [530, 2, 1, "", "WiseConfigDetails"]], "neural_compressor.ux.utils.workload.tuning": [[531, 2, 1, "", "AccCriterion"], [531, 2, 1, "", "Diagnosis"], [531, 2, 1, "", "ExitPolicy"], [531, 2, 1, "", "MultiObjectives"], [531, 2, 1, "", "Strategy"], [531, 2, 1, "", "Tuning"], [531, 2, 1, "", "Workspace"]], "neural_compressor.ux.utils.yaml_utils": [[532, 1, 1, "", "float_representer"], [532, 1, 1, "", "pruner_representer"]], "neural_compressor.ux.web": [[533, 0, 0, "-", "communication"], [534, 0, 0, "-", "configuration"], [535, 0, 0, "-", "exceptions"], [537, 0, 0, "-", "router"], [538, 0, 0, "-", "server"], [541, 0, 0, "-", "service"]], "neural_compressor.ux.web.communication": [[533, 2, 1, "", "Message"], [533, 2, 1, "", "MessageQueue"], [533, 2, 1, "", "Request"], [533, 2, 1, "", "Response"], [533, 1, 1, "", "create_simple_response"]], "neural_compressor.ux.web.configuration": [[534, 2, 1, "", "Configuration"]], "neural_compressor.ux.web.exceptions": [[535, 5, 1, "", "ServiceNotFoundException"]], "neural_compressor.ux.web.router": [[537, 2, 1, "", "DeferredRoutingDefinition"], [537, 2, 1, "", "DeferredSubprocessRoutingDefinition"], [537, 2, 1, "", "RealtimeRoutingDefinition"], [537, 2, 1, "", "Router"], [537, 2, 1, "", "RoutingDefinition"], [537, 1, 1, "", "find_pattern_in_graph"], [537, 1, 1, "", "get_model_graph"], [537, 1, 1, "", "get_system_info"]], "neural_compressor.ux.web.server": [[538, 1, 1, "", "allow_api_call"], [538, 1, 1, "", "block_iframe"], [538, 1, 1, "", "block_sniffing"], [538, 1, 1, "", "build_parameters"], [538, 1, 1, "", "disable_cache"], [538, 1, 1, "", "get_tls_args"], [538, 1, 1, "", "handle_api_call"], [538, 1, 1, "", "page_not_found"], [538, 1, 1, "", "require_api_token"], [538, 1, 1, "", "root"], [538, 1, 1, "", "run_server"], [538, 1, 1, "", "web_socket_publisher"]], "neural_compressor.ux.web.service": [[539, 0, 0, "-", "benchmark"], [540, 0, 0, "-", "history_snapshot_parser"], [542, 0, 0, "-", "model"], [543, 0, 0, "-", "optimization"], [544, 0, 0, "-", "profiling"], [545, 0, 0, "-", "request_data_processor"], [546, 0, 0, "-", "response_generator"], [547, 0, 0, "-", "workload"]], "neural_compressor.ux.web.service.benchmark": [[539, 2, 1, "", "BenchmarkService"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[540, 2, 1, "", "HistorySnapshotParser"]], "neural_compressor.ux.web.service.model": [[542, 2, 1, "", "ModelService"]], "neural_compressor.ux.web.service.optimization": [[543, 2, 1, "", "OptimizationService"]], "neural_compressor.ux.web.service.profiling": [[544, 2, 1, "", "ProfilingService"]], "neural_compressor.ux.web.service.request_data_processor": [[545, 2, 1, "", "RequestDataProcessor"]], "neural_compressor.ux.web.service.response_generator": [[546, 2, 1, "", "ResponseGenerator"]], "neural_compressor.ux.web.service.workload": [[547, 2, 1, "", "WorkloadService"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:attribute", "4": "py:data", "5": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "data", "Python data"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"644ec953a7dc_pruning_support": 0, "6ece06672ed3_v1_14": 1, "modul": [1, 5, 6, 8, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 207, 208, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 224, 227, 228, 229, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 251, 253, 254, 255, 257, 258, 259, 260, 261, 263, 264, 266, 267, 268, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 288, 289, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 311, 312, 313, 314, 316, 317, 319, 320, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 350, 351, 352, 353, 354, 356, 357, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 419, 420, 421, 422, 425, 426, 427, 429, 430, 432, 433, 434, 435, 436, 438, 440, 441, 447, 448, 450, 451, 453, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 469, 471, 472, 473, 474, 476, 479, 480, 482, 483, 485, 486, 488, 489, 490, 491, 492, 494, 495, 496, 497, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547], "content": [1, 5, 6, 7, 8, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 353, 354, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 419, 420, 421, 422, 425, 426, 427, 429, 430, 432, 433, 434, 435, 436, 438, 440, 441, 447, 448, 450, 451, 453, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 469, 471, 472, 473, 474, 476, 477, 479, 480, 482, 483, 485, 486, 488, 489, 490, 491, 492, 494, 495, 496, 497, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 555, 571], "function": [1, 5, 6, 18, 21, 38, 44, 45, 67, 68, 70, 104, 105, 116, 118, 146, 147, 148, 152, 153, 154, 155, 157, 160, 162, 165, 167, 169, 171, 172, 173, 174, 175, 177, 186, 187, 195, 197, 201, 204, 205, 206, 209, 211, 212, 213, 214, 216, 218, 219, 221, 224, 231, 239, 241, 245, 248, 249, 250, 252, 253, 254, 257, 258, 259, 260, 263, 264, 266, 267, 268, 269, 270, 277, 284, 288, 293, 294, 295, 297, 302, 308, 312, 314, 316, 317, 319, 320, 321, 322, 323, 324, 328, 332, 334, 335, 339, 347, 351, 353, 354, 356, 359, 360, 362, 363, 365, 366, 368, 369, 379, 380, 381, 383, 388, 390, 391, 393, 395, 398, 399, 404, 407, 408, 409, 420, 430, 447, 451, 453, 464, 465, 466, 469, 472, 476, 480, 482, 485, 488, 490, 491, 494, 500, 501, 509, 512, 517, 521, 529, 532, 533, 537, 538, 578], "6f0d0f71d92e_v1_13": 2, "9e89549a08c8_v1_11": 3, "block_mask": 4, "env": 5, "neural_compressor": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548], "adaptor": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 556, 557], "class": [6, 8, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 113, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 147, 148, 151, 152, 155, 156, 157, 158, 159, 161, 162, 165, 169, 170, 171, 172, 173, 174, 176, 177, 179, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 227, 228, 229, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 260, 261, 262, 263, 266, 269, 270, 271, 272, 273, 274, 276, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 311, 312, 313, 314, 316, 319, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 350, 351, 352, 353, 354, 356, 357, 360, 361, 362, 363, 364, 366, 367, 370, 371, 372, 373, 375, 376, 377, 378, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 419, 421, 422, 425, 426, 427, 429, 432, 433, 434, 435, 436, 438, 440, 441, 448, 450, 453, 455, 456, 457, 458, 460, 461, 462, 463, 467, 471, 473, 474, 477, 479, 483, 486, 489, 490, 492, 495, 496, 497, 499, 503, 504, 506, 507, 508, 509, 511, 513, 514, 515, 516, 519, 520, 522, 523, 524, 525, 527, 528, 529, 530, 531, 533, 534, 537, 539, 540, 542, 543, 544, 545, 546, 547, 556], "subpackag": [7, 22, 87, 111, 112, 114, 164, 166, 181, 206, 225, 250, 262, 286, 304, 315, 343, 418, 423, 437, 442, 449, 477, 493, 502, 510, 536], "submodul": [7, 17, 22, 34, 51, 76, 87, 95, 101, 106, 111, 112, 114, 117, 130, 143, 149, 157, 163, 164, 166, 168, 178, 182, 189, 201, 205, 209, 216, 223, 226, 233, 245, 249, 252, 256, 262, 269, 275, 281, 287, 291, 304, 310, 315, 322, 326, 343, 349, 355, 360, 370, 374, 382, 394, 413, 418, 423, 424, 428, 431, 437, 439, 442, 443, 449, 452, 454, 459, 468, 470, 475, 477, 478, 481, 484, 487, 493, 498, 502, 510, 518, 526, 536, 541], "packag": [7, 34, 157, 189, 201, 205, 206, 209, 216, 233, 245, 249, 250, 252, 262, 269, 281, 286, 287, 304, 322, 326, 343, 360, 370, 477, 602, 604, 606, 607], "kera": [8, 460], "keras_util": [9, 10, 11, 12, 13, 14, 15], "conv2d": 9, "dens": 10, "depthwise_conv2d": 11, "pool2d": 13, "quantiz": [14, 43, 298, 335, 530, 552, 555, 568, 577, 583, 586, 589, 598, 609, 616, 617, 618, 621, 627], "separable_conv2d": 15, "mxnet": [16, 574, 588, 617, 623, 627], "mxnet_util": [17, 18], "util": [18, 44, 146, 154, 175, 260, 309, 310, 311, 312, 313, 314, 348, 349, 350, 351, 352, 353, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 420, 464, 500, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 559], "onnxrt": [19, 452, 453, 574, 588, 623], "ox_util": [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "calibr": [20, 21], "oper": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], "activ": 23, "argmax": 24, "attent": 25, "binary_op": 26, "concat": 27, "conv": 28, "direct_q8": 29, "embed_layernorm": 30, "gather": 31, "gavgpool": 32, "gemm": 33, "lstm": 35, "matmul": [36, 621], "maxpool": 37, "op": 38, "pad": 39, "pool": 40, "resiz": 41, "split": 42, "pytorch": [45, 365, 454, 455, 574, 578, 588, 590, 617, 618, 622, 623, 627], "queri": [46, 556], "tensorflow": [47, 458, 459, 460, 461, 462, 463, 464, 574, 578, 588, 590, 617, 618, 622, 623, 627], "tf_util": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146], "graph_convert": 48, "graph_converter_without_calib": 49, "graph_rewrit": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "bf16": [50, 51], "bf16_convert": [50, 147], "gener": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85], "convert_add_to_biasadd": 52, "convert_layout": 53, "convert_leakyrelu": 54, "convert_nan_to_random": 55, "convert_placeholder_to_const": 56, "dequantize_cast_optim": 57, "dilated_contract": 58, "dummy_biasadd": 59, "expanddims_optim": 60, "fetch_weight_from_reshap": 61, "fold_batch_norm": 62, "fold_const": 63, "fuse_biasadd_add": 64, "fuse_column_wise_mul": 65, "fuse_conv_with_math": 66, "fuse_decomposed_bn": 67, "fuse_decomposed_in": 68, "fuse_gelu": 69, "fuse_layer_norm": 70, "fuse_pad_with_conv": 71, "fuse_pad_with_fp32_conv": 72, "fuse_reshape_transpos": 73, "graph_cse_optim": 74, "grappler_pass": 75, "insert_print_nod": 77, "move_squeeze_after_relu": 78, "pre_optim": 79, "remove_training_nod": 80, "rename_batch_norm": 81, "split_shared_input": 82, "strip_equivalent_nod": 83, "strip_unused_nod": 84, "switch_optim": 85, "graph_bas": 86, "int8": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 580, 627], "freeze_fake_qu": 88, "freeze_valu": 89, "freeze_value_without_calib": 90, "fuse_conv_redundant_dequant": 91, "fuse_conv_requant": 92, "fuse_matmul_redundant_dequant": 93, "fuse_matmul_requant": 94, "meta_op_optim": 96, "post_hostconst_convert": 97, "post_quantized_op_cs": 98, "rnn_convert": 99, "scale_propag": 100, "onnx": [101, 102, 103, 104, 105, 558, 586, 590, 617, 627], "onnx_graph": 102, "onnx_nod": 103, "onnx_schema": 104, "tf2onnx_util": 105, "qdq": [106, 107, 108, 109, 123, 124, 125, 126, 127, 128, 129, 130, 131, 627], "insert_qdq_pattern": 107, "merge_duplicated_qdq": 108, "share_qdq_y_pattern": 109, "graph_util": 110, "quantize_graph": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138], "qat": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 627], "fake_quant": 113, "quantize_config": 115, "quantize_help": 116, "quantize_lay": [117, 118, 119, 120, 121], "optimize_lay": 118, "quantize_layer_add": 119, "quantize_layer_bas": 120, "quantize_layer_bn": 121, "quantize_wrapp": 122, "fuse_qdq_bn": 123, "fuse_qdq_concatv2": 124, "fuse_qdq_conv": 125, "fuse_qdq_deconv": 126, "fuse_qdq_in": 127, "fuse_qdq_matmul": 128, "fuse_qdq_pool": 129, "optimize_qdq": 131, "quantize_graph_bas": 132, "quantize_graph_bn": 133, "quantize_graph_concatv2": 134, "quantize_graph_conv": 135, "quantize_graph_for_intel_cpu": 136, "quantize_graph_matmul": 137, "quantize_graph_pool": 138, "quantize_graph_common": 139, "tf2onnx_convert": 140, "transform_graph": [141, 142, 143, 144, 145], "bias_correct": 141, "graph_transform_bas": 142, "insert_log": 144, "rerange_quantized_concat": 145, "torch_util": [147, 148, 149, 150, 151, 152, 153, 154, 221], "hawq_metr": 148, "model_wrapp": 150, "pattern_detector": 151, "smooth_quant": [152, 158], "symbolic_trac": 153, "algorithm": [155, 156, 157, 158, 159, 621, 624], "fast_bias_correct": 156, "weight_correct": 159, "benchmark": [160, 213, 367, 368, 369, 370, 386, 539, 562, 571, 572, 589, 616], "compress": [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 223, 224, 563], "callback": 161, "distil": [162, 163, 255, 576, 577, 589, 616, 627], "criterion": [162, 214], "pruner": [165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 284, 295], "criteria": [165, 614, 624], "model_slim": [167, 168, 169, 170], "auto_slim": 167, "pattern_analyz": 169, "weight_slim": 170, "pattern": [171, 287, 288, 289, 293, 614], "reg": 173, "schedul": [174, 297, 299, 614], "conf": [176, 177, 178, 179], "config": [176, 180, 522, 564, 573, 574, 611], "dotdict": 177, "pythonic_config": 179, "contrib": [181, 182, 183, 184, 225, 226, 227, 228], "strategi": [182, 183, 184, 226, 227, 228, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 569, 620, 624], "sigopt": [183, 227, 620, 624], "tpe": [184, 228, 624], "data": [185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 579], "dataload": [185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 215, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 388, 523, 573, 574], "base_dataload": [185, 229], "default_dataload": [187, 231], "fetcher": [188, 232], "attribut": [189, 197, 206, 241, 250, 262, 286, 326, 354, 360, 432, 550], "mxnet_dataload": [190, 234], "onnxrt_dataload": [191, 235], "pytorch_dataload": [192, 236], "sampler": [193, 237], "tensorflow_dataload": [194, 238], "dataset": [195, 196, 197, 198, 199, 200, 201, 202, 239, 240, 241, 242, 243, 244, 245, 246, 389, 571, 574, 584], "bert_dataset": [195, 239], "coco_dataset": [196, 240], "dummy_dataset": [198, 242], "dummy_dataset_v2": [199, 243], "imagenet_dataset": [200, 244], "style_transfer_dataset": [202, 246], "filter": [203, 204, 205, 247, 248, 249], "coco_filt": [203, 247], "transform": [207, 208, 209, 210, 211, 212, 251, 252, 253, 254, 404, 584, 623], "coco_transform": 207, "imagenet_transform": [208, 251], "postprocess": [210, 220], "token": [211, 253], "experiment": [213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314], "common": [214, 215, 216, 217, 218, 219, 220, 221, 552, 581], "metric": [217, 263, 264, 265, 266, 267, 268, 269, 270, 316, 317, 318, 319, 320, 321, 322, 323, 395, 519, 584, 588], "model": [218, 325, 326, 327, 328, 329, 330, 331, 332, 333, 396, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 528, 542, 566, 571, 580, 583, 586, 589, 591, 598, 614, 621, 627], "optim": [219, 397, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 543, 571, 599, 609, 612, 625], "compon": [222, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500], "prune": [224, 285, 296, 484, 485, 486, 529, 571, 589, 614, 616, 627], "export": [256, 257, 258, 259, 260, 580], "qlinear2qdq": 257, "tf2onnx": 258, "torch2onnx": 259, "graph_optim": [261, 474, 475, 476, 525], "bleu": [263, 316], "bleu_util": [264, 317], "coco_label_map": [265, 318], "coco_tool": [266, 319], "evaluate_squad": [267, 320], "f1": [268, 321], "mixed_precis": [271, 478, 479, 480, 527], "model_convers": 272, "na": [273, 274, 275, 276, 277, 278, 553, 571, 616], "basic_na": 273, "dyna": 274, "nas_util": 277, "search_algorithm": 278, "pruner_legaci": [279, 280, 281, 282, 283, 284], "gradient_sensit": 279, "group_lasso": 280, "magnitud": 282, "pattern_lock": 283, "pruning_recip": [286, 287, 288, 289], "tile_pattern": 289, "pruning_v2": 290, "pytorch_prun": [291, 292, 293, 294, 295, 296, 297], "logger": [292, 363, 512], "prune_util": 294, "auto_mixed_precis": [300, 337], "basic": [301, 338, 553, 624], "bayesian": [302, 339, 624], "exhaust": [303, 341, 624], "mse": [305, 344, 624], "mse_v2": [306, 345, 624], "random": [307, 346, 624], "constant": [309, 348, 358], "tuning_sampl": [311, 350], "tuning_spac": [312, 351], "tuning_struct": [313, 352], "mix_precis": 324, "base_model": 325, "keras_model": 327, "mxnet_model": 329, "nets_factori": 330, "onnx_model": 331, "tensorflow_model": 332, "torch_model": 333, "object": [334, 567, 611], "auto": [336, 603, 609, 618, 621, 624], "conserv": [340, 624], "hawq_v2": [342, 624], "templat": [354, 355, 518, 519, 520, 551], "api_doc_exampl": 354, "train": [356, 552, 570, 578, 589, 617], "collect_layer_histogram": 357, "create_obj_from_config": 359, "kl_diverg": 361, "load_huggingfac": 362, "option": [364, 571, 578, 597], "ux": [367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547], "benchmark_model": 368, "execute_benchmark": 369, "config_gener": [371, 372, 373, 374, 375, 376, 377, 378], "benchmark_config_gener": 371, "graph_optimization_config_gener": 373, "mixed_precision_config_gener": 375, "profiling_config_gener": 376, "pruning_config_gener": 377, "quantization_config_gener": 378, "configuration_wizard": [379, 380, 381, 382, 383, 384], "configuration_pars": 379, "get_boundary_nod": 380, "get_configur": 381, "params_feed": 383, "pruning_config_pars": 384, "db_manag": [385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420], "db_model": [386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406], "benchmark_result": 387, "domain": [390, 448], "domain_flavour": 391, "exampl": [392, 552, 553, 556, 560, 572, 573, 574, 576, 577, 578, 579, 580, 589, 590, 591, 594, 598, 611, 612, 614, 617, 621, 622, 627], "framework": [393, 573, 574, 580, 582, 591, 616, 621], "optimization_typ": 398, "precis": [399, 565, 589, 590, 618], "profil": [400, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 544, 571], "profiling_result": 401, "project": [402, 571], "pruning_detail": 403, "tuning_detail": 405, "tuning_histori": [406, 490], "db_oper": [407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417], "benchmark_api_interfac": 407, "dataset_api_interfac": 408, "diagnosis_api_interfac": 410, "dictionaries_api_interfac": 411, "examples_api_interfac": 412, "model_api_interfac": 414, "optimization_api_interfac": 415, "profiling_api_interfac": 416, "project_api_interfac": 417, "params_interfac": 419, "diagnosi": [421, 422, 423, 424, 425, 426, 427, 428, 429, 571], "factori": [422, 473, 492, 497], "onnx_diagnosi": [424, 425], "onnxrt_diagnosi": 425, "op_detail": 426, "op_entri": 427, "tensorflow_diagnosi": [428, 429], "file_brows": [430, 431], "graph": [432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 571], "collaps": 433, "edg": 434, "graph_read": 436, "node": 438, "reader": [439, 440, 441], "onnxrt_read": 440, "tensorflow_read": 441, "jobs_manag": [443, 444, 445, 446], "jobs_control_queu": 444, "request": [446, 551], "manage_workspac": 447, "model_type_gett": 451, "repositori": 456, "shape": 457, "frozen_pb": 458, "meta_graph": 461, "saved_model": 463, "model_zoo": [465, 466, 467, 468, 469], "download_config": 465, "download_model": 466, "download": 467, "list_model": 469, "names_mapp": [470, 471], "execute_optim": 472, "optimize_model": [476, 480, 482, 485], "neural_coder_optim": [481, 482], "tune": [487, 488, 489, 531, 617, 621, 624], "tune_model": 488, "execute_profil": 491, "profile_model": 494, "tensorflow_profil": [497, 498, 499, 500], "inc_bench": 501, "const": 503, "environ": [504, 586, 595], "except": [505, 535], "executor": 506, "expiring_dict": 507, "github_info": 508, "hw_info": 509, "json_seri": 511, "parser": 513, "proc": 514, "process": [515, 624], "singleton": 516, "status_upd": 517, "workdir": 520, "workload": [522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 547], "evalu": [524, 578], "yaml_util": 532, "web": [533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547], "commun": 533, "configur": [534, 578, 582, 613, 616, 620, 626], "router": 537, "server": 538, "servic": [539, 540, 541, 542, 543, 544, 545, 546, 547], "history_snapshot_pars": 540, "request_data_processor": 545, "response_gener": 546, "version": 548, "intel": [549, 555, 571, 585, 586, 589, 595, 603, 609, 627, 628], "neural": [549, 552, 553, 555, 571, 585, 586, 589, 592, 596, 598, 603, 609, 614, 620, 625, 628], "compressor": [549, 552, 555, 571, 585, 586, 589, 603, 609, 620, 628], "document": [549, 555, 560, 628], "section": [549, 628], "contributor": [550, 551], "coven": [550, 551], "code": [550, 551, 553, 589, 610, 625], "conduct": [550, 551], "our": [550, 621], "pledg": 550, "standard": 550, "respons": 550, "scope": [550, 614], "enforc": 550, "contribut": [551, 602, 606], "guidelin": 551, "pull": 551, "checklist": 551, "support": [551, 552, 553, 556, 572, 573, 574, 576, 577, 578, 580, 582, 585, 586, 588, 590, 591, 593, 594, 598, 599, 611, 612, 614, 616, 617, 621, 622, 623, 626], "fx": 552, "introduct": [552, 553, 556, 571, 572, 573, 574, 576, 577, 578, 580, 582, 585, 588, 590, 591, 609, 611, 612, 614, 616, 617, 620, 621, 622, 623, 624, 626], "mode": [552, 627], "matrix": [552, 553, 556, 572, 573, 574, 576, 577, 578, 580, 582, 585, 588, 590, 591, 594, 611, 612, 614, 616, 617, 621, 622, 626], "get": [552, 553, 555, 556, 572, 573, 574, 576, 577, 578, 582, 583, 588, 590, 592, 603, 610, 611, 612, 614, 616, 617, 622, 626], "start": [552, 553, 555, 556, 571, 572, 573, 574, 576, 577, 578, 582, 583, 588, 590, 592, 593, 597, 603, 611, 612, 614, 616, 617, 622, 626], "post": [552, 589, 617], "static": [552, 617], "dynam": [552, 553, 617], "awar": [552, 589, 617], "note": [552, 619], "detail": [552, 571], "problem": 552, "architectur": [553, 575, 585, 586], "search": [553, 609], "api": [553, 555, 556, 560, 561, 572, 573, 574, 576, 577, 578, 583, 584, 588, 590, 592, 596, 610, 611, 612, 614, 616, 625], "usag": [553, 598, 609, 622, 624], "1": [553, 571, 578, 581, 584, 589, 609, 627], "python": [553, 555, 583, 588, 592, 596, 597, 604, 607, 616, 625], "yaml": [553, 573, 574, 578, 582, 626], "2": [553, 571, 578, 581, 584, 589, 609, 627], "onli": 553, "advanc": [553, 625], "custom": [553, 571, 588, 624], "secur": [554, 571, 578], "polici": [554, 624], "report": 554, "vulner": 554, "instal": [555, 571, 586, 593, 595, 602, 603, 606], "from": [555, 571, 586, 589], "pypi": [555, 598], "select": [555, 603], "public": [555, 615], "event": [555, 615], "addit": 555, "research": 555, "collabor": 555, "work": [556, 617], "flow": [556, 617], "background": [556, 609], "ad": 556, "new": [556, 571, 604, 607, 624], "backend": [556, 617], "capabl": 556, "implement": 556, "onnxrtadaptor": 556, "runtim": [558, 586, 590, 617, 627], "torch": [559, 627], "mix": [565, 589, 590, 618], "bench": [571, 596], "tabl": 571, "binari": [571, 586], "sourc": [571, 586], "home": 571, "screen": 571, "creat": [571, 573], "predefin": 571, "displai": 571, "list": [571, 579, 623], "remov": 571, "develop": [571, 602, 606], "tab": 571, "wizard": 571, "edit": 571, "entri": 571, "inform": [571, 587], "demo": 571, "system": [571, 586, 613], "file": [573, 574, 582, 626], "user": [573, 574, 578, 584, 616, 625, 626], "specif": [573, 574], "design": [575, 624], "workflow": 575, "knowledg": [576, 627], "intermedi": 576, "layer": [576, 621], "self": 576, "distribut": [578, 598, 624], "infer": 578, "featur": [578, 582, 585, 598, 599, 603, 616, 617, 622, 626], "pure": 578, "defin": 578, "horovodrun": 578, "execut": 578, "releas": [579, 604, 607, 619], "fp32": 580, "appendix": 580, "frequent": 581, "ask": 581, "question": 581, "build": [581, 588], "issu": [581, 619], "3": [581, 593, 609], "4": [581, 600, 609, 615], "quick": [583, 597], "sampl": 583, "jupyterlab": [583, 603], "extens": [583, 592, 602, 603, 606, 609, 610, 627], "gui": 583, "valid": [583, 586, 621, 627], "incompat": [584, 619], "chang": [584, 608, 610, 619], "between": 584, "v1": 584, "face": 584, "built": [584, 586, 588], "infrastructur": 585, "linux": 586, "prerequisit": 586, "ai": 586, "kit": 586, "window": 586, "requir": [586, 602, 606], "hardwar": [586, 627], "cpu": [586, 595, 627], "base": [586, 625], "64": 586, "compat": 586, "processor": 586, "gpu": 586, "": [586, 610], "xe": 586, "multipl": [586, 611, 627], "vendor": 586, "through": [586, 627], "softwar": 586, "legal": 587, "licens": 587, "citat": 587, "trademark": 587, "singl": [588, 611], "multi": 588, "migrat": 589, "x": 589, "orchestr": [589, 612], "coder": [592, 596, 598, 609, 625], "what": [592, 610], "do": 592, "we": 592, "offer": 592, "jupyt": [592, 593, 604, 607], "lab": [592, 593], "launcher": [592, 597], "contact": 592, "aw": 593, "amazon": 593, "sagemak": 593, "For": 593, "studio": 593, "notebook": 593, "instanc": 593, "guid": [593, 625], "bigdl": 594, "nano": 594, "platform": [595, 620], "best": [595, 603], "perform": [595, 620], "set": [595, 609], "mkl": 595, "openmp": 595, "jemalloc": 595, "numa": 595, "control": 595, "variabl": 595, "frequenc": 595, "govern": 595, "enabl": [596, 603, 609], "superbench": 596, "argument": 597, "v0": 600, "highlight": 600, "other": 600, "changelog": [601, 605], "neural_compressor_ext_lab": [602, 604], "uninstal": [602, 606], "Or": 603, "let": 603, "u": 603, "help": 603, "you": 603, "pre": 603, "requisit": 603, "make": [604, 607, 610], "manual": [604, 607], "npm": [604, 607], "autom": [604, 607], "publish": [604, 607], "conda": [604, 607], "forg": [604, 607], "neural_compressor_ext_lab_alibaba": [606, 607], "log": 608, "unreleas": 608, "vscode": 609, "open": 609, "icon": 609, "5": 609, "welcom": 610, "your": 610, "v": 610, "folder": 610, "setup": 610, "up": 610, "run": 610, "straight": 610, "awai": 610, "explor": 610, "test": 610, "go": 610, "further": 610, "One": 612, "shot": 612, "network": 614, "type": 614, "sparsiti": 614, "decai": 614, "regular": 614, "spars": 614, "deploy": 614, "refer": [614, 617, 621], "full": 615, "59": 615, "2023": 615, "6": 615, "2022": 615, "34": 615, "2021": 615, "15": 615, "2018": 615, "2020": 615, "style": 616, "access": 616, "fundament": [617, 621], "scheme": 617, "ipex": 617, "approach": 617, "With": 617, "without": 617, "accuraci": [617, 624], "specifi": 617, "rule": 617, "recip": 617, "devic": 617, "turn": 618, "off": 618, "dure": 618, "known": 619, "prepar": 620, "benefit": 620, "comparison": 620, "differ": 620, "smooth": 621, "quant": 621, "per": 621, "tensor": 621, "channel": 621, "limit": 621, "smoothquant": 621, "enhanc": 621, "wise": 621, "alpha": 621, "engin": 621, "tensorboard": 622, "space": 624, "exit": 624, "overview": 625, "zero": 625, "topic": 625, "11": 627, "0": 627, "13": 627, "ptq": 627, "9": 627}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"644ec953a7dc_pruning_support": [[0, "module-644ec953a7dc_pruning_support"]], "6ece06672ed3_v1_14": [[1, "module-6ece06672ed3_v1_14"]], "Module Contents": [[1, "module-contents"], [5, "module-contents"], [6, "module-contents"], [8, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [110, "module-contents"], [113, "module-contents"], [115, "module-contents"], [116, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [165, "module-contents"], [167, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [179, "module-contents"], [180, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [207, "module-contents"], [208, "module-contents"], [210, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [222, "module-contents"], [224, "module-contents"], [227, "module-contents"], [228, "module-contents"], [229, "module-contents"], [231, "module-contents"], [232, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [246, "module-contents"], [247, "module-contents"], [248, "module-contents"], [251, "module-contents"], [253, "module-contents"], [254, "module-contents"], [255, "module-contents"], [257, "module-contents"], [258, "module-contents"], [259, "module-contents"], [260, "module-contents"], [261, "module-contents"], [263, "module-contents"], [264, "module-contents"], [266, "module-contents"], [267, "module-contents"], [268, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [273, "module-contents"], [274, "module-contents"], [276, "module-contents"], [277, "module-contents"], [278, "module-contents"], [279, "module-contents"], [280, "module-contents"], [282, "module-contents"], [283, "module-contents"], [284, "module-contents"], [285, "module-contents"], [288, "module-contents"], [289, "module-contents"], [290, "module-contents"], [293, "module-contents"], [294, "module-contents"], [295, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [311, "module-contents"], [312, "module-contents"], [313, "module-contents"], [314, "module-contents"], [316, "module-contents"], [317, "module-contents"], [319, "module-contents"], [320, "module-contents"], [321, "module-contents"], [323, "module-contents"], [324, "module-contents"], [325, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [356, "module-contents"], [357, "module-contents"], [359, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [371, "module-contents"], [372, "module-contents"], [373, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [391, "module-contents"], [392, "module-contents"], [393, "module-contents"], [395, "module-contents"], [396, "module-contents"], [397, "module-contents"], [398, "module-contents"], [399, "module-contents"], [400, "module-contents"], [401, "module-contents"], [402, "module-contents"], [403, "module-contents"], [404, "module-contents"], [405, "module-contents"], [406, "module-contents"], [407, "module-contents"], [408, "module-contents"], [409, "module-contents"], [410, "module-contents"], [411, "module-contents"], [412, "module-contents"], [414, "module-contents"], [415, "module-contents"], [416, "module-contents"], [417, "module-contents"], [419, "module-contents"], [420, "module-contents"], [421, "module-contents"], [422, "module-contents"], [425, "module-contents"], [426, "module-contents"], [427, "module-contents"], [429, "module-contents"], [430, "module-contents"], [432, "module-contents"], [433, "module-contents"], [434, "module-contents"], [435, "module-contents"], [436, "module-contents"], [438, "module-contents"], [440, "module-contents"], [441, "module-contents"], [447, "module-contents"], [448, "module-contents"], [450, "module-contents"], [451, "module-contents"], [453, "module-contents"], [455, "module-contents"], [456, "module-contents"], [457, "module-contents"], [458, "module-contents"], [460, "module-contents"], [461, "module-contents"], [462, "module-contents"], [463, "module-contents"], [464, "module-contents"], [465, "module-contents"], [466, "module-contents"], [467, "module-contents"], [469, "module-contents"], [471, "module-contents"], [472, "module-contents"], [473, "module-contents"], [474, "module-contents"], [476, "module-contents"], [479, "module-contents"], [480, "module-contents"], [482, "module-contents"], [483, "module-contents"], [485, "module-contents"], [486, "module-contents"], [488, "module-contents"], [489, "module-contents"], [490, "module-contents"], [491, "module-contents"], [492, "module-contents"], [494, "module-contents"], [495, "module-contents"], [496, "module-contents"], [497, "module-contents"], [499, "module-contents"], [500, "module-contents"], [501, "module-contents"], [503, "module-contents"], [504, "module-contents"], [505, "module-contents"], [506, "module-contents"], [507, "module-contents"], [508, "module-contents"], [509, "module-contents"], [511, "module-contents"], [512, "module-contents"], [513, "module-contents"], [514, "module-contents"], [515, "module-contents"], [516, "module-contents"], [517, "module-contents"], [519, "module-contents"], [520, "module-contents"], [521, "module-contents"], [522, "module-contents"], [523, "module-contents"], [524, "module-contents"], [525, "module-contents"], [527, "module-contents"], [528, "module-contents"], [529, "module-contents"], [530, "module-contents"], [531, "module-contents"], [532, "module-contents"], [533, "module-contents"], [534, "module-contents"], [535, "module-contents"], [537, "module-contents"], [538, "module-contents"], [539, "module-contents"], [540, "module-contents"], [542, "module-contents"], [543, "module-contents"], [544, "module-contents"], [545, "module-contents"], [546, "module-contents"], [547, "module-contents"]], "Functions": [[1, "functions"], [5, "functions"], [6, "functions"], [18, "functions"], [21, "functions"], [38, "functions"], [44, "functions"], [45, "functions"], [67, "functions"], [68, "functions"], [70, "functions"], [104, "functions"], [105, "functions"], [116, "functions"], [118, "functions"], [146, "functions"], [147, "functions"], [148, "functions"], [152, "functions"], [153, "functions"], [154, "functions"], [155, "functions"], [157, "functions"], [160, "functions"], [162, "functions"], [165, "functions"], [167, "functions"], [169, "functions"], [171, "functions"], [172, "functions"], [173, "functions"], [174, "functions"], [175, "functions"], [177, "functions"], [186, "functions"], [187, "functions"], [195, "functions"], [197, "functions"], [201, "functions"], [204, "functions"], [205, "functions"], [206, "functions"], [209, "functions"], [211, "functions"], [212, "functions"], [213, "functions"], [214, "functions"], [216, "functions"], [218, "functions"], [219, "functions"], [221, "functions"], [224, "functions"], [231, "functions"], [239, "functions"], [241, "functions"], [245, "functions"], [248, "functions"], [249, "functions"], [250, "functions"], [252, "functions"], [253, "functions"], [254, "functions"], [257, "functions"], [258, "functions"], [259, "functions"], [260, "functions"], [263, "functions"], [264, "functions"], [266, "functions"], [267, "functions"], [268, "functions"], [269, "functions"], [270, "functions"], [277, "functions"], [284, "functions"], [288, "functions"], [293, "functions"], [294, "functions"], [295, "functions"], [297, "functions"], [302, "functions"], [308, "functions"], [312, "functions"], [314, "functions"], [316, "functions"], [317, "functions"], [319, "functions"], [320, "functions"], [321, "functions"], [322, "functions"], [323, "functions"], [324, "functions"], [328, "functions"], [332, "functions"], [334, "functions"], [335, "functions"], [339, "functions"], [347, "functions"], [351, "functions"], [353, "functions"], [354, "functions"], [356, "functions"], [359, "functions"], [360, "functions"], [362, "functions"], [363, "functions"], [365, "functions"], [366, "functions"], [368, "functions"], [369, "functions"], [379, "functions"], [380, "functions"], [381, "functions"], [383, "functions"], [388, "functions"], [390, "functions"], [391, "functions"], [393, "functions"], [395, "functions"], [398, "functions"], [399, "functions"], [404, "functions"], [407, "functions"], [408, "functions"], [409, "functions"], [420, "functions"], [430, "functions"], [447, "functions"], [451, "functions"], [453, "functions"], [464, "functions"], [465, "functions"], [466, "functions"], [469, "functions"], [472, "functions"], [476, "functions"], [480, "functions"], [482, "functions"], [485, "functions"], [488, "functions"], [490, "functions"], [491, "functions"], [494, "functions"], [500, "functions"], [501, "functions"], [509, "functions"], [512, "functions"], [517, "functions"], [521, "functions"], [529, "functions"], [532, "functions"], [533, "functions"], [537, "functions"], [538, "functions"]], "6f0d0f71d92e_v1_13": [[2, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[3, "module-9e89549a08c8_v1_11"]], "block_mask": [[4, "module-block_mask"]], "env": [[5, "module-env"]], "neural_compressor.adaptor.adaptor": [[6, "module-neural_compressor.adaptor.adaptor"]], "Classes": [[6, "classes"], [8, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [110, "classes"], [113, "classes"], [115, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [144, "classes"], [145, "classes"], [147, "classes"], [148, "classes"], [151, "classes"], [152, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [158, "classes"], [159, "classes"], [161, "classes"], [162, "classes"], [165, "classes"], [169, "classes"], [170, "classes"], [171, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [176, "classes"], [177, "classes"], [179, "classes"], [180, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [222, "classes"], [227, "classes"], [228, "classes"], [229, "classes"], [231, "classes"], [232, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [260, "classes"], [261, "classes"], [262, "classes"], [263, "classes"], [266, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [276, "classes"], [278, "classes"], [279, "classes"], [280, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [293, "classes"], [295, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [311, "classes"], [312, "classes"], [313, "classes"], [314, "classes"], [316, "classes"], [319, "classes"], [322, "classes"], [323, "classes"], [325, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [336, "classes"], [337, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [342, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [350, "classes"], [351, "classes"], [352, "classes"], [353, "classes"], [354, "classes"], [356, "classes"], [357, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [366, "classes"], [367, "classes"], [370, "classes"], [371, "classes"], [372, "classes"], [373, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [386, "classes"], [387, "classes"], [388, "classes"], [389, "classes"], [390, "classes"], [391, "classes"], [392, "classes"], [393, "classes"], [395, "classes"], [396, "classes"], [397, "classes"], [398, "classes"], [399, "classes"], [400, "classes"], [401, "classes"], [402, "classes"], [403, "classes"], [404, "classes"], [405, "classes"], [406, "classes"], [407, "classes"], [408, "classes"], [410, "classes"], [411, "classes"], [412, "classes"], [414, "classes"], [415, "classes"], [416, "classes"], [417, "classes"], [419, "classes"], [421, "classes"], [422, "classes"], [425, "classes"], [426, "classes"], [427, "classes"], [429, "classes"], [432, "classes"], [433, "classes"], [434, "classes"], [435, "classes"], [436, "classes"], [438, "classes"], [440, "classes"], [441, "classes"], [448, "classes"], [450, "classes"], [453, "classes"], [455, "classes"], [456, "classes"], [457, "classes"], [458, "classes"], [460, "classes"], [461, "classes"], [462, "classes"], [463, "classes"], [467, "classes"], [471, "classes"], [473, "classes"], [474, "classes"], [477, "classes"], [479, "classes"], [483, "classes"], [486, "classes"], [489, "classes"], [490, "classes"], [492, "classes"], [495, "classes"], [496, "classes"], [497, "classes"], [499, "classes"], [503, "classes"], [504, "classes"], [506, "classes"], [507, "classes"], [508, "classes"], [509, "classes"], [511, "classes"], [513, "classes"], [514, "classes"], [515, "classes"], [516, "classes"], [519, "classes"], [520, "classes"], [522, "classes"], [523, "classes"], [524, "classes"], [525, "classes"], [527, "classes"], [528, "classes"], [529, "classes"], [530, "classes"], [531, "classes"], [533, "classes"], [534, "classes"], [537, "classes"], [539, "classes"], [540, "classes"], [542, "classes"], [543, "classes"], [544, "classes"], [545, "classes"], [546, "classes"], [547, "classes"]], "neural_compressor.adaptor": [[7, "module-neural_compressor.adaptor"]], "Subpackages": [[7, "subpackages"], [22, "subpackages"], [87, "subpackages"], [111, "subpackages"], [112, "subpackages"], [114, "subpackages"], [164, "subpackages"], [166, "subpackages"], [181, "subpackages"], [206, "subpackages"], [225, "subpackages"], [250, "subpackages"], [262, "subpackages"], [286, "subpackages"], [304, "subpackages"], [315, "subpackages"], [343, "subpackages"], [418, "subpackages"], [423, "subpackages"], [437, "subpackages"], [442, "subpackages"], [449, "subpackages"], [477, "subpackages"], [493, "subpackages"], [502, "subpackages"], [510, "subpackages"], [536, "subpackages"]], "Submodules": [[7, "submodules"], [17, "submodules"], [22, "submodules"], [34, "submodules"], [51, "submodules"], [76, "submodules"], [87, "submodules"], [95, "submodules"], [101, "submodules"], [106, "submodules"], [111, "submodules"], [112, "submodules"], [114, "submodules"], [117, "submodules"], [130, "submodules"], [143, "submodules"], [149, "submodules"], [157, "submodules"], [163, "submodules"], [164, "submodules"], [166, "submodules"], [168, "submodules"], [178, "submodules"], [182, "submodules"], [189, "submodules"], [201, "submodules"], [205, "submodules"], [209, "submodules"], [216, "submodules"], [223, "submodules"], [226, "submodules"], [233, "submodules"], [245, "submodules"], [249, "submodules"], [252, "submodules"], [256, "submodules"], [262, "submodules"], [269, "submodules"], [275, "submodules"], [281, "submodules"], [287, "submodules"], [291, "submodules"], [304, "submodules"], [310, "submodules"], [315, "submodules"], [322, "submodules"], [326, "submodules"], [343, "submodules"], [349, "submodules"], [355, "submodules"], [360, "submodules"], [370, "submodules"], [374, "submodules"], [382, "submodules"], [394, "submodules"], [413, "submodules"], [418, "submodules"], [423, "submodules"], [424, "submodules"], [428, "submodules"], [431, "submodules"], [437, "submodules"], [439, "submodules"], [442, "submodules"], [443, "submodules"], [449, "submodules"], [452, "submodules"], [454, "submodules"], [459, "submodules"], [468, "submodules"], [470, "submodules"], [475, "submodules"], [477, "submodules"], [478, "submodules"], [481, "submodules"], [484, "submodules"], [487, "submodules"], [493, "submodules"], [498, "submodules"], [502, "submodules"], [510, "submodules"], [518, "submodules"], [526, "submodules"], [536, "submodules"], [541, "submodules"]], "Package Contents": [[7, "package-contents"], [34, "package-contents"], [157, "package-contents"], [189, "package-contents"], [201, "package-contents"], [205, "package-contents"], [206, "package-contents"], [209, "package-contents"], [216, "package-contents"], [233, "package-contents"], [245, "package-contents"], [249, "package-contents"], [250, "package-contents"], [252, "package-contents"], [262, "package-contents"], [269, "package-contents"], [281, "package-contents"], [286, "package-contents"], [287, "package-contents"], [304, "package-contents"], [322, "package-contents"], [326, "package-contents"], [343, "package-contents"], [360, "package-contents"], [370, "package-contents"], [477, "package-contents"]], "neural_compressor.adaptor.keras": [[8, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[9, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[10, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[11, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[12, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[13, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[14, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[15, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[16, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[17, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[18, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[19, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[20, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[21, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[22, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[23, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[24, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[25, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[26, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[27, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[28, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[29, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[31, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[34, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[35, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[36, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[37, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[38, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[39, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[40, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[41, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[42, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[43, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[44, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[140, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[141, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[146, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[147, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[148, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[149, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[150, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[151, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[152, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[153, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[154, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[155, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[156, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[157, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[158, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[159, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[160, "module-neural_compressor.benchmark"]], "neural_compressor.compression.callbacks": [[161, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[162, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[163, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[164, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[165, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[166, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[167, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[168, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[169, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[170, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns": [[171, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.pruners": [[172, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.regs": [[173, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[174, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.utils": [[175, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[176, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[177, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[178, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[179, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[180, "module-neural_compressor.config"]], "neural_compressor.contrib": [[181, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[182, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[183, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[184, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[185, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[186, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[187, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[188, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[189, "module-neural_compressor.data.dataloaders"]], "Attributes": [[189, "attributes"], [197, "attributes"], [206, "attributes"], [241, "attributes"], [250, "attributes"], [262, "attributes"], [286, "attributes"], [326, "attributes"], [354, "attributes"], [360, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[190, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[191, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[192, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[193, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[194, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[195, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[196, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[197, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[198, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[199, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[200, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[201, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[202, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[203, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[204, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[205, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[206, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[207, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[208, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[209, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[210, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[211, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[212, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[213, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[214, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[215, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[216, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[217, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[218, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[219, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[220, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[221, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[222, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[223, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[224, "module-neural_compressor.experimental.compression.pruning"]], "neural_compressor.experimental.contrib": [[225, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[226, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[227, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[228, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[229, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[230, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[231, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[232, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[233, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[234, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[235, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[236, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[237, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[238, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[239, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[240, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[241, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[242, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[243, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[244, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[245, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[246, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[247, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[248, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[249, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[250, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[251, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[252, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[253, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[254, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[255, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[256, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[257, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[258, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[259, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.export.utils": [[260, "module-neural_compressor.experimental.export.utils"]], "neural_compressor.experimental.graph_optimization": [[261, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[262, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[263, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[264, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[265, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[266, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[267, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[268, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[269, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[270, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[271, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[272, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[273, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[274, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[275, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[276, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[277, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[278, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[279, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[280, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[281, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[282, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[283, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[284, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[285, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[286, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[287, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[288, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[289, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[290, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[291, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[292, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[293, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[294, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[295, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[296, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[297, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[298, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[299, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[300, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[301, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[302, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[303, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[304, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[305, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[306, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[307, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[308, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[309, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[310, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[311, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[312, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[313, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[314, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[315, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[316, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[317, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[318, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[319, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[320, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[321, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[322, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[323, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[324, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[325, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[326, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[327, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[328, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[329, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[330, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[331, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[332, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[333, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[334, "module-neural_compressor.objective"]], "neural_compressor.quantization": [[335, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[336, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[337, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[338, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[339, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[340, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[341, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[342, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[343, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[344, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[345, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[346, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[347, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[348, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[349, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[350, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[351, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[352, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[353, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[354, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[355, "module-neural_compressor.template"]], "neural_compressor.training": [[356, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[357, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[358, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[359, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[360, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[361, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[362, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[363, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[364, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[365, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[366, "module-neural_compressor.utils.utility"]], "neural_compressor.ux.components.benchmark.benchmark": [[367, "module-neural_compressor.ux.components.benchmark.benchmark"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[368, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[369, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "neural_compressor.ux.components.benchmark": [[370, "module-neural_compressor.ux.components.benchmark"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[371, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "neural_compressor.ux.components.config_generator.config_generator": [[372, "module-neural_compressor.ux.components.config_generator.config_generator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[373, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[374, "module-neural_compressor.ux.components.config_generator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[375, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[376, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[377, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[378, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[379, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[380, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[381, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "neural_compressor.ux.components.configuration_wizard": [[382, "module-neural_compressor.ux.components.configuration_wizard"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[383, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[384, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "neural_compressor.ux.components.db_manager.db_manager": [[385, "module-neural_compressor.ux.components.db_manager.db_manager"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[386, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[387, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[388, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[389, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[390, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[391, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "neural_compressor.ux.components.db_manager.db_models.example": [[392, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[393, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[394, "module-neural_compressor.ux.components.db_manager.db_models"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[395, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "neural_compressor.ux.components.db_manager.db_models.model": [[396, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[397, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[398, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[399, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[400, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[401, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "neural_compressor.ux.components.db_manager.db_models.project": [[402, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[403, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[404, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[405, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[406, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[407, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[408, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[409, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[410, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[411, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[412, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[413, "module-neural_compressor.ux.components.db_manager.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[414, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[415, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[416, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[417, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[418, "module-neural_compressor.ux.components.db_manager"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[419, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "neural_compressor.ux.components.db_manager.utils": [[420, "module-neural_compressor.ux.components.db_manager.utils"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[421, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[422, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[423, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[424, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[425, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[426, "module-neural_compressor.ux.components.diagnosis.op_details"]], "neural_compressor.ux.components.diagnosis.op_entry": [[427, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[428, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[429, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.file_browser.file_browser": [[430, "module-neural_compressor.ux.components.file_browser.file_browser"]], "neural_compressor.ux.components.file_browser": [[431, "module-neural_compressor.ux.components.file_browser"]], "neural_compressor.ux.components.graph.attribute": [[432, "module-neural_compressor.ux.components.graph.attribute"]], "neural_compressor.ux.components.graph.collapser": [[433, "module-neural_compressor.ux.components.graph.collapser"]], "neural_compressor.ux.components.graph.edge": [[434, "module-neural_compressor.ux.components.graph.edge"]], "neural_compressor.ux.components.graph.graph": [[435, "module-neural_compressor.ux.components.graph.graph"]], "neural_compressor.ux.components.graph.graph_reader": [[436, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[437, "module-neural_compressor.ux.components.graph"]], "neural_compressor.ux.components.graph.node": [[438, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[439, "module-neural_compressor.ux.components.graph.reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[440, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[441, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[442, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[443, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[444, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[445, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[446, "module-neural_compressor.ux.components.jobs_management.request"]], "neural_compressor.ux.components.manage_workspace": [[447, "module-neural_compressor.ux.components.manage_workspace"]], "neural_compressor.ux.components.model.domain": [[448, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[449, "module-neural_compressor.ux.components.model"]], "neural_compressor.ux.components.model.model": [[450, "module-neural_compressor.ux.components.model.model"]], "neural_compressor.ux.components.model.model_type_getter": [[451, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[452, "module-neural_compressor.ux.components.model.onnxrt"]], "neural_compressor.ux.components.model.onnxrt.model": [[453, "module-neural_compressor.ux.components.model.onnxrt.model"]], "neural_compressor.ux.components.model.pytorch": [[454, "module-neural_compressor.ux.components.model.pytorch"]], "neural_compressor.ux.components.model.pytorch.model": [[455, "module-neural_compressor.ux.components.model.pytorch.model"]], "neural_compressor.ux.components.model.repository": [[456, "module-neural_compressor.ux.components.model.repository"]], "neural_compressor.ux.components.model.shape": [[457, "module-neural_compressor.ux.components.model.shape"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[458, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[459, "module-neural_compressor.ux.components.model.tensorflow"]], "neural_compressor.ux.components.model.tensorflow.keras": [[460, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[461, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "neural_compressor.ux.components.model.tensorflow.model": [[462, "module-neural_compressor.ux.components.model.tensorflow.model"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[463, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "neural_compressor.ux.components.model.tensorflow.utils": [[464, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "neural_compressor.ux.components.model_zoo.download_config": [[465, "module-neural_compressor.ux.components.model_zoo.download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[466, "module-neural_compressor.ux.components.model_zoo.download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[467, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[468, "module-neural_compressor.ux.components.model_zoo"]], "neural_compressor.ux.components.model_zoo.list_models": [[469, "module-neural_compressor.ux.components.model_zoo.list_models"]], "neural_compressor.ux.components.names_mapper": [[470, "module-neural_compressor.ux.components.names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[471, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "neural_compressor.ux.components.optimization.execute_optimization": [[472, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "neural_compressor.ux.components.optimization.factory": [[473, "module-neural_compressor.ux.components.optimization.factory"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[474, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[475, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[476, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "neural_compressor.ux.components.optimization": [[477, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[478, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[479, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[480, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[481, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[482, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "neural_compressor.ux.components.optimization.optimization": [[483, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[484, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[485, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[486, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[487, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[488, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[489, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "neural_compressor.ux.components.optimization.tuning_history": [[490, "module-neural_compressor.ux.components.optimization.tuning_history"]], "neural_compressor.ux.components.profiling.execute_profiling": [[491, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "neural_compressor.ux.components.profiling.factory": [[492, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[493, "module-neural_compressor.ux.components.profiling"]], "neural_compressor.ux.components.profiling.profile_model": [[494, "module-neural_compressor.ux.components.profiling.profile_model"]], "neural_compressor.ux.components.profiling.profiler": [[495, "module-neural_compressor.ux.components.profiling.profiler"]], "neural_compressor.ux.components.profiling.profiling": [[496, "module-neural_compressor.ux.components.profiling.profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[497, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[498, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[499, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[500, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "neural_compressor.ux.inc_bench": [[501, "module-neural_compressor.ux.inc_bench"]], "neural_compressor.ux": [[502, "module-neural_compressor.ux"]], "neural_compressor.ux.utils.consts": [[503, "module-neural_compressor.ux.utils.consts"]], "neural_compressor.ux.utils.environment": [[504, "module-neural_compressor.ux.utils.environment"]], "neural_compressor.ux.utils.exceptions": [[505, "module-neural_compressor.ux.utils.exceptions"]], "neural_compressor.ux.utils.executor": [[506, "module-neural_compressor.ux.utils.executor"]], "neural_compressor.ux.utils.expiring_dict": [[507, "module-neural_compressor.ux.utils.expiring_dict"]], "neural_compressor.ux.utils.github_info": [[508, "module-neural_compressor.ux.utils.github_info"]], "neural_compressor.ux.utils.hw_info": [[509, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[510, "module-neural_compressor.ux.utils"]], "neural_compressor.ux.utils.json_serializer": [[511, "module-neural_compressor.ux.utils.json_serializer"]], "neural_compressor.ux.utils.logger": [[512, "module-neural_compressor.ux.utils.logger"]], "neural_compressor.ux.utils.parser": [[513, "module-neural_compressor.ux.utils.parser"]], "neural_compressor.ux.utils.proc": [[514, "module-neural_compressor.ux.utils.proc"]], "neural_compressor.ux.utils.processes": [[515, "module-neural_compressor.ux.utils.processes"]], "neural_compressor.ux.utils.singleton": [[516, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.status_updates": [[517, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[518, "module-neural_compressor.ux.utils.templates"]], "neural_compressor.ux.utils.templates.metric": [[519, "module-neural_compressor.ux.utils.templates.metric"]], "neural_compressor.ux.utils.templates.workdir": [[520, "module-neural_compressor.ux.utils.templates.workdir"]], "neural_compressor.ux.utils.utils": [[521, "module-neural_compressor.ux.utils.utils"]], "neural_compressor.ux.utils.workload.config": [[522, "module-neural_compressor.ux.utils.workload.config"]], "neural_compressor.ux.utils.workload.dataloader": [[523, "module-neural_compressor.ux.utils.workload.dataloader"]], "neural_compressor.ux.utils.workload.evaluation": [[524, "module-neural_compressor.ux.utils.workload.evaluation"]], "neural_compressor.ux.utils.workload.graph_optimization": [[525, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[526, "module-neural_compressor.ux.utils.workload"]], "neural_compressor.ux.utils.workload.mixed_precision": [[527, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "neural_compressor.ux.utils.workload.model": [[528, "module-neural_compressor.ux.utils.workload.model"]], "neural_compressor.ux.utils.workload.pruning": [[529, "module-neural_compressor.ux.utils.workload.pruning"]], "neural_compressor.ux.utils.workload.quantization": [[530, "module-neural_compressor.ux.utils.workload.quantization"]], "neural_compressor.ux.utils.workload.tuning": [[531, "module-neural_compressor.ux.utils.workload.tuning"]], "neural_compressor.ux.utils.yaml_utils": [[532, "module-neural_compressor.ux.utils.yaml_utils"]], "neural_compressor.ux.web.communication": [[533, "module-neural_compressor.ux.web.communication"]], "neural_compressor.ux.web.configuration": [[534, "module-neural_compressor.ux.web.configuration"]], "neural_compressor.ux.web.exceptions": [[535, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[536, "module-neural_compressor.ux.web"]], "neural_compressor.ux.web.router": [[537, "module-neural_compressor.ux.web.router"]], "neural_compressor.ux.web.server": [[538, "module-neural_compressor.ux.web.server"]], "neural_compressor.ux.web.service.benchmark": [[539, "module-neural_compressor.ux.web.service.benchmark"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[540, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[541, "module-neural_compressor.ux.web.service"]], "neural_compressor.ux.web.service.model": [[542, "module-neural_compressor.ux.web.service.model"]], "neural_compressor.ux.web.service.optimization": [[543, "module-neural_compressor.ux.web.service.optimization"]], "neural_compressor.ux.web.service.profiling": [[544, "module-neural_compressor.ux.web.service.profiling"]], "neural_compressor.ux.web.service.request_data_processor": [[545, "module-neural_compressor.ux.web.service.request_data_processor"]], "neural_compressor.ux.web.service.response_generator": [[546, "module-neural_compressor.ux.web.service.response_generator"]], "neural_compressor.ux.web.service.workload": [[547, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[548, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[549, "intel-neural-compressor-documentation"], [628, "intel-neural-compressor-documentation"]], "Sections": [[549, "sections"], [628, "sections"]], "Contributor Covenant Code of Conduct": [[550, "contributor-covenant-code-of-conduct"], [551, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[550, "our-pledge"]], "Our Standards": [[550, "our-standards"]], "Our Responsibilities": [[550, "our-responsibilities"]], "Scope": [[550, "scope"]], "Enforcement": [[550, "enforcement"]], "Attribution": [[550, "attribution"]], "Contribution Guidelines": [[551, "contribution-guidelines"]], "Pull Request Checklist": [[551, "pull-request-checklist"]], "Pull Request Template": [[551, "pull-request-template"]], "Support": [[551, "support"]], "FX": [[552, "fx"]], "Introduction": [[552, "introduction"], [553, "introduction"], [556, "introduction"], [571, "introduction"], [572, "introduction"], [573, "introduction"], [574, "introduction"], [576, "introduction"], [577, "introduction"], [578, "introduction"], [580, "introduction"], [582, "introduction"], [585, "introduction"], [588, "introduction"], [590, "introduction"], [591, "introduction"], [611, "introduction"], [612, "introduction"], [614, "introduction"], [616, "introduction"], [620, "introduction"], [621, "introduction"], [622, "introduction"], [623, "introduction"], [624, "introduction"], [626, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[552, "fx-mode-support-matrix-in-neural-compressor"]], "Get Start": [[552, "get-start"]], "Post Training Static Quantization": [[552, "post-training-static-quantization"], [617, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[552, "post-training-dynamic-quantization"], [617, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[552, "quantization-aware-training"]], "Examples": [[552, "examples"], [553, "examples"], [572, "examples"], [573, "examples"], [574, "examples"], [576, "examples"], [577, "examples"], [578, "examples"], [579, "examples"], [580, "examples"], [589, "examples"], [590, "examples"], [591, "examples"], [612, "examples"], [614, "examples"], [617, "examples"], [622, "examples"]], "Note": [[552, "note"]], "Details": [[552, "details"]], "Common Problem": [[552, "common-problem"]], "Dynamic Quantization": [[552, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[552, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[553, "neural-architecture-search"]], "Basic NAS": [[553, "basic-nas"]], "Dynamic NAS": [[553, "dynamic-nas"]], "NAS Support Matrix": [[553, "nas-support-matrix"]], "Get Started with NAS API": [[553, "get-started-with-nas-api"]], "Basic Usage": [[553, "basic-usage"]], "1. Python code + YAML": [[553, "python-code-yaml"]], "2. Python code only": [[553, "python-code-only"]], "Advanced Usage (Custom NAS)": [[553, "advanced-usage-custom-nas"]], "Security Policy": [[554, "security-policy"]], "Report a Vulnerability": [[554, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[555, "intel-neural-compressor"], [609, "intel-neural-compressor"]], "Installation": [[555, "installation"], [586, "installation"], [603, "installation"]], "Install from pypi": [[555, "install-from-pypi"]], "Getting Started": [[555, "getting-started"], [583, "getting-started"]], "Quantization with Python API": [[555, "quantization-with-python-api"], [583, "quantization-with-python-api"]], "Documentation": [[555, "documentation"]], "Selected Publications/Events": [[555, "selected-publications-events"]], "Additional Content": [[555, "additional-content"]], "Research Collaborations": [[555, "research-collaborations"]], "Adaptor": [[556, "adaptor"], [557, "adaptor"]], "Adaptor Support Matrix": [[556, "adaptor-support-matrix"]], "Working Flow": [[556, "working-flow"], [617, "working-flow"]], "Get Start with Adaptor API": [[556, "get-start-with-adaptor-api"]], "Query API": [[556, "query-api"]], "Background": [[556, "background"]], "Query API Introduction": [[556, "query-api-introduction"]], "Example of Adding a New Backend Support": [[556, "example-of-adding-a-new-backend-support"]], "Capability": [[556, "capability"]], "Implement ONNXRTAdaptor Class": [[556, "implement-onnxrtadaptor-class"]], "ONNX Runtime": [[558, "onnx-runtime"], [590, "onnx-runtime"], [590, "id1"]], "Torch Utils": [[559, "torch-utils"]], "API Document Example": [[560, "api-document-example"]], "APIs": [[561, "apis"]], "Benchmark": [[562, "benchmark"], [589, "benchmark"], [616, "benchmark"]], "Compression": [[563, "compression"]], "Config": [[564, "config"]], "Mix Precision": [[565, "mix-precision"], [589, "mix-precision"]], "Model": [[566, "model"], [591, "model"]], "Objective": [[567, "objective"], [611, "objective"]], "Quantization": [[568, "quantization"], [616, "quantization"], [617, "quantization"]], "Strategy": [[569, "strategy"]], "Training": [[570, "training"]], "Intel\u00ae Neural Compressor Bench": [[571, "intel-neural-compressor-bench"]], "Table of Contents": [[571, "table-of-contents"]], "Install Intel\u00ae Neural Compressor with Bench": [[571, "install-intel-neural-compressor-with-bench"]], "Option 1: Install from Binary": [[571, "option-1-install-from-binary"]], "Option 2: Install from Source": [[571, "option-2-install-from-source"]], "Start the Intel\u00ae Neural Compressor Bench": [[571, "start-the-intel-neural-compressor-bench"]], "Home Screen": [[571, "home-screen"]], "Create New Project": [[571, "create-new-project"]], "Predefined Model": [[571, "predefined-model"]], "Custom Model": [[571, "custom-model"]], "Display Model Graph": [[571, "display-model-graph"]], "Project List": [[571, "project-list"]], "Remove Project": [[571, "remove-project"]], "Develop Project": [[571, "develop-project"]], "Optimization Tab": [[571, "optimization-tab"]], "Optimization Table": [[571, "optimization-table"]], "Optimization Wizard": [[571, "optimization-wizard"]], "Editing Optimization Entries": [[571, "editing-optimization-entries"]], "Optimization Details": [[571, "optimization-details"]], "Pruning": [[571, "pruning"], [589, "pruning"], [614, "pruning"], [616, "pruning"]], "Benchmark Tab": [[571, "benchmark-tab"]], "Benchmark Table": [[571, "benchmark-table"]], "Benchmark Wizard": [[571, "benchmark-wizard"]], "Editing Benchmark Entries": [[571, "editing-benchmark-entries"]], "Benchmark Details": [[571, "benchmark-details"]], "Profiling Tab": [[571, "profiling-tab"]], "Profiling Table": [[571, "profiling-table"]], "Profiling Wizard": [[571, "profiling-wizard"]], "Editing Profiling Entries": [[571, "editing-profiling-entries"]], "Profiling Details": [[571, "profiling-details"]], "Diagnosis Tab": [[571, "diagnosis-tab"]], "Dataset Tab": [[571, "dataset-tab"]], "Dataset List": [[571, "dataset-list"]], "Dataset Wizard": [[571, "dataset-wizard"]], "Dataset Details": [[571, "dataset-details"]], "Custom Dataset": [[571, "custom-dataset"]], "Project Information": [[571, "project-information"]], "NAS demo": [[571, "nas-demo"]], "System Information": [[571, "system-information"]], "Security": [[571, "security"], [578, "security"]], "Benchmarking": [[572, "benchmarking"]], "Benchmark Support Matrix": [[572, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[572, "get-started-with-benchmark-api"]], "DataLoader": [[573, "dataloader"]], "Supported Framework Dataloader Matrix": [[573, "supported-framework-dataloader-matrix"]], "Get Start with Dataloader API": [[573, "get-start-with-dataloader-api"]], "Config Dataloader in a Yaml File": [[573, "config-dataloader-in-a-yaml-file"]], "Create a User-specific Dataloader": [[573, "create-a-user-specific-dataloader"]], "Dataset": [[574, "dataset"]], "Supported Framework Dataset Matrix": [[574, "supported-framework-dataset-matrix"]], "TensorFlow": [[574, "tensorflow"], [588, "tensorflow"], [590, "tensorflow"], [623, "tensorflow"]], "PyTorch": [[574, "pytorch"], [588, "pytorch"], [590, "pytorch"], [618, "pytorch"]], "MXNet": [[574, "mxnet"], [588, "mxnet"], [623, "mxnet"]], "ONNXRT": [[574, "onnxrt"], [588, "onnxrt"], [623, "onnxrt"]], "Get start with Dataset API": [[574, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[574, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[574, "user-specific-dataset"]], "Design": [[575, "design"], [624, "design"], [624, "id1"], [624, "id3"], [624, "id5"], [624, "id7"], [624, "id9"], [624, "id11"], [624, "id13"], [624, "id15"], [624, "id17"], [624, "id19"], [624, "id21"]], "Architecture": [[575, "architecture"], [585, "architecture"]], "Workflow": [[575, "workflow"]], "Distillation": [[576, "distillation"], [589, "distillation"], [616, "distillation"]], "Knowledge Distillation": [[576, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[576, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[576, "self-distillation"]], "Distillation Support Matrix": [[576, "distillation-support-matrix"]], "Get Started with Distillation API": [[576, "get-started-with-distillation-api"]], "Distillation for Quantization": [[577, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[577, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[577, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[578, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[578, "supported-feature-matrix"], [582, "supported-feature-matrix"], [585, "supported-feature-matrix"], [616, "supported-feature-matrix"], [617, "supported-feature-matrix"], [622, "supported-feature-matrix"], [626, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[578, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[578, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[578, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[578, "horovodrun-execution"]], "PyTorch Examples:": [[578, "pytorch-examples"]], "TensorFlow Examples:": [[578, "tensorflow-examples"]], "Example List": [[579, "example-list"]], "Release Data": [[579, "release-data"]], "Export": [[580, "export"]], "Supported Framework Model Matrix": [[580, "supported-framework-model-matrix"], [591, "supported-framework-model-matrix"]], "FP32 Model Export": [[580, "fp32-model-export"]], "INT8 Model Export": [[580, "int8-model-export"]], "Appendix": [[580, "appendix"]], "Frequently Asked Questions": [[581, "frequently-asked-questions"]], "Common Build Issues": [[581, "common-build-issues"]], "Issue 1:": [[581, "issue-1"]], "Issue 2:": [[581, "issue-2"]], "Issue 3:": [[581, "issue-3"]], "Issue 4:": [[581, "issue-4"]], "Framework YAML Configuration Files": [[582, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[582, "get-started-with-framework-yaml-files"]], "Quick Samples": [[583, "quick-samples"]], "Quantization with JupyterLab Extension": [[583, "quantization-with-jupyterlab-extension"]], "Quantization with GUI": [[583, "quantization-with-gui"]], "Validated Models": [[583, "validated-models"], [621, "validated-models"], [627, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[584, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[584, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[584, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[585, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[586, "linux-installation"]], "Prerequisites": [[586, "prerequisites"], [586, "id1"]], "Install from Binary": [[586, "install-from-binary"], [586, "id2"]], "Install from Source": [[586, "install-from-source"], [586, "id3"]], "Install from AI Kit": [[586, "install-from-ai-kit"]], "Windows Installation": [[586, "windows-installation"]], "System Requirements": [[586, "system-requirements"]], "Validated Hardware Environment": [[586, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[586, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[586, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[586, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[586, "validated-software-environment"]], "Legal Information": [[587, "legal-information"]], "License": [[587, "license"]], "Citation": [[587, "citation"]], "Trademarks": [[587, "trademarks"]], "Metrics": [[588, "metrics"]], "Supported Built-in Metric Matrix": [[588, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[588, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[588, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[588, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[589, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[589, "model-quantization"]], "Post-training Quantization": [[589, "post-training-quantization"]], "Quantization Aware Training": [[589, "quantization-aware-training"], [617, "quantization-aware-training"], [617, "id1"]], "Orchestration": [[589, "orchestration"]], "Mixed Precision": [[590, "mixed-precision"]], "Mixed Precision Support Matrix": [[590, "mixed-precision-support-matrix"]], "Get Started with Mixed Precision API": [[590, "get-started-with-mixed-precision-api"]], "Neural Coder": [[592, "neural-coder"], [609, "neural-coder"], [609, "id1"]], "What do we offer?": [[592, "what-do-we-offer"]], "Getting Started!": [[592, "getting-started"], [603, "getting-started"]], "Jupyter Lab Extension": [[592, "jupyter-lab-extension"]], "Python Launcher": [[592, "python-launcher"], [597, "python-launcher"]], "Python API": [[592, "python-api"]], "Contact": [[592, "contact"]], "AWS Amazon SageMaker Support": [[593, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[593, "start-jupyter-lab-3"]], "For SageMaker Studio": [[593, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[593, "for-sagemaker-notebook-instance"]], "Installation Guide": [[593, "installation-guide"]], "BigDL Nano Support": [[594, "bigdl-nano-support"]], "Example": [[594, "example"], [598, "example"], [611, "example"], [621, "example"]], "Support Matrix": [[594, "support-matrix"]], "Intel CPU Platforms: Best Performance Setting": [[595, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[595, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[595, "install-numa-controller"]], "Environment Variables": [[595, "environment-variables"]], "Frequency Governers": [[595, "frequency-governers"]], "Neural Coder as Python API": [[596, "neural-coder-as-python-api"]], "Enable": [[596, "enable"]], "Bench": [[596, "bench"]], "SuperBench": [[596, "superbench"]], "Quick-Start": [[597, "quick-start"]], "Launcher Arguments (Optional)": [[597, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[598, "neural-coder-for-quantization"]], "Features Supported": [[598, "features-supported"]], "Models Supported": [[598, "models-supported"]], "Usage": [[598, "usage"], [622, "usage"], [622, "id1"], [624, "usage"], [624, "id2"], [624, "id4"], [624, "id6"], [624, "id8"], [624, "id10"], [624, "id12"], [624, "id14"], [624, "id16"], [624, "id18"], [624, "id20"], [624, "id22"]], "PyPI distribution:": [[598, "pypi-distribution"]], "Supported Optimization Features": [[599, "supported-optimization-features"]], "v0.4": [[600, "v0-4"]], "Highlights": [[600, "highlights"]], "Others": [[600, "others"]], "Changelog": [[601, "changelog"], [605, "changelog"]], "neural_compressor_ext_lab": [[602, "neural-compressor-ext-lab"]], "Requirements": [[602, "requirements"], [606, "requirements"]], "Install": [[602, "install"], [606, "install"]], "Uninstall": [[602, "uninstall"], [606, "uninstall"]], "Contributing": [[602, "contributing"], [606, "contributing"]], "Development install": [[602, "development-install"], [606, "development-install"]], "Development uninstall": [[602, "development-uninstall"], [606, "development-uninstall"]], "Packaging the extension": [[602, "packaging-the-extension"], [606, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[603, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[603, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[603, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[603, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[604, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[604, "manual-release"], [607, "manual-release"]], "Python package": [[604, "python-package"], [607, "python-package"]], "NPM package": [[604, "npm-package"], [607, "npm-package"]], "Automated releases with the Jupyter Releaser": [[604, "automated-releases-with-the-jupyter-releaser"], [607, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[604, "publishing-to-conda-forge"], [607, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[606, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[607, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[608, "change-log"]], "[Unreleased]": [[608, "unreleased"]], "Background Introduction": [[609, "background-introduction"]], "Neural Coder Extension in VSCode": [[609, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[609, "neural-coder-extension-usage"]], "1. Open": [[609, "open"]], "2. Search": [[609, "search"]], "3. Setting": [[609, "setting"]], "4. Icon": [[609, "icon"]], "5. optimization (quantization)": [[609, "optimization-quantization"]], "5.1 Enable": [[609, "enable"]], "5.2 Auto": [[609, "auto"]], "Welcome to your VS Code Extension": [[610, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[610, "what-s-in-the-folder"]], "Setup": [[610, "setup"]], "Get up and running straight away": [[610, "get-up-and-running-straight-away"]], "Make changes": [[610, "make-changes"]], "Explore the API": [[610, "explore-the-api"]], "Run tests": [[610, "run-tests"]], "Go further": [[610, "go-further"]], "Single Objective": [[611, "single-objective"]], "Multiple Objectives": [[611, "multiple-objectives"]], "Objective Support Matrix": [[611, "objective-support-matrix"]], "Get Started with Objective API": [[611, "get-started-with-objective-api"]], "Config Single Objective": [[611, "config-single-objective"]], "Config Multiple Objectives": [[611, "config-multiple-objectives"]], "Optimization Orchestration": [[612, "optimization-orchestration"]], "One-shot": [[612, "one-shot"]], "Orchestration Support Matrix": [[612, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[612, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[613, "system-configuration"]], "Neural Network Pruning": [[614, "neural-network-pruning"]], "Pruning Patterns": [[614, "pruning-patterns"]], "Pruning Criteria": [[614, "pruning-criteria"]], "Pruning Types": [[614, "pruning-types"]], "Pruning Schedules": [[614, "pruning-schedules"]], "Pruning Scope": [[614, "pruning-scope"]], "Sparsity Decay Types": [[614, "sparsity-decay-types"]], "Regularization": [[614, "regularization"]], "Pruning Support Matrix": [[614, "pruning-support-matrix"]], "Get Started with Pruning API": [[614, "get-started-with-pruning-api"]], "Sparse Model Deployment": [[614, "sparse-model-deployment"]], "Reference": [[614, "reference"], [617, "reference"], [621, "reference"]], "Full Publications/Events (59)": [[615, "full-publications-events-59"]], "2023 (6)": [[615, "id1"]], "2022 (34)": [[615, "id2"]], "2021 (15)": [[615, "id3"]], "2018 - 2020 (4)": [[615, "id4"]], "Pythonic Style Access for Configurations": [[616, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[616, "pythonic-api-for-user-configurations"], [616, "id1"]], "Pythonic API for Framework Configurations": [[616, "pythonic-api-for-framework-configurations"], [616, "id2"]], "Get Started with Pythonic API for Configurations": [[616, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[616, "nas"]], "Quantization Introduction": [[617, "quantization-introduction"]], "Quantization Fundamentals": [[617, "quantization-fundamentals"], [621, "quantization-fundamentals"]], "Quantization Support Matrix": [[617, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[617, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[617, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[617, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[617, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[617, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[617, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[617, "with-or-without-accuracy-aware-tuning"]], "Get Started": [[617, "get-started"]], "Post Training Quantization": [[617, "post-training-quantization"]], "Specify Quantization Rules": [[617, "specify-quantization-rules"]], "Specify Quantization Recipes": [[617, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[617, "specify-quantization-backend-and-device"]], "Turn OFF Auto Mixed Precision during Quantization": [[618, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[618, "tensorflow"]], "Release": [[619, "release"]], "Release Notes": [[619, "release-notes"]], "Known Issues": [[619, "known-issues"]], "Incompatible Changes": [[619, "incompatible-changes"]], "SigOpt Strategy": [[620, "sigopt-strategy"]], "Preparation": [[620, "preparation"]], "SigOpt Platform": [[620, "sigopt-platform"]], "Neural Compressor Configuration": [[620, "neural-compressor-configuration"]], "Performance": [[620, "performance"]], "Benefit of SigOpt Strategy": [[620, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[620, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[621, "smooth-quant"]], "Per-tensor & Per-channel": [[621, "per-tensor-per-channel"]], "Per-tensor example": [[621, "per-tensor-example"]], "Per-channel example": [[621, "per-channel-example"]], "Matmul quantization example": [[621, "matmul-quantization-example"]], "Per-channel limitation": [[621, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[621, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[621, "smoothquant"]], "Our enhancement:": [[621, "our-enhancement"]], "Algorithm: Layer-wise Auto-tuning of $\\alpha$.": [[621, "algorithm-layer-wise-auto-tuning-of-alpha"]], "Engineering": [[621, "engineering"]], "Supported Framework Matrix": [[621, "supported-framework-matrix"]], "TensorBoard": [[622, "tensorboard"]], "Get Started with TensorBoard": [[622, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[622, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[622, "tensorflow-tensorboard"]], "PyTorch Examples": [[622, "pytorch-examples"]], "TensorFlow Examples": [[622, "tensorflow-examples"]], "Transform": [[623, "transform"]], "Transform Support List": [[623, "transform-support-list"]], "Pytorch": [[623, "pytorch"]], "Tuning Strategies": [[624, "tuning-strategies"]], "Strategy Design": [[624, "strategy-design"]], "Tuning Space": [[624, "tuning-space"]], "Exit Policy": [[624, "exit-policy"]], "Accuracy Criteria": [[624, "accuracy-criteria"]], "Tuning Process": [[624, "tuning-process"]], "Tuning Algorithms": [[624, "tuning-algorithms"]], "Auto": [[624, "auto"]], "Conservative Tuning": [[624, "conservative-tuning"]], "Basic": [[624, "basic"]], "MSE": [[624, "mse"]], "MSE_V2": [[624, "mse-v2"]], "HAWQ_V2": [[624, "hawq-v2"]], "Bayesian": [[624, "bayesian"]], "Exhaustive": [[624, "exhaustive"]], "Random": [[624, "random"]], "SigOpt": [[624, "sigopt"]], "TPE": [[624, "tpe"]], "Distributed Tuning": [[624, "distributed-tuning"]], "Customize a New Tuning Strategy": [[624, "customize-a-new-tuning-strategy"]], "User Guide": [[625, "user-guide"]], "Overview": [[625, "overview"]], "Python-based APIs": [[625, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[625, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[625, "advanced-topics"]], "User YAML Configuration Files": [[626, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[626, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[627, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.11.0": [[627, "tensorflow-models-with-intel-tensorflow-2-11-0"]], "PyTorch Models with Torch 1.13.0+cpu in PTQ Mode": [[627, "pytorch-models-with-torch-1-13-0-cpu-in-ptq-mode"]], "PyTorch Models with Torch 1.13.0+cpu in QAT Mode": [[627, "pytorch-models-with-torch-1-13-0-cpu-in-qat-mode"]], "PyTorch Models with Torch and Intel\u00ae Extension for PyTorch* 1.13.0+cpu": [[627, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-13-0-cpu"]], "ONNX Models with ONNX Runtime 1.13.1": [[627, "onnx-models-with-onnx-runtime-1-13-1"]], "MXNet Models with MXNet 1.9.1": [[627, "mxnet-models-with-mxnet-1-9-1"]], "Validated Pruning Examples": [[627, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[627, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[627, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"644ec953a7dc_pruning_support": [[0, "module-644ec953a7dc_pruning_support"]], "module": [[0, "module-644ec953a7dc_pruning_support"], [1, "module-6ece06672ed3_v1_14"], [2, "module-6f0d0f71d92e_v1_13"], [3, "module-9e89549a08c8_v1_11"], [4, "module-block_mask"], [5, "module-env"], [6, "module-neural_compressor.adaptor.adaptor"], [7, "module-neural_compressor.adaptor"], [8, "module-neural_compressor.adaptor.keras"], [9, "module-neural_compressor.adaptor.keras_utils.conv2d"], [10, "module-neural_compressor.adaptor.keras_utils.dense"], [11, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [12, "module-neural_compressor.adaptor.keras_utils"], [13, "module-neural_compressor.adaptor.keras_utils.pool2d"], [14, "module-neural_compressor.adaptor.keras_utils.quantizer"], [15, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [16, "module-neural_compressor.adaptor.mxnet"], [17, "module-neural_compressor.adaptor.mxnet_utils"], [18, "module-neural_compressor.adaptor.mxnet_utils.util"], [19, "module-neural_compressor.adaptor.onnxrt"], [20, "module-neural_compressor.adaptor.ox_utils.calibration"], [21, "module-neural_compressor.adaptor.ox_utils.calibrator"], [22, "module-neural_compressor.adaptor.ox_utils"], [23, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [24, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [25, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [26, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [27, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [28, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [29, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [30, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [31, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [32, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [33, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [34, "module-neural_compressor.adaptor.ox_utils.operators"], [35, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [36, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [37, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [38, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [39, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [40, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [41, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [42, "module-neural_compressor.adaptor.ox_utils.operators.split"], [43, "module-neural_compressor.adaptor.ox_utils.quantizer"], [44, "module-neural_compressor.adaptor.ox_utils.util"], [45, "module-neural_compressor.adaptor.pytorch"], [46, "module-neural_compressor.adaptor.query"], [47, "module-neural_compressor.adaptor.tensorflow"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [110, "module-neural_compressor.adaptor.tf_utils.graph_util"], [111, "module-neural_compressor.adaptor.tf_utils"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [140, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [141, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [142, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [145, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [146, "module-neural_compressor.adaptor.tf_utils.util"], [147, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [148, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [149, "module-neural_compressor.adaptor.torch_utils"], [150, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [151, "module-neural_compressor.adaptor.torch_utils.pattern_detector"], [152, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [153, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [154, "module-neural_compressor.adaptor.torch_utils.util"], [155, "module-neural_compressor.algorithm.algorithm"], [156, "module-neural_compressor.algorithm.fast_bias_correction"], [157, "module-neural_compressor.algorithm"], [158, "module-neural_compressor.algorithm.smooth_quant"], [159, "module-neural_compressor.algorithm.weight_correction"], [160, "module-neural_compressor.benchmark"], [161, "module-neural_compressor.compression.callbacks"], [162, "module-neural_compressor.compression.distillation.criterions"], [163, "module-neural_compressor.compression.distillation"], [164, "module-neural_compressor.compression"], [165, "module-neural_compressor.compression.pruner.criteria"], [166, "module-neural_compressor.compression.pruner"], [167, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [168, "module-neural_compressor.compression.pruner.model_slim"], [169, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [170, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [171, "module-neural_compressor.compression.pruner.patterns"], [172, "module-neural_compressor.compression.pruner.pruners"], [173, "module-neural_compressor.compression.pruner.regs"], [174, "module-neural_compressor.compression.pruner.schedulers"], [175, "module-neural_compressor.compression.pruner.utils"], [176, "module-neural_compressor.conf.config"], [177, "module-neural_compressor.conf.dotdict"], [178, "module-neural_compressor.conf"], [179, "module-neural_compressor.conf.pythonic_config"], [180, "module-neural_compressor.config"], [181, "module-neural_compressor.contrib"], [182, "module-neural_compressor.contrib.strategy"], [183, "module-neural_compressor.contrib.strategy.sigopt"], [184, "module-neural_compressor.contrib.strategy.tpe"], [185, "module-neural_compressor.data.dataloaders.base_dataloader"], [186, "module-neural_compressor.data.dataloaders.dataloader"], [187, "module-neural_compressor.data.dataloaders.default_dataloader"], [188, "module-neural_compressor.data.dataloaders.fetcher"], [189, "module-neural_compressor.data.dataloaders"], [190, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [191, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [192, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [193, "module-neural_compressor.data.dataloaders.sampler"], [194, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [195, "module-neural_compressor.data.datasets.bert_dataset"], [196, "module-neural_compressor.data.datasets.coco_dataset"], [197, "module-neural_compressor.data.datasets.dataset"], [198, "module-neural_compressor.data.datasets.dummy_dataset"], [199, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [200, "module-neural_compressor.data.datasets.imagenet_dataset"], [201, "module-neural_compressor.data.datasets"], [202, "module-neural_compressor.data.datasets.style_transfer_dataset"], [203, "module-neural_compressor.data.filters.coco_filter"], [204, "module-neural_compressor.data.filters.filter"], [205, "module-neural_compressor.data.filters"], [206, "module-neural_compressor.data"], [207, "module-neural_compressor.data.transforms.coco_transform"], [208, "module-neural_compressor.data.transforms.imagenet_transform"], [209, "module-neural_compressor.data.transforms"], [210, "module-neural_compressor.data.transforms.postprocess"], [211, "module-neural_compressor.data.transforms.tokenization"], [212, "module-neural_compressor.data.transforms.transform"], [213, "module-neural_compressor.experimental.benchmark"], [214, "module-neural_compressor.experimental.common.criterion"], [215, "module-neural_compressor.experimental.common.dataloader"], [216, "module-neural_compressor.experimental.common"], [217, "module-neural_compressor.experimental.common.metric"], [218, "module-neural_compressor.experimental.common.model"], [219, "module-neural_compressor.experimental.common.optimizer"], [220, "module-neural_compressor.experimental.common.postprocess"], [221, "module-neural_compressor.experimental.common.torch_utils"], [222, "module-neural_compressor.experimental.component"], [223, "module-neural_compressor.experimental.compression"], [224, "module-neural_compressor.experimental.compression.pruning"], [225, "module-neural_compressor.experimental.contrib"], [226, "module-neural_compressor.experimental.contrib.strategy"], [227, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [228, "module-neural_compressor.experimental.contrib.strategy.tpe"], [229, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [230, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [231, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [232, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [233, "module-neural_compressor.experimental.data.dataloaders"], [234, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [235, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [236, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [237, "module-neural_compressor.experimental.data.dataloaders.sampler"], [238, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [239, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [240, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [241, "module-neural_compressor.experimental.data.datasets.dataset"], [242, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [243, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [244, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [245, "module-neural_compressor.experimental.data.datasets"], [246, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [247, "module-neural_compressor.experimental.data.filters.coco_filter"], [248, "module-neural_compressor.experimental.data.filters.filter"], [249, "module-neural_compressor.experimental.data.filters"], [250, "module-neural_compressor.experimental.data"], [251, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [252, "module-neural_compressor.experimental.data.transforms"], [253, "module-neural_compressor.experimental.data.transforms.tokenization"], [254, "module-neural_compressor.experimental.data.transforms.transform"], [255, "module-neural_compressor.experimental.distillation"], [256, "module-neural_compressor.experimental.export"], [257, "module-neural_compressor.experimental.export.qlinear2qdq"], [258, "module-neural_compressor.experimental.export.tf2onnx"], [259, "module-neural_compressor.experimental.export.torch2onnx"], [260, "module-neural_compressor.experimental.export.utils"], [261, "module-neural_compressor.experimental.graph_optimization"], [262, "module-neural_compressor.experimental"], [263, "module-neural_compressor.experimental.metric.bleu"], [264, "module-neural_compressor.experimental.metric.bleu_util"], [265, "module-neural_compressor.experimental.metric.coco_label_map"], [266, "module-neural_compressor.experimental.metric.coco_tools"], [267, "module-neural_compressor.experimental.metric.evaluate_squad"], [268, "module-neural_compressor.experimental.metric.f1"], [269, "module-neural_compressor.experimental.metric"], [270, "module-neural_compressor.experimental.metric.metric"], [271, "module-neural_compressor.experimental.mixed_precision"], [272, "module-neural_compressor.experimental.model_conversion"], [273, "module-neural_compressor.experimental.nas.basic_nas"], [274, "module-neural_compressor.experimental.nas.dynas"], [275, "module-neural_compressor.experimental.nas"], [276, "module-neural_compressor.experimental.nas.nas"], [277, "module-neural_compressor.experimental.nas.nas_utils"], [278, "module-neural_compressor.experimental.nas.search_algorithms"], [279, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [280, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [281, "module-neural_compressor.experimental.pruner_legacy"], [282, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [283, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [284, "module-neural_compressor.experimental.pruner_legacy.pruner"], [285, "module-neural_compressor.experimental.pruning"], [286, "module-neural_compressor.experimental.pruning_recipes"], [287, "module-neural_compressor.experimental.pruning_recipes.patterns"], [288, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [289, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [290, "module-neural_compressor.experimental.pruning_v2"], [291, "module-neural_compressor.experimental.pytorch_pruner"], [292, "module-neural_compressor.experimental.pytorch_pruner.logger"], [293, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [294, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [295, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [296, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [297, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [298, "module-neural_compressor.experimental.quantization"], [299, "module-neural_compressor.experimental.scheduler"], [300, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [301, "module-neural_compressor.experimental.strategy.basic"], [302, "module-neural_compressor.experimental.strategy.bayesian"], [303, "module-neural_compressor.experimental.strategy.exhaustive"], [304, "module-neural_compressor.experimental.strategy"], [305, "module-neural_compressor.experimental.strategy.mse"], [306, "module-neural_compressor.experimental.strategy.mse_v2"], [307, "module-neural_compressor.experimental.strategy.random"], [308, "module-neural_compressor.experimental.strategy.strategy"], [309, "module-neural_compressor.experimental.strategy.utils.constant"], [310, "module-neural_compressor.experimental.strategy.utils"], [311, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [312, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [313, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [314, "module-neural_compressor.experimental.strategy.utils.utility"], [315, "module-neural_compressor"], [316, "module-neural_compressor.metric.bleu"], [317, "module-neural_compressor.metric.bleu_util"], [318, "module-neural_compressor.metric.coco_label_map"], [319, "module-neural_compressor.metric.coco_tools"], [320, "module-neural_compressor.metric.evaluate_squad"], [321, "module-neural_compressor.metric.f1"], [322, "module-neural_compressor.metric"], [323, "module-neural_compressor.metric.metric"], [324, "module-neural_compressor.mix_precision"], [325, "module-neural_compressor.model.base_model"], [326, "module-neural_compressor.model"], [327, "module-neural_compressor.model.keras_model"], [328, "module-neural_compressor.model.model"], [329, "module-neural_compressor.model.mxnet_model"], [330, "module-neural_compressor.model.nets_factory"], [331, "module-neural_compressor.model.onnx_model"], [332, "module-neural_compressor.model.tensorflow_model"], [333, "module-neural_compressor.model.torch_model"], [334, "module-neural_compressor.objective"], [335, "module-neural_compressor.quantization"], [336, "module-neural_compressor.strategy.auto"], [337, "module-neural_compressor.strategy.auto_mixed_precision"], [338, "module-neural_compressor.strategy.basic"], [339, "module-neural_compressor.strategy.bayesian"], [340, "module-neural_compressor.strategy.conservative"], [341, "module-neural_compressor.strategy.exhaustive"], [342, "module-neural_compressor.strategy.hawq_v2"], [343, "module-neural_compressor.strategy"], [344, "module-neural_compressor.strategy.mse"], [345, "module-neural_compressor.strategy.mse_v2"], [346, "module-neural_compressor.strategy.random"], [347, "module-neural_compressor.strategy.strategy"], [348, "module-neural_compressor.strategy.utils.constant"], [349, "module-neural_compressor.strategy.utils"], [350, "module-neural_compressor.strategy.utils.tuning_sampler"], [351, "module-neural_compressor.strategy.utils.tuning_space"], [352, "module-neural_compressor.strategy.utils.tuning_structs"], [353, "module-neural_compressor.strategy.utils.utility"], [354, "module-neural_compressor.template.api_doc_example"], [355, "module-neural_compressor.template"], [356, "module-neural_compressor.training"], [357, "module-neural_compressor.utils.collect_layer_histogram"], [358, "module-neural_compressor.utils.constant"], [359, "module-neural_compressor.utils.create_obj_from_config"], [360, "module-neural_compressor.utils"], [361, "module-neural_compressor.utils.kl_divergence"], [362, "module-neural_compressor.utils.load_huggingface"], [363, "module-neural_compressor.utils.logger"], [364, "module-neural_compressor.utils.options"], [365, "module-neural_compressor.utils.pytorch"], [366, "module-neural_compressor.utils.utility"], [367, "module-neural_compressor.ux.components.benchmark.benchmark"], [368, "module-neural_compressor.ux.components.benchmark.benchmark_model"], [369, "module-neural_compressor.ux.components.benchmark.execute_benchmark"], [370, "module-neural_compressor.ux.components.benchmark"], [371, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"], [372, "module-neural_compressor.ux.components.config_generator.config_generator"], [373, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"], [374, "module-neural_compressor.ux.components.config_generator"], [375, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"], [376, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"], [377, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"], [378, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"], [379, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"], [380, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"], [381, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"], [382, "module-neural_compressor.ux.components.configuration_wizard"], [383, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"], [384, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"], [385, "module-neural_compressor.ux.components.db_manager.db_manager"], [386, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"], [387, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"], [388, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"], [389, "module-neural_compressor.ux.components.db_manager.db_models.dataset"], [390, "module-neural_compressor.ux.components.db_manager.db_models.domain"], [391, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"], [392, "module-neural_compressor.ux.components.db_manager.db_models.example"], [393, "module-neural_compressor.ux.components.db_manager.db_models.framework"], [394, "module-neural_compressor.ux.components.db_manager.db_models"], [395, "module-neural_compressor.ux.components.db_manager.db_models.metric"], [396, "module-neural_compressor.ux.components.db_manager.db_models.model"], [397, "module-neural_compressor.ux.components.db_manager.db_models.optimization"], [398, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"], [399, "module-neural_compressor.ux.components.db_manager.db_models.precision"], [400, "module-neural_compressor.ux.components.db_manager.db_models.profiling"], [401, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"], [402, "module-neural_compressor.ux.components.db_manager.db_models.project"], [403, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"], [404, "module-neural_compressor.ux.components.db_manager.db_models.transform"], [405, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"], [406, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"], [407, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"], [408, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"], [409, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"], [410, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"], [411, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"], [412, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"], [413, "module-neural_compressor.ux.components.db_manager.db_operations"], [414, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"], [415, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"], [416, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"], [417, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"], [418, "module-neural_compressor.ux.components.db_manager"], [419, "module-neural_compressor.ux.components.db_manager.params_interfaces"], [420, "module-neural_compressor.ux.components.db_manager.utils"], [421, "module-neural_compressor.ux.components.diagnosis.diagnosis"], [422, "module-neural_compressor.ux.components.diagnosis.factory"], [423, "module-neural_compressor.ux.components.diagnosis"], [424, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"], [425, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"], [426, "module-neural_compressor.ux.components.diagnosis.op_details"], [427, "module-neural_compressor.ux.components.diagnosis.op_entry"], [428, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"], [429, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"], [430, "module-neural_compressor.ux.components.file_browser.file_browser"], [431, "module-neural_compressor.ux.components.file_browser"], [432, "module-neural_compressor.ux.components.graph.attribute"], [433, "module-neural_compressor.ux.components.graph.collapser"], [434, "module-neural_compressor.ux.components.graph.edge"], [435, "module-neural_compressor.ux.components.graph.graph"], [436, "module-neural_compressor.ux.components.graph.graph_reader"], [437, "module-neural_compressor.ux.components.graph"], [438, "module-neural_compressor.ux.components.graph.node"], [439, "module-neural_compressor.ux.components.graph.reader"], [440, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"], [441, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"], [442, "module-neural_compressor.ux.components"], [443, "module-neural_compressor.ux.components.jobs_management"], [444, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"], [445, "module-neural_compressor.ux.components.jobs_management.jobs_manager"], [446, "module-neural_compressor.ux.components.jobs_management.request"], [447, "module-neural_compressor.ux.components.manage_workspace"], [448, "module-neural_compressor.ux.components.model.domain"], [449, "module-neural_compressor.ux.components.model"], [450, "module-neural_compressor.ux.components.model.model"], [451, "module-neural_compressor.ux.components.model.model_type_getter"], [452, "module-neural_compressor.ux.components.model.onnxrt"], [453, "module-neural_compressor.ux.components.model.onnxrt.model"], [454, "module-neural_compressor.ux.components.model.pytorch"], [455, "module-neural_compressor.ux.components.model.pytorch.model"], [456, "module-neural_compressor.ux.components.model.repository"], [457, "module-neural_compressor.ux.components.model.shape"], [458, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"], [459, "module-neural_compressor.ux.components.model.tensorflow"], [460, "module-neural_compressor.ux.components.model.tensorflow.keras"], [461, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"], [462, "module-neural_compressor.ux.components.model.tensorflow.model"], [463, "module-neural_compressor.ux.components.model.tensorflow.saved_model"], [464, "module-neural_compressor.ux.components.model.tensorflow.utils"], [465, "module-neural_compressor.ux.components.model_zoo.download_config"], [466, "module-neural_compressor.ux.components.model_zoo.download_model"], [467, "module-neural_compressor.ux.components.model_zoo.downloader"], [468, "module-neural_compressor.ux.components.model_zoo"], [469, "module-neural_compressor.ux.components.model_zoo.list_models"], [470, "module-neural_compressor.ux.components.names_mapper"], [471, "module-neural_compressor.ux.components.names_mapper.names_mapper"], [472, "module-neural_compressor.ux.components.optimization.execute_optimization"], [473, "module-neural_compressor.ux.components.optimization.factory"], [474, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"], [475, "module-neural_compressor.ux.components.optimization.graph_optimizer"], [476, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"], [477, "module-neural_compressor.ux.components.optimization"], [478, "module-neural_compressor.ux.components.optimization.mixed_precision"], [479, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"], [480, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"], [481, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"], [482, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"], [483, "module-neural_compressor.ux.components.optimization.optimization"], [484, "module-neural_compressor.ux.components.optimization.pruning"], [485, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"], [486, "module-neural_compressor.ux.components.optimization.pruning.pruning"], [487, "module-neural_compressor.ux.components.optimization.tune"], [488, "module-neural_compressor.ux.components.optimization.tune.tune_model"], [489, "module-neural_compressor.ux.components.optimization.tune.tuning"], [490, "module-neural_compressor.ux.components.optimization.tuning_history"], [491, "module-neural_compressor.ux.components.profiling.execute_profiling"], [492, "module-neural_compressor.ux.components.profiling.factory"], [493, "module-neural_compressor.ux.components.profiling"], [494, "module-neural_compressor.ux.components.profiling.profile_model"], [495, "module-neural_compressor.ux.components.profiling.profiler"], [496, "module-neural_compressor.ux.components.profiling.profiling"], [497, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"], [498, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"], [499, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"], [500, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"], [501, "module-neural_compressor.ux.inc_bench"], [502, "module-neural_compressor.ux"], [503, "module-neural_compressor.ux.utils.consts"], [504, "module-neural_compressor.ux.utils.environment"], [505, "module-neural_compressor.ux.utils.exceptions"], [506, "module-neural_compressor.ux.utils.executor"], [507, "module-neural_compressor.ux.utils.expiring_dict"], [508, "module-neural_compressor.ux.utils.github_info"], [509, "module-neural_compressor.ux.utils.hw_info"], [510, "module-neural_compressor.ux.utils"], [511, "module-neural_compressor.ux.utils.json_serializer"], [512, "module-neural_compressor.ux.utils.logger"], [513, "module-neural_compressor.ux.utils.parser"], [514, "module-neural_compressor.ux.utils.proc"], [515, "module-neural_compressor.ux.utils.processes"], [516, "module-neural_compressor.ux.utils.singleton"], [517, "module-neural_compressor.ux.utils.status_updates"], [518, "module-neural_compressor.ux.utils.templates"], [519, "module-neural_compressor.ux.utils.templates.metric"], [520, "module-neural_compressor.ux.utils.templates.workdir"], [521, "module-neural_compressor.ux.utils.utils"], [522, "module-neural_compressor.ux.utils.workload.config"], [523, "module-neural_compressor.ux.utils.workload.dataloader"], [524, "module-neural_compressor.ux.utils.workload.evaluation"], [525, "module-neural_compressor.ux.utils.workload.graph_optimization"], [526, "module-neural_compressor.ux.utils.workload"], [527, "module-neural_compressor.ux.utils.workload.mixed_precision"], [528, "module-neural_compressor.ux.utils.workload.model"], [529, "module-neural_compressor.ux.utils.workload.pruning"], [530, "module-neural_compressor.ux.utils.workload.quantization"], [531, "module-neural_compressor.ux.utils.workload.tuning"], [532, "module-neural_compressor.ux.utils.yaml_utils"], [533, "module-neural_compressor.ux.web.communication"], [534, "module-neural_compressor.ux.web.configuration"], [535, "module-neural_compressor.ux.web.exceptions"], [536, "module-neural_compressor.ux.web"], [537, "module-neural_compressor.ux.web.router"], [538, "module-neural_compressor.ux.web.server"], [539, "module-neural_compressor.ux.web.service.benchmark"], [540, "module-neural_compressor.ux.web.service.history_snapshot_parser"], [541, "module-neural_compressor.ux.web.service"], [542, "module-neural_compressor.ux.web.service.model"], [543, "module-neural_compressor.ux.web.service.optimization"], [544, "module-neural_compressor.ux.web.service.profiling"], [545, "module-neural_compressor.ux.web.service.request_data_processor"], [546, "module-neural_compressor.ux.web.service.response_generator"], [547, "module-neural_compressor.ux.web.service.workload"], [548, "module-neural_compressor.version"]], "6ece06672ed3_v1_14": [[1, "module-6ece06672ed3_v1_14"]], "update_dataloaders() (in module 6ece06672ed3_v1_14)": [[1, "ece06672ed3_v1_14.update_dataloaders"]], "update_transformations() (in module 6ece06672ed3_v1_14)": [[1, "ece06672ed3_v1_14.update_transformations"]], "6f0d0f71d92e_v1_13": [[2, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[3, "module-9e89549a08c8_v1_11"]], "block_mask": [[4, "module-block_mask"]], "env": [[5, "module-env"]], "run_migrations_offline() (in module env)": [[5, "env.run_migrations_offline"]], "run_migrations_online() (in module env)": [[5, "env.run_migrations_online"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[6, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[6, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[6, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[7, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[8, "neural_compressor.adaptor.keras.KerasQuery"]], "neural_compressor.adaptor.keras": [[8, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[9, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[10, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[11, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[12, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[13, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[14, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[15, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[16, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[16, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[17, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[18, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[18, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[19, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[19, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[19, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[19, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[19, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[20, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[20, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[21, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[21, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[21, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[21, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[21, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[21, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[21, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[21, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[22, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[23, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[23, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[23, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[23, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[24, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[24, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[24, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[25, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[25, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[25, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[26, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[26, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[26, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[27, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[27, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[27, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[28, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[28, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[28, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[29, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[29, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[29, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[30, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[30, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[31, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[31, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[31, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[33, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[33, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[34, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[35, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[35, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[36, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[36, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[36, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[37, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[37, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[37, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[38, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[38, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[38, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[38, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[38, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[39, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[39, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[39, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[40, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[40, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[40, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[41, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[41, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[41, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[42, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[42, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[42, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[43, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[43, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "adjust_weights_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_input"]], "adjust_weights_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_op"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "fold_scale() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.fold_scale"]], "get_smooth_scales_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_input"]], "get_smooth_scales_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_op"]], "insert_smooth_mul_op_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_input"]], "insert_smooth_mul_op_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_op"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[44, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[44, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[45, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[45, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[46, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[46, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[47, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[47, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[49, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[49, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[109, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[109, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[110, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[110, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[111, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[139, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[139, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[140, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[140, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[141, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[141, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[142, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[144, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[145, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[146, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[146, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[147, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[147, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[147, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[147, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[148, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[148, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[148, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[148, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[148, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[149, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[150, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[151, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[151, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "graphtrace (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[152, "neural_compressor.adaptor.torch_utils.smooth_quant.GraphTrace"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[152, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[152, "neural_compressor.adaptor.torch_utils.smooth_quant.get_module"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[152, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "set_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[152, "neural_compressor.adaptor.torch_utils.smooth_quant.set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[153, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[153, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[153, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[154, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[154, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[154, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[154, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[154, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[154, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[154, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[154, "neural_compressor.adaptor.torch_utils.util.get_depth"]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[154, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[154, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[154, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[154, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[154, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[154, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[154, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[154, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[154, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[154, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[154, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[154, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[154, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "neural_compressor.adaptor.torch_utils.util": [[154, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[154, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[154, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[154, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[154, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[155, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[155, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[155, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[155, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[155, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[156, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[156, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[157, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[158, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[158, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[159, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[159, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[160, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[160, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[160, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[160, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[160, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[160, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[160, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[160, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[160, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[160, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[160, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[160, "module-neural_compressor.benchmark"]], "run_instance() (in module neural_compressor.benchmark)": [[160, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[160, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[160, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[160, "neural_compressor.benchmark.summary_benchmark"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[161, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[161, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[161, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[161, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[161, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[161, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[161, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[161, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[161, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[162, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[162, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[162, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[162, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[162, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[162, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[162, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[162, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[162, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[162, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[162, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[162, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[162, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[162, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[162, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[162, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[162, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[162, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[163, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[164, "module-neural_compressor.compression"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[165, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[165, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[165, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[165, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[165, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumblockcriterion (class in neural_compressor.compression.pruner.criteria)": [[165, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[165, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[165, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[165, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[165, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[165, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[165, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[165, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[165, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[165, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumblockcriterion attribute)": [[165, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[165, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[166, "module-neural_compressor.compression.pruner"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[167, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[167, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[167, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[167, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[167, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[167, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[167, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[168, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[169, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[169, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[170, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[170, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "mhacompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[170, "neural_compressor.compression.pruner.model_slim.weight_slim.MHACompression"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[170, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[170, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[170, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[170, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[170, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[170, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns)": [[171, "neural_compressor.compression.pruner.patterns.BasePattern"]], "m (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[171, "neural_compressor.compression.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[171, "neural_compressor.compression.pruner.patterns.PatternNInM.N"]], "patternninm (class in neural_compressor.compression.pruner.patterns)": [[171, "neural_compressor.compression.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.compression.pruner.patterns)": [[171, "neural_compressor.compression.pruner.patterns.PatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.patternnxm attribute)": [[171, "neural_compressor.compression.pruner.patterns.PatternNxM.block_size"]], "config (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[171, "neural_compressor.compression.pruner.patterns.BasePattern.config"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[171, "neural_compressor.compression.pruner.patterns.get_pattern"]], "invalid_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[171, "neural_compressor.compression.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[171, "neural_compressor.compression.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[171, "neural_compressor.compression.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[171, "neural_compressor.compression.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[171, "neural_compressor.compression.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[171, "neural_compressor.compression.pruner.patterns.BasePattern.modules"]], "neural_compressor.compression.pruner.patterns": [[171, "module-neural_compressor.compression.pruner.patterns"]], "pattern (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[171, "neural_compressor.compression.pruner.patterns.BasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns)": [[171, "neural_compressor.compression.pruner.patterns.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[171, "neural_compressor.compression.pruner.patterns.BasePattern.target_sparsity"]], "basepruner (class in neural_compressor.compression.pruner.pruners)": [[172, "neural_compressor.compression.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.compression.pruner.pruners)": [[172, "neural_compressor.compression.pruner.pruners.BasicPruner"]], "blockmaskpruner (class in neural_compressor.compression.pruner.pruners)": [[172, "neural_compressor.compression.pruner.pruners.BlockMaskPruner"]], "patternlockpruner (class in neural_compressor.compression.pruner.pruners)": [[172, "neural_compressor.compression.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.compression.pruner.pruners)": [[172, "neural_compressor.compression.pruner.pruners.ProgressivePruner"]], "retrainfreepruner (class in neural_compressor.compression.pruner.pruners)": [[172, "neural_compressor.compression.pruner.pruners.RetrainFreePruner"]], "config (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.BasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.criterion"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[172, "neural_compressor.compression.pruner.pruners.get_pruner"]], "global_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.BasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.BasePruner.modules"]], "neural_compressor.compression.pruner.pruners": [[172, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[172, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pattern (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.BasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.BasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.reg"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners)": [[172, "neural_compressor.compression.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.BasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.BasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[172, "neural_compressor.compression.pruner.pruners.BasePruner.target_sparsity_ratio"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[173, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[173, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[173, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[173, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[173, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[173, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[173, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[173, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[174, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[174, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[174, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[174, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[174, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[174, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[174, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[175, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[175, "neural_compressor.compression.pruner.utils.check_key_validity"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[175, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[175, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "neural_compressor.compression.pruner.utils": [[175, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[175, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[175, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[175, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[175, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[175, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[175, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[175, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[175, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[176, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[176, "neural_compressor.conf.config.Conf"]], "distillation_conf (class in neural_compressor.conf.config)": [[176, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[176, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[176, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[176, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[176, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[176, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[176, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[176, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[177, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[177, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[177, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[177, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[178, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[179, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[179, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[179, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[179, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[179, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[179, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[179, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[179, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[180, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[180, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[180, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[180, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[180, "neural_compressor.config.ExportConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[180, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[180, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[180, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[180, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[180, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[180, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[180, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[180, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[180, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[180, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[180, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[180, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[180, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[180, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[180, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[180, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[180, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[180, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[180, "module-neural_compressor.config"]], "neural_compressor.contrib": [[181, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[182, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[183, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[183, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[184, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[184, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[185, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[185, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[186, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[186, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[186, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[187, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[187, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[187, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[188, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[188, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[188, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[188, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[189, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[190, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[190, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[191, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[191, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[191, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[192, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[192, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[193, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[193, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[193, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[193, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[193, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[194, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[194, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[194, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[194, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[194, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[195, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[195, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[195, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[195, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[195, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[195, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[195, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[195, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[195, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[196, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[196, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[196, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[196, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[196, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[197, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[197, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[198, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[198, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[199, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[199, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[199, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[200, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[200, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[200, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[200, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[200, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[200, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[200, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[201, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[202, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[202, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[203, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[203, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[203, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[204, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[204, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[204, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[204, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[204, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[204, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[204, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[204, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[204, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[205, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[206, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[207, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[207, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[208, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[208, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[208, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[208, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[208, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[208, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[208, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[208, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[208, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[208, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[209, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[210, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[210, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[211, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[211, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[211, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[211, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[211, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[211, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[211, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[211, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.TRANSFORMS"], [212, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[212, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[212, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[213, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[213, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[213, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[213, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[213, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[213, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[213, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[213, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[213, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[213, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[214, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[214, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[214, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[214, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[214, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[214, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[214, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[214, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[214, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[214, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[214, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[214, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[214, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[214, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[214, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[214, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[214, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[214, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[214, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[214, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[214, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[215, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[215, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[216, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[217, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[217, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[218, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[218, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[218, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[219, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[219, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[219, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[219, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[219, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[219, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[219, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[219, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[219, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[220, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[220, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[221, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[221, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[221, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[222, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[222, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[223, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[224, "module-neural_compressor.experimental.compression.pruning"]], "prepare_pruning() (in module neural_compressor.experimental.compression.pruning)": [[224, "neural_compressor.experimental.compression.pruning.prepare_pruning"]], "save() (in module neural_compressor.experimental.compression.pruning)": [[224, "neural_compressor.experimental.compression.pruning.save"]], "neural_compressor.experimental.contrib": [[225, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[226, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[227, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[227, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[228, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[228, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[229, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[229, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[230, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[231, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[231, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[231, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[232, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[232, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[232, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[232, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[233, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[234, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[234, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[235, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[235, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[235, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[236, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[236, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[237, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[237, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[237, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[237, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[237, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[238, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[238, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[238, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[238, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[238, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[239, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[239, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[239, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[239, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[239, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[239, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[239, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[239, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[239, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[240, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[240, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[240, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[240, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[240, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[241, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[241, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[242, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[242, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[243, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[243, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[243, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[244, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[244, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[244, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[244, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[244, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[244, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[244, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[245, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[246, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[246, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[247, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[247, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[247, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[248, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[248, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[248, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[248, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[248, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[248, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[248, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[248, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[248, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[249, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[250, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[251, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[251, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[251, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[251, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[251, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[251, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[251, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[251, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[251, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[251, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[252, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[253, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[253, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[253, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[253, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[253, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[253, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[253, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[253, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [254, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[254, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[254, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[255, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[255, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[255, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[255, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[255, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[255, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[256, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[257, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[257, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[257, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[258, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[258, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[258, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "build_scale_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[259, "neural_compressor.experimental.export.torch2onnx.build_scale_mapping"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[259, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[259, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[259, "module-neural_compressor.experimental.export.torch2onnx"]], "qdq_fp32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[259, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias"]], "qdq_fp32_bias_qdq() (in module neural_compressor.experimental.export.torch2onnx)": [[259, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias_qdq"]], "qdq_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[259, "neural_compressor.experimental.export.torch2onnx.qdq_int32_bias"]], "recalculate_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[259, "neural_compressor.experimental.export.torch2onnx.recalculate_bias"]], "remove_nodes_by_name() (in module neural_compressor.experimental.export.torch2onnx)": [[259, "neural_compressor.experimental.export.torch2onnx.remove_nodes_by_name"]], "set_data_type() (in module neural_compressor.experimental.export.torch2onnx)": [[259, "neural_compressor.experimental.export.torch2onnx.set_data_type"]], "set_scale_info() (in module neural_compressor.experimental.export.torch2onnx)": [[259, "neural_compressor.experimental.export.torch2onnx.set_scale_info"]], "sub_graph_with_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[259, "neural_compressor.experimental.export.torch2onnx.sub_graph_with_int32_bias"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[259, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[259, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "update_weight_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[259, "neural_compressor.experimental.export.torch2onnx.update_weight_bias"]], "dummydatareader (class in neural_compressor.experimental.export.utils)": [[260, "neural_compressor.experimental.export.utils.DummyDataReader"]], "onnx2numpy_dtype() (in module neural_compressor.experimental.export.utils)": [[260, "neural_compressor.experimental.export.utils.ONNX2Numpy_dtype"]], "neural_compressor.experimental.export.utils": [[260, "module-neural_compressor.experimental.export.utils"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[261, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[261, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[262, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[263, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[263, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[263, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[263, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[263, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[263, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[263, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[263, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[263, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[264, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[264, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[265, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[266, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[266, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[266, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[266, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[266, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[266, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[266, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[266, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[267, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[267, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[267, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[267, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[267, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[268, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[268, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[268, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[268, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[268, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[269, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[270, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[270, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[270, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[270, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[270, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[270, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[270, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[270, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[270, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[270, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[270, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[270, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[270, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[270, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[270, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[270, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[270, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[270, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[270, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[270, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[270, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[270, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[270, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[270, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[270, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[270, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[271, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[271, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[272, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[272, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[273, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[273, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[274, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[274, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[275, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[276, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[276, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[276, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[277, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[277, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[277, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[277, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[278, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[278, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[278, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[278, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[278, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[279, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[279, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[280, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[280, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[281, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[282, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[282, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[283, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[283, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[284, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[284, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[284, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[285, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[285, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[285, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[285, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[285, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[286, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[287, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[288, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[288, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[289, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[289, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[290, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[290, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[290, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[290, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[290, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[291, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[292, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[293, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[293, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[294, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[294, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[294, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[294, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[294, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[294, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[294, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[295, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[296, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[296, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[297, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[297, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[297, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[297, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[297, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[297, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[297, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[298, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[298, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[299, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[299, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[300, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[300, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[301, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[301, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[302, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[302, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[302, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[302, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[302, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[303, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[303, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[304, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[305, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[305, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[306, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[306, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[307, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[307, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[308, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[308, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[308, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[309, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[310, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[311, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[311, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[311, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[311, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[311, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[311, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[311, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[311, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[311, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[312, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[312, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[312, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[312, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[312, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[312, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[312, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[313, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[313, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[314, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[314, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[314, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[314, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[314, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[315, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[316, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[316, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[316, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[316, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[316, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[316, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[316, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[316, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[316, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[317, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[317, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[318, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[319, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[319, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[319, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[319, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[319, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[319, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[319, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[319, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[320, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[320, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[320, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[320, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[320, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[321, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[321, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[321, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[321, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[321, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[322, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[323, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[323, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[323, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[323, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[323, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[323, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[323, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[323, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[323, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[323, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[323, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[323, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[323, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[323, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[323, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[323, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[323, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[323, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[323, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[323, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[323, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[323, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[323, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[323, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[323, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[323, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[324, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[324, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[325, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[325, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[326, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[327, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[327, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[328, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[328, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[328, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[329, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[329, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[330, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[330, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[331, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[331, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[332, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[332, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[333, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[333, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[333, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[333, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[333, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[334, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[334, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[334, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[334, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[334, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[334, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[334, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[334, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[334, "neural_compressor.objective.objective_registry"]], "fit() (in module neural_compressor.quantization)": [[335, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[335, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[336, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[336, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[337, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[337, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[338, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[338, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[339, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[339, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[339, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[339, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[339, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[340, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[340, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[341, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[341, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[342, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[342, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[343, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[344, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[344, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[345, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[345, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[346, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[346, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[347, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[347, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[347, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[347, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[348, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[349, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[350, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[350, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[350, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[350, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[350, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[350, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[350, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.strategy.utils.tuning_sampler)": [[350, "neural_compressor.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_sampler": [[350, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[351, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[351, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[351, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[351, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[351, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[351, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[351, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[352, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[352, "module-neural_compressor.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[353, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[353, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[353, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[353, "module-neural_compressor.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[353, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[354, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[354, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[354, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[354, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[354, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[354, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[354, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[354, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[354, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[354, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[354, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[355, "module-neural_compressor.template"]], "callbacks (class in neural_compressor.training)": [[356, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[356, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[356, "neural_compressor.training.fit"]], "neural_compressor.training": [[356, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[356, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[357, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[357, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[358, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[359, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[359, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[359, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[359, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[359, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[359, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[359, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[359, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[359, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[359, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[360, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[361, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[361, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[362, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "neural_compressor.utils.load_huggingface": [[362, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[362, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[363, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[363, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[363, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[363, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[363, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[363, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[363, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[363, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[363, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.options": [[364, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[364, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[365, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[365, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[365, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.Dequantize"]], "dequantizeweight() (in module neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.DequantizeWeight"]], "dotdict (class in neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.MODE"]], "statistics (class in neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.alias_param"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.compute_sparsity"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.dump_elapsed_time"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_size() (in module neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.get_tuning_history"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.load_data_from_pkl"]], "neural_compressor.utils.utility": [[366, "module-neural_compressor.utils.utility"]], "recover() (in module neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[366, "neural_compressor.utils.utility.version1_lte_version2"]], "benchmark (class in neural_compressor.ux.components.benchmark.benchmark)": [[367, "neural_compressor.ux.components.benchmark.benchmark.Benchmark"]], "dataloaderinterface (class in neural_compressor.ux.components.benchmark.benchmark)": [[367, "neural_compressor.ux.components.benchmark.benchmark.DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark": [[367, "module-neural_compressor.ux.components.benchmark.benchmark"]], "benchmark_model() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[368, "neural_compressor.ux.components.benchmark.benchmark_model.benchmark_model"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[368, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "parse_args() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[368, "neural_compressor.ux.components.benchmark.benchmark_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[368, "neural_compressor.ux.components.benchmark.benchmark_model.set_eager_execution"]], "benchmark_result_update() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[369, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update"]], "benchmark_result_update_pytorch_script() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[369, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update_pytorch_script"]], "execute_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[369, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_benchmark"]], "execute_real_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[369, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_real_benchmark"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[369, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "pytorch_script_bench_optimizations() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[369, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_optimizations"]], "pytorch_script_bench_original_model() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[369, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_original_model"]], "benchmarks (class in neural_compressor.ux.components.benchmark)": [[370, "neural_compressor.ux.components.benchmark.Benchmarks"]], "neural_compressor.ux.components.benchmark": [[370, "module-neural_compressor.ux.components.benchmark"]], "benchmarkconfiggenerator (class in neural_compressor.ux.components.config_generator.benchmark_config_generator)": [[371, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[371, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "configgenerator (class in neural_compressor.ux.components.config_generator.config_generator)": [[372, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator": [[372, "module-neural_compressor.ux.components.config_generator.config_generator"]], "graphoptimizationconfiggenerator (class in neural_compressor.ux.components.config_generator.graph_optimization_config_generator)": [[373, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[373, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[374, "module-neural_compressor.ux.components.config_generator"]], "mixedprecisionconfiggenerator (class in neural_compressor.ux.components.config_generator.mixed_precision_config_generator)": [[375, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[375, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "profilingconfiggenerator (class in neural_compressor.ux.components.config_generator.profiling_config_generator)": [[376, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[376, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "pruningconfiggenerator (class in neural_compressor.ux.components.config_generator.pruning_config_generator)": [[377, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[377, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "quantizationconfiggenerator (class in neural_compressor.ux.components.config_generator.quantization_config_generator)": [[378, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[378, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "configurationparser (class in neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[379, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[379, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "normalize_string_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[379, "neural_compressor.ux.components.configuration_wizard.configuration_parser.normalize_string_list"]], "parse_list_value() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[379, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_list_value"]], "parse_multidim_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[379, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_multidim_list"]], "get_boundary_nodes() (in module neural_compressor.ux.components.configuration_wizard.get_boundary_nodes)": [[380, "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[380, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "get_predefined_configuration() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[381, "neural_compressor.ux.components.configuration_wizard.get_configuration.get_predefined_configuration"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[381, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "update_config_to_machine_specification() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[381, "neural_compressor.ux.components.configuration_wizard.get_configuration.update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard": [[382, "module-neural_compressor.ux.components.configuration_wizard"]], "feeder (class in neural_compressor.ux.components.configuration_wizard.params_feeder)": [[383, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder"]], "get_possible_values() (in module neural_compressor.ux.components.configuration_wizard.params_feeder)": [[383, "neural_compressor.ux.components.configuration_wizard.params_feeder.get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[383, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "pruningconfigparser (class in neural_compressor.ux.components.configuration_wizard.pruning_config_parser)": [[384, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[384, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "dbmanager (class in neural_compressor.ux.components.db_manager.db_manager)": [[385, "neural_compressor.ux.components.db_manager.db_manager.DBManager"]], "neural_compressor.ux.components.db_manager.db_manager": [[385, "module-neural_compressor.ux.components.db_manager.db_manager"]], "benchmark (class in neural_compressor.ux.components.db_manager.db_models.benchmark)": [[386, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[386, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "benchmarkresult (class in neural_compressor.ux.components.db_manager.db_models.benchmark_result)": [[387, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[387, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "dataloader (class in neural_compressor.ux.components.db_manager.db_models.dataloader)": [[388, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.dataloader)": [[388, "neural_compressor.ux.components.db_manager.db_models.dataloader.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[388, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "dataset (class in neural_compressor.ux.components.db_manager.db_models.dataset)": [[389, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[389, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "domain (class in neural_compressor.ux.components.db_manager.db_models.domain)": [[390, "neural_compressor.ux.components.db_manager.db_models.domain.Domain"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain)": [[390, "neural_compressor.ux.components.db_manager.db_models.domain.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[390, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "domainflavour (class in neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[391, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[391, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[391, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "example (class in neural_compressor.ux.components.db_manager.db_models.example)": [[392, "neural_compressor.ux.components.db_manager.db_models.example.Example"]], "neural_compressor.ux.components.db_manager.db_models.example": [[392, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "framework (class in neural_compressor.ux.components.db_manager.db_models.framework)": [[393, "neural_compressor.ux.components.db_manager.db_models.framework.Framework"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.framework)": [[393, "neural_compressor.ux.components.db_manager.db_models.framework.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[393, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[394, "module-neural_compressor.ux.components.db_manager.db_models"]], "metric (class in neural_compressor.ux.components.db_manager.db_models.metric)": [[395, "neural_compressor.ux.components.db_manager.db_models.metric.Metric"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.metric)": [[395, "neural_compressor.ux.components.db_manager.db_models.metric.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[395, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "model (class in neural_compressor.ux.components.db_manager.db_models.model)": [[396, "neural_compressor.ux.components.db_manager.db_models.model.Model"]], "neural_compressor.ux.components.db_manager.db_models.model": [[396, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "optimization (class in neural_compressor.ux.components.db_manager.db_models.optimization)": [[397, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[397, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "optimizationtype (class in neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[398, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[398, "neural_compressor.ux.components.db_manager.db_models.optimization_type.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[398, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "precision (class in neural_compressor.ux.components.db_manager.db_models.precision)": [[399, "neural_compressor.ux.components.db_manager.db_models.precision.Precision"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.precision)": [[399, "neural_compressor.ux.components.db_manager.db_models.precision.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[399, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "profiling (class in neural_compressor.ux.components.db_manager.db_models.profiling)": [[400, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[400, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "profilingresult (class in neural_compressor.ux.components.db_manager.db_models.profiling_result)": [[401, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[401, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "project (class in neural_compressor.ux.components.db_manager.db_models.project)": [[402, "neural_compressor.ux.components.db_manager.db_models.project.Project"]], "neural_compressor.ux.components.db_manager.db_models.project": [[402, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "pruningdetails (class in neural_compressor.ux.components.db_manager.db_models.pruning_details)": [[403, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[403, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "transform (class in neural_compressor.ux.components.db_manager.db_models.transform)": [[404, "neural_compressor.ux.components.db_manager.db_models.transform.Transform"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.transform)": [[404, "neural_compressor.ux.components.db_manager.db_models.transform.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[404, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "tuningdetails (class in neural_compressor.ux.components.db_manager.db_models.tuning_details)": [[405, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[405, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "tuninghistory (class in neural_compressor.ux.components.db_manager.db_models.tuning_history)": [[406, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[406, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[407, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface"]], "before_delete_benchmark_entry() (in module neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[407, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[407, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[408, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[408, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[408, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[408, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[408, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[408, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[408, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.set_database_version"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[409, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[409, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[409, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[409, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[409, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[409, "neural_compressor.ux.components.db_manager.db_operations.db_operations.set_database_version"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface)": [[410, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[410, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface)": [[411, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[411, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.examples_api_interface)": [[412, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[412, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[413, "module-neural_compressor.ux.components.db_manager.db_operations"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.model_api_interface)": [[414, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[414, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface)": [[415, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[415, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface)": [[416, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[416, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.project_api_interface)": [[417, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[417, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[418, "module-neural_compressor.ux.components.db_manager"]], "benchmarkaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[419, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkAddParamsInterface"]], "benchmarkeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[419, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkEditParamsInterface"]], "datasetaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[419, "neural_compressor.ux.components.db_manager.params_interfaces.DatasetAddParamsInterface"]], "diagnosisoptimizationparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[419, "neural_compressor.ux.components.db_manager.params_interfaces.DiagnosisOptimizationParamsInterface"]], "modeladdparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[419, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface"]], "optimizationaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[419, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationAddParamsInterface"]], "optimizationeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[419, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationEditParamsInterface"]], "profilingaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[419, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingAddParamsInterface"]], "profilingeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[419, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingEditParamsInterface"]], "profilingresultaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[419, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingResultAddParamsInterface"]], "tuninghistoryinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[419, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface"]], "tuninghistoryiteminterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[419, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[419, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "get_framework_dataloaders_config() (in module neural_compressor.ux.components.db_manager.utils)": [[420, "neural_compressor.ux.components.db_manager.utils.get_framework_dataloaders_config"]], "get_framework_transforms_config() (in module neural_compressor.ux.components.db_manager.utils)": [[420, "neural_compressor.ux.components.db_manager.utils.get_framework_transforms_config"]], "neural_compressor.ux.components.db_manager.utils": [[420, "module-neural_compressor.ux.components.db_manager.utils"]], "update_dataloaders_params() (in module neural_compressor.ux.components.db_manager.utils)": [[420, "neural_compressor.ux.components.db_manager.utils.update_dataloaders_params"]], "diagnosis (class in neural_compressor.ux.components.diagnosis.diagnosis)": [[421, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[421, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "diagnosisfactory (class in neural_compressor.ux.components.diagnosis.factory)": [[422, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.factory": [[422, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[423, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[424, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "onnxrtdiagnosis (class in neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis)": [[425, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[425, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "opactivation (class in neural_compressor.ux.components.diagnosis.op_details)": [[426, "neural_compressor.ux.components.diagnosis.op_details.OpActivation"]], "opdetails (class in neural_compressor.ux.components.diagnosis.op_details)": [[426, "neural_compressor.ux.components.diagnosis.op_details.OpDetails"]], "oppattern (class in neural_compressor.ux.components.diagnosis.op_details)": [[426, "neural_compressor.ux.components.diagnosis.op_details.OpPattern"]], "opweights (class in neural_compressor.ux.components.diagnosis.op_details)": [[426, "neural_compressor.ux.components.diagnosis.op_details.OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details": [[426, "module-neural_compressor.ux.components.diagnosis.op_details"]], "opentry (class in neural_compressor.ux.components.diagnosis.op_entry)": [[427, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry": [[427, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[428, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "tensorflowdiagnosis (class in neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis)": [[429, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[429, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "create_dir_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[430, "neural_compressor.ux.components.file_browser.file_browser.create_dir_entry"]], "create_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[430, "neural_compressor.ux.components.file_browser.file_browser.create_entry"]], "create_file_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[430, "neural_compressor.ux.components.file_browser.file_browser.create_file_entry"]], "filter_requested_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[430, "neural_compressor.ux.components.file_browser.file_browser.filter_requested_entries"]], "get_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[430, "neural_compressor.ux.components.file_browser.file_browser.get_directory_entries"]], "get_filter_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[430, "neural_compressor.ux.components.file_browser.file_browser.get_filter_value"]], "get_non_hidden_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[430, "neural_compressor.ux.components.file_browser.file_browser.get_non_hidden_directory_entries"]], "get_requested_path() (in module neural_compressor.ux.components.file_browser.file_browser)": [[430, "neural_compressor.ux.components.file_browser.file_browser.get_requested_path"]], "get_setting_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[430, "neural_compressor.ux.components.file_browser.file_browser.get_setting_value"]], "is_dataset_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[430, "neural_compressor.ux.components.file_browser.file_browser.is_dataset_or_directory_entry"]], "is_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[430, "neural_compressor.ux.components.file_browser.file_browser.is_directory_entry"]], "is_model_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[430, "neural_compressor.ux.components.file_browser.file_browser.is_model_or_directory_entry"]], "neural_compressor.ux.components.file_browser.file_browser": [[430, "module-neural_compressor.ux.components.file_browser.file_browser"]], "should_show_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[430, "neural_compressor.ux.components.file_browser.file_browser.should_show_files"]], "should_show_only_model_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[430, "neural_compressor.ux.components.file_browser.file_browser.should_show_only_model_files"]], "sort_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[430, "neural_compressor.ux.components.file_browser.file_browser.sort_entries"]], "neural_compressor.ux.components.file_browser": [[431, "module-neural_compressor.ux.components.file_browser"]], "attribute (class in neural_compressor.ux.components.graph.attribute)": [[432, "neural_compressor.ux.components.graph.attribute.Attribute"]], "neural_compressor.ux.components.graph.attribute": [[432, "module-neural_compressor.ux.components.graph.attribute"]], "collapser (class in neural_compressor.ux.components.graph.collapser)": [[433, "neural_compressor.ux.components.graph.collapser.Collapser"]], "neural_compressor.ux.components.graph.collapser": [[433, "module-neural_compressor.ux.components.graph.collapser"]], "edge (class in neural_compressor.ux.components.graph.edge)": [[434, "neural_compressor.ux.components.graph.edge.Edge"]], "neural_compressor.ux.components.graph.edge": [[434, "module-neural_compressor.ux.components.graph.edge"]], "graph (class in neural_compressor.ux.components.graph.graph)": [[435, "neural_compressor.ux.components.graph.graph.Graph"]], "neural_compressor.ux.components.graph.graph": [[435, "module-neural_compressor.ux.components.graph.graph"]], "graphreader (class in neural_compressor.ux.components.graph.graph_reader)": [[436, "neural_compressor.ux.components.graph.graph_reader.GraphReader"]], "neural_compressor.ux.components.graph.graph_reader": [[436, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[437, "module-neural_compressor.ux.components.graph"]], "groupnode (class in neural_compressor.ux.components.graph.node)": [[438, "neural_compressor.ux.components.graph.node.GroupNode"]], "node (class in neural_compressor.ux.components.graph.node)": [[438, "neural_compressor.ux.components.graph.node.Node"]], "neural_compressor.ux.components.graph.node": [[438, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[439, "module-neural_compressor.ux.components.graph.reader"]], "onnxrtreader (class in neural_compressor.ux.components.graph.reader.onnxrt_reader)": [[440, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[440, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "tensorflowreader (class in neural_compressor.ux.components.graph.reader.tensorflow_reader)": [[441, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[441, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[442, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[443, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[444, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[445, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[446, "module-neural_compressor.ux.components.jobs_management.request"]], "get_default_path() (in module neural_compressor.ux.components.manage_workspace)": [[447, "neural_compressor.ux.components.manage_workspace.get_default_path"]], "neural_compressor.ux.components.manage_workspace": [[447, "module-neural_compressor.ux.components.manage_workspace"]], "domain (class in neural_compressor.ux.components.model.domain)": [[448, "neural_compressor.ux.components.model.domain.Domain"]], "neural_compressor.ux.components.model.domain": [[448, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[449, "module-neural_compressor.ux.components.model"]], "model (class in neural_compressor.ux.components.model.model)": [[450, "neural_compressor.ux.components.model.model.Model"]], "neural_compressor.ux.components.model.model": [[450, "module-neural_compressor.ux.components.model.model"]], "get_model_type() (in module neural_compressor.ux.components.model.model_type_getter)": [[451, "neural_compressor.ux.components.model.model_type_getter.get_model_type"]], "neural_compressor.ux.components.model.model_type_getter": [[451, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[452, "module-neural_compressor.ux.components.model.onnxrt"]], "onnxrtmodel (class in neural_compressor.ux.components.model.onnxrt.model)": [[453, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel"]], "neural_compressor.ux.components.model.onnxrt.model": [[453, "module-neural_compressor.ux.components.model.onnxrt.model"]], "remove_number_of_samples_from_shape() (in module neural_compressor.ux.components.model.onnxrt.model)": [[453, "neural_compressor.ux.components.model.onnxrt.model.remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.pytorch": [[454, "module-neural_compressor.ux.components.model.pytorch"]], "pytorchscriptmodel (class in neural_compressor.ux.components.model.pytorch.model)": [[455, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel"]], "neural_compressor.ux.components.model.pytorch.model": [[455, "module-neural_compressor.ux.components.model.pytorch.model"]], "modelrepository (class in neural_compressor.ux.components.model.repository)": [[456, "neural_compressor.ux.components.model.repository.ModelRepository"]], "neural_compressor.ux.components.model.repository": [[456, "module-neural_compressor.ux.components.model.repository"]], "shape (class in neural_compressor.ux.components.model.shape)": [[457, "neural_compressor.ux.components.model.shape.Shape"]], "neural_compressor.ux.components.model.shape": [[457, "module-neural_compressor.ux.components.model.shape"]], "frozenpbmodel (class in neural_compressor.ux.components.model.tensorflow.frozen_pb)": [[458, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[458, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[459, "module-neural_compressor.ux.components.model.tensorflow"]], "kerasmodel (class in neural_compressor.ux.components.model.tensorflow.keras)": [[460, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel"]], "neural_compressor.ux.components.model.tensorflow.keras": [[460, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "metagraphmodel (class in neural_compressor.ux.components.model.tensorflow.meta_graph)": [[461, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[461, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "tensorflowmodel (class in neural_compressor.ux.components.model.tensorflow.model)": [[462, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.model": [[462, "module-neural_compressor.ux.components.model.tensorflow.model"]], "savedmodelmodel (class in neural_compressor.ux.components.model.tensorflow.saved_model)": [[463, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[463, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "get_input_shape() (in module neural_compressor.ux.components.model.tensorflow.utils)": [[464, "neural_compressor.ux.components.model.tensorflow.utils.get_input_shape"]], "neural_compressor.ux.components.model.tensorflow.utils": [[464, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "download_config() (in module neural_compressor.ux.components.model_zoo.download_config)": [[465, "neural_compressor.ux.components.model_zoo.download_config.download_config"]], "neural_compressor.ux.components.model_zoo.download_config": [[465, "module-neural_compressor.ux.components.model_zoo.download_config"]], "download_model() (in module neural_compressor.ux.components.model_zoo.download_model)": [[466, "neural_compressor.ux.components.model_zoo.download_model.download_model"]], "neural_compressor.ux.components.model_zoo.download_model": [[466, "module-neural_compressor.ux.components.model_zoo.download_model"]], "downloader (class in neural_compressor.ux.components.model_zoo.downloader)": [[467, "neural_compressor.ux.components.model_zoo.downloader.Downloader"]], "neural_compressor.ux.components.model_zoo.downloader": [[467, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[468, "module-neural_compressor.ux.components.model_zoo"]], "check_version() (in module neural_compressor.ux.components.model_zoo.list_models)": [[469, "neural_compressor.ux.components.model_zoo.list_models.check_version"]], "get_available_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[469, "neural_compressor.ux.components.model_zoo.list_models.get_available_models"]], "get_framework_module_name() (in module neural_compressor.ux.components.model_zoo.list_models)": [[469, "neural_compressor.ux.components.model_zoo.list_models.get_framework_module_name"]], "get_installed_frameworks() (in module neural_compressor.ux.components.model_zoo.list_models)": [[469, "neural_compressor.ux.components.model_zoo.list_models.get_installed_frameworks"]], "list_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[469, "neural_compressor.ux.components.model_zoo.list_models.list_models"]], "neural_compressor.ux.components.model_zoo.list_models": [[469, "module-neural_compressor.ux.components.model_zoo.list_models"]], "validate_model_list() (in module neural_compressor.ux.components.model_zoo.list_models)": [[469, "neural_compressor.ux.components.model_zoo.list_models.validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[470, "module-neural_compressor.ux.components.names_mapper"]], "mappingdirection (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[471, "neural_compressor.ux.components.names_mapper.names_mapper.MappingDirection"]], "namesmapper (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[471, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[471, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "check_if_collect_tuning_history() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[472, "neural_compressor.ux.components.optimization.execute_optimization.check_if_collect_tuning_history"]], "execute_optimization() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[472, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization"]], "execute_optimization_pytorch_script() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[472, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_pytorch_script"]], "execute_optimization_regular() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[472, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_regular"]], "neural_compressor.ux.components.optimization.execute_optimization": [[472, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "parse_logs() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[472, "neural_compressor.ux.components.optimization.execute_optimization.parse_logs"]], "parse_model_data_to_bench_names() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[472, "neural_compressor.ux.components.optimization.execute_optimization.parse_model_data_to_bench_names"]], "optimizationfactory (class in neural_compressor.ux.components.optimization.factory)": [[473, "neural_compressor.ux.components.optimization.factory.OptimizationFactory"]], "neural_compressor.ux.components.optimization.factory": [[473, "module-neural_compressor.ux.components.optimization.factory"]], "graphoptimization (class in neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization)": [[474, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[474, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[475, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[476, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[476, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[476, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[476, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[476, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.set_eager_execution"]], "optimizations (class in neural_compressor.ux.components.optimization)": [[477, "neural_compressor.ux.components.optimization.Optimizations"]], "neural_compressor.ux.components.optimization": [[477, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[478, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "mixedprecision (class in neural_compressor.ux.components.optimization.mixed_precision.mixed_precision)": [[479, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[479, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[480, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[480, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[480, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[480, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[480, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[481, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[482, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "optimize_pt_script() (in module neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model)": [[482, "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model.optimize_pt_script"]], "dataloaderinterface (class in neural_compressor.ux.components.optimization.optimization)": [[483, "neural_compressor.ux.components.optimization.optimization.DataloaderInterface"]], "optimization (class in neural_compressor.ux.components.optimization.optimization)": [[483, "neural_compressor.ux.components.optimization.optimization.Optimization"]], "optimizationinterface (class in neural_compressor.ux.components.optimization.optimization)": [[483, "neural_compressor.ux.components.optimization.optimization.OptimizationInterface"]], "neural_compressor.ux.components.optimization.optimization": [[483, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[484, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[485, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "optimize_model() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[485, "neural_compressor.ux.components.optimization.pruning.optimize_model.optimize_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[485, "neural_compressor.ux.components.optimization.pruning.optimize_model.parse_args"]], "pruning (class in neural_compressor.ux.components.optimization.pruning.pruning)": [[486, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[486, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[487, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[488, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[488, "neural_compressor.ux.components.optimization.tune.tune_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[488, "neural_compressor.ux.components.optimization.tune.tune_model.set_eager_execution"]], "tune_model() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[488, "neural_compressor.ux.components.optimization.tune.tune_model.tune_model"]], "accuracycriterion (class in neural_compressor.ux.components.optimization.tune.tuning)": [[489, "neural_compressor.ux.components.optimization.tune.tuning.AccuracyCriterion"]], "tuning (class in neural_compressor.ux.components.optimization.tune.tuning)": [[489, "neural_compressor.ux.components.optimization.tune.tuning.Tuning"]], "tuningdetails (class in neural_compressor.ux.components.optimization.tune.tuning)": [[489, "neural_compressor.ux.components.optimization.tune.tuning.TuningDetails"]], "neural_compressor.ux.components.optimization.tune.tuning": [[489, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "tuninghistory (class in neural_compressor.ux.components.optimization.tuning_history)": [[490, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory"]], "watcher (class in neural_compressor.ux.components.optimization.tuning_history)": [[490, "neural_compressor.ux.components.optimization.tuning_history.Watcher"]], "neural_compressor.ux.components.optimization.tuning_history": [[490, "module-neural_compressor.ux.components.optimization.tuning_history"]], "tuning_history() (in module neural_compressor.ux.components.optimization.tuning_history)": [[490, "neural_compressor.ux.components.optimization.tuning_history.tuning_history"]], "tuning_history_path() (in module neural_compressor.ux.components.optimization.tuning_history)": [[490, "neural_compressor.ux.components.optimization.tuning_history.tuning_history_path"]], "execute_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[491, "neural_compressor.ux.components.profiling.execute_profiling.execute_profiling"]], "execute_real_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[491, "neural_compressor.ux.components.profiling.execute_profiling.execute_real_profiling"]], "neural_compressor.ux.components.profiling.execute_profiling": [[491, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.factory)": [[492, "neural_compressor.ux.components.profiling.factory.ProfilerFactory"]], "neural_compressor.ux.components.profiling.factory": [[492, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[493, "module-neural_compressor.ux.components.profiling"]], "load_profiling_details() (in module neural_compressor.ux.components.profiling.profile_model)": [[494, "neural_compressor.ux.components.profiling.profile_model.load_profiling_details"]], "neural_compressor.ux.components.profiling.profile_model": [[494, "module-neural_compressor.ux.components.profiling.profile_model"]], "parse_args() (in module neural_compressor.ux.components.profiling.profile_model)": [[494, "neural_compressor.ux.components.profiling.profile_model.parse_args"]], "profiler (class in neural_compressor.ux.components.profiling.profiler)": [[495, "neural_compressor.ux.components.profiling.profiler.Profiler"]], "neural_compressor.ux.components.profiling.profiler": [[495, "module-neural_compressor.ux.components.profiling.profiler"]], "dataloaderinterface (class in neural_compressor.ux.components.profiling.profiling)": [[496, "neural_compressor.ux.components.profiling.profiling.DataloaderInterface"]], "profiling (class in neural_compressor.ux.components.profiling.profiling)": [[496, "neural_compressor.ux.components.profiling.profiling.Profiling"]], "neural_compressor.ux.components.profiling.profiling": [[496, "module-neural_compressor.ux.components.profiling.profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.tensorflow_profiler.factory)": [[497, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[497, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[498, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "profiler (class in neural_compressor.ux.components.profiling.tensorflow_profiler.profiler)": [[499, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[499, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "delete_assign() (in module neural_compressor.ux.components.profiling.tensorflow_profiler.utils)": [[500, "neural_compressor.ux.components.profiling.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[500, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "main() (in module neural_compressor.ux.inc_bench)": [[501, "neural_compressor.ux.inc_bench.main"]], "neural_compressor.ux.inc_bench": [[501, "module-neural_compressor.ux.inc_bench"]], "prepare_environment() (in module neural_compressor.ux.inc_bench)": [[501, "neural_compressor.ux.inc_bench.prepare_environment"]], "neural_compressor.ux": [[502, "module-neural_compressor.ux"]], "domainflavours (class in neural_compressor.ux.utils.consts)": [[503, "neural_compressor.ux.utils.consts.DomainFlavours"]], "domains (class in neural_compressor.ux.utils.consts)": [[503, "neural_compressor.ux.utils.consts.Domains"]], "executionstatus (class in neural_compressor.ux.utils.consts)": [[503, "neural_compressor.ux.utils.consts.ExecutionStatus"]], "frameworks (class in neural_compressor.ux.utils.consts)": [[503, "neural_compressor.ux.utils.consts.Frameworks"]], "optimizationtypes (class in neural_compressor.ux.utils.consts)": [[503, "neural_compressor.ux.utils.consts.OptimizationTypes"]], "precisions (class in neural_compressor.ux.utils.consts)": [[503, "neural_compressor.ux.utils.consts.Precisions"]], "strategies (class in neural_compressor.ux.utils.consts)": [[503, "neural_compressor.ux.utils.consts.Strategies"]], "neural_compressor.ux.utils.consts": [[503, "module-neural_compressor.ux.utils.consts"]], "environment (class in neural_compressor.ux.utils.environment)": [[504, "neural_compressor.ux.utils.environment.Environment"]], "neural_compressor.ux.utils.environment": [[504, "module-neural_compressor.ux.utils.environment"]], "accessdeniedexception": [[505, "neural_compressor.ux.utils.exceptions.AccessDeniedException"]], "clienterrorexception": [[505, "neural_compressor.ux.utils.exceptions.ClientErrorException"]], "internalexception": [[505, "neural_compressor.ux.utils.exceptions.InternalException"]], "notfoundexception": [[505, "neural_compressor.ux.utils.exceptions.NotFoundException"]], "neural_compressor.ux.utils.exceptions": [[505, "module-neural_compressor.ux.utils.exceptions"]], "executor (class in neural_compressor.ux.utils.executor)": [[506, "neural_compressor.ux.utils.executor.Executor"]], "neural_compressor.ux.utils.executor": [[506, "module-neural_compressor.ux.utils.executor"]], "expiringdict (class in neural_compressor.ux.utils.expiring_dict)": [[507, "neural_compressor.ux.utils.expiring_dict.ExpiringDict"]], "expiringdictitem (class in neural_compressor.ux.utils.expiring_dict)": [[507, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem"]], "neural_compressor.ux.utils.expiring_dict": [[507, "module-neural_compressor.ux.utils.expiring_dict"]], "githubinfo (class in neural_compressor.ux.utils.github_info)": [[508, "neural_compressor.ux.utils.github_info.GithubInfo"]], "neural_compressor.ux.utils.github_info": [[508, "module-neural_compressor.ux.utils.github_info"]], "hwinfo (class in neural_compressor.ux.utils.hw_info)": [[509, "neural_compressor.ux.utils.hw_info.HWInfo"]], "get_bios_version() (in module neural_compressor.ux.utils.hw_info)": [[509, "neural_compressor.ux.utils.hw_info.get_bios_version"]], "get_distribution() (in module neural_compressor.ux.utils.hw_info)": [[509, "neural_compressor.ux.utils.hw_info.get_distribution"]], "get_framework_dependency_info() (in module neural_compressor.ux.utils.hw_info)": [[509, "neural_compressor.ux.utils.hw_info.get_framework_dependency_info"]], "get_framework_info() (in module neural_compressor.ux.utils.hw_info)": [[509, "neural_compressor.ux.utils.hw_info.get_framework_info"]], "get_kernel_version() (in module neural_compressor.ux.utils.hw_info)": [[509, "neural_compressor.ux.utils.hw_info.get_kernel_version"]], "get_number_of_sockets() (in module neural_compressor.ux.utils.hw_info)": [[509, "neural_compressor.ux.utils.hw_info.get_number_of_sockets"]], "is_turbo_boost_enabled() (in module neural_compressor.ux.utils.hw_info)": [[509, "neural_compressor.ux.utils.hw_info.is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info": [[509, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[510, "module-neural_compressor.ux.utils"]], "jsonserializer (class in neural_compressor.ux.utils.json_serializer)": [[511, "neural_compressor.ux.utils.json_serializer.JsonSerializer"]], "neural_compressor.ux.utils.json_serializer": [[511, "module-neural_compressor.ux.utils.json_serializer"]], "change_log_level() (in module neural_compressor.ux.utils.logger)": [[512, "neural_compressor.ux.utils.logger.change_log_level"]], "neural_compressor.ux.utils.logger": [[512, "module-neural_compressor.ux.utils.logger"]], "accuracyparser (class in neural_compressor.ux.utils.parser)": [[513, "neural_compressor.ux.utils.parser.AccuracyParser"]], "benchmarkparserfactory (class in neural_compressor.ux.utils.parser)": [[513, "neural_compressor.ux.utils.parser.BenchmarkParserFactory"]], "optimizationparser (class in neural_compressor.ux.utils.parser)": [[513, "neural_compressor.ux.utils.parser.OptimizationParser"]], "parser (class in neural_compressor.ux.utils.parser)": [[513, "neural_compressor.ux.utils.parser.Parser"]], "performanceparser (class in neural_compressor.ux.utils.parser)": [[513, "neural_compressor.ux.utils.parser.PerformanceParser"]], "profilingparser (class in neural_compressor.ux.utils.parser)": [[513, "neural_compressor.ux.utils.parser.ProfilingParser"]], "neural_compressor.ux.utils.parser": [[513, "module-neural_compressor.ux.utils.parser"]], "proc (class in neural_compressor.ux.utils.proc)": [[514, "neural_compressor.ux.utils.proc.Proc"]], "neural_compressor.ux.utils.proc": [[514, "module-neural_compressor.ux.utils.proc"]], "ncprocesses (class in neural_compressor.ux.utils.processes)": [[515, "neural_compressor.ux.utils.processes.NCProcesses"]], "neural_compressor.ux.utils.processes": [[515, "module-neural_compressor.ux.utils.processes"]], "singleton (class in neural_compressor.ux.utils.singleton)": [[516, "neural_compressor.ux.utils.singleton.Singleton"]], "neural_compressor.ux.utils.singleton": [[516, "module-neural_compressor.ux.utils.singleton"]], "get_status_update_function() (in module neural_compressor.ux.utils.status_updates)": [[517, "neural_compressor.ux.utils.status_updates.get_status_update_function"]], "neural_compressor.ux.utils.status_updates": [[517, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[518, "module-neural_compressor.ux.utils.templates"]], "metric (class in neural_compressor.ux.utils.templates.metric)": [[519, "neural_compressor.ux.utils.templates.metric.Metric"]], "neural_compressor.ux.utils.templates.metric": [[519, "module-neural_compressor.ux.utils.templates.metric"]], "workdir (class in neural_compressor.ux.utils.templates.workdir)": [[520, "neural_compressor.ux.utils.templates.workdir.Workdir"]], "neural_compressor.ux.utils.templates.workdir": [[520, "module-neural_compressor.ux.utils.templates.workdir"]], "are_archive_filenames_valid() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.are_archive_filenames_valid"]], "check_module() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.check_module"]], "deprecated() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.deprecated"]], "determine_ip() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.determine_ip"]], "export_to_csv() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.export_to_csv"]], "filter_transforms() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.filter_transforms"]], "get_dataset_path() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.get_dataset_path"]], "get_default_pruning_config_path() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.get_default_pruning_config_path"]], "get_file_extension() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.get_file_extension"]], "get_framework_from_path() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.get_framework_from_path"]], "get_height_width_from_size() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.get_height_width_from_size"]], "get_metrics_dict() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.get_metrics_dict"]], "get_model_zoo_config_path() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.get_model_zoo_config_path"]], "get_model_zoo_model_path() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.get_model_zoo_model_path"]], "get_module_version() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.get_module_version"]], "get_predefined_config_path() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.get_predefined_config_path"]], "get_shape_from_transforms() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.get_shape_from_transforms"]], "get_size() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.get_size"]], "is_dataset_file() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.is_dataset_file"]], "is_development_env() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.is_development_env"]], "is_hidden() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.is_hidden"]], "load_dataloader_config() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.load_dataloader_config"]], "load_help_nc_params() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.load_help_nc_params"]], "load_metrics_config() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.load_metrics_config"]], "load_model_config() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.load_model_config"]], "load_model_wise_params() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.load_model_wise_params"]], "load_precisions_config() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.load_precisions_config"]], "load_pruning_details_config() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.load_pruning_details_config"]], "load_transforms_config() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.load_transforms_config"]], "load_transforms_filter_config() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.load_transforms_filter_config"]], "neural_compressor.ux.utils.utils": [[521, "module-neural_compressor.ux.utils.utils"]], "normalize_domain() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.normalize_domain"]], "normalize_framework() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.normalize_framework"]], "normalize_string() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.normalize_string"]], "parse_bool_value() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.parse_bool_value"]], "parse_to_float_list() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.parse_to_float_list"]], "parse_to_string_list() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.parse_to_string_list"]], "parse_version() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.parse_version"]], "release_tag() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.release_tag"]], "replace_with_values() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.replace_with_values"]], "safe_extract_archive() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.safe_extract_archive"]], "verify_file_path() (in module neural_compressor.ux.utils.utils)": [[521, "neural_compressor.ux.utils.utils.verify_file_path"]], "config (class in neural_compressor.ux.utils.workload.config)": [[522, "neural_compressor.ux.utils.workload.config.Config"]], "neural_compressor.ux.utils.workload.config": [[522, "module-neural_compressor.ux.utils.workload.config"]], "dataloader (class in neural_compressor.ux.utils.workload.dataloader)": [[523, "neural_compressor.ux.utils.workload.dataloader.Dataloader"]], "dataset (class in neural_compressor.ux.utils.workload.dataloader)": [[523, "neural_compressor.ux.utils.workload.dataloader.Dataset"]], "filter (class in neural_compressor.ux.utils.workload.dataloader)": [[523, "neural_compressor.ux.utils.workload.dataloader.Filter"]], "labelbalance (class in neural_compressor.ux.utils.workload.dataloader)": [[523, "neural_compressor.ux.utils.workload.dataloader.LabelBalance"]], "transform (class in neural_compressor.ux.utils.workload.dataloader)": [[523, "neural_compressor.ux.utils.workload.dataloader.Transform"]], "neural_compressor.ux.utils.workload.dataloader": [[523, "module-neural_compressor.ux.utils.workload.dataloader"]], "accuracy (class in neural_compressor.ux.utils.workload.evaluation)": [[524, "neural_compressor.ux.utils.workload.evaluation.Accuracy"]], "configs (class in neural_compressor.ux.utils.workload.evaluation)": [[524, "neural_compressor.ux.utils.workload.evaluation.Configs"]], "evaluation (class in neural_compressor.ux.utils.workload.evaluation)": [[524, "neural_compressor.ux.utils.workload.evaluation.Evaluation"]], "metric (class in neural_compressor.ux.utils.workload.evaluation)": [[524, "neural_compressor.ux.utils.workload.evaluation.Metric"]], "performance (class in neural_compressor.ux.utils.workload.evaluation)": [[524, "neural_compressor.ux.utils.workload.evaluation.Performance"]], "postprocess (class in neural_compressor.ux.utils.workload.evaluation)": [[524, "neural_compressor.ux.utils.workload.evaluation.Postprocess"]], "postprocessschema (class in neural_compressor.ux.utils.workload.evaluation)": [[524, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema"]], "neural_compressor.ux.utils.workload.evaluation": [[524, "module-neural_compressor.ux.utils.workload.evaluation"]], "graphoptimization (class in neural_compressor.ux.utils.workload.graph_optimization)": [[525, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization": [[525, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[526, "module-neural_compressor.ux.utils.workload"]], "mixedprecision (class in neural_compressor.ux.utils.workload.mixed_precision)": [[527, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision": [[527, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "model (class in neural_compressor.ux.utils.workload.model)": [[528, "neural_compressor.ux.utils.workload.model.Model"]], "neural_compressor.ux.utils.workload.model": [[528, "module-neural_compressor.ux.utils.workload.model"]], "adamoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[529, "neural_compressor.ux.utils.workload.pruning.AdamOptimizer"]], "adamwoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[529, "neural_compressor.ux.utils.workload.pruning.AdamWOptimizer"]], "approach (class in neural_compressor.ux.utils.workload.pruning)": [[529, "neural_compressor.ux.utils.workload.pruning.Approach"]], "criterion (class in neural_compressor.ux.utils.workload.pruning)": [[529, "neural_compressor.ux.utils.workload.pruning.Criterion"]], "crossentropylosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[529, "neural_compressor.ux.utils.workload.pruning.CrossEntropyLossCriterion"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[529, "neural_compressor.ux.utils.workload.pruning.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationlosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[529, "neural_compressor.ux.utils.workload.pruning.KnowledgeDistillationLossCriterion"]], "optimizer (class in neural_compressor.ux.utils.workload.pruning)": [[529, "neural_compressor.ux.utils.workload.pruning.Optimizer"]], "pruning (class in neural_compressor.ux.utils.workload.pruning)": [[529, "neural_compressor.ux.utils.workload.pruning.Pruning"]], "sgdoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[529, "neural_compressor.ux.utils.workload.pruning.SGDOptimizer"]], "selfknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[529, "neural_compressor.ux.utils.workload.pruning.SelfKnowledgeDistillationLoss"]], "sparsecategoricalcrossentropycriterion (class in neural_compressor.ux.utils.workload.pruning)": [[529, "neural_compressor.ux.utils.workload.pruning.SparseCategoricalCrossentropyCriterion"]], "train (class in neural_compressor.ux.utils.workload.pruning)": [[529, "neural_compressor.ux.utils.workload.pruning.Train"]], "weightcompressionapproach (class in neural_compressor.ux.utils.workload.pruning)": [[529, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach"]], "neural_compressor.ux.utils.workload.pruning": [[529, "module-neural_compressor.ux.utils.workload.pruning"]], "parse_dict_value_to_float() (in module neural_compressor.ux.utils.workload.pruning)": [[529, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_float"]], "parse_dict_value_to_int() (in module neural_compressor.ux.utils.workload.pruning)": [[529, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_int"]], "advance (class in neural_compressor.ux.utils.workload.quantization)": [[530, "neural_compressor.ux.utils.workload.quantization.Advance"]], "calibration (class in neural_compressor.ux.utils.workload.quantization)": [[530, "neural_compressor.ux.utils.workload.quantization.Calibration"]], "quantization (class in neural_compressor.ux.utils.workload.quantization)": [[530, "neural_compressor.ux.utils.workload.quantization.Quantization"]], "wiseconfig (class in neural_compressor.ux.utils.workload.quantization)": [[530, "neural_compressor.ux.utils.workload.quantization.WiseConfig"]], "wiseconfigdetails (class in neural_compressor.ux.utils.workload.quantization)": [[530, "neural_compressor.ux.utils.workload.quantization.WiseConfigDetails"]], "neural_compressor.ux.utils.workload.quantization": [[530, "module-neural_compressor.ux.utils.workload.quantization"]], "acccriterion (class in neural_compressor.ux.utils.workload.tuning)": [[531, "neural_compressor.ux.utils.workload.tuning.AccCriterion"]], "diagnosis (class in neural_compressor.ux.utils.workload.tuning)": [[531, "neural_compressor.ux.utils.workload.tuning.Diagnosis"]], "exitpolicy (class in neural_compressor.ux.utils.workload.tuning)": [[531, "neural_compressor.ux.utils.workload.tuning.ExitPolicy"]], "multiobjectives (class in neural_compressor.ux.utils.workload.tuning)": [[531, "neural_compressor.ux.utils.workload.tuning.MultiObjectives"]], "strategy (class in neural_compressor.ux.utils.workload.tuning)": [[531, "neural_compressor.ux.utils.workload.tuning.Strategy"]], "tuning (class in neural_compressor.ux.utils.workload.tuning)": [[531, "neural_compressor.ux.utils.workload.tuning.Tuning"]], "workspace (class in neural_compressor.ux.utils.workload.tuning)": [[531, "neural_compressor.ux.utils.workload.tuning.Workspace"]], "neural_compressor.ux.utils.workload.tuning": [[531, "module-neural_compressor.ux.utils.workload.tuning"]], "float_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[532, "neural_compressor.ux.utils.yaml_utils.float_representer"]], "neural_compressor.ux.utils.yaml_utils": [[532, "module-neural_compressor.ux.utils.yaml_utils"]], "pruner_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[532, "neural_compressor.ux.utils.yaml_utils.pruner_representer"]], "message (class in neural_compressor.ux.web.communication)": [[533, "neural_compressor.ux.web.communication.Message"]], "messagequeue (class in neural_compressor.ux.web.communication)": [[533, "neural_compressor.ux.web.communication.MessageQueue"]], "request (class in neural_compressor.ux.web.communication)": [[533, "neural_compressor.ux.web.communication.Request"]], "response (class in neural_compressor.ux.web.communication)": [[533, "neural_compressor.ux.web.communication.Response"]], "create_simple_response() (in module neural_compressor.ux.web.communication)": [[533, "neural_compressor.ux.web.communication.create_simple_response"]], "neural_compressor.ux.web.communication": [[533, "module-neural_compressor.ux.web.communication"]], "configuration (class in neural_compressor.ux.web.configuration)": [[534, "neural_compressor.ux.web.configuration.Configuration"]], "neural_compressor.ux.web.configuration": [[534, "module-neural_compressor.ux.web.configuration"]], "servicenotfoundexception": [[535, "neural_compressor.ux.web.exceptions.ServiceNotFoundException"]], "neural_compressor.ux.web.exceptions": [[535, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[536, "module-neural_compressor.ux.web"]], "deferredroutingdefinition (class in neural_compressor.ux.web.router)": [[537, "neural_compressor.ux.web.router.DeferredRoutingDefinition"]], "deferredsubprocessroutingdefinition (class in neural_compressor.ux.web.router)": [[537, "neural_compressor.ux.web.router.DeferredSubprocessRoutingDefinition"]], "realtimeroutingdefinition (class in neural_compressor.ux.web.router)": [[537, "neural_compressor.ux.web.router.RealtimeRoutingDefinition"]], "router (class in neural_compressor.ux.web.router)": [[537, "neural_compressor.ux.web.router.Router"]], "routingdefinition (class in neural_compressor.ux.web.router)": [[537, "neural_compressor.ux.web.router.RoutingDefinition"]], "find_pattern_in_graph() (in module neural_compressor.ux.web.router)": [[537, "neural_compressor.ux.web.router.find_pattern_in_graph"]], "get_model_graph() (in module neural_compressor.ux.web.router)": [[537, "neural_compressor.ux.web.router.get_model_graph"]], "get_system_info() (in module neural_compressor.ux.web.router)": [[537, "neural_compressor.ux.web.router.get_system_info"]], "neural_compressor.ux.web.router": [[537, "module-neural_compressor.ux.web.router"]], "allow_api_call() (in module neural_compressor.ux.web.server)": [[538, "neural_compressor.ux.web.server.allow_api_call"]], "block_iframe() (in module neural_compressor.ux.web.server)": [[538, "neural_compressor.ux.web.server.block_iframe"]], "block_sniffing() (in module neural_compressor.ux.web.server)": [[538, "neural_compressor.ux.web.server.block_sniffing"]], "build_parameters() (in module neural_compressor.ux.web.server)": [[538, "neural_compressor.ux.web.server.build_parameters"]], "disable_cache() (in module neural_compressor.ux.web.server)": [[538, "neural_compressor.ux.web.server.disable_cache"]], "get_tls_args() (in module neural_compressor.ux.web.server)": [[538, "neural_compressor.ux.web.server.get_tls_args"]], "handle_api_call() (in module neural_compressor.ux.web.server)": [[538, "neural_compressor.ux.web.server.handle_api_call"]], "neural_compressor.ux.web.server": [[538, "module-neural_compressor.ux.web.server"]], "page_not_found() (in module neural_compressor.ux.web.server)": [[538, "neural_compressor.ux.web.server.page_not_found"]], "require_api_token() (in module neural_compressor.ux.web.server)": [[538, "neural_compressor.ux.web.server.require_api_token"]], "root() (in module neural_compressor.ux.web.server)": [[538, "neural_compressor.ux.web.server.root"]], "run_server() (in module neural_compressor.ux.web.server)": [[538, "neural_compressor.ux.web.server.run_server"]], "web_socket_publisher() (in module neural_compressor.ux.web.server)": [[538, "neural_compressor.ux.web.server.web_socket_publisher"]], "benchmarkservice (class in neural_compressor.ux.web.service.benchmark)": [[539, "neural_compressor.ux.web.service.benchmark.BenchmarkService"]], "neural_compressor.ux.web.service.benchmark": [[539, "module-neural_compressor.ux.web.service.benchmark"]], "historysnapshotparser (class in neural_compressor.ux.web.service.history_snapshot_parser)": [[540, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[540, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[541, "module-neural_compressor.ux.web.service"]], "modelservice (class in neural_compressor.ux.web.service.model)": [[542, "neural_compressor.ux.web.service.model.ModelService"]], "neural_compressor.ux.web.service.model": [[542, "module-neural_compressor.ux.web.service.model"]], "optimizationservice (class in neural_compressor.ux.web.service.optimization)": [[543, "neural_compressor.ux.web.service.optimization.OptimizationService"]], "neural_compressor.ux.web.service.optimization": [[543, "module-neural_compressor.ux.web.service.optimization"]], "profilingservice (class in neural_compressor.ux.web.service.profiling)": [[544, "neural_compressor.ux.web.service.profiling.ProfilingService"]], "neural_compressor.ux.web.service.profiling": [[544, "module-neural_compressor.ux.web.service.profiling"]], "requestdataprocessor (class in neural_compressor.ux.web.service.request_data_processor)": [[545, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor"]], "neural_compressor.ux.web.service.request_data_processor": [[545, "module-neural_compressor.ux.web.service.request_data_processor"]], "responsegenerator (class in neural_compressor.ux.web.service.response_generator)": [[546, "neural_compressor.ux.web.service.response_generator.ResponseGenerator"]], "neural_compressor.ux.web.service.response_generator": [[546, "module-neural_compressor.ux.web.service.response_generator"]], "workloadservice (class in neural_compressor.ux.web.service.workload)": [[547, "neural_compressor.ux.web.service.workload.WorkloadService"]], "neural_compressor.ux.web.service.workload": [[547, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[548, "module-neural_compressor.version"]]}})