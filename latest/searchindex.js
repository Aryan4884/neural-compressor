Search.setIndex({"docnames": ["autoapi/644ec953a7dc_pruning_support/index", "autoapi/6ece06672ed3_v1_14/index", "autoapi/6f0d0f71d92e_v1_13/index", "autoapi/9e89549a08c8_v1_11/index", "autoapi/block_mask/index", "autoapi/env/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/export/utils/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index", "autoapi/neural_compressor/experimental/nas/dynast/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/modules_supernetwork/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_interface/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_supernetwork/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/index", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index", "autoapi/neural_compressor/ux/components/configuration_wizard/index", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index", "autoapi/neural_compressor/ux/components/db_manager/utils/index", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/factory/index", "autoapi/neural_compressor/ux/components/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index", "autoapi/neural_compressor/ux/components/file_browser/index", "autoapi/neural_compressor/ux/components/graph/attribute/index", "autoapi/neural_compressor/ux/components/graph/collapser/index", "autoapi/neural_compressor/ux/components/graph/edge/index", "autoapi/neural_compressor/ux/components/graph/graph/index", "autoapi/neural_compressor/ux/components/graph/graph_reader/index", "autoapi/neural_compressor/ux/components/graph/index", "autoapi/neural_compressor/ux/components/graph/node/index", "autoapi/neural_compressor/ux/components/graph/reader/index", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index", "autoapi/neural_compressor/ux/components/index", "autoapi/neural_compressor/ux/components/jobs_management/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index", "autoapi/neural_compressor/ux/components/jobs_management/request/index", "autoapi/neural_compressor/ux/components/manage_workspace/index", "autoapi/neural_compressor/ux/components/model/domain/index", "autoapi/neural_compressor/ux/components/model/index", "autoapi/neural_compressor/ux/components/model/model/index", "autoapi/neural_compressor/ux/components/model/model_type_getter/index", "autoapi/neural_compressor/ux/components/model/onnxrt/index", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index", "autoapi/neural_compressor/ux/components/model/pytorch/index", "autoapi/neural_compressor/ux/components/model/pytorch/model/index", "autoapi/neural_compressor/ux/components/model/repository/index", "autoapi/neural_compressor/ux/components/model/shape/index", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index", "autoapi/neural_compressor/ux/components/model/tensorflow/index", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index", "autoapi/neural_compressor/ux/components/model_zoo/index", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index", "autoapi/neural_compressor/ux/components/names_mapper/index", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index", "autoapi/neural_compressor/ux/components/optimization/factory/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/optimization/index", "autoapi/neural_compressor/ux/components/optimization/pruning/index", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index", "autoapi/neural_compressor/ux/components/optimization/tune/index", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index", "autoapi/neural_compressor/ux/components/profiling/factory/index", "autoapi/neural_compressor/ux/components/profiling/index", "autoapi/neural_compressor/ux/components/profiling/profile_model/index", "autoapi/neural_compressor/ux/components/profiling/profiler/index", "autoapi/neural_compressor/ux/components/profiling/profiling/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index", "autoapi/neural_compressor/ux/inc_bench/index", "autoapi/neural_compressor/ux/index", "autoapi/neural_compressor/ux/utils/consts/index", "autoapi/neural_compressor/ux/utils/environment/index", "autoapi/neural_compressor/ux/utils/exceptions/index", "autoapi/neural_compressor/ux/utils/executor/index", "autoapi/neural_compressor/ux/utils/expiring_dict/index", "autoapi/neural_compressor/ux/utils/github_info/index", "autoapi/neural_compressor/ux/utils/hw_info/index", "autoapi/neural_compressor/ux/utils/index", "autoapi/neural_compressor/ux/utils/json_serializer/index", "autoapi/neural_compressor/ux/utils/logger/index", "autoapi/neural_compressor/ux/utils/parser/index", "autoapi/neural_compressor/ux/utils/proc/index", "autoapi/neural_compressor/ux/utils/processes/index", "autoapi/neural_compressor/ux/utils/singleton/index", "autoapi/neural_compressor/ux/utils/status_updates/index", "autoapi/neural_compressor/ux/utils/templates/index", "autoapi/neural_compressor/ux/utils/templates/metric/index", "autoapi/neural_compressor/ux/utils/templates/workdir/index", "autoapi/neural_compressor/ux/utils/utils/index", "autoapi/neural_compressor/ux/utils/workload/config/index", "autoapi/neural_compressor/ux/utils/workload/dataloader/index", "autoapi/neural_compressor/ux/utils/workload/evaluation/index", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index", "autoapi/neural_compressor/ux/utils/workload/index", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index", "autoapi/neural_compressor/ux/utils/workload/model/index", "autoapi/neural_compressor/ux/utils/workload/pruning/index", "autoapi/neural_compressor/ux/utils/workload/quantization/index", "autoapi/neural_compressor/ux/utils/workload/tuning/index", "autoapi/neural_compressor/ux/utils/yaml_utils/index", "autoapi/neural_compressor/ux/web/communication/index", "autoapi/neural_compressor/ux/web/configuration/index", "autoapi/neural_compressor/ux/web/exceptions/index", "autoapi/neural_compressor/ux/web/index", "autoapi/neural_compressor/ux/web/router/index", "autoapi/neural_compressor/ux/web/server/index", "autoapi/neural_compressor/ux/web/service/benchmark/index", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index", "autoapi/neural_compressor/ux/web/service/index", "autoapi/neural_compressor/ux/web/service/model/index", "autoapi/neural_compressor/ux/web/service/optimization/index", "autoapi/neural_compressor/ux/web/service/profiling/index", "autoapi/neural_compressor/ux/web/service/request_data_processor/index", "autoapi/neural_compressor/ux/web/service/response_generator/index", "autoapi/neural_compressor/ux/web/service/workload/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/adaptor/torch_utils/bf16_convert", "docs/source/api-doc/adaptor/torch_utils/hawq_metric", "docs/source/api-doc/adaptor/torch_utils/onnx", "docs/source/api-doc/adaptor/torch_utils/symbolic_trace", "docs/source/api-doc/adaptor/torch_utils/util", "docs/source/api-doc/algorithm", "docs/source/api-doc/apis", "docs/source/api-doc/basic_api", "docs/source/api-doc/basic_api/benchmark", "docs/source/api-doc/basic_api/config", "docs/source/api-doc/basic_api/mix_precision", "docs/source/api-doc/basic_api/objective", "docs/source/api-doc/basic_api/quantization", "docs/source/api-doc/basic_api/training", "docs/source/api-doc/common", "docs/source/api-doc/common/benchmark", "docs/source/api-doc/common/bleu", "docs/source/api-doc/common/criterion", "docs/source/api-doc/common/data", "docs/source/api-doc/common/data/dataloader", "docs/source/api-doc/common/data/datasets", "docs/source/api-doc/common/data/transforms", "docs/source/api-doc/common/metric", "docs/source/api-doc/common/model", "docs/source/api-doc/common/optimizer", "docs/source/api-doc/component", "docs/source/api-doc/component/Distillation", "docs/source/api-doc/component/MixedPrecision", "docs/source/api-doc/component/ModelConversion", "docs/source/api-doc/component/Nas", "docs/source/api-doc/component/Pruning", "docs/source/api-doc/component/Quantization", "docs/source/api-doc/component/Scheduler", "docs/source/api-doc/contrib", "docs/source/api-doc/model", "docs/source/api-doc/pythonic", "docs/source/api-doc/strategy", "docs/source/api-doc/strategy/strategy", "docs/source/api-doc/utils", "docs/source/bench", "docs/source/benchmark", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/objective", "docs/source/orchestration", "docs/source/platform_configuration", "docs/source/pruning", "docs/source/pruning_details", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/644ec953a7dc_pruning_support/index.rst", "autoapi/6ece06672ed3_v1_14/index.rst", "autoapi/6f0d0f71d92e_v1_13/index.rst", "autoapi/9e89549a08c8_v1_11/index.rst", "autoapi/block_mask/index.rst", "autoapi/env/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/export/utils/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/modules_supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_interface/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index.rst", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/index.rst", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index.rst", "autoapi/neural_compressor/ux/components/db_manager/utils/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/factory/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index.rst", "autoapi/neural_compressor/ux/components/file_browser/index.rst", "autoapi/neural_compressor/ux/components/graph/attribute/index.rst", "autoapi/neural_compressor/ux/components/graph/collapser/index.rst", "autoapi/neural_compressor/ux/components/graph/edge/index.rst", "autoapi/neural_compressor/ux/components/graph/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/graph_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/node/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index.rst", "autoapi/neural_compressor/ux/components/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/request/index.rst", "autoapi/neural_compressor/ux/components/manage_workspace/index.rst", "autoapi/neural_compressor/ux/components/model/domain/index.rst", "autoapi/neural_compressor/ux/components/model/index.rst", "autoapi/neural_compressor/ux/components/model/model/index.rst", "autoapi/neural_compressor/ux/components/model/model_type_getter/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/model/index.rst", "autoapi/neural_compressor/ux/components/model/repository/index.rst", "autoapi/neural_compressor/ux/components/model/shape/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/factory/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/profile_model/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/ux/inc_bench/index.rst", "autoapi/neural_compressor/ux/index.rst", "autoapi/neural_compressor/ux/utils/consts/index.rst", "autoapi/neural_compressor/ux/utils/environment/index.rst", "autoapi/neural_compressor/ux/utils/exceptions/index.rst", "autoapi/neural_compressor/ux/utils/executor/index.rst", "autoapi/neural_compressor/ux/utils/expiring_dict/index.rst", "autoapi/neural_compressor/ux/utils/github_info/index.rst", "autoapi/neural_compressor/ux/utils/hw_info/index.rst", "autoapi/neural_compressor/ux/utils/index.rst", "autoapi/neural_compressor/ux/utils/json_serializer/index.rst", "autoapi/neural_compressor/ux/utils/logger/index.rst", "autoapi/neural_compressor/ux/utils/parser/index.rst", "autoapi/neural_compressor/ux/utils/proc/index.rst", "autoapi/neural_compressor/ux/utils/processes/index.rst", "autoapi/neural_compressor/ux/utils/singleton/index.rst", "autoapi/neural_compressor/ux/utils/status_updates/index.rst", "autoapi/neural_compressor/ux/utils/templates/index.rst", "autoapi/neural_compressor/ux/utils/templates/metric/index.rst", "autoapi/neural_compressor/ux/utils/templates/workdir/index.rst", "autoapi/neural_compressor/ux/utils/utils/index.rst", "autoapi/neural_compressor/ux/utils/workload/config/index.rst", "autoapi/neural_compressor/ux/utils/workload/dataloader/index.rst", "autoapi/neural_compressor/ux/utils/workload/evaluation/index.rst", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index.rst", "autoapi/neural_compressor/ux/utils/workload/index.rst", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index.rst", "autoapi/neural_compressor/ux/utils/workload/model/index.rst", "autoapi/neural_compressor/ux/utils/workload/pruning/index.rst", "autoapi/neural_compressor/ux/utils/workload/quantization/index.rst", "autoapi/neural_compressor/ux/utils/workload/tuning/index.rst", "autoapi/neural_compressor/ux/utils/yaml_utils/index.rst", "autoapi/neural_compressor/ux/web/communication/index.rst", "autoapi/neural_compressor/ux/web/configuration/index.rst", "autoapi/neural_compressor/ux/web/exceptions/index.rst", "autoapi/neural_compressor/ux/web/index.rst", "autoapi/neural_compressor/ux/web/router/index.rst", "autoapi/neural_compressor/ux/web/server/index.rst", "autoapi/neural_compressor/ux/web/service/benchmark/index.rst", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index.rst", "autoapi/neural_compressor/ux/web/service/index.rst", "autoapi/neural_compressor/ux/web/service/model/index.rst", "autoapi/neural_compressor/ux/web/service/optimization/index.rst", "autoapi/neural_compressor/ux/web/service/profiling/index.rst", "autoapi/neural_compressor/ux/web/service/request_data_processor/index.rst", "autoapi/neural_compressor/ux/web/service/response_generator/index.rst", "autoapi/neural_compressor/ux/web/service/workload/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/adaptor/torch_utils/bf16_convert.rst", "docs/source/api-doc/adaptor/torch_utils/hawq_metric.rst", "docs/source/api-doc/adaptor/torch_utils/onnx.rst", "docs/source/api-doc/adaptor/torch_utils/symbolic_trace.rst", "docs/source/api-doc/adaptor/torch_utils/util.rst", "docs/source/api-doc/algorithm.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/basic_api.rst", "docs/source/api-doc/basic_api/benchmark.rst", "docs/source/api-doc/basic_api/config.rst", "docs/source/api-doc/basic_api/mix_precision.rst", "docs/source/api-doc/basic_api/objective.rst", "docs/source/api-doc/basic_api/quantization.rst", "docs/source/api-doc/basic_api/training.rst", "docs/source/api-doc/common.rst", "docs/source/api-doc/common/benchmark.rst", "docs/source/api-doc/common/bleu.rst", "docs/source/api-doc/common/criterion.rst", "docs/source/api-doc/common/data.rst", "docs/source/api-doc/common/data/dataloader.rst", "docs/source/api-doc/common/data/datasets.rst", "docs/source/api-doc/common/data/transforms.rst", "docs/source/api-doc/common/metric.rst", "docs/source/api-doc/common/model.rst", "docs/source/api-doc/common/optimizer.rst", "docs/source/api-doc/component.rst", "docs/source/api-doc/component/Distillation.rst", "docs/source/api-doc/component/MixedPrecision.rst", "docs/source/api-doc/component/ModelConversion.rst", "docs/source/api-doc/component/Nas.rst", "docs/source/api-doc/component/Pruning.rst", "docs/source/api-doc/component/Quantization.rst", "docs/source/api-doc/component/Scheduler.rst", "docs/source/api-doc/contrib.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/pythonic.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/strategy/strategy.rst", "docs/source/api-doc/utils.rst", "docs/source/bench.md", "docs/source/benchmark.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/platform_configuration.md", "docs/source/pruning.md", "docs/source/pruning_details.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">644ec953a7dc_pruning_support</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6ece06672ed3_v1_14</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6f0d0f71d92e_v1_13</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">9e89549a08c8_v1_11</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">env</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_predictor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_search</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.execute_benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.benchmark_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.graph_optimization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.mixed_precision_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.profiling_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.pruning_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.quantization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.configuration_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_boundary_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.params_feeder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.pruning_config_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain_flavour</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.framework</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.project</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.pruning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.examples_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.model_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.project_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.params_interfaces</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.attribute</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.collapser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.edge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.onnxrt_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.tensorflow_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_control_queue</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.request</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.manage_workspace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model_type_getter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.shape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.frozen_pb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.meta_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.saved_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.list_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.execute_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tune_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.execute_profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profile_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.inc_bench</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.consts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.environment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.executor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.expiring_dict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.github_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.hw_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.json_serializer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.proc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.processes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.status_updates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.workdir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.yaml_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.communication</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.server</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.history_snapshot_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.request_data_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.response_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "Adaptor", "ONNX Runtime", "Torch Utils", "Bf16 Convert", "Hawq Metric", "Onnx", "Symbolic Trace", "Util", "Algorithm", "APIs", "User facing APIs", "Benchmark", "Config", "Mix Precision", "Objective", "Quantization", "Training", "Common", "Benchmark", "BLEU", "Criterion", "Data", "Dataloader", "Datasets", "Transforms", "Metric", "Model", "Optimizer", "Component(experiemental API, deprecated in 2.0)", "Distillation", "MixedPrecision", "ModelConversion", "Neural architecture search (NAS)", "Pruning", "Quantization", "Scheduler", "Contrib", "Model", "Pythonic", "Strategy", "Strategies", "Utils", "Intel\u00ae Neural Compressor Bench", "Benchmarking", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Pruning details", "Full Publications/Events (56)", "Pythonic Style Access for Configurations", "Quantization", "Turn OFF Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"pruning_support": 0, "revis": [0, 1, 2, 3, 340], "id": [0, 1, 2, 3, 98, 155, 202, 204, 238, 248, 250, 251, 252, 253, 296, 298, 299, 300, 301, 327, 340, 364, 365, 367, 368, 369, 371, 374, 375, 376, 377, 378, 380, 381, 383, 384, 412, 413, 416, 484, 554, 594, 626, 629], "644ec953a7dc": 0, "6ece06672ed3": [0, 1], "creat": [0, 1, 2, 3, 5, 15, 43, 98, 101, 106, 118, 135, 156, 159, 176, 186, 188, 206, 207, 214, 224, 226, 240, 247, 251, 259, 260, 270, 271, 272, 294, 299, 304, 315, 319, 327, 329, 331, 332, 337, 363, 380, 390, 391, 395, 396, 477, 498, 511, 524, 528, 531, 534, 580, 596, 607, 609, 611, 612, 615, 623, 626, 627, 629], "date": [0, 1, 2, 3, 317, 468], "2022": [0, 1, 2, 3, 533, 593], "12": [0, 577, 589, 592, 632], "09": [0, 632], "17": [0, 632], "22": [0, 3, 489, 492, 632], "310141": 0, "v1": [1, 2, 3, 43, 142, 197, 198, 199, 200, 236, 252, 253, 255, 300, 301, 302, 303, 312, 584, 589, 594, 596, 625, 626, 632], "14": [1, 2, 171, 241, 243, 244, 313, 586, 632], "6f0d0f71d92e": [1, 2], "08": [1, 203, 239, 628, 632], "31": [1, 632], "07": [1, 2, 631, 632], "16": [1, 579, 580, 619, 632], "24": [1, 629, 632], "229939": 1, "update_dataload": 1, "db_session": [1, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 390, 391, 393, 395, 398], "sqlalchemi": [1, 363, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 390, 391, 393, 395, 396, 398, 587, 592], "orm": [1, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 390, 391, 393, 395, 398], "session": [1, 142, 185, 223, 312, 363, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 390, 391, 393, 395, 396, 398, 627, 629], "updat": [1, 44, 58, 70, 98, 99, 106, 111, 118, 160, 162, 163, 165, 166, 244, 248, 254, 255, 263, 274, 275, 277, 278, 279, 288, 290, 296, 302, 303, 311, 312, 313, 327, 347, 364, 365, 366, 367, 375, 378, 380, 381, 383, 385, 391, 393, 394, 395, 398, 468, 491, 495, 500, 503, 505, 509, 554, 577, 586, 594, 600, 605, 608, 618, 619, 620, 629], "dataload": [1, 6, 8, 13, 15, 16, 17, 41, 43, 144, 146, 147, 149, 150, 152, 155, 156, 163, 174, 175, 186, 197, 204, 207, 213, 224, 235, 240, 247, 257, 279, 280, 285, 290, 293, 294, 295, 313, 315, 334, 337, 345, 350, 357, 361, 372, 386, 389, 391, 396, 398, 420, 461, 474, 477, 480, 488, 499, 500, 504, 530, 533, 534, 556, 577, 582, 583, 584, 589, 590, 594, 595, 617, 623, 624, 627, 628, 631], "exist": [1, 49, 99, 135, 155, 157, 168, 204, 205, 251, 271, 299, 312, 329, 331, 340, 365, 385, 391, 393, 394, 431, 482, 498, 499, 594, 601, 619, 629], "databas": [1, 188, 192, 197, 226, 363, 364, 365, 366, 367, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 391, 392, 393, 394, 395, 396, 468, 482, 498], "update_transform": 1, "transform": [1, 16, 40, 46, 58, 63, 64, 85, 86, 88, 127, 128, 132, 137, 138, 139, 140, 141, 147, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 224, 225, 226, 227, 228, 229, 231, 233, 234, 235, 247, 266, 268, 269, 295, 357, 361, 367, 372, 386, 389, 391, 396, 398, 420, 499, 500, 501, 502, 507, 530, 531, 556, 579, 580, 582, 583, 584, 585, 589, 597, 602, 603, 604, 605, 621, 624, 627, 631, 632], "13": [2, 3, 315, 577, 592], "9e89549a08c8": [2, 3], "29": [2, 632], "41": [2, 632], "291905": 2, "11": [3, 489, 577, 592, 594, 595], "03": [3, 489, 632], "34": [3, 632], "52": [3, 632], "916541": 3, "block": [4, 63, 162, 166, 247, 260, 269, 280, 285, 288, 291, 314, 516, 591, 616, 619, 620], "mask": [4, 162, 163, 165, 186, 224, 251, 267, 269, 274, 277, 278, 284, 288, 290, 292, 299, 313, 619, 620, 632], "run_migrations_offlin": 5, "run": [5, 6, 8, 13, 15, 17, 41, 106, 142, 155, 163, 166, 171, 174, 175, 185, 202, 204, 223, 238, 247, 260, 263, 289, 290, 295, 304, 315, 319, 320, 327, 334, 446, 492, 514, 515, 516, 529, 534, 577, 578, 584, 587, 588, 595, 597, 599, 601, 602, 603, 605, 607, 608, 609, 611, 612, 614, 619, 621, 623, 625, 626, 627, 629, 631], "migrat": [5, 482], "offlin": [5, 344, 528, 623], "mode": [5, 6, 8, 13, 16, 21, 39, 40, 41, 43, 106, 147, 163, 195, 204, 233, 247, 251, 299, 312, 327, 329, 331, 344, 364, 491, 534, 577, 591, 592, 607, 611, 623, 624, 629], "thi": [5, 8, 39, 41, 43, 52, 58, 63, 64, 77, 82, 98, 103, 106, 111, 118, 128, 135, 137, 141, 144, 149, 154, 156, 159, 162, 163, 164, 165, 174, 175, 185, 186, 187, 188, 189, 190, 191, 192, 193, 197, 200, 202, 203, 206, 207, 212, 213, 223, 224, 225, 226, 227, 228, 229, 231, 238, 239, 247, 248, 251, 252, 253, 255, 260, 265, 266, 273, 274, 275, 277, 278, 279, 280, 285, 288, 290, 291, 292, 293, 294, 296, 299, 300, 301, 302, 303, 304, 314, 315, 319, 324, 334, 343, 344, 528, 529, 530, 531, 534, 554, 577, 579, 580, 582, 583, 584, 588, 591, 593, 594, 595, 596, 597, 599, 600, 602, 603, 605, 607, 609, 611, 612, 613, 614, 615, 619, 620, 623, 624, 625, 626, 627, 628, 629], "configur": [5, 6, 8, 13, 15, 16, 41, 42, 43, 98, 106, 114, 143, 149, 155, 156, 159, 162, 166, 167, 171, 174, 175, 177, 180, 188, 191, 197, 204, 209, 226, 229, 240, 241, 244, 246, 247, 251, 257, 258, 259, 260, 262, 270, 271, 280, 285, 289, 291, 293, 294, 295, 299, 304, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 329, 332, 334, 336, 337, 340, 342, 343, 345, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 364, 375, 386, 388, 391, 450, 452, 457, 461, 464, 467, 480, 482, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 514, 516, 530, 531, 534, 577, 580, 594, 601, 615, 616, 619, 625, 628, 629, 632], "context": [5, 15, 344, 622], "just": [5, 93, 176, 197, 200, 201, 203, 206, 207, 208, 209, 211, 214, 239, 314, 531, 604, 608, 614, 617, 623, 628, 629], "url": [5, 188, 226, 445, 512, 593], "an": [5, 15, 16, 39, 41, 58, 63, 64, 66, 98, 101, 111, 135, 137, 144, 149, 154, 162, 163, 165, 179, 184, 188, 192, 197, 200, 203, 207, 212, 213, 217, 222, 226, 230, 235, 239, 247, 248, 251, 252, 253, 260, 267, 270, 271, 272, 294, 295, 296, 299, 300, 301, 304, 311, 319, 408, 413, 489, 526, 528, 530, 531, 533, 534, 554, 579, 580, 581, 586, 594, 595, 597, 601, 602, 605, 614, 616, 620, 621, 626, 627, 628, 629], "engin": [5, 262, 363, 375, 396], "though": [5, 269], "i": [5, 6, 8, 13, 15, 16, 17, 40, 41, 43, 44, 45, 49, 50, 53, 56, 58, 60, 63, 64, 66, 77, 78, 81, 87, 88, 89, 98, 99, 101, 103, 105, 106, 111, 118, 128, 135, 137, 138, 142, 144, 148, 149, 154, 155, 156, 159, 160, 162, 163, 164, 166, 171, 174, 175, 176, 184, 185, 186, 187, 188, 189, 190, 192, 193, 195, 196, 197, 199, 200, 203, 204, 206, 207, 210, 212, 213, 214, 222, 223, 224, 225, 226, 227, 228, 231, 233, 234, 235, 236, 239, 247, 248, 251, 253, 254, 255, 257, 260, 263, 267, 269, 272, 274, 280, 285, 289, 290, 291, 294, 295, 296, 299, 301, 302, 303, 304, 311, 314, 315, 319, 320, 325, 326, 327, 334, 343, 344, 363, 396, 408, 428, 431, 433, 434, 436, 438, 439, 440, 441, 447, 485, 487, 489, 491, 492, 497, 499, 501, 507, 512, 514, 528, 529, 530, 531, 534, 535, 537, 543, 544, 545, 552, 554, 556, 563, 571, 572, 573, 574, 576, 577, 578, 579, 580, 582, 583, 584, 586, 588, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 605, 607, 608, 609, 611, 612, 614, 615, 616, 617, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631], "accept": [5, 314, 528, 577, 578], "here": [5, 64, 66, 118, 251, 258, 269, 270, 299, 577, 580, 584, 585, 586, 588, 589, 594, 602, 609, 612, 614, 619, 623, 625, 626, 629], "well": [5, 174, 175, 304, 315, 334, 531, 533, 580, 623, 625, 631], "By": [5, 248, 296, 554, 594, 596, 607, 608, 611, 629], "skip": [5, 63, 99, 314, 627, 629], "creation": [5, 360], "we": [5, 40, 63, 64, 66, 70, 82, 98, 106, 135, 137, 147, 153, 154, 155, 185, 204, 206, 207, 223, 248, 251, 258, 269, 270, 296, 299, 321, 322, 340, 528, 530, 534, 554, 579, 584, 586, 588, 594, 601, 602, 605, 609, 612, 614, 615, 616, 617, 619, 620, 622, 623, 626, 627, 629], "don": [5, 137, 154, 162, 489, 530, 577, 629], "t": [5, 63, 64, 66, 106, 135, 137, 154, 162, 197, 200, 203, 206, 207, 239, 253, 262, 263, 267, 294, 301, 489, 498, 530, 534, 577, 582, 584, 595, 615, 629, 631], "even": [5, 58, 577, 619], "need": [5, 6, 8, 13, 15, 16, 40, 41, 58, 77, 82, 99, 101, 105, 106, 128, 135, 147, 155, 162, 174, 175, 176, 184, 185, 188, 192, 195, 196, 197, 200, 203, 206, 207, 208, 209, 214, 222, 223, 226, 233, 234, 235, 239, 240, 247, 254, 255, 260, 267, 269, 280, 285, 294, 302, 303, 304, 310, 311, 314, 315, 324, 327, 334, 343, 344, 518, 530, 534, 577, 579, 580, 582, 584, 591, 595, 597, 599, 600, 603, 607, 608, 609, 611, 612, 614, 615, 619, 622, 623, 624, 625, 628, 629, 631], "dbapi": 5, "avail": [5, 171, 308, 361, 366, 368, 369, 373, 376, 377, 382, 447, 535, 537, 543, 544, 545, 552, 556, 563, 571, 572, 573, 574, 576, 577, 585, 589, 591, 607, 611, 618, 620, 629], "call": [5, 15, 98, 118, 147, 150, 152, 156, 159, 163, 213, 247, 251, 262, 263, 274, 278, 279, 280, 285, 288, 290, 291, 299, 334, 363, 396, 484, 492, 493, 530, 531, 534, 577, 579, 590, 603, 605, 615, 619, 623, 627, 628], "execut": [5, 8, 13, 16, 40, 41, 43, 46, 48, 49, 51, 65, 69, 75, 78, 80, 84, 104, 140, 150, 152, 156, 163, 204, 213, 240, 247, 258, 259, 270, 280, 285, 290, 293, 294, 304, 315, 316, 318, 334, 337, 343, 344, 345, 346, 347, 364, 375, 378, 385, 391, 393, 394, 450, 452, 454, 457, 458, 461, 462, 463, 464, 466, 467, 469, 474, 477, 481, 484, 492, 493, 515, 577, 582, 583, 595, 599, 600, 607, 608, 611, 614, 615, 617, 619, 620, 623, 626, 629, 632], "emit": 5, "given": [5, 15, 16, 17, 39, 43, 63, 64, 66, 98, 100, 101, 111, 112, 142, 149, 162, 163, 171, 197, 200, 202, 203, 238, 239, 251, 299, 311, 312, 313, 315, 327, 340, 408, 414, 428, 431, 433, 434, 436, 438, 439, 441, 485, 499, 512, 531, 619, 620, 628], "string": [5, 6, 8, 39, 40, 41, 42, 43, 52, 59, 75, 98, 99, 106, 111, 112, 135, 138, 142, 157, 162, 163, 164, 165, 166, 167, 186, 188, 205, 210, 224, 226, 240, 244, 246, 247, 248, 251, 257, 258, 259, 262, 270, 271, 272, 280, 285, 288, 289, 290, 291, 292, 293, 294, 296, 299, 308, 312, 313, 329, 331, 337, 344, 357, 477, 499, 523, 594, 628], "script": [5, 248, 249, 252, 253, 296, 297, 300, 301, 346, 347, 433, 450, 452, 454, 457, 458, 460, 461, 463, 464, 466, 467, 472, 584, 591, 597, 601, 604, 605, 608, 621], "output": [5, 17, 39, 40, 41, 43, 49, 53, 55, 56, 64, 66, 70, 81, 87, 89, 94, 98, 99, 101, 105, 106, 109, 118, 135, 142, 149, 157, 162, 163, 168, 171, 174, 175, 202, 205, 207, 208, 212, 238, 240, 241, 243, 244, 246, 247, 248, 251, 255, 260, 261, 269, 288, 295, 296, 299, 302, 303, 304, 307, 311, 312, 313, 315, 334, 335, 338, 340, 341, 344, 364, 375, 378, 385, 391, 393, 394, 428, 438, 439, 440, 454, 458, 461, 484, 492, 500, 506, 530, 534, 554, 577, 582, 583, 584, 586, 588, 590, 594, 596, 605, 614, 615, 617, 619, 622, 623, 627, 628, 629, 631], "run_migrations_onlin": 5, "onlin": [5, 528, 533, 626], "In": [5, 52, 63, 64, 111, 156, 159, 162, 163, 164, 185, 213, 223, 247, 251, 269, 288, 290, 299, 314, 325, 528, 530, 531, 533, 534, 577, 579, 580, 582, 583, 584, 594, 604, 607, 608, 611, 616, 617, 619, 620, 623, 624, 626, 627, 628, 629], "scenario": [5, 361, 534, 577, 578, 582, 619, 620], "associ": [5, 251, 299, 386, 387], "connect": [5, 160, 290, 375, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 577, 614, 618, 619, 620, 626], "adaptor_registri": [6, 534], "cl": [6, 41, 150, 152, 157, 162, 163, 164, 165, 188, 192, 195, 196, 197, 200, 203, 205, 210, 226, 230, 233, 234, 235, 237, 239, 272, 279, 283, 288, 290, 292, 314, 327, 344], "The": [6, 8, 13, 16, 17, 34, 40, 41, 43, 49, 64, 66, 70, 75, 87, 88, 89, 98, 106, 109, 111, 115, 117, 142, 144, 147, 149, 150, 152, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 168, 174, 175, 176, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 200, 203, 205, 207, 208, 210, 213, 214, 224, 225, 226, 227, 228, 230, 232, 233, 234, 235, 237, 239, 240, 246, 247, 248, 249, 250, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 283, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 329, 331, 332, 333, 334, 335, 337, 338, 339, 340, 343, 344, 364, 365, 367, 370, 374, 375, 378, 379, 381, 383, 384, 391, 396, 399, 401, 402, 403, 404, 405, 406, 407, 420, 427, 428, 480, 528, 530, 531, 534, 535, 537, 543, 544, 545, 552, 554, 556, 563, 571, 572, 573, 574, 576, 577, 578, 579, 580, 582, 584, 586, 588, 590, 591, 592, 594, 595, 596, 599, 600, 602, 605, 607, 608, 609, 611, 612, 614, 615, 616, 617, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 631], "decor": [6, 34, 63, 64, 66, 142, 150, 152, 162, 163, 165, 197, 200, 203, 210, 235, 237, 239, 254, 255, 272, 279, 283, 288, 290, 292, 302, 303, 314, 327, 330, 344, 494, 530, 531, 534, 629], "us": [6, 8, 13, 15, 16, 34, 40, 41, 43, 44, 45, 63, 64, 66, 98, 99, 101, 109, 111, 112, 118, 144, 149, 155, 156, 157, 159, 160, 162, 163, 165, 168, 174, 175, 184, 185, 186, 187, 188, 189, 190, 192, 193, 197, 200, 202, 203, 204, 205, 210, 222, 223, 224, 225, 226, 227, 228, 231, 235, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 249, 251, 255, 256, 257, 258, 261, 263, 269, 270, 272, 279, 280, 283, 285, 288, 290, 291, 292, 293, 294, 295, 296, 297, 299, 303, 304, 314, 315, 319, 321, 322, 324, 325, 326, 327, 330, 331, 335, 336, 337, 338, 339, 340, 344, 391, 396, 401, 402, 406, 408, 420, 427, 429, 454, 458, 482, 499, 501, 511, 512, 528, 529, 530, 531, 534, 554, 577, 578, 579, 580, 582, 583, 584, 586, 588, 590, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 605, 607, 609, 611, 612, 614, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632], "regist": [6, 34, 128, 150, 152, 156, 157, 159, 160, 162, 163, 164, 165, 188, 192, 195, 196, 197, 200, 203, 205, 210, 213, 226, 230, 233, 234, 235, 237, 239, 240, 247, 254, 255, 272, 273, 279, 280, 281, 282, 283, 285, 288, 290, 292, 302, 303, 310, 313, 314, 319, 327, 330, 531, 534, 580, 584, 594, 615, 616, 629], "all": [6, 8, 15, 17, 34, 41, 43, 56, 59, 81, 93, 98, 118, 127, 132, 150, 152, 155, 156, 157, 159, 162, 163, 166, 176, 177, 180, 184, 188, 192, 195, 196, 197, 200, 203, 204, 205, 210, 213, 214, 222, 226, 230, 233, 234, 235, 237, 239, 244, 247, 248, 251, 253, 254, 255, 265, 266, 267, 269, 272, 279, 280, 281, 282, 283, 284, 285, 288, 291, 294, 296, 299, 301, 302, 303, 305, 306, 311, 314, 317, 318, 319, 320, 321, 327, 329, 330, 331, 337, 344, 348, 360, 363, 372, 389, 391, 396, 401, 402, 415, 417, 420, 421, 427, 428, 431, 433, 440, 446, 453, 455, 459, 460, 462, 465, 471, 476, 480, 489, 493, 516, 528, 533, 534, 577, 579, 580, 584, 588, 592, 597, 605, 608, 609, 612, 613, 614, 615, 617, 618, 619, 620, 621, 623, 624, 628, 629], "subclass": [6, 34, 150, 152, 162, 163, 165, 181, 185, 188, 192, 195, 196, 197, 200, 203, 210, 219, 223, 226, 230, 233, 234, 235, 237, 239, 254, 255, 272, 279, 281, 282, 283, 288, 290, 292, 302, 303, 314, 327, 330, 534], "paramet": [6, 8, 13, 15, 16, 17, 39, 40, 41, 43, 52, 53, 56, 57, 58, 59, 63, 64, 66, 70, 75, 81, 82, 85, 86, 98, 99, 101, 106, 109, 111, 112, 118, 128, 135, 136, 138, 142, 143, 144, 148, 149, 150, 152, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 168, 171, 174, 175, 176, 185, 186, 188, 192, 195, 196, 197, 199, 200, 202, 203, 204, 205, 210, 214, 223, 224, 226, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 283, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 308, 310, 311, 312, 313, 314, 315, 319, 324, 327, 329, 330, 331, 332, 333, 334, 337, 338, 340, 341, 343, 344, 357, 361, 366, 367, 386, 387, 388, 391, 397, 399, 408, 434, 452, 457, 461, 464, 467, 479, 484, 489, 491, 492, 498, 499, 501, 511, 512, 530, 554, 577, 579, 580, 582, 584, 591, 594, 608, 614, 615, 619, 620, 623, 626, 628, 629, 631], "framework_specific_info": [6, 8, 13, 16, 41, 43, 534], "base": [6, 8, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 100, 101, 103, 104, 105, 109, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 140, 141, 143, 144, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 167, 168, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 245, 247, 248, 251, 254, 255, 256, 258, 259, 260, 262, 263, 267, 268, 269, 270, 271, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 290, 292, 293, 294, 295, 296, 299, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 329, 330, 331, 333, 335, 338, 339, 340, 341, 344, 349, 350, 351, 353, 354, 355, 356, 359, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 403, 404, 405, 407, 410, 412, 413, 416, 426, 428, 431, 433, 435, 436, 438, 439, 440, 441, 449, 452, 457, 461, 464, 467, 477, 481, 483, 485, 487, 491, 492, 493, 494, 497, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 512, 513, 515, 517, 521, 522, 531, 533, 534, 554, 580, 583, 584, 588, 602, 603, 605, 614, 618, 620, 626, 627, 629, 632], "object": [6, 8, 13, 15, 16, 34, 40, 41, 43, 53, 56, 57, 58, 59, 70, 75, 81, 82, 87, 88, 89, 90, 99, 100, 101, 106, 109, 112, 128, 135, 138, 143, 144, 148, 149, 150, 152, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 168, 171, 174, 175, 176, 177, 179, 180, 184, 186, 187, 188, 192, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 217, 222, 224, 225, 226, 230, 233, 234, 235, 237, 238, 239, 240, 244, 246, 247, 248, 251, 254, 255, 256, 259, 260, 262, 270, 271, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 302, 303, 304, 306, 308, 310, 311, 312, 313, 315, 319, 327, 334, 335, 337, 338, 339, 341, 343, 344, 361, 376, 377, 380, 383, 424, 489, 492, 499, 509, 511, 512, 516, 530, 531, 545, 554, 577, 578, 579, 580, 587, 594, 596, 617, 619, 620, 622, 623, 628, 629], "framework": [6, 8, 13, 15, 16, 41, 155, 157, 172, 173, 177, 178, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 200, 203, 205, 206, 207, 210, 215, 216, 218, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 237, 239, 246, 247, 254, 255, 256, 263, 293, 294, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 325, 327, 329, 331, 337, 346, 361, 372, 389, 391, 396, 398, 400, 420, 428, 431, 433, 434, 440, 447, 449, 454, 458, 463, 466, 470, 481, 487, 499, 500, 533, 534, 577, 584, 585, 589, 590, 591, 592, 594, 595, 619, 621, 623, 627, 628, 629, 631], "layer": [6, 8, 13, 16, 40, 41, 42, 43, 64, 66, 111, 112, 113, 114, 115, 117, 118, 147, 153, 157, 162, 166, 171, 205, 212, 247, 269, 280, 285, 288, 289, 291, 335, 337, 338, 344, 511, 534, 583, 591, 619, 620, 625], "abstract": [6, 13, 15, 42, 82, 109, 118, 156, 157, 159, 162, 165, 203, 205, 239, 240, 246, 247, 254, 255, 271, 273, 279, 283, 288, 292, 293, 302, 303, 305, 306, 307, 314, 315, 327, 350, 362, 428, 439, 440, 461, 473, 491, 515, 534, 590], "quantiz": [6, 7, 8, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 84, 88, 90, 92, 95, 103, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 141, 143, 144, 146, 147, 149, 150, 152, 153, 155, 156, 159, 171, 174, 175, 199, 206, 207, 213, 236, 241, 244, 245, 246, 247, 257, 294, 295, 304, 313, 316, 318, 319, 320, 321, 322, 324, 325, 326, 327, 329, 330, 331, 334, 335, 338, 339, 340, 343, 344, 356, 361, 391, 393, 399, 480, 488, 500, 504, 534, 545, 563, 577, 579, 580, 584, 585, 586, 588, 590, 591, 594, 595, 596, 597, 602, 604, 605, 608, 617, 621, 625, 627, 628, 629, 631], "tune_cfg": [6, 8, 13, 15, 16, 41, 43, 142, 143, 149, 175, 320, 327, 534, 629], "model": [6, 8, 13, 15, 16, 17, 30, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 112, 114, 135, 136, 142, 143, 144, 147, 148, 149, 150, 152, 153, 155, 156, 157, 159, 162, 163, 165, 166, 171, 174, 175, 182, 185, 186, 188, 197, 200, 203, 204, 205, 207, 208, 213, 220, 223, 224, 226, 239, 240, 241, 242, 243, 244, 245, 246, 247, 255, 256, 257, 258, 259, 261, 263, 268, 269, 270, 271, 273, 274, 275, 277, 278, 279, 280, 285, 288, 289, 290, 291, 292, 293, 294, 295, 302, 303, 304, 314, 315, 316, 319, 320, 322, 324, 325, 326, 327, 329, 331, 334, 340, 343, 344, 346, 347, 348, 350, 361, 364, 372, 375, 378, 380, 388, 389, 390, 391, 392, 393, 395, 396, 397, 399, 403, 407, 408, 413, 414, 415, 418, 419, 420, 444, 445, 447, 450, 453, 454, 455, 456, 458, 459, 460, 461, 465, 466, 471, 473, 476, 477, 480, 481, 488, 497, 499, 504, 514, 515, 519, 526, 530, 531, 533, 534, 544, 552, 578, 579, 580, 582, 583, 584, 585, 590, 591, 593, 594, 595, 597, 602, 604, 605, 608, 614, 616, 617, 618, 619, 620, 621, 623, 625, 626, 627, 628, 629, 631], "q_func": [6, 8, 13, 16, 41, 43, 174, 175, 247, 293, 294, 316, 319, 320, 322, 324, 326, 327, 534, 629], "none": [6, 8, 13, 15, 16, 17, 39, 40, 41, 43, 44, 45, 59, 85, 98, 99, 100, 101, 106, 112, 118, 135, 136, 142, 144, 147, 149, 155, 156, 157, 159, 163, 166, 167, 168, 171, 174, 175, 176, 178, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 197, 199, 200, 203, 204, 205, 206, 207, 213, 214, 216, 221, 222, 224, 225, 226, 227, 228, 229, 231, 236, 239, 240, 241, 243, 244, 246, 247, 248, 251, 254, 255, 256, 257, 258, 260, 262, 263, 267, 269, 270, 271, 279, 280, 284, 285, 289, 290, 293, 294, 295, 296, 299, 302, 303, 304, 309, 311, 312, 313, 314, 315, 316, 319, 320, 322, 324, 326, 327, 329, 331, 334, 335, 337, 338, 343, 344, 345, 346, 347, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 363, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 390, 391, 394, 396, 397, 398, 399, 413, 428, 431, 433, 435, 438, 439, 440, 445, 447, 452, 454, 457, 458, 461, 463, 464, 466, 467, 468, 469, 470, 473, 474, 475, 477, 479, 482, 484, 485, 487, 490, 492, 493, 497, 498, 499, 500, 501, 502, 503, 505, 507, 508, 509, 511, 512, 516, 518, 524, 534, 554, 580, 594, 623, 627, 628, 629], "do": [6, 8, 13, 16, 19, 21, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 41, 44, 45, 73, 75, 103, 156, 159, 185, 186, 223, 224, 240, 241, 244, 247, 248, 251, 291, 294, 296, 299, 314, 320, 343, 528, 554, 577, 580, 584, 588, 591, 592, 594, 609, 612, 619, 624, 625, 629], "calibr": [6, 7, 8, 13, 15, 16, 18, 40, 41, 44, 45, 73, 85, 86, 147, 149, 150, 152, 155, 174, 175, 246, 247, 293, 294, 304, 313, 315, 339, 508, 534, 579, 580, 590, 591, 623, 629, 631], "quanit": [6, 13, 16], "post": [6, 13, 16, 93, 94, 147, 153, 171, 174, 175, 197, 200, 203, 213, 239, 244, 247, 294, 295, 315, 327, 511, 528, 533, 534, 583, 584, 586, 591, 592, 597, 603, 614, 621, 627, 629], "train": [6, 8, 13, 16, 41, 43, 52, 58, 75, 76, 118, 147, 153, 156, 159, 163, 171, 174, 175, 186, 188, 203, 213, 224, 226, 239, 240, 247, 257, 258, 260, 261, 268, 270, 279, 280, 285, 290, 291, 293, 294, 295, 315, 327, 337, 507, 531, 533, 534, 545, 580, 582, 583, 586, 591, 595, 597, 603, 614, 617, 619, 620, 621, 626, 629, 631, 632], "dict": [6, 8, 13, 15, 16, 17, 40, 41, 43, 109, 111, 112, 118, 138, 142, 143, 144, 149, 150, 152, 155, 157, 160, 162, 163, 164, 165, 166, 168, 174, 175, 185, 188, 204, 205, 210, 223, 226, 241, 242, 244, 247, 250, 251, 252, 253, 255, 258, 260, 263, 269, 270, 271, 272, 273, 280, 281, 282, 283, 285, 288, 289, 290, 291, 292, 298, 299, 300, 301, 303, 304, 305, 306, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 337, 338, 343, 344, 345, 347, 350, 357, 358, 359, 361, 362, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 404, 405, 408, 416, 425, 428, 435, 443, 444, 445, 447, 449, 450, 451, 452, 457, 461, 464, 467, 468, 469, 470, 472, 474, 475, 477, 484, 485, 487, 489, 491, 492, 495, 497, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 511, 512, 515, 516, 518, 520, 522, 523, 525, 530, 594, 619, 622, 627, 629], "chosen": [6, 8, 577], "tune": [6, 8, 13, 15, 16, 41, 43, 155, 156, 171, 174, 175, 186, 188, 224, 226, 246, 247, 293, 295, 304, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 344, 356, 375, 383, 384, 391, 393, 397, 420, 450, 455, 468, 480, 488, 500, 504, 534, 577, 579, 580, 584, 591, 593, 595, 614, 616, 621, 624, 625, 626, 627, 631], "load": [6, 8, 186, 188, 202, 203, 224, 226, 238, 239, 251, 261, 263, 271, 299, 304, 312, 313, 315, 343, 344, 391, 393, 472, 499, 500, 579, 607, 611, 615, 622, 623], "dataset": [6, 8, 13, 16, 41, 43, 149, 174, 175, 176, 178, 179, 183, 184, 185, 197, 206, 207, 214, 216, 217, 221, 222, 223, 235, 246, 247, 251, 252, 253, 255, 257, 263, 293, 294, 295, 299, 300, 301, 302, 303, 304, 315, 334, 337, 364, 372, 375, 378, 386, 391, 395, 396, 397, 408, 420, 497, 499, 500, 501, 531, 533, 534, 556, 579, 584, 589, 594, 602, 619, 620, 623, 625, 629, 631, 632], "option": [6, 8, 13, 16, 17, 41, 43, 98, 101, 106, 135, 157, 162, 171, 174, 175, 176, 186, 197, 200, 203, 205, 214, 224, 239, 241, 243, 244, 247, 251, 257, 262, 263, 269, 288, 294, 295, 299, 304, 312, 313, 315, 327, 329, 331, 334, 338, 340, 344, 489, 580, 588, 592, 608, 626, 628, 629, 631], "awar": [6, 8, 13, 16, 41, 43, 144, 156, 159, 171, 213, 247, 257, 288, 293, 294, 295, 322, 327, 334, 534, 583, 584, 586, 591, 595, 614, 617, 629, 632], "evalu": [6, 8, 13, 16, 41, 43, 155, 156, 159, 162, 163, 174, 175, 186, 204, 213, 224, 240, 246, 247, 248, 251, 252, 253, 254, 255, 257, 258, 259, 262, 263, 270, 271, 280, 285, 290, 291, 294, 295, 296, 299, 300, 301, 302, 303, 304, 314, 315, 327, 334, 337, 349, 351, 353, 355, 356, 357, 480, 488, 500, 504, 531, 534, 554, 579, 580, 582, 583, 590, 591, 594, 595, 597, 603, 605, 608, 614, 616, 619, 623, 626, 627, 629, 631], "postprocess": [6, 8, 13, 16, 41, 43, 197, 200, 203, 204, 207, 235, 237, 239, 246, 247, 257, 269, 293, 294, 295, 337, 502, 507, 534, 627, 628], "metric": [6, 8, 13, 16, 41, 43, 156, 159, 174, 175, 204, 207, 240, 246, 247, 257, 258, 259, 261, 263, 270, 271, 272, 273, 280, 285, 293, 294, 295, 304, 314, 315, 334, 337, 357, 361, 367, 372, 386, 389, 391, 396, 420, 480, 488, 491, 496, 499, 500, 502, 518, 531, 534, 537, 552, 554, 577, 579, 580, 584, 595, 626, 627, 629, 631, 632], "measur": [6, 8, 13, 16, 41, 43, 142, 204, 262, 263, 268, 304, 314, 339, 518, 531, 534, 578, 582, 594, 627, 629], "iter": [6, 8, 13, 15, 16, 17, 41, 43, 101, 142, 150, 152, 155, 163, 165, 171, 174, 175, 179, 184, 188, 189, 192, 197, 206, 207, 217, 222, 226, 227, 230, 235, 271, 290, 292, 304, 312, 315, 334, 337, 364, 492, 500, 530, 531, 534, 578, 580, 619, 620, 622, 627, 629, 631], "1": [6, 8, 13, 16, 39, 40, 41, 43, 44, 50, 63, 70, 75, 85, 98, 99, 101, 105, 109, 111, 140, 142, 147, 149, 151, 153, 154, 155, 157, 162, 163, 171, 176, 178, 183, 185, 186, 187, 189, 190, 192, 193, 194, 196, 197, 199, 200, 203, 204, 205, 206, 207, 214, 216, 221, 223, 224, 225, 227, 228, 231, 232, 236, 239, 246, 247, 251, 252, 253, 255, 260, 263, 267, 269, 280, 285, 288, 290, 293, 294, 295, 299, 300, 301, 302, 303, 313, 314, 315, 317, 337, 347, 469, 477, 528, 530, 533, 534, 579, 580, 582, 586, 588, 589, 592, 594, 595, 598, 600, 616, 617, 618, 619, 620, 622, 623, 625, 626, 627, 628, 629, 631], "tensorboard": [6, 8, 13, 16, 41, 43, 171, 295, 334, 337, 344, 534], "fals": [6, 8, 13, 15, 16, 17, 39, 41, 43, 44, 45, 59, 67, 68, 75, 85, 88, 95, 98, 99, 101, 106, 109, 120, 127, 132, 137, 140, 141, 142, 147, 148, 149, 155, 157, 162, 171, 175, 176, 178, 183, 186, 188, 197, 199, 200, 203, 204, 205, 206, 207, 212, 214, 216, 221, 224, 226, 236, 239, 251, 254, 255, 260, 261, 262, 263, 267, 268, 269, 288, 295, 299, 302, 303, 311, 314, 327, 337, 340, 416, 435, 484, 487, 492, 493, 499, 518, 524, 534, 580, 588, 594, 607, 611, 622, 623, 627, 628, 631], "valid": [6, 8, 13, 42, 43, 50, 55, 63, 64, 99, 100, 101, 106, 135, 162, 163, 166, 188, 192, 197, 226, 251, 263, 289, 290, 299, 312, 447, 516, 529, 531, 533, 534, 580, 582, 585, 588, 591, 593, 605, 619, 620, 623, 625], "gener": [6, 7, 8, 15, 43, 44, 45, 83, 85, 86, 103, 106, 107, 118, 135, 138, 142, 149, 155, 162, 166, 174, 175, 176, 185, 188, 189, 190, 191, 197, 200, 203, 204, 214, 223, 226, 227, 228, 229, 235, 237, 239, 244, 245, 247, 248, 256, 260, 267, 280, 288, 291, 294, 295, 296, 304, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 334, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 362, 386, 391, 397, 452, 457, 461, 464, 466, 467, 472, 473, 474, 483, 492, 524, 530, 534, 577, 579, 582, 594, 595, 597, 602, 607, 609, 611, 612, 614, 616, 618, 619, 620, 621, 623, 624, 627, 628, 629], "data": [6, 8, 13, 15, 16, 17, 40, 41, 43, 51, 75, 98, 99, 101, 106, 135, 142, 144, 146, 147, 149, 153, 155, 157, 162, 174, 175, 204, 205, 206, 207, 241, 244, 245, 247, 263, 268, 288, 294, 295, 304, 311, 315, 319, 325, 331, 333, 334, 337, 344, 345, 347, 350, 357, 358, 359, 361, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 397, 399, 408, 424, 425, 428, 431, 435, 440, 443, 444, 445, 447, 450, 452, 457, 461, 464, 467, 469, 474, 477, 484, 497, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 511, 515, 520, 522, 523, 525, 533, 534, 552, 577, 579, 580, 584, 588, 589, 592, 594, 595, 623, 624, 625, 626, 627, 628, 629], "label": [6, 8, 43, 157, 174, 175, 186, 188, 189, 190, 191, 194, 196, 197, 199, 200, 203, 205, 207, 208, 224, 226, 227, 228, 229, 232, 236, 239, 248, 250, 254, 255, 260, 261, 296, 298, 302, 303, 304, 315, 334, 416, 530, 554, 579, 580, 594, 628], "process": [6, 8, 13, 16, 41, 43, 112, 144, 155, 156, 159, 162, 163, 165, 166, 174, 175, 186, 187, 188, 192, 197, 199, 200, 203, 204, 213, 224, 225, 226, 235, 236, 237, 239, 240, 241, 244, 247, 258, 259, 262, 268, 270, 271, 279, 280, 285, 288, 290, 291, 292, 294, 295, 304, 315, 316, 318, 319, 327, 334, 343, 344, 360, 443, 444, 447, 480, 484, 488, 491, 492, 500, 531, 534, 577, 579, 580, 582, 583, 584, 586, 598, 617, 619, 620, 623, 627, 628, 631], "result": [6, 8, 13, 16, 40, 41, 43, 98, 142, 144, 149, 155, 157, 174, 197, 199, 200, 203, 204, 205, 236, 239, 247, 248, 251, 252, 253, 254, 255, 260, 262, 271, 295, 296, 299, 300, 301, 302, 303, 314, 318, 322, 327, 329, 331, 345, 347, 364, 365, 378, 379, 381, 385, 391, 394, 397, 474, 515, 518, 528, 531, 533, 554, 577, 579, 582, 584, 591, 593, 594, 602, 603, 614, 615, 616, 619, 621, 623, 626, 627, 628, 629, 632], "from": [6, 8, 13, 15, 17, 40, 41, 43, 57, 63, 64, 65, 66, 98, 99, 101, 106, 109, 111, 118, 128, 135, 136, 138, 142, 149, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 171, 174, 175, 176, 179, 183, 186, 187, 188, 189, 190, 191, 192, 193, 197, 198, 199, 200, 205, 206, 207, 209, 213, 214, 217, 221, 224, 225, 226, 227, 228, 229, 231, 236, 240, 242, 243, 244, 245, 247, 248, 251, 252, 253, 257, 260, 261, 262, 263, 267, 269, 272, 280, 285, 288, 289, 290, 291, 292, 294, 295, 296, 299, 300, 301, 304, 310, 311, 312, 314, 315, 319, 321, 326, 327, 329, 331, 332, 333, 337, 340, 343, 344, 362, 364, 367, 368, 369, 371, 374, 375, 376, 377, 378, 380, 381, 383, 385, 386, 388, 391, 392, 393, 394, 395, 397, 408, 413, 431, 434, 443, 444, 445, 447, 472, 477, 491, 492, 497, 499, 500, 501, 507, 516, 518, 523, 524, 528, 530, 531, 534, 554, 578, 579, 580, 582, 583, 584, 585, 586, 587, 589, 591, 594, 595, 596, 597, 601, 602, 603, 605, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629], "depend": [6, 8, 15, 43, 58, 75, 174, 175, 204, 247, 258, 270, 271, 304, 315, 334, 529, 577, 587, 588, 622, 629], "categori": [6, 8, 43, 188, 226, 250, 251, 298, 299, 578, 580, 604], "default": [6, 8, 17, 41, 43, 93, 99, 106, 135, 142, 157, 166, 168, 171, 174, 175, 176, 178, 186, 187, 188, 192, 197, 199, 200, 203, 205, 213, 214, 216, 224, 225, 226, 236, 239, 241, 243, 244, 247, 248, 251, 254, 255, 257, 269, 289, 295, 296, 299, 302, 303, 312, 313, 316, 329, 331, 333, 337, 340, 344, 366, 368, 369, 371, 373, 376, 377, 382, 404, 405, 408, 425, 435, 487, 489, 499, 501, 502, 506, 507, 530, 534, 554, 577, 580, 586, 588, 591, 592, 594, 595, 602, 605, 607, 611, 616, 619, 620, 622, 624, 626, 628, 629, 631], "precis": [6, 8, 13, 41, 42, 43, 44, 45, 75, 143, 174, 175, 246, 247, 251, 253, 255, 256, 293, 299, 301, 302, 303, 304, 314, 315, 317, 318, 320, 327, 329, 331, 361, 372, 375, 376, 386, 387, 388, 389, 390, 391, 396, 420, 449, 454, 456, 457, 458, 481, 500, 503, 505, 533, 534, 545, 577, 578, 583, 584, 588, 591, 597, 603, 604, 605, 621, 622, 623, 629], "benchmark": [6, 8, 13, 43, 171, 206, 207, 247, 294, 295, 314, 344, 365, 372, 375, 385, 391, 393, 396, 397, 420, 480, 481, 491, 497, 514, 519, 533, 545, 552, 596, 597, 601, 605, 608, 614, 629, 631, 632], "int": [6, 8, 13, 15, 16, 40, 41, 43, 99, 101, 106, 135, 142, 144, 149, 162, 176, 185, 186, 187, 192, 197, 199, 200, 203, 214, 223, 224, 225, 236, 239, 241, 243, 244, 249, 251, 255, 260, 262, 263, 272, 279, 295, 297, 299, 302, 303, 311, 313, 314, 338, 344, 350, 363, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 388, 390, 391, 392, 393, 394, 395, 396, 398, 442, 477, 484, 485, 487, 489, 490, 491, 492, 493, 499, 500, 502, 507, 509, 512, 524, 580, 594, 622, 628], "control": [6, 8, 13, 43, 76, 150, 152, 263, 391, 396, 530, 577, 619, 629], "step": [6, 8, 13, 43, 44, 63, 64, 88, 103, 156, 160, 162, 163, 164, 165, 213, 247, 278, 279, 288, 290, 291, 292, 314, 334, 577, 582, 583, 584, 609, 612, 614, 617, 619, 620, 622, 624, 626, 627, 629], "mini": [6, 8, 13, 43, 632], "batch": [6, 8, 13, 15, 43, 58, 63, 111, 149, 156, 176, 178, 179, 184, 185, 197, 206, 207, 213, 214, 216, 217, 222, 223, 247, 263, 267, 269, 280, 285, 325, 334, 364, 375, 497, 577, 579, 582, 583, 617, 619, 628, 629, 632], "boolean": [6, 8, 13, 15, 43, 52, 163, 262, 499], "inspect": [6, 8, 13, 16, 43, 577, 625, 627], "tensor": [6, 8, 13, 15, 16, 17, 39, 40, 41, 43, 66, 98, 99, 101, 106, 118, 128, 135, 142, 144, 149, 157, 160, 162, 163, 164, 165, 197, 200, 203, 205, 239, 241, 242, 244, 269, 274, 283, 284, 288, 290, 292, 310, 311, 312, 313, 324, 344, 388, 391, 399, 428, 530, 580, 619, 620, 623, 625, 627, 628, 629], "query_fw_cap": [6, 8, 13, 16, 41, 43, 534], "return": [6, 8, 13, 15, 16, 17, 40, 41, 43, 44, 45, 46, 49, 52, 53, 56, 57, 58, 59, 63, 64, 66, 70, 75, 77, 81, 85, 86, 87, 88, 89, 90, 98, 99, 101, 106, 109, 111, 112, 118, 128, 135, 138, 140, 142, 143, 144, 147, 148, 149, 150, 152, 155, 156, 157, 159, 162, 163, 164, 165, 166, 168, 174, 175, 176, 178, 185, 188, 192, 195, 196, 197, 199, 200, 202, 203, 204, 205, 210, 214, 216, 223, 226, 230, 233, 234, 235, 236, 237, 238, 239, 240, 244, 245, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 263, 269, 270, 271, 272, 273, 279, 280, 283, 285, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 337, 340, 343, 344, 364, 365, 367, 374, 375, 376, 377, 378, 380, 381, 383, 384, 408, 411, 412, 413, 414, 445, 484, 487, 489, 491, 492, 493, 499, 502, 511, 512, 515, 530, 531, 554, 580, 584, 594, 596, 616, 623, 627, 629], "capabl": [6, 8, 13, 15, 16, 41, 42, 43, 327, 329, 331, 578, 588, 595, 605, 622, 623, 629, 631], "queri": [6, 8, 13, 15, 16, 41, 43, 106, 111, 118, 142, 267, 269, 320, 329, 331, 366, 373, 382, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 623], "query_fused_pattern": [6, 534], "fuse": [6, 15, 41, 43, 44, 45, 50, 54, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 75, 87, 88, 89, 90, 92, 127, 131, 132, 144, 148, 149, 153, 530, 627], "pattern": [6, 42, 43, 54, 55, 57, 58, 60, 63, 64, 66, 74, 75, 88, 92, 103, 104, 105, 106, 119, 120, 122, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134, 159, 161, 163, 164, 167, 171, 188, 192, 197, 226, 247, 278, 279, 281, 286, 290, 295, 329, 331, 388, 391, 404, 413, 414, 491, 515, 534, 580, 588, 591, 615, 617, 622, 632], "conv": [6, 7, 16, 17, 18, 30, 39, 44, 45, 54, 58, 62, 67, 68, 69, 88, 105, 106, 121, 131, 153, 162, 171, 295, 530, 619, 622], "relu": [6, 70, 74, 75, 105, 119, 121, 123, 124, 129, 131, 133, 530, 588, 627], "bn": [6, 58, 75, 77, 119, 632], "inspect_tensor": [6, 8, 13, 16, 43, 534], "op_list": [6, 8, 13, 16, 43, 144, 324, 534, 627], "iteration_list": [6, 8, 13, 16, 43, 534], "inspect_typ": [6, 8, 13, 16, 43, 399, 534], "activ": [6, 7, 8, 13, 16, 17, 18, 30, 43, 106, 124, 144, 147, 149, 212, 241, 244, 313, 329, 331, 404, 534, 577, 583, 588, 615, 618, 622, 623, 627, 631], "save_to_disk": [6, 8, 13, 16, 43, 534], "strategi": [6, 8, 13, 15, 16, 41, 149, 156, 171, 172, 188, 226, 247, 293, 295, 304, 315, 361, 383, 481, 499, 509, 533, 534, 544, 584, 591, 602, 614, 621, 622, 623, 624, 625, 631], "dump": [6, 8, 13, 16, 17, 41, 43, 98, 106, 204, 241, 244, 247, 311, 344, 354, 468, 489, 500, 512, 623, 627], "info": [6, 8, 13, 16, 17, 40, 44, 100, 106, 149, 162, 166, 197, 200, 201, 206, 207, 211, 244, 288, 294, 307, 308, 311, 312, 313, 338, 341, 344, 364, 365, 367, 374, 375, 378, 379, 381, 384, 484, 487, 492, 499, 515, 530, 577, 586, 596], "feed": [6, 8, 142, 185, 223, 361, 582], "list": [6, 8, 13, 15, 40, 41, 43, 49, 52, 75, 98, 99, 101, 106, 111, 118, 135, 142, 143, 144, 149, 150, 152, 155, 157, 162, 171, 174, 175, 179, 186, 197, 199, 200, 202, 203, 204, 205, 217, 224, 236, 238, 239, 241, 243, 244, 247, 248, 249, 251, 252, 253, 255, 260, 262, 263, 272, 280, 285, 288, 291, 295, 296, 297, 299, 300, 301, 302, 303, 304, 307, 311, 312, 313, 314, 315, 318, 320, 324, 327, 329, 330, 331, 334, 335, 338, 357, 359, 361, 362, 364, 366, 367, 368, 369, 371, 373, 374, 375, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 397, 398, 399, 408, 411, 413, 414, 416, 428, 431, 434, 435, 438, 439, 440, 442, 447, 450, 452, 454, 457, 458, 461, 464, 467, 477, 484, 489, 491, 492, 493, 497, 499, 500, 501, 502, 503, 505, 506, 507, 509, 511, 518, 530, 533, 534, 554, 580, 588, 592, 597, 602, 604, 607, 608, 611, 616, 619, 622, 624, 627, 629], "op": [6, 7, 8, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 48, 50, 52, 53, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 74, 75, 77, 81, 84, 87, 88, 89, 90, 92, 98, 99, 100, 101, 103, 105, 106, 119, 120, 121, 127, 129, 130, 131, 132, 134, 135, 137, 140, 142, 143, 144, 147, 148, 149, 153, 241, 244, 312, 317, 318, 320, 322, 324, 325, 329, 330, 331, 332, 339, 388, 391, 399, 404, 405, 413, 515, 534, 577, 588, 595, 619, 623, 624, 625, 627, 629, 631], "name": [6, 8, 15, 39, 40, 41, 43, 49, 58, 59, 63, 64, 66, 75, 98, 99, 100, 101, 106, 111, 112, 128, 135, 138, 142, 143, 144, 148, 149, 150, 152, 155, 157, 160, 162, 163, 164, 165, 168, 171, 186, 187, 188, 191, 192, 195, 196, 197, 200, 201, 203, 204, 205, 207, 208, 210, 211, 212, 224, 225, 226, 229, 230, 233, 234, 235, 237, 239, 241, 242, 243, 244, 250, 251, 254, 255, 260, 261, 263, 269, 274, 280, 283, 285, 288, 290, 292, 294, 298, 299, 302, 303, 307, 308, 310, 311, 312, 313, 314, 329, 330, 331, 333, 335, 337, 338, 340, 344, 364, 368, 369, 371, 374, 375, 376, 377, 378, 380, 399, 408, 410, 428, 431, 433, 434, 440, 447, 448, 449, 450, 461, 477, 484, 487, 499, 501, 502, 523, 530, 577, 580, 584, 588, 593, 594, 596, 600, 607, 611, 615, 618, 625, 626, 627, 629, 631, 632], "fp32": [6, 8, 13, 39, 41, 42, 43, 44, 45, 75, 87, 89, 127, 132, 137, 144, 147, 149, 154, 171, 174, 175, 241, 243, 244, 255, 303, 312, 313, 314, 318, 320, 324, 327, 329, 331, 337, 343, 344, 399, 533, 534, 577, 588, 589, 594, 595, 604, 622, 623, 624, 625, 626, 627, 629, 631, 632], "contain": [6, 8, 13, 15, 41, 52, 63, 64, 66, 70, 75, 98, 106, 109, 135, 142, 144, 155, 156, 159, 162, 163, 165, 166, 174, 175, 186, 187, 188, 192, 197, 224, 225, 226, 240, 241, 244, 246, 247, 251, 252, 253, 257, 260, 265, 266, 280, 281, 282, 283, 285, 288, 289, 290, 291, 292, 293, 295, 299, 300, 301, 304, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 334, 337, 343, 348, 352, 360, 366, 368, 369, 371, 372, 373, 376, 377, 380, 382, 386, 391, 396, 401, 402, 406, 409, 415, 420, 421, 427, 446, 453, 455, 456, 459, 460, 462, 465, 471, 476, 480, 484, 492, 580, 582, 591, 594, 615, 619, 620, 627, 629], "str": [6, 8, 15, 16, 17, 106, 135, 136, 143, 144, 148, 149, 150, 152, 157, 162, 176, 186, 187, 188, 192, 195, 196, 197, 199, 200, 203, 205, 209, 210, 214, 224, 225, 226, 230, 233, 234, 235, 236, 237, 239, 241, 243, 244, 245, 248, 249, 251, 253, 254, 255, 260, 262, 263, 272, 283, 295, 296, 297, 299, 301, 302, 303, 305, 306, 310, 311, 312, 313, 324, 329, 330, 333, 334, 337, 340, 344, 345, 346, 347, 350, 357, 358, 359, 361, 363, 364, 367, 368, 369, 371, 374, 375, 376, 377, 378, 379, 380, 383, 386, 387, 388, 390, 391, 396, 397, 398, 399, 404, 405, 408, 410, 411, 412, 413, 414, 416, 425, 426, 428, 429, 431, 433, 434, 435, 436, 438, 439, 440, 441, 443, 444, 445, 447, 449, 450, 452, 454, 457, 458, 461, 463, 464, 466, 467, 468, 469, 472, 473, 474, 477, 484, 486, 487, 489, 491, 492, 495, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 511, 512, 515, 516, 523, 524, 554, 580, 594, 622, 627, 628], "valu": [6, 8, 13, 17, 40, 41, 43, 51, 52, 58, 63, 64, 66, 85, 86, 98, 99, 101, 106, 111, 135, 137, 138, 142, 147, 149, 154, 155, 157, 160, 162, 166, 168, 171, 174, 175, 186, 189, 190, 197, 199, 200, 203, 204, 205, 224, 227, 228, 236, 239, 247, 251, 255, 261, 262, 267, 274, 277, 280, 285, 288, 289, 291, 299, 303, 304, 311, 313, 314, 315, 319, 324, 327, 329, 331, 334, 335, 337, 338, 344, 357, 359, 361, 366, 368, 369, 371, 373, 376, 377, 382, 386, 387, 408, 410, 449, 481, 484, 485, 489, 491, 497, 499, 502, 507, 509, 510, 512, 523, 530, 577, 580, 588, 594, 600, 616, 619, 620, 622, 623, 628, 629, 631], "ar": [6, 8, 17, 58, 63, 64, 70, 98, 101, 118, 128, 156, 162, 163, 171, 186, 197, 200, 203, 213, 224, 239, 247, 248, 251, 255, 261, 263, 267, 269, 272, 280, 285, 288, 289, 290, 291, 294, 295, 296, 299, 303, 311, 316, 317, 318, 319, 321, 337, 343, 344, 428, 431, 433, 440, 484, 493, 528, 529, 530, 531, 534, 554, 577, 579, 580, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 597, 600, 602, 605, 608, 614, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 628, 629, 631], "weight": [6, 8, 17, 39, 40, 43, 56, 57, 58, 75, 106, 118, 135, 137, 144, 147, 154, 160, 162, 163, 164, 165, 241, 244, 254, 255, 269, 274, 275, 277, 278, 284, 288, 290, 292, 302, 303, 307, 312, 313, 322, 327, 329, 331, 344, 404, 509, 534, 577, 583, 586, 588, 590, 594, 616, 619, 620, 622, 623, 627, 629, 631], "bool": [6, 8, 15, 16, 17, 41, 58, 59, 75, 98, 106, 111, 135, 142, 144, 148, 149, 162, 175, 186, 188, 197, 199, 200, 203, 224, 226, 236, 239, 241, 244, 249, 251, 255, 260, 262, 263, 269, 288, 295, 297, 299, 303, 313, 314, 327, 329, 330, 340, 344, 374, 408, 413, 416, 428, 431, 433, 434, 435, 436, 438, 439, 440, 441, 445, 447, 450, 468, 484, 485, 487, 492, 493, 499, 501, 502, 512, 518, 524, 580, 594, 622, 628], "save": [6, 8, 16, 40, 41, 43, 101, 106, 136, 166, 188, 192, 197, 226, 230, 235, 241, 243, 244, 261, 271, 294, 305, 306, 307, 309, 311, 312, 313, 314, 315, 320, 327, 334, 335, 338, 340, 344, 530, 534, 579, 590, 595, 596, 598, 602, 607, 611, 617, 619, 620, 623], "disk": [6, 8, 43], "memori": [6, 8, 70, 246, 247, 280, 285, 293, 314, 315, 344, 579, 583, 595, 597, 616, 619, 620, 623, 629], "numpi": [6, 8, 13, 40, 43, 63, 64, 66, 98, 99, 101, 106, 142, 203, 239, 245, 251, 255, 260, 262, 272, 299, 303, 587, 628], "arrai": [6, 8, 13, 39, 40, 43, 99, 106, 135, 142, 197, 200, 203, 239, 251, 255, 260, 262, 272, 299, 303, 311, 313, 319, 344, 628], "node0_nam": [6, 8, 43], "weight0_nam": [6, 8, 13, 43], "bias0_nam": [6, 8, 13, 43], "node1_nam": [6, 8, 43], "weight1_nam": [6, 8, 43], "bias1_nam": [6, 8, 43], "0": [6, 8, 15, 16, 39, 40, 41, 42, 49, 86, 98, 101, 106, 135, 142, 144, 147, 151, 153, 157, 162, 165, 171, 176, 178, 183, 186, 189, 190, 193, 197, 199, 200, 203, 205, 206, 207, 214, 216, 221, 224, 227, 228, 231, 236, 239, 241, 244, 246, 247, 255, 260, 262, 263, 267, 269, 272, 280, 285, 288, 293, 295, 302, 303, 313, 314, 315, 320, 329, 331, 484, 492, 530, 577, 580, 582, 584, 586, 588, 589, 592, 593, 594, 595, 600, 602, 607, 611, 618, 619, 620, 622, 623, 625, 626, 627, 628, 629, 631], "output0_nam": [6, 8, 43], "output1_nam": [6, 8, 43], "set_tensor": [6, 8, 13, 43, 534], "tensor_dict": [6, 8, 13, 43, 534], "set": [6, 8, 13, 15, 17, 40, 41, 42, 53, 63, 64, 92, 98, 99, 101, 106, 111, 135, 142, 149, 150, 152, 155, 162, 163, 166, 168, 171, 174, 175, 176, 178, 186, 188, 191, 197, 203, 204, 209, 210, 214, 216, 224, 226, 229, 239, 240, 244, 246, 247, 251, 256, 257, 258, 260, 267, 269, 270, 280, 285, 289, 294, 295, 299, 304, 312, 314, 315, 327, 329, 330, 331, 334, 338, 344, 346, 386, 387, 388, 391, 408, 454, 458, 466, 487, 491, 497, 498, 500, 501, 502, 507, 511, 512, 516, 528, 531, 577, 578, 580, 584, 588, 590, 591, 592, 594, 595, 597, 599, 601, 615, 619, 622, 623, 626, 629, 631], "back": [6, 8, 13, 43, 118, 149, 203, 209, 239, 260, 275, 327, 614], "usual": [6, 8, 13, 186, 224, 247, 280, 285, 582, 617, 623], "note": [6, 8, 13, 50, 162, 247, 251, 280, 285, 291, 299, 325, 380, 391, 395, 531, 577, 584, 588, 592, 599, 602, 607, 611, 614, 619, 623, 627, 629, 631], "float": [6, 8, 13, 16, 40, 41, 43, 106, 135, 144, 162, 163, 164, 165, 166, 186, 197, 199, 200, 224, 236, 247, 248, 249, 251, 252, 253, 260, 262, 263, 279, 280, 285, 288, 290, 291, 292, 296, 297, 299, 300, 301, 307, 312, 313, 314, 319, 347, 365, 374, 383, 384, 399, 405, 460, 468, 484, 485, 489, 491, 497, 499, 500, 507, 509, 510, 518, 554, 580, 594, 622, 623, 628], "ha": [6, 8, 13, 40, 58, 59, 63, 64, 66, 70, 75, 76, 88, 98, 99, 100, 106, 118, 135, 162, 163, 204, 247, 248, 262, 288, 290, 296, 529, 531, 534, 554, 577, 579, 586, 591, 595, 600, 614, 620, 622, 623, 624, 626, 629], "respons": [6, 8, 13, 487, 491, 498, 511, 515, 516, 520, 522, 524, 525, 623], "int8": [6, 7, 8, 13, 19, 20, 40, 41, 42, 43, 44, 45, 83, 107, 119, 120, 121, 127, 129, 130, 131, 132, 137, 142, 144, 154, 155, 171, 199, 236, 241, 242, 243, 244, 312, 313, 320, 329, 331, 333, 399, 530, 534, 577, 578, 580, 583, 588, 599, 602, 604, 605, 608, 614, 622, 623, 624, 625, 626, 627, 628, 631], "int32": [6, 8, 13, 106, 241, 244, 580], "format": [6, 8, 13, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 49, 63, 64, 99, 142, 186, 187, 188, 192, 197, 224, 225, 226, 230, 235, 241, 244, 247, 251, 257, 260, 271, 299, 313, 324, 329, 331, 450, 489, 507, 580, 584, 586, 594, 595, 596, 597, 623], "someth": [6, 8, 13, 174, 175, 188, 226, 315, 334], "like": [6, 8, 13, 70, 75, 92, 94, 106, 135, 142, 162, 174, 175, 176, 188, 192, 197, 214, 226, 230, 235, 246, 247, 255, 261, 290, 293, 294, 302, 303, 312, 315, 334, 529, 530, 531, 534, 577, 582, 583, 591, 602, 617, 619, 623, 625, 629], "quantize_input": [6, 8, 39, 43], "abl": [6, 8, 43, 77, 174, 175, 202, 238, 304, 315, 334, 605, 614, 619, 623], "take": [6, 8, 43, 98, 162, 174, 175, 179, 197, 200, 203, 207, 208, 217, 239, 288, 302, 303, 304, 315, 319, 334, 528, 530, 531, 577, 579, 582, 588, 614, 619, 623, 624, 628, 629, 631], "input": [6, 8, 15, 16, 17, 39, 40, 41, 43, 49, 56, 58, 59, 60, 63, 64, 66, 67, 68, 70, 75, 76, 78, 79, 81, 82, 98, 99, 101, 105, 106, 111, 112, 118, 128, 135, 136, 138, 142, 143, 144, 147, 148, 149, 153, 156, 157, 162, 163, 171, 174, 175, 186, 187, 188, 190, 192, 197, 199, 200, 202, 203, 205, 207, 208, 213, 224, 225, 226, 228, 236, 238, 239, 240, 241, 242, 243, 244, 246, 247, 251, 256, 263, 267, 269, 280, 285, 294, 295, 299, 302, 303, 304, 307, 308, 310, 311, 312, 313, 315, 334, 344, 346, 357, 380, 385, 386, 388, 391, 392, 393, 394, 395, 428, 431, 438, 439, 440, 442, 454, 458, 463, 466, 472, 497, 500, 506, 531, 534, 577, 578, 579, 580, 582, 583, 584, 586, 588, 590, 594, 596, 597, 602, 619, 622, 623, 627, 628, 631], "scale": [6, 8, 16, 17, 39, 40, 41, 43, 58, 63, 96, 137, 147, 153, 154, 197, 199, 200, 203, 236, 239, 244, 311, 586, 623, 626, 628], "type": [6, 8, 13, 15, 16, 17, 40, 41, 42, 43, 53, 56, 57, 58, 59, 64, 66, 70, 75, 81, 87, 88, 89, 90, 92, 98, 99, 101, 106, 109, 111, 112, 118, 128, 135, 142, 143, 144, 147, 149, 150, 152, 157, 162, 163, 164, 165, 166, 168, 171, 175, 176, 184, 186, 188, 192, 195, 196, 197, 200, 203, 205, 210, 214, 222, 224, 226, 230, 233, 234, 235, 237, 239, 241, 244, 245, 247, 248, 249, 251, 254, 255, 257, 260, 262, 269, 272, 279, 281, 282, 283, 288, 290, 292, 294, 296, 297, 299, 302, 303, 305, 306, 307, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 340, 343, 357, 362, 376, 377, 386, 387, 389, 391, 429, 484, 487, 489, 491, 494, 495, 529, 534, 554, 577, 580, 584, 588, 591, 595, 615, 619, 623, 626, 628, 629, 631], "path": [6, 8, 16, 41, 43, 101, 106, 135, 136, 142, 166, 167, 186, 187, 188, 192, 197, 200, 203, 224, 225, 226, 239, 240, 241, 243, 244, 246, 247, 257, 258, 259, 260, 263, 270, 271, 280, 285, 289, 291, 293, 294, 304, 311, 312, 313, 315, 329, 331, 334, 340, 344, 345, 350, 364, 367, 374, 375, 378, 385, 386, 391, 393, 394, 408, 414, 425, 428, 431, 433, 434, 436, 438, 439, 440, 441, 445, 452, 457, 461, 464, 467, 468, 474, 484, 492, 497, 499, 500, 509, 524, 530, 531, 534, 577, 579, 580, 584, 590, 594, 595, 596, 600, 603, 614, 617, 628, 631], "where": [6, 8, 17, 40, 63, 118, 162, 251, 255, 267, 269, 271, 273, 288, 299, 302, 303, 582, 607, 611, 615, 619, 627], "convert": [6, 8, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 52, 62, 70, 77, 82, 93, 95, 96, 98, 99, 100, 101, 127, 132, 136, 143, 149, 186, 197, 199, 200, 202, 203, 224, 236, 238, 239, 241, 243, 247, 251, 255, 257, 271, 273, 289, 299, 303, 305, 306, 317, 331, 334, 366, 373, 382, 477, 489, 530, 537, 595, 599, 623, 624, 628], "sourc": [6, 8, 17, 43, 207, 247, 249, 257, 269, 295, 297, 337, 412, 526, 530, 533, 593, 607, 609, 611, 612, 614, 621], "destinatin": [6, 8], "anoth": [6, 8, 43, 98, 105, 106, 197, 200, 203, 239, 247, 248, 257, 296, 334, 344, 554, 582, 595, 607, 611, 628, 629], "destin": [6, 8, 17, 43, 241, 242, 247, 257], "mxnet_util": 7, "util": [7, 14, 18, 98, 101, 106, 107, 135, 136, 143, 144, 145, 146, 148, 159, 161, 212, 241, 247, 249, 289, 295, 297, 323, 325, 349, 350, 351, 353, 355, 356, 359, 364, 375, 378, 381, 385, 386, 391, 393, 394, 396, 404, 405, 410, 412, 413, 416, 420, 426, 427, 435, 437, 461, 467, 471, 476, 480, 513, 535, 584, 597, 623, 629], "ox_util": 7, "oper": [7, 18, 40, 98, 100, 106, 142, 162, 197, 199, 200, 236, 269, 288, 320, 511, 515, 530, 577, 578, 579, 586, 614, 623, 628, 629], "argmax": [7, 18, 30], "attent": [7, 18, 30, 186, 224, 267, 269, 528, 582], "binary_op": [7, 18, 30], "concat": [7, 18, 30, 141, 484], "direct_q8": [7, 18, 30], "embed_layernorm": [7, 18, 30], "gather": [7, 15, 17, 18, 30, 162, 288, 487], "gavgpool": [7, 18, 30], "gemm": [7, 18, 30, 619], "lstm": [7, 18, 30], "matmul": [7, 16, 17, 18, 30, 42, 48, 55, 61, 69, 75, 81, 90, 105, 106, 124, 133, 162, 244, 288, 586, 588], "maxpool": [7, 18, 30, 125, 134, 588], "pad": [7, 18, 30, 67, 68, 186, 197, 200, 203, 224, 239, 267, 269, 580, 628], "pool": [7, 18, 30, 134], "resiz": [7, 18, 30, 186, 187, 192, 197, 199, 200, 203, 224, 225, 236, 239, 579, 580, 628], "split": [7, 18, 30, 40, 75, 78, 135, 197, 200, 202, 203, 238, 239, 260, 530, 628], "tf_util": 7, "graph_rewrit": [7, 107], "bf16": [7, 42, 43, 44, 45, 53, 77, 83, 87, 89, 107, 143, 171, 313, 318, 320, 329, 331, 344, 534, 537, 588, 595, 599, 604, 608, 614, 624, 629], "onnx": [7, 16, 17, 30, 39, 40, 83, 107, 136, 145, 153, 182, 220, 241, 242, 243, 244, 245, 304, 305, 306, 311, 312, 313, 334, 342, 347, 450, 533, 534, 535, 537, 579, 585, 586, 588, 589, 591, 595, 596, 599, 604, 605, 621, 622, 629], "qdq": [7, 19, 21, 22, 23, 24, 26, 28, 29, 32, 34, 36, 38, 39, 44, 83, 107, 108, 109, 136, 149, 171, 241, 242, 243, 244, 311, 313, 534, 586, 591, 604, 605, 623], "graph_bas": [7, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 103, 104, 105, 107], "quantize_graph": [7, 107], "qat": [7, 41, 107, 108, 148, 171, 244, 247, 257, 295, 312, 583, 584, 586, 591, 623], "quantize_graph_bas": [7, 107, 108, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134], "quantize_graph_bn": [7, 107, 108], "quantize_graph_concatv2": [7, 107, 108], "quantize_graph_conv": [7, 107, 108], "quantize_graph_for_intel_cpu": [7, 107, 108], "quantize_graph_matmul": [7, 107, 108], "quantize_graph_pool": [7, 107, 108], "transform_graph": [7, 107], "bias_correct": [7, 107, 139], "graph_transform_bas": [7, 107, 137, 139, 140, 141], "insert_log": [7, 107, 139], "rerange_quantized_concat": [7, 107, 139], "graph_convert": [7, 107], "graph_converter_without_calib": [7, 107], "graph_util": [7, 107], "quantize_graph_common": [7, 107], "tf2onnx_convert": [7, 107], "torch_util": [7, 207, 247, 295], "bf16_convert": [7, 44, 45, 47, 83, 107, 145], "hawq_metr": [7, 145], "symbolic_trac": [7, 145], "tensorflow": [7, 47, 49, 71, 72, 73, 77, 83, 91, 97, 98, 99, 100, 101, 102, 106, 107, 108, 110, 113, 118, 126, 136, 139, 142, 185, 186, 187, 188, 191, 192, 193, 195, 196, 197, 200, 203, 205, 210, 223, 224, 225, 226, 229, 230, 231, 233, 234, 235, 237, 239, 241, 243, 244, 245, 246, 247, 249, 251, 254, 255, 256, 257, 293, 297, 299, 302, 303, 304, 312, 315, 325, 344, 406, 407, 419, 420, 427, 476, 477, 478, 480, 531, 533, 534, 577, 579, 582, 583, 585, 586, 588, 589, 591, 592, 595, 596, 604, 605, 619, 621, 622, 626, 629, 631], "kerasadaptor": 8, "specifi": [8, 13, 16, 17, 41, 42, 43, 75, 98, 106, 135, 155, 174, 175, 203, 204, 239, 246, 247, 251, 254, 255, 258, 261, 263, 270, 271, 274, 280, 285, 293, 294, 299, 302, 303, 304, 313, 315, 329, 331, 334, 343, 344, 361, 364, 367, 374, 375, 376, 378, 379, 380, 385, 386, 388, 389, 391, 393, 394, 398, 399, 400, 413, 445, 449, 450, 451, 470, 475, 491, 495, 499, 512, 516, 577, 584, 588, 594, 602, 616, 622, 623, 628, 629, 631], "function": [8, 13, 16, 39, 43, 58, 98, 106, 135, 147, 174, 175, 187, 213, 225, 246, 247, 258, 269, 270, 271, 280, 285, 291, 294, 311, 335, 530, 531, 534, 577, 578, 579, 582, 583, 590, 591, 592, 594, 595, 605, 615, 619, 620, 623, 626, 627, 629], "fp32_baselin": [8, 13, 16, 41, 43, 337, 534], "boolen": [8, 16, 41, 43], "onli": [8, 13, 16, 17, 40, 41, 43, 44, 45, 49, 58, 59, 63, 64, 66, 70, 82, 98, 105, 111, 130, 134, 137, 147, 153, 154, 155, 162, 163, 186, 204, 206, 207, 210, 224, 247, 257, 269, 274, 288, 290, 311, 321, 325, 326, 327, 499, 509, 511, 512, 534, 578, 579, 584, 586, 588, 595, 602, 615, 619, 620, 622, 627, 629, 631], "compare_label": [8, 13, 16, 41, 43, 255, 303, 594], "pipelin": [8, 13, 16, 41, 43, 156, 159, 240, 247, 258, 259, 270, 291, 294, 583, 617], "get_optype_wise_": [8, 43], "quantizable_op_detail": 8, "get": [8, 15, 16, 17, 40, 41, 42, 43, 63, 64, 66, 75, 98, 99, 100, 101, 106, 111, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 131, 133, 135, 138, 142, 144, 146, 149, 150, 152, 155, 156, 160, 162, 163, 164, 165, 168, 171, 174, 176, 179, 197, 200, 203, 204, 210, 212, 213, 214, 217, 235, 237, 239, 244, 245, 246, 247, 256, 263, 267, 273, 280, 285, 288, 290, 292, 293, 294, 295, 304, 307, 311, 312, 313, 314, 315, 319, 324, 329, 331, 333, 334, 337, 339, 341, 344, 345, 350, 357, 358, 359, 361, 364, 367, 368, 369, 371, 374, 375, 376, 377, 378, 379, 380, 385, 386, 388, 390, 391, 392, 393, 394, 395, 398, 399, 400, 403, 407, 408, 413, 425, 428, 429, 431, 433, 434, 438, 439, 440, 442, 445, 447, 449, 450, 451, 452, 457, 461, 464, 467, 468, 470, 474, 475, 477, 479, 486, 487, 491, 495, 497, 499, 500, 502, 506, 509, 511, 512, 515, 516, 520, 522, 523, 524, 525, 577, 591, 592, 600, 629, 633], "wise": [8, 17, 43, 137, 154, 162, 288, 318, 319, 320, 324, 329, 330, 388, 391, 499, 577, 591, 619, 620, 627, 629, 631], "union": [8, 43, 255, 303, 334, 489, 594], "each": [8, 16, 17, 40, 41, 42, 43, 82, 106, 111, 138, 144, 162, 163, 184, 188, 191, 197, 199, 200, 203, 222, 226, 229, 236, 239, 249, 251, 252, 253, 262, 263, 269, 290, 297, 299, 300, 301, 307, 311, 312, 313, 314, 318, 324, 529, 534, 577, 580, 582, 583, 588, 599, 605, 608, 614, 616, 619, 620, 626, 627, 628, 629], "kei": [8, 40, 41, 43, 106, 111, 135, 138, 142, 144, 162, 166, 168, 247, 251, 267, 269, 272, 280, 285, 289, 291, 299, 311, 312, 319, 327, 335, 337, 338, 344, 491, 507, 533, 577, 586, 627], "while": [8, 43, 99, 138, 163, 269, 290, 319, 534, 577, 580, 585, 589, 591, 595, 597, 602, 614, 622, 623], "detail": [8, 43, 147, 153, 197, 200, 203, 239, 267, 364, 367, 374, 375, 378, 380, 381, 383, 385, 386, 388, 391, 392, 393, 394, 395, 399, 404, 467, 472, 486, 499, 528, 529, 533, 588, 589, 590, 594, 595, 597, 605, 614, 619, 625, 626, 627, 629, 632], "kerasqueri": 8, "local_config_fil": [8, 41, 43], "querybackendcap": [8, 41, 42, 43, 534], "defin": [8, 41, 42, 43, 82, 88, 98, 106, 135, 144, 157, 162, 163, 164, 165, 174, 175, 205, 247, 258, 259, 262, 270, 271, 272, 273, 280, 285, 288, 289, 290, 291, 292, 304, 312, 315, 319, 334, 343, 422, 423, 424, 511, 528, 531, 534, 577, 579, 580, 582, 583, 588, 591, 594, 615, 617, 619, 620, 623, 626, 627, 629, 631], "interfac": [8, 41, 42, 82, 106, 109, 128, 138, 167, 171, 246, 247, 262, 263, 280, 285, 293, 294, 295, 314, 327, 337, 339, 345, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 461, 467, 474, 486, 591, 605, 618, 623, 625], "adapt": [8, 41, 42, 528, 533, 580, 605, 621], "should": [8, 17, 39, 41, 42, 43, 50, 70, 75, 111, 112, 138, 162, 163, 174, 175, 184, 186, 188, 192, 197, 200, 202, 203, 207, 208, 222, 224, 226, 230, 235, 238, 239, 244, 249, 254, 255, 290, 294, 297, 302, 303, 304, 315, 327, 334, 340, 344, 408, 489, 530, 531, 534, 577, 580, 584, 594, 595, 600, 609, 612, 614, 616, 620, 623, 628, 629, 631], "implement": [8, 41, 42, 43, 82, 106, 128, 137, 138, 141, 162, 163, 164, 165, 174, 175, 181, 184, 185, 186, 188, 192, 197, 219, 222, 223, 224, 226, 230, 235, 248, 254, 255, 283, 288, 292, 296, 302, 303, 304, 314, 315, 322, 327, 334, 554, 579, 580, 605, 615, 620, 625, 627, 629, 631], "inherit": [8, 41, 42, 98, 156, 157, 163, 165, 183, 203, 205, 213, 221, 239, 247, 290, 292, 531, 534, 580], "specif": [8, 13, 16, 41, 42, 98, 100, 111, 112, 155, 166, 186, 187, 188, 189, 192, 193, 195, 196, 197, 204, 210, 224, 225, 226, 227, 231, 233, 234, 235, 247, 248, 251, 257, 258, 269, 270, 271, 274, 275, 277, 278, 279, 295, 296, 299, 313, 340, 375, 386, 387, 388, 391, 399, 414, 528, 531, 534, 577, 582, 588, 590, 594, 595, 596, 597, 601, 602, 604, 608, 614, 616, 619, 622, 629, 631], "backend": [8, 17, 41, 42, 43, 153, 171, 172, 173, 177, 178, 182, 186, 187, 189, 190, 191, 192, 193, 197, 200, 203, 209, 210, 215, 216, 218, 220, 224, 225, 227, 228, 229, 230, 231, 235, 237, 239, 256, 295, 304, 305, 306, 308, 311, 325, 530, 584, 590, 591, 595, 603, 622, 623, 628, 631], "own": [8, 41, 42, 70, 184, 203, 222, 239, 314, 531, 577, 579, 580, 591, 594, 616, 626], "get_vers": [8, 42, 43], "current": [8, 15, 39, 40, 42, 43, 58, 63, 64, 66, 70, 98, 100, 106, 111, 147, 160, 162, 163, 165, 247, 257, 263, 274, 275, 277, 278, 279, 280, 285, 288, 290, 291, 292, 311, 319, 321, 324, 325, 327, 530, 531, 534, 577, 584, 588, 592, 594, 595, 597, 601, 614, 616, 619, 620, 623, 629], "version": [8, 15, 39, 42, 43, 49, 100, 149, 174, 241, 243, 244, 269, 295, 313, 319, 340, 447, 482, 487, 499, 528, 530, 534, 577, 588, 592, 593, 607, 609, 611, 612, 618, 621, 629], "infom": [8, 43, 206, 207, 244], "get_precis": [8, 42, 361], "support": [8, 15, 40, 41, 42, 43, 70, 77, 93, 100, 147, 153, 155, 156, 157, 162, 163, 171, 174, 175, 176, 185, 186, 188, 192, 195, 196, 197, 199, 200, 203, 204, 205, 206, 207, 210, 213, 214, 223, 224, 226, 230, 233, 234, 235, 236, 237, 239, 247, 254, 255, 257, 262, 263, 269, 272, 280, 281, 282, 283, 285, 288, 290, 294, 295, 302, 303, 304, 308, 314, 315, 325, 329, 331, 334, 337, 339, 361, 428, 431, 433, 434, 436, 438, 439, 440, 441, 447, 481, 489, 499, 526, 533, 577, 597, 602, 605, 608, 614, 620, 621, 624, 626, 629], "get_op_typ": [8, 41, 42, 43], "A": [8, 16, 40, 41, 43, 50, 52, 63, 64, 66, 70, 71, 99, 106, 109, 111, 112, 118, 135, 142, 147, 149, 150, 152, 156, 159, 160, 162, 163, 164, 165, 166, 188, 192, 197, 202, 203, 206, 207, 208, 209, 226, 230, 235, 238, 239, 240, 247, 248, 251, 252, 253, 255, 258, 270, 271, 272, 273, 280, 281, 282, 283, 285, 288, 289, 290, 291, 292, 296, 299, 300, 301, 302, 303, 304, 306, 308, 312, 316, 317, 318, 319, 321, 322, 324, 325, 326, 329, 332, 334, 580, 585, 588, 594, 596, 607, 608, 611, 614, 619, 621, 628, 629, 631], "compos": [8, 41, 43, 135, 197, 200, 203, 239, 337, 628], "dictionari": [8, 17, 41, 43, 63, 64, 66, 118, 143, 144, 149, 168, 171, 202, 238, 251, 258, 260, 263, 269, 270, 271, 273, 295, 299, 311, 366, 368, 369, 371, 373, 376, 377, 382, 386, 387, 389], "which": [8, 15, 41, 43, 51, 63, 64, 76, 79, 105, 106, 111, 135, 144, 147, 160, 162, 163, 165, 174, 186, 187, 188, 192, 197, 199, 200, 204, 224, 225, 226, 236, 247, 248, 251, 253, 261, 263, 271, 272, 274, 275, 277, 278, 279, 280, 281, 282, 283, 288, 289, 290, 291, 292, 296, 299, 301, 308, 311, 314, 317, 319, 327, 340, 344, 497, 528, 530, 531, 534, 554, 577, 579, 580, 582, 584, 588, 591, 594, 595, 596, 598, 602, 605, 608, 614, 615, 617, 619, 620, 622, 623, 624, 625, 627, 628, 629, 631], "get_quantization_cap": [8, 41, 42, 43], "describ": [8, 41, 43, 63, 64, 263, 534, 577, 588, 627], "get_op_types_by_precis": [8, 41, 43], "per": [8, 17, 39, 40, 41, 42, 43, 147, 153, 155, 162, 176, 185, 204, 214, 223, 251, 263, 299, 339, 344, 364, 534, 577, 618, 624, 632], "mxnetadaptor": 13, "nc_model": [13, 15, 280, 285, 334], "config": [13, 15, 16, 17, 41, 42, 43, 109, 111, 112, 114, 118, 149, 155, 160, 162, 163, 164, 165, 166, 174, 175, 186, 204, 213, 224, 246, 247, 260, 268, 271, 274, 275, 277, 278, 279, 280, 285, 288, 289, 290, 291, 292, 295, 304, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 329, 331, 332, 334, 337, 338, 343, 344, 345, 346, 349, 350, 351, 353, 355, 356, 359, 385, 391, 393, 394, 398, 399, 443, 445, 452, 454, 457, 458, 461, 463, 464, 466, 467, 474, 477, 480, 488, 499, 502, 503, 504, 505, 507, 509, 510, 512, 520, 522, 525, 531, 533, 545, 577, 578, 582, 583, 584, 586, 589, 591, 595, 596, 617, 619, 622, 623, 624, 626, 627, 629], "unimpl": [13, 16], "yet": [13, 16, 43, 162, 531, 577, 609, 612, 615], "mxnetmodel": [13, 309], "data_x": [13, 15], "loader": [13, 15, 174, 175, 294, 304, 315, 334, 340], "acc": [13, 16, 255, 263, 303, 314, 531, 627, 632], "level": [13, 171, 295, 320, 327, 338, 341, 490, 512, 528, 629], "modelwis": 13, "opwis": 13, "save_path": [13, 16, 43, 136, 142, 241, 243, 244, 305, 306, 311, 312, 313, 334, 534, 596], "quantization_cfg": [13, 16, 43, 534], "includ": [13, 44, 45, 157, 160, 162, 164, 165, 186, 188, 192, 195, 196, 197, 200, 203, 205, 224, 226, 230, 233, 234, 235, 237, 239, 246, 247, 251, 256, 269, 288, 292, 293, 299, 304, 315, 321, 327, 329, 332, 528, 529, 534, 577, 580, 592, 593, 594, 595, 597, 600, 603, 608, 619, 620, 623, 624, 627, 629], "recover_tuned_model": [13, 43], "q_config": [13, 16, 17, 39, 42, 43, 241, 244, 307, 311, 312, 534], "recov": [13, 16, 43, 147, 344, 534, 583], "mxnet": [14, 15, 181, 185, 188, 191, 192, 195, 196, 197, 200, 203, 219, 223, 226, 229, 230, 233, 234, 235, 237, 239, 246, 247, 254, 255, 293, 302, 303, 304, 309, 315, 533, 534, 579, 585, 588, 591, 592, 595, 596, 622, 629, 631], "init": [14, 18, 152, 157, 158, 161, 205, 327, 580, 594], "optyp": [15, 242], "enum": [15, 40, 344, 449, 481], "isiter": 15, "obj": [15, 101, 155, 166, 185, 223, 240, 246, 247, 257, 258, 259, 270, 271, 280, 285, 289, 293, 294, 295, 304, 314, 315, 334, 337, 344], "check": [15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 58, 59, 63, 64, 75, 98, 99, 100, 101, 106, 111, 118, 142, 149, 162, 163, 166, 171, 175, 188, 226, 242, 247, 257, 289, 294, 311, 314, 319, 327, 344, 386, 391, 428, 431, 433, 434, 436, 438, 439, 440, 441, 447, 450, 468, 484, 485, 487, 492, 499, 501, 529, 533, 577, 584, 592, 598, 600, 602, 609, 612, 613, 625], "whether": [15, 16, 17, 41, 43, 98, 99, 101, 111, 112, 142, 162, 176, 184, 186, 197, 199, 200, 203, 214, 222, 224, 236, 239, 240, 247, 249, 251, 255, 269, 280, 285, 288, 290, 297, 299, 303, 314, 327, 337, 340, 344, 450, 534, 580, 594, 628], "true": [15, 16, 17, 39, 41, 43, 58, 59, 75, 81, 98, 99, 106, 109, 111, 140, 142, 144, 155, 162, 171, 175, 176, 184, 186, 188, 189, 197, 200, 202, 203, 204, 214, 222, 224, 226, 227, 238, 239, 241, 244, 249, 251, 255, 260, 267, 269, 274, 283, 288, 297, 299, 303, 313, 314, 327, 329, 330, 337, 445, 484, 487, 492, 493, 499, 580, 584, 588, 594, 597, 600, 601, 622, 623, 627, 628, 629, 631], "els": [15, 58, 59, 142, 184, 222, 314, 320, 327, 484, 499, 602, 627], "ensure_list": 15, "x": [15, 50, 63, 64, 66, 70, 143, 185, 197, 200, 203, 223, 239, 263, 267, 269, 319, 584, 595, 596, 619, 623, 627, 628], "ensur": [15, 17, 197, 200, 203, 239, 291, 319, 363, 396, 428, 431, 433, 440, 482, 577, 584, 586, 623, 628], "check_mx_vers": 15, "mx": 15, "__version__": 15, "combine_cap": 15, "new": [15, 52, 98, 99, 103, 106, 128, 142, 155, 162, 165, 176, 188, 197, 200, 203, 204, 214, 226, 235, 237, 239, 269, 288, 289, 292, 294, 314, 327, 330, 390, 391, 395, 511, 529, 584, 595, 608, 614, 615, 621, 623, 625, 626, 628, 631], "combin": [15, 42, 149, 171, 174, 175, 197, 199, 200, 213, 236, 247, 294, 295, 304, 315, 334, 344, 530, 534, 591, 617, 621, 624, 628, 629], "make_nc_model": 15, "target": [15, 40, 41, 85, 86, 98, 106, 135, 157, 162, 165, 166, 174, 205, 260, 277, 279, 289, 292, 314, 317, 319, 412, 413, 580, 584, 619, 620, 627, 628, 629, 631], "sym_model": 15, "ctx": [15, 136], "input_desc": 15, "symbol": [15, 143, 148, 149, 248, 296, 304, 315, 530, 537, 596], "neural": [15, 41, 144, 155, 156, 162, 171, 197, 198, 199, 200, 203, 204, 207, 210, 213, 236, 237, 239, 241, 247, 254, 255, 257, 280, 285, 288, 291, 293, 294, 295, 302, 303, 304, 306, 308, 315, 322, 323, 329, 334, 340, 403, 407, 431, 440, 479, 486, 499, 526, 529, 534, 563, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 593, 594, 595, 596, 598, 599, 602, 604, 605, 607, 609, 611, 612, 613, 616, 617, 621, 623, 625, 627, 628, 629, 631], "compressor": [15, 41, 155, 156, 162, 171, 197, 198, 199, 200, 203, 204, 207, 210, 213, 236, 237, 239, 241, 247, 254, 255, 257, 288, 291, 293, 294, 295, 302, 303, 304, 306, 308, 315, 323, 329, 334, 340, 403, 407, 431, 440, 479, 486, 499, 526, 529, 531, 534, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 593, 594, 595, 596, 597, 598, 602, 604, 605, 607, 609, 611, 612, 613, 616, 617, 619, 621, 623, 625, 627, 628, 629, 631], "tupl": [15, 41, 43, 101, 106, 118, 149, 157, 162, 174, 175, 197, 199, 200, 203, 205, 236, 239, 241, 244, 251, 260, 263, 269, 299, 304, 314, 315, 324, 329, 330, 331, 334, 414, 445, 499, 518, 580, 594, 628], "symnet": 15, "arg": [15, 41, 49, 101, 186, 187, 188, 192, 197, 224, 225, 226, 246, 247, 257, 269, 285, 288, 293, 294, 305, 306, 307, 310, 313, 319, 338, 340, 341, 349, 351, 353, 354, 355, 356, 366, 368, 369, 371, 373, 376, 377, 382, 484, 492, 512, 579, 580, 584, 603, 623, 627, 628], "aux": 15, "descript": [15, 106, 128, 135, 244, 245, 251, 271, 299, 313, 529, 530], "ncmodel": 15, "suppli": [15, 267], "get_framework_nam": [15, 428, 431, 433, 440], "prepare_model_data": 15, "prepar": [15, 41, 149, 213, 240, 247, 280, 285, 291, 293, 386, 391, 479, 530, 533, 580, 584, 589, 623], "dataloaderwrap": 15, "prepare_model": 15, "create_data_exampl": 15, "exampl": [15, 41, 111, 144, 149, 155, 171, 186, 187, 188, 192, 197, 199, 202, 203, 224, 225, 226, 236, 238, 239, 251, 252, 253, 255, 261, 291, 295, 299, 300, 301, 303, 304, 313, 314, 315, 334, 372, 390, 396, 420, 444, 445, 446, 447, 492, 499, 528, 529, 533, 577, 590, 591, 597, 600, 601, 602, 605, 624, 625, 628, 629, 633], "prepare_dataload": 15, "io": [15, 533], "ndarray_to_devic": 15, "ndarrai": [15, 63, 64, 66, 98, 99, 106, 203, 239, 260, 262, 313, 319, 335, 338, 587, 628], "devic": [15, 75, 85, 86, 87, 88, 89, 90, 93, 103, 106, 127, 132, 135, 141, 144, 157, 171, 205, 263, 295, 582, 595, 597, 600, 605, 614, 619, 622], "is_model_quant": 15, "query_quantizable_nod": 15, "node": [15, 17, 23, 25, 34, 38, 39, 40, 43, 44, 45, 46, 49, 50, 51, 52, 56, 58, 59, 60, 63, 64, 66, 70, 73, 75, 76, 78, 79, 80, 94, 98, 99, 101, 105, 106, 128, 135, 136, 138, 142, 241, 242, 244, 305, 306, 307, 311, 312, 313, 327, 397, 410, 411, 412, 413, 414, 415, 420, 428, 431, 438, 439, 440, 477, 478, 480, 534, 577, 584, 627], "map": [15, 40, 43, 98, 101, 128, 138, 144, 162, 164, 203, 239, 241, 242, 244, 246, 247, 250, 251, 252, 253, 255, 260, 280, 285, 288, 290, 293, 298, 299, 300, 301, 302, 303, 315, 449, 580, 584, 594, 607, 611, 619, 620, 623], "quantize_sym_model": 15, "qconfig": [15, 627], "accord": [15, 43, 98, 118, 155, 162, 165, 171, 174, 186, 187, 188, 192, 197, 200, 203, 224, 225, 226, 235, 237, 239, 247, 269, 274, 277, 278, 279, 292, 293, 313, 317, 318, 319, 320, 322, 324, 327, 329, 331, 337, 498, 531, 534, 580, 584, 619, 620, 624, 628, 629], "run_forward": 15, "b_filter": 15, "collector": [15, 144, 335, 338], "pre_batch": 15, "post_batch": 15, "forward": [15, 143, 157, 205, 267, 269, 313, 533, 622, 623, 627], "propag": [15, 96, 118, 275], "filter": [15, 186, 187, 188, 189, 190, 191, 192, 193, 197, 224, 225, 226, 227, 228, 229, 231, 235, 247, 295, 344, 367, 408, 431, 501, 579, 580, 591, 619, 620, 627], "infer": [15, 17, 63, 64, 98, 101, 128, 135, 246, 247, 293, 312, 314, 315, 334, 533, 534, 582, 583, 595, 614, 616, 619, 620, 621, 623, 627, 629], "collect": [15, 40, 43, 197, 200, 201, 203, 206, 207, 208, 209, 211, 235, 237, 239, 248, 253, 254, 255, 296, 301, 302, 303, 329, 330, 331, 333, 335, 338, 344, 345, 450, 474, 485, 487, 499, 500, 586, 623, 627, 629], "inform": [15, 17, 40, 43, 99, 109, 144, 160, 162, 163, 164, 165, 166, 174, 175, 206, 207, 208, 209, 251, 288, 290, 291, 292, 294, 299, 302, 303, 311, 327, 361, 399, 428, 486, 487, 492, 493, 528, 529, 532, 533, 534, 535, 537, 543, 544, 545, 552, 556, 563, 571, 572, 573, 574, 576, 582, 586, 588, 596, 609, 612, 615, 619, 620, 624, 625, 627, 631, 632, 633], "dure": [15, 43, 58, 63, 64, 98, 118, 162, 165, 260, 263, 269, 288, 292, 294, 314, 493, 595, 596, 616, 617, 619, 620, 623, 627, 631], "prior": [15, 84, 319, 629], "after": [15, 17, 40, 41, 53, 74, 149, 156, 159, 160, 162, 163, 164, 165, 186, 197, 199, 200, 203, 206, 207, 213, 224, 236, 239, 240, 241, 244, 247, 260, 288, 290, 291, 292, 320, 334, 485, 531, 577, 579, 580, 582, 583, 586, 591, 594, 607, 608, 611, 615, 616, 617, 619, 620, 623, 624, 626, 627, 628, 629], "count": [15, 162, 271, 531, 580], "make_symbol_block": 15, "gluon": [15, 304, 315, 596], "symbolblock": 15, "make_modul": 15, "parse_tune_config": 15, "quantizable_nod": 15, "distribute_calib_tensor": 15, "calib_tensor": 15, "calib_cfg": 15, "tensor_to_nod": 15, "distribut": [15, 137, 154, 176, 178, 179, 183, 184, 197, 206, 207, 214, 216, 217, 221, 222, 240, 247, 280, 285, 293, 319, 327, 339, 487, 533, 582, 592, 609, 612, 621, 623, 625, 629, 632], "algorithm": [15, 149, 167, 202, 238, 248, 255, 258, 262, 270, 271, 273, 295, 296, 303, 319, 329, 331, 337, 339, 531, 534, 554, 582, 583, 588, 591, 603, 608, 619, 620, 623, 627, 631], "kl": [15, 335, 338, 339, 588, 629, 631], "minmax": [15, 588, 631], "calib_model": 15, "qsym_model": 15, "calib_data": 15, "calibdata": 15, "threshold": [15, 17, 151, 162, 251, 288, 299, 335, 338, 339, 594], "amp_convert": 15, "amp_cfg": 15, "amp": [15, 597, 604, 618], "wrap": [15, 101, 112, 118, 157, 205, 251, 299, 357, 530, 584, 609, 612], "dataiterload": 15, "data_it": 15, "collectorbas": 15, "collect_gluon": 15, "_": [15, 174, 175, 315, 530, 531, 534, 577, 582, 584, 588, 594, 595, 596, 597, 603, 607, 609, 611, 612, 616, 619, 620, 623, 625, 626, 627, 629, 631], "arr": [15, 40, 344], "api": [15, 16, 41, 43, 66, 71, 103, 106, 118, 128, 246, 247, 251, 291, 293, 299, 315, 329, 330, 331, 344, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 515, 516, 529, 530, 535, 537, 543, 552, 556, 571, 572, 573, 574, 576, 586, 591, 599, 603, 604, 605, 625, 626, 629, 633], "collect_modul": 15, "m": [15, 40, 66, 144, 162, 288, 582, 592, 597, 599, 602, 605, 609, 612, 632], "b": [15, 40, 66, 70, 186, 224, 244, 580, 594, 620, 629], "o": [15, 66, 408, 592, 599, 618], "calibcollector": 15, "include_tensors_kl": 15, "include_tensors_minmax": 15, "num_bin": [15, 335, 338, 339], "8001": [15, 335, 338], "calc_kl_th_dict": 15, "quantized_dtyp": 15, "calcul": [15, 17, 40, 41, 43, 56, 144, 157, 160, 162, 164, 166, 175, 189, 190, 205, 227, 228, 247, 252, 253, 263, 268, 269, 280, 284, 285, 288, 290, 291, 300, 301, 314, 324, 335, 338, 399, 491, 497, 580, 594, 605, 616, 619, 620, 623, 626, 629, 631], "tensorcollector": 15, "include_nod": 15, "qtensor_to_tensor": 15, "build": [15, 111, 118, 128, 150, 151, 152, 153, 154, 244, 245, 258, 260, 270, 271, 307, 309, 311, 312, 313, 364, 365, 367, 378, 379, 381, 384, 408, 468, 477, 499, 516, 534, 577, 592, 596, 607, 609, 611, 612, 615, 621, 626, 629], "up": [15, 63, 64, 66, 96, 197, 200, 203, 239, 247, 263, 280, 285, 289, 314, 385, 577, 584, 585, 588, 589, 591, 605, 609, 612, 614, 621, 622, 623, 626, 628, 631], "preprocess": [15, 186, 197, 200, 203, 224, 235, 237, 239, 240, 247, 269, 337, 584, 628], "namecollector": 15, "cache_kl": 15, "cache_minmax": 15, "tensors_kl": 15, "tensors_minmax": 15, "properti": [15, 98, 99, 100, 106, 118, 150, 152, 155, 156, 157, 159, 171, 176, 178, 186, 188, 197, 204, 205, 213, 214, 216, 224, 226, 240, 246, 247, 254, 255, 256, 257, 271, 280, 285, 293, 294, 295, 302, 303, 304, 305, 306, 307, 309, 311, 312, 313, 314, 315, 319, 327, 329, 331, 334, 344, 345, 363, 396, 403, 407, 412, 413, 416, 428, 431, 436, 440, 449, 452, 457, 461, 464, 467, 474, 484, 491, 492, 493, 497, 502, 506, 509, 511, 512, 593, 618], "min_max_dict": 15, "mix": [15, 43, 44, 45, 143, 304, 317, 331, 456, 457, 458, 505, 533, 534, 545, 591, 597, 603, 604, 605], "max": [15, 16, 17, 40, 43, 100, 106, 137, 154, 171, 197, 200, 203, 239, 252, 253, 295, 300, 301, 319, 344, 509, 533, 577, 592, 623, 628, 629], "post_collect": 15, "2": [15, 40, 42, 43, 44, 49, 70, 75, 101, 105, 147, 151, 153, 155, 162, 163, 187, 204, 225, 251, 253, 255, 263, 283, 284, 290, 299, 301, 302, 303, 314, 317, 319, 530, 534, 580, 582, 588, 589, 591, 592, 593, 594, 595, 616, 618, 619, 623, 625, 626, 628, 629], "onnxruntimeadaptor": 16, "rt": 16, "smooth_quant": [16, 41, 152, 295], "alpha": [16, 40, 41, 147, 153, 160, 164, 261, 327], "5": [16, 41, 75, 147, 153, 157, 171, 190, 199, 205, 228, 236, 251, 255, 299, 302, 303, 320, 534, 577, 580, 588, 594, 618, 619, 622, 628, 629, 631, 632], "percentil": [16, 17, 41, 147], "99": [16, 147, 632], "999": [16, 147, 631, 632], "op_typ": [16, 17, 34, 41, 98, 147, 311, 320, 324, 327, 329, 331, 332], "linear": [16, 40, 147, 153, 162, 171, 241, 244, 288, 295, 530, 582, 586, 619, 620], "scales_per_op": [16, 41, 147], "augment": [16, 17], "smooth": [16, 17, 40, 41, 147, 153, 327, 330, 620], "quant": [16, 41, 43, 147, 149, 327, 329, 331, 530, 623], "model_wrapp": [16, 17], "origin_model": [16, 150, 152], "smoothquant": [16, 41, 147, 153, 533], "fallback": [16, 41, 43, 149, 317, 318, 321, 322, 324, 325, 595, 624, 629], "spiq": [16, 41, 147, 153], "remov": [16, 17, 19, 39, 40, 41, 43, 52, 53, 56, 58, 70, 75, 76, 79, 80, 81, 92, 94, 98, 106, 111, 128, 135, 144, 156, 157, 205, 244, 253, 301, 311, 313, 329, 331, 364, 367, 374, 375, 378, 380, 381, 383, 385, 431, 492, 493, 500, 528, 529, 607, 611, 619, 620, 627], "outlier": [16, 17, 41], "whose": [16, 17, 40, 41, 56, 81, 147, 153, 162, 289, 590, 619, 629], "have": [16, 40, 41, 70, 79, 98, 99, 106, 142, 162, 163, 184, 202, 206, 207, 222, 238, 248, 251, 255, 262, 288, 290, 296, 299, 303, 327, 329, 331, 528, 529, 554, 577, 579, 580, 584, 588, 593, 594, 595, 597, 614, 616, 619, 620, 623, 629], "individu": [16, 40, 41, 63, 64, 66, 162, 259, 260, 270, 288, 528], "mainli": [16, 17, 41, 156, 159, 162, 165, 213, 247, 292, 620, 623], "accuraci": [16, 41, 155, 156, 171, 174, 175, 204, 240, 246, 247, 255, 259, 260, 261, 263, 270, 280, 285, 293, 295, 302, 303, 304, 314, 315, 317, 320, 325, 327, 334, 349, 365, 375, 385, 391, 393, 467, 491, 497, 500, 502, 518, 530, 533, 577, 579, 580, 583, 584, 585, 586, 589, 594, 595, 605, 614, 616, 617, 619, 620, 621, 622, 625, 626, 627, 631, 632], "same": [16, 40, 41, 43, 52, 63, 79, 136, 142, 147, 162, 186, 197, 200, 203, 224, 239, 251, 280, 285, 299, 320, 321, 324, 344, 534, 578, 579, 580, 582, 584, 588, 598, 602, 607, 611, 618, 622, 623, 627, 628, 629], "share": [16, 40, 41, 75, 78, 94, 105, 135, 136, 587, 588, 629], "perform": [16, 41, 58, 63, 64, 92, 155, 163, 164, 171, 186, 197, 198, 199, 200, 202, 204, 224, 236, 238, 246, 247, 258, 259, 261, 263, 270, 271, 280, 285, 293, 295, 314, 315, 318, 320, 321, 324, 326, 349, 365, 375, 385, 391, 393, 482, 491, 500, 502, 509, 518, 530, 531, 533, 534, 577, 578, 579, 580, 581, 583, 585, 586, 589, 591, 592, 594, 595, 596, 597, 599, 603, 605, 608, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 627, 629, 631, 632], "modifi": [16, 41, 52, 58, 63, 64, 66, 77, 188, 226, 247, 280, 285, 291, 478, 530, 577, 584, 588, 631], "data_load": [16, 43, 44, 45, 534], "todo": [16, 40, 186, 189, 224, 227, 251, 299, 331, 497, 630], "replac": [16, 63, 64, 81, 98, 106, 253, 301, 311, 320, 499, 584, 605, 625], "input_graph": [16, 127, 128, 132, 135, 137, 346, 454, 458, 463, 466, 473, 534], "eval": [16, 156, 213, 247, 251, 257, 299, 315, 334, 530, 579, 597, 627], "func": [16, 98, 157, 205, 294, 313, 499, 516, 631], "onnxdataload": 16, "evalut": 16, "onnxtransform": 16, "onnxmetr": 16, "evaluaton": 16, "visualizaton": 16, "f1": [16, 247, 252, 254, 255, 295, 300, 302, 303, 584, 594, 626, 632], "e": [16, 42, 66, 98, 162, 260, 262, 294, 489, 491, 516, 528, 582, 585, 589, 597, 602, 603, 607, 611, 619, 629], "g": [16, 42, 101, 162, 260, 262, 294, 491, 582, 585, 589, 597, 602, 619, 620, 625, 629], "modelproto": [16, 98, 241, 242, 244, 304, 596], "onnxrt_qlinearopsadaptor": [16, 534], "onnxrt_integeropsadaptor": 16, "onnxrt_qdqadaptor": 16, "onnxrtaug": 17, "dump_op_typ": 17, "black_nod": 17, "white_nod": 17, "cpuexecutionprovid": 17, "reduce_rang": [17, 39, 171, 295, 622], "augment_graph": 17, "activation_onli": 17, "weight_onli": 17, "add": [17, 39, 40, 48, 55, 60, 63, 64, 98, 105, 106, 111, 115, 121, 124, 142, 166, 186, 188, 210, 224, 226, 247, 248, 255, 269, 280, 285, 289, 291, 294, 296, 302, 303, 311, 320, 329, 331, 357, 364, 365, 367, 374, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 390, 391, 392, 393, 394, 395, 397, 413, 499, 524, 529, 530, 554, 577, 579, 580, 584, 586, 588, 594, 595, 609, 612, 626, 627, 629], "quantization_candid": 17, "store": [17, 98, 160, 162, 163, 164, 165, 188, 226, 251, 269, 281, 282, 283, 288, 290, 299, 319, 340, 590], "part": [17, 163, 240, 247, 251, 288, 290, 299, 530, 592, 595, 609, 612], "graph": [17, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 110, 113, 126, 128, 132, 135, 136, 137, 139, 140, 141, 142, 185, 223, 244, 246, 295, 305, 306, 307, 311, 312, 313, 351, 353, 355, 420, 428, 431, 439, 440, 442, 452, 453, 454, 459, 460, 464, 477, 478, 480, 500, 503, 515, 530, 534, 580, 582, 584, 590, 594, 596, 597, 623, 624, 627], "get_intermediate_output": 17, "calib_mod": 17, "intermedi": [17, 40, 144, 157, 171, 205, 315, 530, 591, 619, 623], "dump_minmax": 17, "naiv": 17, "min": [17, 43, 106, 137, 154, 344, 577, 623, 628, 629], "dump_calibr": 17, "param": [17, 41, 42, 43, 63, 144, 147, 155, 174, 176, 204, 210, 214, 251, 254, 255, 269, 299, 302, 303, 319, 366, 398, 499, 502, 534, 596, 629], "give": [17, 614, 629], "pair": [17, 39, 44, 103, 111, 579, 595], "across": [17, 246, 247, 256, 293, 304, 315, 581, 619, 620], "test": [17, 203, 239, 260, 529, 533, 577, 592, 632], "first": [17, 43, 88, 103, 137, 154, 168, 186, 202, 224, 238, 240, 247, 251, 299, 317, 318, 320, 331, 408, 530, 531, 534, 577, 580, 586, 592, 595, 599, 608, 609, 612, 615, 622, 623, 624, 626, 627, 629, 631], "element": [17, 162, 166, 184, 222, 247, 251, 267, 269, 280, 285, 288, 291, 299, 344, 362, 580, 591, 594, 619], "minimum": [17, 162, 319, 605, 619, 629], "second": [17, 60, 171, 186, 224, 295, 320, 344, 408, 491, 577, 607, 611, 615, 629, 631], "maximum": [17, 50, 162, 163, 186, 197, 200, 203, 224, 239, 249, 269, 288, 290, 297, 319, 580, 619, 623, 628], "calculate_quantization_param": 17, "quantization_threshold": 17, "follow": [17, 64, 66, 75, 84, 87, 88, 89, 90, 106, 188, 192, 197, 226, 247, 248, 251, 269, 280, 285, 296, 299, 317, 528, 529, 530, 531, 534, 544, 577, 579, 580, 582, 583, 584, 586, 588, 592, 593, 594, 595, 596, 597, 598, 599, 607, 611, 617, 619, 620, 622, 623, 627, 629], "param_nam": [17, 357], "dump_tensor": 17, "both": [17, 142, 144, 269, 271, 273, 528, 531, 534, 583, 592, 598, 622, 623, 629], "calculate_scale_zeropoint": 17, "last_nod": 17, "next_nod": 17, "rmin": [17, 40, 623], "rmax": [17, 40, 623], "scheme": [17, 39, 40, 42, 149, 329, 331, 516, 534, 579, 588, 605, 629, 631], "qtype": [17, 40, 534], "quantize_rang": [17, 40], "zero": [17, 39, 40, 162, 163, 166, 197, 200, 203, 239, 247, 255, 280, 285, 288, 290, 291, 303, 344, 533, 619, 620, 623, 628, 629], "point": [17, 39, 40, 98, 199, 236, 252, 253, 272, 300, 301, 314, 319, 594, 614, 623, 628, 629], "calib_smooth": 17, "channel": [17, 39, 40, 106, 137, 147, 153, 154, 162, 197, 199, 200, 203, 236, 239, 263, 267, 288, 428, 431, 440, 534, 591, 592, 597, 599, 604, 619, 620, 628, 632], "shape_info": [17, 40], "shape": [17, 40, 98, 99, 101, 106, 118, 135, 142, 162, 189, 190, 197, 199, 200, 203, 227, 228, 236, 239, 251, 267, 269, 288, 299, 310, 420, 427, 428, 431, 440, 442, 480, 533, 577, 580, 588, 589, 628], "max_vals_per_channel": [17, 40], "activationoper": 19, "onnx_quant": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38], "onnx_nod": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 83, 97, 107], "quantize_check": [19, 22, 23, 25, 27, 29, 33, 34, 35, 36, 37], "quantizaion": [19, 21, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38], "can": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 52, 137, 144, 147, 154, 155, 162, 163, 165, 174, 175, 185, 188, 197, 200, 203, 204, 206, 207, 223, 226, 239, 247, 251, 253, 255, 267, 269, 280, 285, 288, 290, 291, 292, 295, 299, 301, 303, 304, 314, 315, 334, 340, 450, 482, 489, 499, 530, 531, 533, 534, 577, 578, 579, 580, 582, 583, 584, 588, 591, 592, 594, 595, 596, 597, 598, 599, 601, 602, 603, 605, 607, 608, 609, 611, 612, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 626, 627, 628, 629, 631], "done": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 530, 582, 583, 598, 614, 619, 623], "convert_check": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38], "convert_format": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38], "convers": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 50, 77, 98, 99, 247, 257, 534, 595, 623, 624], "qoper": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39], "removableactivationoper": 19, "qactivationoper": 19, "children": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 311], "initi": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 101, 112, 142, 156, 157, 159, 163, 174, 175, 183, 186, 205, 213, 221, 224, 240, 247, 258, 259, 270, 271, 289, 290, 294, 311, 312, 315, 327, 331, 334, 363, 386, 387, 396, 445, 477, 479, 487, 500, 507, 531, 577, 579, 580, 594, 613, 619, 620, 629], "argmaxoper": 20, "qargmaxoper": 20, "attentionoper": 21, "qattentionoper": 21, "qattent": 21, "binari": [22, 142, 255, 267, 269, 303, 587, 594, 609, 612], "binaryoper": 22, "qbinaryoper": 22, "qbinari": 22, "concatoper": 23, "cast": [23, 25, 34, 38, 39, 40, 53, 586, 624, 628], "qconcatoper": 23, "qconcat": 23, "convoper": 24, "qconvoper": 24, "qlinearconv": 24, "direct8bit": 25, "direct8bitoper": 25, "qdirectoper": 25, "qdirect": 25, "embedlayernorm": 26, "embedlayernormalizationoper": 26, "qembedlayernormalizationoper": 26, "qembedlayernorm": 26, "gatheroper": 27, "qgatheroper": 27, "qgather": 27, "globalaveragepool": 28, "globalaveragepooloper": 28, "qglobalaveragepooloper": 28, "qlinearglobalaveragepool": 28, "gemmoper": 29, "qgemmoper": 29, "qgemm": 29, "lstmoper": 31, "matmuloper": 32, "qmatmuloper": 32, "qlinearmatmul": 32, "maxpooloper": 33, "qmaxpooloper": 33, "qmaxpool": 33, "op_registri": 34, "qop_registri": 34, "padoper": 35, "qpadoper": 35, "qpad": 35, "averagepool": 36, "pooloper": 36, "qpooloper": 36, "qlinearaveragepool": 36, "resizeoper": 37, "qresizeoper": 37, "qresiz": 37, "splitoper": 38, "qsplitoper": 38, "qsplit": 38, "static": [39, 41, 43, 100, 106, 135, 146, 147, 153, 171, 245, 260, 294, 295, 311, 315, 329, 331, 357, 361, 364, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 397, 399, 400, 428, 431, 433, 434, 436, 438, 439, 440, 441, 451, 468, 470, 475, 477, 482, 484, 489, 491, 497, 498, 500, 502, 507, 512, 516, 523, 524, 534, 586, 591, 597, 602, 603, 604, 605, 608, 614, 629, 632], "quantization_param": 39, "op_types_to_quant": 39, "fallback_list": 39, "add_qdq_pair_to_weight": 39, "optypes_to_exclude_output_qu": 39, "dedicated_qdq_pair": 39, "check_opset_vers": 39, "opset": [39, 98, 100, 101, 241, 243, 244, 313], "should_quant": 39, "quantize_model": 39, "merge_dedicated_qdq_pair": 39, "merg": [39, 104, 178, 216, 329, 331, 609, 612, 627, 629], "dedic": 39, "q": [39, 40, 44, 103, 105, 127], "dq": [39, 44, 103, 105, 127], "should_cast": 39, "insert_qdq": 39, "insert": [39, 40, 43, 44, 73, 98, 101, 103, 105, 106, 109, 128, 136, 140, 153, 241, 244, 530, 591, 597, 619, 620, 623, 624, 627], "should_convert": 39, "convert_qdq_to_operator_ori": 39, "remove_redundant_pair": 39, "redud": 39, "dtype_cast": 39, "cfg": [39, 43, 67, 68, 149, 167, 331, 337], "keep_io_typ": 39, "dtype": [39, 40, 44, 45, 98, 99, 101, 106, 135, 143, 171, 189, 190, 199, 203, 227, 228, 236, 239, 241, 244, 245, 313, 580, 586, 588, 597, 622, 627, 628, 631], "quantize_output": 39, "initializer_use_weight_qtyp": 39, "direct_int8": 39, "indic": [39, 98, 156, 159, 162, 179, 184, 186, 217, 222, 224, 240, 247, 251, 267, 269, 272, 273, 299, 530, 577, 587, 627], "quantize_bias_tensor": 39, "bia": [39, 43, 106, 135, 137, 241, 244, 267, 327, 627], "quantize_bia": 39, "bias_nam": [39, 244], "input_nam": [39, 63, 64, 98, 136, 171, 241, 243, 244, 313, 586], "weight_nam": [39, 274], "beta": [39, 63, 64, 66, 160], "input_scal": 39, "weight_scal": 39, "quantize_weights_per_channel": 39, "weight_qtyp": 39, "axi": [39, 40, 162], "quantize_weight_per_channel": 39, "channel_axi": [39, 109, 151, 154], "tensor_proto_to_arrai": 39, "tensorproto": [39, 40, 101], "get_bias_add_nod": 39, "last_output": 39, "quantized_bias_nam": 39, "handl": [39, 56, 57, 58, 142, 144, 147, 153, 247, 260, 261, 262, 293, 327, 341, 489, 515, 516, 530, 532, 579], "ad": [39, 40, 118, 162, 163, 186, 224, 248, 296, 319, 364, 365, 367, 374, 375, 376, 377, 378, 381, 383, 384, 577, 595, 597, 602, 605, 609, 612, 627], "reshap": [39, 57, 63, 64, 66, 69, 74, 162, 283], "nodeproto": [39, 244], "_type_": [39, 244, 310], "previou": [39, 43, 63, 75, 162, 269, 271, 314, 318, 325, 577, 625, 627, 629], "is_valid_quantize_weight": 39, "dequantize_tensor": [39, 144, 399], "value_nam": 39, "dequant": [39, 40, 53, 84, 87, 88, 89, 90, 92, 98, 121, 122, 124, 136, 144, 149, 344, 399, 530, 627], "helper": [40, 41, 43, 106, 112, 142, 144, 149, 186, 187, 188, 202, 224, 225, 226, 238, 242, 243, 244, 267, 312, 342, 493], "onnxrt": [40, 186, 188, 195, 196, 197, 200, 203, 224, 226, 233, 234, 235, 237, 239, 254, 255, 302, 303, 342, 402, 403, 418, 420, 427, 480, 534, 595], "dtype_to_nam": 40, "dtype_map": 40, "its": [40, 43, 56, 92, 98, 106, 109, 118, 144, 162, 163, 182, 188, 197, 200, 202, 203, 220, 226, 238, 239, 241, 242, 249, 250, 254, 255, 290, 294, 297, 298, 302, 303, 319, 320, 324, 329, 331, 528, 577, 580, 582, 593, 594, 595, 605, 607, 611, 614, 615, 618, 619, 620, 626, 628, 629], "represent": [40, 52, 260, 364, 365, 367, 370, 374, 375, 378, 379, 381, 383, 384, 510, 528, 530, 583, 620, 623], "quanttyp": 40, "repres": [40, 162, 163, 164, 165, 166, 188, 193, 226, 231, 251, 253, 255, 299, 301, 303, 366, 368, 369, 371, 373, 376, 377, 380, 382, 497, 528, 580, 586, 623, 629], "make_quant_nod": 40, "make": [40, 64, 98, 101, 135, 136, 137, 154, 162, 163, 165, 184, 222, 288, 290, 292, 344, 363, 396, 428, 528, 529, 534, 577, 578, 579, 588, 594, 602, 607, 611, 614, 623, 624, 626, 629], "quantizelinear": [40, 98, 586], "make_dquant_nod": 40, "dequantizelinear": [40, 98, 586], "is_b_transpos": 40, "wheter": 40, "inuput": 40, "transpos": [40, 69, 136, 162, 203, 239, 241, 243, 288, 628], "split_shared_bia": 40, "float_to_float16": 40, "float16": [40, 580], "float_to_bfloat16": 40, "bfloat16": [40, 595, 597, 605, 624], "cast_tensor": 40, "remove_init_from_model_input": 40, "collate_pr": 40, "quantize_data_with_scale_zero": 40, "zero_point": [40, 162, 244, 311], "To": [40, 162, 165, 251, 283, 288, 292, 299, 314, 489, 529, 577, 580, 584, 586, 595, 598, 601, 607, 609, 611, 612, 622, 624, 625, 629, 631], "pack": [40, 57], "comput": [40, 43, 58, 63, 64, 101, 118, 144, 149, 156, 213, 240, 247, 248, 249, 251, 252, 253, 255, 261, 274, 277, 278, 296, 297, 299, 300, 301, 302, 303, 334, 344, 554, 583, 594, 595, 597, 608, 619, 620, 623, 629], "when": [40, 49, 60, 63, 66, 99, 118, 142, 162, 163, 166, 171, 186, 187, 192, 195, 196, 197, 200, 203, 224, 225, 233, 234, 235, 239, 248, 249, 261, 269, 274, 288, 289, 290, 295, 296, 297, 311, 315, 327, 334, 497, 499, 512, 516, 528, 531, 554, 577, 579, 580, 605, 607, 608, 611, 615, 619, 620, 623, 628, 629], "uint8": [40, 171, 199, 236, 251, 299, 333, 534, 580, 588, 622, 623, 628, 631], "ab": [40, 160, 269, 290, 623], "np": [40, 99, 106, 135, 197, 200, 203, 239, 319, 584, 628], "sym": [40, 588, 631], "asym": [40, 588, 631], "calculate_scale_zp": 40, "quantize_data": 40, "necessari": [40, 156, 159, 240, 247, 528, 531, 596, 615, 626, 629], "trasnform": 40, "full": [40, 43, 186, 187, 188, 192, 197, 204, 224, 225, 226, 247, 329, 331, 344, 533, 577, 580, 587, 589, 592, 593, 615], "equat": [40, 253, 255, 301, 303, 623], "r": [40, 66, 137, 154, 263, 577, 592, 615, 618, 623, 632], "": [40, 42, 43, 52, 58, 66, 75, 98, 99, 101, 106, 118, 135, 137, 138, 142, 154, 162, 163, 167, 168, 171, 176, 185, 188, 202, 203, 204, 206, 207, 208, 214, 223, 226, 238, 239, 247, 253, 261, 263, 269, 288, 290, 291, 295, 301, 302, 303, 304, 308, 315, 320, 327, 344, 397, 428, 484, 485, 528, 531, 582, 584, 588, 591, 595, 602, 605, 607, 611, 614, 617, 618, 619, 620, 621, 622, 623, 625, 626, 631], "z": [40, 582], "real": [40, 41, 189, 206, 207, 227, 584, 621, 623], "origin": [40, 41, 98, 138, 149, 150, 152, 162, 163, 166, 186, 203, 204, 224, 239, 247, 260, 269, 274, 275, 277, 278, 279, 280, 285, 288, 289, 290, 291, 320, 324, 333, 344, 347, 529, 580, 602, 619, 620, 623, 628, 629, 631], "quantize_data_per_channel": 40, "tensor_valu": 40, "scale_valu": 40, "zo_valu": 40, "dequantize_data_with_scale_zero": 40, "sacal": 40, "dequantize_data": 40, "valueinfo": 40, "tensor_nam": [40, 142, 311, 312, 313], "new_dtyp": 40, "quantizedvalu": 40, "new_quantized_nam": 40, "scale_nam": 40, "zero_point_nam": 40, "quantized_value_typ": 40, "quint8": 40, "linearli": 40, "intial": 40, "quantizediniti": 40, "quantized_data": 40, "quantizationmod": 40, "quantizedvaluetyp": 40, "quantformat": [40, 244], "quantize_nparrai": 40, "low": [40, 42, 43, 174, 175, 189, 190, 227, 228, 246, 247, 256, 293, 304, 315, 534, 578, 580, 584, 595, 621, 623, 629], "high": [40, 189, 190, 227, 228, 318, 580, 592, 621, 629], "attribute_to_kwarg": 40, "attribut": [40, 58, 79, 98, 99, 100, 101, 106, 118, 135, 149, 156, 168, 213, 293, 315, 334, 415, 416, 420, 480, 497, 534, 579, 588, 590, 622, 631], "kwarg": [40, 41, 43, 98, 101, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 131, 133, 171, 188, 197, 200, 201, 203, 207, 208, 211, 226, 239, 246, 247, 257, 263, 269, 280, 285, 291, 293, 294, 295, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 315, 329, 330, 332, 334, 338, 340, 341, 343, 344, 349, 351, 353, 354, 355, 356, 366, 368, 369, 371, 373, 376, 377, 382, 579], "make_nod": [40, 98], "find_by_nam": 40, "item_list": 40, "find": [40, 63, 64, 66, 98, 101, 142, 175, 255, 271, 272, 302, 303, 311, 319, 327, 344, 445, 515, 533, 534, 577, 600, 607, 611, 614, 615, 619, 626, 627, 629], "item": [40, 166, 168, 202, 238, 289, 327, 329, 331, 397, 485, 518, 584, 629], "get_smooth_scales_per_op": 40, "input_tensors_2_weight": 40, "input_tensors_2_weights_nod": 40, "one": [40, 43, 98, 105, 106, 111, 128, 149, 162, 165, 197, 200, 203, 204, 213, 239, 247, 248, 251, 254, 255, 257, 260, 288, 291, 292, 296, 299, 302, 303, 318, 327, 493, 531, 534, 554, 577, 582, 583, 584, 588, 589, 591, 592, 594, 595, 597, 598, 602, 603, 605, 607, 608, 611, 614, 615, 616, 617, 619, 620, 622, 623, 625, 628, 629], "mul": [40, 50, 61, 62, 63, 65, 66, 75, 121, 124, 153, 586], "correspond": [40, 43, 118, 144, 163, 186, 224, 248, 251, 255, 288, 290, 294, 296, 299, 302, 303, 319, 327, 337, 534, 554, 588, 619, 620, 622, 623, 626, 629], "paper": [40, 147, 269, 582, 619, 620], "get_smooth_scales_per_input": 40, "insert_smooth_mul_op_per_input": 40, "inupt": 40, "new_init_tensor": 40, "new_added_mul_nod": 40, "adjust_weights_per_op": 40, "adjust": [40, 162, 263, 605, 623], "adjustd": 40, "adjust_weights_per_input": 40, "insert_smooth_mul_op_per_op": 40, "befor": [40, 103, 105, 118, 153, 156, 160, 162, 163, 164, 165, 186, 213, 224, 240, 241, 244, 247, 279, 280, 285, 288, 290, 291, 292, 324, 334, 385, 529, 577, 580, 582, 583, 584, 587, 588, 592, 609, 612, 619, 623, 626, 627, 629], "name_2_nod": 40, "trt_env_setup": 40, "environ": [40, 155, 204, 295, 447, 479, 480, 488, 512, 528, 577, 578, 607, 611, 614, 629], "variabl": [40, 118, 155, 164, 188, 204, 226, 247, 256, 262, 304, 312, 319, 487, 512, 577, 592, 620, 629], "tensorrt": 40, "provid": [40, 63, 64, 98, 101, 106, 118, 174, 175, 197, 200, 203, 213, 235, 237, 239, 246, 247, 251, 260, 269, 280, 285, 293, 294, 299, 304, 315, 334, 338, 340, 408, 428, 434, 484, 493, 518, 531, 533, 534, 577, 578, 579, 583, 584, 585, 586, 591, 592, 595, 596, 597, 601, 605, 608, 614, 615, 619, 622, 623, 627, 629, 631, 632], "get_ops_recurs": 41, "prefix": [41, 142, 143, 148, 155, 204, 247, 248, 295, 296, 512, 597, 602, 627], "graph_info": [41, 43, 305, 306, 307, 311, 312, 313], "templateadaptor": 41, "tampl": 41, "yaml": [41, 42, 43, 155, 166, 168, 174, 175, 186, 188, 204, 213, 224, 226, 240, 246, 247, 257, 258, 259, 270, 271, 280, 285, 293, 294, 295, 304, 343, 344, 345, 349, 350, 351, 352, 353, 355, 356, 358, 359, 443, 445, 452, 457, 461, 464, 467, 499, 510, 534, 590, 594, 616, 619, 622, 627, 628], "file": [41, 101, 106, 135, 142, 152, 166, 167, 174, 175, 186, 187, 188, 191, 192, 197, 200, 202, 203, 209, 212, 224, 225, 226, 229, 238, 239, 240, 244, 246, 247, 251, 257, 258, 259, 260, 261, 263, 270, 271, 280, 285, 289, 291, 293, 294, 299, 304, 313, 314, 315, 340, 343, 344, 349, 350, 351, 352, 353, 354, 355, 356, 408, 445, 454, 458, 468, 484, 491, 492, 498, 499, 500, 512, 516, 520, 522, 524, 525, 531, 534, 577, 584, 587, 590, 593, 594, 596, 600, 609, 612, 613, 614, 615, 616, 619, 622, 627, 628], "is_fused_modul": [41, 144, 149], "_propagate_qconfig_help": [41, 144, 149], "detect": [41, 144, 149, 251, 255, 299, 302, 303, 308, 428, 431, 440, 499, 530, 577, 597, 604, 605], "calculate_hessian_trac": 41, "fp32_model": [41, 43, 142, 144, 149, 241, 244, 313, 324, 327, 344, 534], "q_model": [41, 144, 150, 152, 247, 257, 315, 327, 340, 530, 533, 579, 580, 584, 586, 589, 590, 594, 596, 623, 624], "criterion": [41, 43, 144, 156, 158, 159, 160, 162, 163, 171, 207, 210, 240, 247, 295, 467, 507, 552, 582, 583, 586, 619, 620, 623, 629, 631], "enable_act": [41, 144], "hessian": [41, 144, 322, 629], "trace": [41, 143, 144, 148, 149, 241, 244, 315, 322, 530, 537, 604, 629], "loss": [41, 118, 156, 157, 171, 175, 205, 213, 246, 247, 255, 280, 285, 293, 295, 303, 314, 315, 334, 582, 583, 584, 585, 589, 594, 595, 605, 617, 619, 620, 623, 629, 631], "gradient": [41, 118, 160, 274, 275, 290, 313, 591, 619, 620, 632], "amap": 41, "enabl": [41, 43, 105, 144, 163, 171, 269, 290, 295, 487, 577, 584, 592, 595, 597, 599, 602, 603, 605, 618, 619, 620, 621, 629], "error": [41, 101, 144, 248, 255, 261, 294, 296, 303, 324, 338, 341, 483, 511, 554, 594, 598, 629], "op_nam": [41, 149, 167, 171, 295, 320, 324, 327, 329, 331, 332, 399, 404, 405, 413, 414, 619, 627], "hessian_trac": [41, 144], "calib_it": [41, 147, 150, 152], "force_re_smooth": 41, "calib": 41, "now": [41, 147, 203, 239, 321, 497, 530, 531, 580, 584, 605, 622, 628, 629], "pytorchadaptor": 41, "objext": 41, "number": [41, 63, 64, 101, 144, 149, 150, 152, 162, 163, 165, 176, 184, 187, 192, 197, 199, 200, 203, 214, 222, 225, 236, 239, 252, 253, 255, 262, 271, 274, 279, 288, 300, 301, 302, 303, 319, 337, 344, 431, 487, 497, 500, 577, 578, 580, 584, 594, 619, 623, 626, 628, 629], "summari": [41, 99, 155, 204, 247, 277, 295, 334, 577, 609, 612, 618, 627], "optimizer_tupl": [41, 43], "criterion_tupl": [41, 43], "hook": [41, 43, 144, 156, 157, 159, 174, 205, 212, 213, 240, 247, 280, 285, 313, 327, 337, 582, 583, 619, 627], "optim": [41, 43, 44, 45, 49, 53, 56, 57, 59, 70, 71, 75, 76, 81, 84, 87, 88, 89, 90, 94, 98, 112, 114, 135, 136, 156, 160, 163, 164, 167, 171, 207, 213, 240, 246, 247, 261, 273, 279, 290, 291, 293, 295, 313, 315, 319, 327, 334, 335, 338, 345, 347, 351, 353, 355, 372, 376, 377, 383, 385, 386, 387, 388, 389, 390, 391, 393, 394, 396, 397, 399, 400, 401, 402, 403, 406, 407, 420, 474, 480, 481, 491, 497, 500, 503, 507, 514, 519, 531, 533, 552, 578, 582, 583, 584, 588, 589, 591, 592, 596, 597, 599, 601, 602, 605, 608, 618, 619, 621, 622, 623, 624, 626, 627, 629, 631], "It": [41, 49, 58, 75, 98, 162, 174, 175, 212, 247, 253, 255, 260, 261, 272, 288, 293, 294, 301, 303, 304, 315, 319, 320, 321, 324, 327, 334, 340, 534, 577, 582, 600, 603, 608, 614, 615, 619, 620, 623, 626, 629, 631], "other": [41, 63, 64, 66, 98, 135, 147, 153, 185, 223, 253, 294, 301, 312, 340, 489, 493, 516, 528, 529, 530, 577, 588, 591, 592, 593, 596, 616, 618, 619, 623, 628, 629, 632], "is_fused_child": 41, "_post_eval_hook": [41, 627], "is_fused_op": 41, "is_last_fused_child": 41, "last": [41, 43, 88, 149, 160, 162, 174, 176, 214, 269, 288, 314, 327, 468, 577, 595, 597, 599, 604, 608, 623], "q_capabl": 41, "get_non_quant_modul": 41, "model_kwarg": 41, "non_quant_modul": 41, "custom": [41, 98, 111, 155, 260, 294, 314, 343, 386, 391, 578, 582, 583, 597, 619, 626], "keyword": 41, "custom_non_quant_dict": 41, "pytorch_ipexadaptor": 41, "intel": [41, 162, 207, 210, 241, 247, 254, 255, 288, 291, 295, 302, 303, 323, 329, 340, 479, 492, 526, 528, 529, 531, 532, 534, 579, 580, 581, 582, 583, 585, 586, 588, 589, 593, 595, 596, 597, 602, 604, 605, 616, 617, 618, 619, 621, 623, 624, 625, 627, 629, 631], "extens": [41, 294, 434, 499, 531, 533, 534, 588, 591, 592, 595, 596, 598, 603, 604, 605, 609, 612, 613, 621, 629, 631], "ipex": [41, 149, 313, 591, 599, 603, 604, 632], "unspport": 41, "best": [41, 98, 156, 159, 175, 197, 200, 203, 239, 240, 246, 247, 258, 259, 270, 271, 293, 314, 315, 318, 324, 327, 528, 531, 592, 597, 603, 614, 616, 623, 628, 629], "No": [41, 587, 618, 621], "pytorch_fxadaptor": 41, "fx": [41, 149, 315, 325, 591, 603, 604, 621, 623, 624, 632], "prepare_sub_graph": 41, "sub_module_list": 41, "fx_op_cfg": 41, "is_qat": [41, 148], "example_input": [41, 149, 171, 241, 244, 313, 586], "custom_config": 41, "method": [41, 98, 100, 106, 118, 135, 137, 149, 164, 179, 184, 185, 186, 188, 192, 195, 196, 197, 200, 203, 206, 207, 217, 222, 223, 224, 226, 230, 233, 234, 235, 237, 239, 247, 254, 255, 260, 263, 269, 271, 272, 273, 283, 293, 302, 303, 305, 306, 329, 331, 337, 338, 340, 341, 484, 489, 493, 511, 530, 531, 533, 580, 582, 583, 594, 617, 619, 620, 623, 624, 628, 629], "sub": [41, 62, 63, 64, 82, 106, 155, 204, 244, 247, 263, 295, 327, 531, 629], "recurs": [41, 98, 99, 329, 331, 344], "traceabl": [41, 530], "qconfigmap": 41, "prepare_fx": 41, "dir": [41, 149, 186, 224, 343, 580, 587, 590], "tupe": 41, "non": [41, 75, 118, 210, 289, 344, 530, 618, 619, 629], "convert_sub_graph": 41, "fuse_fx_model": 41, "approach": [41, 167, 171, 247, 258, 259, 260, 269, 270, 271, 295, 327, 361, 500, 507, 530, 531, 579, 580, 582, 591, 602, 614, 621, 622, 629, 631], "graphmodul": [41, 149, 530, 624], "torch": [41, 143, 144, 145, 146, 148, 149, 153, 157, 162, 167, 171, 205, 241, 244, 255, 263, 267, 269, 295, 303, 304, 313, 315, 340, 530, 533, 535, 582, 584, 586, 595, 596, 597, 602, 605, 623, 627], "fused_model": 41, "calculate_op_sensit": [41, 43], "output_op_nam": [41, 43], "confidence_batch": [41, 43, 149, 629], "requantize_cfg": [41, 43, 149], "inc": [41, 203, 239, 340, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 507, 528, 533, 597, 604, 614, 621, 622, 625], "switch": [41, 81, 597, 627], "stage": [41, 43, 88, 316, 317, 318, 325, 492, 582, 627, 629], "re": [41, 43, 319, 340, 592, 614], "sort": [41, 43, 98, 135, 311, 318, 324, 408, 629], "sensit": [41, 43, 160, 274, 290, 591, 619, 620], "ops_lst": 41, "pytorchqueri": 41, "3": [42, 66, 75, 111, 142, 188, 192, 197, 200, 203, 226, 230, 235, 237, 239, 251, 263, 299, 489, 530, 531, 533, 577, 579, 580, 582, 584, 586, 588, 589, 592, 594, 595, 597, 601, 605, 607, 611, 616, 619, 622, 623, 626, 628, 629, 632], "conv2d": [42, 48, 55, 56, 57, 61, 62, 67, 68, 75, 121, 131, 137, 147, 588, 627, 629], "get_fuse_pattern": [42, 43], "fusion": [42, 54, 55, 57, 60, 63, 64, 65, 66, 69, 74, 90, 92, 105, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 530, 534, 588], "everi": [42, 63, 64, 66, 98, 162, 163, 288, 290, 291, 534, 602, 607, 611, 619, 620, 629], "set_quantization_config": 42, "organ": [42, 577, 631], "granular": [42, 534, 588, 591, 600, 619, 631], "etc": [42, 155, 156, 159, 202, 213, 238, 240, 246, 247, 253, 261, 262, 280, 285, 293, 295, 301, 304, 315, 343, 582, 591, 626, 629], "get_mixed_precision_combin": [42, 43], "unsupported_precis": 42, "hardwar": [42, 487, 529, 533, 534, 582, 591, 595, 614, 618, 619, 620, 621, 622], "user": [42, 106, 136, 155, 156, 163, 166, 174, 175, 188, 191, 195, 196, 197, 203, 204, 210, 213, 226, 229, 233, 234, 235, 239, 246, 247, 260, 262, 280, 285, 291, 293, 294, 295, 304, 314, 315, 320, 327, 334, 344, 483, 530, 531, 534, 544, 578, 582, 583, 588, 591, 594, 595, 596, 597, 598, 599, 601, 602, 603, 605, 608, 614, 616, 617, 619, 621, 623, 624, 625, 627, 628, 629, 633], "tensorflowadaptor": 43, "stock": [43, 603], "spr": 43, "graphdef": [43, 52, 53, 56, 57, 59, 63, 64, 66, 70, 75, 81, 87, 88, 89, 90, 106, 128, 135, 136, 142, 312, 477, 596], "could": [43, 63, 64, 147, 153, 162, 174, 175, 188, 226, 294, 304, 315, 327, 334, 528, 530, 583, 617, 619, 620, 623], "graph_def": [43, 49, 106, 142, 241, 243, 304, 312, 315, 442, 477, 478], "frozen": [43, 52, 304, 312, 315, 436, 439, 577, 596], "pb": [43, 155, 171, 304, 312, 315, 436, 439, 450, 533, 578, 584, 589, 596, 627, 632], "ckpt": [43, 142, 304, 312, 315, 632], "savedmodel": [43, 304, 312, 315, 632], "folder": [43, 142, 188, 193, 226, 231, 304, 315, 343, 580, 602, 607, 611, 627], "callback": [43, 159, 280, 285, 334, 335, 337, 338, 515, 530, 617, 619, 623], "on_epoch_begin": [43, 156, 163, 213, 247, 274, 277, 278, 279, 280, 285, 290, 291, 334, 337, 582, 583, 617, 619], "on_epoch_end": [43, 156, 163, 213, 247, 274, 277, 278, 279, 280, 285, 290, 291, 334, 337, 582, 583, 617, 619], "larger": [43, 162], "better": [43, 92, 174, 175, 272, 304, 314, 315, 326, 334, 583, 594, 595, 619, 620, 621, 623, 626, 629], "tf": [43, 101, 112, 118, 142, 185, 186, 187, 188, 192, 197, 200, 203, 223, 224, 225, 226, 239, 310, 312, 347, 577, 584, 596, 621, 624, 628], "compat": [43, 77, 142, 251, 260, 299, 312, 584, 596, 609, 612, 614, 625], "definit": [43, 106, 179, 184, 217, 222, 413, 426, 435, 484, 515], "inspect_weight_and_bia": 43, "node_list": 43, "graph_node_name_map": [43, 142], "bias": 43, "fused_node_map": 43, "pattern_map": 43, "between": [43, 137, 144, 154, 157, 163, 197, 200, 203, 205, 239, 252, 254, 255, 260, 262, 263, 300, 302, 303, 399, 511, 515, 530, 534, 582, 586, 591, 594, 605, 620, 623, 625, 626, 628, 629], "sequenc": [43, 59, 75, 101, 162, 186, 197, 200, 202, 203, 224, 238, 239, 248, 249, 253, 288, 296, 297, 301, 311, 534, 554, 580, 588, 620, 628], "val": [43, 98, 142, 166, 188, 191, 226, 229, 289], "seq": 43, "fused_mapping_revers": 43, "fused_map": 43, "inspect_activ": 43, "local": [43, 162, 163, 288, 327, 340, 344, 359, 391, 396, 409, 429, 577, 607, 611, 620, 626], "actual": [43, 98, 255, 303, 314, 584], "4": [43, 49, 75, 155, 162, 171, 195, 196, 197, 198, 199, 200, 203, 233, 234, 235, 236, 237, 239, 248, 249, 251, 296, 297, 299, 320, 489, 528, 534, 554, 577, 578, 584, 585, 587, 588, 589, 591, 592, 594, 602, 618, 619, 628, 629, 632], "tensorflowbasemodel": [43, 312, 440], "start": [43, 163, 197, 200, 203, 239, 248, 251, 262, 296, 299, 311, 314, 317, 320, 492, 512, 592, 628, 629, 633], "quantizedv2": 43, "move": [43, 74, 530, 622, 625], "quantizedconv2d": 43, "qat_convert": 43, "quantize_recip": [43, 111, 112], "kera": [43, 66, 112, 118, 210, 307, 312, 420, 427, 437, 584, 596, 604, 605, 632], "expect": [43, 98, 118, 188, 226, 319, 347, 469, 492, 528, 529, 587, 614, 623, 629], "sequenti": [43, 184, 222, 294, 316, 318, 321, 629], "decid": [43, 111, 112, 171, 249, 290, 295, 297, 408, 534, 625, 629], "fake": [43, 109, 147, 153, 623], "converted_model": [43, 171, 295, 304, 595], "diagnosis_help": [43, 534], "quan_model": [43, 142], "diagnosi": [43, 142, 295, 388, 391, 397, 420, 480, 509, 515], "get_output_op_nam": 43, "qmodel": [43, 144], "oupur": 43, "mse": [43, 149, 171, 255, 295, 303, 323, 399, 405, 577, 594, 622, 625], "backup": 43, "fallen": 43, "denot": 43, "tensorflow_itexadaptor": 43, "itex": [43, 105, 241, 243], "tensorflowqueri": [43, 534], "performance_onli": [43, 44, 45, 103, 127, 132, 141, 509], "itex_mod": [43, 44, 75, 85, 103, 127, 132], "quant_mod": [43, 327, 329, 331], "get_bf16_pattern": 43, "get_eightbit_pattern": 43, "qdq_enabl": [43, 44], "eightbit": [43, 627], "generate_internal_pattern": 43, "translat": [43, 248, 249, 260, 263, 266, 268, 296, 297, 554], "intern": [43, 98, 99, 106, 144, 267, 329, 331, 483, 579, 580, 620], "express": [43, 248, 296, 528], "graphconvert": 44, "qt_config": 44, "recip": [44, 111, 171, 241, 244, 246, 247, 293, 295, 315, 327, 586, 629], "int8_sequ": 44, "fp32_op": [44, 46, 103, 106], "bf16_op": [44, 46, 103, 106, 624], "fake_qu": [44, 84, 103, 127, 132], "new_api": [44, 45, 67, 68, 73, 75, 88, 95, 127, 132, 137], "use_bf16": [44, 45, 622], "fp32_frozen_graph": 44, "requantizeop": [44, 45], "so": [44, 45, 101, 118, 197, 200, 203, 239, 290, 334, 340, 530, 534, 587, 591, 594, 600, 602, 623, 624, 627, 628], "self": [44, 59, 88, 171, 247, 251, 280, 290, 295, 299, 314, 319, 327, 512, 534, 577, 579, 580, 591, 594, 626, 627, 629], "empti": [44, 98, 111, 251, 299, 319, 600], "without": [44, 45, 86, 98, 106, 142, 163, 203, 239, 251, 290, 299, 333, 499, 528, 577, 579, 582, 584, 594, 605, 619, 621, 622, 623, 629], "bf16_node": [44, 45], "quantize_with_qdq_pattern": 44, "newapi": [44, 90], "graphconverterwithoutcalib": 45, "recover_config": 45, "convert_without_calib": 45, "quantize_without_calib": 45, "rewrit": [46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105], "bf16convert": [46, 624], "graphrewriterbas": [46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 103, 104, 105], "do_transform": [46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 96, 103, 104, 105, 120, 127, 128, 132, 137, 138, 140, 141], "biasadd": [48, 55, 60, 62, 75, 105, 121, 122, 124, 131, 133, 588], "convertaddtobiasaddoptim": 48, "addv2": [48, 64, 65, 66, 121, 124, 588], "layout": 49, "convertlayoutoptim": 49, "nchw": [49, 136], "nhwc": [49, 63, 64, 99, 136], "abov": [49, 98, 251, 299, 534, 619], "leakyrelu": [50, 119, 121, 123, 124, 129], "convertleakyreluoptim": 50, "below": [50, 62, 63, 64, 70, 75, 294, 318, 320, 325, 529, 530, 533, 534, 577, 579, 582, 584, 590, 594, 597, 599, 607, 608, 611, 614, 616, 617, 619, 622, 623, 626, 627, 629], "subgraph": [50, 58, 62, 63, 64, 66, 98, 101, 148, 586], "coeffici": [50, 261, 620], "less": [50, 75, 142, 344, 578, 582, 619], "than": [50, 58, 142, 186, 197, 200, 203, 224, 239, 251, 299, 314, 344, 531, 533, 578, 580, 590, 594, 616, 617, 619, 620, 623, 626, 628, 629], "small": [50, 63, 64, 65, 251, 299, 322, 531, 577, 629], "nan": 51, "random": [51, 135, 142, 171, 197, 199, 200, 203, 236, 239, 260, 273, 295, 319, 323, 338, 344, 509, 529, 531, 622, 628, 631], "convertnantorandom": 51, "const": [51, 52, 59, 60, 63, 64, 66, 78, 81, 93, 94, 98, 99, 106, 295, 364, 375, 378, 385, 391, 393, 394, 398, 480, 488, 498], "consist": [51, 59, 269, 529, 530, 577, 586, 629], "placehold": [52, 98, 184, 222], "convertplaceholdertoconst": 52, "renam": [52, 77, 98, 269, 625], "placeholderwithdefault": 52, "constant": [52, 58, 75, 98, 99, 101, 106, 135, 241, 244, 295, 311, 313, 319, 323, 329, 338, 481, 579, 588, 628], "help": [52, 98, 212, 257, 311, 361, 499, 596, 597, 603, 614, 629], "simplifi": [52, 597, 608, 614], "input_graph_def": [52, 53, 56, 57, 59, 63, 64, 66, 70, 81, 106, 135], "nodes_to_convert": 52, "strtobool": 52, "val_str": 52, "equival": [52, 79, 260], "rerewrit": 53, "dequantizecastoptim": 53, "b16": 53, "redund": [53, 87, 89, 128], "dilat": 54, "contract": 54, "dilatedcontract": 54, "spacetobatchnd": 54, "batchtospacend": 54, "inject": 55, "dummi": [55, 189, 190, 227, 228, 245, 255, 303, 391, 395, 501, 533, 577, 580, 589, 594], "injectdummybiasaddoptim": 55, "miss": [55, 98, 357, 619, 623], "behind": 55, "them": [55, 58, 106, 186, 224, 530, 579, 588, 590, 617, 619, 629], "expanddim": 56, "expanddimsoptim": 56, "next": [56, 146, 165, 179, 217, 245, 271, 292, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 531, 577, 622, 629], "featch": 57, "fetchweightfromreshapeoptim": 57, "fetch": [57, 149, 152, 179, 217, 251, 299, 580], "fold": [58, 59, 63, 64, 75, 241, 244, 313, 588], "batchnorm": [58, 63, 117, 530], "foldbatchnormnodesoptim": 58, "scale_after_norm": 58, "batchnormwithglobalnorm": 58, "nodedef": [58, 63, 64, 66, 106, 135, 138, 477], "normal": [58, 63, 64, 66, 197, 200, 203, 239, 253, 301, 499, 616, 628], "convolut": [58, 63, 64, 582, 619, 621], "multipl": [58, 63, 64, 111, 163, 172, 173, 177, 178, 186, 187, 189, 190, 191, 192, 193, 197, 200, 203, 210, 215, 216, 218, 224, 225, 227, 228, 229, 230, 231, 235, 237, 239, 256, 274, 290, 304, 305, 306, 308, 314, 318, 327, 484, 578, 580, 586, 617, 619, 626, 629], "dynam": [58, 106, 176, 214, 241, 244, 294, 313, 329, 331, 352, 534, 579, 582, 586, 591, 597, 602, 603, 604, 605, 608, 614, 621, 629, 632], "onc": [58, 106, 142, 147, 165, 210, 292, 316, 318, 577, 579, 614, 619, 620, 621, 629, 632], "final": [58, 98, 162, 163, 290, 491, 600, 616, 619, 620, 623, 625, 629], "becom": [58, 534, 586, 620], "That": [58, 577], "mean": [58, 63, 64, 66, 147, 162, 176, 197, 199, 200, 203, 214, 236, 239, 251, 253, 255, 261, 263, 269, 288, 299, 301, 302, 303, 311, 314, 324, 530, 579, 584, 588, 594, 600, 619, 620, 623, 628, 629, 631], "opportun": [58, 63, 64], "reduc": [58, 63, 64, 162, 283, 534, 583, 595, 614, 615, 620, 621, 623, 624, 629, 631], "down": [58, 608], "addit": [58, 64, 66, 149, 174, 334, 484, 577, 582, 608, 625], "rather": [58, 590], "more": [58, 98, 135, 136, 142, 147, 153, 162, 174, 197, 200, 203, 239, 251, 267, 269, 288, 299, 327, 531, 532, 533, 577, 580, 582, 584, 589, 591, 592, 594, 595, 597, 605, 609, 612, 616, 617, 619, 620, 624, 629, 632], "expens": [58, 582, 629], "bake": 58, "identifi": [58, 63, 64, 66, 251, 299, 312, 340], "typic": [58, 111, 118, 247, 257, 294, 531, 533, 583, 585, 589, 619, 620], "simpler": 58, "form": [58, 63, 64, 66, 77, 251, 253, 299, 301, 391, 393, 492, 577, 582, 614], "spot": 58, "fusedbatchnorm": [58, 63, 77], "fusedbatchnormv3": [58, 119, 129], "_fusedbatchnormex": 58, "extend": [58, 63, 64], "futur": [58, 153, 174, 175, 206, 207, 591, 605], "newer": [58, 63, 64], "style": [58, 179, 193, 217, 231, 529, 580, 590], "rais": [58, 63, 64, 66, 77, 101, 106, 157, 162, 163, 166, 205, 248, 251, 254, 255, 288, 289, 290, 296, 299, 302, 303, 304, 319, 499, 512, 533, 554, 619, 620], "valueerror": [58, 63, 64, 66, 77, 106, 248, 251, 255, 296, 299, 303, 554, 587], "If": [58, 63, 64, 66, 70, 77, 99, 106, 155, 174, 175, 188, 197, 200, 203, 226, 239, 251, 263, 288, 289, 290, 299, 304, 315, 317, 334, 529, 530, 577, 578, 580, 584, 586, 592, 593, 594, 595, 600, 608, 609, 612, 614, 616, 623, 626, 627, 628, 629], "badli": [58, 63, 64, 66, 77], "duplic": [58, 63, 64, 66, 94, 104, 136, 319], "graphfoldconstantoptim": 59, "supported_op_typ": 59, "check_all_fold": 59, "been": [59, 162, 163, 202, 238, 248, 262, 288, 290, 296, 529, 531, 554, 577, 582, 595, 614], "complet": [59, 329, 331, 534, 577, 629, 631, 632], "check_const_input": 59, "node_nam": [59, 63, 64, 66, 75, 98, 106, 128, 135, 138, 142, 244, 311, 312, 379, 477], "fusebiasaddandaddoptim": 60, "columnwis": 61, "fusecolumnwisemuloptim": 61, "depthwiseconv2dn": [61, 67, 68, 121, 131, 588], "math": [62, 623], "fuseconvwithmathoptim": 62, "elimin": 62, "realdiv": [62, 65], "decompos": [63, 64], "fusedecomposedbnoptim": 63, "some": [63, 64, 111, 174, 186, 213, 224, 247, 289, 327, 499, 577, 580, 592, 594, 616, 619, 620, 623, 624, 627, 629], "normalizatin": [63, 64], "via": [63, 64, 118, 246, 247, 280, 285, 293, 516, 528, 584, 591, 597, 614], "group": [63, 64, 164, 275, 416, 591, 619, 620, 627, 628, 629, 632], "instead": [63, 64, 168, 185, 223, 344, 600, 602, 605], "singl": [63, 64, 121, 122, 128, 130, 131, 160, 165, 179, 186, 202, 203, 217, 224, 238, 239, 251, 260, 262, 290, 292, 299, 319, 380, 397, 416, 484, 518, 530, 580, 592, 619, 620], "made": [63, 64, 66, 261, 263, 322, 534, 623, 625, 629], "those": [63, 64, 70, 324, 344, 582, 583, 590, 617, 619, 620, 623, 629], "further": [63, 64, 66, 528, 595, 596, 597, 599, 608, 614], "recogn": [63, 64, 248, 296], "seen": [63, 64, 344, 534], "also": [63, 64, 162, 185, 188, 192, 197, 203, 223, 226, 230, 235, 239, 248, 296, 314, 315, 325, 326, 529, 531, 534, 554, 577, 579, 585, 589, 591, 594, 597, 602, 607, 608, 611, 614, 615, 616, 619, 623, 624, 629], "attempt": [63, 64, 340], "multipli": 63, "rsqrt": [63, 64], "varianc": [63, 137, 154], "epsilon": [63, 631], "gamma": [63, 64, 66], "OR": 63, "mul_0": 63, "appli": [63, 71, 85, 86, 90, 92, 94, 95, 96, 109, 119, 120, 121, 122, 123, 124, 127, 129, 130, 131, 132, 133, 137, 141, 156, 159, 162, 163, 213, 247, 249, 277, 288, 290, 297, 313, 327, 528, 577, 597, 599, 605, 614, 617, 619, 620, 623, 624, 626, 629, 631], "mul_1": 63, "insid": [63, 251, 299, 582, 583, 615, 619, 629], "end": [63, 98, 106, 142, 156, 159, 163, 186, 197, 200, 202, 203, 213, 224, 238, 239, 247, 260, 274, 278, 279, 290, 291, 314, 316, 318, 334, 534, 582, 583, 588, 592, 608, 616, 619, 620, 627, 628, 629], "mul_3": 63, "batchnorma": 63, "node_name_from_input": [63, 64, 66, 106, 135, 138], "strip": [63, 64, 66, 75, 79, 80, 142, 627], "off": [63, 64, 66, 529], "port": [63, 64, 66, 135, 512, 516, 577], "underli": [63, 64, 66, 261], "node_from_map": [63, 64, 66], "node_map": [63, 64, 66], "pull": [63, 64, 66, 492], "def": [63, 64, 66, 128, 171, 174, 175, 304, 315, 334, 530, 534, 579, 580, 582, 583, 584, 594, 623, 627, 629], "entri": [63, 64, 66, 128, 144, 147, 210, 246, 294, 362, 405, 408, 491, 499, 593], "index": [63, 64, 66, 98, 101, 111, 118, 155, 179, 184, 188, 192, 197, 204, 217, 222, 226, 230, 235, 247, 272, 295, 311, 314, 344, 516, 580, 594, 615], "want": [63, 64, 66, 98, 106, 156, 184, 186, 222, 224, 290, 320, 334, 530, 534, 577, 580, 584, 592, 594, 595, 602, 614, 615, 616, 626, 627, 629], "isn": [63, 64, 66, 106], "present": [63, 64, 66, 577, 621], "values_from_const": [63, 64, 66, 106], "node_def": [63, 64, 66, 106], "extract": [63, 64, 66, 106, 188, 226, 333, 518, 580], "access": [63, 64, 66, 106, 118, 168, 340, 344, 483, 499, 512, 516, 577, 609, 612], "valid_reshape_input": [63, 64], "reshape_in0_ndef": [63, 64], "reshape_in1_ndef": [63, 64], "bypass_reshap": [63, 64], "input_node_map": [63, 64], "get_const_dim_count": [63, 64], "dimens": [63, 64, 101, 162, 178, 197, 200, 203, 216, 239, 263, 284, 319, 580, 582, 619, 628], "instancenorm": 64, "fusedecomposedinoptim": 64, "instanc": [64, 109, 111, 112, 118, 150, 152, 155, 174, 175, 186, 204, 224, 247, 252, 253, 255, 258, 270, 271, 274, 275, 277, 278, 279, 295, 300, 301, 303, 304, 315, 319, 327, 333, 334, 364, 403, 407, 431, 440, 507, 528, 530, 534, 577, 578, 599, 605, 631, 632], "search": [64, 66, 75, 98, 167, 174, 175, 246, 247, 248, 258, 259, 260, 262, 263, 270, 271, 272, 273, 293, 296, 315, 319, 321, 322, 326, 386, 387, 414, 533, 554, 563, 577, 589, 591, 594, 597, 598, 608, 621, 627, 629], "contraint": [64, 66], "ani": [64, 66, 98, 118, 135, 144, 240, 247, 251, 253, 269, 299, 301, 327, 329, 330, 340, 346, 347, 349, 351, 353, 354, 355, 356, 357, 358, 359, 361, 362, 364, 365, 367, 374, 375, 376, 377, 378, 379, 381, 384, 386, 387, 397, 399, 404, 405, 408, 410, 416, 425, 428, 431, 435, 438, 439, 440, 442, 445, 447, 450, 454, 458, 460, 463, 466, 469, 472, 477, 478, 484, 485, 487, 489, 491, 492, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 515, 516, 523, 524, 528, 529, 533, 577, 579, 584, 597, 602, 615, 626], "clang": 64, "x____________": 64, "mean1": 64, "fusedop": [64, 66], "_mklfusedinstancenorm": 64, "_mkllayernorm": [64, 66], "squareddiff": 64, "mean0": 64, "mul1": 64, "constx": 64, "mul2": 64, "mul0": 64, "gelu": [65, 124], "fusegeluoptim": 65, "sqrt": 65, "erf": 65, "samll": 66, "layernorm": [66, 269], "fuselayernormoptim": 66, "remap": 66, "smaller": [66, 197, 200, 203, 239, 582, 619, 620, 628], "case": [66, 70, 155, 185, 197, 200, 202, 203, 204, 223, 238, 239, 246, 247, 255, 280, 285, 293, 294, 303, 314, 315, 489, 493, 499, 577, 579, 582, 583, 584, 588, 590, 594, 598, 602, 614, 615, 616, 619, 621, 623, 625, 628, 631, 632], "fusedbatcnormv3": 66, "And": [66, 213, 247, 530, 578, 600], "restrict": [66, 619, 620, 626], "2d": 66, "3d": [66, 621], "fill": [66, 366, 368, 369, 371, 373, 376, 377, 382, 577, 614, 626, 628], "f": [66, 582, 584, 623], "u": [66, 98, 137, 154, 533, 597], "d": [66, 70, 260, 582, 590, 615, 620, 632], "c": [66, 70, 188, 226, 577, 580, 587, 592, 620, 629], "h": [66, 203, 239, 584, 628], "n": [66, 162, 187, 197, 200, 203, 225, 239, 249, 288, 297, 487, 580, 582, 619, 620, 628], "v": [66, 605, 614, 631], "fusepadwithconv2doptim": 67, "excluded_op_nam": [67, 68, 167, 171, 295, 619], "itex_qdq_mod": [67, 68], "conv3d": [67, 68, 121], "fusepadwithfp32conv2doptim": 68, "fusetransposereshapeoptim": 69, "cse": [70, 94], "graphcseoptim": 70, "introduc": [70, 529, 534, 586, 588, 619, 620, 623, 625, 629], "ident": [70, 75, 76, 106, 135, 162, 288, 528, 582], "three": [70, 166, 186, 224, 247, 280, 285, 291, 316, 318, 530, 534, 577, 579, 586, 592, 595, 608, 617, 623, 624, 626, 627, 629], "child": [70, 99, 627], "b1": 70, "c1c2": 70, "d1": [70, 344], "c1": 70, "c2": 70, "bound": [70, 155, 203, 204, 239, 247, 251, 260, 295, 299, 319, 594, 628], "relu6": [70, 121, 124, 588], "multi": [70, 75, 155, 204, 247, 251, 262, 267, 269, 295, 299, 314, 325, 357, 531, 579, 580, 591, 616, 629], "elim": [70, 75], "grappler": [71, 588], "grappleroptim": 71, "input_output_nam": 71, "opt_cfg": 71, "python": [71, 118, 142, 188, 207, 226, 247, 251, 295, 299, 344, 447, 526, 529, 530, 577, 580, 584, 592, 599, 605, 608, 614, 621, 628], "wrapper": [71, 98, 99, 100, 101, 118, 143, 157, 185, 197, 200, 203, 205, 206, 207, 208, 209, 223, 235, 237, 239, 251, 255, 299, 302, 303, 306, 308, 312, 516, 524, 624], "leverag": [71, 531, 533, 582, 597, 614, 617, 623], "built": [71, 118, 172, 173, 177, 182, 186, 187, 192, 194, 196, 197, 199, 200, 203, 207, 208, 210, 215, 218, 220, 224, 225, 230, 232, 234, 235, 236, 237, 239, 294, 302, 303, 306, 310, 314, 315, 334, 531, 534, 580, 584, 607, 611, 616, 628, 629, 631], "convert_add_to_biasadd": [72, 83, 107], "convert_layout": [72, 83, 107], "convert_leakyrelu": [72, 83, 107], "convert_nan_to_random": [72, 83, 107], "convert_placeholder_to_const": [72, 83, 107], "dequantize_cast_optim": [72, 83, 107], "dilated_contract": [72, 83, 107], "dummy_biasadd": [72, 83, 107], "expanddims_optim": [72, 83, 107], "fetch_weight_from_reshap": [72, 83, 107], "fold_batch_norm": [72, 83, 107], "fold_const": [72, 83, 107], "fuse_biasadd_add": [72, 83, 107], "fuse_column_wise_mul": [72, 83, 107], "fuse_conv_with_math": [72, 83, 107], "fuse_decomposed_bn": [72, 83, 107], "fuse_decomposed_in": [72, 83, 107], "fuse_gelu": [72, 83, 107], "fuse_layer_norm": [72, 83, 107], "fuse_pad_with_conv": [72, 83, 107], "fuse_pad_with_fp32_conv": [72, 83, 107], "fuse_reshape_transpos": [72, 83, 107], "graph_cse_optim": [72, 83, 107], "grappler_pass": [72, 83, 107], "insert_print_nod": [72, 83, 107], "move_squeeze_after_relu": [72, 83, 107], "pre_optim": [72, 83, 107], "remove_training_nod": [72, 83, 107, 135], "rename_batch_norm": [72, 83, 107], "split_shared_input": [72, 83, 107, 135], "strip_equivalent_nod": [72, 83, 107, 142], "strip_unused_nod": [72, 83, 107, 142], "switch_optim": [72, 83, 107], "print": [73, 144, 255, 303, 313, 344, 577, 584, 594, 619, 629], "insertprintminmaxnod": 73, "pre_node_nam": 73, "post_node_nam": 73, "pass": [73, 75, 77, 98, 142, 155, 202, 238, 247, 267, 269, 280, 285, 291, 294, 344, 442, 498, 511, 512, 530, 534, 578, 580, 582, 583, 584, 586, 590, 594, 615, 619, 622, 623, 624, 631], "sampl": [73, 106, 144, 176, 179, 184, 186, 187, 188, 192, 197, 199, 200, 203, 214, 217, 222, 224, 225, 226, 230, 235, 236, 239, 254, 255, 272, 302, 303, 319, 375, 431, 500, 531, 533, 580, 585, 591, 615, 623, 628, 629, 631, 632], "squeez": [74, 530], "movesqueezeafterreluoptim": 74, "match": [74, 75, 98, 106, 118, 202, 238, 251, 252, 299, 300, 311, 582, 615], "pre": [75, 112, 136, 174, 175, 186, 224, 268, 304, 313, 315, 327, 334, 580, 582, 583, 595, 602, 619, 620, 621, 623, 627, 629], "entranc": [75, 177, 180, 197], "preoptim": 75, "get_excluded_node_nam": 75, "exclud": [75, 267, 269, 311, 534, 595, 624], "get_optimized_model": 75, "possibl": [75, 204, 247, 260, 317, 318, 321, 361, 428, 577, 617, 624, 629], "useless": 75, "6": [75, 577, 588, 623, 629, 632], "common": [75, 135, 162, 201, 247, 257, 263, 271, 272, 273, 288, 294, 295, 337, 492, 493, 499, 528, 580, 583, 584, 586, 590, 592, 623], "7": [75, 135, 155, 171, 314, 578, 587, 588, 592, 623, 625, 629, 632], "get_matched_nod": 75, "illustr": [75, 583], "matched_node_a_nam": 75, "has_positive_input": [75, 106], "posit": [75, 106, 162, 203, 239, 269, 528, 577, 594, 597], "neg": [75, 106], "removetrainingnodesoptim": 76, "protected_nod": [76, 135], "types_to_splic": [76, 135], "checknumer": [76, 135], "stopgradi": 76, "tranin": 76, "edg": [76, 311, 413, 415, 420, 480, 628], "fusedbatchnormv2": 77, "renamebatchnormoptim": 77, "due": [77, 619, 620, 623, 627], "histor": 77, "reason": [77, 206, 207, 321, 528, 579, 627, 629], "As": [77, 251, 299, 326, 530, 577, 579, 582, 608, 619, 620, 629], "latter": [77, 111], "former": 77, "chang": [77, 92, 137, 147, 154, 163, 165, 290, 292, 319, 322, 344, 359, 365, 468, 490, 497, 529, 579, 584, 587, 593, 594, 597, 607, 608, 611, 614, 620, 627, 628, 629], "platform": [77, 98, 344, 487, 533, 591, 597, 605, 621, 623, 632], "vnni_bf16": 77, "amx": [77, 533, 621], "instruct": [77, 577, 582, 592, 595, 609, 612, 621, 622, 623], "splitsharedinputoptim": 78, "stripequivalentnodesoptim": 79, "output_node_nam": [79, 80, 127, 128, 132, 135, 142, 307, 312], "unus": [80, 98, 142, 260, 269, 311], "stripunusednodesoptim": 80, "input_node_nam": [80, 127, 132, 135, 142, 307, 312], "switchoptim": 81, "condit": [81, 186, 187, 188, 192, 197, 200, 203, 224, 225, 226, 239, 316, 318, 580, 593, 628, 629], "enter": [81, 608, 614], "freeze_fake_qu": [83, 91, 107], "freeze_valu": [83, 91, 107], "freeze_value_without_calib": [83, 91, 107], "fuse_conv_redundant_dequant": [83, 91, 107], "fuse_conv_requant": [83, 91, 107], "fuse_matmul_redundant_dequant": [83, 91, 107], "fuse_matmul_requant": [83, 91, 107], "meta_op_optim": [83, 91, 107], "post_hostconst_convert": [83, 91, 107], "post_quantized_op_cs": [83, 91, 107], "rnn_convert": [83, 91, 107], "scale_propag": [83, 91, 107], "onnx_graph": [83, 97, 107], "onnx_schema": [83, 97, 107], "tf2onnx_util": [83, 97, 107], "insert_qdq_pattern": [83, 102, 107], "merge_duplicated_qdq": [83, 102, 107], "share_qdq_y_pattern": [83, 102, 107], "freez": [84, 85, 86, 597, 619, 620], "fakequ": 84, "freezefakequantopoptim": 84, "freezevaluetransform": 85, "max_min_data": [85, 86], "postfix": [85, 86], "tensor_data": [85, 344], "th": [85, 86], "gpu": [85, 86, 93, 106, 135, 533, 578, 591, 595, 599, 605, 614, 622, 623], "generate_output_graph": [85, 86], "max_name_valu": [85, 86], "freeze_max": [85, 86], "freeze_min": [85, 86], "generate_output_graph_rang": [85, 86], "freezevaluewithoutcalibtransform": 86, "95": [86, 251, 255, 299, 302, 303, 594, 632], "do_transformation_without_calib": 86, "quantizedconv": [87, 88], "quantizeddeconv": 87, "fuseconvredundantdequantizetransform": 87, "cpu": [87, 88, 89, 90, 106, 135, 171, 263, 295, 344, 533, 578, 591, 595, 597, 599, 605, 614, 618, 621, 622, 624, 627], "_quantizedconv": 87, "_quantizeddeconv": 87, "successor": [87, 88, 89, 90], "requant": [88, 90, 627], "fuseconvrequantizetransform": 88, "two": [88, 106, 144, 155, 162, 163, 165, 188, 192, 193, 197, 204, 226, 230, 231, 235, 251, 288, 292, 294, 299, 325, 327, 344, 530, 531, 577, 580, 582, 584, 588, 594, 595, 619, 623, 624, 626, 629, 631], "fuse_pattern": 88, "sum_pattern": 88, "quantizedmatmul": [89, 90], "fusematmulredundantdequantizetransform": 89, "_quantizedmatmul": [89, 90], "fusematmulrequantizedequantizetransform": 90, "quantizedmatmulwithbiasanddequant": 90, "fusematmulrequantizetransform": 90, "fusematmulrequantizedequantizenewapitransform": 90, "fusematmulrequantizenewapitransform": 90, "meta": [92, 188, 226, 621], "metainfochangingmemopoptim": 92, "metaop": 92, "With": [92, 155, 295, 314, 530, 534, 579, 602, 607, 611, 615, 616, 619, 621, 623, 626, 629, 632], "quantizev2": [92, 94, 98, 121, 122, 124, 128, 136], "hostconst": 93, "posthostconstconvert": 93, "postcseoptim": 94, "decreas": 94, "size": [94, 106, 147, 162, 176, 178, 179, 185, 188, 192, 194, 196, 197, 199, 200, 203, 214, 216, 217, 223, 226, 230, 232, 235, 236, 239, 251, 260, 263, 269, 288, 299, 311, 314, 344, 364, 374, 375, 497, 499, 500, 528, 577, 579, 580, 584, 587, 614, 615, 616, 619, 620, 628, 631, 632], "rnn": [95, 106], "quantizedrnnconvert": 95, "calibration_data": [95, 103], "rnn_detail": 95, "scalepropagationtransform": 96, "direct": [96, 162, 288, 449], "algrothim": 96, "export": [97, 171, 247, 251, 295, 299, 305, 306, 311, 312, 313, 334, 499, 533, 600, 615, 627], "onnxgraph": 98, "output_shap": [98, 99, 118], "extra_opset": 98, "output_nam": [98, 128, 136, 171, 241, 243, 244, 313, 586], "is_subgraph": 98, "graph_nam": 98, "manipul": [98, 99], "extra": [98, 253, 301], "set_config": 98, "field": [98, 106, 135, 171, 188, 226, 251, 294, 295, 299, 530, 534, 577, 584, 626, 629, 631], "is_target": 98, "make_const": 98, "np_val": 98, "skip_convers": [98, 99], "raw": [98, 99, 187, 191, 194, 225, 229, 232, 324, 589, 594, 629], "must": [98, 203, 239, 251, 255, 299, 303, 529, 530, 577, 578, 579, 592, 628], "uniqu": [98, 251, 263, 294, 299, 319, 386, 387, 623], "would": [98, 106, 162, 529, 595, 619, 620, 623], "raw_data": 98, "attr": [98, 99, 100, 101, 106, 135, 142], "output_count": 98, "op_name_scop": 98, "domain": [98, 99, 100, 101, 162, 171, 295, 361, 369, 372, 389, 391, 396, 420, 427, 428, 431, 449, 480, 481, 483, 499, 511, 516, 577, 619, 620, 629], "onnx_domain": 98, "infer_shape_dtyp": 98, "branch": [98, 142, 340, 577], "append_nod": 98, "remove_nod": [98, 106, 311], "safe_remove_nod": 98, "to_delet": 98, "delet": [98, 340, 379, 385, 386, 391, 392, 393, 394, 395, 619, 620], "third": [98, 251, 299, 577, 593], "parti": [98, 251, 299, 593, 623], "consum": [98, 579], "reset_nod": 98, "reset": [98, 144, 150, 152, 248, 254, 255, 296, 302, 303, 314, 512, 554, 594], "create_new_graph_with_same_config": 98, "clean": [98, 157, 202, 205, 238, 364, 375, 378, 385, 386, 391, 393, 394, 395, 482, 498, 529], "is_empty_input": 98, "mai": [98, 106, 135, 142, 274, 275, 277, 278, 279, 314, 528, 529, 577, 579, 587, 593, 595, 607, 611, 618, 621, 623, 629], "place": [98, 313, 583, 592, 619, 627], "argument": [98, 247, 267, 269, 280, 285, 291, 294, 346, 454, 458, 463, 466, 472, 484, 492, 512, 531], "update_node_shape_dtyp": 98, "overrid": [98, 174, 213, 247, 293, 327, 340, 344, 489], "try": [98, 184, 222, 316, 428, 431, 440, 512, 530, 586, 623], "update_proto": [98, 99], "protobuf": [98, 99, 101], "out": [98, 135, 144, 162, 186, 187, 188, 192, 197, 224, 225, 226, 246, 247, 269, 288, 293, 311, 315, 529, 530, 533, 580, 597, 602, 607, 608, 609, 611, 612, 614, 620, 622, 623], "structur": [98, 99, 106, 163, 290, 332, 424, 591, 613, 615, 619, 620, 623, 627, 632], "get_nod": [98, 413], "get_node_by_output": 98, "search_in_parent_graph": 98, "go": [98, 320, 588, 609, 612, 622, 628], "through": [98, 144, 174, 175, 202, 238, 304, 315, 320, 533, 578, 588, 590, 591, 594, 600, 616, 617, 619, 622], "nest": [98, 99, 168], "parent": [98, 106, 163, 165, 284, 290, 292, 311, 627], "get_node_by_output_in_current_graph": 98, "get_node_by_nam": [98, 477], "set_node_by_nam": 98, "is_const": [98, 99], "get_tensor_valu": [98, 99, 627], "as_list": [98, 99], "get_dtyp": 98, "set_dtyp": 98, "copy_dtyp": 98, "src_name": 98, "dst_name": 98, "copi": [98, 135, 171, 289, 295, 344], "get_shap": 98, "get_rank": 98, "len": [98, 144, 171, 197, 200, 203, 239, 319, 580, 584, 628], "set_shap": 98, "copy_shap": 98, "add_graph_output": 98, "topological_sort": [98, 311], "topolog": [98, 311], "make_graph": 98, "doc": [98, 162, 288, 329, 330, 331, 344, 594, 609, 612], "graphproto": [98, 99], "text": [98, 101, 197, 200, 202, 203, 238, 239, 248, 253, 291, 296, 301, 554, 593, 603, 621, 628, 632], "make_model": 98, "graph_doc": 98, "tfqdq_to_onnxqdq": 98, "make_onnx_graph_io": 98, "tensor_value_info": 98, "dump_graph": [98, 106], "debug": [98, 338, 341, 401, 402, 406, 577, 607, 611, 615, 629], "dump_node_statist": 98, "include_attr": 98, "include_subgraph": 98, "counter": [98, 101], "within": [98, 100, 163, 246, 247, 251, 293, 299, 312, 315, 319, 528, 530, 595, 607, 611, 614, 621], "remove_input": 98, "to_be_remov": 98, "input_index": [98, 311], "effici": [98, 147, 153, 531, 579, 582, 597, 617, 621], "otherwis": [98, 99, 175, 188, 197, 200, 203, 226, 239, 327, 528, 580, 609, 612, 622, 628], "look": [98, 533, 534, 588, 594, 631], "old_input": 98, "insert_new_node_on_input": 98, "scalar": [98, 99, 174, 175, 304, 315, 334, 594, 623], "wa": [98, 135, 175, 468, 534, 577, 621, 629], "add_graph_input": 98, "order": [98, 149, 248, 249, 269, 294, 296, 297, 313, 318, 319, 320, 324, 325, 331, 333, 428, 431, 440, 501, 530, 554, 594, 619, 622, 627, 629], "matter": [98, 184, 222, 624], "assum": [98, 202, 238, 251, 272, 299, 534, 588, 614], "main": [98, 147, 174, 210, 291, 327, 479, 516, 530, 584, 589, 601, 603, 615, 620, 623], "insert_node_on_output": 98, "produc": [98, 582], "goe": 98, "insert_new_node_on_output": 98, "find_output_consum": 98, "replace_all_input": 98, "new_input": 98, "_output_to_consum": 98, "determin": [98, 160, 162, 163, 339, 512, 528, 530, 620], "impact": [98, 318, 321, 322, 324, 325, 625, 629], "replace_input": 98, "extract_sub_graph_nod": 98, "outputs_nam": 98, "input_check": 98, "remove_unused_input": 98, "output_id": 98, "delete_unused_nod": 98, "safe_to_remove_nod": 98, "safe": [98, 118, 339, 529], "convert_qdq_nod": 98, "q_node": 98, "dq_node": 98, "delete_qdq_nod": 98, "onnxnod": 99, "data_format": [99, 188, 192, 197, 199, 200, 226, 230, 235, 236], "output_dtyp": 99, "get_value_attr": 99, "get_onnx_attr": 99, "child_nam": 99, "is_nhwc": 99, "is_scalar": 99, "is_graph_input": 99, "is_graph_input_default_const": 99, "is_whil": 99, "get_attr": 99, "get_attr_valu": 99, "get_attr_int": 99, "get_attr_str": 99, "encod": [99, 251, 260, 269, 299, 628], "utf": [99, 202, 238], "8": [99, 109, 171, 202, 238, 295, 489, 530, 588, 592, 619, 621, 629, 632], "set_attr": 99, "set_attr_onnx": 99, "need_skip": 99, "possibli": [99, 269], "scalar_to_dim1": 99, "set_tensor_valu": 99, "new_val": 99, "get_body_graph": 99, "bodi": [99, 528], "set_body_graph_as_attr": 99, "attr_nam": 99, "get_implicit_input": 99, "implicit": 99, "being": [99, 144, 251, 263, 294, 299, 313, 416], "schema": 100, "onnxopschema": 100, "since_vers": 100, "from_onnx_schema": 100, "construct": [100, 186, 189, 190, 193, 197, 200, 201, 206, 207, 208, 209, 211, 224, 227, 228, 231, 302, 303, 306, 308, 312, 337, 528, 580, 584, 620, 629], "has_attribut": 100, "get_schema": 100, "max_inclusive_opset_vers": 100, "get_max_supported_opset_vers": 100, "packag": [100, 319, 352, 360, 366, 368, 369, 371, 372, 373, 376, 377, 380, 382, 401, 402, 406, 409, 415, 417, 420, 421, 427, 446, 448, 453, 456, 459, 460, 462, 465, 471, 476, 480, 514, 534, 577, 587, 592, 614, 615, 621, 625, 629], "set_nam": 101, "find_opset": 101, "assert_error": 101, "bool_val": 101, "error_msg": 101, "messag": [101, 140, 499, 511, 516, 629], "map_numpy_to_onnx_dtyp": 101, "np_dtype": 101, "map_onnx_to_numpy_typ": 101, "onnx_typ": 101, "add_port_to_nam": 101, "nr": 101, "get_tensorflow_node_attr": 101, "pars": [101, 135, 138, 149, 186, 187, 199, 203, 224, 225, 236, 239, 269, 274, 346, 357, 362, 385, 386, 388, 391, 392, 393, 394, 397, 450, 454, 458, 463, 466, 472, 491, 499, 507, 518, 628], "get_tensorflow_tensor_shap": 101, "get_tensorflow_node_shape_attr": 101, "map_tensorflow_dtyp": 101, "get_tensorflow_tensor_data": 101, "convert_tensorflow_tensor_to_onnx": 101, "read_tensorflow_node_attr": 101, "read": [101, 142, 188, 191, 203, 226, 229, 239, 247, 280, 285, 289, 291, 414, 418, 419, 580, 624, 626], "infer_onnx_shape_dtyp": 101, "opset_vers": [101, 136, 171, 241, 243, 244, 313, 586], "input_shap": [101, 118, 190, 228, 310, 428, 431, 440, 579, 580], "input_dtyp": 101, "sometim": [101, 106, 135, 530, 619, 623], "make_onnx_shap": 101, "seqtyp": 101, "tensor_dtyp": 101, "around": 101, "signifi": 101, "make_onnx_inputs_output": 101, "elem_typ": 101, "datatyp": [101, 106, 135, 171, 321, 624, 629], "save_protobuf": 101, "as_text": 101, "is_onnx_domain": 101, "is_list_or_tupl": 101, "are_shapes_equ": 101, "src": [101, 171, 615], "dest": 101, "equal": [101, 137, 142, 154, 344, 594, 620], "get_subgraphs_from_onnx": 101, "model_proto": 101, "over": [101, 188, 192, 197, 226, 230, 235, 251, 255, 299, 303, 311, 319, 585, 589, 591, 594, 605, 614, 622, 629], "df": [101, 260, 307, 312, 313], "initialize_name_count": 101, "avoid": [101, 186, 224, 312, 530, 627], "conflict": [101, 587], "make_nam": 101, "get_index_from_strided_slice_of_shap": 101, "outputs_to_valu": 101, "stride": [101, 197, 200, 203, 239, 274, 628], "slice": 101, "compute_const_folding_using_tf": 101, "const_node_valu": 101, "graph_output": 101, "generategraphwithqdqpattern": 103, "op_wise_config": [103, 127, 132, 329, 330], "quantized_nod": 103, "quantizaiton": 103, "mergeduplicatedqdqoptim": 104, "y": [105, 203, 239, 319, 600, 628], "shareqdqforitexypatternoptim": 105, "break": [105, 584], "graphanalyz": 106, "extend_engin": 106, "analyz": [106, 135, 312, 619, 620, 626, 627], "under": [106, 118, 188, 226, 343, 531, 577, 580, 593, 594, 597, 602, 603, 614, 617, 619, 620, 623, 627, 629], "singleton": [106, 295, 344, 480, 488], "getter": [106, 156, 159, 213, 240, 247, 271, 280, 285, 293, 294, 313, 315, 334, 429], "_graph": 106, "retrun": 106, "get_graph_input_output": 106, "doesn": [106, 197, 200, 203, 239, 294, 498, 534, 584, 615, 631], "know": [106, 206, 207, 240, 247, 280, 285, 485, 584, 625], "clearli": 106, "similar": [106, 269, 622, 629, 631], "featur": [106, 144, 157, 171, 186, 187, 199, 203, 205, 224, 225, 236, 239, 269, 295, 529, 533, 578, 579, 581, 582, 595, 596, 597, 601, 602, 605, 614, 620, 621, 625, 628], "summarize_graph": 106, "py": [106, 142, 144, 163, 249, 251, 252, 253, 290, 297, 299, 300, 301, 515, 530, 534, 577, 584, 592, 599, 601, 602, 603, 609, 612, 623, 625, 627], "writtern": 106, "googl": [106, 533, 595, 621], "query_fusion_pattern_nod": 106, "public": [106, 528, 609, 612], "aggreg": [106, 493], "statu": [106, 364, 375, 378, 383, 385, 391, 393, 394, 482, 495, 511, 524, 528, 579, 616], "pleas": [106, 144, 147, 153, 160, 162, 186, 187, 188, 191, 192, 197, 224, 225, 226, 229, 247, 280, 285, 288, 290, 291, 530, 531, 532, 533, 534, 577, 578, 580, 583, 584, 592, 594, 595, 597, 598, 602, 605, 619, 620, 624, 625, 626, 629], "_search_pattern": 106, "remove_node_with_single_input_output": 106, "rebuild": [106, 598, 607, 611], "except": [106, 295, 344, 480, 488, 489, 499, 514, 524], "fail": [106, 493, 530], "replace_const_nod": 106, "new_const_nod": 106, "target_nod": 106, "old_constant_node_nam": 106, "replace_al": 106, "outdat": 106, "replace_constant_graph_with_constant_nod": 106, "new_nod": 106, "old_end_node_nam": 106, "replace_single_nod": 106, "old_output_node_nam": 106, "old_output_nam": [106, 311], "old_input_node_nam": 106, "old_input_nam": [106, 311], "top": [106, 203, 239, 246, 247, 255, 280, 285, 293, 302, 303, 315, 594, 614, 628, 632], "bottom": [106, 577], "replace_nod": 106, "old_node_nam": 106, "output_nodes_nam": 106, "node_name_detail": 106, "add_nod": [106, 311, 413], "start_node_nam": 106, "end_node_nam": 106, "get_frame_info": 106, "frame": 106, "ordereddict": [106, 327, 333, 386, 391, 500], "parent_frame_detail": 106, "parse_graph": 106, "outputnod": 106, "graphrewriterhelp": 106, "encapsul": [106, 174, 175, 304, 315, 334, 596], "compare_node_attr": 106, "node_a": 106, "node_b": 106, "compar": [106, 144, 255, 303, 314, 327, 577, 583, 594, 620, 623, 626, 627, 629], "create_nod": [106, 135], "create_constant_nod": [106, 135], "set_attr_dtyp": [106, 135], "set_attr_tensor": [106, 135], "set_attr_type_list": [106, 135], "set_attr_string_list": [106, 135], "set_attr_str": [106, 135], "set_attr_int_list": 106, "set_attr_int": [106, 135], "set_attr_float": [106, 135], "set_attr_bool": [106, 135], "generate_int32_bias_for_conv": 106, "bias_tensor": 106, "channel_s": 106, "max_input": 106, "min_input": 106, "max_filter_tensor": [106, 344], "min_filter_tensor": [106, 344], "activation_rang": 106, "weights_rang": 106, "127": [106, 189, 190, 227, 228, 580, 623], "rang": [106, 189, 190, 203, 227, 228, 239, 251, 260, 299, 334, 533, 534, 580, 582, 583, 584, 617, 619, 620, 623, 628], "int32_bia": 106, "generate_int32_bias_for_matmul": 106, "weights_tensor": 106, "input_rang": 106, "max_filter_valu": 106, "min_filter_valu": 106, "gen_valid_sampling_log": 106, "log_path": 106, "log": [106, 140, 204, 247, 280, 285, 338, 341, 347, 364, 375, 378, 385, 391, 393, 394, 450, 484, 490, 491, 492, 493, 498, 512, 530, 577, 605, 626, 627, 629], "analysis_rnn_model": 106, "quantize_lay": [107, 108, 110], "fake_quant": [107, 108, 110], "quantize_config": [107, 108, 110], "quantize_help": [107, 108, 110], "quantize_wrapp": [107, 108, 110], "fuse_qdq_bn": [107, 108, 126], "fuse_qdq_concatv2": [107, 108, 126], "fuse_qdq_conv": [107, 108, 126], "fuse_qdq_deconv": [107, 108, 126], "fuse_qdq_in": [107, 108, 126], "fuse_qdq_matmul": [107, 108, 126], "fuse_qdq_pool": [107, 108, 126], "optimize_qdq": [107, 108, 126], "optimize_lay": [108, 110, 113], "quantize_layer_add": [108, 110, 113], "quantize_layer_bas": [108, 110, 113, 115, 117], "quantize_layer_bn": [108, 110, 113], "fakequantizebas": 109, "abc": [109, 253, 301, 428, 491, 534, 627, 629], "get_config": [109, 118, 525], "serial": [109, 186, 224, 397, 404, 405, 435, 487, 489, 501, 502, 506, 507], "fakequant": 109, "classmethod": [109, 118, 150, 152, 281, 282, 283, 329, 330, 332, 340, 486, 520, 522, 525], "from_config": [109, 118], "instanti": [109, 340, 617], "requir": [109, 118, 213, 247, 251, 263, 294, 299, 312, 314, 317, 320, 327, 346, 348, 357, 360, 415, 421, 428, 431, 433, 440, 446, 453, 454, 455, 456, 458, 459, 460, 462, 465, 466, 471, 476, 480, 530, 534, 577, 578, 579, 583, 584, 588, 595, 596, 598, 608, 614, 618, 619, 620, 623, 625, 626, 627, 629, 631], "per_channel": [109, 135, 588, 631], "num_bit": 109, "symmetr": [109, 623, 628, 629], "narrow_rang": 109, "quantizeconfig": [111, 112, 118], "There": [111, 255, 294, 303, 316, 318, 577, 582, 588, 591, 594, 595, 597, 629, 631], "global": [111, 162, 163, 171, 274, 275, 277, 278, 279, 288, 295, 344, 512, 530, 619, 620, 622, 629], "add_quantize_recip": 111, "layer_nam": [111, 162, 288], "For": [111, 153, 162, 188, 202, 203, 213, 226, 238, 239, 247, 251, 252, 253, 255, 260, 288, 291, 299, 300, 301, 303, 304, 315, 320, 327, 489, 528, 530, 532, 534, 577, 583, 584, 586, 588, 591, 597, 599, 600, 602, 605, 619, 624, 627, 629, 631, 632], "conv5_block3_3_conv": 111, "flase": 111, "conv5_block3_3_add": 111, "query_lay": 111, "layer_recip": 111, "remove_lay": 111, "get_quantize_recip": 111, "is_empti": 111, "clear_quantize_recip": 111, "clear": [111, 184, 222, 248, 254, 255, 263, 296, 302, 303, 534, 554, 588, 594], "class": [112, 149, 272, 422, 423, 530, 531, 579, 580, 582, 594, 605, 616, 617, 625, 627, 629, 631], "init_quantize_config": 112, "begin": [112, 156, 160, 163, 213, 247, 274, 278, 279, 280, 285, 290, 291, 334, 582, 583, 619, 629], "model_nam": [112, 263, 374, 380, 499], "special": [112, 314, 530, 579, 594, 616], "qat_clone_funct": 112, "leav": [112, 608], "quantizewrapp": [112, 118], "wrapped_lay": 112, "config_quantizable_lay": 114, "quantizelayeradd": 115, "quantizelayerbas": [115, 116, 117], "quantizelay": 116, "quantizelayerbatchnorm": 117, "quantizewrapperbas": 118, "trainabl": 118, "sublay": 118, "trainable_weight": 118, "track": [118, 327, 614, 626], "descent": 118, "non_trainable_weight": 118, "thei": [118, 155, 162, 204, 247, 269, 295, 340, 528, 582, 588, 594, 595, 602, 616, 619, 620], "manual": [118, 188, 226, 580, 597, 603, 605, 608], "add_loss": 118, "regular": [118, 164, 248, 289, 296, 619], "eager": [118, 291, 346, 454, 458, 466, 584, 591, 623, 624, 627, 632], "gradienttap": 118, "tensorshap": 118, "compute_output_shap": 118, "caus": [118, 598, 619, 620], "state": [118, 144, 254, 255, 267, 269, 302, 303, 313, 329, 332, 600, 619, 620], "happen": 118, "later": [118, 147, 153, 627], "integ": [118, 156, 159, 162, 163, 165, 240, 247, 251, 255, 272, 288, 290, 292, 299, 303, 534, 623, 629], "query_input_index": 118, "design": [118, 156, 159, 185, 207, 208, 213, 223, 247, 262, 293, 302, 303, 304, 315, 320, 531, 602, 605, 619, 620, 623], "logic": [118, 174, 175, 327, 511, 631], "live": 118, "output_obj": 118, "fusenodestartwithfusedbatchnormv3": [119, 129], "quantizenodebas": [119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 133, 134], "_quantizedfusedbatchnorm": 119, "apply_newly_bn_relu_fus": [119, 129], "match_node_nam": [119, 121, 122, 123, 124, 129, 131, 133], "apply_newly_bn_leakyrelu_fus": [119, 129], "get_longest_fus": [119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 133, 134], "longest": [119, 120, 121, 122, 123, 124, 125, 129, 131, 133, 197, 200, 202, 203, 238, 239, 628], "apply_the_transform": [119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 133, 134], "concatv2": [120, 130, 141, 588], "fusenodestartwithconcatv2": [120, 130], "quantizedconcatv2": [120, 130], "fusenodestartwithconv2d": [121, 131], "apply_conv3d_add_addn_relu_fus": 121, "addn": [121, 131, 588], "apply_conv3d_add_addn_fus": 121, "apply_conv3d_add_relu_fus": 121, "apply_conv3d_add_fus": 121, "apply_conv3d_single_fus": 121, "apply_newly_conv_biasadd_relu_fus": 121, "elu": [121, 124], "sigmoid": [121, 124], "apply_newly_conv_biasadd_fus": 121, "apply_newly_conv_single_fus": 121, "apply_newly_conv_biasadd_addn_relu_fus": 121, "apply_conv_biasadd_hardswish_fus": 121, "hardswish": 121, "apply_newly_conv_biasadd_swishf32_fus": 121, "swishf32": 121, "swish_f32": 121, "apply_newly_conv_biasadd_addn_fus": 121, "patter": 121, "conv2dbackpropinput": 122, "conv3dbackpropinputv2": 122, "fusenodestartwithdeconv2d": 122, "apply_single_deconv2d_fus": 122, "apply_deconv2d_biasadd_fus": 122, "apply_single_deconv3d_fus": 122, "apply_deconv3d_biasadd_fus": 122, "fusedinstancenorm": 123, "fusenodestartwithfusedinstancenorm": 123, "apply_newly_in_relu_fus": 123, "batchmatmul": 124, "batchmatmulv2": 124, "fusenodestartwithmatmul": [124, 133], "apply_matmul_biasadd_relu_fus": [124, 133], "tanh": 124, "apply_matmul_biasadd_fus": [124, 133], "apply_batchmatmulv2_fus": 124, "apply_batchmatmulv2_mul_add_fus": 124, "avgpool": [125, 134, 588], "fusenodestartwithpool": [125, 134], "optimizeqdqgraph": 127, "op_wise_sequ": [127, 132], "quantizegraphbas": [127, 128, 132], "get_quantized_nod": 127, "quantizegraph": 128, "register_transform": 128, "virtual": [128, 138, 621], "deriv": [128, 156, 159, 160, 162, 163, 164, 165, 213, 240, 247, 288, 290, 292], "remove_dead_nod": 128, "longer": [128, 186, 197, 200, 203, 224, 239, 580, 628], "eightbitize_single_input_tensor_nod": 128, "original_nod": 128, "add_op_funct": 128, "add_output_graph_nod": 128, "output_nod": [128, 374], "remove_redundant_quant": 128, "old_graph": 128, "create_nodes_map": 128, "apply_conv_single_fus": 131, "apply_conv_biasadd_relu_fus": 131, "apply_conv_biasadd_fus": 131, "apply_conv_biasadd_addn_relu_fus": 131, "quantizegraphforintel": 132, "itself": [134, 305, 306, 307, 309, 311, 312, 602], "herlper": 135, "quantizegraphhelp": 135, "sever": [135, 165, 197, 200, 203, 239, 292, 531, 577, 582, 583, 591, 595, 607, 611, 619, 620, 622, 628, 629, 631], "staticmethod": 135, "get_sorted_graph": 135, "reorder": [135, 267, 269], "easier": [135, 136, 577, 607, 611, 614, 621], "in_graph": [135, 142], "ouput": 135, "prune": [135, 156, 159, 160, 161, 162, 163, 164, 165, 166, 171, 213, 247, 274, 275, 277, 278, 279, 281, 282, 283, 285, 286, 288, 289, 290, 292, 294, 295, 313, 334, 344, 355, 362, 375, 381, 391, 393, 420, 428, 440, 455, 480, 488, 499, 504, 533, 563, 584, 585, 588, 589, 591, 617, 621, 623, 631], "aren": 135, "uncondition": 135, "copy_attr": 135, "attr_valu": 135, "unique_node_name_from_input": 135, "ensure_tensor_name_has_port": 135, "sure": [135, 162, 163, 165, 288, 290, 292, 428, 577, 578], "explicit": [135, 528], "generate_quantized_weight_nod": 135, "host_op_typ": 135, "input_nod": [135, 374], "weight_bit": 135, "enter_nod": 135, "tensorflowqdqtoonnxqdqconvert": 136, "shape_overrid": 136, "inputs_as_nchw": [136, 241, 243], "default_opset_vers": 136, "duplicate_tf_quantizev2_nod": 136, "tf_graph_optim": 136, "transpose_input": 136, "request": [136, 408, 420, 421, 422, 443, 444, 447, 468, 480, 484, 511, 513, 515, 516, 520, 522, 523, 525, 577, 623], "correct": [137, 154, 166, 251, 252, 253, 255, 289, 299, 300, 301, 302, 303, 327, 449, 528, 577, 597], "biascorrect": 137, "fp32_graph": 137, "weight_empir": 137, "graphtransformbas": [137, 138, 140, 141], "Will": [137, 512, 582, 591], "our": [137, 531, 533, 586, 615, 626], "task": [137, 186, 193, 224, 231, 255, 269, 302, 303, 327, 580, 582, 583, 591, 594, 619, 620], "close": [137, 154], "w_int8": [137, 154], "w_fp32": [137, 154], "ratio": [137, 154, 162, 163, 165, 166, 197, 199, 200, 203, 236, 239, 247, 277, 280, 285, 288, 290, 291, 292, 580, 619, 620, 628, 632], "differ": [137, 147, 150, 152, 154, 157, 162, 179, 188, 203, 205, 217, 226, 239, 246, 247, 248, 254, 255, 262, 270, 271, 273, 282, 288, 293, 294, 296, 302, 303, 314, 315, 316, 339, 528, 530, 531, 554, 577, 579, 580, 582, 584, 585, 586, 590, 591, 594, 596, 607, 611, 616, 619, 623, 627, 628, 629], "minim": [137, 154, 319, 582, 585, 589, 594, 607, 611, 619, 620, 623, 629], "round": [137, 154, 623], "scale_c": [137, 154], "shift": [137, 154, 197, 199, 200, 236, 615, 628], "notic": [137, 154, 204, 247, 593, 625], "empir": [137, 154], "solut": [137, 154, 260, 533, 534, 587, 599, 603, 608, 621, 629], "graphtransform": 138, "input_pb": [138, 140, 141], "parse_input_pb": 138, "pbdef": 138, "generate_input_map": 138, "get_node_name_from_input": 138, "insertlog": 140, "node_name_list": 140, "show_nam": 140, "show_op": 140, "first_n": 140, "summar": [140, 582], "1024": [140, 188, 226, 600], "dump_fp32": 140, "rerang": 141, "rerangequantizedconcat": 141, "rerange_quant": 141, "version1_lt_version2": [142, 344], "version1": [142, 344], "version2": [142, 344], "version1_gt_version2": [142, 344], "greater": [142, 344], "version1_eq_version2": [142, 344], "version1_gte_version2": [142, 344], "version1_lte_version2": [142, 344], "disable_random": 142, "seed": [142, 171, 260, 262, 273, 295, 338, 344, 509, 631], "disabl": [142, 487, 516, 528, 614, 624], "read_graph": 142, "in_graph_is_binari": 142, "write_graph": 142, "out_graph_def": 142, "out_graph_fil": 142, "write": [142, 195, 196, 197, 233, 234, 235, 251, 299, 344, 584, 590, 597, 627], "is_ckpt_format": 142, "model_path": [142, 311, 414, 429, 434, 499], "is_saved_model_format": 142, "saved_model": [142, 247, 257, 312, 420, 427, 437], "get_estimator_graph": 142, "estim": [142, 144, 255, 258, 259, 263, 270, 271, 303, 312, 629], "input_fn": [142, 312], "get_tensor_by_nam": 142, "try_cnt": 142, "consid": [142, 255, 302, 303, 326, 528, 582, 615, 629], "import": [142, 155, 171, 247, 257, 260, 274, 295, 304, 314, 315, 334, 344, 530, 531, 533, 578, 579, 580, 582, 583, 584, 586, 589, 594, 595, 596, 597, 601, 603, 616, 617, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629], "scope": [142, 156, 213, 247, 310, 619], "suffix": 142, "time": [142, 171, 197, 200, 203, 239, 255, 267, 295, 302, 303, 314, 319, 344, 485, 491, 492, 497, 512, 584, 587, 602, 604, 607, 611, 614, 615, 616, 619, 620, 621, 623, 626, 627, 628, 629], "got": [142, 587, 627], "iterator_sess_run": 142, "sess": [142, 312], "iter_op": [142, 312], "feed_dict": [142, 185, 223], "output_tensor": [142, 312], "integr": [142, 157, 205, 534, 577, 615], "makeiter": 142, "predict": [142, 197, 200, 203, 207, 208, 239, 248, 252, 253, 254, 255, 261, 263, 296, 300, 301, 302, 303, 531, 554, 582, 594, 605, 627, 628], "pred": [142, 254, 255, 302, 303, 594], "collate_tf_pr": 142, "collat": [142, 149], "tbe": 142, "get_input_output_node_nam": 142, "fix_ref_type_of_graph_def": 142, "fix": [142, 163, 186, 224, 290, 529, 580, 601, 620, 629], "ref": 142, "tool": [142, 241, 243, 344, 533, 534, 607, 611, 621, 623], "strip_unused_lib": 142, "offici": [142, 248, 252, 253, 296, 300, 301, 528, 577, 594], "r1": 142, "15": [142, 262, 588, 632], "get_graph_def": 142, "auto_input_output": 142, "get_model_input_shap": 142, "inout": 142, "get_tensor_val_from_graph_nod": 142, "tensor_v": 142, "int8_node_name_revers": 142, "revers": [142, 577], "tf_diagnosis_help": 142, "generate_feed_dict": 142, "input_tensor": [142, 312, 313], "bf16modulewrapp": 143, "nn": [143, 144, 149, 157, 171, 205, 241, 244, 263, 267, 269, 295, 304, 313, 315, 340, 530, 582, 586, 596, 627], "bf16modul": 143, "mixed_precision_model": 143, "bf16_symbolic_trac": 143, "fx_sub_module_list": 143, "_description_": 143, "node_collector": 144, "record": [144, 149, 157, 186, 187, 188, 192, 194, 196, 197, 205, 212, 224, 225, 226, 232, 314, 318, 580, 626, 627, 629], "hook_fn_act": 144, "inp": 144, "outp": 144, "hessiantrac": 144, "refer": [144, 147, 153, 160, 162, 166, 186, 224, 247, 248, 249, 254, 255, 280, 285, 288, 290, 291, 296, 297, 302, 303, 530, 534, 554, 578, 579, 580, 583, 584, 590, 592, 593, 594, 595, 597, 602, 605, 616, 619, 622, 625, 628, 629], "yao": 144, "zhewei": 144, "et": [144, 269], "al": [144, 269], "pyhessian": 144, "network": [144, 160, 162, 260, 263, 290, 322, 531, 577, 582, 583, 586, 618, 621, 623, 629], "2020": 144, "ieee": [144, 595], "confer": [144, 620], "big": 144, "dong": 144, "zhen": 144, "hawq": [144, 322, 537, 629], "v2": [144, 322, 584, 592, 603, 625, 629, 632], "advanc": [144, 508, 528, 533, 623, 631], "system": [144, 155, 204, 340, 344, 487, 514, 515, 578, 600, 619], "33": [144, 260, 632], "18518": 144, "18529": 144, "http": [144, 160, 162, 186, 188, 224, 226, 248, 249, 251, 252, 253, 269, 288, 290, 291, 296, 297, 299, 300, 301, 524, 530, 533, 577, 580, 589, 592, 593, 603, 609, 612, 625], "github": [144, 162, 186, 224, 248, 249, 252, 253, 288, 291, 296, 297, 300, 301, 443, 445, 486, 529, 533, 577, 580, 585, 589, 592, 593, 603, 609, 612, 625], "com": [144, 162, 186, 224, 248, 249, 252, 253, 288, 291, 296, 297, 300, 301, 492, 528, 533, 577, 580, 589, 592, 593, 597, 603, 625, 626, 632], "openvinotoolkit": 144, "nncf": 144, "blob": [144, 162, 248, 249, 252, 253, 288, 296, 297, 300, 301, 603], "develop": [144, 314, 499, 529, 530, 592, 595, 597, 603, 614, 621, 623, 624, 626], "mse_metric_gap": [144, 399], "fp32_tensor": [144, 399], "euclidean": [144, 399, 582], "distanc": [144, 399, 582], "get_fused_map": 144, "weight_to_op": 144, "get_devic": 144, "register_act_grad_hook": 144, "append": [144, 149, 150, 152, 171, 294, 311, 319, 329, 331, 530, 583, 617], "reset_act_gradient_and_hook": 144, "get_param": [144, 203, 239], "get_vthv_weight": 144, "num_sampl": [144, 255, 302, 303], "vthv": 144, "get_weight_trac": 144, "op_name_to_trac": 144, "get_act_trac": 144, "res_dict": 144, "get_act_gap": 144, "gap": [144, 586, 596], "get_avg_trac": 144, "averag": [144, 251, 252, 253, 255, 299, 300, 301, 302, 303, 594, 629], "compare_weight": 144, "float_dict": 144, "quantized_dict": 144, "usag": [144, 185, 223, 247, 251, 257, 294, 299, 314, 499, 577, 580, 584, 585, 594, 597, 605, 616, 622, 628], "wt_compare_dict": 144, "float_model": 144, "state_dict": [144, 269, 584, 627], "compute_error": 144, "weight_dict": 144, "hawq_top": 144, "modul": [145, 241, 247, 264, 265, 266, 270, 276, 286, 287, 488, 496, 504, 530, 577, 579, 582, 586, 591, 594, 596, 619, 622, 624, 627], "dataread": [146, 245], "sample_s": 146, "100": [146, 147, 155, 171, 188, 192, 197, 226, 251, 260, 295, 299, 578, 580, 584, 590, 622, 623, 628, 629, 631, 632], "ortq": [146, 245], "get_next": [146, 245], "torchsmoothqu": 147, "traced_model": [147, 148], "accur": [147, 153], "larg": [147, 153, 251, 299, 533, 579, 582, 619, 620, 632], "languag": [147, 153, 248, 269, 296, 528, 554, 621], "free": [147, 153, 174, 175, 315, 327, 528, 533, 594, 603, 608, 616, 626], "absorb": [147, 153], "inplac": 147, "you": [147, 184, 186, 222, 224, 251, 267, 269, 290, 299, 529, 530, 577, 580, 584, 586, 592, 593, 594, 597, 599, 600, 602, 607, 611, 614, 615, 619, 625, 626, 627], "convtranspose2d": 147, "balanc": [147, 194, 196, 197, 232, 618], "difficulti": 147, "Not": [147, 155, 156, 204, 213, 247, 280, 285, 295, 315, 329, 330, 331, 334, 344, 483, 531], "architectur": [147, 155, 204, 258, 259, 269, 270, 271, 273, 533, 563, 577, 578, 582, 619, 620, 621], "orig": 147, "benefit": [147, 617, 619], "graphtrac": 147, "trace_and_fuse_sub_graph": 148, "get_embedding_contigu": 149, "embed": [149, 269], "contigu": [149, 619], "collate_torch_pr": 149, "collate_result": 149, "input2tupl": 149, "append_attr": 149, "fx_model": 149, "fx_white_list": 149, "generate_activation_observ": 149, "observ": [149, 626, 627, 629], "what": [149, 155, 163, 184, 222, 295, 334, 528, 577], "check_cfg_and_qconfig": 149, "op_infos_from_cfg": 149, "output_tensor_ids_op_nam": 149, "paser_cfg": 149, "ops_nam": 149, "get_quantizable_ops_from_cfg": 149, "input_tensor_ids_op_nam": 149, "auto_copi": 149, "fetch_modul": 149, "set_modul": 149, "new_modul": 149, "simple_infer": 149, "get_example_input": 149, "example_inp": 149, "get_fallback_ord": 149, "fall": 149, "confid": 149, "ordered_op": 149, "get_mse_order_per_fp32": 149, "influenc": 149, "fallback_ord": 149, "get_mse_order_per_int8": 149, "get_torch_vers": 149, "algorithm_registri": [150, 152], "algorithm_typ": [150, 152], "locat": [150, 152, 203, 239, 584, 600, 607, 611, 614, 623, 625, 628, 631], "registr": [150, 152, 188, 192, 195, 196, 197, 200, 203, 210, 226, 230, 233, 234, 235, 237, 239, 283], "support_algorithm": [150, 152], "algorithmschedul": [150, 152], "conf": [150, 152, 155, 156, 159, 171, 174, 175, 204, 247, 256, 257, 274, 275, 277, 278, 279, 280, 285, 294, 295, 304, 305, 306, 311, 312, 313, 314, 315, 316, 319, 320, 322, 324, 326, 327, 329, 331, 334, 507, 510, 530, 531, 533, 578, 582, 589, 590, 595, 596, 617, 623, 624, 626, 629], "phase": [150, 152, 163, 294, 531, 619, 620, 623, 624, 629], "adaptor": [150, 152, 213, 247, 333, 337, 533, 544, 591, 624, 625, 627], "append_algorithm": [150, 152], "reset_exec_algorithm": [150, 152], "fastbiascorrect": [151, 154], "fast_bias_correct": [152, 295], "weight_correct": [152, 295], "kernel": [153, 487, 534, 618, 619, 629], "weightcorrect": 154, "ep": [154, 595], "1e": [154, 631], "05": [154, 251, 255, 299, 302, 303, 492, 594, 632], "set_env_var": [155, 204], "env_var": [155, 204], "overwrite_exist": [155, 204], "env": [155, 204, 484, 492], "alreadi": [155, 188, 202, 204, 226, 238, 485, 512, 534, 577, 580, 591, 609, 612, 629], "set_all_env_var": [155, 204], "physic": [155, 204, 528, 578], "core": [155, 204, 247, 262, 295, 344, 364, 577, 578, 593, 607, 611, 618, 632], "get_architectur": [155, 204], "get_threads_per_cor": [155, 204], "thread": [155, 204, 247, 515, 577, 579, 618], "get_thread": [155, 204], "get_physical_id": [155, 204], "socket": [155, 204, 344, 487, 516, 618, 632], "get_core_id": [155, 204], "get_bounded_thread": [155, 204], "core_id": [155, 204], "bind": [155, 204], "benchmarkconfig": [155, 171, 295, 578], "goal": [155, 175, 240, 246, 247, 279, 280, 285, 293, 295, 304, 314, 315, 327, 500, 579, 617, 623, 629], "b_dataload": [155, 171, 204, 247, 295, 578], "b_func": [155, 204, 247, 295, 578], "summary_benchmark": [155, 204, 247, 295], "config_inst": [155, 204, 247, 295], "command": [155, 204, 247, 269, 295, 334, 364, 375, 378, 385, 391, 393, 394, 461, 484, 492, 512, 577, 584, 597, 599, 602, 607, 611, 615], "trigger": [155, 163, 204, 247, 290, 295, 529], "generate_prefix": [155, 204, 247, 295], "core_list": [155, 204, 247, 295], "numactl": [155, 204, 247, 295, 600, 608], "run_inst": [155, 204, 247, 295], "fit": [155, 162, 171, 295, 304, 315, 319, 334, 530, 533, 578, 579, 580, 584, 589, 590, 594, 595, 596, 619, 620, 623, 624], "prefer": [155, 246, 247, 293, 304, 315], "space": [155, 163, 174, 175, 246, 247, 253, 258, 260, 262, 270, 271, 272, 273, 293, 301, 304, 314, 315, 316, 317, 319, 321, 322, 324, 326, 327, 329, 331, 499, 528, 529, 531, 534, 619, 623, 631], "cores_per_inst": [155, 171, 364, 500, 578, 622], "num_of_inst": [155, 171, 500, 578, 622], "eval_dataload": [155, 156, 171, 174, 175, 213, 246, 247, 257, 294, 304, 315, 316, 319, 320, 322, 324, 326, 327, 334, 533, 578, 589, 590, 629], "compon": [156, 159, 240, 247, 258, 270, 280, 285, 293, 294, 295, 480, 515, 518, 530, 584, 592, 593, 597, 614, 617, 618], "distil": [156, 159, 171, 205, 212, 213, 247, 295, 334, 533, 563, 585, 589, 591, 617, 631], "basecallback": [156, 159], "quantizationcallback": 156, "pruningcallback": [156, 159, 334], "distillationcallback": [156, 159], "train_func": [156, 213, 247, 294, 315, 334, 584, 623], "eval_func": [156, 174, 175, 213, 246, 247, 257, 294, 304, 314, 315, 316, 319, 320, 322, 324, 326, 327, 334, 530, 579, 580, 582, 583, 584, 624, 629, 631], "on_train_begin": [156, 163, 213, 247, 279, 280, 285, 290, 291, 334, 530, 582, 583, 617, 619, 623], "Be": [156, 159, 213, 247, 251, 274, 278, 279, 299, 334], "on_train_end": [156, 159, 163, 213, 247, 279, 280, 285, 290, 291, 334, 582, 583, 617, 619, 623], "epoch": [156, 159, 163, 213, 240, 247, 274, 277, 278, 279, 280, 285, 290, 291, 334, 582, 583, 584, 617, 619, 631], "on_step_begin": [156, 160, 163, 213, 247, 274, 277, 278, 279, 280, 285, 290, 291, 334, 337, 582, 583, 617, 619], "batch_id": [156, 213, 247, 274, 277, 278, 279, 334], "on_after_compute_loss": [156, 213, 247, 280, 285, 334, 582, 583, 617], "student_output": [156, 157, 205, 213, 247, 334, 582, 583], "student_loss": [156, 157, 205, 213, 247, 334, 582, 583], "teacher_output": [156, 157, 205, 213, 240, 247, 334], "on_before_optimizer_step": [156, 160, 163, 164, 213, 247, 275, 279, 290, 291, 334, 582, 583, 617, 619], "on_after_optimizer_step": [156, 160, 163, 164, 213, 247, 290, 291, 334, 619], "on_before_ev": [156, 163, 213, 247, 290, 291, 334], "on_after_ev": [156, 163, 213, 247, 290, 291, 334], "on_step_end": [156, 163, 213, 247, 274, 277, 278, 279, 280, 285, 290, 291, 334, 337, 582, 583, 617, 619], "register_hook": [156, 213, 247], "input_arg": [156, 213, 247], "input_kwarg": [156, 213, 247], "reserv": [156, 174, 175, 213, 247, 274, 294], "pre_process": [156, 213, 240, 247, 258, 270, 280, 285, 293, 304, 584], "routinu": [156, 247, 293, 304, 315], "remove_hook": [156, 313], "awaretrainingquantcallback": [156, 159, 334], "generate_hook": [156, 159, 240, 247, 280, 285], "knowledg": [156, 157, 159, 171, 205, 240, 247, 583, 585, 589, 591, 596, 631], "transfer": [156, 159, 193, 231, 240, 247, 580, 582, 583], "teacher": [156, 157, 159, 171, 205, 240, 247, 269, 295, 582, 583, 632], "student": [156, 157, 159, 186, 205, 212, 224, 240, 247, 580, 582, 583, 632], "distillation_conf": [156, 159, 167, 240, 247], "_epoch_ran": [156, 159, 240, 247], "how": [156, 159, 160, 162, 163, 197, 200, 203, 239, 240, 247, 262, 263, 288, 529, 530, 532, 534, 577, 579, 580, 582, 583, 584, 590, 608, 609, 612, 613, 614, 619, 620, 623, 628, 629, 631], "much": [156, 159, 160, 197, 200, 203, 239, 240, 247, 582, 608, 619, 620, 628], "ran": [156, 159, 240, 247], "eval_frequ": [156, 159, 240, 247], "frequenc": [156, 159, 163, 240, 247, 290, 618, 619, 631], "term": [156, 159, 163, 164, 240, 247, 529, 582, 593, 594, 616, 617, 629], "best_scor": [156, 159, 240, 247], "best_model": [156, 159, 240, 247], "found": [156, 159, 240, 247, 258, 259, 270, 271, 311, 319, 325, 483, 499, 516, 533, 577, 595, 602, 629], "teacher_model": [156, 157, 159, 171, 205, 240, 247, 295, 582, 583], "student_model": [156, 157, 159, 205, 240, 247], "train_cfg": [156, 159, 240, 247, 337], "init_train_cfg": [156, 159, 240, 247], "create_criterion": [156, 159, 240, 247], "critet": [157, 205], "tensorflowknowledgedistillationloss": [157, 205], "pytorchknowledgedistillationloss": [157, 205], "pytorchintermediatelayersknowledgedistillationloss": [157, 205], "tensorflowcriterion": [157, 205], "pytorchcriterion": [157, 205], "criterion_cl": [157, 205], "criterion_registri": [157, 205], "criterion_typ": [157, 205], "registry_criterion": [157, 205], "knowledgedistillationframework": [157, 205], "knowledgedistillationloss": [157, 205, 631], "temperatur": [157, 171, 205, 631], "loss_typ": [157, 171, 205, 631], "ce": [157, 171, 205, 631], "loss_weight": [157, 171, 205, 631], "teacher_model_forward": [157, 205], "notimplementederror": [157, 205, 254, 255, 302, 303], "teacher_student_loss_c": [157, 205], "student_targets_loss_c": [157, 205], "groud": [157, 205], "truth": [157, 205, 252, 253, 300, 301], "loss_cal": [157, 205], "loss_cal_sloss": [157, 205], "softcrossentropi": [157, 205], "logit": [157, 205, 582], "ground": [157, 205, 252, 253, 300, 301], "kullbackleiblerdiverg": [157, 205], "pytorchknowledgedistillationlosswrapp": [157, 205], "param_dict": [157, 205, 210, 260], "tensorflowknowledgedistillationlosswrapp": [157, 205], "tensorflowknowledgedistillationlossextern": [157, 205], "intermediatelayersknowledgedistillationloss": [157, 205, 507], "layer_map": [157, 171, 205], "add_origin_loss": [157, 171, 205], "init_loss_func": [157, 205], "init_feature_match": [157, 205], "student_featur": [157, 205], "teacher_featur": [157, 205], "matcher": [157, 205, 615], "clear_featur": [157, 205], "pytorch": [157, 162, 185, 186, 188, 191, 192, 195, 196, 197, 200, 203, 205, 210, 212, 223, 224, 226, 229, 230, 233, 234, 235, 237, 239, 241, 244, 245, 246, 247, 254, 255, 256, 286, 288, 291, 293, 295, 302, 303, 304, 313, 315, 325, 338, 340, 344, 347, 420, 427, 450, 460, 480, 530, 531, 533, 534, 579, 582, 583, 585, 586, 588, 591, 592, 595, 596, 597, 599, 602, 603, 604, 605, 614, 619, 621, 622, 625, 629, 631], "register_hooks_for_model": [157, 205], "attributeerror": [157, 205], "remove_all_hook": [157, 205], "pytorch_linear_feature_match": [157, 205], "pytorchintermediatelayersknowledgedistillationlosswrapp": [157, 205], "selfknowledgedistillationloss": [157, 205, 507], "selfknowledg": [157, 205], "pytorchselfknowledgedistillationloss": [157, 205], "l2diverg": [157, 205], "feature1": [157, 205], "feature2": [157, 205], "pytorchselfknowledgedistillationlosswrapp": [157, 205], "pruner": [159, 247, 274, 275, 276, 277, 278, 280, 285, 286, 288, 291, 295, 507, 510, 619, 631], "criteria": [159, 161, 246, 247, 280, 285, 288, 290, 293, 315, 325, 530, 614], "reg": [159, 161, 163], "schedul": [159, 161, 163, 164, 247, 277, 286, 290, 295, 327, 563, 617], "register_criterion": 160, "registri": [160, 162, 163, 164, 165, 288, 290, 292, 531], "get_criterion": 160, "pruningcriterion": 160, "about": [160, 311, 399, 428, 484, 486, 487, 492, 493, 528, 577, 579, 624, 632], "module_nam": [160, 163, 164, 165, 290, 292, 344, 499], "score": [160, 162, 163, 164, 248, 249, 251, 252, 253, 255, 268, 288, 290, 296, 297, 299, 300, 301, 302, 303, 318, 322, 325, 337, 530, 554, 594, 616, 619, 620, 626, 629], "magnitudecriterion": 160, "magnitud": [160, 247, 255, 275, 276, 295, 303, 591, 619, 620, 632], "criterion_class": 160, "magtinud": 160, "gradientcriterion": 160, "absolut": [160, 171, 255, 261, 274, 277, 303, 492, 594, 618, 619, 620, 623, 629], "snipcriterion": 160, "snip": [160, 290, 591, 619, 620, 632], "product": [160, 591, 595, 597, 598, 614, 618, 621, 623, 626, 629], "shot": [160, 165, 213, 247, 290, 292, 531, 591, 619, 620, 621], "arxiv": [160, 269, 290], "org": [160, 251, 269, 290, 299, 529, 530, 577, 592, 609, 612], "1810": [160, 290], "02340": [160, 290], "snipmomentumcriterion": 160, "snip_momentum": [160, 171, 295, 619], "momentum": [160, 290, 591, 619, 620, 631], "mechan": [160, 626], "preserv": 160, "register_pattern": [162, 288], "get_pattern": [162, 288], "assertionerror": [162, 163, 166, 288, 289, 290, 304], "basepattern": [162, 164], "basic": [162, 171, 202, 238, 258, 270, 288, 295, 323, 327, 329, 330, 334, 591, 592, 622, 626], "unit": [162, 288, 491, 499, 529], "4x1": [162, 171, 284, 295, 619, 632], "is_glob": [162, 288], "contrast": [162, 288, 628], "keep_mask_lay": 162, "invalid_lay": 162, "max_sparsity_ratio_per_op": [162, 163, 167, 171, 295, 619], "sparsiti": [162, 163, 165, 166, 247, 277, 278, 279, 280, 284, 285, 288, 290, 291, 292, 307, 312, 313, 344, 533, 580, 591, 619, 632], "reach": [162, 165, 175, 288, 292, 314, 327, 529, 533, 579, 619, 620, 629], "min_sparsity_ratio_per_op": [162, 167, 171, 295, 619], "target_spars": [162, 167, 171, 295, 619, 622, 631], "reduce_tensor": 162, "dim": [162, 203, 239, 283, 319, 628], "along": [162, 492, 592], "get_mask": [162, 288], "target_sparsity_ratio": [162, 163, 288, 290], "pre_mask": [162, 288], "unprun": 162, "get_masks_glob": [162, 288], "get_masks_loc": [162, 288], "get_single_mask_per_target_ratio": 162, "exact_sparsity_ratio": [162, 288], "get_block_size_dict": [162, 288], "get_sparsity_ratio": [162, 166, 247, 280, 285, 288, 291], "return_dict": 162, "zero_cnt": 162, "total_cnt": 162, "get_pattern_lock_mask": [162, 288], "obtain": [162, 164, 165, 166, 288, 289, 292, 530, 586, 620, 626, 629], "lock": [162, 278, 279, 288, 591, 617, 619, 620], "check_layer_valid": 162, "block_siz": [162, 288], "get_reduced_masks_from_data": 162, "update_residual_cnt": 162, "left": [162, 197, 199, 200, 203, 236, 239, 577, 608, 614, 628], "get_sparsity_ratio_each_lay": 162, "sparsity_ratio": 162, "total": [162, 163, 165, 197, 200, 203, 239, 255, 290, 292, 302, 303, 307, 312, 313, 314, 580, 620, 628], "cnt": 162, "sparsityinfo": 162, "adjust_ratio": 162, "key_new_spars": 162, "max_sparsity_ratio": 162, "min_sparsity_ratio": 162, "final_target_sparsity_ratio": 162, "examin": [162, 619], "propos": [162, 271, 531, 534, 582, 595, 619], "adjust_sparsity_ratio": 162, "patternnxm": [162, 288], "nxm": [162, 163, 284, 288, 620], "kept": [162, 288], "height": [162, 197, 199, 200, 203, 236, 239, 263, 288, 584, 619, 628, 631], "width": [162, 197, 199, 200, 203, 236, 239, 263, 288, 584, 623, 628, 631], "vertic": [162, 203, 239, 288, 628], "becaus": [162, 197, 200, 203, 239, 251, 288, 299, 530, 619, 623, 628, 629], "hidden": [162, 288, 499, 534, 619], "calul": [162, 288], "ration": [162, 288], "block_size_1": [162, 288], "block_size_2": [162, 288], "block_wis": 162, "get_sparsity_ratio_progress": 162, "reshape_orig_to_pattern": 162, "s1": 162, "s2": 162, "reshape_reduced_to_orig": 162, "orig_shap": 162, "permut": [162, 203, 239, 628], "reduce_scor": 162, "recalcul": [162, 244], "get_mask_per_threshold": 162, "cur_target_sparsity_ratio": 162, "keep_exact_sparsity_ratio": 162, "togeth": [162, 197, 200, 203, 239, 288, 294, 582, 592, 601, 621, 627, 628], "keep_pre_mask": [162, 288], "remain": [162, 602], "unchang": [162, 288], "count_new_masked_cnt": 162, "new_added_mask": 162, "update_new_added_mask": 162, "cur_mask": 162, "procedur": [162, 167, 531], "bacaus": 162, "update_progressive_mask": 162, "progressive_step": 162, "progressive_config": 162, "progress": [162, 163, 165, 188, 226, 292, 608, 614, 620], "update_progressive_masks_linear": 162, "update_progressive_masks_scor": 162, "update_progressive_masks_loc": 162, "update_progressive_masks_glob": 162, "patternninm": [162, 288], "continu": [162, 251, 288, 299, 320, 531, 615, 619], "master": [162, 248, 249, 252, 253, 288, 291, 296, 297, 300, 301, 327], "md": [162, 288, 584], "get_least_ninm_mask_from_data": 162, "least": [162, 255, 291, 303, 493, 619, 620, 629], "elementwis": [162, 274], "sparisti": 162, "get_ele_mask_per_threshold": 162, "least_ninm_mask": 162, "least_m_in_m_mask": 162, "register_prun": [163, 290], "parse_valid_pruner_typ": 163, "get_prun": [163, 290], "cuurent": [163, 290], "baseprun": 163, "current_sparsity_ratio": [163, 290], "global_step": [163, 290], "start_step": [163, 167, 171, 290, 295, 619, 622], "end_step": [163, 167, 171, 290, 295, 619, 622], "pruning_frequ": [163, 167, 171, 295, 619], "show": [163, 344, 528, 577, 582, 584, 600, 615, 619, 629], "mask_weight": [163, 290], "formal": [163, 290], "mask_weights_gener": 163, "input_mask": [163, 203, 239], "local_step": [163, 290, 291], "update_mask": 163, "check_is_pruned_step": [163, 290], "basicprun": 163, "arrang": [163, 187, 188, 191, 192, 197, 225, 226, 229, 580, 619], "proce": 163, "regul": 163, "set_global_step": 163, "patternlockprun": [163, 278, 290], "spars": [163, 247, 280, 285, 290, 580, 619, 620, 621], "progressiveprun": 163, "interpol": [163, 197, 200, 203, 239, 594, 620, 628], "fine": [163, 186, 224, 580, 600, 621, 623], "grain": [163, 621], "improv": [163, 319, 529, 597, 614, 615, 619, 620, 623, 624, 629, 632], "interv": [163, 620], "check_progressive_valid": 163, "check_is_pruned_progressive_step": 163, "update_masks_progress": 163, "print_progressive_spars": 163, "register_reg": 164, "regulariz": 164, "get_reg_typ": 164, "get_reg": 164, "basereg": 164, "grouplasso": 164, "coeff": 164, "lasso": [164, 275, 591, 619, 620], "select": [164, 186, 224, 259, 263, 270, 325, 530, 531, 577, 591, 592, 614, 620, 623, 627, 629], "reg_term": 164, "coeffient": 164, "relat": [164, 240, 247, 251, 265, 266, 280, 285, 288, 299, 337, 427, 430, 432, 437, 517, 520, 521, 522, 525, 597, 631], "register_schedul": [165, 292], "get_schedul": [165, 292], "pruningschedul": 165, "dens": [165, 247, 280, 285, 292, 619, 620, 632], "gradual": [165, 292, 619, 620], "update_sparsity_ratio": [165, 292], "target_ratio": [165, 292], "current_prune_step": [165, 292], "total_prune_step": [165, 292], "init_ratio": 165, "oneshotschedul": [165, 292], "iterativeschedul": [165, 292], "init_sparsity_ratio": 165, "elementwise_over_matmul_gemm_conv": [166, 247, 280, 285, 291], "elementwise_over_al": [166, 247, 280, 285, 291], "blockwise_over_matmul_gemm_conv": [166, 247, 280, 285, 291], "check_config": [166, 289], "prune_config": [166, 289], "everyth": [166, 289, 602], "reset_none_to_default": 166, "undefin": [166, 289], "update_param": [166, 366], "process_weight_config": 166, "global_config": [166, 274, 275, 277, 278, 279], "local_config": [166, 171, 274, 275, 277, 278, 279, 295], "default_config": 166, "pruners_info": 166, "process_yaml_config": 166, "check_key_valid": 166, "template_config": 166, "user_config": 166, "process_and_check_config": [166, 289], "process_config": [166, 289], "parse_to_prun": [166, 289], "keep": [166, 288, 289, 320, 530, 534, 613, 614, 625, 629], "generate_pruner_config": 166, "dotdict": [166, 167, 314], "prunerv2": 167, "pruning_typ": [167, 171, 295, 619], "pruning_scop": [167, 171, 295, 619], "sparsity_decay_typ": [167, 171, 295, 619], "pruning_op_typ": [167, 171, 295, 619], "reg_typ": 167, "criterion_reduce_typ": 167, "resume_from_pruned_checkpoint": 167, "similiar": [167, 171, 295], "cfg_fname": 167, "parser": [167, 295, 357, 362, 480, 484, 488, 518], "quantization_conf": 167, "pruning_conf": 167, "graph_optimization_conf": [167, 246, 247], "mixedprecision_conf": 167, "benchmark_conf": 167, "nasconfig": [167, 247, 259, 270, 271, 531], "search_spac": [167, 258, 270, 271, 272, 273], "search_algorithm": [167, 247, 270, 271, 295, 531], "na": [167, 247, 295, 308, 563, 591], "deep_get": [168, 314], "dot": [168, 499, 595, 623], "eg": [168, 188, 192, 197, 226, 230, 235, 580, 622], "person": [168, 528, 621], "john": 168, "deep": [168, 533, 534, 579, 591, 592, 595, 597, 599, 602, 603, 605, 608, 614, 621, 623, 629, 632], "deep_set": [168, 314], "sex": [168, 528], "male": 168, "notat": 168, "check_valu": 171, "supported_typ": 171, "supported_valu": 171, "_datatyp": 171, "random_se": [171, 319, 334, 383, 509, 631], "1978": 171, "workspac": [171, 295, 312, 313, 334, 343, 344, 385, 386, 391, 393, 394, 395, 425, 498, 500, 509, 596], "default_workspac": 171, "resume_from": [171, 344], "warmup": [171, 500, 578, 622], "inter_num_of_thread": [171, 622], "intra_num_of_thread": [171, 622], "accuracycriterion": [171, 467, 629], "higher_is_bett": [171, 594, 629, 631], "rel": [171, 314, 622, 629, 631, 632], "tolerable_loss": [171, 629], "01": [171, 618, 622, 629, 631, 632], "accuracy_criterion": [171, 295, 314, 616, 622, 629, 631], "tuningcriterion": [171, 295, 616, 626, 629], "strategy_kwarg": [171, 626, 629], "timeout": [171, 175, 295, 327, 509, 622, 629, 631], "max_trial": [171, 295, 509, 629], "tuning_criterion": [171, 295, 616, 626, 629], "earli": [171, 295, 623, 629, 631], "stop": [171, 175, 295, 311, 327, 468, 492, 629, 631], "exit": [171, 295, 316, 318, 577, 595, 631], "see": [171, 197, 200, 203, 239, 248, 251, 267, 296, 299, 528, 530, 532, 577, 593, 607, 608, 611, 614, 615, 627, 629, 632], "concret": [171, 174, 327, 629], "posttrainingquantconfig": [171, 295, 315, 530, 533, 579, 589, 596, 623, 624, 626, 629], "auto": [171, 295, 317, 323, 344, 530, 597, 600, 602, 604, 605], "quant_format": [171, 241, 244, 295, 313, 586], "calibration_sampling_s": [171, 295], "op_type_list": [171, 295, 622, 629], "op_name_list": [171, 295, 629], "excluded_precis": [171, 295, 595, 624], "quant_level": [171, 295, 629], "use_distributed_tun": [171, 295], "_basequantizationconfig": [171, 295], "quantizationawaretrainingconfig": [171, 295, 315, 334, 530, 583, 623, 624, 629], "deepcopi": [171, 295], "model_origin": [171, 295, 315, 624], "qat_op_name_list": [171, 295], "compression_manag": [171, 295, 334, 530, 582, 583, 617, 619, 623], "prepare_compress": [171, 295, 334, 530, 582, 583, 617, 619, 623], "weightpruningconfig": [171, 295, 617, 619], "pruning_config": [171, 295, 619], "9": [171, 262, 295, 530, 592, 619, 620, 622, 629, 631], "98": [171, 295, 619, 622, 632], "exp": [171, 295, 619, 620], "update_config": [171, 285, 295], "10": [171, 188, 226, 251, 295, 299, 319, 477, 533, 577, 578, 580, 592, 619, 622, 628, 629, 632], "weight_compress": [171, 295, 622, 631], "knowledgedistillationlossconfig": [171, 583, 617], "distillationconfig": [171, 295, 334, 582, 583, 617], "comb": [171, 583], "distillation_criterion": [171, 583, 617], "d_conf": [171, 583, 617], "q_conf": [171, 583], "intermediatelayersknowledgedistillationlossconfig": 171, "selfknowledgedistillationlossconfig": [171, 295, 582], "distil_loss": [171, 295, 582], "crossentropyloss": [171, 205, 295, 582], "sgd": [171, 210, 295, 582, 622, 631], "lr": [171, 295, 582, 584], "0001": [171, 295, 582, 622], "learning_r": [171, 295, 622, 631], "callabl": [171, 253, 295, 301, 334, 495, 499, 515, 516], "altern": [171, 295], "mixedprecisionconfig": [171, 295, 304, 595], "mixedprecis": [171, 247, 256, 295, 304, 353, 457, 505, 563], "mix_precis": [171, 295, 595], "exportconfig": 171, "dynamic_ax": [171, 241, 244, 313, 586], "onnxqlinear2qdqconfig": 171, "onnxqlinear2qdq": 171, "torch2onnxconfig": [171, 586], "qdq_op_fp32_bia": [171, 241, 244, 586], "torch2onnx": [171, 241, 247, 295], "tf2onnxconfig": 171, "tf2onnx": [171, 241, 247, 295], "sigopt": [172, 173, 295, 621], "tpe": [172, 173, 295], "sigopttunestrategi": 174, "q_dataload": [174, 175, 316, 319, 320, 322, 324, 326, 327, 590, 629], "q_hook": [174, 175, 316, 319, 320, 322, 324, 326, 327], "tunestrategi": [174, 175, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 629], "hpo": 174, "mandatori": [174, 175, 315, 631], "yield": [174, 175, 184, 206, 207, 222, 304, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 334, 579, 623, 629], "taken": [174, 175, 304, 315, 334], "tuner": [174, 175, 246, 247, 293, 304, 315, 334], "higher": [174, 175, 272, 304, 315, 317, 334, 530, 582, 586, 594, 619, 620, 623, 626, 629], "pseudo": [174, 175, 315, 334, 627], "code": [174, 175, 204, 247, 257, 265, 266, 269, 291, 294, 315, 334, 386, 391, 409, 427, 492, 493, 524, 525, 530, 533, 534, 577, 579, 580, 582, 583, 584, 590, 591, 593, 594, 597, 599, 601, 602, 603, 605, 608, 614, 616, 617, 619, 621, 622, 623, 626, 627, 628], "resum": [174, 175, 316, 322, 326, 327, 334, 340], "params_to_tune_config": 174, "next_tune_cfg": [174, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 629], "travers": [174, 175, 316, 317, 318, 321, 327, 629], "get_acc_target": 174, "base_acc": 174, "ceiterion": 174, "constraint": [174, 246, 247, 293, 311, 315, 626, 629, 631], "create_exp": 174, "acc_target": 174, "experi": [174, 528, 597, 626, 629], "fefin": 175, "tpetunestrategi": 175, "add_loss_to_tuned_history_and_find_best": 175, "tuning_history_list": 175, "histori": [175, 319, 327, 343, 344, 384, 391, 393, 397, 450, 468, 518, 614, 629], "object_evalu": 175, "alredi": 175, "calculate_loss": 175, "acc_diff": 175, "lat_diff": 175, "trials_count": [175, 327], "either": [175, 251, 299, 327, 595, 598, 602, 617, 622, 623], "met": [175, 327, 531, 588, 595, 623, 627], "basedatalod": [176, 214], "basedataload": [176, 178, 181, 182, 183, 185, 197, 214, 216, 219, 220, 221, 223], "batch_siz": [176, 178, 183, 184, 185, 186, 187, 192, 197, 206, 207, 214, 216, 221, 222, 223, 224, 225, 241, 244, 263, 268, 313, 350, 364, 375, 477, 500, 531, 579, 580, 584, 586, 590, 597, 623], "last_batch": [176, 178, 183, 185, 197, 206, 207, 214, 216, 221, 223], "rollov": [176, 178, 183, 185, 197, 206, 207, 214, 216, 221, 223], "collate_fn": [176, 178, 179, 183, 197, 206, 207, 214, 216, 217, 221, 580], "sampler": [176, 178, 180, 183, 197, 206, 207, 214, 216, 218, 221, 235, 247, 329, 330, 584], "batch_sampl": [176, 178, 183, 197, 206, 207, 214, 216, 221], "num_work": [176, 178, 183, 197, 206, 207, 214, 216, 221, 263, 623], "pin_memori": [176, 178, 183, 197, 206, 207, 214, 216, 221], "shuffl": [176, 178, 183, 197, 206, 207, 214, 216, 221, 623], "_generate_dataload": [176, 214], "drop": [176, 214, 251, 289, 299, 595, 608, 619, 620, 632], "incomplet": [176, 214, 329, 331, 340], "discard": [176, 214], "default_col": [178, 216], "outer": [178, 216], "defaultdataload": [178, 182, 185, 197, 216, 220, 223], "base_dataload": [178, 180, 181, 182, 183, 185, 197, 216, 218, 219, 220, 221, 223, 235, 247], "drop_last": [179, 184, 217, 222], "iterablefetch": [179, 217], "indexfetch": [179, 217], "default_dataload": [180, 182, 185, 218, 220, 223, 235, 247], "fetcher": [180, 218, 235, 247], "mxnet_dataload": [180, 218, 235, 247], "onnxrt_dataload": [180, 218, 235, 247], "pytorch_dataload": [180, 218, 235, 247], "tensorflow_dataload": [180, 218, 235, 247, 477], "mxnetdataload": [181, 219], "onnxruntim": [182, 188, 192, 195, 196, 197, 220, 226, 230, 233, 234, 235, 247, 256, 304, 403, 407, 534, 589, 591, 592, 622], "onnxrtbertdataload": [182, 220], "bert": [182, 185, 186, 197, 200, 203, 220, 223, 224, 239, 533, 580, 582, 594, 602, 628, 632], "varient": [182, 220], "onnxrtdataload": [182, 220], "pytorchdataload": [183, 221], "data_sourc": [184, 222, 337], "__iter__": [184, 188, 192, 197, 222, 226, 230, 235, 579, 580], "iterablesampl": [184, 222], "squential": [184, 222], "your": [184, 186, 222, 224, 251, 299, 529, 577, 580, 584, 586, 592, 593, 597, 600, 601, 602, 607, 608, 609, 611, 612, 614, 619, 626, 627, 629], "iterabledataset": [184, 187, 188, 190, 191, 192, 197, 222, 225, 226, 228, 229, 230, 235], "indexdataset": [184, 222], "__getitem__": [184, 188, 192, 197, 200, 203, 222, 226, 230, 235, 237, 239, 580], "__len__": [184, 188, 192, 197, 222, 226, 230, 235, 580], "inter": [184, 188, 192, 197, 222, 226, 230, 235], "retriev": [184, 222, 493], "act": [184, 222, 528], "sequentialsampl": [184, 222], "batchsampl": [184, 222], "tfdatadataload": [185, 223], "tensorflow1": [185, 223], "coupl": [185, 223], "satisfi": [185, 223, 592], "tf1": [185, 223, 596], "although": [185, 223, 626], "tensorflowbertdataload": [185, 223], "tensorflowmodelzoobertdataload": [185, 223], "zoo": [185, 203, 223, 239, 533, 585, 589, 632], "tensorflowdataload": [185, 223, 477], "directli": [185, 223, 251, 255, 289, 299, 303, 327, 586, 594, 601, 622, 623, 627], "pytorchbertdataset": [186, 224], "model_typ": [186, 224, 312, 399, 429, 580], "tensordataset": [186, 224, 580], "repo": [186, 224, 527, 580, 585, 607, 609, 611, 612, 633], "link": [186, 224, 577, 580, 607, 611, 614], "huggingfac": [186, 224, 340, 580, 585, 589, 602, 603, 604, 605], "easi": [186, 224, 247, 293, 577, 579, 586, 621, 623, 626], "classifi": [186, 224, 255, 302, 303, 320, 580, 582, 619], "squad": [186, 197, 200, 203, 224, 239, 252, 253, 255, 300, 301, 302, 303, 580, 594, 628, 632], "distilbert": [186, 224, 533, 580, 621, 632], "xlnet": [186, 224, 580], "xlm": [186, 224, 580, 632], "101": [186, 224, 255, 302, 303, 594, 632], "2043": [186, 224], "2001": [186, 224], "onnxrtbertdataset": [186, 224], "data_dir": [186, 224, 580], "model_name_or_path": [186, 224, 340, 580, 602, 603], "max_seq_length": [186, 197, 200, 203, 224, 239, 580, 628], "128": [186, 189, 190, 197, 200, 203, 224, 227, 228, 239, 580, 623, 628], "do_lower_cas": [186, 197, 200, 202, 203, 224, 238, 239, 580, 628], "mrpc": [186, 224, 255, 303, 580, 594, 602, 632], "dynamic_length": [186, 224, 580], "shortcut": [186, 224, 580], "length": [186, 197, 200, 203, 224, 239, 248, 251, 269, 296, 299, 533, 554, 580, 594, 621, 623, 628], "token": [186, 197, 200, 203, 224, 235, 237, 239, 247, 248, 249, 269, 295, 296, 297, 340, 512, 516, 554, 577, 580, 594, 626, 628, 629], "truncat": [186, 197, 200, 203, 224, 239, 580, 628], "shorter": [186, 197, 200, 203, 224, 239, 580, 628], "lowercas": [186, 224, 580], "choic": [186, 224, 534, 577, 580, 594], "qqp": [186, 224, 580, 594, 632], "qnli": [186, 224, 580, 594, 632], "rte": [186, 224, 580, 594, 632], "st": [186, 224, 580, 594], "cola": [186, 224, 580, 594, 632], "mnli": [186, 224, 580, 594, 632], "wnli": [186, 224, 580, 594, 632], "mobilebert": [186, 224, 580, 582, 632], "roberta": [186, 224, 580, 632], "uncas": [186, 197, 200, 203, 224, 239, 580, 628, 632], "load_and_cache_exampl": [186, 224], "cach": [186, 224, 248, 296, 340, 429, 516, 554, 587, 623], "convert_examples_to_featur": [186, 203, 224, 239], "max_length": [186, 224], "label_list": [186, 224, 255, 303], "output_mod": [186, 224], "classif": [186, 203, 224, 239, 255, 291, 302, 303, 582, 589, 594, 603, 621], "pad_token": [186, 224], "pad_token_segment_id": [186, 224], "mask_padding_with_zero": [186, 224], "inputfeatur": [186, 203, 224, 239], "input_id": [186, 203, 224, 239], "vocabulari": [186, 197, 200, 202, 203, 224, 238, 239, 269, 628], "attention_mask": [186, 224], "NOT": [186, 224, 588, 592], "token_type_id": [186, 224], "segment": [186, 224, 249, 251, 297, 299], "portion": [186, 224], "problem": [186, 224, 255, 262, 303, 594, 595, 615], "regress": [186, 224], "seq_length": [186, 224], "to_json_str": [186, 224], "json": [186, 187, 197, 200, 203, 224, 225, 239, 354, 472, 474, 482, 489, 499, 580, 596, 615, 628], "tensorflowbertdataset": [186, 224], "root": [186, 187, 188, 191, 192, 197, 224, 225, 226, 229, 255, 261, 303, 305, 306, 307, 309, 311, 312, 313, 334, 516, 579, 580, 584, 594, 631], "label_fil": [186, 197, 200, 203, 224, 239, 580, 628], "tfrecord": [186, 187, 188, 192, 197, 224, 225, 226, 230, 235, 580], "guid": [186, 224, 530, 533, 580, 582, 592, 597, 605, 614, 633], "parsedecodebert": [186, 224], "tensorflowmodelzoobertdataset": [186, 187, 224, 225], "num_cor": [186, 187, 191, 192, 197, 224, 225, 229, 580], "28": [186, 187, 191, 192, 197, 224, 225, 229, 580, 632], "coco": [187, 192, 194, 196, 197, 198, 200, 225, 232, 251, 255, 299, 303, 594], "parsedecodecoco": [187, 225], "cocorecorddataset": [187, 192, 197, 225], "directori": [187, 188, 192, 197, 225, 226, 312, 340, 343, 344, 408, 461, 482, 499, 512, 580, 584, 587, 607, 609, 611, 612, 627], "interleav": [187, 192, 197, 225, 580], "parallel": [187, 192, 197, 225, 580], "cocoraw": [187, 225, 579, 580], "img_dir": [187, 225, 580], "val2017": [187, 225, 580], "anno_dir": [187, 225, 580], "annot": [187, 225, 251, 299, 580, 594], "instances_val2017": [187, 225, 580], "wai": [187, 188, 191, 192, 197, 225, 226, 229, 531, 577, 579, 580, 594, 597, 600, 615, 617, 619, 620, 623, 629, 631], "jpg": [187, 191, 193, 225, 229, 231, 580], "imag": [187, 188, 191, 193, 197, 199, 200, 203, 225, 226, 229, 231, 236, 239, 251, 263, 299, 497, 577, 580, 584, 622, 627, 628, 632], "coconpi": [187, 225, 580], "npy_dir": [187, 225, 580], "npy": [187, 225, 580], "tensorflowdataset": [188, 226], "pytorchdataset": [188, 226], "mxnetdataset": [188, 226], "onnxrtqldataset": [188, 226], "qlinear": [188, 195, 226, 233, 255, 303, 311, 534, 586, 604, 632], "onnxrtitdataset": [188, 226], "IT": [188, 195, 226, 233, 621], "pytorchmxnetwrapdataset": [188, 226], "datafunc": [188, 226], "pytorchmxnetwrapfunct": [188, 203, 226, 239], "framework_dataset": [188, 226], "convent": [188, 226, 251, 299, 582], "imageclassifi": [188, 226], "choos": [188, 226, 326, 577, 591, 592, 602, 625, 629, 631], "tensorflow_itex": [188, 191, 192, 193, 195, 196, 197, 226, 229, 230, 231, 233, 234, 235, 622], "onnxrt_qdq": [188, 192, 195, 196, 197, 226, 230, 233, 234, 235, 622], "onnxrt_qlinearop": [188, 192, 195, 196, 197, 203, 226, 230, 233, 234, 235, 239, 622], "onnxrt_integerop": [188, 192, 195, 196, 197, 203, 226, 230, 233, 234, 235, 239, 622], "pytorch_ipex": [188, 192, 195, 196, 197, 226, 230, 233, 234, 235, 622, 631], "pytorch_fx": [188, 192, 195, 196, 197, 226, 230, 233, 234, 235, 622], "dataset_registri": [188, 192, 197, 226, 230, 235], "dataset_typ": [188, 192, 197, 226, 230, 235, 246, 247, 257, 293, 367], "dataset_format": [188, 192, 197, 226, 230, 235], "raw_imag": [188, 192, 197, 226, 230, 235], "overwrit": [188, 192, 197, 226, 230, 235, 607, 611], "download_url": [188, 226], "filenam": [188, 226, 261, 344, 345, 445, 461, 468, 474, 484, 492, 580], "md5": [188, 226], "download": [188, 226, 340, 420, 443, 444, 446, 447, 480, 577, 580, 592, 625], "address": [188, 226, 516, 528, 577, 595, 621], "gen_bar_updat": [188, 226], "bar": [188, 226, 577, 614], "check_integr": [188, 226], "fpath": [188, 226], "checksum": [188, 226], "calculate_md5": [188, 226], "chunk_siz": [188, 226], "cifar10": [188, 226, 580], "cifar100": [188, 226, 580], "automat": [188, 191, 197, 198, 199, 200, 226, 229, 236, 246, 247, 256, 263, 293, 304, 315, 530, 533, 577, 578, 580, 591, 595, 597, 599, 602, 603, 605, 607, 608, 609, 611, 612, 614, 617, 620, 628, 629], "www": [188, 226, 580, 632], "toronto": [188, 226, 580], "edu": [188, 226, 580], "kriz": [188, 226, 580], "cifar": [188, 226, 580, 632], "tar": [188, 226, 580, 609, 612], "gz": [188, 226, 580, 609, 612], "subset": [188, 191, 226, 229, 580], "internet": [188, 226, 577, 580], "put": [188, 226, 580, 582, 619], "again": [188, 226, 580, 624], "load_meta": [188, 226], "pytorchcifar10": [188, 226], "mxnetcifar10": [188, 226], "tensorflowcifar10": [188, 226], "pytorchcifar100": [188, 226], "mxnetcifar100": [188, 226], "tensorflowcifar100": [188, 226], "mnist": [188, 226, 580, 584], "nation": [188, 226, 528], "institut": [188, 226], "standard": [188, 197, 200, 203, 226, 239, 340, 586, 594, 628, 629], "technologi": [188, 226, 618], "fashionmnist": [188, 226, 580], "npz": [188, 226, 580], "idx1": [188, 226, 580], "ubyt": [188, 226, 580], "idx3": [188, 226, 580], "t10k": [188, 226, 580], "class_to_idx": [188, 226], "read_data": [188, 226], "pytorchmnist": [188, 226], "mxnetmnist": [188, 226], "tensorflowmnist": [188, 226], "pytorchfashionmnist": [188, 226], "mxnetfashionmnist": [188, 226], "tensorflowfashionmnist": [188, 226], "imagefold": [188, 226, 580, 584], "subfold": [188, 226], "belong": [188, 226, 244, 308, 623], "class_1": [188, 226, 580], "xxx": [188, 226, 529, 580], "png": [188, 226, 580], "xxy": [188, 226, 580], "xxz": [188, 226, 580], "class_n": [188, 226, 580], "123": [188, 226, 580, 628], "nsdf3": [188, 226, 580], "asd932_": [188, 226, 580], "mxnetimagefold": [188, 226], "tensorflowtfrecorddataset": [188, 226], "tensorflowimagerecord": [188, 192, 197, 226], "imagenet": [188, 191, 192, 197, 199, 200, 226, 229, 236, 263, 531, 577, 603, 627, 628, 631, 632], "000": [188, 192, 197, 226, 533, 580], "001": [188, 192, 197, 226, 580, 584, 631], "099": [188, 192, 197, 226, 580], "tensorflowvocrecord": [188, 226], "pascal": [188, 226], "voc": [188, 226, 255, 303], "2012": [188, 226], "00000": [188, 226], "00004": [188, 226], "00001": [188, 226], "00003": [188, 226], "dummydataset": [189, 190, 227, 228], "float32": [189, 190, 203, 227, 228, 239, 251, 299, 497, 534, 578, 580, 623, 628], "stand_norm": [189, 190, 227, 228, 580], "dummy_v2": [190, 228, 579, 580], "sparse_dummy_v2": [190, 228, 580], "label_shap": [190, 228, 580], "sparsedummydataset": [190, 228], "dense_shap": [190, 228, 580], "sparse_ratio": [190, 228, 580], "imagenetraw": [191, 229, 580], "data_path": [191, 229, 580], "image_list": [191, 229, 580], "img1": [191, 229, 580], "img2": [191, 229, 580], "imgx": [191, 229, 580], "val_map": [191, 229, 580], "txt": [191, 229, 492, 577, 580, 592], "pytorchimagenetraw": [191, 229], "mxnetimagenetraw": [191, 229], "tensorflowimagenetraw": [191, 229], "inteltensorflow": [191, 193, 229, 231, 592], "tensorflowimagenetdataset": [191, 229], "onnxrtimagenetdataset": [191, 229], "bert_dataset": [192, 197, 230, 235, 247, 295], "coco_dataset": [192, 197, 230, 235, 247, 295], "dummy_dataset": [192, 197, 230, 235, 247, 295], "dummy_dataset_v2": [192, 197, 230, 235, 247, 295], "imagenet_dataset": [192, 197, 230, 235, 247, 295], "style_transfer_dataset": [192, 197, 230, 235, 247, 295], "styletransferdataset": [193, 231], "content_fold": [193, 231, 580], "style_fold": [193, 231, 580], "crop_ratio": [193, 231, 580], "resize_shap": [193, 231, 580], "256": [193, 197, 199, 200, 231, 236, 580, 584, 628], "image_format": [193, 231, 580], "holder": [193, 231, 580], "labelbalancecocorecordfilt": [194, 196, 197, 232], "labelbalancecocorawfilt": [194, 232], "tensorflowfilt": [195, 233], "onnxrtqlfilt": [195, 233], "onnxrtitfilt": [195, 233], "pytorchfilt": [195, 233], "mxnetfilt": [195, 233], "filter_registri": [195, 196, 197, 233, 234, 235], "filter_typ": [195, 196, 197, 233, 234, 235], "__call__": [195, 196, 197, 233, 234, 235], "coco_filt": [196, 197, 234, 235, 247, 295], "imagenet_transform": [197, 200, 235, 237, 247, 295], "transform_cl": [197, 200, 203, 235, 237, 239], "basetransform": [197, 198, 199, 200, 203, 235, 236, 237, 239], "composetransform": [197, 200, 203, 239], "transform_list": [197, 200, 203, 239, 628], "transform_registri": [197, 200, 203, 235, 237, 239], "transform_typ": [197, 200, 203, 235, 237, 239], "postprocess_cl": [197, 200, 201, 207, 211], "user_postprocess": [197, 200, 201, 207, 211], "labelshift": [197, 199, 200, 236, 502, 628], "label_shift": [197, 199, 200, 236, 628], "bilinearimagenettransform": [197, 199, 200, 236], "central_fract": [197, 199, 200, 236, 628], "875": [197, 199, 200, 236, 628], "mean_valu": [197, 199, 200, 236, 628], "seri": [197, 199, 200, 236, 533, 592, 628], "applic": [197, 199, 200, 236, 483, 512, 514, 516, 577, 586, 597, 614, 621, 627, 628], "fraction": [197, 199, 200, 236, 628], "crop": [197, 199, 200, 203, 236, 239, 580, 628], "std": [197, 199, 200, 203, 236, 239, 263, 628], "tensorflowresizecropimagenettransform": [197, 199, 200, 236], "random_crop": [197, 199, 200, 236, 628], "resize_sid": [197, 199, 200, 236, 628], "resize_method": [197, 199, 200, 236], "bilinear": [197, 199, 200, 203, 236, 239, 628], "random_flip_left_right": [197, 199, 200, 236, 628], "channels_last": [197, 199, 200, 236, 597], "subpixel": [197, 199, 200, 236], "rgb": [197, 199, 200, 236], "desir": [197, 199, 200, 203, 236, 239, 269, 628], "flip": [197, 199, 200, 203, 236, 239, 628], "right": [197, 199, 200, 236, 251, 299, 497, 528, 530, 577, 614, 628], "tfsquadv1posttransform": [197, 200, 203, 239], "vocab_fil": [197, 200, 202, 203, 238, 239, 628], "n_best_siz": [197, 200, 203, 239, 628], "20": [197, 200, 203, 239, 262, 263, 592, 618, 628, 631, 632], "384": [197, 200, 203, 239, 628], "max_query_length": [197, 200, 203, 239, 628], "64": [197, 200, 203, 239, 531, 628, 632], "max_answer_length": [197, 200, 203, 239, 628], "30": [197, 200, 203, 239, 585, 589, 591, 628, 632], "doc_strid": [197, 200, 203, 239, 628], "nbest_predict": [197, 200, 203, 239, 628], "wordpiec": [197, 200, 202, 203, 238, 239, 628], "question": [197, 200, 203, 239, 252, 253, 300, 301, 528, 529, 534, 592, 597, 628, 632], "answer": [197, 200, 203, 239, 252, 253, 300, 301, 528, 628, 632], "lower": [197, 200, 202, 203, 238, 239, 253, 301, 320, 499, 583, 619, 620, 621, 623, 628, 629], "long": [197, 200, 203, 239, 587, 628], "document": [197, 200, 203, 239, 529, 584, 595, 599, 609, 612, 613, 625, 628], "chunk": [197, 200, 203, 239, 628], "process_result": [197, 200, 203, 239], "get_postprocess_result": [197, 200, 203, 239], "tfsquadv1modelzooposttransform": [197, 200, 203, 239], "squadv1": [197, 200, 203, 239, 628], "tensorflowresizewithratio": [197, 200, 203, 239], "min_dim": [197, 200, 203, 239, 628], "800": [197, 200, 203, 239, 628], "max_dim": [197, 200, 203, 239, 628], "1365": [197, 200, 203, 239, 628, 632], "constant_valu": [197, 200, 203, 239], "aspect": [197, 199, 200, 203, 236, 239, 628], "side": [197, 200, 203, 239, 269, 577, 580, 608, 628], "exce": [197, 200, 203, 239, 628], "resizetftransform": [197, 200, 203, 239], "nearest": [197, 200, 203, 239, 628], "bicub": [197, 200, 203, 239, 628], "rescaletftransform": [197, 200, 203, 239], "normalizetftransform": [197, 200, 203, 239], "rescal": [197, 200, 203, 239, 628], "deviat": [197, 200, 203, 239, 628], "broadcast": [197, 200, 203, 239, 584, 628], "parsedecodecocotransform": [197, 198, 200], "decod": [197, 198, 199, 200, 236, 248, 269, 296, 554, 594, 628], "quantizedinput": [199, 236, 628], "parsedecodeimagenet": [199, 236, 628], "proto": [199, 203, 236, 239, 628], "parsedecodeimagenettransform": [199, 236], "onnxbilinearimagenettransform": [199, 236], "onnxresizecropimagenettransform": [199, 236], "std_valu": [199, 236], "229": [199, 236, 632], "224": [199, 236, 263, 533, 579, 580, 584, 586, 589, 597, 628, 631, 632], "225": [199, 236, 632], "resizewithaspectratio": [199, 236], "87": [199, 236, 632], "inter_pol": [199, 236], "cv2": [199, 236], "inter_area": [199, 236], "convert_to_unicod": [202, 238], "unicod": [202, 238, 248, 296], "load_vocab": [202, 238], "convert_by_vocab": [202, 238], "vocab": [202, 238, 269], "whitespace_token": [202, 238], "whitespac": [202, 238, 253, 301], "piec": [202, 238, 248, 296, 554, 586, 594], "fulltoken": [202, 238], "tokenzi": [202, 238], "convert_tokens_to_id": [202, 238], "convert_ids_to_token": [202, 238], "basictoken": [202, 238], "punctuat": [202, 238, 248, 253, 296, 301], "wordpiecetoken": [202, 238], "unk_token": [202, 238], "unk": [202, 238], "max_input_chars_per_word": [202, 238], "200": [202, 238, 530, 629], "word": [202, 238, 248, 296, 554, 594], "greedi": [202, 238], "unaff": [202, 238], "un": [202, 238], "aff": [202, 238], "separ": [202, 238, 515, 528, 577, 590, 593, 617, 622], "concat_gener": [203, 239], "tensorflowtransform": [203, 239], "mxnettransform": [203, 239], "pytorchtransform": [203, 239], "onnxrtqltransform": [203, 239], "onnxrtittransform": [203, 239], "tensorflowwrapfunct": [203, 239], "transform_func": [203, 239], "pytorchmxnettransform": [203, 239], "get_torchvision_map": [203, 239], "torchvis": [203, 239, 263, 577, 585, 589, 597, 603], "croptoboundingbox": [203, 239, 628], "offset_height": [203, 239, 628], "offset_width": [203, 239, 628], "target_height": [203, 239, 628], "target_width": [203, 239, 628], "box": [203, 239, 251, 255, 299, 302, 303, 319, 530, 577, 594, 597, 608, 614, 627, 628, 629], "coordin": [203, 239, 319, 628], "corner": [203, 239, 534, 628], "horizont": [203, 239, 628], "mxnetcroptoboundingbox": [203, 239], "onnxrtcroptoboundingbox": [203, 239], "tensorflowcroptoboundingbox": [203, 239], "resizewithratio": [203, 239, 628], "perm": [203, 239, 628], "tensorflowtranspos": [203, 239], "mxnettranspos": [203, 239], "pytorchtranspos": [203, 239], "randomverticalflip": [203, 239, 628], "randomli": [203, 239, 273, 319, 326, 531, 628, 629], "tensorflowrandomverticalflip": [203, 239], "randomhorizontalflip": [203, 239, 628], "tensorflowrandomhorizontalflip": [203, 239], "toarrai": [203, 239, 628], "pil": [203, 239, 628], "casttftransform": [203, 239], "castonnxtransform": [203, 239], "castpytorchtransform": [203, 239], "centercroptftransform": [203, 239], "center": [203, 239, 532, 533, 592, 628, 629], "paddedcentercroptransform": [203, 239], "crop_pad": [203, 239], "resizepytorchtransform": [203, 239], "randomcroptftransform": [203, 239], "randomresizedcroppytorchtransform": [203, 239], "randomresizedcropmxnettransform": [203, 239], "randomresizedcroptftransform": [203, 239], "pramet": [203, 239], "rescalekeraspretraintransform": [203, 239], "rescaletransform": [203, 239], "alignimagechanneltransform": [203, 239], "align": [203, 239, 291, 528, 628], "w": [203, 239, 263, 619, 620, 628], "pytorchalignimagechannel": [203, 239], "tondarraytransform": [203, 239], "resizemxnettransform": [203, 239], "resizetransform": [203, 239], "cropresizetftransform": [203, 239], "boundari": [203, 239, 397, 628], "area": [203, 239, 251, 299, 594, 628], "pytorchcropresizetransform": [203, 239], "mxnetcropresizetransform": [203, 239], "cropresizetransform": [203, 239], "centercroptransform": [203, 239], "mxnetnormalizetransform": [203, 239], "pytorchnormalizetransform": [203, 239], "normalizetransform": [203, 239], "randomcroptransform": [203, 239], "randomresizedcroptransform": [203, 239], "get_final_text": [203, 239], "pred_text": [203, 239], "orig_text": [203, 239], "project": [203, 239, 269, 364, 367, 372, 374, 375, 378, 385, 386, 390, 391, 392, 393, 394, 395, 396, 420, 527, 528, 529, 621, 626, 629, 633], "squadexampl": [203, 239], "qas_id": [203, 239], "question_text": [203, 239], "doc_token": [203, 239], "orig_answer_text": [203, 239], "start_posit": [203, 239], "end_posit": [203, 239], "is_imposs": [203, 239], "simpl": [203, 239, 577, 592, 626, 629], "unique_id": [203, 239], "example_index": [203, 239], "doc_span_index": [203, 239], "token_to_orig_map": [203, 239], "token_is_max_context": [203, 239], "segment_id": [203, 239], "read_squad_exampl": [203, 239], "input_fil": [203, 239], "output_fn": [203, 239], "inputbatch": [203, 239], "collecttransform": [203, 239], "10833": [203, 239], "tfmodelzoocollecttransform": [203, 239], "parsedecodevoctransform": [203, 239], "conf_fname_or_obj": [204, 213, 240, 246, 247, 256, 257, 258, 259, 270, 271, 280, 285, 293, 294], "unnecessari": [204, 247], "call_on": [204, 247, 484], "cmd": [204, 247, 492, 615], "log_fil": [204, 247], "window": [204, 247, 578, 614, 615], "tensorflowcrossentropyloss": 205, "pytorchcrossentropyloss": 205, "tensorflowsparsecategoricalcrossentropi": 205, "sparsecategoricalcrossentropyloss": 205, "setter": [206, 207], "calib_dataload": [206, 207, 247, 293, 294, 313, 315, 530, 533, 579, 580, 589, 590, 594, 623, 624], "known": [206, 207, 319, 586, 619, 627, 629], "open": [207, 247, 295, 337, 492, 526, 528, 533, 577, 586, 587, 609, 612, 615, 621], "librari": [207, 247, 295, 526, 529, 533, 592, 599, 608, 614, 621, 623], "metric_cl": [207, 208, 254, 255, 302, 303], "user_metr": [207, 208, 302, 303], "alwai": [207, 208, 251, 299, 302, 303, 594], "recommend": [207, 208, 302, 303, 534, 580, 586, 588, 605, 608, 613, 615, 619, 622, 629], "set_backend": 209, "tensorflowoptim": 210, "pytorchoptim": 210, "optimizer_cl": 210, "allow": [210, 311, 319, 340, 516, 577, 582, 584, 594, 595, 622, 631], "optimizer_registri": 210, "optimizer_typ": 210, "cross": [210, 254, 255, 302, 303, 590, 629], "tensorflowsgd": 210, "tensorflowadamw": 210, "tensorflow_addon": 210, "adamw": 210, "tensorflowadam": 210, "adam": [210, 631], "pytorchsgd": 210, "record_output": 212, "output_process": 212, "get_activ": 212, "train_dataload": [213, 247, 619], "prepare_qat": [213, 247], "compress": [213, 247, 280, 285, 295, 314, 334, 526, 533, 582, 591, 614, 616, 617, 619, 620, 621, 623], "post_process": [213, 247], "pre_epoch_begin": [213, 247, 280, 285], "post_epoch_end": [213, 247, 280, 285], "on_batch_begin": [213, 247, 280, 285], "on_post_grad": [213, 247], "on_batch_end": [213, 247, 280, 285], "tensorflowimagefold": 226, "evaluation_distribut": [240, 247, 280, 285], "train_distribut": [240, 247, 280, 285], "on_post_forward": [240, 247], "deprec": [240, 247, 499, 609, 612, 628], "create_optim": [240, 247], "disil": [240, 247], "qlinear2qdq": [241, 247, 295], "torch_to_fp32_onnx": [241, 244], "do_constant_fold": [241, 244, 313], "verbos": [241, 244, 260, 261, 262, 313, 319], "int8_model": [241, 243, 244, 534], "ax": [241, 244, 313], "torch_to_int8_onnx": [241, 244], "u8s8": [241, 244], "optionl": [241, 244], "qdq_op_int32_bia": [241, 244, 586], "qdq_op_fp32_bias_qdq": [241, 244, 586], "onnx_qlinear_to_qdq": [241, 242], "input_name_to_nod": [241, 242, 311], "qlinearop": [241, 242, 591, 605, 623], "tf_to_fp32_onnx": [241, 243], "tf_to_int8_onnx": [241, 243], "check_model": 242, "update_weight_bia": 244, "fp32_onnx_path": [244, 245], "wegiht": 244, "set_data_typ": 244, "weight_typ": 244, "activation_typ": 244, "get_node_map": 244, "module_node_map": 244, "get_quantizable_onnx_op": 244, "quantize_nod": 244, "build_scale_map": 244, "int8_scale_info": 244, "scale_zp_dict": 244, "set_scale_info": 244, "int8_onnx_model": 244, "int8_onnx_path": 244, "recalculate_bia": 244, "remove_nodes_by_nam": 244, "sub_graph_with_int32_bia": 244, "a_info": 244, "b_info": 244, "qdq_fp32_bia": 244, "excut": 244, "qdq_int32_bia": 244, "qdq_fp32_bias_qdq": 244, "onnx2numpy_dtyp": 245, "onnx_node_typ": 245, "dummydataread": 245, "achiev": [246, 247, 293, 315, 586, 594, 617, 619, 620, 621, 623, 627, 629], "variou": [246, 247, 256, 293, 304, 315, 591, 597, 620, 622], "dl": [246, 247, 256, 280, 285, 293, 304, 315, 590, 601, 614, 621], "bring": [246, 247, 293, 315, 608, 623], "unifi": [246, 247, 293, 315, 491, 534, 579, 590, 591, 596], "work": [246, 247, 280, 285, 293, 315, 532, 579, 582, 609, 612, 619, 620, 624, 625, 627], "sinc": [246, 247, 248, 280, 285, 293, 296, 315, 340, 468, 554, 582, 586, 592, 594, 608, 614, 617], "vari": [246, 247, 280, 285, 293, 315, 618, 632], "roc": [246, 247, 255, 280, 285, 293, 303, 315], "footprint": [246, 247, 280, 285, 293, 314, 315, 583, 616, 619, 620, 622], "flexibl": [246, 247, 280, 285, 293, 582, 619, 620], "set_config_by_model": [246, 247, 256], "model_obj": [246, 247, 256], "popular": [247, 295, 526, 533, 534, 582, 585, 586, 589, 619, 623, 629], "techniqu": [247, 295, 526, 533, 591, 597, 617, 619, 620, 622, 623, 631], "bleu": [247, 249, 254, 268, 295, 297, 302, 594], "bleu_util": [247, 254, 295, 302], "coco_label_map": [247, 254, 295, 302], "coco_tool": [247, 254, 295, 302], "evaluate_squad": [247, 254, 295, 302], "dynast": [247, 270, 295], "supernetwork": [247, 260, 263, 264, 270], "dynas_manag": [247, 263, 264, 270], "dynas_predictor": [247, 263, 264, 270], "dynas_search": [247, 264, 270], "dynas_util": [247, 262, 264, 270], "basic_na": [247, 270, 295], "dyna": [247, 260, 261, 262, 263, 264, 270, 295, 531, 591, 622], "nas_util": [247, 270, 295], "pruner_legaci": [247, 295], "gradient_sensit": [247, 276, 295], "group_lasso": [247, 276, 295], "pattern_lock": [247, 276, 295], "pruning_recip": [247, 295], "tile_pattern": [247, 281, 282], "pytorch_prun": [247, 295], "logger": [247, 286, 295, 335, 338, 344, 480, 484, 488], "prune_util": [247, 286, 295], "graph_optim": [247, 256, 295, 351, 420, 455, 459, 460, 480, 488, 504], "mixed_precis": [247, 295, 353, 420, 455, 480, 488, 504], "model_convers": [247, 295], "pruning_v2": [247, 295], "quantconf": [247, 293, 304], "qfunc": [247, 293], "distributed_execut": [247, 293], "pruningconf": [247, 280, 285], "pruning_func": [247, 280, 285], "update_items_for_all_prun": [247, 280, 291], "howev": [247, 280, 285, 291, 586, 619], "still": [247, 280, 285, 291, 623, 624], "analys": [247, 280, 285, 291], "generate_prun": [247, 280, 285], "flow": [247, 252, 253, 280, 285, 300, 301, 530, 531], "graphoptim": [247, 256, 351, 452, 503], "privat": [247, 256, 304, 528], "member": [247, 256, 304, 528, 534], "modelconvers": [247, 257, 563], "unicoderegex": [248, 296], "hoc": [248, 296], "hack": [248, 296], "nondigit_punct_r": [248, 296], "compil": [248, 296, 618], "preced": [248, 296], "digit": [248, 296, 621], "punct_nondigit_r": [248, 296], "symbol_r": [248, 296], "property_char": [248, 296], "join": [248, 296], "bleu_token": [248, 296], "mose": [248, 296], "smt": [248, 296], "mosesdecod": [248, 296], "mteval": [248, 296], "v14": [248, 296], "pl": [248, 296], "l954": [248, 296], "l983": [248, 296], "bilingu": [248, 296, 554], "understudi": [248, 296, 554], "qualiti": [248, 296, 554], "machin": [248, 266, 296, 359, 554, 577, 586, 592, 600, 614, 621, 627], "natur": [248, 296, 554], "approxim": [248, 249, 296, 297, 554, 594], "glue": [248, 255, 296, 303, 554, 580, 594, 603], "ngram": [248, 296, 554, 594], "breviti": [248, 249, 296, 297, 554, 594], "penalti": [248, 249, 296, 297, 554, 594], "doe": [248, 251, 260, 296, 299, 317, 325, 554, 580, 594, 625, 628], "beam": [248, 296, 554, 594], "occur": [248, 296, 554], "bleu_scor": [248, 249, 296, 297, 554], "tensor2tensor": [249, 269, 297], "bleu_hook": [249, 297], "compute_bleu": [249, 268, 297], "reference_corpu": [249, 297], "translation_corpu": [249, 297], "max_ord": [249, 297], "use_bp": [249, 297], "against": [249, 297], "gram": [249, 297], "flag": [249, 297, 334, 509], "pycocotool": [251, 299, 587, 592], "object_detect": [251, 299], "noth": [251, 299, 492, 629], "thu": [251, 299, 623], "cannot": [251, 299, 487, 530, 586, 587, 627], "slim": [251, 299, 310, 312, 596], "jonathanhuang": [251, 299], "image_id": [251, 299, 594], "groundtruth": [251, 299], "invok": [251, 299], "groundtruth_dict": [251, 299], "exportgroundtruthtococo": [251, 299], "groundtruth_boxes_list": [251, 299], "groundtruth_classes_list": [251, 299], "max_num_class": [251, 299], "output_path": [251, 299, 311, 492], "detections_list": [251, 299], "exportdetectionstococo": [251, 299], "detection_boxes_list": [251, 299], "detection_scores_list": [251, 299], "detection_classes_list": [251, 299], "cocowrapp": [251, 299], "loadannot": [251, 299], "cocoevalwrapp": [251, 299], "agnostic_mod": [251, 299], "computemetr": [251, 299], "detection_typ": [251, 299], "bbox": [251, 299, 530, 594], "hold": [251, 299, 311, 319, 580], "datastructur": [251, 299], "mscoco": [251, 299], "replic": [251, 299], "behavior": [251, 299, 528, 529, 534, 588, 596, 627, 631], "extern": [251, 299, 311, 577], "storag": [251, 299, 533, 589, 594], "category_id": [251, 299], "iou_typ": [251, 299], "iou_thr": [251, 255, 299, 302, 303, 594], "map_point": [251, 255, 299, 302, 303, 594], "cocoev": [251, 299], "Then": [251, 299, 327, 577, 607, 609, 611, 612, 629], "getcategori": [251, 299], "getagnosticmod": [251, 299], "agnost": [251, 299, 582], "getcategoryidlist": [251, 299], "accumul": [251, 299, 318, 329, 330, 629], "p": [251, 299, 577, 615], "include_metrics_per_categori": [251, 299], "all_metrics_per_categori": [251, 299], "summeri": [251, 299], "per_category_ap": [251, 299], "care": [251, 299], "hand": [251, 299, 531, 577], "pollut": [251, 299], "mldash": [251, 299], "summary_metr": [251, 299], "iou": [251, 255, 299, 303], "increment": [251, 267, 269, 299, 318, 629], "50iou": [251, 299], "50": [251, 253, 262, 299, 301, 531, 632], "75iou": [251, 299], "75": [251, 299, 632], "32": [251, 299, 584, 590, 618, 619, 632], "pixel": [251, 299, 628], "medium": [251, 299, 621], "96": [251, 299, 632], "10000": [251, 299, 319], "recal": [251, 253, 255, 299, 301, 303], "bycategori": [251, 299], "supercategori": [251, 299], "backward": [251, 299, 334, 582, 583, 584, 617, 619, 623, 625], "performancebycategori": [251, 299], "regardless": [251, 299, 528], "category_stat": [251, 299], "exportsingleimagegroundtruthtococo": [251, 299], "next_annotation_id": [251, 299], "category_id_set": [251, 299], "groundtruth_box": [251, 299], "groundtruth_class": [251, 299], "groundtruth_mask": [251, 299], "groundtruth_is_crowd": [251, 299], "ingest": [251, 299], "ones": [251, 299, 620], "exportsingleimagedetectionstococo": [251, 299], "assign": [251, 299, 313, 327, 344, 385, 386, 391, 392, 393, 394, 577, 584, 622], "num_gt_box": [251, 299], "num_detect": [251, 255, 299, 302, 303, 594, 631], "image_height": [251, 299], "image_width": [251, 299], "detection_mask": [251, 299], "crowd": [251, 299], "exportsingleimagedetectionboxestococo": [251, 299], "detection_box": [251, 299, 631], "detection_scor": [251, 299, 631], "detection_class": [251, 299, 631], "exporsingleimagedetectionboxestococo": [251, 299], "exportsingleimagedetectionmaskstococo": [251, 299], "allenai": [252, 253, 300, 301], "bi": [252, 253, 300, 301], "att": [252, 253, 300, 301], "f1_score": [252, 253, 300, 301], "ground_truth": [252, 253, 300, 301], "metric_max_over_ground_truth": [252, 253, 300, 301], "metric_fn": [252, 253, 300, 301], "exact_match_scor": [252, 300], "exact": [252, 300], "articl": [252, 253, 300, 301], "paragraph": [252, 253, 300, 301], "qa": [252, 253, 300, 301], "cantain": [252, 253, 300, 301], "normalize_answ": [253, 301], "newlin": [253, 301], "tab": [253, 301, 388, 391, 397, 515, 614, 627], "harmon": [253, 255, 301, 303], "answer_start": [253, 301], "177": [253, 301], "denver": [253, 301], "bronco": [253, 301], "nfl": [253, 301], "team": [253, 301, 528, 624], "afc": [253, 301], "super": [253, 260, 263, 301, 531], "bowl": [253, 301], "56be4db0acb8001400a502ec": [253, 301], "percentag": [253, 261, 301, 631], "basemetr": [254, 255, 302, 303], "single_output": [254, 255, 302, 303], "hvd": [254, 255, 302, 303, 584], "sample_weight": [254, 255, 302, 303], "metric_registri": [254, 255, 302, 303], "metric_typ": [254, 255, 302, 303], "decorator_metr": [254, 255, 302, 303], "tensorflowmetr": [255, 303], "maintain": [255, 303, 528, 529, 533, 596, 597, 609, 612, 619, 625], "pytorchmetr": [255, 303], "mxnetmetr": [255, 303], "onnxrtqlmetr": [255, 303], "onnxrtitmetr": [255, 303], "wrappytorchmetr": [255, 303], "wrapmxnetmetr": [255, 303], "wraponnxrtmetr": [255, 303], "proport": [255, 303], "were": [255, 302, 303, 600], "pred_list": [255, 303], "pytorchloss": [255, 303], "sum": [255, 303, 582], "mae": [255, 303, 594], "numer": [255, 303, 595, 621, 623], "rmse": [255, 261, 303, 594, 629], "squar": [255, 261, 303, 324, 594, 629], "tensorflowtopk": [255, 302, 303], "k": [255, 302, 303, 594, 619], "among": [255, 302, 303, 608], "most": [255, 302, 303, 319, 577, 595, 619, 623, 629], "outcom": [255, 302, 303], "num_correct": [255, 302, 303], "generaltopk": [255, 302, 303], "cocomapv2": [255, 302, 303, 594], "anno_path": [255, 302, 303, 594], "map_kei": [255, 302, 303], "detectionboxes_precis": [255, 302, 303], "output_index_map": [255, 302, 303, 594], "tensorflowmap": [255, 303], "tensorflowcocomap": [255, 303], "tensorflowvocmap": [255, 303], "squadf1": [255, 302, 303, 594], "miou": [255, 303], "num_class": [255, 303], "21": [255, 303, 602, 603, 621, 632], "intersect": [255, 303, 534, 594], "hist": [255, 303, 339], "onnxrtglu": [255, 303], "dlrm": [255, 303], "basicna": [258, 270], "model_build": [258, 270, 271], "nasbas": [258, 259, 270, 271, 531], "conf_fnam": [258, 270], "init_by_cfg": [258, 270], "init_for_search": [259, 270], "select_model_arch": [259, 270, 271], "create_acc_predictor": [259, 270], "predictor": [259, 260, 261, 263, 270, 531], "create_macs_predictor": [259, 270], "mac": [259, 261, 263, 268, 270, 531, 615], "create_latency_predictor": [259, 270], "latenc": [259, 260, 261, 263, 268, 270, 497, 626, 629], "init_cfg": [259, 270], "manag": [260, 261, 262, 263, 327, 334, 337, 363, 396, 398, 421, 482, 498, 589, 597, 598, 608], "parametermanag": [260, 263], "hot": 260, "pymoo": [260, 262, 263, 577], "process_param_dict": 260, "upper": [260, 262, 614], "vector": [260, 271, 273], "onehot_gener": 260, "in_arrai": 260, "onehot": 260, "account": [260, 528, 626, 629], "depth": [260, 329, 331, 582, 624], "input_arrai": 260, "elast": 260, "mapper": [260, 385, 448, 449], "random_sampl": [260, 319], "subnetwork": [260, 263], "trial_limit": 260, "100000": 260, "translate2param": 260, "pymoo_vector": 260, "translate2pymoo": 260, "import_csv": 260, "filepath": 260, "column_nam": 260, "drop_dupl": 260, "panda": 260, "datafram": [260, 307, 312, 313], "csv": [260, 263, 499, 531, 577], "purpos": [260, 588, 595, 614, 622], "subnet": [260, 263], "column": [260, 577, 619], "set_se": 260, "create_training_set": 260, "train_with_al": 260, "sklearn": 260, "transformerltencod": 260, "default_alpha": 261, "cost_factor": 261, "default_cost_factor": 261, "max_iter": 261, "default_max_iter": 261, "regressor": 261, "get_paramet": 261, "get_metr": [261, 337, 361], "mape": 261, "kendal": 261, "rank": [261, 584], "correl": 261, "spearman": 261, "searcher": [261, 273], "searchalgomanag": 262, "nsga2": [262, 531], "optuna": 262, "configure_nsga2": 262, "popul": [262, 531], "num_ev": [262, 531], "1000": [262, 497, 631], "warm_pop": 262, "crossover_prob": 262, "crossover_eta": 262, "mutation_prob": 262, "02": [262, 632], "mutation_eta": 262, "configure_ag": 262, "ag": [262, 528], "run_search": 262, "save_histori": 262, "previous": [262, 579], "problemmultiobject": 262, "evaluation_interfac": 262, "evaluationinterfac": [262, 263], "param_count": 262, "param_upperbound": 262, "supernet": [262, 263, 265, 266, 531], "ofa": [262, 263, 577], "mobilenetv3": [262, 263, 531], "45": [262, 530, 632], "mani": [262, 263, 314, 317, 318, 592, 629, 631], "get_mac": 263, "input_s": 263, "measure_lat": 263, "warmup_step": 263, "measure_step": 263, "resolut": 263, "warm": [263, 314], "runner": [263, 615], "ofarunn": 263, "acc_predictor": 263, "macs_predictor": 263, "latency_predictor": 263, "datasetpath": 263, "resnet50": [263, 533, 584, 589, 597, 601, 623, 626, 632], "w1": 263, "ilsvrc2012": [263, 531], "estimate_accuracy_top1": 263, "subnet_cfg": 263, "top1": [263, 623], "estimate_mac": 263, "estimate_lat": 263, "validate_top1": 263, "validate_mac": 263, "flop": 263, "fvcore": [263, 577], "get_subnet": 263, "transformerltrunn": 263, "checkpoint_path": [263, 268], "predictor_mod": 263, "csv_path": 263, "written": 263, "eval_subnet": 263, "clear_csv": 263, "evaluationinterfaceresnet50": 263, "evaluationinterfacemobilenetv3": 263, "evaluationinterfacetransformerlt": 263, "get_torchvision_model": 263, "torchvisionrefer": 263, "dataset_path": [263, 268, 500, 531], "baselin": [263, 314, 327, 337, 626, 627], "subprocess": [263, 492, 515], "machine_transl": [264, 265, 270], "transformer_interfac": [264, 265, 266], "lt": [266, 531, 580, 618, 632], "get_incremental_st": 267, "incremental_st": [267, 269], "set_incremental_st": 267, "multiheadattentionsup": 267, "super_embed_dim": 267, "num_head": 267, "is_encod": 267, "super_kdim": 267, "super_vdim": 267, "dropout": [267, 269], "add_bias_kv": [267, 269], "add_zero_attn": [267, 269], "self_attent": 267, "encoder_decoder_attent": 267, "out_dim": 267, "qkv_dim": 267, "head": [267, 269, 619], "key_padding_mask": 267, "need_weight": 267, "static_kv": 267, "attn_mask": [267, 269], "timestep": 267, "bytetensor": [267, 269], "src_len": [267, 269], "reorder_incremental_st": 267, "new_ord": [267, 269], "buffer": [267, 312], "compute_lat": 268, "get_model_paramet": 268, "compute_mac": 268, "transformersupernetwork": 269, "fairseq": 269, "vaswani": 269, "2017": 269, "1706": 269, "03762": 269, "transformerencod": 269, "transformerdecod": 269, "line": [269, 491, 492, 512, 577, 584, 591, 597, 602, 603, 619, 627], "encoder_config": 269, "embed_token": 269, "encoder_lay": 269, "transformerencoderlay": 269, "argpars": [269, 614], "namespac": 269, "src_token": 269, "src_length": 269, "longtensor": 269, "sentenc": 269, "encoder_out": 269, "embed_dim": 269, "encoder_padding_mask": 269, "reorder_encoder_out": 269, "rearrang": 269, "max_posit": 269, "upgrade_state_dict_nam": 269, "upgrad": 269, "old": [269, 291, 344, 625], "decoder_config": 269, "no_encoder_attn": 269, "decoder_lay": 269, "transformerdecoderlay": 269, "attend": 269, "prev_output_token": 269, "tgt_len": 269, "forc": [269, 340, 624], "extract_featur": 269, "output_lay": 269, "layer_idx": 269, "ffn": 269, "residu": 269, "suggest": [269, 273, 319, 530, 626], "learn": [269, 533, 534, 579, 580, 586, 590, 591, 592, 595, 597, 599, 602, 603, 605, 608, 609, 612, 614, 620, 621, 623, 627, 629], "robust": 269, "encoder_normalize_befor": 269, "norm": 269, "layer_norm": 269, "self_attn_layer_norm": 269, "final_layer_norm": 269, "seq_len": 269, "t_tgt": 269, "t_src": 269, "decoder_normalize_befor": 269, "prev_self_attn_st": 269, "prev_attn_st": 269, "self_attn_mask": 269, "self_attn_padding_mask": 269, "builder": [271, 312], "res_save_path": 271, "count_model_paramet": 271, "load_search_result": 271, "dump_search_result": 271, "params_vec2params_dict": [271, 273], "paras_vec": 271, "find_best_model_arch": 271, "lie": [271, 531], "pareto": [271, 272, 531], "front": [271, 272, 531], "metrics_convers": 271, "init_search_cfg": 271, "nas_registri": 272, "nas_method": 272, "create_search_space_pool": 272, "idx": [272, 311, 580], "enumer": [272, 334, 348, 449, 455, 481, 534, 582, 583, 584, 617, 619, 627], "find_pareto_front": 272, "n_point": 272, "n_metric": 272, "n_pareto_point": 272, "get_feedback": 273, "feedback": 273, "para_vec": 273, "gridsearch": 273, "grid": [273, 531], "whole": [273, 514, 577, 623], "exhaust": [273, 295, 323, 326, 622], "randomsearch": 273, "42": [273, 618, 632], "bayesianoptimizationsearch": 273, "bayesian": [273, 295, 321, 323, 531, 622], "indices2params_vec": 273, "gradientsensitivityprun": 274, "pytorchmodel": [274, 275, 277, 278, 279, 313], "overwritten": [274, 275, 277, 278, 279, 602], "elementwise_prun": 274, "parse_weight_nam": 274, "weight_name_pattern": 274, "compute_mask": [274, 277, 278], "prune_weight": 274, "update_importance_elementwis": 274, "update_importance_ab": 274, "update_importance_weight": 274, "prune_by_import": 274, "num_inst": 274, "grouplassoprun": 275, "basicmagnitudeprun": [275, 277], "legaci": 276, "accordingli": [277, 294, 605], "update_weight": [278, 312, 313], "pruner_registri": 279, "clase": 279, "update_spars": 279, "tfpruningcallback": [280, 285], "input_model": [280, 285, 596, 627], "pure": [280, 285, 595], "s_output": [280, 285], "s_loss": [280, 285], "t_output": [280, 285], "support_pattern": [281, 282, 283], "pattern_registri": 283, "pattern_typ": 283, "patternbas": [283, 284], "mask_shap": [283, 284], "is_contigu": 283, "compute_spars": [283, 284, 344], "abs_sum": 283, "abs_max": 283, "tile": 284, "tilepatternbas": 284, "matrix": [284, 533, 605, 620], "repeat_mask": 284, "ori_shap": 284, "repeat": [284, 629], "tilepattern_1x1": 284, "1x1": [284, 582, 619], "unstructur": [284, 591, 619, 620, 632], "tilepattern_2x2": 284, "2x2": 284, "tilepattern_1x16": 284, "1x16": 284, "tilepattern_4x1": 284, "tilepattern_1x2": 284, "1x2": 284, "max_sparsity_ratio_per_lay": [288, 290, 622], "get_mask_singl": 288, "reset_non_value_to_default": 289, "obejct": 289, "parse_not_to_prun": 289, "update_frequency_on_step": [290, 622], "judg": 290, "Or": 290, "simpli": [290, 584, 596, 597, 599, 602, 614], "update_scor": 290, "magnitudeprun": 290, "snipprun": 290, "snipmomentumprun": 290, "moreoev": 290, "templat": [291, 295, 367, 386, 391, 480, 488, 525, 577, 619], "tree": [291, 329, 331, 362, 391, 393], "nlp": [291, 602, 619, 620, 623], "huggingface_model": 291, "config_file_path": 291, "pruner_info": 291, "aggressive_ratio": 292, "aggress": 292, "server": [294, 295, 420, 427, 479, 480, 487, 488, 496, 499, 510, 512, 514, 577, 614], "seper": 294, "opt_model": 294, "fulli": [294, 623], "meet": [294, 314, 316, 317, 318, 320, 325, 327, 530, 586, 616, 621, 622, 623, 627, 629], "saniti": 294, "illeg": 294, "sync": 294, "contrib": 295, "experiment": [295, 477, 531, 554, 580, 583, 584, 586, 622, 625, 628], "base_model": [295, 306, 307, 309, 311, 312, 313], "keras_model": [295, 306], "mxnet_model": [295, 306], "nets_factori": [295, 306], "onnx_model": [295, 306, 431], "tensorflow_model": [295, 306], "torch_model": [295, 306], "tuning_sampl": [295, 323, 329], "tuning_spac": [295, 323, 329, 330, 332], "tuning_struct": [295, 323, 329, 330, 331], "auto_mixed_precis": [295, 323], "conserv": [295, 323], "hawq_v2": [295, 323], "mse_v2": [295, 323], "collect_layer_histogram": [295, 338], "create_obj_from_config": [295, 338], "kl_diverg": [295, 338], "load_huggingfac": [295, 338], "ux": 295, "config_gener": [295, 420, 480], "configuration_wizard": [295, 420, 480], "db_manag": [295, 420, 480, 518], "file_brows": [295, 420, 480], "jobs_manag": [295, 420, 480], "model_zoo": [295, 420, 480], "names_mapp": [295, 420, 480], "profil": [295, 354, 372, 379, 381, 391, 394, 396, 397, 420, 428, 436, 480, 481, 491, 497, 514, 519], "manage_workspac": [295, 420, 480], "workload": [295, 349, 350, 351, 353, 355, 356, 359, 381, 386, 391, 451, 468, 475, 480, 482, 488, 498, 499, 514, 517, 519, 520, 521, 522, 621], "executor": [295, 347, 480, 488], "expiring_dict": [295, 480, 488], "github_info": [295, 480, 488], "hw_info": [295, 480, 488], "json_seri": [295, 350, 404, 405, 410, 412, 413, 416, 426, 435, 461, 467, 480, 487, 488, 497, 500, 501, 502, 503, 505, 506, 507, 508, 509], "proc": [295, 480, 488], "status_upd": [295, 480, 488], "yaml_util": [295, 480, 488], "web": [295, 479, 480, 533, 577, 627], "servic": [295, 480, 513, 514, 533, 614, 618], "commun": [295, 480, 514, 515, 516, 528, 577], "router": [295, 480, 514], "inc_bench": [295, 480, 577, 589], "set_random_se": [295, 338, 344, 509], "set_tensorboard": [295, 344], "set_workspac": [295, 315, 344, 500, 509], "output_model": [304, 579, 627], "eval_metr": [304, 315, 334], "chould": 304, "onnx_ml_pb2": [304, 596], "hybirdblock": [304, 315], "paramt": [304, 315, 334], "basemodel": [305, 306, 307, 309, 311, 312, 313], "plai": [305, 306, 619, 621], "role": [305, 306, 619], "node_typ": [305, 306], "kerasmodel": [307, 438], "get_all_weight_nam": [307, 312, 313], "report_spars": [307, 312, 313], "total_spars": [307, 312, 313], "get_model_fwk_nam": 308, "fwk": 308, "net": 310, "factori": [310, 401, 420, 455, 471, 476, 480, 491, 495], "tfslimnetsfactori": 310, "model_func": 310, "arg_scop": 310, "onnxmodel": [311, 431], "is_large_model": 311, "2gb": 311, "ort": 311, "output_name_to_nod": 311, "ir_vers": 311, "opset_import": 311, "nodes_to_remov": 311, "nodes_to_add": 311, "add_initi": 311, "get_initi": 311, "remove_initi": 311, "init_to_remov": 311, "set_initi": 311, "get_sibl": 311, "sibl": 311, "get_children": 311, "get_par": 311, "find_node_by_nam": 311, "new_nodes_list": 311, "find_nodes_by_initi": 311, "get_scale_zero": 311, "save_model_to_fil": 311, "use_external_data_format": 311, "replace_node_input": 311, "new_input_nam": 311, "replace_input_of_all_nod": 311, "white_optyp": 311, "black_optyp": 311, "replace_node_output": 311, "new_output_nam": 311, "replace_output_of_all_nod": 311, "remove_unused_const": 311, "enable_subgraph": 311, "get_nodes_chain": 311, "start_nod": 311, "stop_nod": 311, "result_chain": 311, "chain": 311, "add_tensors_to_output": 311, "remove_tensors_from_output": 311, "match_first_par": 311, "parent_op_typ": 311, "match_par": 311, "return_indic": 311, "match_parent_path": 311, "parent_input_index": 311, "get_model_typ": [312, 429], "validate_graph_nod": 312, "validate_and_inference_input_output": 312, "input_tensor_nam": 312, "output_tensor_nam": 312, "graph_sess": 312, "graph_def_sess": 312, "frozen_pb_sess": 312, "load_saved_model": 312, "saved_model_tag": 312, "serv": [312, 516, 524], "signatur": 312, "saved_model_dir": 312, "tag": [312, 340, 486, 499, 627], "metagraphdef": 312, "keras_sess": 312, "slim_sess": 312, "checkpoint_sess": 312, "estimator_sess": 312, "saved_model_sess": 312, "renturn": 312, "workspace_path": [312, 313, 484, 499], "tensorflowsavedmodelmodel": 312, "new_tensor": [312, 313], "get_weight": [312, 313], "wight": 312, "build_saved_model": 312, "savedmodelbuild": 312, "protocol": 312, "asset": 312, "tensorflowqatmodel": 312, "frozen_graph_def": 312, "tensorflowcheckpointmodel": 312, "checkpoint": [312, 343, 596], "issu": [312, 528, 529, 532, 577, 592, 623, 627], "tensorflowmodel": [312, 407, 436, 438, 439, 440, 441], "pytorchbasemodel": 313, "register_forward_pre_hook": 313, "generate_forward_pre_hook": 313, "update_gradi": 313, "grad_nam": 313, "new_grad": 313, "grad": 313, "prune_weights_": 313, "get_input": 313, "get_gradi": 313, "quantized_state_dict": 313, "load_quantized_state_dict": 313, "stat_dict": 313, "export_to_jit": 313, "jit": [313, 597, 599, 604, 627], "export_to_fp32_onnx": 313, "rand": [313, 597], "stdout": 313, "export_to_bf16_onnx": 313, "export_to_int8_onnx": 313, "s8s8": 313, "pytorchfxmodel": 313, "ipexmodel": 313, "driven": [314, 533, 595, 614, 616, 627], "objective_registri": 314, "objective_custom_registri": 314, "obj_cl": 314, "eural_compressor": 314, "objective_cl": 314, "user_object": 314, "__class__": 314, "__name__": 314, "objective_cfg": 314, "usr_cfg": 314, "user_obj_cfg": 314, "easili": [314, 534, 598, 602, 614, 616, 619, 620], "sart": 314, "result_list": 314, "loop": [314, 334, 530, 531, 588, 626, 629], "durat": [314, 327, 364, 375, 378, 385, 391, 393, 394, 484, 626], "peak": [314, 616], "alloc": 314, "models": [314, 616, 622], "multiobject": [314, 509], "metric_criterion": 314, "metric_weight": 314, "obj_criterion": 314, "obj_weight": 314, "is_measur": 314, "accuracy_target": 314, "accuracy_meet": 314, "verifi": 314, "accuracy_meet_req": 314, "last_result": 314, "check_result": 314, "set_model": 314, "best_result": 314, "tune_data": 314, "acc1": 314, "obj1": 314, "obj2": 314, "acc2": 314, "posttrainingqu": 315, "calib_func": [315, 624], "pre_proccess": 315, "entir": [315, 334, 530, 619, 620], "ptq": [315, 530, 584, 591, 623, 627, 629], "autotunestrategi": 316, "polici": [316, 318, 324, 528, 533, 618, 631, 633], "sequential_travers": 316, "tune_config": [316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327], "automixedprecisiontunestrategi": 317, "rule": [317, 597, 619, 620], "tri": [317, 318, 512, 629], "basictunestrategi": [318, 327], "distributed_next_tune_cfg_lst": [318, 327], "comm": [318, 327], "One": [318, 577, 580, 584, 591, 619, 620, 621, 629], "tuning_config_list": 318, "ii": [318, 629], "bayesiantunestrategi": 319, "come": [319, 533, 629], "discret": [319, 629], "gaussian": [319, 629], "posterior": [319, 629], "black": [319, 629], "maxim": [319, 619, 620, 629], "acq_max": 319, "ac": 319, "gp": 319, "y_max": 319, "n_warmup": 319, "n_iter": 319, "acquisit": 319, "relev": 319, "limit": [319, 344, 533, 582, 619, 627], "acq": 319, "randomst": 319, "scipi": 319, "x_max": 319, "targetspac": 319, "pbound": 319, "9527": [319, 631], "params_to_arrai": 319, "array_to_param": 319, "amort": 319, "keyerror": 319, "get_target": 319, "num": [319, 344, 594], "_kei": 319, "bayesianoptim": 319, "promis": [319, 583, 619, 620], "gen_next_param": 319, "conservativetunestrategi": 320, "o0": [320, 629], "who": [320, 528, 629], "quantifi": 320, "quant_queu": 320, "prioriti": [320, 629], "fp16": [320, 329, 331, 595, 623], "exhaustivetunestrategi": 321, "perspect": [321, 629], "hawq_v2tunestrategi": 322, "msetunestrategi": 324, "mse_impact_lst": 324, "best_qmodel": 324, "current_best_model": 324, "ordered_op_name_typ": 324, "mse_v2tunestrategi": 325, "revert": [325, 333, 629], "highest": [325, 629], "lowest": [325, 619, 620, 629], "until": [325, 327, 531, 629], "randomtunestrategi": 326, "strategy_registri": [327, 629], "evaluation_result": [327, 584], "meet_acc_req": 327, "eval_r": 327, "master_worker_handl": 327, "matster": 327, "worker": [327, 623], "send": [327, 468, 511, 516, 529], "wait": [327, 511, 607, 611, 614], "receiv": [327, 340, 626], "sender": 327, "mpi": 327, "comun": 327, "slave_worker_handl": 327, "slave": 327, "tune_cfg_lst": 327, "distributed_travers": 327, "disribut": 327, "apply_all_tuning_recip": 327, "tunabl": 327, "apply_recipe_one_by_on": 327, "set_param_for_pre_quantization_algo": 327, "algo_schedul": 327, "algo": [327, 337], "set_param_for_post_quantization_algo": 327, "pre_optimized_model": 327, "initial_tuning_cfg": 327, "quant_mode_wise_item": 327, "initial_op_tuning_cfg": [327, 329, 330], "op_item_dtype_dict": 327, "show_baseline_info": 327, "displai": [327, 329, 330, 331, 344, 415, 428, 614], "initial_best_acc": 327, "set_tuning_spac": 327, "setup_resum": 327, "set_q_func": 327, "update_best_op_tuning_cfg": 327, "op_tuning_cfg": 327, "deploy_config": 327, "deploy": [327, 581, 597, 614], "tuningsampl": [329, 330], "tuningspac": [329, 330, 331], "tuning_order_lst": [329, 330], "tuningord": [329, 330], "opwisetuningsampl": [329, 330], "tuning_items_prior": [329, 330], "op_dtype_dict": [329, 330], "get_opwise_candid": [329, 330], "optypewisetuningsampl": [329, 330], "optuningconfig": [329, 330, 331, 332], "fallbacktuningsampl": [329, 330], "op_dtyp": [329, 330], "skip_first": [329, 330], "op_quant_mod": [329, 332], "get_stat": [329, 332], "from_stat": [329, 332], "tuningitem": [329, 331], "item_typ": [329, 331], "get_options_nam": [329, 331], "get_option_by_nam": [329, 331], "option_nam": [329, 331], "get_detail": [329, 331], "query_item_opt": [329, 331], "op_name_typ": [329, 331], "method_nam": [329, 331], "method_v": [329, 331], "get_default_config": [329, 331], "op_tuning_config": [329, 331], "get_item_by_path": [329, 331], "get_default_full_path": [329, 331], "op_path": [329, 331], "new_path": [329, 331], "query_quant_mode_item_by_full_path": [329, 331], "query_items_by_quant_mod": [329, 331], "get_op_default_path_by_pattern": [329, 331], "tuningsamplerregistri": 330, "modelwisetuningsampl": 330, "smoothquantsampl": 330, "hyperparamet": [330, 626, 629], "get_op_mode_by_query_ord": 331, "query_ord": 331, "pattern_to_intern": 331, "default_dtyp": 331, "pattern_to_path": 331, "quant_mode_from_pattern": 331, "internal_pattern": 331, "initial_tuning_cfg_with_quant_mod": 331, "step1": 331, "step2": 331, "step3": 331, "step4": 331, "step5": 331, "ordereddefaultdict": 333, "extract_data_typ": 333, "data_typ": 333, "sign": [333, 529, 577, 623, 626], "unsign": 333, "reverted_data_typ": 333, "signed_flag": 333, "get_adaptor_nam": 333, "compressionmanag": 334, "callbacks_list": 334, "uesd": 334, "deal": 334, "Such": 334, "distillationcallbback": 334, "train_loop": [334, 617], "path_to_sav": 334, "orchestr": [334, 533, 591], "pruningconfig": 334, "layerhistogramcollector": [335, 338], "histogram": [335, 338, 344, 388, 391, 399, 627], "layer_tensor": [335, 338], "include_lay": [335, 338], "diverg": [335, 338, 339, 582, 629], "get_func_from_config": 337, "func_dict": 337, "get_preprocess": 337, "get_postprocess": 337, "get_algorithm": 337, "create_dataset": 337, "cfg_preprocess": 337, "cfg_filter": 337, "create_dataload": 337, "dataloader_cfg": 337, "create_eval_func": 337, "postprocess_cfg": 337, "create_train_func": 337, "Their": 337, "auxiliari": 338, "msg": [338, 341], "warn": [338, 341, 577], "warin": [338, 341], "alia": [338, 341, 599, 604], "fatal": [338, 341], "probabl": 339, "expand_quantized_bin": 339, "quantized_bin": 339, "reference_bin": 339, "expand": 339, "bin": [339, 344], "safe_entropi": 339, "reference_distr_p": 339, "p_sum": 339, "candidate_distr_q": 339, "q_sum": 339, "entropi": [339, 629], "get_threshold": 339, "hist_edg": 339, "min_val": 339, "max_val": 339, "quantized_typ": 339, "num_quantized_bin": 339, "255": [339, 623], "pretrain": [340, 597, 603], "optimizedmodel": 340, "from_pretrain": 340, "repositori": [340, 420, 425, 427, 480, 486, 609, 612], "hug": [340, 533, 621], "face": [340, 528, 533, 544, 597, 601, 621, 625], "hub": [340, 492, 533, 585, 589, 605], "host": [340, 584], "cache_dir": 340, "force_download": 340, "resume_download": 340, "commit": [340, 528, 529], "git": [340, 577, 592], "artifact": 340, "co": [340, 620], "save_for_huggingface_upstream": 340, "output_dir": [340, 492, 602, 603], "get_logg": 341, "checkpoint_dir": 343, "history_cfg": 343, "best_configur": 343, "best_model_weight": 343, "pt": [343, 596, 621, 624], "snapshot": [343, 397, 518], "cfg_from_fil": 344, "yaml_fil": [344, 580, 584, 594], "lazyimport": 344, "lazi": 344, "till": [344, 629], "decorat": 344, "time_limit": 344, "get_siz": [344, 499], "fault_tolerant_fil": 344, "temporari": [344, 528], "equal_dict": 344, "d2": 344, "compare_kei": 344, "ignore_kei": 344, "ignor": [344, 580], "cpuinfo": 344, "vnni": [344, 585, 589, 591, 622, 623], "cores_per_socket": 344, "get_number_of_socket": [344, 487], "dump_elapsed_tim": [344, 534], "customized_msg": 344, "elaps": 344, "combine_histogram": 344, "old_hist": 344, "get_tensor_histogram": 344, "2048": 344, "get_all_fp32_data": 344, "get_tuning_histori": 344, "tuning_history_path": [344, 468], "str2arrai": 344, "dequantizeweight": 344, "weight_tensor": 344, "scale_info": 344, "captureoutputtofil": 344, "tmp_file_path": 344, "stream": 344, "sy": [344, 600], "stderr": 344, "captur": 344, "statist": 344, "header": [344, 445, 524, 587], "field_nam": 344, "output_handl": 344, "printer": 344, "print_stat": 344, "global_st": 344, "load_data_from_pkl": 344, "pkl": 344, "dump_data_to_loc": 344, "set_resume_from": 344, "show_memory_info": 344, "hint": 344, "project_data": [345, 451, 452, 457, 461, 464, 467, 474], "benchmark_data": 345, "workdir": [345, 461, 474, 480, 484, 488, 496], "config_filenam": [345, 461, 474], "configuration_data": [345, 452, 457, 461, 464, 467], "generate_config": [345, 452, 457, 461, 464, 467, 474], "dataloaderinterfac": [345, 461, 474], "dataloader_data": [345, 357, 386, 391, 461, 474], "parse_arg": [346, 454, 458, 463, 466, 472], "benchmark_mod": [346, 491], "set_eager_execut": [346, 454, 458, 466], "request_id": [347, 450, 468, 469, 484, 492], "asd": [347, 469], "benchmark_id": [347, 364, 365, 375], "benchmark_result_upd": 347, "benchmark_result_update_pytorch_script": 347, "neural_coder_perform": 347, "neural_coder_tim": 347, "pytorch_script_bench_optim": 347, "command_line_of_script": 347, "pytorch_script_bench_original_model": 347, "execute_real_benchmark": 347, "project_detail": [347, 380, 450, 469], "benchmark_detail": 347, "benchmark_model": [348, 420, 480], "execute_benchmark": [348, 420, 480], "benchmarkconfiggener": 349, "configgener": [349, 350, 351, 353, 354, 355, 356], "generate_evaluation_config": [349, 351, 353, 355, 356], "generate_accuracy_config": 349, "generate_performance_config": 349, "workload_directori": 350, "configuration_path": 350, "jsonseri": [350, 404, 405, 410, 412, 413, 416, 426, 435, 461, 467, 487, 489, 497, 500, 501, 502, 503, 505, 506, 507, 508, 509], "get_predefined_config_path": [350, 499], "predefin": [350, 386, 390, 391, 499], "generate_model_config": 350, "generate_dataloader_config": 350, "graphoptimizationconfiggener": 351, "generate_graph_optimization_config": 351, "benchmark_config_gener": [352, 420, 480], "graph_optimization_config_gener": [352, 420, 480], "mixed_precision_config_gener": [352, 420, 480], "profiling_config_gener": [352, 420, 480], "pruning_config_gener": [352, 420, 480], "quantization_config_gener": [352, 420, 480], "mixedprecisionconfiggener": 353, "generate_mixed_precision_config": 353, "profilingconfiggener": 354, "pruningconfiggener": 355, "generate_pruning_config": 355, "quantizationconfiggener": 356, "generate_tuning_config": 356, "generate_quantization_config": 356, "configurationpars": 357, "input_data": [357, 362, 579], "parse_evaluation_data": 357, "evaluation_data": 357, "parse_transform": 357, "transforms_data": [357, 386, 391], "parse_dataload": 357, "parse_metr": 357, "metric_data": 357, "get_param_typ": 357, "param_group": 357, "parse_valu": 357, "required_typ": 357, "parse_list_valu": 357, "parse_multidim_list": 357, "dimension": 357, "normalize_string_list": 357, "string_list": 357, "bracket": 357, "get_predefined_configur": 359, "update_config_to_machine_specif": 359, "configuration_pars": [360, 420, 480], "get_boundary_nod": [360, 420, 480], "get_configur": [360, 420, 480], "params_feed": [360, 420, 480], "pruning_config_pars": [360, 420, 480], "feeder": 361, "get_framework": [361, 434], "get_domain": 361, "get_model": [361, 434, 520], "get_dataload": 361, "get_transform": 361, "get_object": 361, "get_strategi": 361, "get_quantization_approach": 361, "get_possible_valu": 361, "pruningconfigpars": 362, "generate_tre": 362, "parse_entri": 362, "bench": [363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 450, 479, 597], "dbmanag": [363, 396], "database_loc": [363, 396], "log_level": [363, 396, 490], "initialize_databas": [363, 396], "create_sqlalchemy_engin": [363, 396], "create_al": [363, 396], "tabl": [363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 386, 387, 396], "project_id": [364, 367, 374, 375, 378, 380, 386, 390, 391], "model_id": [364, 374, 375, 378], "dataset_id": [364, 367, 375, 378, 386, 390, 391], "warmup_iter": 364, "number_of_inst": 364, "execution_command": [364, 375, 378], "benchark": 364, "delete_benchmark": [364, 385, 391], "benchmark_nam": 364, "update_statu": [364, 375, 378], "execution_statu": [364, 375, 378], "executionstatu": [364, 375, 378, 385, 391, 393, 394, 481, 498], "update_dur": [364, 375, 378], "update_execution_command": [364, 375, 378, 385, 391, 393, 394], "update_log_path": [364, 375, 378, 391, 394], "update_config_path": [364, 375], "update_dataset": [364, 375, 378], "update_batch_s": [364, 375], "update_mod": 364, "update_cores_per_inst": 364, "update_number_of_inst": 364, "clean_statu": [364, 375, 378, 385, 391, 393, 394, 498], "status_to_clean": [364, 375, 378, 385, 391, 393, 394, 498], "build_info": [364, 365, 367, 374, 375, 378, 379, 381, 384], "benchmark_result": [364, 372, 396, 420], "benchmarkresult": [364, 365], "update_accuraci": 365, "update_perform": 365, "list_by_framework": [366, 373, 382], "framework_id": [366, 373, 374, 382, 398], "query_to_list": [366, 373, 382], "dataloaders_queri": 366, "dataloader_id": 366, "fill_dictionari": [366, 368, 369, 371, 373, 376, 377, 382], "dataset_nam": [367, 386, 391], "template_path": 367, "delete_dataset": [367, 386, 391], "update_template_path": 367, "get_domain_id": 368, "domain_nam": 368, "domainflavour": [369, 481], "db": [369, 376, 377, 397, 398], "get_domain_flavour_id": 369, "domain_flavour_nam": 369, "flavour": [369, 389, 391, 449, 481], "get_framework_id": 371, "framework_nam": [371, 447, 487], "domain_flavour": [372, 396, 420, 426, 499], "optimization_typ": [372, 375, 396, 420], "profiling_result": [372, 378, 396, 420], "pruning_detail": [372, 375, 396, 420], "tuning_detail": [372, 375, 396, 420], "tuning_histori": [372, 375, 391, 393, 396, 420, 455, 480], "metrics_queri": 373, "precision_id": [374, 375, 376, 377], "domain_id": [374, 382], "domain_flavour_id": 374, "supports_profil": [374, 428, 436], "supports_graph": [374, 428], "supports_prun": [374, 428, 440], "delete_model": [374, 391, 392], "optimization_type_id": 375, "sampling_s": [375, 500, 631], "tuning_details_id": [375, 383], "pruning_details_id": [375, 381], "diagnosis_config": 375, "delete_optim": [375, 391, 393], "optimization_id": [375, 376, 391, 393, 450], "optimization_nam": [375, 376, 390, 391], "update_optimized_model": [375, 391, 393], "optimized_model_id": 375, "update_sampling_s": 375, "update_precis": 375, "update_tuning_detail": 375, "update_pruning_detail": 375, "pin_accuracy_benchmark": [375, 391, 393], "pin": [375, 391, 393, 607, 611], "pin_performance_benchmark": [375, 391, 393], "get_optimization_by_project_and_model": 375, "unpin_benchmark": 375, "db_connect": 375, "unpin": 375, "optimizationtyp": [375, 376, 481], "tuningdetail": [375, 383, 467], "tuninghistori": [375, 384, 468], "pruningdetail": [375, 381], "optimized_model": 375, "get_pinned_benchmark": 375, "list_for_precis": 376, "precision_nam": [376, 377], "get_optimization_type_for_precis": 376, "get_optimization_type_id": 376, "get_optimization_type_by_nam": 376, "get_optimization_type_by_id": 376, "get_precision_id": 377, "get_precision_by_nam": 377, "get_precision_by_id": 377, "num_thread": 378, "delete_profil": [378, 391, 394], "profiling_id": [378, 379, 391, 394, 469], "profiling_nam": 378, "update_num_thread": 378, "profilingresult": [378, 379], "total_execution_tim": 379, "accelerator_execution_tim": 379, "cpu_execution_tim": 379, "op_run": 379, "op_defin": 379, "get_result": 379, "bulk_add": 379, "params_interfac": [379, 385, 386, 388, 390, 391, 392, 393, 394, 396, 420, 480, 518], "profilingresultaddparamsinterfac": [379, 391, 394, 397], "bulk": [379, 391, 394], "delete_result": 379, "create_project": [380, 390, 391, 395], "delete_project": [380, 391, 395], "project_nam": [380, 386, 391], "get_model_by_nam": 380, "list_project": [380, 391, 395], "update_not": 380, "pruning_details_data": 381, "delete_pruning_detail": 381, "list_by_domain": 382, "transforms_queri": 382, "accuracy_criterion_typ": 383, "accuracy_criterion_threshold": 383, "exit_polici": [383, 631], "tuning_details_data": 383, "delete_tuning_detail": 383, "update_tuning_histori": 383, "tuning_history_id": 383, "minimal_accuraci": 384, "baseline_accuraci": 384, "baseline_perform": 384, "last_tune_accuraci": 384, "last_tune_perform": 384, "best_tune_accuraci": 384, "best_tune_perform": 384, "benchmarkapiinterfac": [385, 391], "get_benchmark_detail": [385, 391], "list_benchmark": [385, 391], "update_benchmark_accuraci": [385, 391], "update_benchmark_perform": [385, 391], "update_benchmark_statu": [385, 391], "update_benchmark_dur": [385, 391], "update_path": [385, 391, 393], "add_benchmark": [385, 391], "add_result": [385, 391, 394], "edit_benchmark": [385, 391], "edit": [385, 391, 393, 394, 397, 528], "parse_benchmark_data": [385, 391], "benchmarkaddparamsinterfac": [385, 391, 397], "parse_benchmark_edit_data": [385, 391], "benchmarkeditparamsinterfac": [385, 391, 397], "before_delete_benchmark_entri": 385, "sqlite3": 385, "db_model": [385, 396, 420, 480], "datasetapiinterfac": [386, 391], "get_dataset_detail": [386, 391], "list_dataset": [386, 391], "add_dataset": [386, 391], "set_template_path": [386, 391], "parsed_dataset_data": [386, 391], "datasetaddparamsinterfac": [386, 391, 397], "check_if_custom_metric_or_dataload": [386, 391], "dataset_data": [386, 391, 451, 452, 457, 461, 464, 467, 501], "generate_custom_templ": [386, 391], "dataloader_path": [386, 391], "generate_templ": [386, 391], "template_typ": [386, 391], "parse_dataset_data": [386, 391], "get_predefined_dataset": [386, 391], "prepare_predefined_dataload": [386, 391], "prepare_predefined_transform": [386, 391], "set_database_vers": [386, 387], "version_num": [386, 387], "alembic_vers": [386, 387], "initialize_associ": [386, 387], "initialize_precision_optimization_types_associ": [386, 387], "search_in_list_of_dict_for_unique_valu": [386, 387], "list_of_dict": [386, 387], "search_in_list_of_dict": [386, 387], "diagnosisapiinterfac": [388, 391], "get_op_list": [388, 391, 399], "get_op_detail": [388, 391, 399], "generate_optim": [388, 391], "model_wise_param": [388, 391], "parse_optimization_data": [388, 391, 393], "diagnosisoptimizationparamsinterfac": [388, 391, 397], "parse_op_wise_config": [388, 391], "op_wise_param": [388, 391], "parse_wise_paramet": [388, 391], "params_per_typ": [388, 391], "set_op_wise_pattern_precis": [388, 391], "parse_model_wise_config": [388, 391], "dictionariesapiinterfac": [389, 391], "dictonari": [389, 391], "list_domain": [389, 391], "list_domain_flavour": [389, 391], "list_optimization_typ": [389, 391], "list_optimization_types_for_precis": [389, 391], "list_precis": [389, 391], "list_dataload": [389, 391], "list_dataloaders_by_framework": [389, 391], "list_transform": [389, 391], "list_transforms_by_framework": [389, 391], "list_transforms_by_domain": [389, 391], "list_metr": [389, 391], "list_metrics_by_framework": [389, 391], "examplesapiinterfac": [390, 391], "get_optimization_data": [390, 391], "optimizationaddparamsinterfac": [390, 391, 393, 397], "benchmark_api_interfac": [391, 396, 420], "dataset_api_interfac": [391, 396, 420], "diagnosis_api_interfac": [391, 396, 420], "dictionaries_api_interfac": [391, 396, 420], "examples_api_interfac": [391, 396, 420], "model_api_interfac": [391, 396, 420], "optimization_api_interfac": [391, 396, 420], "profiling_api_interfac": [391, 396, 420], "project_api_interfac": [391, 396, 420], "modelapiinterfac": [391, 392], "add_model": [391, 392, 395], "get_model_detail": [391, 392], "list_model": [391, 392, 420, 446, 480], "parse_model_data": [391, 392], "modeladdparamsinterfac": [391, 392, 397], "optimizationapiinterfac": [391, 393], "get_optimization_detail": [391, 393], "list_optim": [391, 393], "update_optimization_statu": [391, 393], "update_optimization_dur": [391, 393], "add_optim": [391, 393], "add_quantization_optim": [391, 393], "optimization_data": [391, 393, 451, 452, 457, 461, 464, 467], "add_pruning_optim": [391, 393], "add_standard_optim": [391, 393], "edit_optim": [391, 393], "get_pruning_detail": [391, 393], "gat": [391, 393], "edit_tuning_detail": [391, 393], "parsed_optimization_data": [391, 393], "optimizationeditparamsinterfac": [391, 393, 397], "edit_pruning_detail": [391, 393], "pruning_data": [391, 393], "add_tuning_histori": [391, 393], "parse_tuning_histori": [391, 393], "tuninghistoryinterfac": [391, 393, 397, 518], "parse_optimization_edit_data": [391, 393], "load_pruning_details_config": [391, 393, 499], "profilingapiinterfac": [391, 394], "get_profiling_detail": [391, 394], "list_profil": [391, 394], "update_profiling_statu": [391, 394], "update_profiling_dur": [391, 394], "add_profil": [391, 394], "edit_profil": [391, 394], "bulk_add_result": [391, 394], "parse_profiling_data": [391, 394], "profilingaddparamsinterfac": [391, 394, 397], "parse_profiling_result_data": [391, 394], "parse_profiling_edit_data": [391, 394], "profilingeditparamsinterfac": [391, 394, 397], "projectapiinterfac": [391, 395], "get_project_detail": [391, 395], "add_dummy_dataset": [391, 395], "update_project_not": [391, 395], "db_oper": [396, 420, 480], "parse_nod": 397, "tuninghistoryiteminterfac": [397, 518], "update_dataloaders_param": 398, "dataloaders_to_upd": 398, "framework_dataloaders_config": 398, "get_framework_dataloaders_config": 398, "get_framework_transforms_config": 398, "get_tensors_info": [399, 428], "load_quantization_config": 399, "calculate_ms": 399, "input_model_tensor": 399, "optimized_model_tensor": 399, "op_detail": [399, 401, 420, 480], "opdetail": [399, 404], "get_histogram_data": 399, "draw": [399, 626, 629], "diagnosisfactori": 400, "get_diagnosi": 400, "onnx_diagnosi": [401, 420, 480], "onnxrt_diagnosi": [401, 402, 420], "tensorflow_diagnosi": [401, 420, 480], "op_entri": [401, 420, 480], "onnxrtdiagnosi": 403, "onnxrtmodel": [403, 431], "serialization_typ": [404, 405, 435, 487, 489, 501, 502, 506, 507], "oppattern": 404, "pattern_data": 404, "opweight": 404, "weights_data": 404, "opactiv": 404, "op_activ": 404, "opentri": 405, "activation_min": 405, "activation_max": 405, "tensorflowdiagnosi": 407, "browser": [408, 577, 607, 611], "get_directory_entri": 408, "get_requested_path": 408, "get_non_hidden_directory_entri": 408, "create_dir_entri": 408, "direntri": 408, "create_file_entri": 408, "create_entri": 408, "is_directori": 408, "sort_entri": 408, "should_show_fil": 408, "should_show_only_model_fil": 408, "get_setting_valu": 408, "get_filter_valu": 408, "filter_requested_entri": 408, "filter_nam": 408, "is_directory_entri": 408, "is_model_or_directory_entri": 408, "shown": [408, 531, 577, 579, 582, 594, 608, 616, 617, 629], "is_dataset_or_directory_entri": 408, "brows": 409, "filesystem": [409, 499, 524], "attribute_typ": 410, "expanded_group": [411, 414], "add_edg": 413, "source_id": 413, "target_id": 413, "highlight_pattern": 413, "highlight": [413, 416, 530, 577], "get_target_nod": 413, "reader": [414, 415, 420, 480], "graphread": 414, "find_pattern_in_graph": [414, 515], "onnxrt_read": [415, 417, 420], "tensorflow_read": [415, 417, 420], "collaps": [415, 420, 480, 577], "graph_read": [415, 420, 480], "groupnod": 416, "group_nam": 416, "onnxrtread": 418, "tensorflowread": 419, "jobs_control_queu": [420, 421, 480], "frozen_pb": [420, 427, 437], "meta_graph": [420, 427, 437], "model_type_gett": [420, 427, 480], "download_config": [420, 445, 446, 480], "download_model": [420, 445, 446, 480], "optimize_model": [420, 453, 455, 456, 459, 462], "neural_coder_optim": [420, 455, 480], "tune_model": [420, 455, 465], "execute_optim": [420, 455, 480], "tensorflow_profil": [420, 471, 480], "execute_profil": [420, 471, 480], "profile_model": [420, 471, 473, 477, 480], "job": [421, 495], "_jobscontrolqueu": 422, "queu": 422, "jobsmanag": 422, "_jobsmmanag": 423, "_job": 423, "get_default_path": 425, "shape_elements_ord": [428, 431, 440, 499], "get_input_nod": [428, 438, 439, 440], "get_output_nod": [428, 438, 439, 440], "ensure_supported_path": 428, "get_model_graph": [428, 431, 439, 440, 515], "supports_path": [428, 431, 433, 436, 438, 439, 441], "guard_requirements_instal": [428, 431, 433, 440], "instal": [428, 431, 433, 440, 447, 584, 587, 589, 597, 599, 602, 605, 609, 612, 614, 615, 618, 633], "nc_model_inst": [431, 440], "filtered_input_nod": 431, "remove_number_of_samples_from_shap": 431, "pytorchscriptmodel": 433, "modelrepositori": 434, "get_framework_from_path": [434, 499], "get_supported_framework": 434, "is_model_path": 434, "trust": [435, 577], "frozenpbmodel": 436, "metagraphmodel": 439, "metagraph": 439, "savedmodelmodel": 441, "get_input_shap": 442, "fix_dynamic_shap": 442, "resourc": [445, 582, 619], "download_yaml_config": 445, "model_info": 445, "download_fil": 445, "download_path": 445, "report_progress": 445, "unpack_arch": 445, "archive_path": 445, "unpack": 445, "archiv": 445, "get_yaml_url": 445, "model_src_dir": 445, "yaml_relative_loc": 445, "get_available_model": 447, "check_vers": 447, "framework_vers": 447, "supported_vers": 447, "validate_model_list": 447, "model_list": 447, "get_framework_module_nam": 447, "get_installed_framework": 447, "mappingdirect": 449, "namesmapp": 449, "framework_map": 449, "domain_map": 449, "domain_flavour_map": 449, "precision_map": 449, "map_nam": 449, "parameter_typ": 449, "execute_optimization_pytorch_script": 450, "execute_optimization_regular": 450, "parse_model_data_to_bench_nam": 450, "parse_log": 450, "optimization_detail": 450, "check_if_collect_tuning_histori": 450, "optimizationfactori": 451, "get_optim": 451, "optimization_script": [452, 457, 461, 464, 467], "optimize_graph": [454, 458], "output_graph": [454, 458, 463, 466], "optimize_graph_config": [454, 458], "optimize_pt_script": 460, "output_model_nam": 461, "output_model_dir": 461, "optimizationinterfac": 461, "optimization_workdir": 468, "watcher": 468, "process_succeed": 468, "signal": [468, 499], "was_history_file_chang": 468, "history_file_modification_tim": 468, "modif": [468, 534, 579, 588, 602], "send_history_snapshot": 468, "execute_real_profil": 469, "profiling_detail": 469, "profilerfactori": [470, 475], "get_profil": [470, 475], "profiling_data": [470, 474, 475, 477, 497], "load_profiling_detail": 472, "json_path": 472, "config_path": 474, "initialize_graph": 477, "tf_modul": 477, "create_tf_config": 477, "num_warmup": 477, "convert_nodes_to_list": 477, "build_dataload": 477, "delete_assign": 478, "wsgi": 479, "prepare_environ": 479, "app": [480, 514], "history_snapshot_pars": [480, 514, 519], "request_data_processor": [480, 514, 519], "response_gener": [480, 514, 519, 520, 522, 525], "status": [481, 493, 498], "ensure_workdir_exists_and_writ": 482, "clean_workloads_wip_statu": 482, "wip": [482, 632], "workloads_list": 482, "migrate_databas": 482, "latest": [482, 492, 592, 621, 625], "alemb": [482, 587, 592], "notfoundexcept": [483, 512, 513], "accessdeniedexcept": 483, "deni": 483, "clienterrorexcept": 483, "internalexcept": 483, "subject": [484, 511, 593], "send_respons": 484, "log_nam": 484, "additional_log_nam": [484, 492], "shell": [484, 492, 627], "process_dur": 484, "cwd": [484, 492], "universal_newlin": [484, 492], "startupinfo": [484, 492], "creationflag": [484, 492], "ignore_exit_cod": [484, 492], "pid": [484, 492], "env_arg": 484, "ncprocess": [484, 493], "refresh_workdir": 484, "is_multi_command": 484, "expir": 485, "expiringdictitem": 485, "expires_at": 485, "is_expir": 485, "expiringdict": 485, "initial_valu": 485, "ttl": 485, "120": 485, "userdict": 485, "githubinfo": 486, "releas": [486, 499, 533, 592, 603, 605, 607, 611, 613, 633], "hw": 487, "hwinfo": 487, "get_distribut": 487, "distibut": 487, "get_bios_vers": 487, "bio": [487, 618], "is_turbo_boost_en": 487, "turbo": [487, 618], "boost": [487, 595, 598, 614, 621], "get_kernel_vers": 487, "get_framework_info": 487, "get_framework_dependency_info": 487, "subdepend": 487, "serializ": 489, "serialize_item": 489, "datetim": 489, "throw": 489, "typeerror": 489, "2016": 489, "84913": 489, "04": [489, 592, 618, 632], "08t11": 489, "084913": 489, "change_log_level": 490, "optimizationpars": 491, "performancepars": 491, "update_parti": 491, "partial": [491, 623], "parsed_result": 491, "summarize_parti": 491, "summarize_valu": 491, "accuracypars": 491, "benchmarkparserfactori": 491, "get_pars": 491, "profilingpars": 491, "unify_tim": 491, "string_valu": 491, "micro": 491, "125": [491, 632], "6m": 491, "microsecond": 491, "docker": 492, "aibt_tensorflow": 492, "cento": [492, 592], "7_3_mkldnn_tensorflow": 492, "111224": 492, "pull_imag": 492, "0c750a01": 492, "90e0": 492, "4aa8": 492, "99fe": 492, "a194d55a2046": 492, "time_start": 492, "2018": 492, "17t14": 492, "47": [492, 632], "352502": 492, "time_stop": 492, "25": [492, 632], "110410": 492, "info_path": 492, "runtim": [492, 533, 534, 535, 579, 585, 588, 591, 595, 599, 604, 605, 622], "tail": 492, "is_ok": [492, 493], "popen": 492, "remove_log": 492, "properli": 493, "rtype": 493, "return_code_al": 493, "remove_successful_log": 493, "success": [493, 511, 592], "get_status_update_funct": 495, "job_typ": 495, "sent": 497, "throughput": 497, "acc_input_model": 497, "acc_optimized_model": 497, "size_input_model": 497, "size_optimized_model": 497, "path_optimized_model": 497, "optimization_tim": 497, "insert_data": 497, "calculate_throughput": 497, "readi": 497, "ensure_working_path_exist": 498, "clean_log": 498, "workdir_path": 498, "is_hidden": 499, "get_dataset_path": 499, "get_file_extens": 499, "lead": [499, 582, 595, 619, 620], "is_dataset_fil": 499, "normalize_domain": 499, "underscor": 499, "normalize_framework": 499, "normalize_str": 499, "string_to_norm": 499, "get_model_zoo_config_path": 499, "model_dict": 499, "get_model_zoo_model_path": 499, "check_modul": 499, "get_module_vers": 499, "mb": 499, "add_unit": 499, "load_model_config": 499, "load_dataloader_config": 499, "load_transforms_config": 499, "load_transforms_filter_config": 499, "meaning": [499, 617], "load_precisions_config": 499, "get_default_pruning_config_path": 499, "load_model_wise_param": 499, "load_metrics_config": 499, "get_metrics_dict": 499, "load_help_nc_param": 499, "replace_with_valu": 499, "file_path": 499, "verify_file_path": 499, "determine_ip": 499, "ip": 499, "is_development_env": 499, "nc_mode": 499, "filter_transform": 499, "parse_bool_valu": 499, "release_tag": 499, "get_shape_from_transform": 499, "get_height_width_from_s": 499, "parse_to_string_list": 499, "parse_to_float_list": 499, "export_to_csv": 499, "parse_vers": 499, "string_vers": 499, "remove_dataload": 500, "datalad": 500, "remove_accuracy_metr": 500, "set_evaluation_dataload": 500, "udpat": 500, "set_evaluation_dataset_path": 500, "get_performance_config": 500, "set_performance_cores_per_inst": 500, "get_performance_cores_per_inst": 500, "set_performance_num_of_inst": 500, "get_performance_num_of_inst": 500, "set_accuracy_and_performance_batch_s": 500, "set_quantization_dataload": 500, "set_quantization_dataset_path": 500, "set_quantization_batch_s": 500, "set_accuracy_go": 500, "accuracy_go": 500, "set_accuracy_metr": 500, "set_transform": 500, "process_transform": 500, "set_quantization_approach": 500, "set_input": 500, "set_output": 500, "set_quantization_sampling_s": 500, "set_performance_warmup": 500, "set_performance_iter": 500, "set_optimization_precis": 500, "yaml_path": 500, "is_dummi": 501, "labelbal": [501, 579, 580], "set_transforms_from_list": 501, "transforms_list": 501, "set_dataset": 501, "postprocessschema": 502, "get_label_shift_valu": 502, "set_accuracy_postprocess_transform": 502, "set_precis": [503, 505], "sgdoptim": 507, "adamwoptim": 507, "adamoptim": 507, "crossentropylosscriterion": 507, "sparsecategoricalcrossentropycriterion": 507, "knowledgedistillationlosscriterion": 507, "set_postprocess_transform": 507, "weightcompressionapproach": 507, "initialize_prun": 507, "pruner_dict_list": 507, "serialize_prun": 507, "parse_dict_value_to_float": 507, "parse_dict_value_to_int": 507, "wiseconfigdetail": 508, "wiseconfig": 508, "acccriterion": 509, "exitpolici": 509, "set_timeout": 509, "set_max_tri": 509, "trial": [509, 629], "set_performance_onli": 509, "float_represent": 510, "dumper": 510, "pruner_represent": 510, "outsid": 511, "create_simple_respons": 511, "gui": [511, 512, 516, 533, 577, 591, 592], "messagequeu": 511, "queue": [511, 516], "post_failur": 511, "failur": [511, 530], "post_success": 511, "post_error": 511, "global_config_directori": 512, "set_up": 512, "determine_values_from_environ": 512, "get_command_line_arg": 512, "determine_server_port": 512, "max_ports_tri": 512, "port_default": 512, "determine_gui_port": 512, "client": [512, 577], "server_port": 512, "unless": [512, 588], "is_port_taken": 512, "determine_log_level": 512, "determine_url_prefix": 512, "get_url": 512, "dump_token_to_fil": 512, "servicenotfoundexcept": 513, "unknown": 513, "connector": 515, "routingdefinit": 515, "rout": 515, "realtimeroutingdefinit": 515, "realtim": 515, "deferredroutingdefinit": 515, "deferredsubprocessroutingdefinit": 515, "spawn": 515, "get_system_info": 515, "endpoint": 516, "run_serv": 516, "webserv": 516, "get_tls_arg": 516, "tl": [516, 577], "block_ifram": 516, "werkzeug": [516, 524], "ifram": 516, "csp": 516, "block_snif": 516, "mime": 516, "snif": 516, "require_api_token": 516, "author": [516, 593], "j": [516, 529, 533, 632], "handle_api_cal": 516, "subpath": 516, "allow_api_cal": 516, "page_not_found": 516, "disable_cach": 516, "build_paramet": 516, "flask": [516, 577], "web_socket_publish": 516, "web_socket": 516, "flask_socketio": 516, "socketio": [516, 577], "benchmarkservic": 517, "workloadservic": [517, 521, 522, 525], "historysnapshotpars": 518, "history_snapshot": 518, "provide_perform": 518, "parse_history_snapshot": 518, "parse_history_item": 518, "history_item": 518, "extract_accuraci": 518, "extract_perform": 518, "modelservic": 520, "optimizationservic": 521, "profilingservic": 522, "generate_csv": 522, "processor": [523, 533, 595, 618, 621, 623, 624, 632], "requestdataprocessor": 523, "get_string_valu": 523, "responsegener": 524, "serve_from_filesystem": 524, "mimetyp": 524, "as_attach": 524, "add_refresh": 524, "refresh_tim": 524, "refresh": [524, 607, 611], "from_except": 524, "get_status_code_for_except": 524, "get_code_templ": 525, "get_output": 525, "welcom": [527, 528, 529, 533, 633], "interest": [528, 533, 627], "foster": 528, "particip": 528, "harass": 528, "everyon": 528, "ethnic": 528, "characterist": 528, "gender": 528, "educ": 528, "socio": 528, "econom": 528, "appear": [528, 577, 608, 614], "race": 528, "religion": 528, "sexual": 528, "orient": 528, "contribut": [528, 533], "inclus": 528, "Being": 528, "respect": [528, 588, 619, 620, 631], "viewpoint": 528, "gracefulli": 528, "critic": 528, "focus": [528, 534], "empathi": 528, "toward": [528, 582], "unaccept": 528, "imageri": 528, "unwelcom": 528, "troll": 528, "insult": 528, "derogatori": 528, "comment": [528, 580, 594, 628], "polit": 528, "attack": 528, "publish": [528, 593, 595, 615], "electron": 528, "permiss": 528, "inappropri": 528, "profession": 528, "clarifi": 528, "appropri": 528, "fair": 528, "action": [528, 609, 612], "reject": 528, "wiki": 528, "ban": 528, "temporarili": 528, "perman": 528, "deem": 528, "threaten": 528, "offens": 528, "harm": 528, "mail": 528, "social": [528, 533, 621], "media": [528, 533, 621], "appoint": 528, "event": [528, 627], "abus": 528, "report": [528, 529, 577, 626], "contact": [528, 625, 626], "complaint": 528, "review": [528, 529], "investig": 528, "circumst": [528, 622], "oblig": 528, "confidenti": [528, 577], "regard": [528, 624], "incid": 528, "good": [528, 623, 629], "faith": 528, "repercuss": 528, "leadership": 528, "faq": [528, 533], "page": [528, 529, 533], "view": [529, 533, 577, 585, 605, 614, 625], "pylint": 529, "flake8": 529, "autopep8": 529, "cover": [529, 590, 621], "adopt": [529, 597], "certif": [529, 577], "agre": 529, "bug": 529, "jira": 529, "ticket": 529, "potenti": [529, 531], "risk": 529, "pr": [529, 594, 609, 612, 625], "reproduc": 529, "submit": [529, 621], "intend": 529, "collabor": [529, 599, 605], "adher": 529, "toolkit": [530, 533, 592, 597, 605, 621], "tracer": 530, "resolv": [530, 532], "floatfunct": 530, "cat": [530, 600], "10004": [530, 531, 534, 579, 582, 583, 586, 588, 591, 595, 617, 622, 631], "neural_compressor": [530, 531, 533, 554, 578, 579, 580, 582, 583, 584, 586, 589, 590, 594, 595, 596, 616, 617, 619, 622, 623, 624, 625, 626, 628, 629, 631], "conduct": [530, 602, 614], "imper": 530, "therefor": [530, 620, 623, 625], "lot": 530, "might": [530, 577, 629], "successfulli": [530, 584, 621], "proxi": 530, "tutori": [530, 605, 621], "prototyp": 530, "html": [530, 609, 612], "untrac": 530, "ssd": [530, 632], "resnet34": [530, 632], "r34": 530, "bboxes_labels_scor": 530, "prob": 530, "max_output": 530, "zip": 530, "dbox": 530, "dlabel": 530, "dscore": 530, "decode_singl": 530, "autom": [531, 597, 614, 615], "artifici": 531, "ann": 531, "par": 531, "outperform": 531, "4x": [531, 623], "figur": [531, 607, 608, 611, 619], "inner": 531, "evolutionari": 531, "cycl": 531, "conclud": 531, "simplest": [531, 600], "launcher": [531, 533, 582, 583, 605, 619], "agent": 531, "ofa_mbv3_d234_e346_k357_w1": 531, "250": 531, "results_csv_path": 531, "search_result": 531, "aim": [531, 533, 597, 620, 629], "wmt": 531, "en": 531, "de": 531, "guidelin": [532, 533], "mainstream": 533, "showcas": 533, "broad": [533, 591, 603], "wide": [533, 585, 595, 620, 623, 632], "xeon": [533, 592, 593, 595, 618, 621, 623, 624, 632], "scalabl": [533, 592, 595, 618, 621, 623, 624, 632], "flex": [533, 592], "amd": [533, 591, 592, 632], "arm": [533, 591, 592, 632], "nvidia": [533, 591, 592, 619, 623, 632], "stabl": [533, 577, 592, 621], "diffus": [533, 621, 632], "gpt": [533, 632], "vision": [533, 589, 601], "coder": [533, 591, 598, 599, 602, 605, 608, 621], "cloud": [533, 621], "marketplac": [533, 615, 621], "amazon": [533, 597, 605], "azur": [533, 621], "softwar": [533, 593, 595, 618, 621, 625], "alibaba": [533, 604, 611, 612, 621], "tencent": [533, 621], "taco": 533, "ai": [533, 597, 621, 624], "ecosystem": [533, 621], "lightn": [533, 604], "visit": [533, 632], "websit": [533, 592], "pip": [533, 577, 584, 587, 589, 592, 599, 602, 607, 609, 611, 612, 625], "wget": [533, 589], "googleapi": [533, 589], "v1_6": [533, 589], "mobilenet_v1_1": [533, 589], "0_224_frozen": [533, 589], "quick": [533, 588, 631], "overview": 533, "workflow": [533, 582, 592, 595, 609, 612, 627], "notebook": 533, "oneapi": [533, 592, 621], "analyt": [533, 592, 621], "jupyterlab": [533, 597, 603, 605, 607, 611], "visual": [533, 605, 614, 626, 627, 629], "studio": [533, 605, 614], "topic": 533, "soon": 533, "busi": [533, 621], "jan": [533, 621], "2023": [533, 632], "blog": [533, 621], "enhanc": [533, 597, 621, 624], "4th": [533, 621], "gen": [533, 595, 621, 624], "neurip": [533, 621], "fast": [533, 621], "oct": [533, 621], "quala": [533, 621], "minilm": [533, 621, 632], "legal": [533, 633], "secur": [533, 618, 621, 633], "idea": [533, 620, 629], "feel": 533, "bridg": [534, 591], "vanilla": [534, 591], "abcadaptor": 534, "__init__": [534, 579, 580, 594, 629], "he": 534, "besid": [534, 582], "past": 534, "effect": [534, 619, 620], "mainten": 534, "difficult": 534, "abil": [534, 580, 588], "fragment": 534, "semant": [534, 588], "microsoft": 534, "mla": [534, 623], "explor": 534, "nightli": [577, 592], "pypi": [577, 592, 609, 612], "conda": [577, 587, 592, 600, 608, 625], "forg": [577, 587, 592], "clone": [577, 592, 607, 611], "cd": [577, 584, 592], "setup": [577, 588, 592, 609, 612, 619], "ui": 577, "5000": 577, "338174d13706855fc6924cec7b3a8ae8": 577, "listen": 577, "firewal": 577, "8080": 577, "tf_enable_onednn_opt": [577, 592], "cert": 577, "path_to_cert": 577, "crt": 577, "path_to_private_kei": 577, "encrypt": 577, "insecur": 577, "expos": 577, "forfeit": 577, "threat": 577, "button": [577, 591, 608, 614], "click": [577, 589, 591, 597, 598, 605, 608, 614, 621, 627], "pop": [577, 614], "recognit": [577, 584, 627], "few": [577, 621, 629], "finish": [577, 608], "synthet": 577, "plu": 577, "icon": 577, "section": [577, 582, 583, 614, 619, 622, 631], "unfold": 577, "On": [577, 623], "panel": [577, 609, 612, 614], "navig": 577, "trash": 577, "visibl": 577, "cursor": 577, "prompt": [577, 584], "confirm": 577, "pencil": 577, "light": [577, 583], "blue": 577, "color": 577, "row": [577, 619], "arrow": 577, "checkbox": 577, "chart": [577, 623, 626, 627], "offer": [577, 580], "conveni": 577, "variat": 577, "yellow": 577, "remind": 577, "autograd": 577, "numba": 577, "pictur": 577, "ilsvrc": 577, "hour": [577, 629], "dialog": 577, "cryptographi": 577, "linux": [578, 608, 614], "x86_64": 578, "aarch64": 578, "often": [579, 582, 617, 619, 620], "encount": 579, "lack": 579, "faster": [579, 581, 621, 632], "hard": 579, "treat": 579, "manner": [579, 582, 596], "post_training_static_qu": [579, 580, 622, 629], "300": [579, 580], "customis": [579, 580], "ensp": [580, 594, 628], "imagerecord": [580, 584, 631], "image_nam": 580, "cocorecord": 580, "gt": [580, 586, 628], "int64": 580, "style_transf": 580, "content": 580, "tfrecorddataset": 580, "helloworld": [580, 628], "aid": 581, "increas": [581, 591, 597, 614, 629], "infrastructur": 581, "deploi": [582, 629], "power": [582, 608, 618], "mobil": [582, 632], "softmax": 582, "l": [582, 627, 629], "kd": 582, "kullback": 582, "leibler": 582, "patient": 582, "compact": [582, 600, 619, 620], "ia": 582, "attach": 582, "shallow": 582, "deepest": 582, "deeper": 582, "acceler": [582, 597, 605, 614, 619, 620, 621, 624, 629], "10006": [582, 583], "training_func_for_nc": [582, 583], "huge": [583, 620], "bit": [583, 595, 621, 623], "heavi": 583, "booster": 583, "degrad": 583, "retrain": [583, 619, 620], "incorpor": [583, 629], "novel": [583, 597, 608, 614], "horovod": 584, "builtin": 584, "program": [584, 593, 595, 597, 614], "addition": [584, 629], "enable_eager_execut": 584, "yaml_file_path": 584, "evaluation_time_cost": 584, "partit": 584, "distributedsampl": 584, "train_sampl": 584, "train_dataset": 584, "num_replica": 584, "train_load": 584, "train_kwarg": 584, "adadelta": 584, "distributedoptim": 584, "named_paramet": 584, "broadcast_paramet": 584, "root_rank": 584, "broadcast_optimizer_st": 584, "set_epoch": 584, "batch_idx": 584, "zero_grad": [584, 619], "nll_loss": 584, "log_interv": 584, "0f": 584, "tloss": 584, "6f": 584, "dry_run": 584, "test_func": 584, "num_of_process": 584, "002": 584, "ssh": [584, 614], "readm": 584, "exactli": [584, 598], "resnet50_v1": 584, "topk": [584, 594], "resizecropimagenet": [584, 628], "realiz": [584, 594, 616, 624, 626], "tow": 584, "situat": 584, "node1": 584, "node2": 584, "TO": [584, 599], "your_node1_nam": 584, "your_node2_nam": 584, "resnet50_fp32_pretrained_model": 584, "nc_resnet50_v1": 584, "resnet": [584, 589, 632], "varieti": [585, 622, 629], "demonstr": [585, 597, 619, 620, 627], "10k": [585, 589], "speedup": [585, 589, 591, 623], "2x": [585, 589, 591, 618], "exchang": 586, "hope": 586, "briefli": [586, 619], "matur": 586, "major": [586, 590, 623], "reus": 586, "inc_model": [586, 596], "fp32_onnx_config": 586, "randn": 586, "int8_onnx_config": 586, "matmulintegertofloat": 586, "matmulinteg": 586, "incompat": 587, "88": [587, 626, 632], "80": [587, 627, 632], "pyobject": 587, "reinstal": 587, "importerror": 587, "libgl": 587, "apt": [587, 592, 600, 608], "yum": [587, 592], "opencv": [587, 608], "pend": 587, "27": [587, 592, 632], "friendli": [588, 631], "dive": 588, "let": [588, 602, 622, 631], "syntax": 588, "up1": 588, "up2": 588, "valid_mixed_precis": 588, "per_tensor": [588, 631], "grappler_optim": 588, "constfold": 588, "arithmet": 588, "debug_stripp": 588, "jupyt": [589, 605, 607, 608, 611], "lab": [589, 607, 608, 609, 611, 612], "concept": [590, 626], "custom_metr": 590, "explicitli": 590, "refin": [590, 620], "These": 591, "420": 591, "geomean": 591, "snippet": 591, "upload": [591, 609, 612], "dispatch": 591, "qintegerop": [591, 623], "plan": 591, "uninstal": [592, 614], "frequent": 592, "ask": 592, "consolid": 592, "eas": [592, 599, 621], "streamlin": 592, "scienc": 592, "anaconda": 592, "suit": [592, 615, 627], "esri": 592, "formerli": 592, "skylak": 592, "cascad": 592, "lake": [592, 595, 621], "cooper": [592, 595, 621], "ic": [592, 619, 621], "sapphir": 592, "rapid": 592, "hbm": 592, "arctic": 592, "sound": 592, "pont": 592, "vecchio": 592, "ubuntu": [592, 618], "fortensorflow": 592, "forpytorch": 592, "onednn": [592, 623], "apach": 593, "copyright": 593, "accompani": 593, "research": 593, "wish": 593, "bibtex": 593, "misc": 593, "feng": 593, "tian": 593, "hanwen": 593, "haihao": 593, "shen": 593, "suyu": 593, "chen": 593, "titl": [593, 615], "howpublish": 593, "year": 593, "logo": [593, 618], "atom": 593, "phi": 593, "pentium": 593, "vtune": 593, "corpor": [593, 618], "subsidiari": [593, 618], "brand": [593, 618], "claim": [593, 618], "popularli": 594, "industri": [594, 621], "label_map": 594, "decis": 594, "ap": 594, "curv": 594, "turn": [594, 608], "target_boxes_num": 594, "str_label": 594, "int_label": 594, "inturn": 594, "cocomap": 594, "vocmap": 594, "categor": 594, "multiclass": 594, "multilabel": 594, "multi_metr": 594, "newmetr": 594, "reflect": [594, 618, 628], "recent": 595, "growth": [595, 620], "complex": [595, 620], "significantli": [595, 619, 620], "half": [595, 605], "sixteen": 595, "bandwidth": 595, "launch": [595, 615], "3rd": [595, 621, 623, 624], "codenam": 595, "x86": 595, "avx512": [595, 623], "vcvtne2ps2bf16": 595, "vcvtneps2bf16": 595, "vdpbf16p": 595, "onnxrt_cuda_ep": 595, "avx512_bf16": 595, "consequ": 595, "cuda": [595, 597, 599], "persist": 596, "brought": [596, 598, 605, 623], "tf2": 596, "h5": 596, "hybridblock": 596, "0000": 596, "saved_result": 596, "subsequ": [597, 614], "acquir": 597, "analysi": [597, 614, 626], "heurist": [597, 614], "great": 597, "facilit": 597, "autocast": 597, "simultan": [597, 617, 622], "my_model": 597, "no_grad": 597, "memory_format": 597, "112": [597, 632], "plugin": [597, 615], "aw": [597, 605, 621, 632], "sagemak": [597, 605], "inlin": [597, 602, 605], "neural_cod": [597, 599, 601, 602, 603, 605], "superbench": 597, "enjoi": [598, 602, 605], "reload": [598, 615], "modern": 599, "democrat": [599, 621], "programm": [599, 605, 614], "nano_bf16_channels_last": 599, "resnet18": [599, 632], "nano_bf16_ipex_channels_last": 599, "nano_bf16_ipex": 599, "nano_bf16": 599, "nano_fp32_channels_last": 599, "nano_fp32_ipex_channels_last": 599, "nano_fp32_ipex": 599, "nano_gpu_to_cpu": 599, "nano_int8": 599, "nano_jit_bf16_channels_last": 599, "nano_jit_bf16_ipex_channels_last": 599, "nano_jit_bf16_ipex": 599, "nano_jit_bf16": 599, "nano_jit_fp32_channels_last": 599, "nano_jit_fp32_ipex_channels_last": 599, "nano_jit_fp32_ipex": 599, "nano_jit_fp32": 599, "nano_onnxruntime_fp32": 599, "nano_onnxruntime_int8_qlinear": 599, "openvino": 599, "nano_openvino_fp32": 599, "nano_openvino_int8": 599, "bc": [600, 608], "conda_prefix": 600, "echo": 600, "tradit": [600, 620], "libjemalloc": 600, "libiomp5": 600, "home": 600, "lib": 600, "ld_preload": 600, "malloc_conf": 600, "oversize_threshold": 600, "background_thread": 600, "metadata_thp": 600, "dirty_decay_m": 600, "9000000000": 600, "muzzy_decay_m": 600, "kmp_affin": 600, "kmp_blocktim": 600, "dnnl_primitive_cache_capac": 600, "cpufreq": 600, "scaling_governor": 600, "powersav": 600, "sudo": 600, "tee": 600, "pytorch_jit_script": [601, 604], "pytorch_channels_last": [601, 604], "run_bench": 601, "patch": [601, 614], "patch_path": 601, "your_patch_path": 601, "sweep": 601, "sweep_object": 601, "bench_config": 601, "bench_featur": 601, "sai": 602, "run_glu": [602, 603], "requisit": 602, "task_nam": [602, 603], "do_ev": [602, 603], "run_glue_optim": 602, "opt": 602, "static_ipex": 602, "auto_qu": 603, "v4": [603, 632], "albert": [603, 632], "sst2": 603, "alexnet": [603, 632], "pytorch_amp": 604, "optimize_for_infer": 604, "pytorch_jit_trac": 604, "pytorch_jit_script_ofi": 604, "pytorch_jit_trace_ofi": 604, "torchdynamo": 604, "pytorch_torchdynamo_jit_script": 604, "pytorch_torchdynamo_jit_trac": 604, "pytorch_torchdynamo_jit_script_ofi": 604, "pytorch_torchdynamo_jit_trace_ofi": 604, "pytorch_inc_bf16": 604, "pytorch_inc_static_quant_fx": 604, "pytorch_inc_static_quant_ipex": 604, "pytorch_inc_dynamic_qu": 604, "pytorch_ipex_fp32": 604, "pytorch_ipex_bf16": 604, "pytorch_ipex_int8_static_qu": 604, "pytorch_ipex_int8_dynamic_qu": 604, "blade": 604, "disc": 604, "pytorch_aliblad": 604, "pytorch_lightning_bf16_cpu": 604, "tensorflow_amp": 604, "keras_amp": 604, "tensorflow_inc": 604, "keras_inc": 604, "onnx_inc_static_quant_qlinear": 604, "onnx_inc_static_quant_qdq": 604, "onnx_inc_dynamic_qu": 604, "optimum": [604, 605], "pytorch_inc_huggingface_optimum_stat": 604, "pytorch_inc_huggingface_optimum_dynam": 604, "intel_extension_for_transform": 604, "bigdl": [604, 605], "nano": [604, 605], "nano_": 604, "inc_auto": 604, "delight": 605, "announc": 605, "trainer": 605, "500": 605, "speed": [605, 620, 621, 623], "innov": [605, 621], "isa": 605, "xpu": 605, "delta": 605, "acc_delta": 605, "int8_acc": 605, "fp32_acc": 605, "ext": [607, 609, 611, 612, 613], "nodej": [607, 611], "jlpm": [607, 611], "yarn": [607, 611], "npm": [607, 608, 611], "lieu": [607, 611], "labextens": [607, 608, 611], "typescript": [607, 611], "watch": [607, 611], "termin": [607, 608, 611], "immedi": [607, 611], "rebuilt": [607, 611], "dev": [607, 611], "symlink": [607, 611], "blank": 608, "cell": 608, "gain": [608, 617, 621], "mkl": 608, "jemalloc": 608, "pip3": 608, "headless": 608, "pyproject": [609, 612], "toml": [609, 612], "twine": [609, 612], "whl": [609, 612], "dist": [609, 612], "sdist": [609, 612], "bdist_wheel": [609, 612], "frontend": [609, 612], "login": [609, 612, 626], "cut": [609, 612], "fork": [609, 612], "admin_github_token": [609, 612], "pypi_token": [609, 612], "npm_token": [609, 612], "secret": [609, 612], "draft": [609, 612], "changelog": [609, 612, 613], "pkg": [609, 612], "bot": [609, 612], "pick": [609, 612, 615], "feedstock": [609, 612], "hatch": 612, "notabl": 613, "vscode": [613, 615], "daili": 614, "advantag": [614, 622], "remot": 614, "market": 614, "sidebar": 614, "hover": 614, "diff": 614, "manifest": 615, "declar": 615, "palett": 615, "veri": [615, 623, 629], "registercommand": 615, "amodio": 615, "tsl": 615, "dbaeumer": 615, "eslint": 615, "press": 615, "f5": 615, "ctrl": [615, 632], "hello": 615, "world": 615, "breakpoint": 615, "consol": 615, "relaunch": 615, "toolbar": 615, "node_modul": 615, "viewlet": 615, "dropdown": 615, "startup": 615, "bundl": 615, "multi_object": 616, "arbitrari": 617, "p_conf": 617, "platinum": [618, 632], "8358": 618, "manufactur": 618, "m50cyp2sbstd": 618, "se5c620": 618, "86b": 618, "0005": 618, "2202160810": 618, "microcod": 618, "0xd000332": 618, "irq": 618, "60ghz": 618, "6chz": 618, "perf": 618, "512gb": 618, "16x32gb": 618, "ddr4": 618, "3200": 618, "mt": 618, "nic": 618, "1x": 618, "ethernet": 618, "100mb": 618, "i350": 618, "gigabit": 618, "drive": 618, "intel_ssdsckkb48": 618, "447": 618, "1g": 618, "factor": [618, 632], "publicli": 618, "degre": 618, "mark": 618, "trademark": 618, "art": [619, 620], "increasingli": [619, 620], "crucial": [619, 620], "salient": [619, 620], "nonzero": [619, 620], "irregular": [619, 620], "anywher": [619, 620], "2in4": 619, "amper": 619, "oc": 619, "kh": 619, "kw": 619, "fastform": 619, "finetun": [619, 620], "downstream": [619, 620], "formula": [619, 620], "exemplifi": 619, "complement": 619, "pruner1": 619, "layer1": 619, "layer3": 619, "rate": [619, 623], "pruner2": 619, "snip_momentum_progress": 619, "layer2": 619, "num_train_epoch": 619, "lr_schedul": 619, "mention": 619, "cv": [619, 620], "grown": 620, "unpreced": 620, "cube": 620, "discourag": 620, "penal": 620, "l2": 620, "parametr": 620, "namhoon": 620, "lee": 620, "thalaiyasingam": 620, "ajanthan": 620, "philip": 620, "torr": 620, "2019": 620, "mleffici": 621, "dec": 621, "wechat": 621, "deepen": 621, "foundat": 621, "intellig": 621, "vmware": 621, "applianc": 621, "bitnami": 621, "nov": 621, "signific": [621, 623], "sota": 621, "plug": 621, "twitter": 621, "linkedin": 621, "zone": 621, "land": 621, "gcp": 621, "pat": 621, "keynot": 621, "intelon": 621, "sep": 621, "deliv": 621, "chines": 621, "aug": 621, "purif": 621, "sacrif": 621, "jun": 621, "partner": 621, "apr": 621, "feb": 621, "joint": 621, "msft": 621, "bilibili": 621, "gestalt": 621, "ml": 621, "doubl": 621, "mlperf": [621, 632], "reconstruct": 621, "abound": 621, "lpot": [621, 625], "mar": 621, "nextplatform": 621, "cern": 621, "gan": 621, "3dgan": 621, "iml": 621, "workshop": 621, "asplo": 621, "18": [621, 632], "highli": 621, "intelcaff": 621, "aris": 622, "tell": 622, "henc": 622, "onnxrt_qoper": 622, "post_training_dynamic_qu": [622, 629], "quant_aware_train": 622, "initial_spars": [622, 631], "prune_typ": [622, 631], "basic_magnitud": [622, 631], "start_epoch": [622, 631], "end_epoch": [622, 631], "update_frequ": 622, "prune_domain": 622, "tile_pattern_1x1": 622, "graph_optimization_level": 622, "disable_al": 622, "invent": 623, "int4": 623, "cost": 623, "theoret": 623, "affin": 623, "zeropoint": 623, "asymmetr": [623, 629], "overflow": 623, "solv": [623, 625], "fbgemm": 623, "unseen": 623, "enough": 623, "peopl": 623, "emul": 623, "mimic": 623, "fact": 623, "ultim": 623, "pain": 623, "lossi": 623, "understand": [623, 627], "philosophi": 623, "val_dataset": 623, "val_dataload": 623, "ping_memori": 623, "val_load": 623, "avg": 623, "ON": 624, "postposttrainingquantconfig": 624, "bf16wrapper": 624, "retrac": 624, "site": 625, "assist": 625, "comparison": [625, 627], "sed": 625, "your_script": 625, "backbon": 626, "interact": 626, "sigopt_api_token": [626, 629], "sigopt_project_id": [626, 629], "sigopt_experiment_id": 626, "nc": [626, 629], "certain": 626, "suffici": 626, "ordinari": 626, "capac": 626, "sigopt_experiment_nam": [626, 629], "mobilenet": [626, 632], "8266": 626, "8372": 626, "2132": 626, "83": [626, 632], "7495": 626, "8299": 626, "8294": 626, "85": [626, 632], "0837": 626, "8291": 626, "4469": 626, "discov": 627, "why": 627, "valuabl": 627, "instrument": 627, "writer": 627, "_pre_eval_hook": 627, "submodul": 627, "whitelist": 627, "_recordingobserv": 627, "output_tensors_dict": 627, "current_it": 627, "_observer_forward_hook": 627, "activation_post_process": 627, "_add_observer_": 627, "named_children": 627, "leaf": 627, "add_modul": 627, "register_forward_hook": 627, "dump_tim": 627, "summarywrit": 627, "_acc": 627, "tune_": 627, "add_graph": 627, "get_observer_dict": 627, "observer_dict": 627, "is_quant": 627, "add_histogram": 627, "bind_al": 627, "logdir_spec": 627, "tune_0_acc0": 627, "tune_1": 627, "tune_1_acc0": 627, "79": [627, 632], "four": 627, "baseline_acc_0": 627, "776": 627, "tune_1_acc_0": 627, "095": 627, "runs_v3": 627, "image_recognit": 627, "run_tuning_dump_tensor": 627, "sh": 627, "inceptionv3": 627, "v0": 627, "cg": 627, "conv0": 627, "op_wis": [627, 631], "bash": 627, "run_tun": 627, "topologi": 627, "inception_v3": 627, "dataset_loc": 627, "inceptionv3_fp32_pretrained_model": 627, "nc_inceptionv3": 627, "inceptionv3_dump_tensor": 627, "poor": 627, "disappear": 627, "centercrop": 628, "randomresizedcrop": 628, "randomcrop": 628, "cropres": 628, "decodeimag": 628, "jpeg": 628, "encodejp": 628, "alignimagechannel": 628, "68": [628, 632], "116": 628, "78": [628, 632], "103": 628, "94": [628, 632], "017": 628, "bilinearimagenet": [628, 631], "totensor": 628, "topilimag": 628, "padding_mod": 628, "border": 628, "colorjitt": 628, "bright": 628, "satur": 628, "hue": 628, "jitter": 628, "tondarrai": 628, "quickli": 629, "human": 629, "post_training_auto_qu": 629, "iii": 629, "classic": 629, "primari": 629, "spent": 629, "hawq_v2_loss": 629, "model_loss": 629, "compli": 629, "focu": 629, "short": 629, "never": 629, "loglevel": 629, "endlessli": 629, "smbo": 629, "appl": 629, "surrog": 629, "divid": 629, "quantil": 629, "x1": 629, "x2": 629, "densiti": 629, "parzen": 629, "greatest": 629, "dai": 629, "abctunestrategi": 629, "overridden": 629, "mobilenet_v1": 631, "onnxrt_integ": 631, "onnxrt_qlinear": 631, "image_tensor": 631, "subsect": 631, "model_wis": 631, "conv1": 631, "hyper": 631, "40": [631, 632], "06": [631, 632], "beta_1": 631, "beta_2": 631, "sparsecategoricalcrossentropi": 631, "reduct": 631, "sum_over_batch_s": 631, "from_logit": 631, "54": [631, 632], "19": [631, 632], "90": [631, 632], "nesterov": 631, "weight_decai": 631, "overal": 631, "8380": 632, "performancethroughput": 632, "sec": 632, "86": 632, "00": 632, "170": 632, "44": 632, "93": 632, "69": 632, "82x": 632, "92": 632, "63": 632, "39": 632, "85x": 632, "61": 632, "83x": 632, "densenet": 632, "121": 632, "73": 632, "72": 632, "89": 632, "274": 632, "148": 632, "161": 632, "76": 632, "132": 632, "35": 632, "39x": 632, "169": 632, "74": 632, "38": 632, "65": 632, "36": 632, "191": 632, "118": 632, "61x": 632, "cnn": 632, "incept": 632, "37": 632, "81": 632, "55": 632, "84x": 632, "resnet101": 632, "57": 632, "21x": 632, "43": 632, "70x": 632, "26": 632, "59": 632, "51": 632, "70": 632, "14x": 632, "139": 632, "955": 632, "328": 632, "91x": 632, "97": 632, "709": 632, "282": 632, "51x": 632, "v3": 632, "71": 632, "337": 632, "160": 632, "11x": 632, "77": 632, "438": 632, "204": 632, "223": 632, "105": 632, "12x": 632, "10x": 632, "1347": 632, "439": 632, "07x": 632, "56": 632, "1192": 632, "492": 632, "42x": 632, "91": 632, "412": 632, "376": 632, "662": 632, "397": 632, "66x": 632, "299": 632, "23": 632, "154": 632, "67": 632, "93x": 632, "476": 632, "227": 632, "fashion": 632, "2734": 632, "1299": 632, "498": 632, "178": 632, "79x": 632, "46": 632, "427": 632, "173": 632, "47x": 632, "resnetv2": 632, "194": 632, "146": 632, "33x": 632, "48": 632, "237": 632, "187": 632, "27x": 632, "152": 632, "155": 632, "38x": 632, "302": 632, "215": 632, "40x": 632, "346": 632, "312": 632, "277": 632, "60x": 632, "273": 632, "31x": 632, "66": 632, "18x": 632, "82": 632, "53x": 632, "24x": 632, "vgg16": 632, "219": 632, "vgg19": 632, "193": 632, "11506": 632, "9665": 632, "19x": 632, "xception": 632, "262": 632, "137": 632, "58": 632, "barthez": 632, "143": 632, "02x": 632, "84": 632, "20x": 632, "209": 632, "08x": 632, "221": 632, "sst": 632, "stsb": 632, "218": 632, "16x": 632, "62": 632, "57x": 632, "55x": 632, "56x": 632, "53": 632, "89x": 632, "blendcnn": 632, "4885": 632, "60": 632, "3715": 632, "camembert": 632, "206": 632, "09x": 632, "deberta": 632, "366": 632, "197": 632, "399": 632, "flaubert": 632, "592": 632, "385": 632, "54x": 632, "wikitext": 632, "hubert": 632, "446": 632, "181": 632, "46x": 632, "layoutlm": 632, "longform": 632, "49": 632, "mbart": 632, "625": 632, "451": 632, "lvwerra": 632, "pegasu": 632, "samsum": 632, "peleenet": 632, "402": 632, "29x": 632, "pokemon": 632, "275": 632, "334": 632, "48x": 632, "reform": 632, "crime": 632, "punish": 632, "162": 632, "153": 632, "06x": 632, "657": 632, "327": 632, "01x": 632, "812": 632, "344": 632, "36x": 632, "360": 632, "23x": 632, "resnext101": 632, "32x8d": 632, "182": 632, "207": 632, "squeezebert": 632, "195": 632, "150": 632, "30x": 632, "75x": 632, "transfo": 632, "xl": 632, "41x": 632, "wave2vec2": 632, "22x": 632, "102": 632, "00x": 632, "115": 632, "17x": 632, "yolo": 632, "232": 632, "28x": 632, "664": 632, "329": 632, "832": 632, "338": 632, "433": 632, "164": 632, "63x": 632, "836": 632, "1396": 632, "463": 632, "90x": 632, "159": 632, "32x": 632, "968": 632, "473": 632, "05x": 632, "958": 632, "477": 632, "arcfac": 632, "126": 632, "78x": 632, "298": 632, "124": 632, "624": 632, "254": 632, "45x": 632, "caffenet": 632, "1432": 632, "540": 632, "65x": 632, "1460": 632, "357": 632, "265": 632, "35x": 632, "86x": 632, "524": 632, "duc": 632, "efficientnet": 632, "1211": 632, "758": 632, "856": 632, "762": 632, "emot": 632, "ferplu": 632, "925": 632, "694": 632, "fcn": 632, "25x": 632, "googlenet": 632, "771": 632, "571": 632, "763": 632, "579": 632, "hf": 632, "156": 632, "multilingu": 632, "99x": 632, "199": 632, "104": 632, "73x": 632, "449": 632, "74x": 632, "l12": 632, "h384": 632, "466": 632, "247": 632, "88x": 632, "l6": 632, "523": 632, "354": 632, "183": 632, "107": 632, "spanbert": 632, "208": 632, "795": 632, "600": 632, "780": 632, "591": 632, "515": 632, "15x": 632, "2370": 632, "1526": 632, "2216": 632, "1506": 632, "2078": 632, "1028": 632, "1762": 632, "76x": 632, "mobilenetv2": 632, "2615": 632, "1645": 632, "59x": 632, "2461": 632, "1674": 632, "766": 632, "431": 632, "77x": 632, "575": 632, "430": 632, "34x": 632, "747": 632, "564": 632, "594": 632, "590": 632, "643": 632, "253": 632, "shufflenet": 632, "2354": 632, "1461": 632, "1850": 632, "1368": 632, "squeezenet": 632, "2484": 632, "1912": 632, "2526": 632, "1911": 632, "710": 632, "549": 632, "622": 632, "497": 632, "652": 632, "507": 632, "573": 632, "470": 632, "527": 632, "396": 632, "68x": 632, "tini": 632, "647": 632, "514": 632, "26x": 632, "ultrafac": 632, "314": 632, "50x": 632, "304": 632, "316": 632, "315": 632, "119": 632, "zfnet": 632, "462": 632, "268": 632, "72x": 632, "465": 632, "62x": 632, "436": 632, "270": 632, "429": 632, "92x": 632, "94x": 632, "331": 632, "242": 632, "37x": 632, "98x": 632, "taskdataset": 632, "accuracyspars": 632, "ratiospars": 632, "commentsbalanc": 632, "unbalanc": 632, "classificationimagenet": 632, "76top": 632, "13top": 632, "magnitudepost": 632, "magnitudequant": 632, "answeringsquad": 632, "34f1": 632, "2x1": 632, "lassounbalanc": 632, "classificationmnli": 632, "mm": 632, "allbalanc": 632, "classificationsst": 632, "32accuraci": 632, "sensitivitybalanc": 632, "classificationqqp": 632, "classificationqnli": 632, "54accuraci": 632, "em": 632, "87f1": 632, "momentumunbalanc": 632, "momentumbalanc": 632, "90f1": 632, "59f1": 632, "23f1": 632, "classificationmrpc": 632, "52f1": 632, "26f1": 632, "61accuraci": 632, "7965": 632, "wideresnet40": 632, "9522": 632, "8178": 632, "0213": 632, "8235": 632, "027": 632, "5494": 632, "7153": 632, "5540": 632, "0046": 632, "5523": 632, "0029": 632, "vgg": 632, "7022": 632, "7415": 632, "7025": 632, "0003": 632, "6739": 632, "7399": 632, "6845": 632, "0106": 632, "7034": 632, "8382": 632, "bilstm": 632, "8314": 632, "9403": 632, "9048": 632, "0734": 632, "7323": 632, "8256": 632, "8084": 632, "8814": 632, "7442": 632, "8371": 632, "0119": 632, "0115": 632, "tinybert": 632, "8018": 632, "8044": 632, "8363": 632, "8411": 632, "8025": 632, "8074": 632, "0007": 632, "0030": 632, "8626": 632, "8213": 632, "9091": 632, "8782": 632, "8684": 632, "8259": 632, "0058": 632, "distilroberta": 632, "6057": 632, "6455": 632, "6187": 632, "0130": 632, "c6i": 632, "2xlarg": 632, "c6a": 632, "c6g": 632, "a100cuda": 632}, "objects": {"": [[0, 0, 0, "-", "644ec953a7dc_pruning_support"], [1, 0, 0, "-", "6ece06672ed3_v1_14"], [2, 0, 0, "-", "6f0d0f71d92e_v1_13"], [3, 0, 0, "-", "9e89549a08c8_v1_11"], [4, 0, 0, "-", "block_mask"], [5, 0, 0, "-", "env"], [295, 0, 0, "-", "neural_compressor"]], "6ece06672ed3_v1_14": [[1, 1, 1, "ece06672ed3_v1_14.update_dataloaders", "update_dataloaders"], [1, 1, 1, "ece06672ed3_v1_14.update_transformations", "update_transformations"]], "env": [[5, 1, 1, "", "run_migrations_offline"], [5, 1, 1, "", "run_migrations_online"]], "neural_compressor": [[295, 2, 1, "", "Benchmark"], [295, 2, 1, "", "DistillationConfig"], [295, 2, 1, "", "MixedPrecisionConfig"], [295, 2, 1, "", "PostTrainingQuantConfig"], [295, 2, 1, "", "QuantizationAwareTrainingConfig"], [295, 2, 1, "", "WeightPruningConfig"], [7, 0, 0, "-", "adaptor"], [152, 0, 0, "-", "algorithm"], [155, 0, 0, "-", "benchmark"], [159, 0, 0, "-", "compression"], [169, 0, 0, "-", "conf"], [171, 0, 0, "-", "config"], [172, 0, 0, "-", "contrib"], [197, 0, 0, "-", "data"], [247, 0, 0, "-", "experimental"], [302, 0, 0, "-", "metric"], [304, 0, 0, "-", "mix_precision"], [306, 0, 0, "-", "model"], [314, 0, 0, "-", "objective"], [315, 0, 0, "-", "quantization"], [295, 1, 1, "", "set_random_seed"], [295, 1, 1, "", "set_tensorboard"], [295, 1, 1, "", "set_workspace"], [323, 0, 0, "-", "strategy"], [334, 0, 0, "-", "training"], [338, 0, 0, "-", "utils"], [480, 0, 0, "-", "ux"], [526, 0, 0, "-", "version"]], "neural_compressor.Benchmark": [[295, 3, 1, "", "b_dataloader"], [295, 3, 1, "", "b_func"], [295, 4, 1, "", "config_instance"], [295, 4, 1, "", "generate_prefix"], [295, 3, 1, "", "model"], [295, 3, 1, "", "results"], [295, 4, 1, "", "run_instance"], [295, 4, 1, "", "summary_benchmark"]], "neural_compressor.DistillationConfig": [[295, 3, 1, "", "criterion"], [295, 3, 1, "", "optimizer"], [295, 3, 1, "", "teacher_model"]], "neural_compressor.PostTrainingQuantConfig": [[295, 3, 1, "", "approach"], [295, 3, 1, "", "tuning_criterion"]], "neural_compressor.QuantizationAwareTrainingConfig": [[295, 3, 1, "", "approach"]], "neural_compressor.WeightPruningConfig": [[295, 3, 1, "", "weight_compression"]], "neural_compressor.adaptor": [[6, 0, 0, "-", "adaptor"], [8, 0, 0, "-", "keras"], [11, 0, 0, "-", "keras_utils"], [13, 0, 0, "-", "mxnet"], [14, 0, 0, "-", "mxnet_utils"], [16, 0, 0, "-", "onnxrt"], [18, 0, 0, "-", "ox_utils"], [41, 0, 0, "-", "pytorch"], [42, 0, 0, "-", "query"], [43, 0, 0, "-", "tensorflow"], [107, 0, 0, "-", "tf_utils"], [145, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[6, 2, 1, "", "Adaptor"], [6, 1, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.adaptor.Adaptor": [[6, 4, 1, "", "convert"], [6, 4, 1, "", "evaluate"], [6, 4, 1, "", "inspect_tensor"], [6, 4, 1, "", "quantize"], [6, 4, 1, "", "quantize_input"], [6, 4, 1, "", "query_fused_patterns"], [6, 4, 1, "", "query_fw_capability"], [6, 4, 1, "", "save"], [6, 4, 1, "", "set_tensor"]], "neural_compressor.adaptor.keras": [[8, 2, 1, "", "KerasAdaptor"], [8, 2, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras.KerasAdaptor": [[8, 4, 1, "", "convert"], [8, 4, 1, "", "evaluate"], [8, 4, 1, "", "get_optype_wise_ability"], [8, 4, 1, "", "inspect_tensor"], [8, 4, 1, "", "quantize"], [8, 4, 1, "", "quantize_input"], [8, 4, 1, "", "query_fw_capability"], [8, 4, 1, "", "save"], [8, 4, 1, "", "set_tensor"]], "neural_compressor.adaptor.keras.KerasQuery": [[8, 4, 1, "", "get_op_types"], [8, 4, 1, "", "get_op_types_by_precision"], [8, 4, 1, "", "get_precisions"], [8, 4, 1, "", "get_quantization_capability"], [8, 4, 1, "", "get_version"]], "neural_compressor.adaptor.keras_utils": [[9, 0, 0, "-", "conv2d"], [10, 0, 0, "-", "dense"], [12, 0, 0, "-", "quantizer"]], "neural_compressor.adaptor.mxnet": [[13, 2, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet.MxNetAdaptor": [[13, 4, 1, "", "evaluate"], [13, 4, 1, "", "inspect_tensor"], [13, 4, 1, "", "quantize"], [13, 4, 1, "", "query_fw_capability"], [13, 4, 1, "", "recover_tuned_model"], [13, 4, 1, "", "set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[15, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[15, 2, 1, "", "CalibCollector"], [15, 2, 1, "", "CalibData"], [15, 2, 1, "", "CollectorBase"], [15, 2, 1, "", "DataIterLoader"], [15, 2, 1, "", "DataLoaderWrap"], [15, 2, 1, "", "NameCollector"], [15, 2, 1, "", "OpType"], [15, 2, 1, "", "TensorCollector"], [15, 1, 1, "", "amp_convert"], [15, 1, 1, "", "calib_model"], [15, 1, 1, "", "check_mx_version"], [15, 1, 1, "", "combine_capabilities"], [15, 1, 1, "", "create_data_example"], [15, 1, 1, "", "distribute_calib_tensors"], [15, 1, 1, "", "ensure_list"], [15, 1, 1, "", "fuse"], [15, 1, 1, "", "get_framework_name"], [15, 1, 1, "", "is_model_quantized"], [15, 1, 1, "", "isiterable"], [15, 1, 1, "", "make_module"], [15, 1, 1, "", "make_nc_model"], [15, 1, 1, "", "make_symbol_block"], [15, 1, 1, "", "ndarray_to_device"], [15, 1, 1, "", "parse_tune_config"], [15, 1, 1, "", "prepare_dataloader"], [15, 1, 1, "", "prepare_model"], [15, 1, 1, "", "prepare_model_data"], [15, 1, 1, "", "quantize_sym_model"], [15, 1, 1, "", "query_quantizable_nodes"], [15, 1, 1, "", "run_forward"]], "neural_compressor.adaptor.mxnet_utils.util.CalibCollector": [[15, 4, 1, "", "calc_kl_th_dict"], [15, 4, 1, "", "collect_gluon"]], "neural_compressor.adaptor.mxnet_utils.util.CalibData": [[15, 3, 1, "", "min_max_dict"], [15, 4, 1, "", "post_collect"]], "neural_compressor.adaptor.mxnet_utils.util.CollectorBase": [[15, 4, 1, "", "collect_gluon"], [15, 4, 1, "", "collect_module"], [15, 4, 1, "", "post_batch"], [15, 4, 1, "", "pre_batch"]], "neural_compressor.adaptor.mxnet_utils.util.NameCollector": [[15, 4, 1, "", "collect_gluon"]], "neural_compressor.adaptor.mxnet_utils.util.TensorCollector": [[15, 4, 1, "", "collect_gluon"], [15, 4, 1, "", "pre_batch"]], "neural_compressor.adaptor.onnxrt": [[16, 2, 1, "", "ONNXRT_IntegerOpsAdaptor"], [16, 2, 1, "", "ONNXRT_QDQAdaptor"], [16, 2, 1, "", "ONNXRT_QLinearOpsAdaptor"], [16, 2, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor": [[16, 4, 1, "", "evaluate"], [16, 4, 1, "", "inspect_tensor"], [16, 4, 1, "", "quantize"], [16, 4, 1, "", "query_fw_capability"], [16, 4, 1, "", "recover"], [16, 4, 1, "", "save"], [16, 4, 1, "", "smooth_quant"]], "neural_compressor.adaptor.ox_utils": [[17, 0, 0, "-", "calibration"], [30, 0, 0, "-", "operators"], [39, 0, 0, "-", "quantizer"], [40, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[17, 2, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment": [[17, 4, 1, "", "augment_graph"], [17, 4, 1, "", "calculate_quantization_params"], [17, 4, 1, "", "calculate_scale_zeropoint"], [17, 4, 1, "", "calib_smooth"], [17, 4, 1, "", "dump_calibration"], [17, 4, 1, "", "dump_minmax"], [17, 4, 1, "", "dump_tensor"], [17, 4, 1, "", "get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.operators": [[19, 0, 0, "-", "activation"], [20, 0, 0, "-", "argmax"], [21, 0, 0, "-", "attention"], [22, 0, 0, "-", "binary_op"], [23, 0, 0, "-", "concat"], [24, 0, 0, "-", "conv"], [25, 0, 0, "-", "direct_q8"], [26, 0, 0, "-", "embed_layernorm"], [27, 0, 0, "-", "gather"], [28, 0, 0, "-", "gavgpool"], [29, 0, 0, "-", "gemm"], [31, 0, 0, "-", "lstm"], [32, 0, 0, "-", "matmul"], [33, 0, 0, "-", "maxpool"], [34, 0, 0, "-", "ops"], [35, 0, 0, "-", "pad"], [36, 0, 0, "-", "pooling"], [37, 0, 0, "-", "resize"], [38, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[19, 2, 1, "", "ActivationOperator"], [19, 2, 1, "", "QActivationOperator"], [19, 2, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator": [[19, 4, 1, "", "convert"], [19, 4, 1, "", "convert_check"], [19, 4, 1, "", "quantize"], [19, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator": [[19, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator": [[19, 4, 1, "", "quantize"], [19, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[20, 2, 1, "", "ArgMaxOperator"], [20, 2, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator": [[20, 4, 1, "", "convert"], [20, 4, 1, "", "convert_check"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[21, 2, 1, "", "AttentionOperator"], [21, 2, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator": [[21, 4, 1, "", "convert"], [21, 4, 1, "", "convert_check"], [21, 4, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator": [[21, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[22, 2, 1, "", "BinaryOperator"], [22, 2, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator": [[22, 4, 1, "", "convert"], [22, 4, 1, "", "convert_check"], [22, 4, 1, "", "quantize"], [22, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator": [[22, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[23, 2, 1, "", "ConcatOperator"], [23, 2, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator": [[23, 4, 1, "", "cast"], [23, 4, 1, "", "convert"], [23, 4, 1, "", "convert_check"], [23, 4, 1, "", "quantize"], [23, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator": [[23, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[24, 2, 1, "", "ConvOperator"], [24, 2, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator": [[24, 4, 1, "", "convert"], [24, 4, 1, "", "convert_check"], [24, 4, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator": [[24, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[25, 2, 1, "", "Direct8BitOperator"], [25, 2, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator": [[25, 4, 1, "", "cast"], [25, 4, 1, "", "convert"], [25, 4, 1, "", "convert_check"], [25, 4, 1, "", "quantize"], [25, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[26, 2, 1, "", "EmbedLayerNormalizationOperator"], [26, 2, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator": [[26, 4, 1, "", "convert"], [26, 4, 1, "", "convert_check"], [26, 4, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator": [[26, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[27, 2, 1, "", "GatherOperator"], [27, 2, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator": [[27, 4, 1, "", "convert"], [27, 4, 1, "", "convert_check"], [27, 4, 1, "", "quantize"], [27, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[28, 2, 1, "", "GlobalAveragePoolOperator"], [28, 2, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator": [[28, 4, 1, "", "convert"], [28, 4, 1, "", "convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator": [[28, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[29, 2, 1, "", "GemmOperator"], [29, 2, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator": [[29, 4, 1, "", "convert"], [29, 4, 1, "", "convert_check"], [29, 4, 1, "", "quantize"], [29, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator": [[29, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[31, 2, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator": [[31, 4, 1, "", "convert"], [31, 4, 1, "", "convert_check"], [31, 4, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[32, 2, 1, "", "MatMulOperator"], [32, 2, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator": [[32, 4, 1, "", "convert"], [32, 4, 1, "", "convert_check"], [32, 4, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator": [[32, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[33, 2, 1, "", "MaxPoolOperator"], [33, 2, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator": [[33, 4, 1, "", "convert"], [33, 4, 1, "", "convert_check"], [33, 4, 1, "", "quantize"], [33, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, 2, 1, "", "Operator"], [34, 2, 1, "", "QOperator"], [34, 1, 1, "", "op_registry"], [34, 1, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.ops.Operator": [[34, 4, 1, "", "cast"], [34, 4, 1, "", "convert"], [34, 4, 1, "", "convert_check"], [34, 4, 1, "", "quantize"], [34, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.ops.QOperator": [[34, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, 2, 1, "", "PadOperator"], [35, 2, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator": [[35, 4, 1, "", "convert"], [35, 4, 1, "", "convert_check"], [35, 4, 1, "", "quantize"], [35, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, 2, 1, "", "PoolOperator"], [36, 2, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator": [[36, 4, 1, "", "convert"], [36, 4, 1, "", "convert_check"], [36, 4, 1, "", "quantize"], [36, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator": [[36, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[37, 2, 1, "", "QResizeOperator"], [37, 2, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator": [[37, 4, 1, "", "convert"], [37, 4, 1, "", "convert_check"], [37, 4, 1, "", "quantize"], [37, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.split": [[38, 2, 1, "", "QSplitOperator"], [38, 2, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator": [[38, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator": [[38, 4, 1, "", "cast"], [38, 4, 1, "", "convert"], [38, 4, 1, "", "convert_check"], [38, 4, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.quantizer": [[39, 2, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer.Quantizer": [[39, 4, 1, "", "check_opset_version"], [39, 4, 1, "", "convert_qdq_to_operator_oriented"], [39, 4, 1, "", "dequantize_tensor"], [39, 4, 1, "", "dtype_cast"], [39, 4, 1, "", "get_bias_add_nodes"], [39, 4, 1, "", "insert_qdq"], [39, 4, 1, "", "is_valid_quantize_weight"], [39, 4, 1, "", "merge_dedicated_qdq_pair"], [39, 4, 1, "", "quantize_bias"], [39, 4, 1, "", "quantize_bias_tensor"], [39, 4, 1, "", "quantize_inputs"], [39, 4, 1, "", "quantize_model"], [39, 4, 1, "", "quantize_outputs"], [39, 4, 1, "", "quantize_weight_per_channel"], [39, 4, 1, "", "quantize_weights_per_channel"], [39, 4, 1, "", "remove_redundant_pairs"], [39, 4, 1, "", "should_cast"], [39, 4, 1, "", "should_convert"], [39, 4, 1, "", "should_quantize"], [39, 4, 1, "", "tensor_proto_to_array"]], "neural_compressor.adaptor.ox_utils.util": [[40, 2, 1, "", "QuantFormat"], [40, 2, 1, "", "QuantType"], [40, 2, 1, "", "QuantizationMode"], [40, 2, 1, "", "QuantizedInitializer"], [40, 2, 1, "", "QuantizedValue"], [40, 2, 1, "", "QuantizedValueType"], [40, 2, 1, "", "ValueInfo"], [40, 1, 1, "", "adjust_weights_per_input"], [40, 1, 1, "", "adjust_weights_per_op"], [40, 1, 1, "", "attribute_to_kwarg"], [40, 1, 1, "", "calculate_scale_zp"], [40, 1, 1, "", "cast_tensor"], [40, 1, 1, "", "collate_preds"], [40, 1, 1, "", "dequantize_data"], [40, 1, 1, "", "dequantize_data_with_scale_zero"], [40, 1, 1, "", "dtype_to_name"], [40, 1, 1, "", "find_by_name"], [40, 1, 1, "", "float_to_bfloat16"], [40, 1, 1, "", "float_to_float16"], [40, 1, 1, "", "get_smooth_scales_per_input"], [40, 1, 1, "", "get_smooth_scales_per_op"], [40, 1, 1, "", "insert_smooth_mul_op_per_input"], [40, 1, 1, "", "insert_smooth_mul_op_per_op"], [40, 1, 1, "", "is_B_transposed"], [40, 1, 1, "", "make_dquant_node"], [40, 1, 1, "", "make_quant_node"], [40, 1, 1, "", "quantize_data"], [40, 1, 1, "", "quantize_data_per_channel"], [40, 1, 1, "", "quantize_data_with_scale_zero"], [40, 1, 1, "", "quantize_nparray"], [40, 1, 1, "", "remove_init_from_model_input"], [40, 1, 1, "", "split_shared_bias"], [40, 1, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.pytorch": [[41, 2, 1, "", "PyTorchAdaptor"], [41, 2, 1, "", "PyTorchQuery"], [41, 2, 1, "", "PyTorch_FXAdaptor"], [41, 2, 1, "", "PyTorch_IPEXAdaptor"], [41, 2, 1, "", "TemplateAdaptor"], [41, 1, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.pytorch.PyTorchAdaptor": [[41, 4, 1, "", "evaluate"], [41, 4, 1, "", "get_non_quant_modules"], [41, 4, 1, "", "is_fused_child"], [41, 4, 1, "", "is_fused_op"], [41, 4, 1, "", "is_last_fused_child"], [41, 4, 1, "", "quantize"], [41, 4, 1, "", "query_fw_capability"], [41, 4, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorchQuery": [[41, 4, 1, "", "get_op_types"], [41, 4, 1, "", "get_op_types_by_precision"], [41, 4, 1, "", "get_quantization_capability"]], "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor": [[41, 4, 1, "", "calculate_op_sensitivity"], [41, 4, 1, "", "convert_sub_graph"], [41, 4, 1, "", "evaluate"], [41, 4, 1, "", "fuse_fx_model"], [41, 4, 1, "", "prepare_sub_graph"], [41, 4, 1, "", "quantize"], [41, 4, 1, "", "query_fw_capability"], [41, 4, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor": [[41, 4, 1, "", "evaluate"], [41, 4, 1, "", "quantize"], [41, 4, 1, "", "query_fw_capability"], [41, 4, 1, "", "save"]], "neural_compressor.adaptor.pytorch.TemplateAdaptor": [[41, 4, 1, "", "calculate_hessian_trace"], [41, 4, 1, "", "is_fused_module"], [41, 4, 1, "", "smooth_quant"]], "neural_compressor.adaptor.query": [[42, 2, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.query.QueryBackendCapability": [[42, 4, 1, "", "get_fuse_patterns"], [42, 4, 1, "", "get_mixed_precision_combination"], [42, 4, 1, "", "get_op_types"], [42, 4, 1, "", "get_precisions"], [42, 4, 1, "", "get_quantization_capability"], [42, 4, 1, "", "get_version"], [42, 4, 1, "", "set_quantization_config"]], "neural_compressor.adaptor.tensorflow": [[43, 2, 1, "", "TensorFlowAdaptor"], [43, 2, 1, "", "TensorflowQuery"], [43, 2, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor": [[43, 4, 1, "", "calculate_op_sensitivity"], [43, 4, 1, "", "convert"], [43, 4, 1, "", "diagnosis_helper"], [43, 4, 1, "", "evaluate"], [43, 4, 1, "", "fused_node_mapping"], [43, 4, 1, "", "get_optype_wise_ability"], [43, 4, 1, "", "get_output_op_names"], [43, 4, 1, "", "inspect_activation"], [43, 4, 1, "", "inspect_tensor"], [43, 4, 1, "", "inspect_weight_and_bias"], [43, 4, 1, "", "qat_convert"], [43, 4, 1, "", "quantize"], [43, 4, 1, "", "quantize_input"], [43, 4, 1, "", "query_fw_capability"], [43, 4, 1, "", "recover_tuned_model"], [43, 4, 1, "", "save"], [43, 4, 1, "", "set_tensor"], [43, 4, 1, "", "train"]], "neural_compressor.adaptor.tensorflow.TensorflowQuery": [[43, 4, 1, "", "generate_internal_patterns"], [43, 4, 1, "", "get_bf16_patterns"], [43, 4, 1, "", "get_eightbit_patterns"], [43, 4, 1, "", "get_fuse_patterns"], [43, 4, 1, "", "get_mixed_precision_combination"], [43, 4, 1, "", "get_op_types"], [43, 4, 1, "", "get_op_types_by_precision"], [43, 4, 1, "", "get_quantization_capability"], [43, 4, 1, "", "get_version"]], "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor": [[43, 4, 1, "", "quantize"]], "neural_compressor.adaptor.tf_utils": [[44, 0, 0, "-", "graph_converter"], [45, 0, 0, "-", "graph_converter_without_calib"], [83, 0, 0, "-", "graph_rewriter"], [106, 0, 0, "-", "graph_util"], [108, 0, 0, "-", "quantize_graph"], [135, 0, 0, "-", "quantize_graph_common"], [136, 0, 0, "-", "tf2onnx_converter"], [139, 0, 0, "-", "transform_graph"], [142, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[44, 2, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter": [[44, 4, 1, "", "bf16_convert"], [44, 4, 1, "", "convert"], [44, 4, 1, "", "quantize"], [44, 4, 1, "", "quantize_with_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[45, 2, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib": [[45, 4, 1, "", "bf16_convert"], [45, 4, 1, "", "convert_without_calib"], [45, 4, 1, "", "quantize_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[47, 0, 0, "-", "bf16"], [72, 0, 0, "-", "generic"], [82, 0, 0, "-", "graph_base"], [91, 0, 0, "-", "int8"], [97, 0, 0, "-", "onnx"], [102, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[46, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[46, 2, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert": [[46, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[48, 0, 0, "-", "convert_add_to_biasadd"], [49, 0, 0, "-", "convert_layout"], [50, 0, 0, "-", "convert_leakyrelu"], [51, 0, 0, "-", "convert_nan_to_random"], [52, 0, 0, "-", "convert_placeholder_to_const"], [53, 0, 0, "-", "dequantize_cast_optimizer"], [54, 0, 0, "-", "dilated_contraction"], [55, 0, 0, "-", "dummy_biasadd"], [56, 0, 0, "-", "expanddims_optimizer"], [57, 0, 0, "-", "fetch_weight_from_reshape"], [58, 0, 0, "-", "fold_batch_norm"], [59, 0, 0, "-", "fold_constant"], [60, 0, 0, "-", "fuse_biasadd_add"], [61, 0, 0, "-", "fuse_column_wise_mul"], [62, 0, 0, "-", "fuse_conv_with_math"], [63, 0, 0, "-", "fuse_decomposed_bn"], [64, 0, 0, "-", "fuse_decomposed_in"], [65, 0, 0, "-", "fuse_gelu"], [66, 0, 0, "-", "fuse_layer_norm"], [67, 0, 0, "-", "fuse_pad_with_conv"], [68, 0, 0, "-", "fuse_pad_with_fp32_conv"], [69, 0, 0, "-", "fuse_reshape_transpose"], [70, 0, 0, "-", "graph_cse_optimizer"], [71, 0, 0, "-", "grappler_pass"], [73, 0, 0, "-", "insert_print_node"], [74, 0, 0, "-", "move_squeeze_after_relu"], [75, 0, 0, "-", "pre_optimize"], [76, 0, 0, "-", "remove_training_nodes"], [77, 0, 0, "-", "rename_batch_norm"], [78, 0, 0, "-", "split_shared_input"], [79, 0, 0, "-", "strip_equivalent_nodes"], [80, 0, 0, "-", "strip_unused_nodes"], [81, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[48, 2, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer": [[48, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[49, 2, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer": [[49, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[50, 2, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer": [[50, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[51, 2, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom": [[51, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[52, 2, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst": [[52, 4, 1, "", "do_transformation"], [52, 4, 1, "", "strtobool"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[53, 2, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer": [[53, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[54, 2, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction": [[54, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[55, 2, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer": [[55, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[56, 2, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer": [[56, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[57, 2, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer": [[57, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[58, 2, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer": [[58, 4, 1, "", "do_transformation"], [58, 4, 1, "", "scale_after_normalization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[59, 2, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer": [[59, 4, 1, "", "check_all_folded"], [59, 4, 1, "", "check_const_inputs"], [59, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[60, 2, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer": [[60, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[61, 2, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer": [[61, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[62, 2, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer": [[62, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[63, 2, 1, "", "FuseDecomposedBNOptimizer"], [63, 1, 1, "", "bypass_reshape"], [63, 1, 1, "", "get_const_dim_count"], [63, 1, 1, "", "node_from_map"], [63, 1, 1, "", "node_name_from_input"], [63, 1, 1, "", "valid_reshape_inputs"], [63, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer": [[63, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[64, 2, 1, "", "FuseDecomposedINOptimizer"], [64, 1, 1, "", "bypass_reshape"], [64, 1, 1, "", "get_const_dim_count"], [64, 1, 1, "", "node_from_map"], [64, 1, 1, "", "node_name_from_input"], [64, 1, 1, "", "valid_reshape_inputs"], [64, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer": [[64, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[65, 2, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer": [[65, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[66, 2, 1, "", "FuseLayerNormOptimizer"], [66, 1, 1, "", "node_from_map"], [66, 1, 1, "", "node_name_from_input"], [66, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer": [[66, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[67, 2, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer": [[67, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[68, 2, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer": [[68, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[69, 2, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer": [[69, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[70, 2, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer": [[70, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[71, 2, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer": [[71, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[73, 2, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode": [[73, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[74, 2, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer": [[74, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[75, 2, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization": [[75, 4, 1, "", "get_excluded_node_names"], [75, 4, 1, "", "get_matched_nodes"], [75, 4, 1, "", "get_optimized_model"], [75, 4, 1, "", "has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[76, 2, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer": [[76, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[77, 2, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer": [[77, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[78, 2, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer": [[78, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[79, 2, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer": [[79, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[80, 2, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer": [[80, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[81, 2, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer": [[81, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[82, 2, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase": [[82, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[84, 0, 0, "-", "freeze_fake_quant"], [85, 0, 0, "-", "freeze_value"], [86, 0, 0, "-", "freeze_value_without_calib"], [87, 0, 0, "-", "fuse_conv_redundant_dequantize"], [88, 0, 0, "-", "fuse_conv_requantize"], [89, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [90, 0, 0, "-", "fuse_matmul_requantize"], [92, 0, 0, "-", "meta_op_optimizer"], [93, 0, 0, "-", "post_hostconst_converter"], [94, 0, 0, "-", "post_quantized_op_cse"], [95, 0, 0, "-", "rnn_convert"], [96, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[84, 2, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer": [[84, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[85, 2, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer": [[85, 4, 1, "", "do_transformation"], [85, 4, 1, "", "generate_output_graph"], [85, 4, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[86, 2, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer": [[86, 4, 1, "", "do_transformation_without_calib"], [86, 4, 1, "", "generate_output_graph"], [86, 4, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[87, 2, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer": [[87, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[88, 2, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer": [[88, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[89, 2, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer": [[89, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[90, 2, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [90, 2, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [90, 2, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [90, 2, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer": [[90, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer": [[90, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer": [[90, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer": [[90, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[92, 2, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer": [[92, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[93, 2, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter": [[93, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[94, 2, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer": [[94, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[95, 2, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter": [[95, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[96, 2, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer": [[96, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[98, 0, 0, "-", "onnx_graph"], [99, 0, 0, "-", "onnx_node"], [100, 0, 0, "-", "onnx_schema"], [101, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[98, 2, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph": [[98, 4, 1, "", "add_graph_input"], [98, 4, 1, "", "add_graph_output"], [98, 4, 1, "", "append_node"], [98, 4, 1, "", "convert_qdq_nodes"], [98, 4, 1, "", "copy_dtype"], [98, 4, 1, "", "copy_shape"], [98, 4, 1, "", "create_new_graph_with_same_config"], [98, 4, 1, "", "delete_qdq_nodes"], [98, 4, 1, "", "delete_unused_nodes"], [98, 4, 1, "", "dump_graph"], [98, 4, 1, "", "dump_node_statistics"], [98, 3, 1, "", "extra_opset"], [98, 4, 1, "", "extract_sub_graph_nodes"], [98, 4, 1, "", "find_output_consumers"], [98, 4, 1, "", "get_dtype"], [98, 4, 1, "", "get_node_by_name"], [98, 4, 1, "", "get_node_by_output"], [98, 4, 1, "", "get_node_by_output_in_current_graph"], [98, 4, 1, "", "get_nodes"], [98, 4, 1, "", "get_rank"], [98, 4, 1, "", "get_shape"], [98, 4, 1, "", "get_tensor_value"], [98, 3, 1, "", "input_names"], [98, 4, 1, "", "insert_new_node_on_input"], [98, 4, 1, "", "insert_new_node_on_output"], [98, 4, 1, "", "insert_node_on_output"], [98, 4, 1, "", "is_const"], [98, 4, 1, "", "is_empty_input"], [98, 4, 1, "", "is_target"], [98, 4, 1, "", "make_const"], [98, 4, 1, "", "make_graph"], [98, 4, 1, "", "make_model"], [98, 4, 1, "", "make_node"], [98, 4, 1, "", "make_onnx_graph_io"], [98, 3, 1, "", "opset"], [98, 4, 1, "", "remove_input"], [98, 4, 1, "", "remove_node"], [98, 4, 1, "", "replace_all_inputs"], [98, 4, 1, "", "replace_input"], [98, 4, 1, "", "replace_inputs"], [98, 4, 1, "", "reset_nodes"], [98, 4, 1, "", "safe_remove_nodes"], [98, 4, 1, "", "safe_to_remove_nodes"], [98, 4, 1, "", "set_config"], [98, 4, 1, "", "set_dtype"], [98, 4, 1, "", "set_node_by_name"], [98, 4, 1, "", "set_shape"], [98, 4, 1, "", "topological_sort"], [98, 4, 1, "", "update_node_shape_dtype"], [98, 4, 1, "", "update_proto"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[99, 2, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode": [[99, 3, 1, "", "attr"], [99, 4, 1, "", "child_name"], [99, 3, 1, "", "data_format"], [99, 3, 1, "", "domain"], [99, 4, 1, "", "get_attr"], [99, 4, 1, "", "get_attr_int"], [99, 4, 1, "", "get_attr_str"], [99, 4, 1, "", "get_attr_value"], [99, 4, 1, "", "get_body_graphs"], [99, 4, 1, "", "get_implicit_inputs"], [99, 4, 1, "", "get_onnx_attrs"], [99, 4, 1, "", "get_tensor_value"], [99, 4, 1, "", "get_value_attr"], [99, 3, 1, "", "input"], [99, 3, 1, "", "inputs"], [99, 4, 1, "", "is_const"], [99, 4, 1, "", "is_graph_input"], [99, 4, 1, "", "is_graph_input_default_const"], [99, 4, 1, "", "is_nhwc"], [99, 4, 1, "", "is_scalar"], [99, 4, 1, "", "is_while"], [99, 3, 1, "", "name"], [99, 4, 1, "", "need_skip"], [99, 3, 1, "", "op"], [99, 3, 1, "", "output"], [99, 3, 1, "", "output_dtypes"], [99, 3, 1, "", "output_shapes"], [99, 4, 1, "", "scalar_to_dim1"], [99, 4, 1, "", "set_attr"], [99, 4, 1, "", "set_attr_onnx"], [99, 4, 1, "", "set_body_graph_as_attr"], [99, 4, 1, "", "set_tensor_value"], [99, 3, 1, "", "skip_conversion"], [99, 3, 1, "", "summary"], [99, 3, 1, "", "type"], [99, 4, 1, "", "update_proto"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[100, 2, 1, "", "OnnxOpSchema"], [100, 1, 1, "", "get_max_supported_opset_version"], [100, 1, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema": [[100, 3, 1, "", "attributes"], [100, 3, 1, "", "domain"], [100, 4, 1, "", "from_onnx_schema"], [100, 4, 1, "", "has_attribute"], [100, 3, 1, "", "name"], [100, 3, 1, "", "since_version"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[101, 2, 1, "", "SeqType"], [101, 1, 1, "", "add_port_to_name"], [101, 1, 1, "", "are_shapes_equal"], [101, 1, 1, "", "assert_error"], [101, 1, 1, "", "compute_const_folding_using_tf"], [101, 1, 1, "", "convert_tensorflow_tensor_to_onnx"], [101, 1, 1, "", "find_opset"], [101, 1, 1, "", "get_index_from_strided_slice_of_shape"], [101, 1, 1, "", "get_subgraphs_from_onnx"], [101, 1, 1, "", "get_tensorflow_node_attr"], [101, 1, 1, "", "get_tensorflow_node_shape_attr"], [101, 1, 1, "", "get_tensorflow_tensor_data"], [101, 1, 1, "", "get_tensorflow_tensor_shape"], [101, 1, 1, "", "infer_onnx_shape_dtype"], [101, 1, 1, "", "initialize_name_counter"], [101, 1, 1, "", "is_list_or_tuple"], [101, 1, 1, "", "is_onnx_domain"], [101, 1, 1, "", "make_onnx_inputs_outputs"], [101, 1, 1, "", "make_onnx_shape"], [101, 1, 1, "", "map_numpy_to_onnx_dtype"], [101, 1, 1, "", "map_onnx_to_numpy_type"], [101, 1, 1, "", "map_tensorflow_dtype"], [101, 1, 1, "", "read_tensorflow_node_attrs"], [101, 1, 1, "", "save_protobuf"], [101, 1, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[103, 0, 0, "-", "insert_qdq_pattern"], [104, 0, 0, "-", "merge_duplicated_qdq"], [105, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[103, 2, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern": [[103, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[104, 2, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer": [[104, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[105, 2, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer": [[105, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_util": [[106, 2, 1, "", "GraphAnalyzer"], [106, 2, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer": [[106, 4, 1, "", "add_node"], [106, 4, 1, "", "dump_graph"], [106, 4, 1, "", "get_frame_info"], [106, 4, 1, "", "get_graph_input_output"], [106, 3, 1, "", "graph"], [106, 4, 1, "", "has_positive_input"], [106, 4, 1, "", "parse_graph"], [106, 4, 1, "", "query_fusion_pattern_nodes"], [106, 4, 1, "", "remove_node"], [106, 4, 1, "", "remove_node_with_single_input_output"], [106, 4, 1, "", "replace_const_node"], [106, 4, 1, "", "replace_constant_graph_with_constant_node"], [106, 4, 1, "", "replace_node"], [106, 4, 1, "", "replace_single_node"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper": [[106, 4, 1, "", "analysis_rnn_model"], [106, 4, 1, "", "compare_node_attr"], [106, 4, 1, "", "create_constant_node"], [106, 4, 1, "", "create_node"], [106, 4, 1, "", "gen_valid_sampling_log"], [106, 4, 1, "", "generate_int32_bias_for_conv"], [106, 4, 1, "", "generate_int32_bias_for_matmul"], [106, 4, 1, "", "node_name_from_input"], [106, 4, 1, "", "set_attr_bool"], [106, 4, 1, "", "set_attr_dtype"], [106, 4, 1, "", "set_attr_float"], [106, 4, 1, "", "set_attr_int"], [106, 4, 1, "", "set_attr_int_list"], [106, 4, 1, "", "set_attr_string"], [106, 4, 1, "", "set_attr_string_list"], [106, 4, 1, "", "set_attr_tensor"], [106, 4, 1, "", "set_attr_type_list"], [106, 4, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[110, 0, 0, "-", "qat"], [126, 0, 0, "-", "qdq"], [128, 0, 0, "-", "quantize_graph_base"], [129, 0, 0, "-", "quantize_graph_bn"], [130, 0, 0, "-", "quantize_graph_concatv2"], [131, 0, 0, "-", "quantize_graph_conv"], [132, 0, 0, "-", "quantize_graph_for_intel_cpu"], [133, 0, 0, "-", "quantize_graph_matmul"], [134, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[109, 0, 0, "-", "fake_quantize"], [111, 0, 0, "-", "quantize_config"], [112, 0, 0, "-", "quantize_helper"], [113, 0, 0, "-", "quantize_layers"], [118, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[109, 2, 1, "", "FakeQuantize"], [109, 2, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize": [[109, 4, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase": [[109, 4, 1, "", "from_config"], [109, 4, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[111, 2, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig": [[111, 4, 1, "", "add_quantize_recipe"], [111, 4, 1, "", "clear_quantize_recipe"], [111, 4, 1, "", "get_quantize_recipe"], [111, 4, 1, "", "is_empty"], [111, 4, 1, "", "query_layer"], [111, 4, 1, "", "remove_layer"], [111, 4, 1, "", "remove_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[112, 1, 1, "", "init_quantize_config"], [112, 1, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[114, 0, 0, "-", "optimize_layer"], [115, 0, 0, "-", "quantize_layer_add"], [116, 0, 0, "-", "quantize_layer_base"], [117, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[114, 1, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[115, 2, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[116, 2, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[117, 2, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[118, 2, 1, "", "QuantizeWrapper"], [118, 2, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper": [[118, 4, 1, "", "build"], [118, 4, 1, "", "call"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase": [[118, 4, 1, "", "build"], [118, 4, 1, "", "call"], [118, 4, 1, "", "compute_output_shape"], [118, 4, 1, "", "from_config"], [118, 4, 1, "", "get_config"], [118, 3, 1, "", "losses"], [118, 3, 1, "", "non_trainable_weights"], [118, 4, 1, "", "query_input_index"], [118, 3, 1, "", "trainable"], [118, 3, 1, "", "trainable_weights"], [118, 3, 1, "", "updates"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[119, 0, 0, "-", "fuse_qdq_bn"], [120, 0, 0, "-", "fuse_qdq_concatv2"], [121, 0, 0, "-", "fuse_qdq_conv"], [122, 0, 0, "-", "fuse_qdq_deconv"], [123, 0, 0, "-", "fuse_qdq_in"], [124, 0, 0, "-", "fuse_qdq_matmul"], [125, 0, 0, "-", "fuse_qdq_pooling"], [127, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[119, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3": [[119, 4, 1, "", "apply_newly_bn_leakyrelu_fusion"], [119, 4, 1, "", "apply_newly_bn_relu_fusion"], [119, 4, 1, "", "apply_the_transform"], [119, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[120, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2": [[120, 4, 1, "", "apply_the_transform"], [120, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[121, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d": [[121, 4, 1, "", "apply_conv3d_add_addn_fusion"], [121, 4, 1, "", "apply_conv3d_add_addn_relu_fusion"], [121, 4, 1, "", "apply_conv3d_add_fusion"], [121, 4, 1, "", "apply_conv3d_add_relu_fusion"], [121, 4, 1, "", "apply_conv3d_single_fusion"], [121, 4, 1, "", "apply_conv_biasadd_hardswish_fusion"], [121, 4, 1, "", "apply_newly_conv_biasadd_addn_fusion"], [121, 4, 1, "", "apply_newly_conv_biasadd_addn_relu_fusion"], [121, 4, 1, "", "apply_newly_conv_biasadd_fusion"], [121, 4, 1, "", "apply_newly_conv_biasadd_relu_fusion"], [121, 4, 1, "", "apply_newly_conv_biasadd_swishf32_fusion"], [121, 4, 1, "", "apply_newly_conv_single_fusion"], [121, 4, 1, "", "apply_the_transform"], [121, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[122, 2, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d": [[122, 4, 1, "", "apply_deconv2d_biasadd_fusion"], [122, 4, 1, "", "apply_deconv3d_biasadd_fusion"], [122, 4, 1, "", "apply_single_deconv2d_fusion"], [122, 4, 1, "", "apply_single_deconv3d_fusion"], [122, 4, 1, "", "apply_the_transform"], [122, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[123, 2, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm": [[123, 4, 1, "", "apply_newly_in_relu_fusion"], [123, 4, 1, "", "apply_the_transform"], [123, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[124, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul": [[124, 4, 1, "", "apply_batchmatmulv2_fusion"], [124, 4, 1, "", "apply_batchmatmulv2_mul_add_fusion"], [124, 4, 1, "", "apply_matmul_biasadd_fusion"], [124, 4, 1, "", "apply_matmul_biasadd_relu_fusion"], [124, 4, 1, "", "apply_the_transform"], [124, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[125, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling": [[125, 4, 1, "", "apply_the_transform"], [125, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[127, 2, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph": [[127, 4, 1, "", "do_transform"], [127, 4, 1, "", "get_quantized_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[128, 2, 1, "", "QuantizeGraphBase"], [128, 2, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase": [[128, 4, 1, "", "do_transform"], [128, 4, 1, "", "register_transformer"], [128, 4, 1, "", "remove_dead_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase": [[128, 4, 1, "", "add_output_graph_node"], [128, 4, 1, "", "apply_the_transform"], [128, 4, 1, "", "create_nodes_map"], [128, 4, 1, "", "eightbitize_single_input_tensor_node"], [128, 4, 1, "", "get_longest_fuse"], [128, 4, 1, "", "remove_redundant_quantization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[129, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3": [[129, 4, 1, "", "apply_newly_bn_leakyrelu_fusion"], [129, 4, 1, "", "apply_newly_bn_relu_fusion"], [129, 4, 1, "", "apply_the_transform"], [129, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[130, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2": [[130, 4, 1, "", "apply_the_transform"], [130, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[131, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d": [[131, 4, 1, "", "apply_conv_biasadd_addn_relu_fusion"], [131, 4, 1, "", "apply_conv_biasadd_fusion"], [131, 4, 1, "", "apply_conv_biasadd_relu_fusion"], [131, 4, 1, "", "apply_conv_single_fusion"], [131, 4, 1, "", "apply_the_transform"], [131, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[132, 2, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel": [[132, 4, 1, "", "do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[133, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul": [[133, 4, 1, "", "apply_matmul_biasadd_fusion"], [133, 4, 1, "", "apply_matmul_biasadd_relu_fusion"], [133, 4, 1, "", "apply_the_transform"], [133, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[134, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling": [[134, 4, 1, "", "apply_the_transform"], [134, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[135, 2, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper": [[135, 4, 1, "", "copy_attr"], [135, 4, 1, "", "create_constant_node"], [135, 4, 1, "", "create_node"], [135, 4, 1, "", "ensure_tensor_name_has_port"], [135, 4, 1, "", "generate_quantized_weight_node"], [135, 4, 1, "", "get_sorted_graph"], [135, 4, 1, "", "node_name_from_input"], [135, 4, 1, "", "remove_training_nodes"], [135, 4, 1, "", "set_attr_bool"], [135, 4, 1, "", "set_attr_dtype"], [135, 4, 1, "", "set_attr_float"], [135, 4, 1, "", "set_attr_int"], [135, 4, 1, "", "set_attr_string"], [135, 4, 1, "", "set_attr_string_list"], [135, 4, 1, "", "set_attr_tensor"], [135, 4, 1, "", "set_attr_type_list"], [135, 4, 1, "", "split_shared_inputs"], [135, 4, 1, "", "unique_node_name_from_input"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[136, 2, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter": [[136, 4, 1, "", "convert"], [136, 4, 1, "", "duplicate_tf_quantizev2_nodes"], [136, 4, 1, "", "tf_graph_optimize"], [136, 4, 1, "", "transpose_inputs"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[137, 0, 0, "-", "bias_correction"], [138, 0, 0, "-", "graph_transform_base"], [140, 0, 0, "-", "insert_logging"], [141, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[137, 2, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection": [[137, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[138, 2, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase": [[138, 4, 1, "", "do_transformation"], [138, 4, 1, "", "generate_input_map"], [138, 4, 1, "", "get_node_name_from_input"], [138, 4, 1, "", "node_name_from_input"], [138, 4, 1, "", "parse_input_pb"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[140, 2, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging": [[140, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[141, 2, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat": [[141, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.util": [[142, 1, 1, "", "collate_tf_preds"], [142, 1, 1, "", "disable_random"], [142, 1, 1, "", "fix_ref_type_of_graph_def"], [142, 1, 1, "", "generate_feed_dict"], [142, 1, 1, "", "get_estimator_graph"], [142, 1, 1, "", "get_graph_def"], [142, 1, 1, "", "get_input_output_node_names"], [142, 1, 1, "", "get_model_input_shape"], [142, 1, 1, "", "get_tensor_by_name"], [142, 1, 1, "", "get_tensor_val_from_graph_node"], [142, 1, 1, "", "int8_node_name_reverse"], [142, 1, 1, "", "is_ckpt_format"], [142, 1, 1, "", "is_saved_model_format"], [142, 1, 1, "", "iterator_sess_run"], [142, 1, 1, "", "read_graph"], [142, 1, 1, "", "strip_equivalent_nodes"], [142, 1, 1, "", "strip_unused_nodes"], [142, 1, 1, "", "tf_diagnosis_helper"], [142, 1, 1, "", "version1_eq_version2"], [142, 1, 1, "", "version1_gt_version2"], [142, 1, 1, "", "version1_gte_version2"], [142, 1, 1, "", "version1_lt_version2"], [142, 1, 1, "", "version1_lte_version2"], [142, 1, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[143, 0, 0, "-", "bf16_convert"], [144, 0, 0, "-", "hawq_metric"], [146, 0, 0, "-", "onnx"], [147, 0, 0, "-", "smooth_quant"], [148, 0, 0, "-", "symbolic_trace"], [149, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[143, 2, 1, "", "BF16ModuleWrapper"], [143, 1, 1, "", "Convert"], [143, 1, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper": [[143, 4, 1, "", "forward"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[144, 2, 1, "", "HessianTrace"], [144, 2, 1, "", "Node_collector"], [144, 1, 1, "", "compare_weights"], [144, 1, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace": [[144, 4, 1, "", "get_act_gap"], [144, 4, 1, "", "get_act_traces"], [144, 4, 1, "", "get_avg_traces"], [144, 4, 1, "", "get_device"], [144, 4, 1, "", "get_fused_mapping"], [144, 4, 1, "", "get_params"], [144, 4, 1, "", "get_vtHv_weight"], [144, 4, 1, "", "get_weight_traces"], [144, 4, 1, "", "is_fused_module"], [144, 4, 1, "", "mse_metric_gap"], [144, 4, 1, "", "register_act_grad_hooks"], [144, 4, 1, "", "reset_act_gradient_and_hooks"]], "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector": [[144, 4, 1, "", "hook_fn_act"], [144, 4, 1, "", "remove"]], "neural_compressor.adaptor.torch_utils.onnx": [[146, 2, 1, "", "DataReader"]], "neural_compressor.adaptor.torch_utils.onnx.DataReader": [[146, 4, 1, "", "get_next"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[147, 2, 1, "", "GraphTrace"], [147, 2, 1, "", "TorchSmoothQuant"]], "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant": [[147, 4, 1, "", "recover"], [147, 4, 1, "", "transform"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[148, 1, 1, "", "symbolic_trace"], [148, 1, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.util": [[149, 1, 1, "", "append_attr"], [149, 1, 1, "", "auto_copy"], [149, 1, 1, "", "check_cfg_and_qconfig"], [149, 1, 1, "", "collate_torch_preds"], [149, 1, 1, "", "fetch_module"], [149, 1, 1, "", "generate_activation_observer"], [149, 1, 1, "", "get_embedding_contiguous"], [149, 1, 1, "", "get_example_input"], [149, 1, 1, "", "get_fallback_order"], [149, 1, 1, "", "get_mse_order_per_fp32"], [149, 1, 1, "", "get_mse_order_per_int8"], [149, 1, 1, "", "get_quantizable_ops_from_cfgs"], [149, 1, 1, "", "get_torch_version"], [149, 1, 1, "", "input2tuple"], [149, 1, 1, "", "is_fused_module"], [149, 1, 1, "", "paser_cfgs"], [149, 1, 1, "", "set_module"], [149, 1, 1, "", "simple_inference"]], "neural_compressor.algorithm": [[152, 2, 1, "", "ALGORITHMS"], [152, 2, 1, "", "Algorithm"], [152, 2, 1, "", "AlgorithmScheduler"], [150, 0, 0, "-", "algorithm"], [152, 1, 1, "", "algorithm_registry"], [151, 0, 0, "-", "fast_bias_correction"], [153, 0, 0, "-", "smooth_quant"], [154, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.ALGORITHMS": [[152, 4, 1, "", "support_algorithms"]], "neural_compressor.algorithm.AlgorithmScheduler": [[152, 3, 1, "", "adaptor"], [152, 4, 1, "", "append_algorithm"], [152, 3, 1, "", "calib_iter"], [152, 3, 1, "", "dataloader"], [152, 3, 1, "", "origin_model"], [152, 3, 1, "", "q_model"], [152, 4, 1, "", "reset_exec_algorithms"]], "neural_compressor.algorithm.algorithm": [[150, 2, 1, "", "ALGORITHMS"], [150, 2, 1, "", "Algorithm"], [150, 2, 1, "", "AlgorithmScheduler"], [150, 1, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.algorithm.ALGORITHMS": [[150, 4, 1, "", "support_algorithms"]], "neural_compressor.algorithm.algorithm.AlgorithmScheduler": [[150, 3, 1, "", "adaptor"], [150, 4, 1, "", "append_algorithm"], [150, 3, 1, "", "calib_iter"], [150, 3, 1, "", "dataloader"], [150, 3, 1, "", "origin_model"], [150, 3, 1, "", "q_model"], [150, 4, 1, "", "reset_exec_algorithms"]], "neural_compressor.algorithm.fast_bias_correction": [[151, 2, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[153, 2, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[154, 2, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[155, 2, 1, "", "Benchmark"], [155, 1, 1, "", "fit"], [155, 1, 1, "", "get_architecture"], [155, 1, 1, "", "get_bounded_threads"], [155, 1, 1, "", "get_core_ids"], [155, 1, 1, "", "get_physical_ids"], [155, 1, 1, "", "get_threads"], [155, 1, 1, "", "get_threads_per_core"], [155, 1, 1, "", "set_all_env_var"], [155, 1, 1, "", "set_env_var"]], "neural_compressor.benchmark.Benchmark": [[155, 3, 1, "", "b_dataloader"], [155, 3, 1, "", "b_func"], [155, 4, 1, "", "config_instance"], [155, 4, 1, "", "generate_prefix"], [155, 3, 1, "", "model"], [155, 3, 1, "", "results"], [155, 4, 1, "", "run_instance"], [155, 4, 1, "", "summary_benchmark"]], "neural_compressor.compression": [[159, 2, 1, "", "AwareTrainingQuantCallbacks"], [159, 2, 1, "", "DistillationCallbacks"], [159, 2, 1, "", "PruningCallbacks"], [156, 0, 0, "-", "callbacks"], [158, 0, 0, "-", "distillation"], [161, 0, 0, "-", "pruner"]], "neural_compressor.compression.DistillationCallbacks": [[159, 5, 1, "", "_epoch_ran"], [159, 5, 1, "", "best_model"], [159, 5, 1, "", "best_score"], [159, 4, 1, "", "create_criterion"], [159, 3, 1, "", "criterion"], [159, 5, 1, "", "eval_frequency"], [159, 4, 1, "", "generate_hooks"], [159, 4, 1, "", "init_train_cfg"], [159, 3, 1, "", "student_model"], [159, 3, 1, "", "teacher_model"], [159, 3, 1, "", "train_cfg"]], "neural_compressor.compression.PruningCallbacks": [[159, 4, 1, "", "generate_hooks"], [159, 4, 1, "", "on_train_end"]], "neural_compressor.compression.callbacks": [[156, 2, 1, "", "AwareTrainingQuantCallbacks"], [156, 2, 1, "", "BaseCallbacks"], [156, 2, 1, "", "DistillationCallbacks"], [156, 2, 1, "", "PruningCallbacks"]], "neural_compressor.compression.callbacks.BaseCallbacks": [[156, 3, 1, "", "eval_dataloader"], [156, 3, 1, "", "eval_func"], [156, 4, 1, "", "execute"], [156, 3, 1, "", "metric"], [156, 3, 1, "", "model"], [156, 4, 1, "", "on_after_compute_loss"], [156, 4, 1, "", "on_after_eval"], [156, 4, 1, "", "on_after_optimizer_step"], [156, 4, 1, "", "on_before_eval"], [156, 4, 1, "", "on_before_optimizer_step"], [156, 4, 1, "", "on_epoch_begin"], [156, 4, 1, "", "on_epoch_end"], [156, 4, 1, "", "on_step_begin"], [156, 4, 1, "", "on_step_end"], [156, 4, 1, "", "on_train_begin"], [156, 4, 1, "", "on_train_end"], [156, 4, 1, "", "pre_process"], [156, 4, 1, "", "register_hook"], [156, 4, 1, "", "remove_hook"], [156, 3, 1, "", "train_func"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[156, 5, 1, "", "_epoch_ran"], [156, 5, 1, "", "best_model"], [156, 5, 1, "", "best_score"], [156, 4, 1, "", "create_criterion"], [156, 3, 1, "", "criterion"], [156, 5, 1, "", "eval_frequency"], [156, 4, 1, "", "generate_hooks"], [156, 4, 1, "", "init_train_cfg"], [156, 3, 1, "", "student_model"], [156, 3, 1, "", "teacher_model"], [156, 3, 1, "", "train_cfg"]], "neural_compressor.compression.callbacks.PruningCallbacks": [[156, 4, 1, "", "generate_hooks"], [156, 4, 1, "", "on_train_end"]], "neural_compressor.compression.distillation": [[157, 0, 0, "-", "criterions"]], "neural_compressor.compression.distillation.criterions": [[157, 2, 1, "", "Criterions"], [157, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [157, 2, 1, "", "KnowledgeDistillationFramework"], [157, 2, 1, "", "KnowledgeDistillationLoss"], [157, 2, 1, "", "PyTorchCriterions"], [157, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [157, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [157, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [157, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [157, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [157, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [157, 2, 1, "", "SelfKnowledgeDistillationLoss"], [157, 2, 1, "", "TensorflowCriterions"], [157, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [157, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [157, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [157, 1, 1, "", "criterion_registry"]], "neural_compressor.compression.distillation.criterions.Criterions": [[157, 4, 1, "", "register"]], "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss": [[157, 4, 1, "", "clear_features"], [157, 4, 1, "", "init_feature_matcher"], [157, 4, 1, "", "init_loss_funcs"], [157, 4, 1, "", "loss_cal"], [157, 4, 1, "", "loss_cal_sloss"], [157, 4, 1, "", "teacher_model_forward"]], "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework": [[157, 3, 1, "", "student_model"], [157, 3, 1, "", "teacher_model"]], "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss": [[157, 4, 1, "", "loss_cal"], [157, 4, 1, "", "loss_cal_sloss"], [157, 4, 1, "", "student_targets_loss_cal"], [157, 4, 1, "", "teacher_model_forward"], [157, 4, 1, "", "teacher_student_loss_cal"]], "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss": [[157, 4, 1, "", "init_feature_matcher"], [157, 4, 1, "", "init_loss_funcs"], [157, 4, 1, "", "loss_cal"], [157, 4, 1, "", "loss_cal_sloss"], [157, 4, 1, "", "register_hooks_for_models"], [157, 4, 1, "", "remove_all_hooks"], [157, 4, 1, "", "teacher_model_forward"]], "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss": [[157, 4, 1, "", "KullbackLeiblerDivergence"], [157, 4, 1, "", "SoftCrossEntropy"], [157, 4, 1, "", "student_targets_loss_cal"], [157, 4, 1, "", "teacher_model_forward"], [157, 4, 1, "", "teacher_student_loss_cal"]], "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss": [[157, 4, 1, "", "KullbackLeiblerDivergence"], [157, 4, 1, "", "L2Divergence"], [157, 4, 1, "", "SoftCrossEntropy"], [157, 4, 1, "", "init_loss_funcs"], [157, 4, 1, "", "loss_cal"], [157, 4, 1, "", "teacher_model_forward"]], "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss": [[157, 4, 1, "", "init_loss_funcs"], [157, 4, 1, "", "loss_cal"], [157, 4, 1, "", "loss_cal_sloss"], [157, 4, 1, "", "teacher_model_forward"]], "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss": [[157, 4, 1, "", "SoftCrossEntropy"], [157, 4, 1, "", "student_targets_loss_cal"], [157, 4, 1, "", "teacher_model_forward"], [157, 4, 1, "", "teacher_student_loss_cal"]], "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal": [[157, 4, 1, "", "student_targets_loss_cal"], [157, 4, 1, "", "teacher_model_forward"], [157, 4, 1, "", "teacher_student_loss_cal"]], "neural_compressor.compression.pruner": [[160, 0, 0, "-", "criteria"], [162, 0, 0, "-", "patterns"], [163, 0, 0, "-", "pruners"], [164, 0, 0, "-", "regs"], [165, 0, 0, "-", "schedulers"], [166, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[160, 2, 1, "", "GradientCriterion"], [160, 2, 1, "", "MagnitudeCriterion"], [160, 2, 1, "", "PruningCriterion"], [160, 2, 1, "", "SnipCriterion"], [160, 2, 1, "", "SnipMomentumCriterion"], [160, 1, 1, "", "get_criterion"], [160, 1, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[160, 4, 1, "", "on_before_optimizer_step"], [160, 5, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[160, 4, 1, "", "on_step_begin"], [160, 5, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[160, 4, 1, "", "on_after_optimizer_step"], [160, 4, 1, "", "on_before_optimizer_step"], [160, 4, 1, "", "on_step_begin"], [160, 5, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[160, 4, 1, "", "on_before_optimizer_step"], [160, 5, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[160, 4, 1, "", "on_before_optimizer_step"], [160, 5, 1, "", "scores"]], "neural_compressor.compression.pruner.patterns": [[162, 2, 1, "", "BasePattern"], [162, 2, 1, "", "PatternNInM"], [162, 2, 1, "", "PatternNxM"], [162, 1, 1, "", "get_pattern"], [162, 1, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.BasePattern": [[162, 4, 1, "", "adjust_ratio"], [162, 4, 1, "", "check_layer_validity"], [162, 5, 1, "", "config"], [162, 4, 1, "", "get_block_size_dict"], [162, 4, 1, "", "get_masks"], [162, 4, 1, "", "get_masks_global"], [162, 4, 1, "", "get_masks_local"], [162, 4, 1, "", "get_pattern_lock_masks"], [162, 4, 1, "", "get_reduced_masks_from_data"], [162, 4, 1, "", "get_single_mask_per_target_ratio"], [162, 4, 1, "", "get_sparsity_ratio"], [162, 4, 1, "", "get_sparsity_ratio_each_layer"], [162, 5, 1, "", "invalid_layers"], [162, 5, 1, "", "is_global"], [162, 5, 1, "", "keep_mask_layers"], [162, 5, 1, "", "max_sparsity_ratio_per_op"], [162, 5, 1, "", "min_sparsity_ratio_per_op"], [162, 5, 1, "", "modules"], [162, 5, 1, "", "pattern"], [162, 4, 1, "", "reduce_tensor"], [162, 5, 1, "", "target_sparsity"], [162, 4, 1, "", "update_residual_cnt"]], "neural_compressor.compression.pruner.patterns.PatternNInM": [[162, 5, 1, "", "M"], [162, 5, 1, "", "N"], [162, 4, 1, "", "check_layer_validity"], [162, 4, 1, "", "get_ele_mask_per_threshold"], [162, 4, 1, "", "get_least_ninm_mask_from_data"], [162, 4, 1, "", "get_masks_global"], [162, 4, 1, "", "get_pattern_lock_masks"], [162, 4, 1, "", "get_reduced_masks_from_data"], [162, 4, 1, "", "get_sparsity_ratio"], [162, 4, 1, "", "reduce_scores"], [162, 4, 1, "", "reshape_orig_to_pattern"], [162, 4, 1, "", "reshape_reduced_to_orig"]], "neural_compressor.compression.pruner.patterns.PatternNxM": [[162, 5, 1, "", "block_size"], [162, 4, 1, "", "check_layer_validity"], [162, 4, 1, "", "count_new_masked_cnts"], [162, 4, 1, "", "get_block_size_dict"], [162, 4, 1, "", "get_mask_per_threshold"], [162, 4, 1, "", "get_masks_global"], [162, 4, 1, "", "get_pattern_lock_masks"], [162, 4, 1, "", "get_reduced_masks_from_data"], [162, 4, 1, "", "get_sparsity_ratio"], [162, 4, 1, "", "get_sparsity_ratio_progressive"], [162, 4, 1, "", "reduce_scores"], [162, 4, 1, "", "reshape_orig_to_pattern"], [162, 4, 1, "", "reshape_reduced_to_orig"], [162, 4, 1, "", "update_new_added_masks"], [162, 4, 1, "", "update_progressive_masks"], [162, 4, 1, "", "update_progressive_masks_global"], [162, 4, 1, "", "update_progressive_masks_linear"], [162, 4, 1, "", "update_progressive_masks_local"], [162, 4, 1, "", "update_progressive_masks_scores"]], "neural_compressor.compression.pruner.pruners": [[163, 2, 1, "", "BasePruner"], [163, 2, 1, "", "BasicPruner"], [163, 2, 1, "", "PatternLockPruner"], [163, 2, 1, "", "ProgressivePruner"], [163, 1, 1, "", "get_pruner"], [163, 1, 1, "", "parse_valid_pruner_types"], [163, 1, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.BasePruner": [[163, 4, 1, "", "check_is_pruned_step"], [163, 5, 1, "", "config"], [163, 5, 1, "", "current_sparsity_ratio"], [163, 5, 1, "", "end_step"], [163, 5, 1, "", "global_step"], [163, 4, 1, "", "mask_weights"], [163, 4, 1, "", "mask_weights_general"], [163, 5, 1, "", "masks"], [163, 5, 1, "", "max_sparsity_ratio_per_op"], [163, 5, 1, "", "modules"], [163, 4, 1, "", "on_after_eval"], [163, 4, 1, "", "on_after_optimizer_step"], [163, 4, 1, "", "on_before_eval"], [163, 4, 1, "", "on_before_optimizer_step"], [163, 4, 1, "", "on_epoch_begin"], [163, 4, 1, "", "on_epoch_end"], [163, 4, 1, "", "on_step_begin"], [163, 4, 1, "", "on_step_end"], [163, 4, 1, "", "on_train_begin"], [163, 4, 1, "", "on_train_end"], [163, 5, 1, "", "pattern"], [163, 5, 1, "", "pruning_frequency"], [163, 5, 1, "", "scheduler"], [163, 5, 1, "", "scores"], [163, 5, 1, "", "start_step"], [163, 5, 1, "", "target_sparsity_ratio"], [163, 4, 1, "", "update_masks"]], "neural_compressor.compression.pruner.pruners.BasicPruner": [[163, 5, 1, "", "criterion"], [163, 4, 1, "", "on_after_optimizer_step"], [163, 4, 1, "", "on_before_optimizer_step"], [163, 5, 1, "", "pattern"], [163, 5, 1, "", "reg"], [163, 5, 1, "", "scheduler"], [163, 4, 1, "", "set_global_step"], [163, 4, 1, "", "update_masks"]], "neural_compressor.compression.pruner.pruners.PatternLockPruner": [[163, 4, 1, "", "on_after_optimizer_step"], [163, 4, 1, "", "update_masks"]], "neural_compressor.compression.pruner.pruners.ProgressivePruner": [[163, 4, 1, "", "check_is_pruned_progressive_step"], [163, 4, 1, "", "check_progressive_validity"], [163, 4, 1, "", "on_after_optimizer_step"], [163, 4, 1, "", "on_before_optimizer_step"], [163, 4, 1, "", "on_step_begin"], [163, 4, 1, "", "print_progressive_sparsity"], [163, 4, 1, "", "update_masks_progressive"]], "neural_compressor.compression.pruner.regs": [[164, 2, 1, "", "BaseReg"], [164, 2, 1, "", "GroupLasso"], [164, 1, 1, "", "get_reg"], [164, 1, 1, "", "get_reg_type"], [164, 1, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.BaseReg": [[164, 4, 1, "", "on_after_optimizer_step"], [164, 4, 1, "", "on_before_optimizer_step"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[164, 5, 1, "", "alpha"], [164, 4, 1, "", "on_after_optimizer_step"], [164, 4, 1, "", "on_before_optimizer_step"], [164, 5, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[165, 2, 1, "", "IterativeScheduler"], [165, 2, 1, "", "OneshotScheduler"], [165, 2, 1, "", "PruningScheduler"], [165, 1, 1, "", "get_scheduler"], [165, 1, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.IterativeScheduler": [[165, 4, 1, "", "update_sparsity_ratio"]], "neural_compressor.compression.pruner.schedulers.OneshotScheduler": [[165, 4, 1, "", "update_sparsity_ratio"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[165, 5, 1, "", "config"], [165, 4, 1, "", "update_sparsity_ratio"]], "neural_compressor.compression.pruner.utils": [[166, 1, 1, "", "check_config"], [166, 1, 1, "", "check_key_validity"], [166, 1, 1, "", "generate_pruner_config"], [166, 1, 1, "", "get_sparsity_ratio"], [166, 1, 1, "", "parse_to_prune"], [166, 1, 1, "", "process_and_check_config"], [166, 1, 1, "", "process_config"], [166, 1, 1, "", "process_weight_config"], [166, 1, 1, "", "process_yaml_config"], [166, 1, 1, "", "reset_none_to_default"], [166, 1, 1, "", "update_params"]], "neural_compressor.conf": [[167, 0, 0, "-", "config"], [168, 0, 0, "-", "dotdict"], [170, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[167, 2, 1, "", "Benchmark_Conf"], [167, 2, 1, "", "Conf"], [167, 2, 1, "", "Distillation_Conf"], [167, 2, 1, "", "Graph_Optimization_Conf"], [167, 2, 1, "", "MixedPrecision_Conf"], [167, 2, 1, "", "NASConfig"], [167, 2, 1, "", "PrunerV2"], [167, 2, 1, "", "Pruning_Conf"], [167, 2, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[168, 2, 1, "", "DotDict"], [168, 1, 1, "", "deep_get"], [168, 1, 1, "", "deep_set"]], "neural_compressor.config": [[171, 2, 1, "", "AccuracyCriterion"], [171, 2, 1, "", "BenchmarkConfig"], [171, 2, 1, "", "DistillationConfig"], [171, 2, 1, "", "ExportConfig"], [171, 2, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [171, 2, 1, "", "KnowledgeDistillationLossConfig"], [171, 2, 1, "", "MixedPrecisionConfig"], [171, 2, 1, "", "ONNXQlinear2QDQConfig"], [171, 2, 1, "", "Options"], [171, 2, 1, "", "PostTrainingQuantConfig"], [171, 2, 1, "", "QuantizationAwareTrainingConfig"], [171, 2, 1, "", "SelfKnowledgeDistillationLossConfig"], [171, 2, 1, "", "TF2ONNXConfig"], [171, 2, 1, "", "Torch2ONNXConfig"], [171, 2, 1, "", "TuningCriterion"], [171, 2, 1, "", "WeightPruningConfig"], [171, 1, 1, "", "check_value"]], "neural_compressor.config.AccuracyCriterion": [[171, 3, 1, "", "absolute"], [171, 3, 1, "", "criterion"], [171, 3, 1, "", "higher_is_better"], [171, 3, 1, "", "relative"], [171, 3, 1, "", "tolerable_loss"]], "neural_compressor.config.BenchmarkConfig": [[171, 3, 1, "", "backend"], [171, 3, 1, "", "cores_per_instance"], [171, 3, 1, "", "inputs"], [171, 3, 1, "", "inter_num_of_threads"], [171, 3, 1, "", "intra_num_of_threads"], [171, 3, 1, "", "iteration"], [171, 3, 1, "", "num_of_instance"], [171, 3, 1, "", "outputs"], [171, 3, 1, "", "warmup"]], "neural_compressor.config.DistillationConfig": [[171, 3, 1, "", "criterion"], [171, 3, 1, "", "optimizer"], [171, 3, 1, "", "teacher_model"]], "neural_compressor.config.ExportConfig": [[171, 3, 1, "", "dtype"], [171, 3, 1, "", "dynamic_axes"], [171, 3, 1, "", "example_inputs"], [171, 3, 1, "", "input_names"], [171, 3, 1, "", "opset_version"], [171, 3, 1, "", "output_names"], [171, 3, 1, "", "quant_format"]], "neural_compressor.config.Options": [[171, 3, 1, "", "random_seed"], [171, 3, 1, "", "resume_from"], [171, 3, 1, "", "tensorboard"], [171, 3, 1, "", "workspace"]], "neural_compressor.config.PostTrainingQuantConfig": [[171, 3, 1, "", "approach"], [171, 3, 1, "", "tuning_criterion"]], "neural_compressor.config.QuantizationAwareTrainingConfig": [[171, 3, 1, "", "approach"]], "neural_compressor.config.TuningCriterion": [[171, 3, 1, "", "max_trials"], [171, 3, 1, "", "objective"], [171, 3, 1, "", "strategy"], [171, 3, 1, "", "strategy_kwargs"], [171, 3, 1, "", "timeout"]], "neural_compressor.config.WeightPruningConfig": [[171, 3, 1, "", "weight_compression"]], "neural_compressor.contrib": [[173, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[174, 0, 0, "-", "sigopt"], [175, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[174, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy": [[174, 4, 1, "", "create_exp"], [174, 4, 1, "", "get_acc_target"], [174, 4, 1, "", "next_tune_cfg"], [174, 4, 1, "", "params_to_tune_configs"], [174, 4, 1, "", "traverse"]], "neural_compressor.contrib.strategy.tpe": [[175, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy": [[175, 4, 1, "", "add_loss_to_tuned_history_and_find_best"], [175, 4, 1, "", "calculate_loss"], [175, 4, 1, "", "object_evaluation"], [175, 4, 1, "", "stop"], [175, 4, 1, "", "traverse"]], "neural_compressor.data": [[197, 2, 1, "", "BaseTransform"], [197, 2, 1, "", "BilinearImagenetTransform"], [197, 2, 1, "", "COCORecordDataset"], [197, 2, 1, "", "ComposeTransform"], [197, 2, 1, "", "DataLoader"], [197, 2, 1, "", "Dataset"], [197, 2, 1, "", "Datasets"], [197, 2, 1, "", "DefaultDataLoader"], [197, 2, 1, "", "FILTERS"], [197, 2, 1, "", "Filter"], [197, 2, 1, "", "IterableDataset"], [197, 2, 1, "", "LabelBalanceCOCORecordFilter"], [197, 2, 1, "", "LabelShift"], [197, 2, 1, "", "NormalizeTFTransform"], [197, 2, 1, "", "ParseDecodeCocoTransform"], [197, 2, 1, "", "Postprocess"], [197, 2, 1, "", "RescaleTFTransform"], [197, 2, 1, "", "ResizeTFTransform"], [197, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [197, 2, 1, "", "TFSquadV1PostTransform"], [197, 2, 1, "", "TRANSFORMS"], [197, 2, 1, "", "TensorflowImageRecord"], [197, 2, 1, "", "TensorflowResizeCropImagenetTransform"], [197, 2, 1, "", "TensorflowResizeWithRatio"], [180, 0, 0, "-", "dataloaders"], [197, 1, 1, "", "dataset_registry"], [192, 0, 0, "-", "datasets"], [197, 1, 1, "", "filter_registry"], [196, 0, 0, "-", "filters"], [197, 1, 1, "", "transform_registry"], [200, 0, 0, "-", "transforms"]], "neural_compressor.data.DefaultDataLoader": [[197, 4, 1, "", "batch"], [197, 3, 1, "", "dataloader"]], "neural_compressor.data.TFSquadV1PostTransform": [[197, 4, 1, "", "get_postprocess_result"], [197, 4, 1, "", "process_result"]], "neural_compressor.data.TRANSFORMS": [[197, 4, 1, "", "register"]], "neural_compressor.data.dataloaders": [[180, 2, 1, "", "DataLoader"], [176, 0, 0, "-", "base_dataloader"], [177, 0, 0, "-", "dataloader"], [178, 0, 0, "-", "default_dataloader"], [179, 0, 0, "-", "fetcher"], [181, 0, 0, "-", "mxnet_dataloader"], [182, 0, 0, "-", "onnxrt_dataloader"], [183, 0, 0, "-", "pytorch_dataloader"], [184, 0, 0, "-", "sampler"], [185, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[176, 2, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader": [[176, 4, 1, "", "batch"], [176, 3, 1, "", "batch_size"]], "neural_compressor.data.dataloaders.dataloader": [[177, 2, 1, "", "DataLoader"]], "neural_compressor.data.dataloaders.default_dataloader": [[178, 2, 1, "", "DefaultDataLoader"], [178, 1, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader": [[178, 4, 1, "", "batch"], [178, 3, 1, "", "dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[179, 2, 1, "", "Fetcher"], [179, 2, 1, "", "IndexFetcher"], [179, 2, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[181, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[182, 2, 1, "", "ONNXRTBertDataLoader"], [182, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[183, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[184, 2, 1, "", "BatchSampler"], [184, 2, 1, "", "IterableSampler"], [184, 2, 1, "", "Sampler"], [184, 2, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[185, 2, 1, "", "TFDataDataLoader"], [185, 2, 1, "", "TensorflowBertDataLoader"], [185, 2, 1, "", "TensorflowDataLoader"], [185, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[185, 4, 1, "", "batch"]], "neural_compressor.data.datasets": [[192, 2, 1, "", "COCORecordDataset"], [192, 2, 1, "", "Dataset"], [192, 2, 1, "", "Datasets"], [192, 2, 1, "", "IterableDataset"], [192, 2, 1, "", "TensorflowImageRecord"], [186, 0, 0, "-", "bert_dataset"], [187, 0, 0, "-", "coco_dataset"], [188, 0, 0, "-", "dataset"], [192, 1, 1, "", "dataset_registry"], [189, 0, 0, "-", "dummy_dataset"], [190, 0, 0, "-", "dummy_dataset_v2"], [191, 0, 0, "-", "imagenet_dataset"], [193, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[186, 2, 1, "", "InputFeatures"], [186, 2, 1, "", "ONNXRTBertDataset"], [186, 2, 1, "", "ParseDecodeBert"], [186, 2, 1, "", "PytorchBertDataset"], [186, 2, 1, "", "TensorflowBertDataset"], [186, 2, 1, "", "TensorflowModelZooBertDataset"], [186, 1, 1, "", "convert_examples_to_features"], [186, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset.InputFeatures": [[186, 4, 1, "", "to_json_string"]], "neural_compressor.data.datasets.coco_dataset": [[187, 2, 1, "", "COCONpy"], [187, 2, 1, "", "COCORaw"], [187, 2, 1, "", "COCORecordDataset"], [187, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[188, 2, 1, "", "CIFAR10"], [188, 2, 1, "", "CIFAR100"], [188, 2, 1, "", "Dataset"], [188, 2, 1, "", "Datasets"], [188, 2, 1, "", "FashionMNIST"], [188, 2, 1, "", "ImageFolder"], [188, 2, 1, "", "IterableDataset"], [188, 2, 1, "", "MNIST"], [188, 2, 1, "", "MXNetCIFAR10"], [188, 2, 1, "", "MXNetCIFAR100"], [188, 2, 1, "", "MXNetDatasets"], [188, 2, 1, "", "MXNetFashionMNIST"], [188, 2, 1, "", "MXNetImageFolder"], [188, 2, 1, "", "MXNetMNIST"], [188, 2, 1, "", "ONNXRTITDatasets"], [188, 2, 1, "", "ONNXRTQLDatasets"], [188, 2, 1, "", "PyTorchDatasets"], [188, 2, 1, "", "PytorchCIFAR10"], [188, 2, 1, "", "PytorchCIFAR100"], [188, 2, 1, "", "PytorchFashionMNIST"], [188, 2, 1, "", "PytorchMNIST"], [188, 2, 1, "", "PytorchMxnetWrapDataset"], [188, 2, 1, "", "PytorchMxnetWrapFunction"], [188, 2, 1, "", "Tensorflow"], [188, 2, 1, "", "TensorflowCIFAR10"], [188, 2, 1, "", "TensorflowCIFAR100"], [188, 2, 1, "", "TensorflowDatasets"], [188, 2, 1, "", "TensorflowFashionMNIST"], [188, 2, 1, "", "TensorflowImageRecord"], [188, 2, 1, "", "TensorflowMNIST"], [188, 2, 1, "", "TensorflowTFRecordDataset"], [188, 2, 1, "", "TensorflowVOCRecord"], [188, 1, 1, "", "calculate_md5"], [188, 1, 1, "", "check_integrity"], [188, 1, 1, "", "dataset_registry"], [188, 1, 1, "", "download_url"], [188, 6, 1, "", "framework_datasets"], [188, 1, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dataset.CIFAR10": [[188, 4, 1, "", "download"], [188, 4, 1, "", "load_meta"]], "neural_compressor.data.datasets.dataset.FashionMNIST": [[188, 4, 1, "", "read_data"]], "neural_compressor.data.datasets.dataset.MNIST": [[188, 3, 1, "", "class_to_idx"], [188, 4, 1, "", "download"], [188, 4, 1, "", "read_data"]], "neural_compressor.data.datasets.dummy_dataset": [[189, 2, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[190, 2, 1, "", "DummyDataset"], [190, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[191, 2, 1, "", "ImagenetRaw"], [191, 2, 1, "", "MXNetImagenetRaw"], [191, 2, 1, "", "ONNXRTImagenetDataset"], [191, 2, 1, "", "PytorchImagenetRaw"], [191, 2, 1, "", "TensorflowImagenetDataset"], [191, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[193, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[196, 2, 1, "", "FILTERS"], [196, 2, 1, "", "Filter"], [196, 2, 1, "", "LabelBalanceCOCORecordFilter"], [194, 0, 0, "-", "coco_filter"], [195, 0, 0, "-", "filter"], [196, 1, 1, "", "filter_registry"]], "neural_compressor.data.filters.coco_filter": [[194, 2, 1, "", "LabelBalanceCOCORawFilter"], [194, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[195, 2, 1, "", "FILTERS"], [195, 2, 1, "", "Filter"], [195, 2, 1, "", "MXNetFilters"], [195, 2, 1, "", "ONNXRTITFilters"], [195, 2, 1, "", "ONNXRTQLFilters"], [195, 2, 1, "", "PyTorchFilters"], [195, 2, 1, "", "TensorflowFilters"], [195, 1, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[200, 2, 1, "", "BaseTransform"], [200, 2, 1, "", "BilinearImagenetTransform"], [200, 2, 1, "", "ComposeTransform"], [200, 2, 1, "", "LabelShift"], [200, 2, 1, "", "NormalizeTFTransform"], [200, 2, 1, "", "ParseDecodeCocoTransform"], [200, 2, 1, "", "Postprocess"], [200, 2, 1, "", "RescaleTFTransform"], [200, 2, 1, "", "ResizeTFTransform"], [200, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [200, 2, 1, "", "TFSquadV1PostTransform"], [200, 2, 1, "", "TRANSFORMS"], [200, 2, 1, "", "TensorflowResizeCropImagenetTransform"], [200, 2, 1, "", "TensorflowResizeWithRatio"], [198, 0, 0, "-", "coco_transform"], [199, 0, 0, "-", "imagenet_transform"], [201, 0, 0, "-", "postprocess"], [202, 0, 0, "-", "tokenization"], [203, 0, 0, "-", "transform"], [200, 1, 1, "", "transform_registry"]], "neural_compressor.data.transforms.TFSquadV1PostTransform": [[200, 4, 1, "", "get_postprocess_result"], [200, 4, 1, "", "process_result"]], "neural_compressor.data.transforms.TRANSFORMS": [[200, 4, 1, "", "register"]], "neural_compressor.data.transforms.coco_transform": [[198, 2, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[199, 2, 1, "", "BilinearImagenetTransform"], [199, 2, 1, "", "LabelShift"], [199, 2, 1, "", "ONNXResizeCropImagenetTransform"], [199, 2, 1, "", "OnnxBilinearImagenetTransform"], [199, 2, 1, "", "ParseDecodeImagenet"], [199, 2, 1, "", "ParseDecodeImagenetTransform"], [199, 2, 1, "", "QuantizedInput"], [199, 2, 1, "", "ResizeWithAspectRatio"], [199, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.postprocess": [[201, 2, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[202, 2, 1, "", "BasicTokenizer"], [202, 2, 1, "", "FullTokenizer"], [202, 2, 1, "", "WordpieceTokenizer"], [202, 1, 1, "", "convert_by_vocab"], [202, 1, 1, "", "convert_to_unicode"], [202, 1, 1, "", "load_vocab"], [202, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.tokenization.BasicTokenizer": [[202, 4, 1, "", "tokenize"]], "neural_compressor.data.transforms.tokenization.FullTokenizer": [[202, 4, 1, "", "convert_ids_to_tokens"], [202, 4, 1, "", "convert_tokens_to_ids"], [202, 4, 1, "", "tokenize"]], "neural_compressor.data.transforms.tokenization.WordpieceTokenizer": [[202, 4, 1, "", "tokenize"]], "neural_compressor.data.transforms.transform": [[203, 2, 1, "", "AlignImageChannelTransform"], [203, 2, 1, "", "BaseTransform"], [203, 2, 1, "", "CastONNXTransform"], [203, 2, 1, "", "CastPyTorchTransform"], [203, 2, 1, "", "CastTFTransform"], [203, 2, 1, "", "CenterCropTFTransform"], [203, 2, 1, "", "CenterCropTransform"], [203, 2, 1, "", "CollectTransform"], [203, 2, 1, "", "ComposeTransform"], [203, 2, 1, "", "CropResizeTFTransform"], [203, 2, 1, "", "CropResizeTransform"], [203, 2, 1, "", "CropToBoundingBox"], [203, 2, 1, "", "InputFeatures"], [203, 2, 1, "", "MXNetCropResizeTransform"], [203, 2, 1, "", "MXNetCropToBoundingBox"], [203, 2, 1, "", "MXNetNormalizeTransform"], [203, 2, 1, "", "MXNetTransforms"], [203, 2, 1, "", "MXNetTranspose"], [203, 2, 1, "", "NormalizeTFTransform"], [203, 2, 1, "", "NormalizeTransform"], [203, 2, 1, "", "ONNXRTCropToBoundingBox"], [203, 2, 1, "", "ONNXRTITTransforms"], [203, 2, 1, "", "ONNXRTQLTransforms"], [203, 2, 1, "", "PaddedCenterCropTransform"], [203, 2, 1, "", "ParseDecodeVocTransform"], [203, 2, 1, "", "PyTorchAlignImageChannel"], [203, 2, 1, "", "PyTorchCropResizeTransform"], [203, 2, 1, "", "PyTorchNormalizeTransform"], [203, 2, 1, "", "PyTorchTransforms"], [203, 2, 1, "", "PyTorchTranspose"], [203, 2, 1, "", "PytorchMxnetTransform"], [203, 2, 1, "", "PytorchMxnetWrapFunction"], [203, 2, 1, "", "RandomCropTFTransform"], [203, 2, 1, "", "RandomCropTransform"], [203, 2, 1, "", "RandomHorizontalFlip"], [203, 2, 1, "", "RandomResizedCropMXNetTransform"], [203, 2, 1, "", "RandomResizedCropPytorchTransform"], [203, 2, 1, "", "RandomResizedCropTFTransform"], [203, 2, 1, "", "RandomResizedCropTransform"], [203, 2, 1, "", "RandomVerticalFlip"], [203, 2, 1, "", "RescaleKerasPretrainTransform"], [203, 2, 1, "", "RescaleTFTransform"], [203, 2, 1, "", "RescaleTransform"], [203, 2, 1, "", "ResizeMXNetTransform"], [203, 2, 1, "", "ResizePytorchTransform"], [203, 2, 1, "", "ResizeTFTransform"], [203, 2, 1, "", "ResizeTransform"], [203, 2, 1, "", "ResizeWithRatio"], [203, 2, 1, "", "SquadExample"], [203, 2, 1, "", "TFModelZooCollectTransform"], [203, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [203, 2, 1, "", "TFSquadV1PostTransform"], [203, 2, 1, "", "TRANSFORMS"], [203, 2, 1, "", "TensorflowCropToBoundingBox"], [203, 2, 1, "", "TensorflowRandomHorizontalFlip"], [203, 2, 1, "", "TensorflowRandomVerticalFlip"], [203, 2, 1, "", "TensorflowResizeWithRatio"], [203, 2, 1, "", "TensorflowTransform"], [203, 2, 1, "", "TensorflowTransforms"], [203, 2, 1, "", "TensorflowTranspose"], [203, 2, 1, "", "TensorflowWrapFunction"], [203, 2, 1, "", "ToArray"], [203, 2, 1, "", "ToNDArrayTransform"], [203, 2, 1, "", "Transforms"], [203, 2, 1, "", "Transpose"], [203, 1, 1, "", "convert_examples_to_features"], [203, 1, 1, "", "get_final_text"], [203, 1, 1, "", "get_torchvision_map"], [203, 1, 1, "", "read_squad_examples"], [203, 1, 1, "", "transform_registry"]], "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform": [[203, 4, 1, "", "get_params"]], "neural_compressor.data.transforms.transform.RandomResizedCropTransform": [[203, 4, 1, "", "get_params"]], "neural_compressor.data.transforms.transform.TFSquadV1PostTransform": [[203, 4, 1, "", "get_postprocess_result"], [203, 4, 1, "", "process_result"]], "neural_compressor.data.transforms.transform.TRANSFORMS": [[203, 4, 1, "", "register"]], "neural_compressor.experimental": [[247, 2, 1, "", "Benchmark"], [247, 2, 1, "", "Component"], [247, 2, 1, "", "Distillation"], [247, 2, 1, "", "Graph_Optimization"], [247, 2, 1, "", "MixedPrecision"], [247, 2, 1, "", "ModelConversion"], [247, 2, 1, "", "NAS"], [247, 2, 1, "", "Pruning"], [247, 2, 1, "", "Quantization"], [204, 0, 0, "-", "benchmark"], [207, 0, 0, "-", "common"], [213, 0, 0, "-", "component"], [235, 0, 0, "-", "data"], [240, 0, 0, "-", "distillation"], [241, 0, 0, "-", "export"], [246, 0, 0, "-", "graph_optimization"], [254, 0, 0, "-", "metric"], [256, 0, 0, "-", "mixed_precision"], [257, 0, 0, "-", "model_conversion"], [270, 0, 0, "-", "nas"], [276, 0, 0, "-", "pruner_legacy"], [280, 0, 0, "-", "pruning"], [281, 0, 0, "-", "pruning_recipes"], [285, 0, 0, "-", "pruning_v2"], [286, 0, 0, "-", "pytorch_pruner"], [293, 0, 0, "-", "quantization"], [294, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.Benchmark": [[247, 3, 1, "", "b_dataloader"], [247, 3, 1, "", "b_func"], [247, 4, 1, "", "call_one"], [247, 4, 1, "", "config_instance"], [247, 4, 1, "", "generate_prefix"], [247, 3, 1, "", "metric"], [247, 3, 1, "", "model"], [247, 3, 1, "", "postprocess"], [247, 3, 1, "", "results"], [247, 4, 1, "", "run_instance"], [247, 4, 1, "", "summary_benchmark"]], "neural_compressor.experimental.Component": [[247, 3, 1, "", "eval_dataloader"], [247, 3, 1, "", "eval_func"], [247, 4, 1, "", "execute"], [247, 3, 1, "", "model"], [247, 4, 1, "", "on_after_compute_loss"], [247, 4, 1, "", "on_after_eval"], [247, 4, 1, "", "on_after_optimizer_step"], [247, 4, 1, "", "on_batch_begin"], [247, 4, 1, "", "on_batch_end"], [247, 4, 1, "", "on_before_eval"], [247, 4, 1, "", "on_before_optimizer_step"], [247, 4, 1, "", "on_epoch_begin"], [247, 4, 1, "", "on_epoch_end"], [247, 4, 1, "", "on_post_grad"], [247, 4, 1, "", "on_step_begin"], [247, 4, 1, "", "on_step_end"], [247, 4, 1, "", "on_train_begin"], [247, 4, 1, "", "on_train_end"], [247, 4, 1, "", "post_epoch_end"], [247, 4, 1, "", "post_process"], [247, 4, 1, "", "pre_epoch_begin"], [247, 4, 1, "", "pre_process"], [247, 4, 1, "", "prepare"], [247, 4, 1, "", "prepare_qat"], [247, 4, 1, "", "register_hook"], [247, 3, 1, "", "train_dataloader"], [247, 3, 1, "", "train_func"]], "neural_compressor.experimental.Distillation": [[247, 5, 1, "", "_epoch_ran"], [247, 5, 1, "", "best_model"], [247, 5, 1, "", "best_score"], [247, 4, 1, "", "create_criterion"], [247, 4, 1, "", "create_optimizer"], [247, 3, 1, "", "criterion"], [247, 5, 1, "", "eval_frequency"], [247, 3, 1, "", "evaluation_distributed"], [247, 4, 1, "", "execute"], [247, 4, 1, "", "generate_hooks"], [247, 4, 1, "", "init_train_cfg"], [247, 4, 1, "", "on_post_forward"], [247, 3, 1, "", "optimizer"], [247, 4, 1, "", "pre_process"], [247, 4, 1, "", "prepare"], [247, 3, 1, "", "student_model"], [247, 3, 1, "", "teacher_model"], [247, 3, 1, "", "train_cfg"], [247, 3, 1, "", "train_distributed"]], "neural_compressor.experimental.Graph_Optimization": [[247, 4, 1, "", "dataset"], [247, 3, 1, "", "eval_dataloader"], [247, 3, 1, "", "eval_func"], [247, 3, 1, "", "input"], [247, 3, 1, "", "metric"], [247, 3, 1, "", "model"], [247, 3, 1, "", "output"], [247, 3, 1, "", "postprocess"], [247, 3, 1, "", "precisions"], [247, 4, 1, "", "set_config_by_model"]], "neural_compressor.experimental.MixedPrecision": [[247, 3, 1, "", "precisions"], [247, 4, 1, "", "set_config_by_model"]], "neural_compressor.experimental.ModelConversion": [[247, 4, 1, "", "dataset"], [247, 3, 1, "", "destination"], [247, 3, 1, "", "eval_dataloader"], [247, 3, 1, "", "eval_func"], [247, 3, 1, "", "metric"], [247, 3, 1, "", "model"], [247, 3, 1, "", "postprocess"], [247, 3, 1, "", "source"]], "neural_compressor.experimental.Pruning": [[247, 5, 1, "", "conf"], [247, 3, 1, "", "evaluation_distributed"], [247, 4, 1, "", "execute"], [247, 4, 1, "", "generate_hooks"], [247, 4, 1, "", "generate_pruners"], [247, 4, 1, "", "get_sparsity_ratio"], [247, 4, 1, "", "pre_process"], [247, 4, 1, "", "prepare"], [247, 5, 1, "", "pruners"], [247, 3, 1, "", "pruning_func"], [247, 3, 1, "", "train_distributed"], [247, 4, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.Quantization": [[247, 3, 1, "", "calib_dataloader"], [247, 4, 1, "", "dataset"], [247, 4, 1, "", "distributed_execute"], [247, 4, 1, "", "execute"], [247, 3, 1, "", "metric"], [247, 3, 1, "", "model"], [247, 3, 1, "", "objective"], [247, 3, 1, "", "postprocess"], [247, 4, 1, "", "pre_process"], [247, 3, 1, "", "q_func"]], "neural_compressor.experimental.benchmark": [[204, 2, 1, "", "Benchmark"], [204, 1, 1, "", "get_architecture"], [204, 1, 1, "", "get_bounded_threads"], [204, 1, 1, "", "get_core_ids"], [204, 1, 1, "", "get_physical_ids"], [204, 1, 1, "", "get_threads"], [204, 1, 1, "", "get_threads_per_core"], [204, 1, 1, "", "set_all_env_var"], [204, 1, 1, "", "set_env_var"]], "neural_compressor.experimental.benchmark.Benchmark": [[204, 3, 1, "", "b_dataloader"], [204, 3, 1, "", "b_func"], [204, 4, 1, "", "call_one"], [204, 4, 1, "", "config_instance"], [204, 4, 1, "", "generate_prefix"], [204, 3, 1, "", "metric"], [204, 3, 1, "", "model"], [204, 3, 1, "", "postprocess"], [204, 3, 1, "", "results"], [204, 4, 1, "", "run_instance"], [204, 4, 1, "", "summary_benchmark"]], "neural_compressor.experimental.common": [[207, 2, 1, "", "DataLoader"], [207, 2, 1, "", "Metric"], [207, 2, 1, "", "Model"], [207, 2, 1, "", "Postprocess"], [205, 0, 0, "-", "criterion"], [206, 0, 0, "-", "dataloader"], [208, 0, 0, "-", "metric"], [209, 0, 0, "-", "model"], [210, 0, 0, "-", "optimizer"], [211, 0, 0, "-", "postprocess"], [212, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[205, 2, 1, "", "Criterions"], [205, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [205, 2, 1, "", "KnowledgeDistillationFramework"], [205, 2, 1, "", "KnowledgeDistillationLoss"], [205, 2, 1, "", "PyTorchCriterions"], [205, 2, 1, "", "PyTorchCrossEntropyLoss"], [205, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [205, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [205, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [205, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [205, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [205, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [205, 2, 1, "", "SelfKnowledgeDistillationLoss"], [205, 2, 1, "", "TensorFlowCrossEntropyLoss"], [205, 2, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [205, 2, 1, "", "TensorflowCriterions"], [205, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [205, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [205, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [205, 1, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.criterion.Criterions": [[205, 4, 1, "", "register"]], "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss": [[205, 4, 1, "", "clear_features"], [205, 4, 1, "", "init_feature_matcher"], [205, 4, 1, "", "init_loss_funcs"], [205, 4, 1, "", "loss_cal"], [205, 4, 1, "", "loss_cal_sloss"], [205, 4, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework": [[205, 3, 1, "", "student_model"], [205, 3, 1, "", "teacher_model"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss": [[205, 4, 1, "", "loss_cal"], [205, 4, 1, "", "loss_cal_sloss"], [205, 4, 1, "", "student_targets_loss_cal"], [205, 4, 1, "", "teacher_model_forward"], [205, 4, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss": [[205, 4, 1, "", "init_feature_matcher"], [205, 4, 1, "", "init_loss_funcs"], [205, 4, 1, "", "loss_cal"], [205, 4, 1, "", "loss_cal_sloss"], [205, 4, 1, "", "register_hooks_for_models"], [205, 4, 1, "", "remove_all_hooks"], [205, 4, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss": [[205, 4, 1, "", "KullbackLeiblerDivergence"], [205, 4, 1, "", "SoftCrossEntropy"], [205, 4, 1, "", "student_targets_loss_cal"], [205, 4, 1, "", "teacher_model_forward"], [205, 4, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss": [[205, 4, 1, "", "KullbackLeiblerDivergence"], [205, 4, 1, "", "L2Divergence"], [205, 4, 1, "", "SoftCrossEntropy"], [205, 4, 1, "", "init_loss_funcs"], [205, 4, 1, "", "loss_cal"], [205, 4, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss": [[205, 4, 1, "", "init_loss_funcs"], [205, 4, 1, "", "loss_cal"], [205, 4, 1, "", "loss_cal_sloss"], [205, 4, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss": [[205, 4, 1, "", "SoftCrossEntropy"], [205, 4, 1, "", "student_targets_loss_cal"], [205, 4, 1, "", "teacher_model_forward"], [205, 4, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal": [[205, 4, 1, "", "student_targets_loss_cal"], [205, 4, 1, "", "teacher_model_forward"], [205, 4, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.dataloader": [[206, 2, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[208, 2, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[209, 2, 1, "", "Model"], [209, 1, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[210, 2, 1, "", "Optimizers"], [210, 2, 1, "", "PyTorchOptimizers"], [210, 2, 1, "", "PyTorchSGD"], [210, 2, 1, "", "TensorFlowAdam"], [210, 2, 1, "", "TensorFlowAdamW"], [210, 2, 1, "", "TensorFlowSGD"], [210, 2, 1, "", "TensorflowOptimizers"], [210, 1, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.optimizer.Optimizers": [[210, 4, 1, "", "register"]], "neural_compressor.experimental.common.postprocess": [[211, 2, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[212, 1, 1, "", "get_activation"], [212, 1, 1, "", "record_output"]], "neural_compressor.experimental.component": [[213, 2, 1, "", "Component"]], "neural_compressor.experimental.component.Component": [[213, 3, 1, "", "eval_dataloader"], [213, 3, 1, "", "eval_func"], [213, 4, 1, "", "execute"], [213, 3, 1, "", "model"], [213, 4, 1, "", "on_after_compute_loss"], [213, 4, 1, "", "on_after_eval"], [213, 4, 1, "", "on_after_optimizer_step"], [213, 4, 1, "", "on_batch_begin"], [213, 4, 1, "", "on_batch_end"], [213, 4, 1, "", "on_before_eval"], [213, 4, 1, "", "on_before_optimizer_step"], [213, 4, 1, "", "on_epoch_begin"], [213, 4, 1, "", "on_epoch_end"], [213, 4, 1, "", "on_post_grad"], [213, 4, 1, "", "on_step_begin"], [213, 4, 1, "", "on_step_end"], [213, 4, 1, "", "on_train_begin"], [213, 4, 1, "", "on_train_end"], [213, 4, 1, "", "post_epoch_end"], [213, 4, 1, "", "post_process"], [213, 4, 1, "", "pre_epoch_begin"], [213, 4, 1, "", "pre_process"], [213, 4, 1, "", "prepare"], [213, 4, 1, "", "prepare_qat"], [213, 4, 1, "", "register_hook"], [213, 3, 1, "", "train_dataloader"], [213, 3, 1, "", "train_func"]], "neural_compressor.experimental.data": [[235, 2, 1, "", "BaseTransform"], [235, 2, 1, "", "Dataset"], [235, 2, 1, "", "Datasets"], [235, 2, 1, "", "FILTERS"], [235, 2, 1, "", "Filter"], [235, 2, 1, "", "IterableDataset"], [235, 2, 1, "", "TRANSFORMS"], [218, 0, 0, "-", "dataloaders"], [235, 1, 1, "", "dataset_registry"], [230, 0, 0, "-", "datasets"], [235, 1, 1, "", "filter_registry"], [234, 0, 0, "-", "filters"], [235, 1, 1, "", "transform_registry"], [237, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.TRANSFORMS": [[235, 4, 1, "", "register"]], "neural_compressor.experimental.data.dataloaders": [[214, 0, 0, "-", "base_dataloader"], [215, 0, 0, "-", "dataloader"], [216, 0, 0, "-", "default_dataloader"], [217, 0, 0, "-", "fetcher"], [219, 0, 0, "-", "mxnet_dataloader"], [220, 0, 0, "-", "onnxrt_dataloader"], [221, 0, 0, "-", "pytorch_dataloader"], [222, 0, 0, "-", "sampler"], [223, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[214, 2, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader": [[214, 4, 1, "", "batch"], [214, 3, 1, "", "batch_size"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[216, 2, 1, "", "DefaultDataLoader"], [216, 1, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader": [[216, 4, 1, "", "batch"], [216, 3, 1, "", "dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[217, 2, 1, "", "Fetcher"], [217, 2, 1, "", "IndexFetcher"], [217, 2, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[219, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[220, 2, 1, "", "ONNXRTBertDataLoader"], [220, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[221, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[222, 2, 1, "", "BatchSampler"], [222, 2, 1, "", "IterableSampler"], [222, 2, 1, "", "Sampler"], [222, 2, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[223, 2, 1, "", "TFDataDataLoader"], [223, 2, 1, "", "TensorflowBertDataLoader"], [223, 2, 1, "", "TensorflowDataLoader"], [223, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[223, 4, 1, "", "batch"]], "neural_compressor.experimental.data.datasets": [[230, 2, 1, "", "Dataset"], [230, 2, 1, "", "Datasets"], [230, 2, 1, "", "IterableDataset"], [224, 0, 0, "-", "bert_dataset"], [225, 0, 0, "-", "coco_dataset"], [226, 0, 0, "-", "dataset"], [230, 1, 1, "", "dataset_registry"], [227, 0, 0, "-", "dummy_dataset"], [228, 0, 0, "-", "dummy_dataset_v2"], [229, 0, 0, "-", "imagenet_dataset"], [231, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[224, 2, 1, "", "InputFeatures"], [224, 2, 1, "", "ONNXRTBertDataset"], [224, 2, 1, "", "ParseDecodeBert"], [224, 2, 1, "", "PytorchBertDataset"], [224, 2, 1, "", "TensorflowBertDataset"], [224, 2, 1, "", "TensorflowModelZooBertDataset"], [224, 1, 1, "", "convert_examples_to_features"], [224, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures": [[224, 4, 1, "", "to_json_string"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[225, 2, 1, "", "COCONpy"], [225, 2, 1, "", "COCORaw"], [225, 2, 1, "", "COCORecordDataset"], [225, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[226, 2, 1, "", "CIFAR10"], [226, 2, 1, "", "CIFAR100"], [226, 2, 1, "", "Dataset"], [226, 2, 1, "", "Datasets"], [226, 2, 1, "", "FashionMNIST"], [226, 2, 1, "", "ImageFolder"], [226, 2, 1, "", "IterableDataset"], [226, 2, 1, "", "MNIST"], [226, 2, 1, "", "MXNetCIFAR10"], [226, 2, 1, "", "MXNetCIFAR100"], [226, 2, 1, "", "MXNetDatasets"], [226, 2, 1, "", "MXNetFashionMNIST"], [226, 2, 1, "", "MXNetImageFolder"], [226, 2, 1, "", "MXNetMNIST"], [226, 2, 1, "", "ONNXRTITDatasets"], [226, 2, 1, "", "ONNXRTQLDatasets"], [226, 2, 1, "", "PyTorchDatasets"], [226, 2, 1, "", "PytorchCIFAR10"], [226, 2, 1, "", "PytorchCIFAR100"], [226, 2, 1, "", "PytorchFashionMNIST"], [226, 2, 1, "", "PytorchMNIST"], [226, 2, 1, "", "PytorchMxnetWrapDataset"], [226, 2, 1, "", "PytorchMxnetWrapFunction"], [226, 2, 1, "", "TensorflowCIFAR10"], [226, 2, 1, "", "TensorflowCIFAR100"], [226, 2, 1, "", "TensorflowDatasets"], [226, 2, 1, "", "TensorflowFashionMNIST"], [226, 2, 1, "", "TensorflowImageFolder"], [226, 2, 1, "", "TensorflowImageRecord"], [226, 2, 1, "", "TensorflowMNIST"], [226, 2, 1, "", "TensorflowTFRecordDataset"], [226, 2, 1, "", "TensorflowVOCRecord"], [226, 1, 1, "", "calculate_md5"], [226, 1, 1, "", "check_integrity"], [226, 1, 1, "", "dataset_registry"], [226, 1, 1, "", "download_url"], [226, 6, 1, "", "framework_datasets"], [226, 1, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset.CIFAR10": [[226, 4, 1, "", "download"], [226, 4, 1, "", "load_meta"]], "neural_compressor.experimental.data.datasets.dataset.FashionMNIST": [[226, 4, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dataset.MNIST": [[226, 3, 1, "", "class_to_idx"], [226, 4, 1, "", "download"], [226, 4, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[227, 2, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[228, 2, 1, "", "DummyDataset"], [228, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[229, 2, 1, "", "ImagenetRaw"], [229, 2, 1, "", "MXNetImagenetRaw"], [229, 2, 1, "", "ONNXRTImagenetDataset"], [229, 2, 1, "", "PytorchImagenetRaw"], [229, 2, 1, "", "TensorflowImagenetDataset"], [229, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[231, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[234, 2, 1, "", "FILTERS"], [234, 2, 1, "", "Filter"], [232, 0, 0, "-", "coco_filter"], [233, 0, 0, "-", "filter"], [234, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.filters.coco_filter": [[232, 2, 1, "", "LabelBalanceCOCORawFilter"], [232, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[233, 2, 1, "", "FILTERS"], [233, 2, 1, "", "Filter"], [233, 2, 1, "", "MXNetFilters"], [233, 2, 1, "", "ONNXRTITFilters"], [233, 2, 1, "", "ONNXRTQLFilters"], [233, 2, 1, "", "PyTorchFilters"], [233, 2, 1, "", "TensorflowFilters"], [233, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[237, 2, 1, "", "BaseTransform"], [237, 2, 1, "", "TRANSFORMS"], [236, 0, 0, "-", "imagenet_transform"], [238, 0, 0, "-", "tokenization"], [239, 0, 0, "-", "transform"], [237, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.TRANSFORMS": [[237, 4, 1, "", "register"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[236, 2, 1, "", "BilinearImagenetTransform"], [236, 2, 1, "", "LabelShift"], [236, 2, 1, "", "ONNXResizeCropImagenetTransform"], [236, 2, 1, "", "OnnxBilinearImagenetTransform"], [236, 2, 1, "", "ParseDecodeImagenet"], [236, 2, 1, "", "ParseDecodeImagenetTransform"], [236, 2, 1, "", "QuantizedInput"], [236, 2, 1, "", "ResizeWithAspectRatio"], [236, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[238, 2, 1, "", "BasicTokenizer"], [238, 2, 1, "", "FullTokenizer"], [238, 2, 1, "", "WordpieceTokenizer"], [238, 1, 1, "", "convert_by_vocab"], [238, 1, 1, "", "convert_to_unicode"], [238, 1, 1, "", "load_vocab"], [238, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer": [[238, 4, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer": [[238, 4, 1, "", "convert_ids_to_tokens"], [238, 4, 1, "", "convert_tokens_to_ids"], [238, 4, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer": [[238, 4, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[239, 2, 1, "", "AlignImageChannelTransform"], [239, 2, 1, "", "BaseTransform"], [239, 2, 1, "", "CastONNXTransform"], [239, 2, 1, "", "CastPyTorchTransform"], [239, 2, 1, "", "CastTFTransform"], [239, 2, 1, "", "CenterCropTFTransform"], [239, 2, 1, "", "CenterCropTransform"], [239, 2, 1, "", "CollectTransform"], [239, 2, 1, "", "ComposeTransform"], [239, 2, 1, "", "CropResizeTFTransform"], [239, 2, 1, "", "CropResizeTransform"], [239, 2, 1, "", "CropToBoundingBox"], [239, 2, 1, "", "InputFeatures"], [239, 2, 1, "", "MXNetCropResizeTransform"], [239, 2, 1, "", "MXNetCropToBoundingBox"], [239, 2, 1, "", "MXNetNormalizeTransform"], [239, 2, 1, "", "MXNetTransforms"], [239, 2, 1, "", "MXNetTranspose"], [239, 2, 1, "", "NormalizeTFTransform"], [239, 2, 1, "", "NormalizeTransform"], [239, 2, 1, "", "ONNXRTCropToBoundingBox"], [239, 2, 1, "", "ONNXRTITTransforms"], [239, 2, 1, "", "ONNXRTQLTransforms"], [239, 2, 1, "", "PaddedCenterCropTransform"], [239, 2, 1, "", "ParseDecodeVocTransform"], [239, 2, 1, "", "PyTorchAlignImageChannel"], [239, 2, 1, "", "PyTorchCropResizeTransform"], [239, 2, 1, "", "PyTorchNormalizeTransform"], [239, 2, 1, "", "PyTorchTransforms"], [239, 2, 1, "", "PyTorchTranspose"], [239, 2, 1, "", "PytorchMxnetTransform"], [239, 2, 1, "", "PytorchMxnetWrapFunction"], [239, 2, 1, "", "RandomCropTFTransform"], [239, 2, 1, "", "RandomCropTransform"], [239, 2, 1, "", "RandomHorizontalFlip"], [239, 2, 1, "", "RandomResizedCropMXNetTransform"], [239, 2, 1, "", "RandomResizedCropPytorchTransform"], [239, 2, 1, "", "RandomResizedCropTFTransform"], [239, 2, 1, "", "RandomResizedCropTransform"], [239, 2, 1, "", "RandomVerticalFlip"], [239, 2, 1, "", "RescaleKerasPretrainTransform"], [239, 2, 1, "", "RescaleTFTransform"], [239, 2, 1, "", "RescaleTransform"], [239, 2, 1, "", "ResizeMXNetTransform"], [239, 2, 1, "", "ResizePytorchTransform"], [239, 2, 1, "", "ResizeTFTransform"], [239, 2, 1, "", "ResizeTransform"], [239, 2, 1, "", "ResizeWithRatio"], [239, 2, 1, "", "SquadExample"], [239, 2, 1, "", "TFModelZooCollectTransform"], [239, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [239, 2, 1, "", "TFSquadV1PostTransform"], [239, 2, 1, "", "TRANSFORMS"], [239, 2, 1, "", "TensorflowCropToBoundingBox"], [239, 2, 1, "", "TensorflowRandomHorizontalFlip"], [239, 2, 1, "", "TensorflowRandomVerticalFlip"], [239, 2, 1, "", "TensorflowResizeWithRatio"], [239, 2, 1, "", "TensorflowTransform"], [239, 2, 1, "", "TensorflowTransforms"], [239, 2, 1, "", "TensorflowTranspose"], [239, 2, 1, "", "TensorflowWrapFunction"], [239, 2, 1, "", "ToArray"], [239, 2, 1, "", "ToNDArrayTransform"], [239, 2, 1, "", "Transforms"], [239, 2, 1, "", "Transpose"], [239, 1, 1, "", "convert_examples_to_features"], [239, 1, 1, "", "get_final_text"], [239, 1, 1, "", "get_torchvision_map"], [239, 1, 1, "", "read_squad_examples"], [239, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform": [[239, 4, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform": [[239, 4, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform": [[239, 4, 1, "", "get_postprocess_result"], [239, 4, 1, "", "process_result"]], "neural_compressor.experimental.data.transforms.transform.TRANSFORMS": [[239, 4, 1, "", "register"]], "neural_compressor.experimental.distillation": [[240, 2, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[240, 5, 1, "", "_epoch_ran"], [240, 5, 1, "", "best_model"], [240, 5, 1, "", "best_score"], [240, 4, 1, "", "create_criterion"], [240, 4, 1, "", "create_optimizer"], [240, 3, 1, "", "criterion"], [240, 5, 1, "", "eval_frequency"], [240, 3, 1, "", "evaluation_distributed"], [240, 4, 1, "", "execute"], [240, 4, 1, "", "generate_hooks"], [240, 4, 1, "", "init_train_cfg"], [240, 4, 1, "", "on_post_forward"], [240, 3, 1, "", "optimizer"], [240, 4, 1, "", "pre_process"], [240, 4, 1, "", "prepare"], [240, 3, 1, "", "student_model"], [240, 3, 1, "", "teacher_model"], [240, 3, 1, "", "train_cfg"], [240, 3, 1, "", "train_distributed"]], "neural_compressor.experimental.export": [[241, 1, 1, "", "onnx_qlinear_to_qdq"], [242, 0, 0, "-", "qlinear2qdq"], [243, 0, 0, "-", "tf2onnx"], [241, 1, 1, "", "tf_to_fp32_onnx"], [241, 1, 1, "", "tf_to_int8_onnx"], [244, 0, 0, "-", "torch2onnx"], [241, 1, 1, "", "torch_to_fp32_onnx"], [241, 1, 1, "", "torch_to_int8_onnx"], [245, 0, 0, "-", "utils"]], "neural_compressor.experimental.export.qlinear2qdq": [[242, 1, 1, "", "check_model"], [242, 1, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[243, 1, 1, "", "tf_to_fp32_onnx"], [243, 1, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[244, 1, 1, "", "build_scale_mapping"], [244, 1, 1, "", "get_node_mapping"], [244, 1, 1, "", "get_quantizable_onnx_ops"], [244, 1, 1, "", "qdq_fp32_bias"], [244, 1, 1, "", "qdq_fp32_bias_qdq"], [244, 1, 1, "", "qdq_int32_bias"], [244, 1, 1, "", "recalculate_bias"], [244, 1, 1, "", "remove_nodes_by_name"], [244, 1, 1, "", "set_data_type"], [244, 1, 1, "", "set_scale_info"], [244, 1, 1, "", "sub_graph_with_int32_bias"], [244, 1, 1, "", "torch_to_fp32_onnx"], [244, 1, 1, "", "torch_to_int8_onnx"], [244, 1, 1, "", "update_weight_bias"]], "neural_compressor.experimental.export.utils": [[245, 2, 1, "", "DummyDataReader"], [245, 1, 1, "", "ONNX2Numpy_dtype"]], "neural_compressor.experimental.export.utils.DummyDataReader": [[245, 4, 1, "", "get_next"]], "neural_compressor.experimental.graph_optimization": [[246, 2, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.graph_optimization.Graph_Optimization": [[246, 4, 1, "", "dataset"], [246, 3, 1, "", "eval_dataloader"], [246, 3, 1, "", "eval_func"], [246, 3, 1, "", "input"], [246, 3, 1, "", "metric"], [246, 3, 1, "", "model"], [246, 3, 1, "", "output"], [246, 3, 1, "", "postprocess"], [246, 3, 1, "", "precisions"], [246, 4, 1, "", "set_config_by_model"]], "neural_compressor.experimental.metric": [[254, 2, 1, "", "BaseMetric"], [254, 2, 1, "", "METRICS"], [554, 0, 0, "-", "bleu"], [249, 0, 0, "-", "bleu_util"], [250, 0, 0, "-", "coco_label_map"], [251, 0, 0, "-", "coco_tools"], [252, 0, 0, "-", "evaluate_squad"], [253, 0, 0, "-", "f1"], [255, 0, 0, "-", "metric"], [254, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.BaseMetric": [[254, 3, 1, "", "hvd"], [254, 3, 1, "", "metric"], [254, 4, 1, "", "reset"], [254, 4, 1, "", "result"], [254, 4, 1, "", "update"]], "neural_compressor.experimental.metric.METRICS": [[254, 5, 1, "", "metrics"], [254, 4, 1, "", "register"]], "neural_compressor.experimental.metric.bleu": [[554, 2, 1, "", "BLEU"], [248, 2, 1, "", "UnicodeRegex"], [248, 1, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[554, 5, 1, "", "labels"], [554, 5, 1, "", "predictions"], [554, 4, 1, "", "reset"], [554, 4, 1, "", "result"], [554, 4, 1, "", "update"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[248, 5, 1, "", "nondigit_punct_re"], [248, 4, 1, "", "property_chars"], [248, 5, 1, "", "punct_nondigit_re"], [248, 5, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[249, 1, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[251, 2, 1, "", "COCOEvalWrapper"], [251, 2, 1, "", "COCOWrapper"], [251, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [251, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [251, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper": [[251, 4, 1, "", "ComputeMetrics"], [251, 4, 1, "", "GetAgnosticMode"], [251, 4, 1, "", "GetCategory"], [251, 4, 1, "", "GetCategoryIdList"], [251, 4, 1, "", "accumulate"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[251, 4, 1, "", "LoadAnnotations"], [251, 5, 1, "", "dataset"], [251, 5, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[252, 1, 1, "", "evaluate"], [252, 1, 1, "", "exact_match_score"], [252, 1, 1, "", "f1_score"], [252, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[253, 1, 1, "", "evaluate"], [253, 1, 1, "", "f1_score"], [253, 1, 1, "", "metric_max_over_ground_truths"], [253, 1, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[255, 2, 1, "", "Accuracy"], [255, 2, 1, "", "BaseMetric"], [255, 2, 1, "", "COCOmAPv2"], [255, 2, 1, "", "F1"], [255, 2, 1, "", "GeneralTopK"], [255, 2, 1, "", "Loss"], [255, 2, 1, "", "MAE"], [255, 2, 1, "", "METRICS"], [255, 2, 1, "", "MSE"], [255, 2, 1, "", "MXNetMetrics"], [255, 2, 1, "", "ONNXRTGLUE"], [255, 2, 1, "", "ONNXRTITMetrics"], [255, 2, 1, "", "ONNXRTQLMetrics"], [255, 2, 1, "", "PyTorchLoss"], [255, 2, 1, "", "PyTorchMetrics"], [255, 2, 1, "", "RMSE"], [255, 2, 1, "", "ROC"], [255, 2, 1, "", "SquadF1"], [255, 2, 1, "", "TensorflowCOCOMAP"], [255, 2, 1, "", "TensorflowMAP"], [255, 2, 1, "", "TensorflowMetrics"], [255, 2, 1, "", "TensorflowTopK"], [255, 2, 1, "", "TensorflowVOCMAP"], [255, 2, 1, "", "WrapMXNetMetric"], [255, 2, 1, "", "WrapONNXRTMetric"], [255, 2, 1, "", "WrapPyTorchMetric"], [255, 2, 1, "", "mIOU"], [255, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[255, 5, 1, "", "label_list"], [255, 5, 1, "", "pred_list"], [255, 4, 1, "", "reset"], [255, 4, 1, "", "result"], [255, 5, 1, "", "sample"], [255, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.BaseMetric": [[255, 3, 1, "", "hvd"], [255, 3, 1, "", "metric"], [255, 4, 1, "", "reset"], [255, 4, 1, "", "result"], [255, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.COCOmAPv2": [[255, 4, 1, "", "reset"], [255, 4, 1, "", "result"], [255, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.F1": [[255, 4, 1, "", "reset"], [255, 4, 1, "", "result"], [255, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[255, 5, 1, "", "k"], [255, 5, 1, "", "num_correct"], [255, 5, 1, "", "num_sample"], [255, 4, 1, "", "reset"], [255, 4, 1, "", "result"], [255, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.Loss": [[255, 4, 1, "", "reset"], [255, 4, 1, "", "result"], [255, 5, 1, "", "sample"], [255, 5, 1, "", "sum"], [255, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MAE": [[255, 5, 1, "", "compare_label"], [255, 5, 1, "", "label_list"], [255, 5, 1, "", "pred_list"], [255, 4, 1, "", "reset"], [255, 4, 1, "", "result"], [255, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.METRICS": [[255, 5, 1, "", "metrics"], [255, 4, 1, "", "register"]], "neural_compressor.experimental.metric.metric.MSE": [[255, 5, 1, "", "compare_label"], [255, 5, 1, "", "label_list"], [255, 5, 1, "", "pred_list"], [255, 4, 1, "", "reset"], [255, 4, 1, "", "result"], [255, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[255, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTGLUE": [[255, 4, 1, "", "reset"], [255, 4, 1, "", "result"], [255, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[255, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[255, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchLoss": [[255, 4, 1, "", "compute"], [255, 4, 1, "", "reset"], [255, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[255, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[255, 5, 1, "", "mse"], [255, 4, 1, "", "reset"], [255, 4, 1, "", "result"], [255, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ROC": [[255, 4, 1, "", "reset"], [255, 4, 1, "", "result"], [255, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.SquadF1": [[255, 4, 1, "", "reset"], [255, 4, 1, "", "result"], [255, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMAP": [[255, 4, 1, "", "reset"], [255, 4, 1, "", "result"], [255, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[255, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[255, 5, 1, "", "k"], [255, 5, 1, "", "num_correct"], [255, 5, 1, "", "num_sample"], [255, 4, 1, "", "reset"], [255, 4, 1, "", "result"], [255, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapMXNetMetric": [[255, 4, 1, "", "reset"], [255, 4, 1, "", "result"], [255, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapONNXRTMetric": [[255, 4, 1, "", "reset"], [255, 4, 1, "", "result"], [255, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapPyTorchMetric": [[255, 4, 1, "", "reset"], [255, 4, 1, "", "result"], [255, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.mIOU": [[255, 4, 1, "", "reset"], [255, 4, 1, "", "result"], [255, 4, 1, "", "update"]], "neural_compressor.experimental.mixed_precision": [[256, 2, 1, "", "MixedPrecision"]], "neural_compressor.experimental.mixed_precision.MixedPrecision": [[256, 3, 1, "", "precisions"], [256, 4, 1, "", "set_config_by_model"]], "neural_compressor.experimental.model_conversion": [[257, 2, 1, "", "ModelConversion"]], "neural_compressor.experimental.model_conversion.ModelConversion": [[257, 4, 1, "", "dataset"], [257, 3, 1, "", "destination"], [257, 3, 1, "", "eval_dataloader"], [257, 3, 1, "", "eval_func"], [257, 3, 1, "", "metric"], [257, 3, 1, "", "model"], [257, 3, 1, "", "postprocess"], [257, 3, 1, "", "source"]], "neural_compressor.experimental.nas": [[270, 2, 1, "", "BasicNAS"], [270, 2, 1, "", "DyNAS"], [270, 2, 1, "", "NAS"], [258, 0, 0, "-", "basic_nas"], [259, 0, 0, "-", "dynas"], [264, 0, 0, "-", "dynast"], [271, 0, 0, "-", "nas"], [272, 0, 0, "-", "nas_utils"], [273, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.BasicNAS": [[270, 4, 1, "", "estimate"], [270, 4, 1, "", "execute"], [270, 4, 1, "", "init_by_cfg"], [270, 4, 1, "", "pre_process"]], "neural_compressor.experimental.nas.DyNAS": [[270, 4, 1, "", "create_acc_predictor"], [270, 4, 1, "", "create_latency_predictor"], [270, 4, 1, "", "create_macs_predictor"], [270, 4, 1, "", "estimate"], [270, 4, 1, "", "init_cfg"], [270, 4, 1, "", "init_for_search"], [270, 4, 1, "", "search"], [270, 4, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.basic_nas": [[258, 2, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.basic_nas.BasicNAS": [[258, 4, 1, "", "estimate"], [258, 4, 1, "", "execute"], [258, 4, 1, "", "init_by_cfg"], [258, 4, 1, "", "pre_process"]], "neural_compressor.experimental.nas.dynas": [[259, 2, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.dynas.DyNAS": [[259, 4, 1, "", "create_acc_predictor"], [259, 4, 1, "", "create_latency_predictor"], [259, 4, 1, "", "create_macs_predictor"], [259, 4, 1, "", "estimate"], [259, 4, 1, "", "init_cfg"], [259, 4, 1, "", "init_for_search"], [259, 4, 1, "", "search"], [259, 4, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.dynast": [[260, 0, 0, "-", "dynas_manager"], [261, 0, 0, "-", "dynas_predictor"], [262, 0, 0, "-", "dynas_search"], [263, 0, 0, "-", "dynas_utils"], [265, 0, 0, "-", "supernetwork"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[260, 2, 1, "", "ParameterManager"], [260, 2, 1, "", "TransformerLTEncoding"]], "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager": [[260, 4, 1, "", "create_training_set"], [260, 4, 1, "", "import_csv"], [260, 4, 1, "", "onehot_generic"], [260, 4, 1, "", "process_param_dict"], [260, 4, 1, "", "random_sample"], [260, 4, 1, "", "random_samples"], [260, 4, 1, "", "set_seed"], [260, 4, 1, "", "translate2param"], [260, 4, 1, "", "translate2pymoo"]], "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding": [[260, 4, 1, "", "create_training_set"], [260, 4, 1, "", "import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[261, 2, 1, "", "Predictor"]], "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor": [[261, 4, 1, "", "get_metrics"], [261, 4, 1, "", "get_parameters"], [261, 4, 1, "", "load"], [261, 4, 1, "", "predict"], [261, 4, 1, "", "save"], [261, 4, 1, "", "train"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[262, 2, 1, "", "ProblemMultiObjective"], [262, 2, 1, "", "SearchAlgoManager"]], "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager": [[262, 4, 1, "", "configure_age"], [262, 4, 1, "", "configure_nsga2"], [262, 4, 1, "", "run_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[263, 2, 1, "", "EvaluationInterface"], [263, 2, 1, "", "EvaluationInterfaceMobileNetV3"], [263, 2, 1, "", "EvaluationInterfaceResNet50"], [263, 2, 1, "", "EvaluationInterfaceTransformerLT"], [263, 2, 1, "", "OFARunner"], [263, 2, 1, "", "Runner"], [263, 2, 1, "", "TorchVisionReference"], [263, 2, 1, "", "TransformerLTRunner"], [263, 1, 1, "", "get_macs"], [263, 1, 1, "", "get_torchvision_model"], [263, 1, 1, "", "measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface": [[263, 4, 1, "", "clear_csv"], [263, 4, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3": [[263, 4, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50": [[263, 4, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT": [[263, 4, 1, "", "clear_csv"], [263, 4, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner": [[263, 4, 1, "", "estimate_accuracy_top1"], [263, 4, 1, "", "estimate_latency"], [263, 4, 1, "", "estimate_macs"], [263, 4, 1, "", "get_subnet"], [263, 4, 1, "", "measure_latency"], [263, 4, 1, "", "validate_macs"], [263, 4, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference": [[263, 4, 1, "", "measure_latency"], [263, 4, 1, "", "validate_macs"], [263, 4, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner": [[263, 4, 1, "", "measure_latency"], [263, 4, 1, "", "validate_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[266, 0, 0, "-", "machine_translation"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[267, 0, 0, "-", "modules_supernetwork"], [268, 0, 0, "-", "transformer_interface"], [269, 0, 0, "-", "transformer_supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[267, 2, 1, "", "MultiheadAttentionSuper"], [267, 1, 1, "", "get_incremental_state"], [267, 1, 1, "", "set_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper": [[267, 4, 1, "", "forward"], [267, 4, 1, "", "reorder_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[268, 1, 1, "", "compute_bleu"], [268, 1, 1, "", "compute_latency"], [268, 1, 1, "", "compute_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[269, 2, 1, "", "TransformerDecoder"], [269, 2, 1, "", "TransformerDecoderLayer"], [269, 2, 1, "", "TransformerEncoder"], [269, 2, 1, "", "TransformerEncoderLayer"], [269, 2, 1, "", "TransformerSuperNetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder": [[269, 4, 1, "", "extract_features"], [269, 4, 1, "", "forward"], [269, 4, 1, "", "max_positions"], [269, 4, 1, "", "output_layer"], [269, 4, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer": [[269, 4, 1, "", "forward"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder": [[269, 4, 1, "", "forward"], [269, 4, 1, "", "max_positions"], [269, 4, 1, "", "reorder_encoder_out"], [269, 4, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer": [[269, 4, 1, "", "forward"], [269, 4, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.nas": [[271, 2, 1, "", "NAS"], [271, 2, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas.NASBase": [[271, 4, 1, "", "count_model_parameters"], [271, 4, 1, "", "dump_search_results"], [271, 4, 1, "", "estimate"], [271, 4, 1, "", "find_best_model_archs"], [271, 4, 1, "", "init_search_cfg"], [271, 4, 1, "", "load_search_results"], [271, 4, 1, "", "metrics_conversion"], [271, 3, 1, "", "model_builder"], [271, 4, 1, "", "params_vec2params_dict"], [271, 4, 1, "", "search"], [271, 3, 1, "", "search_algorithm"], [271, 3, 1, "", "search_space"], [271, 4, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.nas_utils": [[272, 1, 1, "", "create_search_space_pool"], [272, 1, 1, "", "find_pareto_front"], [272, 1, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[273, 2, 1, "", "BayesianOptimizationSearcher"], [273, 2, 1, "", "GridSearcher"], [273, 2, 1, "", "RandomSearcher"], [273, 2, 1, "", "Searcher"]], "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher": [[273, 4, 1, "", "get_feedback"], [273, 4, 1, "", "indices2params_vec"], [273, 4, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.GridSearcher": [[273, 4, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.RandomSearcher": [[273, 4, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.Searcher": [[273, 4, 1, "", "get_feedback"], [273, 4, 1, "", "params_vec2params_dict"], [273, 4, 1, "", "suggest"]], "neural_compressor.experimental.pruner_legacy": [[274, 0, 0, "-", "gradient_sensitivity"], [275, 0, 0, "-", "group_lasso"], [277, 0, 0, "-", "magnitude"], [278, 0, 0, "-", "pattern_lock"], [279, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[274, 2, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner": [[274, 4, 1, "", "compute_mask"], [274, 4, 1, "", "on_epoch_begin"], [274, 4, 1, "", "on_epoch_end"], [274, 4, 1, "", "on_step_begin"], [274, 4, 1, "", "on_step_end"], [274, 4, 1, "", "parse_weight_name"], [274, 4, 1, "", "prune_by_importance"], [274, 4, 1, "", "prune_weight"], [274, 4, 1, "", "update_importance_abs"], [274, 4, 1, "", "update_importance_elementwise"], [274, 4, 1, "", "update_importance_weighted"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[275, 2, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner": [[275, 4, 1, "", "on_before_optimizer_step"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[277, 2, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner": [[277, 4, 1, "", "compute_mask"], [277, 4, 1, "", "on_epoch_begin"], [277, 4, 1, "", "on_epoch_end"], [277, 4, 1, "", "on_step_begin"], [277, 4, 1, "", "on_step_end"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[278, 2, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner": [[278, 4, 1, "", "compute_mask"], [278, 4, 1, "", "on_epoch_begin"], [278, 4, 1, "", "on_epoch_end"], [278, 4, 1, "", "on_step_begin"], [278, 4, 1, "", "on_step_end"], [278, 4, 1, "", "update_weights"]], "neural_compressor.experimental.pruner_legacy.pruner": [[279, 2, 1, "", "Pruner"], [279, 1, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruner_legacy.pruner.Pruner": [[279, 4, 1, "", "on_before_optimizer_step"], [279, 4, 1, "", "on_epoch_begin"], [279, 4, 1, "", "on_epoch_end"], [279, 4, 1, "", "on_step_begin"], [279, 4, 1, "", "on_step_end"], [279, 4, 1, "", "on_train_begin"], [279, 4, 1, "", "on_train_end"], [279, 4, 1, "", "update_sparsity"]], "neural_compressor.experimental.pruning": [[280, 2, 1, "", "Pruning"], [280, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[280, 5, 1, "", "conf"], [280, 3, 1, "", "evaluation_distributed"], [280, 4, 1, "", "execute"], [280, 4, 1, "", "generate_hooks"], [280, 4, 1, "", "generate_pruners"], [280, 4, 1, "", "get_sparsity_ratio"], [280, 4, 1, "", "pre_process"], [280, 4, 1, "", "prepare"], [280, 5, 1, "", "pruners"], [280, 3, 1, "", "pruning_func"], [280, 3, 1, "", "train_distributed"], [280, 4, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pruning.TfPruningCallback": [[280, 4, 1, "", "on_after_compute_loss"], [280, 4, 1, "", "on_batch_begin"], [280, 4, 1, "", "on_batch_end"], [280, 4, 1, "", "on_epoch_begin"], [280, 4, 1, "", "on_epoch_end"], [280, 4, 1, "", "on_step_begin"], [280, 4, 1, "", "on_step_end"], [280, 4, 1, "", "on_train_begin"], [280, 4, 1, "", "on_train_end"], [280, 4, 1, "", "post_epoch_end"], [280, 4, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pruning_recipes": [[281, 2, 1, "", "PATTERNS"], [282, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.PATTERNS": [[281, 5, 1, "", "patterns"], [281, 4, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns": [[282, 2, 1, "", "PATTERNS"], [283, 0, 0, "-", "pattern"], [284, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS": [[282, 5, 1, "", "patterns"], [282, 4, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[283, 2, 1, "", "PATTERNS"], [283, 2, 1, "", "PatternBase"], [283, 1, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[283, 5, 1, "", "patterns"], [283, 4, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase": [[283, 4, 1, "", "compute_sparsity"], [283, 4, 1, "", "reduce"], [283, 4, 1, "", "reshape"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[284, 2, 1, "", "TilePatternBase"], [284, 2, 1, "", "TilePattern_1x1"], [284, 2, 1, "", "TilePattern_1x16"], [284, 2, 1, "", "TilePattern_1x2"], [284, 2, 1, "", "TilePattern_2x2"], [284, 2, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase": [[284, 4, 1, "", "compute_sparsity"], [284, 4, 1, "", "repeat_mask"]], "neural_compressor.experimental.pruning_v2": [[285, 2, 1, "", "Pruning"], [285, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[285, 5, 1, "", "conf"], [285, 3, 1, "", "evaluation_distributed"], [285, 4, 1, "", "execute"], [285, 4, 1, "", "generate_hooks"], [285, 4, 1, "", "get_sparsity_ratio"], [285, 4, 1, "", "pre_process"], [285, 4, 1, "", "prepare"], [285, 5, 1, "", "pruners"], [285, 3, 1, "", "pruning_func"], [285, 3, 1, "", "train_distributed"], [285, 4, 1, "", "update_config"]], "neural_compressor.experimental.pruning_v2.TfPruningCallback": [[285, 4, 1, "", "on_after_compute_loss"], [285, 4, 1, "", "on_batch_begin"], [285, 4, 1, "", "on_batch_end"], [285, 4, 1, "", "on_epoch_begin"], [285, 4, 1, "", "on_epoch_end"], [285, 4, 1, "", "on_step_begin"], [285, 4, 1, "", "on_step_end"], [285, 4, 1, "", "on_train_begin"], [285, 4, 1, "", "on_train_end"], [285, 4, 1, "", "post_epoch_end"], [285, 4, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pytorch_pruner": [[287, 0, 0, "-", "logger"], [288, 0, 0, "-", "patterns"], [289, 0, 0, "-", "prune_utils"], [290, 0, 0, "-", "pruner"], [291, 0, 0, "-", "pruning"], [292, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[288, 2, 1, "", "Pattern"], [288, 2, 1, "", "PatternNInM"], [288, 2, 1, "", "PatternNxM"], [288, 1, 1, "", "get_pattern"], [288, 1, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[288, 4, 1, "", "get_block_size_dict"], [288, 4, 1, "", "get_mask_single"], [288, 4, 1, "", "get_masks"], [288, 4, 1, "", "get_masks_global"], [288, 4, 1, "", "get_masks_local"], [288, 4, 1, "", "get_pattern_lock_masks"], [288, 4, 1, "", "get_sparsity_ratio"], [288, 5, 1, "", "is_global"], [288, 5, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[288, 5, 1, "", "M"], [288, 5, 1, "", "N"], [288, 4, 1, "", "get_masks_global"], [288, 4, 1, "", "get_pattern_lock_masks"], [288, 4, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[288, 5, 1, "", "block_size"], [288, 4, 1, "", "get_block_size_dict"], [288, 4, 1, "", "get_masks_global"], [288, 4, 1, "", "get_pattern_lock_masks"], [288, 4, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[289, 1, 1, "", "check_config"], [289, 1, 1, "", "parse_not_to_prune"], [289, 1, 1, "", "parse_to_prune"], [289, 1, 1, "", "process_and_check_config"], [289, 1, 1, "", "process_config"], [289, 1, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[290, 2, 1, "", "MagnitudePruner"], [290, 2, 1, "", "PatternLockPruner"], [290, 2, 1, "", "Pruner"], [290, 2, 1, "", "SnipMomentumPruner"], [290, 2, 1, "", "SnipPruner"], [290, 1, 1, "", "get_pruner"], [290, 1, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner": [[290, 4, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner": [[290, 4, 1, "", "on_after_optimizer_step"], [290, 4, 1, "", "on_step_begin"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[290, 4, 1, "", "check_is_pruned_step"], [290, 5, 1, "", "config"], [290, 5, 1, "", "current_sparsity_ratio"], [290, 5, 1, "", "end_step"], [290, 5, 1, "", "global_step"], [290, 4, 1, "", "mask_weights"], [290, 5, 1, "", "masks"], [290, 5, 1, "", "max_sparsity_ratio_per_layer"], [290, 5, 1, "", "modules"], [290, 4, 1, "", "on_after_eval"], [290, 4, 1, "", "on_after_optimizer_step"], [290, 4, 1, "", "on_before_eval"], [290, 4, 1, "", "on_before_optimizer_step"], [290, 4, 1, "", "on_epoch_begin"], [290, 4, 1, "", "on_epoch_end"], [290, 4, 1, "", "on_step_begin"], [290, 4, 1, "", "on_step_end"], [290, 4, 1, "", "on_train_begin"], [290, 4, 1, "", "on_train_end"], [290, 5, 1, "", "pattern"], [290, 5, 1, "", "scheduler"], [290, 5, 1, "", "scores"], [290, 5, 1, "", "start_step"], [290, 5, 1, "", "target_sparsity_ratio"], [290, 5, 1, "", "update_frequency_on_step"], [290, 4, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner": [[290, 4, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner": [[290, 4, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[291, 2, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[291, 5, 1, "", "config_file_path"], [291, 4, 1, "", "get_sparsity_ratio"], [291, 5, 1, "", "model"], [291, 4, 1, "", "on_after_eval"], [291, 4, 1, "", "on_after_optimizer_step"], [291, 4, 1, "", "on_before_eval"], [291, 4, 1, "", "on_before_optimizer_step"], [291, 4, 1, "", "on_epoch_begin"], [291, 4, 1, "", "on_epoch_end"], [291, 4, 1, "", "on_step_begin"], [291, 4, 1, "", "on_step_end"], [291, 4, 1, "", "on_train_begin"], [291, 4, 1, "", "on_train_end"], [291, 4, 1, "", "prepare"], [291, 5, 1, "", "pruner_info"], [291, 5, 1, "", "pruners"], [291, 4, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[292, 2, 1, "", "IterativeScheduler"], [292, 2, 1, "", "OneshotScheduler"], [292, 2, 1, "", "Scheduler"], [292, 1, 1, "", "get_scheduler"], [292, 1, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler": [[292, 4, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler": [[292, 4, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[292, 5, 1, "", "config"], [292, 4, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.quantization": [[293, 2, 1, "", "Quantization"]], "neural_compressor.experimental.quantization.Quantization": [[293, 3, 1, "", "calib_dataloader"], [293, 4, 1, "", "dataset"], [293, 4, 1, "", "distributed_execute"], [293, 4, 1, "", "execute"], [293, 3, 1, "", "metric"], [293, 3, 1, "", "model"], [293, 3, 1, "", "objective"], [293, 3, 1, "", "postprocess"], [293, 4, 1, "", "pre_process"], [293, 3, 1, "", "q_func"]], "neural_compressor.experimental.scheduler": [[294, 2, 1, "", "Scheduler"]], "neural_compressor.experimental.scheduler.Scheduler": [[294, 4, 1, "", "append"], [294, 4, 1, "", "combine"], [294, 3, 1, "", "eval_func"], [294, 3, 1, "", "model"], [294, 3, 1, "", "train_func"]], "neural_compressor.metric": [[302, 2, 1, "", "BaseMetric"], [302, 2, 1, "", "COCOmAPv2"], [302, 2, 1, "", "GeneralTopK"], [302, 2, 1, "", "METRICS"], [302, 2, 1, "", "Metric"], [302, 2, 1, "", "SquadF1"], [302, 2, 1, "", "TensorflowTopK"], [296, 0, 0, "-", "bleu"], [297, 0, 0, "-", "bleu_util"], [298, 0, 0, "-", "coco_label_map"], [299, 0, 0, "-", "coco_tools"], [300, 0, 0, "-", "evaluate_squad"], [301, 0, 0, "-", "f1"], [303, 0, 0, "-", "metric"], [302, 1, 1, "", "metric_registry"]], "neural_compressor.metric.BaseMetric": [[302, 3, 1, "", "hvd"], [302, 3, 1, "", "metric"], [302, 4, 1, "", "reset"], [302, 4, 1, "", "result"], [302, 4, 1, "", "update"]], "neural_compressor.metric.COCOmAPv2": [[302, 4, 1, "", "reset"], [302, 4, 1, "", "result"], [302, 4, 1, "", "update"]], "neural_compressor.metric.GeneralTopK": [[302, 5, 1, "", "k"], [302, 5, 1, "", "num_correct"], [302, 5, 1, "", "num_sample"], [302, 4, 1, "", "reset"], [302, 4, 1, "", "result"], [302, 4, 1, "", "update"]], "neural_compressor.metric.METRICS": [[302, 5, 1, "", "metrics"], [302, 4, 1, "", "register"]], "neural_compressor.metric.SquadF1": [[302, 4, 1, "", "reset"], [302, 4, 1, "", "result"], [302, 4, 1, "", "update"]], "neural_compressor.metric.TensorflowTopK": [[302, 5, 1, "", "k"], [302, 5, 1, "", "num_correct"], [302, 5, 1, "", "num_sample"], [302, 4, 1, "", "reset"], [302, 4, 1, "", "result"], [302, 4, 1, "", "update"]], "neural_compressor.metric.bleu": [[296, 2, 1, "", "BLEU"], [296, 2, 1, "", "UnicodeRegex"], [296, 1, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[296, 5, 1, "", "labels"], [296, 5, 1, "", "predictions"], [296, 4, 1, "", "reset"], [296, 4, 1, "", "result"], [296, 4, 1, "", "update"]], "neural_compressor.metric.bleu.UnicodeRegex": [[296, 5, 1, "", "nondigit_punct_re"], [296, 4, 1, "", "property_chars"], [296, 5, 1, "", "punct_nondigit_re"], [296, 5, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[297, 1, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[299, 2, 1, "", "COCOEvalWrapper"], [299, 2, 1, "", "COCOWrapper"], [299, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [299, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [299, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOEvalWrapper": [[299, 4, 1, "", "ComputeMetrics"], [299, 4, 1, "", "GetAgnosticMode"], [299, 4, 1, "", "GetCategory"], [299, 4, 1, "", "GetCategoryIdList"], [299, 4, 1, "", "accumulate"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[299, 4, 1, "", "LoadAnnotations"], [299, 5, 1, "", "dataset"], [299, 5, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[300, 1, 1, "", "evaluate"], [300, 1, 1, "", "exact_match_score"], [300, 1, 1, "", "f1_score"], [300, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[301, 1, 1, "", "evaluate"], [301, 1, 1, "", "f1_score"], [301, 1, 1, "", "metric_max_over_ground_truths"], [301, 1, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[303, 2, 1, "", "Accuracy"], [303, 2, 1, "", "BaseMetric"], [303, 2, 1, "", "COCOmAPv2"], [303, 2, 1, "", "F1"], [303, 2, 1, "", "GeneralTopK"], [303, 2, 1, "", "Loss"], [303, 2, 1, "", "MAE"], [303, 2, 1, "", "METRICS"], [303, 2, 1, "", "MSE"], [303, 2, 1, "", "MXNetMetrics"], [303, 2, 1, "", "Metric"], [303, 2, 1, "", "ONNXRTGLUE"], [303, 2, 1, "", "ONNXRTITMetrics"], [303, 2, 1, "", "ONNXRTQLMetrics"], [303, 2, 1, "", "PyTorchLoss"], [303, 2, 1, "", "PyTorchMetrics"], [303, 2, 1, "", "RMSE"], [303, 2, 1, "", "ROC"], [303, 2, 1, "", "SquadF1"], [303, 2, 1, "", "TensorflowCOCOMAP"], [303, 2, 1, "", "TensorflowMAP"], [303, 2, 1, "", "TensorflowMetrics"], [303, 2, 1, "", "TensorflowTopK"], [303, 2, 1, "", "TensorflowVOCMAP"], [303, 2, 1, "", "WrapMXNetMetric"], [303, 2, 1, "", "WrapONNXRTMetric"], [303, 2, 1, "", "WrapPyTorchMetric"], [303, 2, 1, "", "mIOU"], [303, 1, 1, "", "metric_registry"]], "neural_compressor.metric.metric.Accuracy": [[303, 5, 1, "", "label_list"], [303, 5, 1, "", "pred_list"], [303, 4, 1, "", "reset"], [303, 4, 1, "", "result"], [303, 5, 1, "", "sample"], [303, 4, 1, "", "update"]], "neural_compressor.metric.metric.BaseMetric": [[303, 3, 1, "", "hvd"], [303, 3, 1, "", "metric"], [303, 4, 1, "", "reset"], [303, 4, 1, "", "result"], [303, 4, 1, "", "update"]], "neural_compressor.metric.metric.COCOmAPv2": [[303, 4, 1, "", "reset"], [303, 4, 1, "", "result"], [303, 4, 1, "", "update"]], "neural_compressor.metric.metric.F1": [[303, 4, 1, "", "reset"], [303, 4, 1, "", "result"], [303, 4, 1, "", "update"]], "neural_compressor.metric.metric.GeneralTopK": [[303, 5, 1, "", "k"], [303, 5, 1, "", "num_correct"], [303, 5, 1, "", "num_sample"], [303, 4, 1, "", "reset"], [303, 4, 1, "", "result"], [303, 4, 1, "", "update"]], "neural_compressor.metric.metric.Loss": [[303, 4, 1, "", "reset"], [303, 4, 1, "", "result"], [303, 5, 1, "", "sample"], [303, 5, 1, "", "sum"], [303, 4, 1, "", "update"]], "neural_compressor.metric.metric.MAE": [[303, 5, 1, "", "compare_label"], [303, 5, 1, "", "label_list"], [303, 5, 1, "", "pred_list"], [303, 4, 1, "", "reset"], [303, 4, 1, "", "result"], [303, 4, 1, "", "update"]], "neural_compressor.metric.metric.METRICS": [[303, 5, 1, "", "metrics"], [303, 4, 1, "", "register"]], "neural_compressor.metric.metric.MSE": [[303, 5, 1, "", "compare_label"], [303, 5, 1, "", "label_list"], [303, 5, 1, "", "pred_list"], [303, 4, 1, "", "reset"], [303, 4, 1, "", "result"], [303, 4, 1, "", "update"]], "neural_compressor.metric.metric.MXNetMetrics": [[303, 5, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTGLUE": [[303, 4, 1, "", "reset"], [303, 4, 1, "", "result"], [303, 4, 1, "", "update"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[303, 5, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[303, 5, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchLoss": [[303, 4, 1, "", "compute"], [303, 4, 1, "", "reset"], [303, 4, 1, "", "update"]], "neural_compressor.metric.metric.PyTorchMetrics": [[303, 5, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[303, 5, 1, "", "mse"], [303, 4, 1, "", "reset"], [303, 4, 1, "", "result"], [303, 4, 1, "", "update"]], "neural_compressor.metric.metric.ROC": [[303, 4, 1, "", "reset"], [303, 4, 1, "", "result"], [303, 4, 1, "", "update"]], "neural_compressor.metric.metric.SquadF1": [[303, 4, 1, "", "reset"], [303, 4, 1, "", "result"], [303, 4, 1, "", "update"]], "neural_compressor.metric.metric.TensorflowMAP": [[303, 4, 1, "", "reset"], [303, 4, 1, "", "result"], [303, 4, 1, "", "update"]], "neural_compressor.metric.metric.TensorflowMetrics": [[303, 5, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[303, 5, 1, "", "k"], [303, 5, 1, "", "num_correct"], [303, 5, 1, "", "num_sample"], [303, 4, 1, "", "reset"], [303, 4, 1, "", "result"], [303, 4, 1, "", "update"]], "neural_compressor.metric.metric.WrapMXNetMetric": [[303, 4, 1, "", "reset"], [303, 4, 1, "", "result"], [303, 4, 1, "", "update"]], "neural_compressor.metric.metric.WrapONNXRTMetric": [[303, 4, 1, "", "reset"], [303, 4, 1, "", "result"], [303, 4, 1, "", "update"]], "neural_compressor.metric.metric.WrapPyTorchMetric": [[303, 4, 1, "", "reset"], [303, 4, 1, "", "result"], [303, 4, 1, "", "update"]], "neural_compressor.metric.metric.mIOU": [[303, 4, 1, "", "reset"], [303, 4, 1, "", "result"], [303, 4, 1, "", "update"]], "neural_compressor.mix_precision": [[304, 2, 1, "", "MixedPrecision"], [304, 1, 1, "", "fit"]], "neural_compressor.mix_precision.MixedPrecision": [[304, 3, 1, "", "eval_dataloader"], [304, 3, 1, "", "eval_func"], [304, 4, 1, "", "execute"], [304, 3, 1, "", "metric"], [304, 3, 1, "", "model"], [304, 4, 1, "", "pre_process"], [304, 3, 1, "", "precisions"]], "neural_compressor.model": [[306, 2, 1, "", "BaseModel"], [306, 2, 1, "", "Model"], [305, 0, 0, "-", "base_model"], [307, 0, 0, "-", "keras_model"], [308, 0, 0, "-", "model"], [309, 0, 0, "-", "mxnet_model"], [310, 0, 0, "-", "nets_factory"], [311, 0, 0, "-", "onnx_model"], [312, 0, 0, "-", "tensorflow_model"], [313, 0, 0, "-", "torch_model"]], "neural_compressor.model.BaseModel": [[306, 4, 1, "", "export"], [306, 4, 1, "", "framework"], [306, 3, 1, "", "graph_info"], [306, 3, 1, "", "model"], [306, 4, 1, "", "save"]], "neural_compressor.model.base_model": [[305, 2, 1, "", "BaseModel"]], "neural_compressor.model.base_model.BaseModel": [[305, 4, 1, "", "export"], [305, 4, 1, "", "framework"], [305, 3, 1, "", "graph_info"], [305, 3, 1, "", "model"], [305, 4, 1, "", "save"]], "neural_compressor.model.keras_model": [[307, 2, 1, "", "KerasModel"]], "neural_compressor.model.keras_model.KerasModel": [[307, 4, 1, "", "framework"], [307, 4, 1, "", "get_all_weight_names"], [307, 3, 1, "", "graph_info"], [307, 3, 1, "", "input_node_names"], [307, 3, 1, "", "model"], [307, 3, 1, "", "output_node_names"], [307, 3, 1, "", "q_config"], [307, 4, 1, "", "report_sparsity"], [307, 4, 1, "", "save"]], "neural_compressor.model.model": [[308, 2, 1, "", "Model"], [308, 1, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[309, 2, 1, "", "MXNetModel"]], "neural_compressor.model.mxnet_model.MXNetModel": [[309, 4, 1, "", "framework"], [309, 3, 1, "", "model"], [309, 4, 1, "", "save"]], "neural_compressor.model.nets_factory": [[310, 2, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.nets_factory.TFSlimNetsFactory": [[310, 4, 1, "", "register"]], "neural_compressor.model.onnx_model": [[311, 2, 1, "", "ONNXModel"]], "neural_compressor.model.onnx_model.ONNXModel": [[311, 4, 1, "", "add_initializer"], [311, 4, 1, "", "add_initializers"], [311, 4, 1, "", "add_node"], [311, 4, 1, "", "add_nodes"], [311, 4, 1, "", "add_tensors_to_outputs"], [311, 4, 1, "", "export"], [311, 4, 1, "", "find_node_by_name"], [311, 4, 1, "", "find_nodes_by_initializer"], [311, 4, 1, "", "framework"], [311, 4, 1, "", "get_children"], [311, 4, 1, "", "get_initializer"], [311, 4, 1, "", "get_nodes_chain"], [311, 4, 1, "", "get_parent"], [311, 4, 1, "", "get_parents"], [311, 4, 1, "", "get_scale_zero"], [311, 4, 1, "", "get_siblings"], [311, 4, 1, "", "graph"], [311, 3, 1, "", "graph_info"], [311, 4, 1, "", "initializer"], [311, 4, 1, "", "input"], [311, 3, 1, "", "input_name_to_nodes"], [311, 4, 1, "", "ir_version"], [311, 3, 1, "", "is_large_model"], [311, 4, 1, "", "match_first_parent"], [311, 4, 1, "", "match_parent"], [311, 4, 1, "", "match_parent_path"], [311, 3, 1, "", "model"], [311, 3, 1, "", "model_path"], [311, 4, 1, "", "nodes"], [311, 4, 1, "", "opset_import"], [311, 4, 1, "", "output"], [311, 3, 1, "", "output_name_to_node"], [311, 3, 1, "", "q_config"], [311, 4, 1, "", "remove_initializer"], [311, 4, 1, "", "remove_initializers"], [311, 4, 1, "", "remove_node"], [311, 4, 1, "", "remove_nodes"], [311, 4, 1, "", "remove_tensors_from_outputs"], [311, 4, 1, "", "remove_unused_constant"], [311, 4, 1, "", "replace_input_of_all_nodes"], [311, 4, 1, "", "replace_node_input"], [311, 4, 1, "", "replace_node_output"], [311, 4, 1, "", "replace_output_of_all_nodes"], [311, 4, 1, "", "save"], [311, 4, 1, "", "save_model_to_file"], [311, 4, 1, "", "set_initializer"], [311, 4, 1, "", "topological_sort"], [311, 4, 1, "", "update"]], "neural_compressor.model.tensorflow_model": [[312, 2, 1, "", "TensorflowBaseModel"], [312, 2, 1, "", "TensorflowCheckpointModel"], [312, 2, 1, "", "TensorflowModel"], [312, 2, 1, "", "TensorflowQATModel"], [312, 2, 1, "", "TensorflowSavedModelModel"], [312, 1, 1, "", "checkpoint_session"], [312, 1, 1, "", "estimator_session"], [312, 1, 1, "", "frozen_pb_session"], [312, 1, 1, "", "get_model_type"], [312, 1, 1, "", "graph_def_session"], [312, 1, 1, "", "graph_session"], [312, 1, 1, "", "keras_session"], [312, 1, 1, "", "load_saved_model"], [312, 1, 1, "", "saved_model_session"], [312, 1, 1, "", "slim_session"], [312, 1, 1, "", "validate_and_inference_input_output"], [312, 1, 1, "", "validate_graph_node"]], "neural_compressor.model.tensorflow_model.TensorflowBaseModel": [[312, 4, 1, "", "export"], [312, 4, 1, "", "framework"], [312, 3, 1, "", "graph"], [312, 3, 1, "", "graph_def"], [312, 3, 1, "", "graph_info"], [312, 3, 1, "", "input_node_names"], [312, 3, 1, "", "input_tensor"], [312, 3, 1, "", "input_tensor_names"], [312, 3, 1, "", "iter_op"], [312, 3, 1, "", "model"], [312, 3, 1, "", "model_type"], [312, 3, 1, "", "name"], [312, 3, 1, "", "output_node_names"], [312, 3, 1, "", "output_tensor"], [312, 3, 1, "", "output_tensor_names"], [312, 3, 1, "", "q_config"], [312, 4, 1, "", "save"], [312, 3, 1, "", "sess"], [312, 3, 1, "", "weights"], [312, 3, 1, "", "workspace_path"]], "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel": [[312, 3, 1, "", "graph_def"], [312, 3, 1, "", "model"]], "neural_compressor.model.tensorflow_model.TensorflowQATModel": [[312, 3, 1, "", "frozen_graph_def"], [312, 3, 1, "", "model"], [312, 4, 1, "", "save"]], "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel": [[312, 4, 1, "", "build_saved_model"], [312, 4, 1, "", "get_all_weight_names"], [312, 4, 1, "", "get_weight"], [312, 3, 1, "", "model"], [312, 4, 1, "", "report_sparsity"], [312, 4, 1, "", "save"], [312, 4, 1, "", "update_weights"]], "neural_compressor.model.torch_model": [[313, 2, 1, "", "IPEXModel"], [313, 2, 1, "", "PyTorchBaseModel"], [313, 2, 1, "", "PyTorchFXModel"], [313, 2, 1, "", "PyTorchModel"]], "neural_compressor.model.torch_model.IPEXModel": [[313, 4, 1, "", "save"], [313, 3, 1, "", "workspace_path"]], "neural_compressor.model.torch_model.PyTorchBaseModel": [[313, 4, 1, "", "forward"], [313, 3, 1, "", "fp32_model"], [313, 4, 1, "", "framework"], [313, 4, 1, "", "generate_forward_pre_hook"], [313, 4, 1, "", "get_all_weight_names"], [313, 4, 1, "", "get_gradient"], [313, 4, 1, "", "get_inputs"], [313, 4, 1, "", "get_weight"], [313, 3, 1, "", "model"], [313, 4, 1, "", "prune_weights_"], [313, 4, 1, "", "register_forward_pre_hook"], [313, 4, 1, "", "remove_hooks"], [313, 4, 1, "", "report_sparsity"], [313, 4, 1, "", "update_gradient"], [313, 4, 1, "", "update_weights"]], "neural_compressor.model.torch_model.PyTorchModel": [[313, 4, 1, "", "export"], [313, 4, 1, "", "export_to_bf16_onnx"], [313, 4, 1, "", "export_to_fp32_onnx"], [313, 4, 1, "", "export_to_int8_onnx"], [313, 4, 1, "", "export_to_jit"], [313, 3, 1, "", "graph_info"], [313, 4, 1, "", "load_quantized_state_dict"], [313, 4, 1, "", "quantized_state_dict"], [313, 4, 1, "", "save"], [313, 3, 1, "", "workspace_path"]], "neural_compressor.objective": [[314, 2, 1, "", "Accuracy"], [314, 2, 1, "", "Footprint"], [314, 2, 1, "", "ModelSize"], [314, 2, 1, "", "MultiObjective"], [314, 2, 1, "", "Objective"], [314, 2, 1, "", "Performance"], [314, 1, 1, "", "objective_custom_registry"], [314, 1, 1, "", "objective_registry"]], "neural_compressor.objective.Accuracy": [[314, 4, 1, "", "end"], [314, 4, 1, "", "start"]], "neural_compressor.objective.Footprint": [[314, 4, 1, "", "end"], [314, 4, 1, "", "start"]], "neural_compressor.objective.ModelSize": [[314, 4, 1, "", "end"], [314, 4, 1, "", "start"]], "neural_compressor.objective.MultiObjective": [[314, 4, 1, "", "accuracy_meet_req"], [314, 4, 1, "", "accuracy_meets"], [314, 3, 1, "", "accuracy_target"], [314, 3, 1, "", "baseline"], [314, 4, 1, "", "best_result"], [314, 4, 1, "", "compare"], [314, 4, 1, "", "end"], [314, 4, 1, "", "evaluate"], [314, 4, 1, "", "reset"], [314, 4, 1, "", "result"], [314, 4, 1, "", "set_model"], [314, 4, 1, "", "start"]], "neural_compressor.objective.Objective": [[314, 4, 1, "", "end"], [314, 3, 1, "", "model"], [314, 4, 1, "", "reset"], [314, 4, 1, "", "result"], [314, 4, 1, "", "result_list"], [314, 4, 1, "", "start"]], "neural_compressor.objective.Performance": [[314, 4, 1, "", "end"], [314, 4, 1, "", "start"]], "neural_compressor.quantization": [[315, 2, 1, "", "PostTrainingQuant"], [315, 1, 1, "", "fit"]], "neural_compressor.quantization.PostTrainingQuant": [[315, 3, 1, "", "calib_dataloader"], [315, 3, 1, "", "calib_func"], [315, 3, 1, "", "eval_dataloader"], [315, 3, 1, "", "eval_func"], [315, 4, 1, "", "execute"], [315, 3, 1, "", "metric"], [315, 3, 1, "", "model"], [315, 4, 1, "", "pre_proccess"]], "neural_compressor.strategy": [[316, 0, 0, "-", "auto"], [317, 0, 0, "-", "auto_mixed_precision"], [318, 0, 0, "-", "basic"], [319, 0, 0, "-", "bayesian"], [320, 0, 0, "-", "conservative"], [321, 0, 0, "-", "exhaustive"], [322, 0, 0, "-", "hawq_v2"], [324, 0, 0, "-", "mse"], [325, 0, 0, "-", "mse_v2"], [326, 0, 0, "-", "random"], [327, 0, 0, "-", "strategy"], [329, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[316, 2, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto.AutoTuneStrategy": [[316, 4, 1, "", "next_tune_cfg"], [316, 4, 1, "", "sequential_traverse"], [316, 4, 1, "", "traverse"]], "neural_compressor.strategy.auto_mixed_precision": [[317, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy": [[317, 4, 1, "", "next_tune_cfg"], [317, 4, 1, "", "traverse"]], "neural_compressor.strategy.basic": [[318, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.basic.BasicTuneStrategy": [[318, 4, 1, "", "distributed_next_tune_cfg_lst"], [318, 4, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian": [[319, 2, 1, "", "BayesianOptimization"], [319, 2, 1, "", "BayesianTuneStrategy"], [319, 2, 1, "", "TargetSpace"], [319, 1, 1, "", "acq_max"]], "neural_compressor.strategy.bayesian.BayesianOptimization": [[319, 4, 1, "", "gen_next_params"], [319, 3, 1, "", "max"], [319, 3, 1, "", "res"], [319, 3, 1, "", "space"], [319, 4, 1, "", "suggest"]], "neural_compressor.strategy.bayesian.BayesianTuneStrategy": [[319, 4, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian.TargetSpace": [[319, 4, 1, "", "array_to_params"], [319, 3, 1, "", "bounds"], [319, 3, 1, "", "dim"], [319, 3, 1, "", "empty"], [319, 4, 1, "", "get_target"], [319, 3, 1, "", "keys"], [319, 4, 1, "", "max"], [319, 3, 1, "", "params"], [319, 4, 1, "", "params_to_array"], [319, 4, 1, "", "random_sample"], [319, 4, 1, "", "register"], [319, 4, 1, "", "res"], [319, 3, 1, "", "target"]], "neural_compressor.strategy.conservative": [[320, 2, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative.ConservativeTuneStrategy": [[320, 4, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.exhaustive": [[321, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy": [[321, 4, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.hawq_v2": [[322, 2, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy": [[322, 4, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse": [[324, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse.MSETuneStrategy": [[324, 4, 1, "", "mse_impact_lst"], [324, 4, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse_v2": [[325, 2, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy": [[325, 4, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.random": [[326, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.random.RandomTuneStrategy": [[326, 4, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.strategy": [[327, 2, 1, "", "TuneStrategy"], [327, 1, 1, "", "strategy_registry"]], "neural_compressor.strategy.strategy.TuneStrategy": [[327, 4, 1, "", "apply_all_tuning_recipes"], [327, 4, 1, "", "apply_recipe_one_by_one"], [327, 4, 1, "", "deploy_config"], [327, 4, 1, "", "distributed_next_tune_cfg_lst"], [327, 4, 1, "", "distributed_traverse"], [327, 3, 1, "", "evaluation_result"], [327, 4, 1, "", "initial_best_acc"], [327, 4, 1, "", "initial_tuning_cfg"], [327, 4, 1, "", "master_worker_handle"], [327, 4, 1, "", "meet_acc_req"], [327, 4, 1, "", "next_tune_cfg"], [327, 4, 1, "", "set_param_for_post_quantization_algos"], [327, 4, 1, "", "set_param_for_pre_quantization_algos"], [327, 4, 1, "", "set_q_func"], [327, 4, 1, "", "set_tuning_space"], [327, 4, 1, "", "setup_resume"], [327, 4, 1, "", "show_baseline_info"], [327, 4, 1, "", "slave_worker_handle"], [327, 4, 1, "", "stop"], [327, 4, 1, "", "traverse"], [327, 4, 1, "", "update_best_op_tuning_cfg"]], "neural_compressor.strategy.utils": [[329, 2, 1, "", "FallbackTuningSampler"], [329, 2, 1, "", "OpTuningConfig"], [329, 2, 1, "", "OpTypeWiseTuningSampler"], [329, 2, 1, "", "OpWiseTuningSampler"], [329, 2, 1, "", "TuningItem"], [329, 2, 1, "", "TuningSampler"], [329, 2, 1, "", "TuningSpace"], [328, 0, 0, "-", "constant"], [330, 0, 0, "-", "tuning_sampler"], [331, 0, 0, "-", "tuning_space"], [332, 0, 0, "-", "tuning_structs"], [333, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.OpTuningConfig": [[329, 4, 1, "", "from_state"], [329, 4, 1, "", "get_state"]], "neural_compressor.strategy.utils.OpWiseTuningSampler": [[329, 4, 1, "", "get_opwise_candidate"]], "neural_compressor.strategy.utils.TuningItem": [[329, 4, 1, "", "append"], [329, 4, 1, "", "get_details"], [329, 4, 1, "", "get_option_by_name"], [329, 4, 1, "", "get_options_name"], [329, 3, 1, "", "options"], [329, 4, 1, "", "remove"]], "neural_compressor.strategy.utils.TuningSpace": [[329, 4, 1, "", "get_default_config"], [329, 4, 1, "", "get_default_full_path"], [329, 4, 1, "", "get_item_by_path"], [329, 4, 1, "", "get_op_default_path_by_pattern"], [329, 4, 1, "", "query_item_option"], [329, 4, 1, "", "query_items_by_quant_mode"], [329, 4, 1, "", "query_quant_mode_item_by_full_path"]], "neural_compressor.strategy.utils.tuning_sampler": [[330, 2, 1, "", "FallbackTuningSampler"], [330, 2, 1, "", "ModelWiseTuningSampler"], [330, 2, 1, "", "OpTypeWiseTuningSampler"], [330, 2, 1, "", "OpWiseTuningSampler"], [330, 2, 1, "", "SmoothQuantSampler"], [330, 2, 1, "", "TuningOrder"], [330, 2, 1, "", "TuningSampler"], [330, 2, 1, "", "TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler": [[330, 4, 1, "", "get_opwise_candidate"]], "neural_compressor.strategy.utils.tuning_sampler.TuningSamplerRegistry": [[330, 4, 1, "", "register"]], "neural_compressor.strategy.utils.tuning_space": [[331, 2, 1, "", "TuningItem"], [331, 2, 1, "", "TuningSpace"], [331, 1, 1, "", "get_op_mode_by_query_order"], [331, 1, 1, "", "initial_tuning_cfg_with_quant_mode"], [331, 1, 1, "", "pattern_to_internal"], [331, 1, 1, "", "pattern_to_path"], [331, 1, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_space.TuningItem": [[331, 4, 1, "", "append"], [331, 4, 1, "", "get_details"], [331, 4, 1, "", "get_option_by_name"], [331, 4, 1, "", "get_options_name"], [331, 3, 1, "", "options"], [331, 4, 1, "", "remove"]], "neural_compressor.strategy.utils.tuning_space.TuningSpace": [[331, 4, 1, "", "get_default_config"], [331, 4, 1, "", "get_default_full_path"], [331, 4, 1, "", "get_item_by_path"], [331, 4, 1, "", "get_op_default_path_by_pattern"], [331, 4, 1, "", "query_item_option"], [331, 4, 1, "", "query_items_by_quant_mode"], [331, 4, 1, "", "query_quant_mode_item_by_full_path"]], "neural_compressor.strategy.utils.tuning_structs": [[332, 2, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig": [[332, 4, 1, "", "from_state"], [332, 4, 1, "", "get_state"]], "neural_compressor.strategy.utils.utility": [[333, 2, 1, "", "OrderedDefaultDict"], [333, 1, 1, "", "extract_data_type"], [333, 1, 1, "", "get_adaptor_name"], [333, 1, 1, "", "reverted_data_type"]], "neural_compressor.training": [[334, 2, 1, "", "CallBacks"], [334, 2, 1, "", "CompressionManager"], [334, 1, 1, "", "fit"], [334, 1, 1, "", "prepare_compression"]], "neural_compressor.training.CallBacks": [[334, 4, 1, "", "on_after_compute_loss"], [334, 4, 1, "", "on_after_eval"], [334, 4, 1, "", "on_after_optimizer_step"], [334, 4, 1, "", "on_before_eval"], [334, 4, 1, "", "on_before_optimizer_step"], [334, 4, 1, "", "on_epoch_begin"], [334, 4, 1, "", "on_epoch_end"], [334, 4, 1, "", "on_step_begin"], [334, 4, 1, "", "on_step_end"], [334, 4, 1, "", "on_train_begin"], [334, 4, 1, "", "on_train_end"]], "neural_compressor.training.CompressionManager": [[334, 3, 1, "", "eval_dataloader"], [334, 3, 1, "", "eval_func"], [334, 4, 1, "", "export"], [334, 4, 1, "", "fit"], [334, 3, 1, "", "metric"], [334, 4, 1, "", "save"], [334, 3, 1, "", "train_func"]], "neural_compressor.utils": [[338, 2, 1, "", "LayerHistogramCollector"], [335, 0, 0, "-", "collect_layer_histogram"], [336, 0, 0, "-", "constant"], [337, 0, 0, "-", "create_obj_from_config"], [338, 1, 1, "", "debug"], [338, 1, 1, "", "error"], [338, 1, 1, "", "fatal"], [338, 1, 1, "", "info"], [339, 0, 0, "-", "kl_divergence"], [340, 0, 0, "-", "load_huggingface"], [338, 1, 1, "", "log"], [341, 0, 0, "-", "logger"], [342, 0, 0, "-", "options"], [343, 0, 0, "-", "pytorch"], [338, 1, 1, "", "set_random_seed"], [344, 0, 0, "-", "utility"], [338, 1, 1, "", "warn"], [338, 1, 1, "", "warning"]], "neural_compressor.utils.LayerHistogramCollector": [[338, 4, 1, "", "collect"]], "neural_compressor.utils.collect_layer_histogram": [[335, 2, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector": [[335, 4, 1, "", "collect"]], "neural_compressor.utils.create_obj_from_config": [[337, 1, 1, "", "create_dataloader"], [337, 1, 1, "", "create_dataset"], [337, 1, 1, "", "create_eval_func"], [337, 1, 1, "", "create_train_func"], [337, 1, 1, "", "get_algorithm"], [337, 1, 1, "", "get_func_from_config"], [337, 1, 1, "", "get_metrics"], [337, 1, 1, "", "get_postprocess"], [337, 1, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[339, 2, 1, "", "KL_Divergence"]], "neural_compressor.utils.kl_divergence.KL_Divergence": [[339, 4, 1, "", "expand_quantized_bins"], [339, 4, 1, "", "get_threshold"], [339, 4, 1, "", "safe_entropy"]], "neural_compressor.utils.load_huggingface": [[340, 2, 1, "", "OptimizedModel"], [340, 1, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.load_huggingface.OptimizedModel": [[340, 4, 1, "", "from_pretrained"]], "neural_compressor.utils.logger": [[341, 2, 1, "", "Logger"], [341, 1, 1, "", "debug"], [341, 1, 1, "", "error"], [341, 1, 1, "", "fatal"], [341, 1, 1, "", "info"], [341, 1, 1, "", "log"], [341, 1, 1, "", "warn"], [341, 1, 1, "", "warning"]], "neural_compressor.utils.logger.Logger": [[341, 4, 1, "", "get_logger"]], "neural_compressor.utils.options": [[342, 2, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[343, 1, 1, "", "load"]], "neural_compressor.utils.utility": [[344, 2, 1, "", "CaptureOutputToFile"], [344, 2, 1, "", "CpuInfo"], [344, 1, 1, "", "Dequantize"], [344, 1, 1, "", "DequantizeWeight"], [344, 2, 1, "", "GLOBAL_STATE"], [344, 2, 1, "", "LazyImport"], [344, 2, 1, "", "MODE"], [344, 2, 1, "", "Statistics"], [344, 1, 1, "", "combine_histogram"], [344, 1, 1, "", "compute_sparsity"], [344, 1, 1, "", "dump_data_to_local"], [344, 1, 1, "", "dump_elapsed_time"], [344, 1, 1, "", "equal_dicts"], [344, 1, 1, "", "fault_tolerant_file"], [344, 1, 1, "", "get_all_fp32_data"], [344, 1, 1, "", "get_size"], [344, 1, 1, "", "get_tensor_histogram"], [344, 1, 1, "", "get_tuning_history"], [344, 1, 1, "", "load_data_from_pkl"], [344, 1, 1, "", "recover"], [344, 1, 1, "", "set_random_seed"], [344, 1, 1, "", "set_resume_from"], [344, 1, 1, "", "set_tensorboard"], [344, 1, 1, "", "set_workspace"], [344, 1, 1, "", "show_memory_info"], [344, 1, 1, "", "singleton"], [344, 1, 1, "", "str2array"], [344, 1, 1, "", "time_limit"], [344, 1, 1, "", "version1_eq_version2"], [344, 1, 1, "", "version1_gt_version2"], [344, 1, 1, "", "version1_gte_version2"], [344, 1, 1, "", "version1_lt_version2"], [344, 1, 1, "", "version1_lte_version2"]], "neural_compressor.utils.utility.CpuInfo": [[344, 3, 1, "", "bf16"], [344, 3, 1, "", "cores_per_socket"], [344, 4, 1, "", "get_number_of_sockets"], [344, 3, 1, "", "vnni"]], "neural_compressor.utils.utility.Statistics": [[344, 4, 1, "", "print_stat"]], "neural_compressor.ux": [[420, 0, 0, "-", "components"], [479, 0, 0, "-", "inc_bench"], [488, 0, 0, "-", "utils"], [514, 0, 0, "-", "web"]], "neural_compressor.ux.components": [[348, 0, 0, "-", "benchmark"], [352, 0, 0, "-", "config_generator"], [360, 0, 0, "-", "configuration_wizard"], [396, 0, 0, "-", "db_manager"], [401, 0, 0, "-", "diagnosis"], [409, 0, 0, "-", "file_browser"], [415, 0, 0, "-", "graph"], [421, 0, 0, "-", "jobs_management"], [425, 0, 0, "-", "manage_workspace"], [427, 0, 0, "-", "model"], [446, 0, 0, "-", "model_zoo"], [448, 0, 0, "-", "names_mapper"], [455, 0, 0, "-", "optimization"], [471, 0, 0, "-", "profiling"]], "neural_compressor.ux.components.benchmark": [[348, 2, 1, "", "Benchmarks"], [345, 0, 0, "-", "benchmark"], [346, 0, 0, "-", "benchmark_model"], [347, 0, 0, "-", "execute_benchmark"]], "neural_compressor.ux.components.benchmark.benchmark": [[345, 2, 1, "", "Benchmark"], [345, 2, 1, "", "DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark.Benchmark": [[345, 3, 1, "", "config_filename"], [345, 3, 1, "", "configuration_data"], [345, 4, 1, "", "execute"], [345, 4, 1, "", "generate_config"], [345, 3, 1, "", "workdir"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[346, 1, 1, "", "benchmark_model"], [346, 1, 1, "", "parse_args"], [346, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[347, 1, 1, "", "benchmark_result_update"], [347, 1, 1, "", "benchmark_result_update_pytorch_script"], [347, 1, 1, "", "execute_benchmark"], [347, 1, 1, "", "execute_real_benchmark"], [347, 1, 1, "", "pytorch_script_bench_optimizations"], [347, 1, 1, "", "pytorch_script_bench_original_model"]], "neural_compressor.ux.components.config_generator": [[349, 0, 0, "-", "benchmark_config_generator"], [350, 0, 0, "-", "config_generator"], [351, 0, 0, "-", "graph_optimization_config_generator"], [353, 0, 0, "-", "mixed_precision_config_generator"], [354, 0, 0, "-", "profiling_config_generator"], [355, 0, 0, "-", "pruning_config_generator"], [356, 0, 0, "-", "quantization_config_generator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[349, 2, 1, "", "BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator": [[349, 4, 1, "", "generate"], [349, 4, 1, "", "generate_accuracy_config"], [349, 4, 1, "", "generate_evaluation_config"], [349, 4, 1, "", "generate_performance_config"]], "neural_compressor.ux.components.config_generator.config_generator": [[350, 2, 1, "", "ConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator": [[350, 4, 1, "", "generate"], [350, 4, 1, "", "generate_dataloader_config"], [350, 4, 1, "", "generate_model_config"], [350, 4, 1, "", "get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[351, 2, 1, "", "GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator": [[351, 4, 1, "", "generate"], [351, 4, 1, "", "generate_evaluation_config"], [351, 4, 1, "", "generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[353, 2, 1, "", "MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator": [[353, 4, 1, "", "generate"], [353, 4, 1, "", "generate_evaluation_config"], [353, 4, 1, "", "generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[354, 2, 1, "", "ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator": [[354, 4, 1, "", "generate"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[355, 2, 1, "", "PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator": [[355, 4, 1, "", "generate"], [355, 4, 1, "", "generate_evaluation_config"], [355, 4, 1, "", "generate_pruning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[356, 2, 1, "", "QuantizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator": [[356, 4, 1, "", "generate"], [356, 4, 1, "", "generate_evaluation_config"], [356, 4, 1, "", "generate_quantization_config"], [356, 4, 1, "", "generate_tuning_config"]], "neural_compressor.ux.components.configuration_wizard": [[357, 0, 0, "-", "configuration_parser"], [358, 0, 0, "-", "get_boundary_nodes"], [359, 0, 0, "-", "get_configuration"], [361, 0, 0, "-", "params_feeder"], [362, 0, 0, "-", "pruning_config_parser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[357, 2, 1, "", "ConfigurationParser"], [357, 1, 1, "", "normalize_string_list"], [357, 1, 1, "", "parse_list_value"], [357, 1, 1, "", "parse_multidim_list"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser": [[357, 4, 1, "", "get_param_type"], [357, 4, 1, "", "parse"], [357, 4, 1, "", "parse_dataloader"], [357, 4, 1, "", "parse_evaluation_data"], [357, 4, 1, "", "parse_metric"], [357, 4, 1, "", "parse_transforms"], [357, 4, 1, "", "parse_value"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[358, 1, 1, "", "get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[359, 1, 1, "", "get_predefined_configuration"], [359, 1, 1, "", "update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[361, 2, 1, "", "Feeder"], [361, 1, 1, "", "get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder": [[361, 4, 1, "", "feed"], [361, 4, 1, "", "get_dataloaders"], [361, 4, 1, "", "get_domains"], [361, 4, 1, "", "get_frameworks"], [361, 4, 1, "", "get_metrics"], [361, 4, 1, "", "get_models"], [361, 4, 1, "", "get_objectives"], [361, 4, 1, "", "get_precisions"], [361, 4, 1, "", "get_quantization_approaches"], [361, 4, 1, "", "get_strategies"], [361, 4, 1, "", "get_transforms"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[362, 2, 1, "", "PruningConfigParser"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser": [[362, 4, 1, "", "generate_tree"], [362, 4, 1, "", "parse"], [362, 4, 1, "", "parse_entry"]], "neural_compressor.ux.components.db_manager": [[396, 2, 1, "", "DBManager"], [363, 0, 0, "-", "db_manager"], [372, 0, 0, "-", "db_models"], [391, 0, 0, "-", "db_operations"], [397, 0, 0, "-", "params_interfaces"], [398, 0, 0, "-", "utils"]], "neural_compressor.ux.components.db_manager.DBManager": [[396, 4, 1, "", "create_all"], [396, 4, 1, "", "create_sqlalchemy_engine"], [396, 3, 1, "", "engine"], [396, 4, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[363, 2, 1, "", "DBManager"]], "neural_compressor.ux.components.db_manager.db_manager.DBManager": [[363, 4, 1, "", "create_all"], [363, 4, 1, "", "create_sqlalchemy_engine"], [363, 3, 1, "", "engine"], [363, 4, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_models": [[364, 0, 0, "-", "benchmark"], [365, 0, 0, "-", "benchmark_result"], [366, 0, 0, "-", "dataloader"], [367, 0, 0, "-", "dataset"], [368, 0, 0, "-", "domain"], [369, 0, 0, "-", "domain_flavour"], [370, 0, 0, "-", "example"], [371, 0, 0, "-", "framework"], [373, 0, 0, "-", "metric"], [374, 0, 0, "-", "model"], [375, 0, 0, "-", "optimization"], [376, 0, 0, "-", "optimization_type"], [377, 0, 0, "-", "precision"], [378, 0, 0, "-", "profiling"], [379, 0, 0, "-", "profiling_result"], [380, 0, 0, "-", "project"], [381, 0, 0, "-", "pruning_details"], [382, 0, 0, "-", "transform"], [383, 0, 0, "-", "tuning_details"], [384, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[364, 2, 1, "", "Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark": [[364, 4, 1, "", "add"], [364, 4, 1, "", "build_info"], [364, 4, 1, "", "clean_status"], [364, 4, 1, "", "delete_benchmark"], [364, 4, 1, "", "details"], [364, 4, 1, "", "list"], [364, 4, 1, "", "update_batch_size"], [364, 4, 1, "", "update_config_path"], [364, 4, 1, "", "update_cores_per_instance"], [364, 4, 1, "", "update_dataset"], [364, 4, 1, "", "update_duration"], [364, 4, 1, "", "update_execution_command"], [364, 4, 1, "", "update_log_path"], [364, 4, 1, "", "update_mode"], [364, 4, 1, "", "update_number_of_instance"], [364, 4, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[365, 2, 1, "", "BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult": [[365, 4, 1, "", "add"], [365, 4, 1, "", "build_info"], [365, 4, 1, "", "update_accuracy"], [365, 4, 1, "", "update_performance"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[366, 2, 1, "", "Dataloader"], [366, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader": [[366, 4, 1, "", "list"], [366, 4, 1, "", "list_by_framework"], [366, 4, 1, "", "query_to_list"], [366, 4, 1, "", "update_params"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[367, 2, 1, "", "Dataset"]], "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset": [[367, 4, 1, "", "add"], [367, 4, 1, "", "build_info"], [367, 4, 1, "", "delete_dataset"], [367, 4, 1, "", "details"], [367, 4, 1, "", "list"], [367, 4, 1, "", "update_template_path"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[368, 2, 1, "", "Domain"], [368, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain.Domain": [[368, 4, 1, "", "get_domain_id"], [368, 4, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[369, 2, 1, "", "DomainFlavour"], [369, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour": [[369, 4, 1, "", "get_domain_flavour_id"], [369, 4, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.example": [[370, 2, 1, "", "Example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[371, 2, 1, "", "Framework"], [371, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.framework.Framework": [[371, 4, 1, "", "get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[373, 2, 1, "", "Metric"], [373, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric.Metric": [[373, 4, 1, "", "list"], [373, 4, 1, "", "list_by_framework"], [373, 4, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[374, 2, 1, "", "Model"]], "neural_compressor.ux.components.db_manager.db_models.model.Model": [[374, 4, 1, "", "add"], [374, 4, 1, "", "build_info"], [374, 4, 1, "", "delete_model"], [374, 4, 1, "", "details"], [374, 4, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[375, 2, 1, "", "Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization": [[375, 4, 1, "", "add"], [375, 4, 1, "", "build_info"], [375, 4, 1, "", "clean_status"], [375, 4, 1, "", "delete_optimization"], [375, 4, 1, "", "details"], [375, 4, 1, "", "get_optimization_by_project_and_model"], [375, 4, 1, "", "get_pinned_benchmarks"], [375, 4, 1, "", "list"], [375, 4, 1, "", "pin_accuracy_benchmark"], [375, 4, 1, "", "pin_performance_benchmark"], [375, 4, 1, "", "unpin_benchmark"], [375, 4, 1, "", "update_batch_size"], [375, 4, 1, "", "update_config_path"], [375, 4, 1, "", "update_dataset"], [375, 4, 1, "", "update_duration"], [375, 4, 1, "", "update_execution_command"], [375, 4, 1, "", "update_log_path"], [375, 4, 1, "", "update_optimized_model"], [375, 4, 1, "", "update_precision"], [375, 4, 1, "", "update_pruning_details"], [375, 4, 1, "", "update_sampling_size"], [375, 4, 1, "", "update_status"], [375, 4, 1, "", "update_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[376, 2, 1, "", "OptimizationType"], [376, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType": [[376, 4, 1, "", "add"], [376, 4, 1, "", "get_optimization_type_by_id"], [376, 4, 1, "", "get_optimization_type_by_name"], [376, 4, 1, "", "get_optimization_type_for_precision"], [376, 4, 1, "", "get_optimization_type_id"], [376, 4, 1, "", "list"], [376, 4, 1, "", "list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[377, 2, 1, "", "Precision"], [377, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision.Precision": [[377, 4, 1, "", "add"], [377, 4, 1, "", "get_precision_by_id"], [377, 4, 1, "", "get_precision_by_name"], [377, 4, 1, "", "get_precision_id"], [377, 4, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[378, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling": [[378, 4, 1, "", "add"], [378, 4, 1, "", "build_info"], [378, 4, 1, "", "clean_status"], [378, 4, 1, "", "delete_profiling"], [378, 4, 1, "", "details"], [378, 4, 1, "", "list"], [378, 4, 1, "", "update_dataset"], [378, 4, 1, "", "update_duration"], [378, 4, 1, "", "update_execution_command"], [378, 4, 1, "", "update_log_path"], [378, 4, 1, "", "update_num_threads"], [378, 4, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[379, 2, 1, "", "ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult": [[379, 4, 1, "", "add"], [379, 4, 1, "", "build_info"], [379, 4, 1, "", "bulk_add"], [379, 4, 1, "", "delete_results"], [379, 4, 1, "", "get_results"]], "neural_compressor.ux.components.db_manager.db_models.project": [[380, 2, 1, "", "Project"]], "neural_compressor.ux.components.db_manager.db_models.project.Project": [[380, 4, 1, "", "create_project"], [380, 4, 1, "", "delete_project"], [380, 4, 1, "", "get_model_by_name"], [380, 4, 1, "", "list_projects"], [380, 4, 1, "", "project_details"], [380, 4, 1, "", "update_notes"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[381, 2, 1, "", "PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails": [[381, 4, 1, "", "add"], [381, 4, 1, "", "build_info"], [381, 4, 1, "", "delete_pruning_details"], [381, 4, 1, "", "update"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[382, 2, 1, "", "Transform"], [382, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.transform.Transform": [[382, 4, 1, "", "list"], [382, 4, 1, "", "list_by_domain"], [382, 4, 1, "", "list_by_framework"], [382, 4, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[383, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails": [[383, 4, 1, "", "add"], [383, 4, 1, "", "delete_tuning_details"], [383, 4, 1, "", "update"], [383, 4, 1, "", "update_tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[384, 2, 1, "", "TuningHistory"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory": [[384, 4, 1, "", "add"], [384, 4, 1, "", "build_info"]], "neural_compressor.ux.components.db_manager.db_operations": [[391, 2, 1, "", "BenchmarkAPIInterface"], [391, 2, 1, "", "DatasetAPIInterface"], [391, 2, 1, "", "DiagnosisAPIInterface"], [391, 2, 1, "", "DictionariesAPIInterface"], [391, 2, 1, "", "ExamplesAPIInterface"], [391, 2, 1, "", "ModelAPIInterface"], [391, 2, 1, "", "OptimizationAPIInterface"], [391, 2, 1, "", "ProfilingAPIInterface"], [391, 2, 1, "", "ProjectAPIInterface"], [385, 0, 0, "-", "benchmark_api_interface"], [386, 0, 0, "-", "dataset_api_interface"], [387, 0, 0, "-", "db_operations"], [388, 0, 0, "-", "diagnosis_api_interface"], [389, 0, 0, "-", "dictionaries_api_interface"], [390, 0, 0, "-", "examples_api_interface"], [392, 0, 0, "-", "model_api_interface"], [393, 0, 0, "-", "optimization_api_interface"], [394, 0, 0, "-", "profiling_api_interface"], [395, 0, 0, "-", "project_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface": [[391, 4, 1, "", "add_benchmark"], [391, 4, 1, "", "add_result"], [391, 4, 1, "", "clean_status"], [391, 4, 1, "", "delete_benchmark"], [391, 4, 1, "", "edit_benchmark"], [391, 4, 1, "", "get_benchmark_details"], [391, 4, 1, "", "list_benchmarks"], [391, 4, 1, "", "parse_benchmark_data"], [391, 4, 1, "", "parse_benchmark_edit_data"], [391, 4, 1, "", "update_benchmark_accuracy"], [391, 4, 1, "", "update_benchmark_duration"], [391, 4, 1, "", "update_benchmark_performance"], [391, 4, 1, "", "update_benchmark_status"], [391, 4, 1, "", "update_execution_command"], [391, 4, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface": [[391, 4, 1, "", "add_dataset"], [391, 4, 1, "", "check_if_custom_metric_or_dataloader"], [391, 4, 1, "", "dataloader_path"], [391, 4, 1, "", "delete_dataset"], [391, 4, 1, "", "generate_custom_template"], [391, 4, 1, "", "generate_template"], [391, 4, 1, "", "get_dataset_details"], [391, 4, 1, "", "get_predefined_dataset"], [391, 4, 1, "", "list_datasets"], [391, 4, 1, "", "parse_dataset_data"], [391, 4, 1, "", "prepare_predefined_dataloader"], [391, 4, 1, "", "prepare_predefined_transform"], [391, 4, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface": [[391, 4, 1, "", "generate_optimization"], [391, 4, 1, "", "get_op_details"], [391, 4, 1, "", "get_op_list"], [391, 4, 1, "", "histogram"], [391, 4, 1, "", "model_wise_params"], [391, 4, 1, "", "parse_model_wise_config"], [391, 4, 1, "", "parse_op_wise_config"], [391, 4, 1, "", "parse_optimization_data"], [391, 4, 1, "", "parse_wise_parameters"], [391, 4, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface": [[391, 4, 1, "", "list_dataloaders"], [391, 4, 1, "", "list_dataloaders_by_framework"], [391, 4, 1, "", "list_domain_flavours"], [391, 4, 1, "", "list_domains"], [391, 4, 1, "", "list_metrics"], [391, 4, 1, "", "list_metrics_by_framework"], [391, 4, 1, "", "list_optimization_types"], [391, 4, 1, "", "list_optimization_types_for_precision"], [391, 4, 1, "", "list_precisions"], [391, 4, 1, "", "list_transforms"], [391, 4, 1, "", "list_transforms_by_domain"], [391, 4, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface": [[391, 4, 1, "", "create_project"], [391, 4, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface": [[391, 4, 1, "", "add_model"], [391, 4, 1, "", "delete_model"], [391, 4, 1, "", "get_model_details"], [391, 4, 1, "", "list_models"], [391, 4, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface": [[391, 4, 1, "", "add_optimization"], [391, 4, 1, "", "add_pruning_optimization"], [391, 4, 1, "", "add_quantization_optimization"], [391, 4, 1, "", "add_standard_optimization"], [391, 4, 1, "", "add_tuning_history"], [391, 4, 1, "", "clean_status"], [391, 4, 1, "", "delete_optimization"], [391, 4, 1, "", "edit_optimization"], [391, 4, 1, "", "edit_pruning_details"], [391, 4, 1, "", "edit_tuning_details"], [391, 4, 1, "", "get_optimization_details"], [391, 4, 1, "", "get_pruning_details"], [391, 4, 1, "", "list_optimizations"], [391, 4, 1, "", "load_pruning_details_config"], [391, 4, 1, "", "parse_optimization_data"], [391, 4, 1, "", "parse_optimization_edit_data"], [391, 4, 1, "", "parse_tuning_history"], [391, 4, 1, "", "pin_accuracy_benchmark"], [391, 4, 1, "", "pin_performance_benchmark"], [391, 4, 1, "", "update_execution_command"], [391, 4, 1, "", "update_optimization_duration"], [391, 4, 1, "", "update_optimization_status"], [391, 4, 1, "", "update_optimized_model"], [391, 4, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface": [[391, 4, 1, "", "add_profiling"], [391, 4, 1, "", "add_result"], [391, 4, 1, "", "bulk_add_results"], [391, 4, 1, "", "clean_status"], [391, 4, 1, "", "delete_profiling"], [391, 4, 1, "", "edit_profiling"], [391, 4, 1, "", "get_profiling_details"], [391, 4, 1, "", "list_profilings"], [391, 4, 1, "", "parse_profiling_data"], [391, 4, 1, "", "parse_profiling_edit_data"], [391, 4, 1, "", "parse_profiling_result_data"], [391, 4, 1, "", "update_execution_command"], [391, 4, 1, "", "update_log_path"], [391, 4, 1, "", "update_profiling_duration"], [391, 4, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface": [[391, 4, 1, "", "add_dummy_dataset"], [391, 4, 1, "", "add_model"], [391, 4, 1, "", "create_project"], [391, 4, 1, "", "delete_project"], [391, 4, 1, "", "get_project_details"], [391, 4, 1, "", "list_projects"], [391, 4, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[385, 2, 1, "", "BenchmarkAPIInterface"], [385, 1, 1, "", "before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface": [[385, 4, 1, "", "add_benchmark"], [385, 4, 1, "", "add_result"], [385, 4, 1, "", "clean_status"], [385, 4, 1, "", "delete_benchmark"], [385, 4, 1, "", "edit_benchmark"], [385, 4, 1, "", "get_benchmark_details"], [385, 4, 1, "", "list_benchmarks"], [385, 4, 1, "", "parse_benchmark_data"], [385, 4, 1, "", "parse_benchmark_edit_data"], [385, 4, 1, "", "update_benchmark_accuracy"], [385, 4, 1, "", "update_benchmark_duration"], [385, 4, 1, "", "update_benchmark_performance"], [385, 4, 1, "", "update_benchmark_status"], [385, 4, 1, "", "update_execution_command"], [385, 4, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[386, 2, 1, "", "DatasetAPIInterface"], [386, 1, 1, "", "initialize_associations"], [386, 1, 1, "", "initialize_precision_optimization_types_association"], [386, 1, 1, "", "search_in_list_of_dict"], [386, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [386, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface": [[386, 4, 1, "", "add_dataset"], [386, 4, 1, "", "check_if_custom_metric_or_dataloader"], [386, 4, 1, "", "dataloader_path"], [386, 4, 1, "", "delete_dataset"], [386, 4, 1, "", "generate_custom_template"], [386, 4, 1, "", "generate_template"], [386, 4, 1, "", "get_dataset_details"], [386, 4, 1, "", "get_predefined_dataset"], [386, 4, 1, "", "list_datasets"], [386, 4, 1, "", "parse_dataset_data"], [386, 4, 1, "", "prepare_predefined_dataloader"], [386, 4, 1, "", "prepare_predefined_transform"], [386, 4, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[387, 1, 1, "", "initialize_associations"], [387, 1, 1, "", "initialize_precision_optimization_types_association"], [387, 1, 1, "", "search_in_list_of_dict"], [387, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [387, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[388, 2, 1, "", "DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface": [[388, 4, 1, "", "generate_optimization"], [388, 4, 1, "", "get_op_details"], [388, 4, 1, "", "get_op_list"], [388, 4, 1, "", "histogram"], [388, 4, 1, "", "model_wise_params"], [388, 4, 1, "", "parse_model_wise_config"], [388, 4, 1, "", "parse_op_wise_config"], [388, 4, 1, "", "parse_optimization_data"], [388, 4, 1, "", "parse_wise_parameters"], [388, 4, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[389, 2, 1, "", "DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface": [[389, 4, 1, "", "list_dataloaders"], [389, 4, 1, "", "list_dataloaders_by_framework"], [389, 4, 1, "", "list_domain_flavours"], [389, 4, 1, "", "list_domains"], [389, 4, 1, "", "list_metrics"], [389, 4, 1, "", "list_metrics_by_framework"], [389, 4, 1, "", "list_optimization_types"], [389, 4, 1, "", "list_optimization_types_for_precision"], [389, 4, 1, "", "list_precisions"], [389, 4, 1, "", "list_transforms"], [389, 4, 1, "", "list_transforms_by_domain"], [389, 4, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[390, 2, 1, "", "ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface": [[390, 4, 1, "", "create_project"], [390, 4, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[392, 2, 1, "", "ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface": [[392, 4, 1, "", "add_model"], [392, 4, 1, "", "delete_model"], [392, 4, 1, "", "get_model_details"], [392, 4, 1, "", "list_models"], [392, 4, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[393, 2, 1, "", "OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface": [[393, 4, 1, "", "add_optimization"], [393, 4, 1, "", "add_pruning_optimization"], [393, 4, 1, "", "add_quantization_optimization"], [393, 4, 1, "", "add_standard_optimization"], [393, 4, 1, "", "add_tuning_history"], [393, 4, 1, "", "clean_status"], [393, 4, 1, "", "delete_optimization"], [393, 4, 1, "", "edit_optimization"], [393, 4, 1, "", "edit_pruning_details"], [393, 4, 1, "", "edit_tuning_details"], [393, 4, 1, "", "get_optimization_details"], [393, 4, 1, "", "get_pruning_details"], [393, 4, 1, "", "list_optimizations"], [393, 4, 1, "", "load_pruning_details_config"], [393, 4, 1, "", "parse_optimization_data"], [393, 4, 1, "", "parse_optimization_edit_data"], [393, 4, 1, "", "parse_tuning_history"], [393, 4, 1, "", "pin_accuracy_benchmark"], [393, 4, 1, "", "pin_performance_benchmark"], [393, 4, 1, "", "update_execution_command"], [393, 4, 1, "", "update_optimization_duration"], [393, 4, 1, "", "update_optimization_status"], [393, 4, 1, "", "update_optimized_model"], [393, 4, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[394, 2, 1, "", "ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface": [[394, 4, 1, "", "add_profiling"], [394, 4, 1, "", "add_result"], [394, 4, 1, "", "bulk_add_results"], [394, 4, 1, "", "clean_status"], [394, 4, 1, "", "delete_profiling"], [394, 4, 1, "", "edit_profiling"], [394, 4, 1, "", "get_profiling_details"], [394, 4, 1, "", "list_profilings"], [394, 4, 1, "", "parse_profiling_data"], [394, 4, 1, "", "parse_profiling_edit_data"], [394, 4, 1, "", "parse_profiling_result_data"], [394, 4, 1, "", "update_execution_command"], [394, 4, 1, "", "update_log_path"], [394, 4, 1, "", "update_profiling_duration"], [394, 4, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[395, 2, 1, "", "ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface": [[395, 4, 1, "", "add_dummy_dataset"], [395, 4, 1, "", "add_model"], [395, 4, 1, "", "create_project"], [395, 4, 1, "", "delete_project"], [395, 4, 1, "", "get_project_details"], [395, 4, 1, "", "list_projects"], [395, 4, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[397, 2, 1, "", "BenchmarkAddParamsInterface"], [397, 2, 1, "", "BenchmarkEditParamsInterface"], [397, 2, 1, "", "DatasetAddParamsInterface"], [397, 2, 1, "", "DiagnosisOptimizationParamsInterface"], [397, 2, 1, "", "ModelAddParamsInterface"], [397, 2, 1, "", "OptimizationAddParamsInterface"], [397, 2, 1, "", "OptimizationEditParamsInterface"], [397, 2, 1, "", "ProfilingAddParamsInterface"], [397, 2, 1, "", "ProfilingEditParamsInterface"], [397, 2, 1, "", "ProfilingResultAddParamsInterface"], [397, 2, 1, "", "TuningHistoryInterface"], [397, 2, 1, "", "TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface": [[397, 4, 1, "", "parse_nodes"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface": [[397, 4, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface": [[397, 4, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.utils": [[398, 1, 1, "", "get_framework_dataloaders_config"], [398, 1, 1, "", "get_framework_transforms_config"], [398, 1, 1, "", "update_dataloaders_params"]], "neural_compressor.ux.components.diagnosis": [[399, 0, 0, "-", "diagnosis"], [400, 0, 0, "-", "factory"], [402, 0, 0, "-", "onnx_diagnosis"], [404, 0, 0, "-", "op_details"], [405, 0, 0, "-", "op_entry"], [406, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[399, 2, 1, "", "Diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis": [[399, 4, 1, "", "calculate_mse"], [399, 4, 1, "", "get_histogram_data"], [399, 4, 1, "", "get_op_details"], [399, 4, 1, "", "get_op_list"], [399, 4, 1, "", "get_tensors_info"], [399, 4, 1, "", "load_quantization_config"], [399, 4, 1, "", "mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.factory": [[400, 2, 1, "", "DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory": [[400, 4, 1, "", "get_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[403, 0, 0, "-", "onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[403, 2, 1, "", "OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis": [[403, 3, 1, "", "model"]], "neural_compressor.ux.components.diagnosis.op_details": [[404, 2, 1, "", "OpActivation"], [404, 2, 1, "", "OpDetails"], [404, 2, 1, "", "OpPattern"], [404, 2, 1, "", "OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details.OpDetails": [[404, 4, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.op_entry": [[405, 2, 1, "", "OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry.OpEntry": [[405, 4, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[407, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[407, 2, 1, "", "TensorflowDiagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis": [[407, 3, 1, "", "model"]], "neural_compressor.ux.components.file_browser": [[408, 0, 0, "-", "file_browser"]], "neural_compressor.ux.components.file_browser.file_browser": [[408, 1, 1, "", "create_dir_entry"], [408, 1, 1, "", "create_entry"], [408, 1, 1, "", "create_file_entry"], [408, 1, 1, "", "filter_requested_entries"], [408, 1, 1, "", "get_directory_entries"], [408, 1, 1, "", "get_filter_value"], [408, 1, 1, "", "get_non_hidden_directory_entries"], [408, 1, 1, "", "get_requested_path"], [408, 1, 1, "", "get_setting_value"], [408, 1, 1, "", "is_dataset_or_directory_entry"], [408, 1, 1, "", "is_directory_entry"], [408, 1, 1, "", "is_model_or_directory_entry"], [408, 1, 1, "", "should_show_files"], [408, 1, 1, "", "should_show_only_model_files"], [408, 1, 1, "", "sort_entries"]], "neural_compressor.ux.components.graph": [[410, 0, 0, "-", "attribute"], [411, 0, 0, "-", "collapser"], [412, 0, 0, "-", "edge"], [413, 0, 0, "-", "graph"], [414, 0, 0, "-", "graph_reader"], [416, 0, 0, "-", "node"], [417, 0, 0, "-", "reader"]], "neural_compressor.ux.components.graph.attribute": [[410, 2, 1, "", "Attribute"]], "neural_compressor.ux.components.graph.collapser": [[411, 2, 1, "", "Collapser"]], "neural_compressor.ux.components.graph.collapser.Collapser": [[411, 4, 1, "", "collapse"]], "neural_compressor.ux.components.graph.edge": [[412, 2, 1, "", "Edge"]], "neural_compressor.ux.components.graph.edge.Edge": [[412, 3, 1, "", "source"], [412, 3, 1, "", "target"]], "neural_compressor.ux.components.graph.graph": [[413, 2, 1, "", "Graph"]], "neural_compressor.ux.components.graph.graph.Graph": [[413, 4, 1, "", "add_edge"], [413, 4, 1, "", "add_node"], [413, 3, 1, "", "edges"], [413, 4, 1, "", "get_node"], [413, 4, 1, "", "get_target_nodes"], [413, 4, 1, "", "highlight_pattern"], [413, 3, 1, "", "nodes"]], "neural_compressor.ux.components.graph.graph_reader": [[414, 2, 1, "", "GraphReader"]], "neural_compressor.ux.components.graph.graph_reader.GraphReader": [[414, 4, 1, "", "find_pattern_in_graph"], [414, 4, 1, "", "read"]], "neural_compressor.ux.components.graph.node": [[416, 2, 1, "", "GroupNode"], [416, 2, 1, "", "Node"]], "neural_compressor.ux.components.graph.reader": [[418, 0, 0, "-", "onnxrt_reader"], [419, 0, 0, "-", "tensorflow_reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[418, 2, 1, "", "OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader": [[418, 4, 1, "", "read"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[419, 2, 1, "", "TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader": [[419, 4, 1, "", "read"]], "neural_compressor.ux.components.jobs_management": [[422, 0, 0, "-", "jobs_control_queue"], [423, 0, 0, "-", "jobs_manager"], [424, 0, 0, "-", "request"]], "neural_compressor.ux.components.manage_workspace": [[425, 1, 1, "", "get_default_path"]], "neural_compressor.ux.components.model": [[426, 0, 0, "-", "domain"], [428, 0, 0, "-", "model"], [429, 0, 0, "-", "model_type_getter"], [430, 0, 0, "-", "onnxrt"], [432, 0, 0, "-", "pytorch"], [434, 0, 0, "-", "repository"], [435, 0, 0, "-", "shape"], [437, 0, 0, "-", "tensorflow"]], "neural_compressor.ux.components.model.domain": [[426, 2, 1, "", "Domain"]], "neural_compressor.ux.components.model.model": [[428, 2, 1, "", "Model"]], "neural_compressor.ux.components.model.model.Model": [[428, 3, 1, "", "domain"], [428, 4, 1, "", "ensure_supported_path"], [428, 4, 1, "", "get_framework_name"], [428, 4, 1, "", "get_input_nodes"], [428, 4, 1, "", "get_model_graph"], [428, 4, 1, "", "get_output_nodes"], [428, 4, 1, "", "get_tensors_info"], [428, 4, 1, "", "guard_requirements_installed"], [428, 3, 1, "", "input_shape"], [428, 3, 1, "", "shape_elements_order"], [428, 3, 1, "", "supports_graph"], [428, 4, 1, "", "supports_path"], [428, 3, 1, "", "supports_profiling"], [428, 3, 1, "", "supports_pruning"]], "neural_compressor.ux.components.model.model_type_getter": [[429, 1, 1, "", "get_model_type"]], "neural_compressor.ux.components.model.onnxrt": [[431, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.onnxrt.model": [[431, 2, 1, "", "OnnxrtModel"], [431, 1, 1, "", "remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel": [[431, 3, 1, "", "domain"], [431, 3, 1, "", "filtered_input_nodes"], [431, 4, 1, "", "get_framework_name"], [431, 4, 1, "", "get_model_graph"], [431, 4, 1, "", "guard_requirements_installed"], [431, 3, 1, "", "input_shape"], [431, 3, 1, "", "nc_model_instance"], [431, 3, 1, "", "shape_elements_order"], [431, 4, 1, "", "supports_path"]], "neural_compressor.ux.components.model.pytorch": [[433, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.pytorch.model": [[433, 2, 1, "", "PyTorchScriptModel"]], "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel": [[433, 4, 1, "", "get_framework_name"], [433, 4, 1, "", "guard_requirements_installed"], [433, 4, 1, "", "supports_path"]], "neural_compressor.ux.components.model.repository": [[434, 2, 1, "", "ModelRepository"]], "neural_compressor.ux.components.model.repository.ModelRepository": [[434, 4, 1, "", "get_framework_from_path"], [434, 4, 1, "", "get_frameworks"], [434, 4, 1, "", "get_model"], [434, 4, 1, "", "get_supported_frameworks"], [434, 4, 1, "", "is_model_path"]], "neural_compressor.ux.components.model.shape": [[435, 2, 1, "", "Shape"]], "neural_compressor.ux.components.model.shape.Shape": [[435, 4, 1, "", "serialize"]], "neural_compressor.ux.components.model.tensorflow": [[436, 0, 0, "-", "frozen_pb"], [438, 0, 0, "-", "keras"], [439, 0, 0, "-", "meta_graph"], [440, 0, 0, "-", "model"], [441, 0, 0, "-", "saved_model"], [442, 0, 0, "-", "utils"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[436, 2, 1, "", "FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel": [[436, 4, 1, "", "supports_path"], [436, 3, 1, "", "supports_profiling"]], "neural_compressor.ux.components.model.tensorflow.keras": [[438, 2, 1, "", "KerasModel"]], "neural_compressor.ux.components.model.tensorflow.keras.KerasModel": [[438, 4, 1, "", "get_input_nodes"], [438, 4, 1, "", "get_output_nodes"], [438, 4, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[439, 2, 1, "", "MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel": [[439, 4, 1, "", "get_input_nodes"], [439, 4, 1, "", "get_model_graph"], [439, 4, 1, "", "get_output_nodes"], [439, 4, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.model": [[440, 2, 1, "", "TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel": [[440, 4, 1, "", "get_framework_name"], [440, 4, 1, "", "get_input_nodes"], [440, 4, 1, "", "get_model_graph"], [440, 4, 1, "", "get_output_nodes"], [440, 4, 1, "", "guard_requirements_installed"], [440, 3, 1, "", "input_shape"], [440, 3, 1, "", "nc_model_instance"], [440, 3, 1, "", "shape_elements_order"], [440, 3, 1, "", "supports_pruning"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[441, 2, 1, "", "SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel": [[441, 4, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.utils": [[442, 1, 1, "", "get_input_shape"]], "neural_compressor.ux.components.model_zoo": [[443, 0, 0, "-", "download_config"], [444, 0, 0, "-", "download_model"], [445, 0, 0, "-", "downloader"], [447, 0, 0, "-", "list_models"]], "neural_compressor.ux.components.model_zoo.download_config": [[443, 1, 1, "", "download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[444, 1, 1, "", "download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[445, 2, 1, "", "Downloader"]], "neural_compressor.ux.components.model_zoo.downloader.Downloader": [[445, 4, 1, "", "download"], [445, 4, 1, "", "download_config"], [445, 4, 1, "", "download_file"], [445, 4, 1, "", "download_model"], [445, 4, 1, "", "download_yaml_config"], [445, 4, 1, "", "get_yaml_url"], [445, 4, 1, "", "unpack_archive"]], "neural_compressor.ux.components.model_zoo.list_models": [[447, 1, 1, "", "check_version"], [447, 1, 1, "", "get_available_models"], [447, 1, 1, "", "get_framework_module_name"], [447, 1, 1, "", "get_installed_frameworks"], [447, 1, 1, "", "list_models"], [447, 1, 1, "", "validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[449, 0, 0, "-", "names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[449, 2, 1, "", "MappingDirection"], [449, 2, 1, "", "NamesMapper"]], "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper": [[449, 3, 1, "", "domain_flavour_mappings"], [449, 3, 1, "", "domain_mappings"], [449, 3, 1, "", "framework_mappings"], [449, 4, 1, "", "map_name"], [449, 3, 1, "", "precision_mappings"]], "neural_compressor.ux.components.optimization": [[455, 2, 1, "", "Optimizations"], [450, 0, 0, "-", "execute_optimization"], [451, 0, 0, "-", "factory"], [453, 0, 0, "-", "graph_optimizer"], [456, 0, 0, "-", "mixed_precision"], [459, 0, 0, "-", "neural_coder_optimization"], [461, 0, 0, "-", "optimization"], [462, 0, 0, "-", "pruning"], [465, 0, 0, "-", "tune"], [468, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.optimization.execute_optimization": [[450, 1, 1, "", "check_if_collect_tuning_history"], [450, 1, 1, "", "execute_optimization"], [450, 1, 1, "", "execute_optimization_pytorch_script"], [450, 1, 1, "", "execute_optimization_regular"], [450, 1, 1, "", "parse_logs"], [450, 1, 1, "", "parse_model_data_to_bench_names"]], "neural_compressor.ux.components.optimization.factory": [[451, 2, 1, "", "OptimizationFactory"]], "neural_compressor.ux.components.optimization.factory.OptimizationFactory": [[451, 4, 1, "", "get_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[452, 0, 0, "-", "graph_optimization"], [454, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[452, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization": [[452, 3, 1, "", "configuration_data"], [452, 4, 1, "", "execute"], [452, 4, 1, "", "generate_config"], [452, 3, 1, "", "optimization_script"], [452, 3, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[454, 1, 1, "", "optimize_graph"], [454, 1, 1, "", "optimize_graph_config"], [454, 1, 1, "", "parse_args"], [454, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.mixed_precision": [[457, 0, 0, "-", "mixed_precision"], [458, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[457, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision": [[457, 3, 1, "", "configuration_data"], [457, 4, 1, "", "execute"], [457, 4, 1, "", "generate_config"], [457, 3, 1, "", "optimization_script"], [457, 3, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[458, 1, 1, "", "optimize_graph"], [458, 1, 1, "", "optimize_graph_config"], [458, 1, 1, "", "parse_args"], [458, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[460, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[460, 1, 1, "", "optimize_pt_script"]], "neural_compressor.ux.components.optimization.optimization": [[461, 2, 1, "", "DataloaderInterface"], [461, 2, 1, "", "Optimization"], [461, 2, 1, "", "OptimizationInterface"]], "neural_compressor.ux.components.optimization.optimization.Optimization": [[461, 3, 1, "", "command"], [461, 3, 1, "", "config_filename"], [461, 3, 1, "", "configuration_data"], [461, 4, 1, "", "execute"], [461, 4, 1, "", "generate_config"], [461, 3, 1, "", "optimization_script"], [461, 3, 1, "", "output_model_dir"], [461, 3, 1, "", "output_model_name"], [461, 3, 1, "", "parameters"], [461, 3, 1, "", "workdir"]], "neural_compressor.ux.components.optimization.pruning": [[463, 0, 0, "-", "optimize_model"], [464, 0, 0, "-", "pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[463, 1, 1, "", "optimize_model"], [463, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[464, 2, 1, "", "Pruning"]], "neural_compressor.ux.components.optimization.pruning.pruning.Pruning": [[464, 3, 1, "", "configuration_data"], [464, 4, 1, "", "execute"], [464, 4, 1, "", "generate_config"], [464, 3, 1, "", "optimization_script"], [464, 3, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tune": [[466, 0, 0, "-", "tune_model"], [467, 0, 0, "-", "tuning"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[466, 1, 1, "", "parse_args"], [466, 1, 1, "", "set_eager_execution"], [466, 1, 1, "", "tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[467, 2, 1, "", "AccuracyCriterion"], [467, 2, 1, "", "Tuning"], [467, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.optimization.tune.tuning.Tuning": [[467, 3, 1, "", "configuration_data"], [467, 4, 1, "", "execute"], [467, 4, 1, "", "generate_config"], [467, 3, 1, "", "optimization_script"], [467, 3, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tuning_history": [[468, 2, 1, "", "TuningHistory"], [468, 2, 1, "", "Watcher"], [468, 1, 1, "", "tuning_history"], [468, 1, 1, "", "tuning_history_path"]], "neural_compressor.ux.components.optimization.tuning_history.TuningHistory": [[468, 4, 1, "", "send_history_snapshot"]], "neural_compressor.ux.components.optimization.tuning_history.Watcher": [[468, 4, 1, "", "history_file_modification_time"], [468, 4, 1, "", "stop"], [468, 4, 1, "", "was_history_file_changed"]], "neural_compressor.ux.components.profiling": [[469, 0, 0, "-", "execute_profiling"], [470, 0, 0, "-", "factory"], [472, 0, 0, "-", "profile_model"], [473, 0, 0, "-", "profiler"], [474, 0, 0, "-", "profiling"], [476, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.ux.components.profiling.execute_profiling": [[469, 1, 1, "", "execute_profiling"], [469, 1, 1, "", "execute_real_profiling"]], "neural_compressor.ux.components.profiling.factory": [[470, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.factory.ProfilerFactory": [[470, 4, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.profile_model": [[472, 1, 1, "", "load_profiling_details"], [472, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.profiling.profiler": [[473, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.profiler.Profiler": [[473, 4, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.profiling": [[474, 2, 1, "", "DataloaderInterface"], [474, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.profiling.profiling.Profiling": [[474, 3, 1, "", "config_filename"], [474, 3, 1, "", "config_path"], [474, 4, 1, "", "execute"], [474, 4, 1, "", "generate_config"], [474, 3, 1, "", "profiling_data"], [474, 3, 1, "", "workdir"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[475, 0, 0, "-", "factory"], [477, 0, 0, "-", "profiler"], [478, 0, 0, "-", "utils"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[475, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory": [[475, 4, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[477, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler": [[477, 4, 1, "", "build_dataloader"], [477, 4, 1, "", "convert_nodes_to_list"], [477, 4, 1, "", "create_tf_config"], [477, 4, 1, "", "get_node_by_name"], [477, 4, 1, "", "initialize_graph"], [477, 4, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[478, 1, 1, "", "delete_assign"]], "neural_compressor.ux.inc_bench": [[479, 1, 1, "", "main"], [479, 1, 1, "", "prepare_environment"]], "neural_compressor.ux.utils": [[481, 0, 0, "-", "consts"], [482, 0, 0, "-", "environment"], [483, 0, 0, "-", "exceptions"], [484, 0, 0, "-", "executor"], [485, 0, 0, "-", "expiring_dict"], [486, 0, 0, "-", "github_info"], [487, 0, 0, "-", "hw_info"], [489, 0, 0, "-", "json_serializer"], [490, 0, 0, "-", "logger"], [491, 0, 0, "-", "parser"], [492, 0, 0, "-", "proc"], [493, 0, 0, "-", "processes"], [494, 0, 0, "-", "singleton"], [495, 0, 0, "-", "status_updates"], [496, 0, 0, "-", "templates"], [499, 0, 0, "-", "utils"], [504, 0, 0, "-", "workload"], [510, 0, 0, "-", "yaml_utils"]], "neural_compressor.ux.utils.consts": [[481, 2, 1, "", "DomainFlavours"], [481, 2, 1, "", "Domains"], [481, 2, 1, "", "ExecutionStatus"], [481, 2, 1, "", "Frameworks"], [481, 2, 1, "", "OptimizationTypes"], [481, 2, 1, "", "Precisions"], [481, 2, 1, "", "Strategies"]], "neural_compressor.ux.utils.environment": [[482, 2, 1, "", "Environment"]], "neural_compressor.ux.utils.environment.Environment": [[482, 4, 1, "", "clean_workloads_wip_status"], [482, 4, 1, "", "ensure_workdir_exists_and_writeable"], [482, 4, 1, "", "migrate_database"]], "neural_compressor.ux.utils.exceptions": [[483, 7, 1, "", "AccessDeniedException"], [483, 7, 1, "", "ClientErrorException"], [483, 7, 1, "", "InternalException"], [483, 7, 1, "", "NotFoundException"]], "neural_compressor.ux.utils.executor": [[484, 2, 1, "", "Executor"]], "neural_compressor.ux.utils.executor.Executor": [[484, 3, 1, "", "additional_log_names"], [484, 4, 1, "", "call"], [484, 4, 1, "", "call_one"], [484, 4, 1, "", "is_multi_commands"], [484, 3, 1, "", "log_name"], [484, 3, 1, "", "process_duration"], [484, 4, 1, "", "refresh_workdir"], [484, 3, 1, "", "request_id"], [484, 3, 1, "", "workdir"]], "neural_compressor.ux.utils.expiring_dict": [[485, 2, 1, "", "ExpiringDict"], [485, 2, 1, "", "ExpiringDictItem"]], "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem": [[485, 4, 1, "", "is_expired"]], "neural_compressor.ux.utils.github_info": [[486, 2, 1, "", "GithubInfo"]], "neural_compressor.ux.utils.github_info.GithubInfo": [[486, 4, 1, "", "tag"]], "neural_compressor.ux.utils.hw_info": [[487, 2, 1, "", "HWInfo"], [487, 1, 1, "", "get_bios_version"], [487, 1, 1, "", "get_distribution"], [487, 1, 1, "", "get_framework_dependency_info"], [487, 1, 1, "", "get_framework_info"], [487, 1, 1, "", "get_kernel_version"], [487, 1, 1, "", "get_number_of_sockets"], [487, 1, 1, "", "is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info.HWInfo": [[487, 4, 1, "", "initialize"], [487, 4, 1, "", "serialize"]], "neural_compressor.ux.utils.json_serializer": [[489, 2, 1, "", "JsonSerializer"]], "neural_compressor.ux.utils.json_serializer.JsonSerializer": [[489, 4, 1, "", "serialize"], [489, 4, 1, "", "serialize_item"]], "neural_compressor.ux.utils.logger": [[490, 1, 1, "", "change_log_level"]], "neural_compressor.ux.utils.parser": [[491, 2, 1, "", "AccuracyParser"], [491, 2, 1, "", "BenchmarkParserFactory"], [491, 2, 1, "", "OptimizationParser"], [491, 2, 1, "", "Parser"], [491, 2, 1, "", "PerformanceParser"], [491, 2, 1, "", "ProfilingParser"]], "neural_compressor.ux.utils.parser.AccuracyParser": [[491, 3, 1, "", "patterns"], [491, 4, 1, "", "process"]], "neural_compressor.ux.utils.parser.BenchmarkParserFactory": [[491, 4, 1, "", "get_parser"]], "neural_compressor.ux.utils.parser.OptimizationParser": [[491, 3, 1, "", "patterns"], [491, 4, 1, "", "process"]], "neural_compressor.ux.utils.parser.Parser": [[491, 3, 1, "", "patterns"], [491, 4, 1, "", "process"]], "neural_compressor.ux.utils.parser.PerformanceParser": [[491, 3, 1, "", "patterns"], [491, 4, 1, "", "process"], [491, 4, 1, "", "summarize_partial"], [491, 4, 1, "", "summarize_value"], [491, 4, 1, "", "update_partial"]], "neural_compressor.ux.utils.parser.ProfilingParser": [[491, 3, 1, "", "patterns"], [491, 4, 1, "", "process"], [491, 4, 1, "", "unify_time"]], "neural_compressor.ux.utils.proc": [[492, 2, 1, "", "Proc"]], "neural_compressor.ux.utils.proc.Proc": [[492, 3, 1, "", "info"], [492, 3, 1, "", "info_path"], [492, 3, 1, "", "is_ok"], [492, 3, 1, "", "output"], [492, 3, 1, "", "output_path"], [492, 4, 1, "", "remove_logs"], [492, 4, 1, "", "run"], [492, 3, 1, "", "tail"]], "neural_compressor.ux.utils.processes": [[493, 2, 1, "", "NCProcesses"]], "neural_compressor.ux.utils.processes.NCProcesses": [[493, 3, 1, "", "is_ok"], [493, 4, 1, "", "remove_successful_logs"], [493, 4, 1, "", "return_code_all"]], "neural_compressor.ux.utils.singleton": [[494, 2, 1, "", "Singleton"]], "neural_compressor.ux.utils.status_updates": [[495, 1, 1, "", "get_status_update_function"]], "neural_compressor.ux.utils.templates": [[497, 0, 0, "-", "metric"], [498, 0, 0, "-", "workdir"]], "neural_compressor.ux.utils.templates.metric": [[497, 2, 1, "", "Metric"]], "neural_compressor.ux.utils.templates.metric.Metric": [[497, 3, 1, "", "acc_input_model"], [497, 3, 1, "", "acc_optimized_model"], [497, 3, 1, "", "accuracy"], [497, 4, 1, "", "calculate_throughput"], [497, 4, 1, "", "insert_data"], [497, 3, 1, "", "latency"], [497, 3, 1, "", "optimization_time"], [497, 3, 1, "", "path_optimized_model"], [497, 3, 1, "", "profiling_data"], [497, 3, 1, "", "size_input_model"], [497, 3, 1, "", "size_optimized_model"], [497, 3, 1, "", "throughput"]], "neural_compressor.ux.utils.templates.workdir": [[498, 2, 1, "", "Workdir"]], "neural_compressor.ux.utils.templates.workdir.Workdir": [[498, 4, 1, "", "clean_logs"], [498, 4, 1, "", "clean_status"], [498, 4, 1, "", "ensure_working_path_exists"]], "neural_compressor.ux.utils.utils": [[499, 1, 1, "", "check_module"], [499, 1, 1, "", "deprecated"], [499, 1, 1, "", "determine_ip"], [499, 1, 1, "", "export_to_csv"], [499, 1, 1, "", "filter_transforms"], [499, 1, 1, "", "get_dataset_path"], [499, 1, 1, "", "get_default_pruning_config_path"], [499, 1, 1, "", "get_file_extension"], [499, 1, 1, "", "get_framework_from_path"], [499, 1, 1, "", "get_height_width_from_size"], [499, 1, 1, "", "get_metrics_dict"], [499, 1, 1, "", "get_model_zoo_config_path"], [499, 1, 1, "", "get_model_zoo_model_path"], [499, 1, 1, "", "get_module_version"], [499, 1, 1, "", "get_predefined_config_path"], [499, 1, 1, "", "get_shape_from_transforms"], [499, 1, 1, "", "get_size"], [499, 1, 1, "", "is_dataset_file"], [499, 1, 1, "", "is_development_env"], [499, 1, 1, "", "is_hidden"], [499, 1, 1, "", "load_dataloader_config"], [499, 1, 1, "", "load_help_nc_params"], [499, 1, 1, "", "load_metrics_config"], [499, 1, 1, "", "load_model_config"], [499, 1, 1, "", "load_model_wise_params"], [499, 1, 1, "", "load_precisions_config"], [499, 1, 1, "", "load_pruning_details_config"], [499, 1, 1, "", "load_transforms_config"], [499, 1, 1, "", "load_transforms_filter_config"], [499, 1, 1, "", "normalize_domain"], [499, 1, 1, "", "normalize_framework"], [499, 1, 1, "", "normalize_string"], [499, 1, 1, "", "parse_bool_value"], [499, 1, 1, "", "parse_to_float_list"], [499, 1, 1, "", "parse_to_string_list"], [499, 1, 1, "", "parse_version"], [499, 1, 1, "", "release_tag"], [499, 1, 1, "", "replace_with_values"], [499, 1, 1, "", "verify_file_path"]], "neural_compressor.ux.utils.workload": [[500, 0, 0, "-", "config"], [501, 0, 0, "-", "dataloader"], [502, 0, 0, "-", "evaluation"], [503, 0, 0, "-", "graph_optimization"], [505, 0, 0, "-", "mixed_precision"], [506, 0, 0, "-", "model"], [507, 0, 0, "-", "pruning"], [508, 0, 0, "-", "quantization"], [509, 0, 0, "-", "tuning"]], "neural_compressor.ux.utils.workload.config": [[500, 2, 1, "", "Config"]], "neural_compressor.ux.utils.workload.config.Config": [[500, 4, 1, "", "dump"], [500, 4, 1, "", "get_performance_configs"], [500, 4, 1, "", "get_performance_cores_per_instance"], [500, 4, 1, "", "get_performance_num_of_instance"], [500, 4, 1, "", "initialize"], [500, 4, 1, "", "load"], [500, 4, 1, "", "process_transform"], [500, 4, 1, "", "remove_accuracy_metric"], [500, 4, 1, "", "remove_dataloader"], [500, 4, 1, "", "set_accuracy_and_performance_batch_sizes"], [500, 4, 1, "", "set_accuracy_goal"], [500, 4, 1, "", "set_accuracy_metric"], [500, 4, 1, "", "set_evaluation_dataloader"], [500, 4, 1, "", "set_evaluation_dataset_path"], [500, 4, 1, "", "set_inputs"], [500, 4, 1, "", "set_optimization_precision"], [500, 4, 1, "", "set_outputs"], [500, 4, 1, "", "set_performance_cores_per_instance"], [500, 4, 1, "", "set_performance_iterations"], [500, 4, 1, "", "set_performance_num_of_instance"], [500, 4, 1, "", "set_performance_warmup"], [500, 4, 1, "", "set_quantization_approach"], [500, 4, 1, "", "set_quantization_batch_size"], [500, 4, 1, "", "set_quantization_dataloader"], [500, 4, 1, "", "set_quantization_dataset_path"], [500, 4, 1, "", "set_quantization_sampling_size"], [500, 4, 1, "", "set_transform"], [500, 4, 1, "", "set_workspace"]], "neural_compressor.ux.utils.workload.dataloader": [[501, 2, 1, "", "Dataloader"], [501, 2, 1, "", "Dataset"], [501, 2, 1, "", "Filter"], [501, 2, 1, "", "LabelBalance"], [501, 2, 1, "", "Transform"]], "neural_compressor.ux.utils.workload.dataloader.Dataloader": [[501, 4, 1, "", "serialize"], [501, 4, 1, "", "set_dataset"], [501, 4, 1, "", "set_transforms_from_list"]], "neural_compressor.ux.utils.workload.dataloader.Dataset": [[501, 4, 1, "", "is_dummy"], [501, 4, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.dataloader.Transform": [[501, 4, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation": [[502, 2, 1, "", "Accuracy"], [502, 2, 1, "", "Configs"], [502, 2, 1, "", "Evaluation"], [502, 2, 1, "", "Metric"], [502, 2, 1, "", "Performance"], [502, 2, 1, "", "Postprocess"], [502, 2, 1, "", "PostprocessSchema"]], "neural_compressor.ux.utils.workload.evaluation.Evaluation": [[502, 4, 1, "", "set_accuracy_postprocess_transforms"]], "neural_compressor.ux.utils.workload.evaluation.Metric": [[502, 3, 1, "", "name"], [502, 3, 1, "", "param"], [502, 4, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema": [[502, 4, 1, "", "get_label_shift_value"]], "neural_compressor.ux.utils.workload.graph_optimization": [[503, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization": [[503, 4, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.mixed_precision": [[505, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision": [[505, 4, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.model": [[506, 2, 1, "", "Model"]], "neural_compressor.ux.utils.workload.model.Model": [[506, 3, 1, "", "inputs"], [506, 3, 1, "", "outputs"], [506, 4, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.pruning": [[507, 2, 1, "", "AdamOptimizer"], [507, 2, 1, "", "AdamWOptimizer"], [507, 2, 1, "", "Approach"], [507, 2, 1, "", "Criterion"], [507, 2, 1, "", "CrossEntropyLossCriterion"], [507, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [507, 2, 1, "", "KnowledgeDistillationLossCriterion"], [507, 2, 1, "", "Optimizer"], [507, 2, 1, "", "Pruning"], [507, 2, 1, "", "SGDOptimizer"], [507, 2, 1, "", "SelfKnowledgeDistillationLoss"], [507, 2, 1, "", "SparseCategoricalCrossentropyCriterion"], [507, 2, 1, "", "Train"], [507, 2, 1, "", "WeightCompressionApproach"], [507, 1, 1, "", "parse_dict_value_to_float"], [507, 1, 1, "", "parse_dict_value_to_int"]], "neural_compressor.ux.utils.workload.pruning.Train": [[507, 4, 1, "", "serialize"], [507, 4, 1, "", "set_postprocess_transforms"]], "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach": [[507, 4, 1, "", "initialize_pruners"], [507, 4, 1, "", "serialize"], [507, 4, 1, "", "serialize_pruner"]], "neural_compressor.ux.utils.workload.quantization": [[508, 2, 1, "", "Advance"], [508, 2, 1, "", "Calibration"], [508, 2, 1, "", "Quantization"], [508, 2, 1, "", "WiseConfig"], [508, 2, 1, "", "WiseConfigDetails"]], "neural_compressor.ux.utils.workload.tuning": [[509, 2, 1, "", "AccCriterion"], [509, 2, 1, "", "Diagnosis"], [509, 2, 1, "", "ExitPolicy"], [509, 2, 1, "", "MultiObjectives"], [509, 2, 1, "", "Strategy"], [509, 2, 1, "", "Tuning"], [509, 2, 1, "", "Workspace"]], "neural_compressor.ux.utils.workload.tuning.MultiObjectives": [[509, 3, 1, "", "objective"], [509, 3, 1, "", "weight"]], "neural_compressor.ux.utils.workload.tuning.Tuning": [[509, 4, 1, "", "set_max_trials"], [509, 4, 1, "", "set_performance_only"], [509, 4, 1, "", "set_random_seed"], [509, 4, 1, "", "set_timeout"], [509, 4, 1, "", "set_workspace"]], "neural_compressor.ux.utils.yaml_utils": [[510, 1, 1, "", "float_representer"], [510, 1, 1, "", "pruner_representer"]], "neural_compressor.ux.web": [[511, 0, 0, "-", "communication"], [512, 0, 0, "-", "configuration"], [513, 0, 0, "-", "exceptions"], [515, 0, 0, "-", "router"], [516, 0, 0, "-", "server"], [519, 0, 0, "-", "service"]], "neural_compressor.ux.web.communication": [[511, 2, 1, "", "Message"], [511, 2, 1, "", "MessageQueue"], [511, 2, 1, "", "Request"], [511, 2, 1, "", "Response"], [511, 1, 1, "", "create_simple_response"]], "neural_compressor.ux.web.communication.Message": [[511, 3, 1, "", "data"], [511, 3, 1, "", "status"], [511, 3, 1, "", "subject"]], "neural_compressor.ux.web.communication.MessageQueue": [[511, 4, 1, "", "get"], [511, 4, 1, "", "post_error"], [511, 4, 1, "", "post_failure"], [511, 4, 1, "", "post_success"]], "neural_compressor.ux.web.configuration": [[512, 2, 1, "", "Configuration"]], "neural_compressor.ux.web.configuration.Configuration": [[512, 4, 1, "", "determine_gui_port"], [512, 4, 1, "", "determine_log_level"], [512, 4, 1, "", "determine_server_port"], [512, 4, 1, "", "determine_url_prefix"], [512, 4, 1, "", "determine_values_from_environment"], [512, 4, 1, "", "dump_token_to_file"], [512, 4, 1, "", "get_command_line_args"], [512, 4, 1, "", "get_url"], [512, 3, 1, "", "global_config_directory"], [512, 4, 1, "", "is_port_taken"], [512, 4, 1, "", "set_up"]], "neural_compressor.ux.web.exceptions": [[513, 2, 1, "", "ServiceNotFoundException"]], "neural_compressor.ux.web.router": [[515, 2, 1, "", "DeferredRoutingDefinition"], [515, 2, 1, "", "DeferredSubprocessRoutingDefinition"], [515, 2, 1, "", "RealtimeRoutingDefinition"], [515, 2, 1, "", "Router"], [515, 2, 1, "", "RoutingDefinition"], [515, 1, 1, "", "find_pattern_in_graph"], [515, 1, 1, "", "get_model_graph"], [515, 1, 1, "", "get_system_info"]], "neural_compressor.ux.web.router.Router": [[515, 4, 1, "", "handle"]], "neural_compressor.ux.web.server": [[516, 1, 1, "", "allow_api_call"], [516, 1, 1, "", "block_iframe"], [516, 1, 1, "", "block_sniffing"], [516, 1, 1, "", "build_parameters"], [516, 1, 1, "", "disable_cache"], [516, 1, 1, "", "get_tls_args"], [516, 1, 1, "", "handle_api_call"], [516, 1, 1, "", "page_not_found"], [516, 1, 1, "", "require_api_token"], [516, 1, 1, "", "root"], [516, 1, 1, "", "run_server"], [516, 1, 1, "", "web_socket_publisher"]], "neural_compressor.ux.web.service": [[517, 0, 0, "-", "benchmark"], [518, 0, 0, "-", "history_snapshot_parser"], [520, 0, 0, "-", "model"], [521, 0, 0, "-", "optimization"], [522, 0, 0, "-", "profiling"], [523, 0, 0, "-", "request_data_processor"], [524, 0, 0, "-", "response_generator"], [525, 0, 0, "-", "workload"]], "neural_compressor.ux.web.service.benchmark": [[517, 2, 1, "", "BenchmarkService"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[518, 2, 1, "", "HistorySnapshotParser"]], "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser": [[518, 4, 1, "", "extract_accuracy"], [518, 4, 1, "", "extract_performance"], [518, 4, 1, "", "parse_history_item"], [518, 4, 1, "", "parse_history_snapshot"]], "neural_compressor.ux.web.service.model": [[520, 2, 1, "", "ModelService"]], "neural_compressor.ux.web.service.model.ModelService": [[520, 4, 1, "", "get_model"]], "neural_compressor.ux.web.service.optimization": [[521, 2, 1, "", "OptimizationService"]], "neural_compressor.ux.web.service.profiling": [[522, 2, 1, "", "ProfilingService"]], "neural_compressor.ux.web.service.profiling.ProfilingService": [[522, 4, 1, "", "generate_csv"]], "neural_compressor.ux.web.service.request_data_processor": [[523, 2, 1, "", "RequestDataProcessor"]], "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor": [[523, 4, 1, "", "get_string_value"]], "neural_compressor.ux.web.service.response_generator": [[524, 2, 1, "", "ResponseGenerator"]], "neural_compressor.ux.web.service.response_generator.ResponseGenerator": [[524, 4, 1, "", "add_refresh"], [524, 4, 1, "", "from_exception"], [524, 4, 1, "", "get_status_code_for_exception"], [524, 4, 1, "", "serve_from_filesystem"]], "neural_compressor.ux.web.service.workload": [[525, 2, 1, "", "WorkloadService"]], "neural_compressor.ux.web.service.workload.WorkloadService": [[525, 4, 1, "", "get_code_template"], [525, 4, 1, "", "get_config"], [525, 4, 1, "", "get_output"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:property", "4": "py:method", "5": "py:attribute", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "property", "Python property"], "4": ["py", "method", "Python method"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"644ec953a7dc_pruning_support": 0, "6ece06672ed3_v1_14": 1, "modul": [1, 5, 6, 8, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 160, 162, 163, 164, 165, 166, 167, 168, 171, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 198, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 236, 238, 239, 240, 242, 243, 244, 245, 246, 248, 249, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 267, 268, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 296, 297, 299, 300, 301, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 330, 331, 332, 333, 334, 335, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 397, 398, 399, 400, 403, 404, 405, 407, 408, 410, 411, 412, 413, 414, 416, 418, 419, 425, 426, 428, 429, 431, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 454, 457, 458, 460, 461, 463, 464, 466, 467, 468, 469, 470, 472, 473, 474, 475, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 554], "content": [1, 5, 6, 7, 8, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 168, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 403, 404, 405, 407, 408, 410, 411, 412, 413, 414, 416, 418, 419, 425, 426, 428, 429, 431, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 454, 455, 457, 458, 460, 461, 463, 464, 466, 467, 468, 469, 470, 472, 473, 474, 475, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 533, 554, 567, 577], "function": [1, 5, 6, 15, 34, 40, 41, 63, 64, 66, 100, 101, 112, 114, 142, 143, 144, 148, 149, 150, 152, 155, 157, 160, 162, 163, 164, 165, 166, 168, 171, 178, 186, 188, 192, 195, 196, 197, 200, 202, 203, 204, 205, 207, 209, 210, 212, 216, 224, 226, 230, 233, 234, 235, 237, 238, 239, 241, 242, 243, 244, 245, 248, 249, 251, 252, 253, 254, 255, 263, 267, 268, 272, 279, 283, 288, 289, 290, 292, 295, 296, 297, 299, 300, 301, 302, 303, 304, 308, 312, 314, 315, 319, 327, 331, 333, 334, 337, 338, 340, 341, 343, 344, 346, 347, 357, 358, 359, 361, 366, 368, 369, 371, 373, 376, 377, 382, 385, 386, 387, 398, 408, 425, 429, 431, 442, 443, 444, 447, 450, 454, 458, 460, 463, 466, 468, 469, 472, 478, 479, 487, 490, 495, 499, 507, 510, 511, 515, 516, 584], "6f0d0f71d92e_v1_13": 2, "9e89549a08c8_v1_11": 3, "block_mask": 4, "env": 5, "neural_compressor": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526], "adaptor": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 534, 535], "class": [6, 8, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 111, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 144, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 167, 168, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 245, 246, 247, 248, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 267, 269, 270, 271, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 290, 291, 292, 293, 294, 295, 296, 299, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 342, 344, 345, 348, 349, 350, 351, 353, 354, 355, 356, 357, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 403, 404, 405, 407, 410, 411, 412, 413, 414, 416, 418, 419, 426, 428, 431, 433, 434, 435, 436, 438, 439, 440, 441, 445, 449, 451, 452, 455, 457, 461, 464, 467, 468, 470, 473, 474, 475, 477, 481, 482, 484, 485, 486, 487, 489, 491, 492, 493, 494, 497, 498, 500, 501, 502, 503, 505, 506, 507, 508, 509, 511, 512, 513, 515, 517, 518, 520, 521, 522, 523, 524, 525, 534, 554, 567], "subpackag": [7, 18, 83, 107, 108, 110, 159, 172, 197, 235, 247, 264, 265, 270, 281, 295, 323, 396, 401, 415, 420, 427, 455, 471, 480, 488, 514], "submodul": [7, 14, 18, 30, 47, 72, 83, 91, 97, 102, 107, 108, 110, 113, 126, 139, 145, 152, 158, 159, 161, 173, 180, 192, 196, 200, 207, 218, 230, 234, 237, 241, 247, 254, 264, 266, 270, 276, 282, 286, 295, 302, 306, 323, 329, 338, 348, 352, 360, 372, 391, 396, 401, 402, 406, 409, 415, 417, 420, 421, 427, 430, 432, 437, 446, 448, 453, 455, 456, 459, 462, 465, 471, 476, 480, 488, 496, 504, 514, 519], "packag": [7, 30, 152, 159, 180, 192, 196, 197, 200, 207, 218, 230, 234, 235, 237, 241, 247, 254, 270, 276, 281, 282, 295, 302, 306, 323, 329, 338, 348, 391, 396, 455, 567, 607, 609, 611, 612], "kera": [8, 438], "keras_util": [9, 10, 11, 12], "conv2d": 9, "dens": 10, "quantiz": [12, 39, 293, 315, 508, 530, 533, 550, 569, 583, 589, 592, 603, 614, 622, 623, 624, 632], "mxnet": [13, 580, 594, 623, 628, 632], "mxnet_util": [14, 15], "util": [15, 40, 142, 149, 166, 245, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 398, 442, 478, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 537, 542, 576], "onnxrt": [16, 430, 431, 580, 594, 628], "ox_util": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "calibr": 17, "oper": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "activ": 19, "argmax": 20, "attent": 21, "binary_op": 22, "concat": 23, "conv": 24, "direct_q8": 25, "embed_layernorm": 26, "gather": 27, "gavgpool": 28, "gemm": 29, "lstm": 31, "matmul": 32, "maxpool": 33, "op": 34, "pad": 35, "pool": 36, "resiz": 37, "split": 38, "pytorch": [41, 343, 432, 433, 580, 584, 594, 623, 624, 627, 628, 632], "queri": [42, 534], "tensorflow": [43, 436, 437, 438, 439, 440, 441, 442, 580, 584, 594, 623, 624, 627, 628, 632], "tf_util": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142], "graph_convert": 44, "graph_converter_without_calib": 45, "graph_rewrit": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], "bf16": [46, 47, 538], "bf16_convert": [46, 143], "gener": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "convert_add_to_biasadd": 48, "convert_layout": 49, "convert_leakyrelu": 50, "convert_nan_to_random": 51, "convert_placeholder_to_const": 52, "dequantize_cast_optim": 53, "dilated_contract": 54, "dummy_biasadd": 55, "expanddims_optim": 56, "fetch_weight_from_reshap": 57, "fold_batch_norm": 58, "fold_const": 59, "fuse_biasadd_add": 60, "fuse_column_wise_mul": 61, "fuse_conv_with_math": 62, "fuse_decomposed_bn": 63, "fuse_decomposed_in": 64, "fuse_gelu": 65, "fuse_layer_norm": 66, "fuse_pad_with_conv": 67, "fuse_pad_with_fp32_conv": 68, "fuse_reshape_transpos": 69, "graph_cse_optim": 70, "grappler_pass": 71, "insert_print_nod": 73, "move_squeeze_after_relu": 74, "pre_optim": 75, "remove_training_nod": 76, "rename_batch_norm": 77, "split_shared_input": 78, "strip_equivalent_nod": 79, "strip_unused_nod": 80, "switch_optim": 81, "graph_bas": 82, "int8": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 586, 632], "freeze_fake_qu": 84, "freeze_valu": 85, "freeze_value_without_calib": 86, "fuse_conv_redundant_dequant": 87, "fuse_conv_requant": 88, "fuse_matmul_redundant_dequant": 89, "fuse_matmul_requant": 90, "meta_op_optim": 92, "post_hostconst_convert": 93, "post_quantized_op_cs": 94, "rnn_convert": 95, "scale_propag": 96, "onnx": [97, 98, 99, 100, 101, 146, 536, 540, 592, 623, 632], "onnx_graph": 98, "onnx_nod": 99, "onnx_schema": 100, "tf2onnx_util": 101, "qdq": [102, 103, 104, 105, 119, 120, 121, 122, 123, 124, 125, 126, 127, 632], "insert_qdq_pattern": 103, "merge_duplicated_qdq": 104, "share_qdq_y_pattern": 105, "graph_util": 106, "quantize_graph": [108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134], "qat": [109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 632], "fake_quant": 109, "quantize_config": 111, "quantize_help": 112, "quantize_lay": [113, 114, 115, 116, 117], "optimize_lay": 114, "quantize_layer_add": 115, "quantize_layer_bas": 116, "quantize_layer_bn": 117, "quantize_wrapp": 118, "fuse_qdq_bn": 119, "fuse_qdq_concatv2": 120, "fuse_qdq_conv": 121, "fuse_qdq_deconv": 122, "fuse_qdq_in": 123, "fuse_qdq_matmul": 124, "fuse_qdq_pool": 125, "optimize_qdq": 127, "quantize_graph_bas": 128, "quantize_graph_bn": 129, "quantize_graph_concatv2": 130, "quantize_graph_conv": 131, "quantize_graph_for_intel_cpu": 132, "quantize_graph_matmul": 133, "quantize_graph_pool": 134, "quantize_graph_common": 135, "tf2onnx_convert": 136, "transform_graph": [137, 138, 139, 140, 141], "bias_correct": 137, "graph_transform_bas": 138, "insert_log": 140, "rerange_quantized_concat": 141, "torch_util": [143, 144, 145, 146, 147, 148, 149, 212], "hawq_metr": 144, "smooth_quant": [147, 153], "symbolic_trac": 148, "algorithm": [150, 151, 152, 153, 154, 543, 629], "fast_bias_correct": 151, "weight_correct": 154, "benchmark": [155, 204, 345, 346, 347, 348, 364, 517, 546, 553, 577, 578, 622], "compress": [156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166], "callback": 156, "distil": [157, 158, 240, 564, 582, 583, 622, 632], "criterion": [157, 205, 555], "pruner": [160, 161, 162, 163, 164, 165, 166, 279, 290], "criteria": [160, 619, 620, 629], "pattern": [162, 282, 283, 284, 288, 619, 620], "reg": 164, "schedul": [165, 292, 294, 570, 619, 620], "conf": [167, 168, 169, 170], "config": [167, 171, 500, 547, 579, 580, 616], "dotdict": 168, "pythonic_config": 170, "contrib": [172, 173, 174, 175, 571], "strategi": [173, 174, 175, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 574, 575, 626, 629], "sigopt": [174, 626, 629], "tpe": [175, 629], "data": [176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 556, 585], "dataload": [176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 206, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 366, 501, 557, 579, 580], "base_dataload": [176, 214], "default_dataload": [178, 216], "fetcher": [179, 217], "attribut": [180, 188, 197, 226, 235, 247, 281, 306, 338, 410, 528], "mxnet_dataload": [181, 219], "onnxrt_dataload": [182, 220], "pytorch_dataload": [183, 221], "sampler": [184, 222], "tensorflow_dataload": [185, 223], "dataset": [186, 187, 188, 189, 190, 191, 192, 193, 224, 225, 226, 227, 228, 229, 230, 231, 367, 558, 577, 580, 590], "bert_dataset": [186, 224], "coco_dataset": [187, 225], "dummy_dataset": [189, 227], "dummy_dataset_v2": [190, 228], "imagenet_dataset": [191, 229], "style_transfer_dataset": [193, 231], "filter": [194, 195, 196, 232, 233, 234], "coco_filt": [194, 232], "transform": [198, 199, 200, 201, 202, 203, 236, 237, 238, 239, 382, 559, 590, 628], "coco_transform": 198, "imagenet_transform": [199, 236], "postprocess": [201, 211], "token": [202, 238], "experiment": [204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294], "common": [205, 206, 207, 208, 209, 210, 211, 212, 530, 552, 587], "metric": [208, 248, 249, 250, 251, 252, 253, 254, 255, 296, 297, 298, 299, 300, 301, 302, 303, 373, 497, 539, 560, 590, 594], "model": [209, 305, 306, 307, 308, 309, 310, 311, 312, 313, 374, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 506, 520, 561, 572, 577, 586, 589, 592, 596, 603, 632], "optim": [210, 375, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 521, 562, 577, 604, 614, 617], "compon": [213, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 563], "export": [241, 242, 243, 244, 245, 586], "qlinear2qdq": 242, "tf2onnx": 243, "torch2onnx": 244, "graph_optim": [246, 452, 453, 454, 503], "bleu": [248, 296, 554], "bleu_util": [249, 297], "coco_label_map": [250, 298], "coco_tool": [251, 299], "evaluate_squad": [252, 300], "f1": [253, 301], "mixed_precis": [256, 456, 457, 458, 505], "model_convers": 257, "na": [258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 531, 567, 577, 622], "basic_na": 258, "dyna": 259, "dynast": [260, 261, 262, 263, 264, 265, 266, 267, 268, 269], "dynas_manag": 260, "dynas_predictor": 261, "dynas_search": 262, "dynas_util": 263, "supernetwork": [265, 266, 267, 268, 269], "machine_transl": [266, 267, 268, 269], "modules_supernetwork": 267, "transformer_interfac": 268, "transformer_supernetwork": 269, "nas_util": 272, "search_algorithm": 273, "pruner_legaci": [274, 275, 276, 277, 278, 279], "gradient_sensit": 274, "group_lasso": 275, "magnitud": 277, "pattern_lock": 278, "prune": [280, 291, 462, 463, 464, 507, 568, 577, 619, 620, 622, 632], "pruning_recip": [281, 282, 283, 284], "tile_pattern": 284, "pruning_v2": 285, "pytorch_prun": [286, 287, 288, 289, 290, 291, 292], "logger": [287, 341, 490], "prune_util": 289, "mix_precis": 304, "base_model": 305, "keras_model": 307, "mxnet_model": 309, "nets_factori": 310, "onnx_model": 311, "tensorflow_model": 312, "torch_model": 313, "object": [314, 549, 616], "auto": [316, 608, 614, 624], "auto_mixed_precis": 317, "basic": [318, 531, 629], "bayesian": [319, 629], "conserv": [320, 629], "exhaust": [321, 629], "hawq_v2": [322, 629], "mse": [324, 629], "mse_v2": [325, 629], "random": [326, 629], "constant": [328, 336], "tuning_sampl": 330, "tuning_spac": 331, "tuning_struct": 332, "train": [334, 530, 551, 584, 623], "collect_layer_histogram": 335, "create_obj_from_config": 337, "kl_diverg": 339, "load_huggingfac": 340, "option": [342, 577, 584, 602], "ux": [345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525], "benchmark_model": 346, "execute_benchmark": 347, "config_gener": [349, 350, 351, 352, 353, 354, 355, 356], "benchmark_config_gener": 349, "graph_optimization_config_gener": 351, "mixed_precision_config_gener": 353, "profiling_config_gener": 354, "pruning_config_gener": 355, "quantization_config_gener": 356, "configuration_wizard": [357, 358, 359, 360, 361, 362], "configuration_pars": 357, "get_boundary_nod": 358, "get_configur": 359, "params_feed": 361, "pruning_config_pars": 362, "db_manag": [363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398], "db_model": [364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384], "benchmark_result": 365, "domain": [368, 426], "domain_flavour": 369, "exampl": [370, 530, 531, 534, 578, 579, 580, 582, 583, 584, 585, 586, 595, 596, 599, 603, 616, 617, 619, 620, 623, 627, 632], "framework": [371, 579, 580, 586, 588, 596, 622], "optimization_typ": 376, "precis": [377, 548, 595, 624], "profil": [378, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 522, 577], "profiling_result": 379, "project": [380, 577], "pruning_detail": 381, "tuning_detail": 383, "tuning_histori": [384, 468], "db_oper": [385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395], "benchmark_api_interfac": 385, "dataset_api_interfac": 386, "diagnosis_api_interfac": 388, "dictionaries_api_interfac": 389, "examples_api_interfac": 390, "model_api_interfac": 392, "optimization_api_interfac": 393, "profiling_api_interfac": 394, "project_api_interfac": 395, "params_interfac": 397, "diagnosi": [399, 400, 401, 402, 403, 404, 405, 406, 407, 577], "factori": [400, 451, 470, 475], "onnx_diagnosi": [402, 403], "onnxrt_diagnosi": 403, "op_detail": 404, "op_entri": 405, "tensorflow_diagnosi": [406, 407], "file_brows": [408, 409], "graph": [410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 577], "collaps": 411, "edg": 412, "graph_read": 414, "node": 416, "reader": [417, 418, 419], "onnxrt_read": 418, "tensorflow_read": 419, "jobs_manag": [421, 422, 423, 424], "jobs_control_queu": 422, "request": [424, 529], "manage_workspac": 425, "model_type_gett": 429, "repositori": 434, "shape": 435, "frozen_pb": 436, "meta_graph": 439, "saved_model": 441, "model_zoo": [443, 444, 445, 446, 447], "download_config": 443, "download_model": 444, "download": 445, "list_model": 447, "names_mapp": [448, 449], "execute_optim": 450, "optimize_model": [454, 458, 460, 463], "neural_coder_optim": [459, 460], "tune": [465, 466, 467, 509, 623, 629], "tune_model": 466, "execute_profil": 469, "profile_model": 472, "tensorflow_profil": [475, 476, 477, 478], "inc_bench": 479, "const": 481, "environ": [482, 592, 600], "except": [483, 513], "executor": 484, "expiring_dict": 485, "github_info": 486, "hw_info": 487, "json_seri": 489, "parser": 491, "proc": 492, "process": [493, 629], "singleton": 494, "status_upd": 495, "templat": [496, 497, 498, 529], "workdir": 498, "workload": [500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 525], "evalu": [502, 584], "yaml_util": 510, "web": [511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525], "commun": 511, "configur": [512, 584, 588, 618, 622, 626, 631], "router": 515, "server": 516, "servic": [517, 518, 519, 520, 521, 522, 523, 524, 525], "history_snapshot_pars": 518, "request_data_processor": 523, "response_gener": 524, "version": 526, "intel": [527, 533, 577, 591, 592, 600, 608, 614, 632, 633], "neural": [527, 530, 531, 533, 567, 577, 591, 592, 597, 601, 603, 608, 614, 619, 620, 626, 633], "compressor": [527, 530, 533, 577, 591, 592, 608, 614, 626, 633], "document": [527, 533, 633], "section": [527, 633], "contributor": [528, 529], "coven": [528, 529], "code": [528, 529, 531, 615], "conduct": [528, 529], "our": 528, "pledg": 528, "standard": 528, "respons": 528, "scope": [528, 620], "enforc": 528, "contribut": [529, 607, 611], "guidelin": 529, "pull": 529, "checklist": 529, "support": [529, 530, 531, 534, 578, 579, 580, 582, 583, 584, 586, 588, 591, 592, 594, 595, 596, 598, 599, 603, 604, 616, 617, 619, 622, 623, 627, 628, 631], "fx": 530, "introduct": [530, 531, 534, 577, 578, 579, 580, 582, 583, 584, 586, 588, 591, 594, 595, 596, 614, 616, 617, 619, 620, 622, 623, 626, 627, 628, 629, 631], "mode": [530, 632], "matrix": [530, 531, 534, 578, 579, 580, 582, 583, 584, 586, 588, 591, 594, 595, 596, 599, 616, 617, 619, 622, 623, 627, 631], "get": [530, 531, 533, 534, 578, 579, 580, 582, 583, 584, 588, 589, 594, 595, 597, 608, 615, 616, 617, 619, 622, 623, 627, 631], "start": [530, 531, 533, 534, 577, 578, 579, 580, 582, 583, 584, 588, 589, 594, 595, 597, 598, 602, 608, 616, 617, 619, 622, 623, 627, 631], "post": [530, 623], "static": [530, 623], "dynam": [530, 531, 623], "awar": [530, 623], "note": [530, 625], "detail": [530, 577, 620], "problem": 530, "architectur": [531, 567, 581, 591, 592], "search": [531, 567, 614], "api": [531, 533, 534, 544, 545, 563, 578, 579, 580, 582, 583, 584, 589, 590, 594, 595, 597, 601, 615, 616, 617, 619, 622], "usag": [531, 603, 614, 627, 629], "1": [531, 577, 584, 587, 590, 614, 632], "python": [531, 533, 573, 589, 594, 597, 601, 602, 609, 612, 622], "yaml": [531, 579, 580, 584, 588, 631], "2": [531, 563, 577, 584, 587, 590, 614, 632], "onli": 531, "advanc": 531, "custom": [531, 577, 594, 629], "secur": [532, 577, 584], "polici": [532, 629], "report": 532, "vulner": 532, "instal": [533, 577, 592, 598, 600, 607, 608, 611], "from": [533, 577, 592], "pypi": [533, 603], "select": [533, 608], "public": [533, 621], "event": [533, 621], "addit": 533, "research": 533, "collabor": 533, "work": [534, 623], "flow": [534, 623], "background": [534, 614], "ad": 534, "new": [534, 577, 609, 612, 629], "backend": 534, "capabl": 534, "implement": 534, "onnxrtadaptor": 534, "runtim": [536, 592, 623, 632], "torch": [537, 632], "convert": 538, "hawq": 539, "symbol": 541, "trace": 541, "user": [545, 579, 580, 584, 590, 622, 630, 631], "face": [545, 590], "mix": [548, 595, 624], "basedataload": 557, "experiement": 563, "deprec": 563, "0": [563, 632], "mixedprecis": 565, "modelconvers": 566, "bench": [577, 601], "tabl": 577, "binari": [577, 592], "sourc": [577, 592], "home": 577, "screen": 577, "creat": [577, 579], "predefin": 577, "displai": 577, "list": [577, 585, 628], "remov": 577, "develop": [577, 607, 611], "tab": 577, "wizard": 577, "edit": 577, "entri": 577, "inform": [577, 593], "demo": 577, "system": [577, 592, 618], "file": [579, 580, 588, 631], "specif": [579, 580], "design": [581, 629], "workflow": 581, "knowledg": [582, 632], "intermedi": 582, "layer": 582, "self": 582, "distribut": [584, 603], "infer": 584, "featur": [584, 588, 591, 603, 604, 608, 622, 623, 627, 631], "pure": 584, "defin": 584, "horovodrun": 584, "execut": 584, "releas": [585, 609, 612, 625], "fp32": 586, "appendix": 586, "frequent": 587, "ask": 587, "question": 587, "build": [587, 594], "issu": [587, 625], "3": [587, 598, 614, 621], "quick": [589, 602], "sampl": 589, "jupyterlab": [589, 608], "extens": [589, 597, 607, 608, 611, 614, 615, 632], "gui": 589, "valid": [589, 592, 632], "incompat": [590, 625], "chang": [590, 613, 615, 625], "between": 590, "v1": 590, "built": [590, 592, 594], "infrastructur": 591, "linux": 592, "prerequisit": 592, "ai": 592, "kit": 592, "window": 592, "requir": [592, 607, 611], "hardwar": [592, 632], "cpu": [592, 600, 632], "base": 592, "64": 592, "compat": 592, "processor": 592, "gpu": 592, "": [592, 615], "xe": 592, "multipl": [592, 616, 632], "vendor": 592, "through": [592, 632], "softwar": 592, "legal": 593, "licens": 593, "citat": 593, "trademark": 593, "singl": [594, 616], "multi": 594, "coder": [597, 601, 603, 614], "what": [597, 615], "do": 597, "we": 597, "offer": 597, "jupyt": [597, 598, 609, 612], "lab": [597, 598], "launcher": [597, 602], "contact": 597, "aw": 598, "amazon": 598, "sagemak": 598, "For": 598, "studio": 598, "notebook": 598, "instanc": 598, "guid": [598, 630], "bigdl": 599, "nano": 599, "platform": [600, 626], "best": [600, 608], "perform": [600, 626], "set": [600, 614], "mkl": 600, "openmp": 600, "jemalloc": 600, "numa": 600, "control": 600, "variabl": 600, "frequenc": 600, "govern": 600, "enabl": [601, 608, 614], "superbench": 601, "argument": 602, "v0": 605, "4": [605, 614, 621], "highlight": 605, "other": 605, "changelog": [606, 610], "neural_compressor_ext_lab": [607, 609], "uninstal": [607, 611], "Or": 608, "let": 608, "u": 608, "help": 608, "you": 608, "pre": 608, "requisit": 608, "make": [609, 612, 615], "manual": [609, 612], "npm": [609, 612], "autom": [609, 612], "publish": [609, 612], "conda": [609, 612], "forg": [609, 612], "neural_compressor_ext_lab_alibaba": [611, 612], "log": 613, "unreleas": 613, "vscode": 614, "open": 614, "icon": 614, "5": 614, "welcom": 615, "your": 615, "v": 615, "folder": 615, "setup": 615, "up": 615, "run": 615, "straight": 615, "awai": 615, "explor": 615, "test": 615, "go": 615, "further": 615, "orchestr": 617, "One": 617, "shot": 617, "network": [619, 620], "type": 620, "sparsiti": 620, "decai": 620, "regular": 620, "refer": [620, 623], "full": 621, "56": 621, "2023": 621, "2022": 621, "34": 621, "2021": 621, "15": 621, "2018": 621, "2020": 621, "style": 622, "access": 622, "fundament": 623, "scheme": 623, "ipex": 623, "approach": 623, "accuraci": [623, 629], "turn": 624, "off": 624, "dure": 624, "known": 625, "prepar": 626, "benefit": 626, "comparison": 626, "differ": 626, "tensorboard": 627, "space": 629, "exit": 629, "11": 632, "13": 632, "ptq": 632, "9": 632}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"644ec953a7dc_pruning_support": [[0, "module-644ec953a7dc_pruning_support"]], "6ece06672ed3_v1_14": [[1, "module-6ece06672ed3_v1_14"]], "Module Contents": [[1, "module-contents"], [5, "module-contents"], [6, "module-contents"], [8, "module-contents"], [13, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [101, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [109, "module-contents"], [111, "module-contents"], [112, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [160, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [171, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [198, "module-contents"], [199, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [206, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [216, "module-contents"], [217, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [228, "module-contents"], [229, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [236, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [245, "module-contents"], [246, "module-contents"], [248, "module-contents"], [249, "module-contents"], [251, "module-contents"], [252, "module-contents"], [253, "module-contents"], [255, "module-contents"], [256, "module-contents"], [257, "module-contents"], [258, "module-contents"], [259, "module-contents"], [260, "module-contents"], [261, "module-contents"], [262, "module-contents"], [263, "module-contents"], [267, "module-contents"], [268, "module-contents"], [269, "module-contents"], [271, "module-contents"], [272, "module-contents"], [273, "module-contents"], [274, "module-contents"], [275, "module-contents"], [277, "module-contents"], [278, "module-contents"], [279, "module-contents"], [280, "module-contents"], [283, "module-contents"], [284, "module-contents"], [285, "module-contents"], [288, "module-contents"], [289, "module-contents"], [290, "module-contents"], [291, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [296, "module-contents"], [297, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [307, "module-contents"], [308, "module-contents"], [309, "module-contents"], [310, "module-contents"], [311, "module-contents"], [312, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [319, "module-contents"], [320, "module-contents"], [321, "module-contents"], [322, "module-contents"], [324, "module-contents"], [325, "module-contents"], [326, "module-contents"], [327, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [337, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [371, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [392, "module-contents"], [393, "module-contents"], [394, "module-contents"], [395, "module-contents"], [397, "module-contents"], [398, "module-contents"], [399, "module-contents"], [400, "module-contents"], [403, "module-contents"], [404, "module-contents"], [405, "module-contents"], [407, "module-contents"], [408, "module-contents"], [410, "module-contents"], [411, "module-contents"], [412, "module-contents"], [413, "module-contents"], [414, "module-contents"], [416, "module-contents"], [418, "module-contents"], [419, "module-contents"], [425, "module-contents"], [426, "module-contents"], [428, "module-contents"], [429, "module-contents"], [431, "module-contents"], [433, "module-contents"], [434, "module-contents"], [435, "module-contents"], [436, "module-contents"], [438, "module-contents"], [439, "module-contents"], [440, "module-contents"], [441, "module-contents"], [442, "module-contents"], [443, "module-contents"], [444, "module-contents"], [445, "module-contents"], [447, "module-contents"], [449, "module-contents"], [450, "module-contents"], [451, "module-contents"], [452, "module-contents"], [454, "module-contents"], [457, "module-contents"], [458, "module-contents"], [460, "module-contents"], [461, "module-contents"], [463, "module-contents"], [464, "module-contents"], [466, "module-contents"], [467, "module-contents"], [468, "module-contents"], [469, "module-contents"], [470, "module-contents"], [472, "module-contents"], [473, "module-contents"], [474, "module-contents"], [475, "module-contents"], [477, "module-contents"], [478, "module-contents"], [479, "module-contents"], [481, "module-contents"], [482, "module-contents"], [483, "module-contents"], [484, "module-contents"], [485, "module-contents"], [486, "module-contents"], [487, "module-contents"], [489, "module-contents"], [490, "module-contents"], [491, "module-contents"], [492, "module-contents"], [493, "module-contents"], [494, "module-contents"], [495, "module-contents"], [497, "module-contents"], [498, "module-contents"], [499, "module-contents"], [500, "module-contents"], [501, "module-contents"], [502, "module-contents"], [503, "module-contents"], [505, "module-contents"], [506, "module-contents"], [507, "module-contents"], [508, "module-contents"], [509, "module-contents"], [510, "module-contents"], [511, "module-contents"], [512, "module-contents"], [513, "module-contents"], [515, "module-contents"], [516, "module-contents"], [517, "module-contents"], [518, "module-contents"], [520, "module-contents"], [521, "module-contents"], [522, "module-contents"], [523, "module-contents"], [524, "module-contents"], [525, "module-contents"], [554, "module-contents"]], "Functions": [[1, "functions"], [5, "functions"], [6, "functions"], [15, "functions"], [34, "functions"], [40, "functions"], [41, "functions"], [63, "functions"], [64, "functions"], [66, "functions"], [100, "functions"], [101, "functions"], [112, "functions"], [114, "functions"], [142, "functions"], [143, "functions"], [144, "functions"], [148, "functions"], [149, "functions"], [150, "functions"], [152, "functions"], [155, "functions"], [157, "functions"], [160, "functions"], [162, "functions"], [163, "functions"], [164, "functions"], [165, "functions"], [166, "functions"], [168, "functions"], [171, "functions"], [178, "functions"], [186, "functions"], [188, "functions"], [192, "functions"], [195, "functions"], [196, "functions"], [197, "functions"], [200, "functions"], [202, "functions"], [203, "functions"], [204, "functions"], [205, "functions"], [207, "functions"], [209, "functions"], [210, "functions"], [212, "functions"], [216, "functions"], [224, "functions"], [226, "functions"], [230, "functions"], [233, "functions"], [234, "functions"], [235, "functions"], [237, "functions"], [238, "functions"], [239, "functions"], [241, "functions"], [242, "functions"], [243, "functions"], [244, "functions"], [245, "functions"], [248, "functions"], [249, "functions"], [251, "functions"], [252, "functions"], [253, "functions"], [254, "functions"], [255, "functions"], [263, "functions"], [267, "functions"], [268, "functions"], [272, "functions"], [279, "functions"], [283, "functions"], [288, "functions"], [289, "functions"], [290, "functions"], [292, "functions"], [295, "functions"], [296, "functions"], [297, "functions"], [299, "functions"], [300, "functions"], [301, "functions"], [302, "functions"], [303, "functions"], [304, "functions"], [308, "functions"], [312, "functions"], [314, "functions"], [315, "functions"], [319, "functions"], [327, "functions"], [331, "functions"], [333, "functions"], [334, "functions"], [337, "functions"], [338, "functions"], [340, "functions"], [341, "functions"], [343, "functions"], [344, "functions"], [346, "functions"], [347, "functions"], [357, "functions"], [358, "functions"], [359, "functions"], [361, "functions"], [366, "functions"], [368, "functions"], [369, "functions"], [371, "functions"], [373, "functions"], [376, "functions"], [377, "functions"], [382, "functions"], [385, "functions"], [386, "functions"], [387, "functions"], [398, "functions"], [408, "functions"], [425, "functions"], [429, "functions"], [431, "functions"], [442, "functions"], [443, "functions"], [444, "functions"], [447, "functions"], [450, "functions"], [454, "functions"], [458, "functions"], [460, "functions"], [463, "functions"], [466, "functions"], [468, "functions"], [469, "functions"], [472, "functions"], [478, "functions"], [479, "functions"], [487, "functions"], [490, "functions"], [495, "functions"], [499, "functions"], [507, "functions"], [510, "functions"], [511, "functions"], [515, "functions"], [516, "functions"]], "6f0d0f71d92e_v1_13": [[2, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[3, "module-9e89549a08c8_v1_11"]], "block_mask": [[4, "module-block_mask"]], "env": [[5, "module-env"]], "neural_compressor.adaptor.adaptor": [[6, "module-neural_compressor.adaptor.adaptor"]], "Classes": [[6, "classes"], [8, "classes"], [13, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [101, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [106, "classes"], [109, "classes"], [111, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [140, "classes"], [141, "classes"], [143, "classes"], [144, "classes"], [146, "classes"], [147, "classes"], [150, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [159, "classes"], [160, "classes"], [162, "classes"], [163, "classes"], [164, "classes"], [165, "classes"], [167, "classes"], [168, "classes"], [171, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [177, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [213, "classes"], [214, "classes"], [216, "classes"], [217, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [228, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [251, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [261, "classes"], [262, "classes"], [263, "classes"], [267, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [277, "classes"], [278, "classes"], [279, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [288, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [293, "classes"], [294, "classes"], [295, "classes"], [296, "classes"], [299, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [309, "classes"], [310, "classes"], [311, "classes"], [312, "classes"], [313, "classes"], [314, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [319, "classes"], [320, "classes"], [321, "classes"], [322, "classes"], [324, "classes"], [325, "classes"], [326, "classes"], [327, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [342, "classes"], [344, "classes"], [345, "classes"], [348, "classes"], [349, "classes"], [350, "classes"], [351, "classes"], [353, "classes"], [354, "classes"], [355, "classes"], [356, "classes"], [357, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [366, "classes"], [367, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [371, "classes"], [373, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [386, "classes"], [388, "classes"], [389, "classes"], [390, "classes"], [391, "classes"], [392, "classes"], [393, "classes"], [394, "classes"], [395, "classes"], [396, "classes"], [397, "classes"], [399, "classes"], [400, "classes"], [403, "classes"], [404, "classes"], [405, "classes"], [407, "classes"], [410, "classes"], [411, "classes"], [412, "classes"], [413, "classes"], [414, "classes"], [416, "classes"], [418, "classes"], [419, "classes"], [426, "classes"], [428, "classes"], [431, "classes"], [433, "classes"], [434, "classes"], [435, "classes"], [436, "classes"], [438, "classes"], [439, "classes"], [440, "classes"], [441, "classes"], [445, "classes"], [449, "classes"], [451, "classes"], [452, "classes"], [455, "classes"], [457, "classes"], [461, "classes"], [464, "classes"], [467, "classes"], [468, "classes"], [470, "classes"], [473, "classes"], [474, "classes"], [475, "classes"], [477, "classes"], [481, "classes"], [482, "classes"], [484, "classes"], [485, "classes"], [486, "classes"], [487, "classes"], [489, "classes"], [491, "classes"], [492, "classes"], [493, "classes"], [494, "classes"], [497, "classes"], [498, "classes"], [500, "classes"], [501, "classes"], [502, "classes"], [503, "classes"], [505, "classes"], [506, "classes"], [507, "classes"], [508, "classes"], [509, "classes"], [511, "classes"], [512, "classes"], [513, "classes"], [515, "classes"], [517, "classes"], [518, "classes"], [520, "classes"], [521, "classes"], [522, "classes"], [523, "classes"], [524, "classes"], [525, "classes"], [554, "classes"], [567, "classes"]], "neural_compressor.adaptor": [[7, "module-neural_compressor.adaptor"]], "Subpackages": [[7, "subpackages"], [18, "subpackages"], [83, "subpackages"], [107, "subpackages"], [108, "subpackages"], [110, "subpackages"], [159, "subpackages"], [172, "subpackages"], [197, "subpackages"], [235, "subpackages"], [247, "subpackages"], [264, "subpackages"], [265, "subpackages"], [270, "subpackages"], [281, "subpackages"], [295, "subpackages"], [323, "subpackages"], [396, "subpackages"], [401, "subpackages"], [415, "subpackages"], [420, "subpackages"], [427, "subpackages"], [455, "subpackages"], [471, "subpackages"], [480, "subpackages"], [488, "subpackages"], [514, "subpackages"]], "Submodules": [[7, "submodules"], [14, "submodules"], [18, "submodules"], [30, "submodules"], [47, "submodules"], [72, "submodules"], [83, "submodules"], [91, "submodules"], [97, "submodules"], [102, "submodules"], [107, "submodules"], [108, "submodules"], [110, "submodules"], [113, "submodules"], [126, "submodules"], [139, "submodules"], [145, "submodules"], [152, "submodules"], [158, "submodules"], [159, "submodules"], [161, "submodules"], [173, "submodules"], [180, "submodules"], [192, "submodules"], [196, "submodules"], [200, "submodules"], [207, "submodules"], [218, "submodules"], [230, "submodules"], [234, "submodules"], [237, "submodules"], [241, "submodules"], [247, "submodules"], [254, "submodules"], [264, "submodules"], [266, "submodules"], [270, "submodules"], [276, "submodules"], [282, "submodules"], [286, "submodules"], [295, "submodules"], [302, "submodules"], [306, "submodules"], [323, "submodules"], [329, "submodules"], [338, "submodules"], [348, "submodules"], [352, "submodules"], [360, "submodules"], [372, "submodules"], [391, "submodules"], [396, "submodules"], [401, "submodules"], [402, "submodules"], [406, "submodules"], [409, "submodules"], [415, "submodules"], [417, "submodules"], [420, "submodules"], [421, "submodules"], [427, "submodules"], [430, "submodules"], [432, "submodules"], [437, "submodules"], [446, "submodules"], [448, "submodules"], [453, "submodules"], [455, "submodules"], [456, "submodules"], [459, "submodules"], [462, "submodules"], [465, "submodules"], [471, "submodules"], [476, "submodules"], [480, "submodules"], [488, "submodules"], [496, "submodules"], [504, "submodules"], [514, "submodules"], [519, "submodules"]], "Package Contents": [[7, "package-contents"], [30, "package-contents"], [152, "package-contents"], [159, "package-contents"], [180, "package-contents"], [192, "package-contents"], [196, "package-contents"], [197, "package-contents"], [200, "package-contents"], [207, "package-contents"], [218, "package-contents"], [230, "package-contents"], [234, "package-contents"], [235, "package-contents"], [237, "package-contents"], [241, "package-contents"], [247, "package-contents"], [254, "package-contents"], [270, "package-contents"], [276, "package-contents"], [281, "package-contents"], [282, "package-contents"], [295, "package-contents"], [302, "package-contents"], [306, "package-contents"], [323, "package-contents"], [329, "package-contents"], [338, "package-contents"], [348, "package-contents"], [391, "package-contents"], [396, "package-contents"], [455, "package-contents"], [567, "package-contents"]], "neural_compressor.adaptor.keras": [[8, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[9, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[10, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils": [[11, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[12, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.mxnet": [[13, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[14, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[15, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[16, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[17, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[18, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[19, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[20, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[21, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[22, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[23, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[24, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[25, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[26, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[29, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[30, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[31, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[32, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[33, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[37, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[38, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[39, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[40, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[41, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[42, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[43, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[44, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[45, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[106, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[107, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[136, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[137, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[138, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[139, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[140, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[141, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[142, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[143, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[144, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[145, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.onnx": [[146, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[147, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[148, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[149, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[150, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[151, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[152, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[153, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[154, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[155, "module-neural_compressor.benchmark"]], "neural_compressor.compression.callbacks": [[156, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[157, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[158, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[159, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[160, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[161, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.patterns": [[162, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.pruners": [[163, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.regs": [[164, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[165, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.utils": [[166, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[167, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[168, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[169, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[170, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[171, "module-neural_compressor.config"]], "neural_compressor.contrib": [[172, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[173, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[174, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[175, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[176, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[177, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[178, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[179, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[180, "module-neural_compressor.data.dataloaders"]], "Attributes": [[180, "attributes"], [188, "attributes"], [197, "attributes"], [226, "attributes"], [235, "attributes"], [247, "attributes"], [281, "attributes"], [306, "attributes"], [338, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[181, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[182, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[183, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[184, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[185, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[186, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[187, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[188, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[189, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[190, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[191, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[192, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[193, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[194, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[195, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[196, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[197, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[198, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[199, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[200, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[201, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[202, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[203, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[204, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[205, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[206, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[207, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[208, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[209, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[210, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[211, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[212, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[213, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[214, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[215, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[216, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[217, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[218, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[219, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[220, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[221, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[222, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[223, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[224, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[225, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[226, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[227, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[228, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[229, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[230, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[231, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[232, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[233, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[234, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[235, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[236, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[237, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[238, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[239, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[240, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[241, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[242, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[243, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[244, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.export.utils": [[245, "module-neural_compressor.experimental.export.utils"]], "neural_compressor.experimental.graph_optimization": [[246, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[247, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[248, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[249, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[250, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[251, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[252, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[253, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[254, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[255, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[256, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[257, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[258, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[259, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[260, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[261, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[262, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[263, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "neural_compressor.experimental.nas.dynast": [[264, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[265, "module-neural_compressor.experimental.nas.dynast.supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[266, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[267, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[268, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[269, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"]], "neural_compressor.experimental.nas": [[270, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[271, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[272, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[273, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[274, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[275, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[276, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[277, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[278, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[279, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[280, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[281, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[282, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[283, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[284, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[285, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[286, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[287, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[288, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[289, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[290, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[291, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[292, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[293, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[294, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[295, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[296, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[297, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[298, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[299, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[300, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[301, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[302, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[303, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[304, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[305, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[306, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[307, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[308, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[309, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[310, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[311, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[312, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[313, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[314, "module-neural_compressor.objective"]], "neural_compressor.quantization": [[315, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[316, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[317, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[318, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[319, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[320, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[321, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[322, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[323, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[324, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[325, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[326, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[327, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[328, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[329, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[330, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[331, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[332, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[333, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.training": [[334, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[335, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[336, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[337, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[338, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[339, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[340, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[341, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[342, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[343, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[344, "module-neural_compressor.utils.utility"]], "neural_compressor.ux.components.benchmark.benchmark": [[345, "module-neural_compressor.ux.components.benchmark.benchmark"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[346, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[347, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "neural_compressor.ux.components.benchmark": [[348, "module-neural_compressor.ux.components.benchmark"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[349, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "neural_compressor.ux.components.config_generator.config_generator": [[350, "module-neural_compressor.ux.components.config_generator.config_generator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[351, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[352, "module-neural_compressor.ux.components.config_generator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[353, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[354, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[355, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[356, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[357, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[358, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[359, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "neural_compressor.ux.components.configuration_wizard": [[360, "module-neural_compressor.ux.components.configuration_wizard"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[361, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[362, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "neural_compressor.ux.components.db_manager.db_manager": [[363, "module-neural_compressor.ux.components.db_manager.db_manager"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[364, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[365, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[366, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[367, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[368, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[369, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "neural_compressor.ux.components.db_manager.db_models.example": [[370, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[371, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[372, "module-neural_compressor.ux.components.db_manager.db_models"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[373, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "neural_compressor.ux.components.db_manager.db_models.model": [[374, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[375, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[376, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[377, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[378, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[379, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "neural_compressor.ux.components.db_manager.db_models.project": [[380, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[381, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[382, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[383, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[384, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[385, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[386, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[387, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[388, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[389, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[390, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[391, "module-neural_compressor.ux.components.db_manager.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[392, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[393, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[394, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[395, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[396, "module-neural_compressor.ux.components.db_manager"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[397, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "neural_compressor.ux.components.db_manager.utils": [[398, "module-neural_compressor.ux.components.db_manager.utils"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[399, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[400, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[401, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[402, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[403, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[404, "module-neural_compressor.ux.components.diagnosis.op_details"]], "neural_compressor.ux.components.diagnosis.op_entry": [[405, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[406, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[407, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.file_browser.file_browser": [[408, "module-neural_compressor.ux.components.file_browser.file_browser"]], "neural_compressor.ux.components.file_browser": [[409, "module-neural_compressor.ux.components.file_browser"]], "neural_compressor.ux.components.graph.attribute": [[410, "module-neural_compressor.ux.components.graph.attribute"]], "neural_compressor.ux.components.graph.collapser": [[411, "module-neural_compressor.ux.components.graph.collapser"]], "neural_compressor.ux.components.graph.edge": [[412, "module-neural_compressor.ux.components.graph.edge"]], "neural_compressor.ux.components.graph.graph": [[413, "module-neural_compressor.ux.components.graph.graph"]], "neural_compressor.ux.components.graph.graph_reader": [[414, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[415, "module-neural_compressor.ux.components.graph"]], "neural_compressor.ux.components.graph.node": [[416, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[417, "module-neural_compressor.ux.components.graph.reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[418, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[419, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[420, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[421, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[422, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[423, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[424, "module-neural_compressor.ux.components.jobs_management.request"]], "neural_compressor.ux.components.manage_workspace": [[425, "module-neural_compressor.ux.components.manage_workspace"]], "neural_compressor.ux.components.model.domain": [[426, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[427, "module-neural_compressor.ux.components.model"]], "neural_compressor.ux.components.model.model": [[428, "module-neural_compressor.ux.components.model.model"]], "neural_compressor.ux.components.model.model_type_getter": [[429, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[430, "module-neural_compressor.ux.components.model.onnxrt"]], "neural_compressor.ux.components.model.onnxrt.model": [[431, "module-neural_compressor.ux.components.model.onnxrt.model"]], "neural_compressor.ux.components.model.pytorch": [[432, "module-neural_compressor.ux.components.model.pytorch"]], "neural_compressor.ux.components.model.pytorch.model": [[433, "module-neural_compressor.ux.components.model.pytorch.model"]], "neural_compressor.ux.components.model.repository": [[434, "module-neural_compressor.ux.components.model.repository"]], "neural_compressor.ux.components.model.shape": [[435, "module-neural_compressor.ux.components.model.shape"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[436, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[437, "module-neural_compressor.ux.components.model.tensorflow"]], "neural_compressor.ux.components.model.tensorflow.keras": [[438, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[439, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "neural_compressor.ux.components.model.tensorflow.model": [[440, "module-neural_compressor.ux.components.model.tensorflow.model"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[441, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "neural_compressor.ux.components.model.tensorflow.utils": [[442, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "neural_compressor.ux.components.model_zoo.download_config": [[443, "module-neural_compressor.ux.components.model_zoo.download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[444, "module-neural_compressor.ux.components.model_zoo.download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[445, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[446, "module-neural_compressor.ux.components.model_zoo"]], "neural_compressor.ux.components.model_zoo.list_models": [[447, "module-neural_compressor.ux.components.model_zoo.list_models"]], "neural_compressor.ux.components.names_mapper": [[448, "module-neural_compressor.ux.components.names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[449, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "neural_compressor.ux.components.optimization.execute_optimization": [[450, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "neural_compressor.ux.components.optimization.factory": [[451, "module-neural_compressor.ux.components.optimization.factory"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[452, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[453, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[454, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "neural_compressor.ux.components.optimization": [[455, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[456, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[457, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[458, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[459, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[460, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "neural_compressor.ux.components.optimization.optimization": [[461, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[462, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[463, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[464, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[465, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[466, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[467, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "neural_compressor.ux.components.optimization.tuning_history": [[468, "module-neural_compressor.ux.components.optimization.tuning_history"]], "neural_compressor.ux.components.profiling.execute_profiling": [[469, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "neural_compressor.ux.components.profiling.factory": [[470, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[471, "module-neural_compressor.ux.components.profiling"]], "neural_compressor.ux.components.profiling.profile_model": [[472, "module-neural_compressor.ux.components.profiling.profile_model"]], "neural_compressor.ux.components.profiling.profiler": [[473, "module-neural_compressor.ux.components.profiling.profiler"]], "neural_compressor.ux.components.profiling.profiling": [[474, "module-neural_compressor.ux.components.profiling.profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[475, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[476, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[477, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[478, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "neural_compressor.ux.inc_bench": [[479, "module-neural_compressor.ux.inc_bench"]], "neural_compressor.ux": [[480, "module-neural_compressor.ux"]], "neural_compressor.ux.utils.consts": [[481, "module-neural_compressor.ux.utils.consts"]], "neural_compressor.ux.utils.environment": [[482, "module-neural_compressor.ux.utils.environment"]], "neural_compressor.ux.utils.exceptions": [[483, "module-neural_compressor.ux.utils.exceptions"]], "neural_compressor.ux.utils.executor": [[484, "module-neural_compressor.ux.utils.executor"]], "neural_compressor.ux.utils.expiring_dict": [[485, "module-neural_compressor.ux.utils.expiring_dict"]], "neural_compressor.ux.utils.github_info": [[486, "module-neural_compressor.ux.utils.github_info"]], "neural_compressor.ux.utils.hw_info": [[487, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[488, "module-neural_compressor.ux.utils"]], "neural_compressor.ux.utils.json_serializer": [[489, "module-neural_compressor.ux.utils.json_serializer"]], "neural_compressor.ux.utils.logger": [[490, "module-neural_compressor.ux.utils.logger"]], "neural_compressor.ux.utils.parser": [[491, "module-neural_compressor.ux.utils.parser"]], "neural_compressor.ux.utils.proc": [[492, "module-neural_compressor.ux.utils.proc"]], "neural_compressor.ux.utils.processes": [[493, "module-neural_compressor.ux.utils.processes"]], "neural_compressor.ux.utils.singleton": [[494, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.status_updates": [[495, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[496, "module-neural_compressor.ux.utils.templates"]], "neural_compressor.ux.utils.templates.metric": [[497, "module-neural_compressor.ux.utils.templates.metric"]], "neural_compressor.ux.utils.templates.workdir": [[498, "module-neural_compressor.ux.utils.templates.workdir"]], "neural_compressor.ux.utils.utils": [[499, "module-neural_compressor.ux.utils.utils"]], "neural_compressor.ux.utils.workload.config": [[500, "module-neural_compressor.ux.utils.workload.config"]], "neural_compressor.ux.utils.workload.dataloader": [[501, "module-neural_compressor.ux.utils.workload.dataloader"]], "neural_compressor.ux.utils.workload.evaluation": [[502, "module-neural_compressor.ux.utils.workload.evaluation"]], "neural_compressor.ux.utils.workload.graph_optimization": [[503, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[504, "module-neural_compressor.ux.utils.workload"]], "neural_compressor.ux.utils.workload.mixed_precision": [[505, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "neural_compressor.ux.utils.workload.model": [[506, "module-neural_compressor.ux.utils.workload.model"]], "neural_compressor.ux.utils.workload.pruning": [[507, "module-neural_compressor.ux.utils.workload.pruning"]], "neural_compressor.ux.utils.workload.quantization": [[508, "module-neural_compressor.ux.utils.workload.quantization"]], "neural_compressor.ux.utils.workload.tuning": [[509, "module-neural_compressor.ux.utils.workload.tuning"]], "neural_compressor.ux.utils.yaml_utils": [[510, "module-neural_compressor.ux.utils.yaml_utils"]], "neural_compressor.ux.web.communication": [[511, "module-neural_compressor.ux.web.communication"]], "neural_compressor.ux.web.configuration": [[512, "module-neural_compressor.ux.web.configuration"]], "neural_compressor.ux.web.exceptions": [[513, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[514, "module-neural_compressor.ux.web"]], "neural_compressor.ux.web.router": [[515, "module-neural_compressor.ux.web.router"]], "neural_compressor.ux.web.server": [[516, "module-neural_compressor.ux.web.server"]], "neural_compressor.ux.web.service.benchmark": [[517, "module-neural_compressor.ux.web.service.benchmark"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[518, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[519, "module-neural_compressor.ux.web.service"]], "neural_compressor.ux.web.service.model": [[520, "module-neural_compressor.ux.web.service.model"]], "neural_compressor.ux.web.service.optimization": [[521, "module-neural_compressor.ux.web.service.optimization"]], "neural_compressor.ux.web.service.profiling": [[522, "module-neural_compressor.ux.web.service.profiling"]], "neural_compressor.ux.web.service.request_data_processor": [[523, "module-neural_compressor.ux.web.service.request_data_processor"]], "neural_compressor.ux.web.service.response_generator": [[524, "module-neural_compressor.ux.web.service.response_generator"]], "neural_compressor.ux.web.service.workload": [[525, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[526, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[527, "intel-neural-compressor-documentation"], [633, "intel-neural-compressor-documentation"]], "Sections": [[527, "sections"], [633, "sections"]], "Contributor Covenant Code of Conduct": [[528, "contributor-covenant-code-of-conduct"], [529, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[528, "our-pledge"]], "Our Standards": [[528, "our-standards"]], "Our Responsibilities": [[528, "our-responsibilities"]], "Scope": [[528, "scope"]], "Enforcement": [[528, "enforcement"]], "Attribution": [[528, "attribution"]], "Contribution Guidelines": [[529, "contribution-guidelines"]], "Pull Request Checklist": [[529, "pull-request-checklist"]], "Pull Request Template": [[529, "pull-request-template"]], "Support": [[529, "support"]], "FX": [[530, "fx"]], "Introduction": [[530, "introduction"], [531, "introduction"], [534, "introduction"], [577, "introduction"], [578, "introduction"], [579, "introduction"], [580, "introduction"], [582, "introduction"], [583, "introduction"], [584, "introduction"], [586, "introduction"], [588, "introduction"], [591, "introduction"], [594, "introduction"], [595, "introduction"], [596, "introduction"], [616, "introduction"], [617, "introduction"], [619, "introduction"], [620, "introduction"], [622, "introduction"], [626, "introduction"], [627, "introduction"], [628, "introduction"], [629, "introduction"], [631, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[530, "fx-mode-support-matrix-in-neural-compressor"]], "Get Start": [[530, "get-start"]], "Post Training Static Quantization": [[530, "post-training-static-quantization"], [623, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[530, "post-training-dynamic-quantization"], [623, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[530, "quantization-aware-training"]], "Examples": [[530, "examples"], [531, "examples"], [578, "examples"], [579, "examples"], [580, "examples"], [582, "examples"], [583, "examples"], [584, "examples"], [585, "examples"], [586, "examples"], [595, "examples"], [596, "examples"], [617, "examples"], [619, "examples"], [623, "examples"], [627, "examples"]], "Note": [[530, "note"]], "Details": [[530, "details"]], "Common Problem": [[530, "common-problem"]], "Dynamic Quantization": [[530, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[530, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[531, "neural-architecture-search"]], "Basic NAS": [[531, "basic-nas"]], "Dynamic NAS": [[531, "dynamic-nas"]], "NAS Support Matrix": [[531, "nas-support-matrix"]], "Get Started with NAS API": [[531, "get-started-with-nas-api"]], "Basic Usage": [[531, "basic-usage"]], "1. Python code + YAML": [[531, "python-code-yaml"]], "2. Python code only": [[531, "python-code-only"]], "Advanced Usage (Custom NAS)": [[531, "advanced-usage-custom-nas"]], "Security Policy": [[532, "security-policy"]], "Report a Vulnerability": [[532, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[533, "intel-neural-compressor"], [614, "intel-neural-compressor"]], "Installation": [[533, "installation"], [592, "installation"], [608, "installation"]], "Install from pypi": [[533, "install-from-pypi"]], "Getting Started": [[533, "getting-started"], [589, "getting-started"]], "Quantization with Python API": [[533, "quantization-with-python-api"], [589, "quantization-with-python-api"]], "Documentation": [[533, "documentation"]], "Selected Publications/Events": [[533, "selected-publications-events"]], "Additional Content": [[533, "additional-content"]], "Research Collaborations": [[533, "research-collaborations"]], "Adaptor": [[534, "adaptor"], [535, "adaptor"]], "Adaptor Support Matrix": [[534, "adaptor-support-matrix"]], "Working Flow": [[534, "working-flow"], [623, "working-flow"]], "Get Start with Adaptor API": [[534, "get-start-with-adaptor-api"]], "Query API": [[534, "query-api"]], "Background": [[534, "background"]], "Query API Introduction": [[534, "query-api-introduction"]], "Example of Adding a New Backend Support": [[534, "example-of-adding-a-new-backend-support"]], "Capability": [[534, "capability"]], "Implement ONNXRTAdaptor Class": [[534, "implement-onnxrtadaptor-class"]], "ONNX Runtime": [[536, "onnx-runtime"]], "Torch Utils": [[537, "torch-utils"]], "Bf16 Convert": [[538, "bf16-convert"]], "Hawq Metric": [[539, "hawq-metric"]], "Onnx": [[540, "onnx"]], "Symbolic Trace": [[541, "symbolic-trace"]], "Util": [[542, "util"]], "Algorithm": [[543, "algorithm"]], "APIs": [[544, "apis"]], "User facing APIs": [[545, "user-facing-apis"]], "Benchmark": [[546, "benchmark"], [553, "benchmark"], [622, "benchmark"]], "Config": [[547, "config"]], "Mix Precision": [[548, "mix-precision"]], "Objective": [[549, "objective"], [616, "objective"]], "Quantization": [[550, "quantization"], [569, "quantization"], [622, "quantization"], [623, "quantization"]], "Training": [[551, "training"]], "Common": [[552, "common"]], "BLEU": [[554, "module-neural_compressor.experimental.metric.bleu"]], "Criterion": [[555, "criterion"]], "Data": [[556, "data"]], "Dataloader": [[557, "dataloader"]], "BaseDataLoader": [[557, "basedataloader"]], "dataloaders": [[557, "dataloaders"]], "Datasets": [[558, "datasets"]], "Transforms": [[559, "transforms"]], "Metric": [[560, "metric"]], "Model": [[561, "model"], [572, "model"], [596, "model"]], "Optimizer": [[562, "optimizer"]], "Component(experiemental API, deprecated in 2.0)": [[563, "component-experiemental-api-deprecated-in-2-0"]], "Distillation": [[564, "distillation"], [582, "distillation"], [622, "distillation"]], "MixedPrecision": [[565, "mixedprecision"]], "ModelConversion": [[566, "modelconversion"]], "Neural architecture search (NAS)": [[567, "neural-architecture-search-nas"]], "Pruning": [[568, "pruning"], [577, "pruning"], [619, "pruning"], [622, "pruning"]], "Scheduler": [[570, "scheduler"]], "Contrib": [[571, "contrib"]], "Pythonic": [[573, "pythonic"]], "Strategy": [[574, "strategy"]], "Strategies": [[575, "strategies"]], "Utils": [[576, "utils"]], "Intel\u00ae Neural Compressor Bench": [[577, "intel-neural-compressor-bench"]], "Table of Contents": [[577, "table-of-contents"]], "Install Intel\u00ae Neural Compressor with Bench": [[577, "install-intel-neural-compressor-with-bench"]], "Option 1: Install from Binary": [[577, "option-1-install-from-binary"]], "Option 2: Install from Source": [[577, "option-2-install-from-source"]], "Start the Intel\u00ae Neural Compressor Bench": [[577, "start-the-intel-neural-compressor-bench"]], "Home Screen": [[577, "home-screen"]], "Create New Project": [[577, "create-new-project"]], "Predefined Model": [[577, "predefined-model"]], "Custom Model": [[577, "custom-model"]], "Display Model Graph": [[577, "display-model-graph"]], "Project List": [[577, "project-list"]], "Remove Project": [[577, "remove-project"]], "Develop Project": [[577, "develop-project"]], "Optimization Tab": [[577, "optimization-tab"]], "Optimization Table": [[577, "optimization-table"]], "Optimization Wizard": [[577, "optimization-wizard"]], "Editing Optimization Entries": [[577, "editing-optimization-entries"]], "Optimization Details": [[577, "optimization-details"]], "Benchmark Tab": [[577, "benchmark-tab"]], "Benchmark Table": [[577, "benchmark-table"]], "Benchmark Wizard": [[577, "benchmark-wizard"]], "Editing Benchmark Entries": [[577, "editing-benchmark-entries"]], "Benchmark Details": [[577, "benchmark-details"]], "Profiling Tab": [[577, "profiling-tab"]], "Profiling Table": [[577, "profiling-table"]], "Profiling Wizard": [[577, "profiling-wizard"]], "Editing Profiling Entries": [[577, "editing-profiling-entries"]], "Profiling Details": [[577, "profiling-details"]], "Diagnosis Tab": [[577, "diagnosis-tab"]], "Dataset Tab": [[577, "dataset-tab"]], "Dataset List": [[577, "dataset-list"]], "Dataset Wizard": [[577, "dataset-wizard"]], "Dataset Details": [[577, "dataset-details"]], "Custom Dataset": [[577, "custom-dataset"]], "Project Information": [[577, "project-information"]], "NAS demo": [[577, "nas-demo"]], "System Information": [[577, "system-information"]], "Security": [[577, "security"], [584, "security"]], "Benchmarking": [[578, "benchmarking"]], "Benchmark Support Matrix": [[578, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[578, "get-started-with-benchmark-api"]], "DataLoader": [[579, "dataloader"]], "Supported Framework Dataloader Matrix": [[579, "supported-framework-dataloader-matrix"]], "Get Start with Dataloader API": [[579, "get-start-with-dataloader-api"]], "Config Dataloader in a Yaml File": [[579, "config-dataloader-in-a-yaml-file"]], "Create a User-specific Dataloader": [[579, "create-a-user-specific-dataloader"]], "Dataset": [[580, "dataset"]], "Supported Framework Dataset Matrix": [[580, "supported-framework-dataset-matrix"]], "TensorFlow": [[580, "tensorflow"], [594, "tensorflow"], [628, "tensorflow"]], "PyTorch": [[580, "pytorch"], [594, "pytorch"], [624, "pytorch"]], "MXNet": [[580, "mxnet"], [594, "mxnet"], [628, "mxnet"]], "ONNXRT": [[580, "onnxrt"], [594, "onnxrt"], [628, "onnxrt"]], "Get start with Dataset API": [[580, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[580, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[580, "user-specific-dataset"]], "Design": [[581, "design"], [629, "design"], [629, "id1"], [629, "id3"], [629, "id5"], [629, "id7"], [629, "id9"], [629, "id11"], [629, "id13"], [629, "id15"], [629, "id17"]], "Architecture": [[581, "architecture"], [591, "architecture"]], "Workflow": [[581, "workflow"]], "Knowledge Distillation": [[582, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[582, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[582, "self-distillation"]], "Distillation Support Matrix": [[582, "distillation-support-matrix"]], "Get Started with Distillation API": [[582, "get-started-with-distillation-api"]], "Distillation for Quantization": [[583, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[583, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[583, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[584, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[584, "supported-feature-matrix"], [588, "supported-feature-matrix"], [591, "supported-feature-matrix"], [622, "supported-feature-matrix"], [623, "supported-feature-matrix"], [627, "supported-feature-matrix"], [631, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[584, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[584, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[584, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[584, "horovodrun-execution"]], "PyTorch Examples:": [[584, "pytorch-examples"]], "TensorFlow Examples:": [[584, "tensorflow-examples"]], "Example List": [[585, "example-list"]], "Release Data": [[585, "release-data"]], "Export": [[586, "export"]], "Supported Framework Model Matrix": [[586, "supported-framework-model-matrix"], [596, "supported-framework-model-matrix"]], "FP32 Model Export": [[586, "fp32-model-export"]], "INT8 Model Export": [[586, "int8-model-export"]], "Appendix": [[586, "appendix"]], "Frequently Asked Questions": [[587, "frequently-asked-questions"]], "Common Build Issues": [[587, "common-build-issues"]], "Issue 1:": [[587, "issue-1"]], "Issue 2:": [[587, "issue-2"]], "Issue 3:": [[587, "issue-3"]], "Framework YAML Configuration Files": [[588, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[588, "get-started-with-framework-yaml-files"]], "Quick Samples": [[589, "quick-samples"]], "Quantization with JupyterLab Extension": [[589, "quantization-with-jupyterlab-extension"]], "Quantization with GUI": [[589, "quantization-with-gui"]], "Validated Models": [[589, "validated-models"], [632, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[590, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[590, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[590, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[591, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[592, "linux-installation"]], "Prerequisites": [[592, "prerequisites"], [592, "id1"]], "Install from Binary": [[592, "install-from-binary"], [592, "id2"]], "Install from Source": [[592, "install-from-source"], [592, "id3"]], "Install from AI Kit": [[592, "install-from-ai-kit"]], "Windows Installation": [[592, "windows-installation"]], "System Requirements": [[592, "system-requirements"]], "Validated Hardware Environment": [[592, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[592, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[592, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[592, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[592, "validated-software-environment"]], "Legal Information": [[593, "legal-information"]], "License": [[593, "license"]], "Citation": [[593, "citation"]], "Trademarks": [[593, "trademarks"]], "Metrics": [[594, "metrics"]], "Supported Built-in Metric Matrix": [[594, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[594, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[594, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[594, "build-custom-metric-with-python-api"]], "Mixed Precision": [[595, "mixed-precision"]], "Mixed Precision Support Matrix": [[595, "mixed-precision-support-matrix"]], "Get Started with Mixed Precision API": [[595, "get-started-with-mixed-precision-api"]], "Neural Coder": [[597, "neural-coder"], [614, "neural-coder"], [614, "id1"]], "What do we offer?": [[597, "what-do-we-offer"]], "Getting Started!": [[597, "getting-started"], [608, "getting-started"]], "Jupyter Lab Extension": [[597, "jupyter-lab-extension"]], "Python Launcher": [[597, "python-launcher"], [602, "python-launcher"]], "Python API": [[597, "python-api"]], "Contact": [[597, "contact"]], "AWS Amazon SageMaker Support": [[598, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[598, "start-jupyter-lab-3"]], "For SageMaker Studio": [[598, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[598, "for-sagemaker-notebook-instance"]], "Installation Guide": [[598, "installation-guide"]], "BigDL Nano Support": [[599, "bigdl-nano-support"]], "Example": [[599, "example"], [603, "example"], [616, "example"]], "Support Matrix": [[599, "support-matrix"]], "Intel CPU Platforms: Best Performance Setting": [[600, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[600, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[600, "install-numa-controller"]], "Environment Variables": [[600, "environment-variables"]], "Frequency Governers": [[600, "frequency-governers"]], "Neural Coder as Python API": [[601, "neural-coder-as-python-api"]], "Enable": [[601, "enable"]], "Bench": [[601, "bench"]], "SuperBench": [[601, "superbench"]], "Quick-Start": [[602, "quick-start"]], "Launcher Arguments (Optional)": [[602, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[603, "neural-coder-for-quantization"]], "Features Supported": [[603, "features-supported"]], "Models Supported": [[603, "models-supported"]], "Usage": [[603, "usage"], [627, "usage"], [627, "id1"], [629, "usage"], [629, "id2"], [629, "id4"], [629, "id6"], [629, "id8"], [629, "id10"], [629, "id12"], [629, "id14"], [629, "id16"], [629, "id18"]], "PyPI distribution:": [[603, "pypi-distribution"]], "Supported Optimization Features": [[604, "supported-optimization-features"]], "v0.4": [[605, "v0-4"]], "Highlights": [[605, "highlights"]], "Others": [[605, "others"]], "Changelog": [[606, "changelog"], [610, "changelog"]], "neural_compressor_ext_lab": [[607, "neural-compressor-ext-lab"]], "Requirements": [[607, "requirements"], [611, "requirements"]], "Install": [[607, "install"], [611, "install"]], "Uninstall": [[607, "uninstall"], [611, "uninstall"]], "Contributing": [[607, "contributing"], [611, "contributing"]], "Development install": [[607, "development-install"], [611, "development-install"]], "Development uninstall": [[607, "development-uninstall"], [611, "development-uninstall"]], "Packaging the extension": [[607, "packaging-the-extension"], [611, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[608, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[608, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[608, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[608, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[609, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[609, "manual-release"], [612, "manual-release"]], "Python package": [[609, "python-package"], [612, "python-package"]], "NPM package": [[609, "npm-package"], [612, "npm-package"]], "Automated releases with the Jupyter Releaser": [[609, "automated-releases-with-the-jupyter-releaser"], [612, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[609, "publishing-to-conda-forge"], [612, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[611, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[612, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[613, "change-log"]], "[Unreleased]": [[613, "unreleased"]], "Background Introduction": [[614, "background-introduction"]], "Neural Coder Extension in VSCode": [[614, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[614, "neural-coder-extension-usage"]], "1. Open": [[614, "open"]], "2. Search": [[614, "search"]], "3. Setting": [[614, "setting"]], "4. Icon": [[614, "icon"]], "5. optimization (quantization)": [[614, "optimization-quantization"]], "5.1 Enable": [[614, "enable"]], "5.2 Auto": [[614, "auto"]], "Welcome to your VS Code Extension": [[615, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[615, "what-s-in-the-folder"]], "Setup": [[615, "setup"]], "Get up and running straight away": [[615, "get-up-and-running-straight-away"]], "Make changes": [[615, "make-changes"]], "Explore the API": [[615, "explore-the-api"]], "Run tests": [[615, "run-tests"]], "Go further": [[615, "go-further"]], "Single Objective": [[616, "single-objective"]], "Multiple Objectives": [[616, "multiple-objectives"]], "Objective Support Matrix": [[616, "objective-support-matrix"]], "Get Started with Objective API": [[616, "get-started-with-objective-api"]], "Config Single Objective": [[616, "config-single-objective"]], "Config Multiple Objectives": [[616, "config-multiple-objectives"]], "Optimization Orchestration": [[617, "optimization-orchestration"]], "One-shot": [[617, "one-shot"]], "Orchestration Support Matrix": [[617, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[617, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[618, "system-configuration"]], "Neural Network Pruning": [[619, "neural-network-pruning"], [620, "neural-network-pruning"]], "Pruning Patterns": [[619, "pruning-patterns"], [620, "pruning-patterns"]], "Pruning Criteria": [[619, "pruning-criteria"], [620, "pruning-criteria"]], "Pruning Schedule": [[619, "pruning-schedule"], [620, "pruning-schedule"]], "Pruning Support Matrix": [[619, "pruning-support-matrix"]], "Get Started with Pruning API": [[619, "get-started-with-pruning-api"]], "Pruning details": [[620, "pruning-details"]], "Pruning Type": [[620, "pruning-type"]], "Pruning Scope": [[620, "pruning-scope"]], "Sparsity Decay Type": [[620, "sparsity-decay-type"]], "Regularization": [[620, "regularization"]], "Pruning Examples": [[620, "pruning-examples"]], "Reference": [[620, "reference"], [623, "reference"]], "Full Publications/Events (56)": [[621, "full-publications-events-56"]], "2023 (3)": [[621, "id1"]], "2022 (34)": [[621, "id2"]], "2021 (15)": [[621, "id3"]], "2018 - 2020 (4)": [[621, "id4"]], "Pythonic Style Access for Configurations": [[622, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[622, "pythonic-api-for-user-configurations"], [622, "id1"]], "Pythonic API for Framework Configurations": [[622, "pythonic-api-for-framework-configurations"], [622, "id2"]], "Get Started with Pythonic API for Configurations": [[622, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[622, "nas"]], "Quantization Introduction": [[623, "quantization-introduction"]], "Quantization Fundamentals": [[623, "quantization-fundamentals"]], "Quantization Support Matrix": [[623, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[623, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[623, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[623, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[623, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[623, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[623, "quantization-approaches"]], "Quantization Aware Training": [[623, "quantization-aware-training"]], "Accuracy Aware Tuning": [[623, "accuracy-aware-tuning"]], "Get Started": [[623, "get-started"]], "Turn OFF Auto Mixed Precision during Quantization": [[624, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[624, "tensorflow"]], "Release": [[625, "release"]], "Release Notes": [[625, "release-notes"]], "Known Issues": [[625, "known-issues"]], "Incompatible Changes": [[625, "incompatible-changes"]], "SigOpt Strategy": [[626, "sigopt-strategy"]], "Preparation": [[626, "preparation"]], "SigOpt Platform": [[626, "sigopt-platform"]], "Neural Compressor Configuration": [[626, "neural-compressor-configuration"]], "Performance": [[626, "performance"]], "Benefit of SigOpt Strategy": [[626, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[626, "performance-comparison-of-different-strategies"]], "TensorBoard": [[627, "tensorboard"]], "Get Started with TensorBoard": [[627, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[627, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[627, "tensorflow-tensorboard"]], "PyTorch Examples": [[627, "pytorch-examples"]], "TensorFlow Examples": [[627, "tensorflow-examples"]], "Transform": [[628, "transform"]], "Transform Support List": [[628, "transform-support-list"]], "Pytorch": [[628, "pytorch"]], "Tuning Strategies": [[629, "tuning-strategies"]], "Strategy Design": [[629, "strategy-design"]], "Tuning Space": [[629, "tuning-space"]], "Exit Policy": [[629, "exit-policy"]], "Accuracy Criteria": [[629, "accuracy-criteria"]], "Tuning Process": [[629, "tuning-process"]], "Tuning Algorithms": [[629, "tuning-algorithms"]], "Conservative Tuning": [[629, "conservative-tuning"]], "Basic": [[629, "basic"]], "MSE": [[629, "mse"]], "MSE_V2": [[629, "mse-v2"]], "HAWQ_V2": [[629, "hawq-v2"]], "Bayesian": [[629, "bayesian"]], "Exhaustive": [[629, "exhaustive"]], "Random": [[629, "random"]], "SigOpt": [[629, "sigopt"]], "TPE": [[629, "tpe"]], "Customize a New Tuning Strategy": [[629, "customize-a-new-tuning-strategy"]], "User Guide": [[630, "user-guide"]], "User YAML Configuration Files": [[631, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[631, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[632, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.11.0": [[632, "tensorflow-models-with-intel-tensorflow-2-11-0"]], "PyTorch Models with Torch 1.13.0+cpu in PTQ Mode": [[632, "pytorch-models-with-torch-1-13-0-cpu-in-ptq-mode"]], "PyTorch Models with Torch 1.13.0+cpu in QAT Mode": [[632, "pytorch-models-with-torch-1-13-0-cpu-in-qat-mode"]], "PyTorch Models with Torch and Intel\u00ae Extension for PyTorch* 1.13.0+cpu": [[632, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-13-0-cpu"]], "ONNX Models with ONNX Runtime 1.13.1": [[632, "onnx-models-with-onnx-runtime-1-13-1"]], "MXNet Models with MXNet 1.9.1": [[632, "mxnet-models-with-mxnet-1-9-1"]], "Validated Pruning Examples": [[632, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[632, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[632, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"644ec953a7dc_pruning_support": [[0, "module-644ec953a7dc_pruning_support"]], "module": [[0, "module-644ec953a7dc_pruning_support"], [1, "module-6ece06672ed3_v1_14"], [2, "module-6f0d0f71d92e_v1_13"], [3, "module-9e89549a08c8_v1_11"], [4, "module-block_mask"], [5, "module-env"], [6, "module-neural_compressor.adaptor.adaptor"], [7, "module-neural_compressor.adaptor"], [8, "module-neural_compressor.adaptor.keras"], [9, "module-neural_compressor.adaptor.keras_utils.conv2d"], [10, "module-neural_compressor.adaptor.keras_utils.dense"], [11, "module-neural_compressor.adaptor.keras_utils"], [12, "module-neural_compressor.adaptor.keras_utils.quantizer"], [13, "module-neural_compressor.adaptor.mxnet"], [14, "module-neural_compressor.adaptor.mxnet_utils"], [15, "module-neural_compressor.adaptor.mxnet_utils.util"], [16, "module-neural_compressor.adaptor.onnxrt"], [17, "module-neural_compressor.adaptor.ox_utils.calibration"], [18, "module-neural_compressor.adaptor.ox_utils"], [19, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [20, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [21, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [22, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [23, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [24, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [25, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [26, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [29, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [30, "module-neural_compressor.adaptor.ox_utils.operators"], [31, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [32, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [33, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [34, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [37, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [38, "module-neural_compressor.adaptor.ox_utils.operators.split"], [39, "module-neural_compressor.adaptor.ox_utils.quantizer"], [40, "module-neural_compressor.adaptor.ox_utils.util"], [41, "module-neural_compressor.adaptor.pytorch"], [42, "module-neural_compressor.adaptor.query"], [43, "module-neural_compressor.adaptor.tensorflow"], [44, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [45, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [106, "module-neural_compressor.adaptor.tf_utils.graph_util"], [107, "module-neural_compressor.adaptor.tf_utils"], [108, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [136, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [137, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [138, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [139, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [140, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [141, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [142, "module-neural_compressor.adaptor.tf_utils.util"], [143, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [144, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [145, "module-neural_compressor.adaptor.torch_utils"], [146, "module-neural_compressor.adaptor.torch_utils.onnx"], [147, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [148, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [149, "module-neural_compressor.adaptor.torch_utils.util"], [150, "module-neural_compressor.algorithm.algorithm"], [151, "module-neural_compressor.algorithm.fast_bias_correction"], [152, "module-neural_compressor.algorithm"], [153, "module-neural_compressor.algorithm.smooth_quant"], [154, "module-neural_compressor.algorithm.weight_correction"], [155, "module-neural_compressor.benchmark"], [156, "module-neural_compressor.compression.callbacks"], [157, "module-neural_compressor.compression.distillation.criterions"], [158, "module-neural_compressor.compression.distillation"], [159, "module-neural_compressor.compression"], [160, "module-neural_compressor.compression.pruner.criteria"], [161, "module-neural_compressor.compression.pruner"], [162, "module-neural_compressor.compression.pruner.patterns"], [163, "module-neural_compressor.compression.pruner.pruners"], [164, "module-neural_compressor.compression.pruner.regs"], [165, "module-neural_compressor.compression.pruner.schedulers"], [166, "module-neural_compressor.compression.pruner.utils"], [167, "module-neural_compressor.conf.config"], [168, "module-neural_compressor.conf.dotdict"], [169, "module-neural_compressor.conf"], [170, "module-neural_compressor.conf.pythonic_config"], [171, "module-neural_compressor.config"], [172, "module-neural_compressor.contrib"], [173, "module-neural_compressor.contrib.strategy"], [174, "module-neural_compressor.contrib.strategy.sigopt"], [175, "module-neural_compressor.contrib.strategy.tpe"], [176, "module-neural_compressor.data.dataloaders.base_dataloader"], [177, "module-neural_compressor.data.dataloaders.dataloader"], [178, "module-neural_compressor.data.dataloaders.default_dataloader"], [179, "module-neural_compressor.data.dataloaders.fetcher"], [180, "module-neural_compressor.data.dataloaders"], [181, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [182, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [183, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [184, "module-neural_compressor.data.dataloaders.sampler"], [185, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [186, "module-neural_compressor.data.datasets.bert_dataset"], [187, "module-neural_compressor.data.datasets.coco_dataset"], [188, "module-neural_compressor.data.datasets.dataset"], [189, "module-neural_compressor.data.datasets.dummy_dataset"], [190, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [191, "module-neural_compressor.data.datasets.imagenet_dataset"], [192, "module-neural_compressor.data.datasets"], [193, "module-neural_compressor.data.datasets.style_transfer_dataset"], [194, "module-neural_compressor.data.filters.coco_filter"], [195, "module-neural_compressor.data.filters.filter"], [196, "module-neural_compressor.data.filters"], [197, "module-neural_compressor.data"], [198, "module-neural_compressor.data.transforms.coco_transform"], [199, "module-neural_compressor.data.transforms.imagenet_transform"], [200, "module-neural_compressor.data.transforms"], [201, "module-neural_compressor.data.transforms.postprocess"], [202, "module-neural_compressor.data.transforms.tokenization"], [203, "module-neural_compressor.data.transforms.transform"], [204, "module-neural_compressor.experimental.benchmark"], [205, "module-neural_compressor.experimental.common.criterion"], [206, "module-neural_compressor.experimental.common.dataloader"], [207, "module-neural_compressor.experimental.common"], [208, "module-neural_compressor.experimental.common.metric"], [209, "module-neural_compressor.experimental.common.model"], [210, "module-neural_compressor.experimental.common.optimizer"], [211, "module-neural_compressor.experimental.common.postprocess"], [212, "module-neural_compressor.experimental.common.torch_utils"], [213, "module-neural_compressor.experimental.component"], [214, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [215, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [216, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [217, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [218, "module-neural_compressor.experimental.data.dataloaders"], [219, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [220, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [221, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [222, "module-neural_compressor.experimental.data.dataloaders.sampler"], [223, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [224, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [225, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [226, "module-neural_compressor.experimental.data.datasets.dataset"], [227, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [228, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [229, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [230, "module-neural_compressor.experimental.data.datasets"], [231, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [232, "module-neural_compressor.experimental.data.filters.coco_filter"], [233, "module-neural_compressor.experimental.data.filters.filter"], [234, "module-neural_compressor.experimental.data.filters"], [235, "module-neural_compressor.experimental.data"], [236, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [237, "module-neural_compressor.experimental.data.transforms"], [238, "module-neural_compressor.experimental.data.transforms.tokenization"], [239, "module-neural_compressor.experimental.data.transforms.transform"], [240, "module-neural_compressor.experimental.distillation"], [241, "module-neural_compressor.experimental.export"], [242, "module-neural_compressor.experimental.export.qlinear2qdq"], [243, "module-neural_compressor.experimental.export.tf2onnx"], [244, "module-neural_compressor.experimental.export.torch2onnx"], [245, "module-neural_compressor.experimental.export.utils"], [246, "module-neural_compressor.experimental.graph_optimization"], [247, "module-neural_compressor.experimental"], [248, "module-neural_compressor.experimental.metric.bleu"], [249, "module-neural_compressor.experimental.metric.bleu_util"], [250, "module-neural_compressor.experimental.metric.coco_label_map"], [251, "module-neural_compressor.experimental.metric.coco_tools"], [252, "module-neural_compressor.experimental.metric.evaluate_squad"], [253, "module-neural_compressor.experimental.metric.f1"], [254, "module-neural_compressor.experimental.metric"], [255, "module-neural_compressor.experimental.metric.metric"], [256, "module-neural_compressor.experimental.mixed_precision"], [257, "module-neural_compressor.experimental.model_conversion"], [258, "module-neural_compressor.experimental.nas.basic_nas"], [259, "module-neural_compressor.experimental.nas.dynas"], [260, "module-neural_compressor.experimental.nas.dynast.dynas_manager"], [261, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"], [262, "module-neural_compressor.experimental.nas.dynast.dynas_search"], [263, "module-neural_compressor.experimental.nas.dynast.dynas_utils"], [264, "module-neural_compressor.experimental.nas.dynast"], [265, "module-neural_compressor.experimental.nas.dynast.supernetwork"], [266, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"], [267, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"], [268, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"], [269, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"], [270, "module-neural_compressor.experimental.nas"], [271, "module-neural_compressor.experimental.nas.nas"], [272, "module-neural_compressor.experimental.nas.nas_utils"], [273, "module-neural_compressor.experimental.nas.search_algorithms"], [274, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [275, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [276, "module-neural_compressor.experimental.pruner_legacy"], [277, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [278, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [279, "module-neural_compressor.experimental.pruner_legacy.pruner"], [280, "module-neural_compressor.experimental.pruning"], [281, "module-neural_compressor.experimental.pruning_recipes"], [282, "module-neural_compressor.experimental.pruning_recipes.patterns"], [283, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [284, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [285, "module-neural_compressor.experimental.pruning_v2"], [286, "module-neural_compressor.experimental.pytorch_pruner"], [287, "module-neural_compressor.experimental.pytorch_pruner.logger"], [288, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [289, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [290, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [291, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [292, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [293, "module-neural_compressor.experimental.quantization"], [294, "module-neural_compressor.experimental.scheduler"], [295, "module-neural_compressor"], [296, "module-neural_compressor.metric.bleu"], [297, "module-neural_compressor.metric.bleu_util"], [298, "module-neural_compressor.metric.coco_label_map"], [299, "module-neural_compressor.metric.coco_tools"], [300, "module-neural_compressor.metric.evaluate_squad"], [301, "module-neural_compressor.metric.f1"], [302, "module-neural_compressor.metric"], [303, "module-neural_compressor.metric.metric"], [304, "module-neural_compressor.mix_precision"], [305, "module-neural_compressor.model.base_model"], [306, "module-neural_compressor.model"], [307, "module-neural_compressor.model.keras_model"], [308, "module-neural_compressor.model.model"], [309, "module-neural_compressor.model.mxnet_model"], [310, "module-neural_compressor.model.nets_factory"], [311, "module-neural_compressor.model.onnx_model"], [312, "module-neural_compressor.model.tensorflow_model"], [313, "module-neural_compressor.model.torch_model"], [314, "module-neural_compressor.objective"], [315, "module-neural_compressor.quantization"], [316, "module-neural_compressor.strategy.auto"], [317, "module-neural_compressor.strategy.auto_mixed_precision"], [318, "module-neural_compressor.strategy.basic"], [319, "module-neural_compressor.strategy.bayesian"], [320, "module-neural_compressor.strategy.conservative"], [321, "module-neural_compressor.strategy.exhaustive"], [322, "module-neural_compressor.strategy.hawq_v2"], [323, "module-neural_compressor.strategy"], [324, "module-neural_compressor.strategy.mse"], [325, "module-neural_compressor.strategy.mse_v2"], [326, "module-neural_compressor.strategy.random"], [327, "module-neural_compressor.strategy.strategy"], [328, "module-neural_compressor.strategy.utils.constant"], [329, "module-neural_compressor.strategy.utils"], [330, "module-neural_compressor.strategy.utils.tuning_sampler"], [331, "module-neural_compressor.strategy.utils.tuning_space"], [332, "module-neural_compressor.strategy.utils.tuning_structs"], [333, "module-neural_compressor.strategy.utils.utility"], [334, "module-neural_compressor.training"], [335, "module-neural_compressor.utils.collect_layer_histogram"], [336, "module-neural_compressor.utils.constant"], [337, "module-neural_compressor.utils.create_obj_from_config"], [338, "module-neural_compressor.utils"], [339, "module-neural_compressor.utils.kl_divergence"], [340, "module-neural_compressor.utils.load_huggingface"], [341, "module-neural_compressor.utils.logger"], [342, "module-neural_compressor.utils.options"], [343, "module-neural_compressor.utils.pytorch"], [344, "module-neural_compressor.utils.utility"], [345, "module-neural_compressor.ux.components.benchmark.benchmark"], [346, "module-neural_compressor.ux.components.benchmark.benchmark_model"], [347, "module-neural_compressor.ux.components.benchmark.execute_benchmark"], [348, "module-neural_compressor.ux.components.benchmark"], [349, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"], [350, "module-neural_compressor.ux.components.config_generator.config_generator"], [351, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"], [352, "module-neural_compressor.ux.components.config_generator"], [353, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"], [354, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"], [355, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"], [356, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"], [357, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"], [358, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"], [359, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"], [360, "module-neural_compressor.ux.components.configuration_wizard"], [361, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"], [362, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"], [363, "module-neural_compressor.ux.components.db_manager.db_manager"], [364, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"], [365, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"], [366, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"], [367, "module-neural_compressor.ux.components.db_manager.db_models.dataset"], [368, "module-neural_compressor.ux.components.db_manager.db_models.domain"], [369, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"], [370, "module-neural_compressor.ux.components.db_manager.db_models.example"], [371, "module-neural_compressor.ux.components.db_manager.db_models.framework"], [372, "module-neural_compressor.ux.components.db_manager.db_models"], [373, "module-neural_compressor.ux.components.db_manager.db_models.metric"], [374, "module-neural_compressor.ux.components.db_manager.db_models.model"], [375, "module-neural_compressor.ux.components.db_manager.db_models.optimization"], [376, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"], [377, "module-neural_compressor.ux.components.db_manager.db_models.precision"], [378, "module-neural_compressor.ux.components.db_manager.db_models.profiling"], [379, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"], [380, "module-neural_compressor.ux.components.db_manager.db_models.project"], [381, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"], [382, "module-neural_compressor.ux.components.db_manager.db_models.transform"], [383, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"], [384, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"], [385, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"], [386, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"], [387, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"], [388, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"], [389, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"], [390, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"], [391, "module-neural_compressor.ux.components.db_manager.db_operations"], [392, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"], [393, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"], [394, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"], [395, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"], [396, "module-neural_compressor.ux.components.db_manager"], [397, "module-neural_compressor.ux.components.db_manager.params_interfaces"], [398, "module-neural_compressor.ux.components.db_manager.utils"], [399, "module-neural_compressor.ux.components.diagnosis.diagnosis"], [400, "module-neural_compressor.ux.components.diagnosis.factory"], [401, "module-neural_compressor.ux.components.diagnosis"], [402, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"], [403, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"], [404, "module-neural_compressor.ux.components.diagnosis.op_details"], [405, "module-neural_compressor.ux.components.diagnosis.op_entry"], [406, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"], [407, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"], [408, "module-neural_compressor.ux.components.file_browser.file_browser"], [409, "module-neural_compressor.ux.components.file_browser"], [410, "module-neural_compressor.ux.components.graph.attribute"], [411, "module-neural_compressor.ux.components.graph.collapser"], [412, "module-neural_compressor.ux.components.graph.edge"], [413, "module-neural_compressor.ux.components.graph.graph"], [414, "module-neural_compressor.ux.components.graph.graph_reader"], [415, "module-neural_compressor.ux.components.graph"], [416, "module-neural_compressor.ux.components.graph.node"], [417, "module-neural_compressor.ux.components.graph.reader"], [418, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"], [419, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"], [420, "module-neural_compressor.ux.components"], [421, "module-neural_compressor.ux.components.jobs_management"], [422, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"], [423, "module-neural_compressor.ux.components.jobs_management.jobs_manager"], [424, "module-neural_compressor.ux.components.jobs_management.request"], [425, "module-neural_compressor.ux.components.manage_workspace"], [426, "module-neural_compressor.ux.components.model.domain"], [427, "module-neural_compressor.ux.components.model"], [428, "module-neural_compressor.ux.components.model.model"], [429, "module-neural_compressor.ux.components.model.model_type_getter"], [430, "module-neural_compressor.ux.components.model.onnxrt"], [431, "module-neural_compressor.ux.components.model.onnxrt.model"], [432, "module-neural_compressor.ux.components.model.pytorch"], [433, "module-neural_compressor.ux.components.model.pytorch.model"], [434, "module-neural_compressor.ux.components.model.repository"], [435, "module-neural_compressor.ux.components.model.shape"], [436, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"], [437, "module-neural_compressor.ux.components.model.tensorflow"], [438, "module-neural_compressor.ux.components.model.tensorflow.keras"], [439, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"], [440, "module-neural_compressor.ux.components.model.tensorflow.model"], [441, "module-neural_compressor.ux.components.model.tensorflow.saved_model"], [442, "module-neural_compressor.ux.components.model.tensorflow.utils"], [443, "module-neural_compressor.ux.components.model_zoo.download_config"], [444, "module-neural_compressor.ux.components.model_zoo.download_model"], [445, "module-neural_compressor.ux.components.model_zoo.downloader"], [446, "module-neural_compressor.ux.components.model_zoo"], [447, "module-neural_compressor.ux.components.model_zoo.list_models"], [448, "module-neural_compressor.ux.components.names_mapper"], [449, "module-neural_compressor.ux.components.names_mapper.names_mapper"], [450, "module-neural_compressor.ux.components.optimization.execute_optimization"], [451, "module-neural_compressor.ux.components.optimization.factory"], [452, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"], [453, "module-neural_compressor.ux.components.optimization.graph_optimizer"], [454, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"], [455, "module-neural_compressor.ux.components.optimization"], [456, "module-neural_compressor.ux.components.optimization.mixed_precision"], [457, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"], [458, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"], [459, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"], [460, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"], [461, "module-neural_compressor.ux.components.optimization.optimization"], [462, "module-neural_compressor.ux.components.optimization.pruning"], [463, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"], [464, "module-neural_compressor.ux.components.optimization.pruning.pruning"], [465, "module-neural_compressor.ux.components.optimization.tune"], [466, "module-neural_compressor.ux.components.optimization.tune.tune_model"], [467, "module-neural_compressor.ux.components.optimization.tune.tuning"], [468, "module-neural_compressor.ux.components.optimization.tuning_history"], [469, "module-neural_compressor.ux.components.profiling.execute_profiling"], [470, "module-neural_compressor.ux.components.profiling.factory"], [471, "module-neural_compressor.ux.components.profiling"], [472, "module-neural_compressor.ux.components.profiling.profile_model"], [473, "module-neural_compressor.ux.components.profiling.profiler"], [474, "module-neural_compressor.ux.components.profiling.profiling"], [475, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"], [476, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"], [477, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"], [478, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"], [479, "module-neural_compressor.ux.inc_bench"], [480, "module-neural_compressor.ux"], [481, "module-neural_compressor.ux.utils.consts"], [482, "module-neural_compressor.ux.utils.environment"], [483, "module-neural_compressor.ux.utils.exceptions"], [484, "module-neural_compressor.ux.utils.executor"], [485, "module-neural_compressor.ux.utils.expiring_dict"], [486, "module-neural_compressor.ux.utils.github_info"], [487, "module-neural_compressor.ux.utils.hw_info"], [488, "module-neural_compressor.ux.utils"], [489, "module-neural_compressor.ux.utils.json_serializer"], [490, "module-neural_compressor.ux.utils.logger"], [491, "module-neural_compressor.ux.utils.parser"], [492, "module-neural_compressor.ux.utils.proc"], [493, "module-neural_compressor.ux.utils.processes"], [494, "module-neural_compressor.ux.utils.singleton"], [495, "module-neural_compressor.ux.utils.status_updates"], [496, "module-neural_compressor.ux.utils.templates"], [497, "module-neural_compressor.ux.utils.templates.metric"], [498, "module-neural_compressor.ux.utils.templates.workdir"], [499, "module-neural_compressor.ux.utils.utils"], [500, "module-neural_compressor.ux.utils.workload.config"], [501, "module-neural_compressor.ux.utils.workload.dataloader"], [502, "module-neural_compressor.ux.utils.workload.evaluation"], [503, "module-neural_compressor.ux.utils.workload.graph_optimization"], [504, "module-neural_compressor.ux.utils.workload"], [505, "module-neural_compressor.ux.utils.workload.mixed_precision"], [506, "module-neural_compressor.ux.utils.workload.model"], [507, "module-neural_compressor.ux.utils.workload.pruning"], [508, "module-neural_compressor.ux.utils.workload.quantization"], [509, "module-neural_compressor.ux.utils.workload.tuning"], [510, "module-neural_compressor.ux.utils.yaml_utils"], [511, "module-neural_compressor.ux.web.communication"], [512, "module-neural_compressor.ux.web.configuration"], [513, "module-neural_compressor.ux.web.exceptions"], [514, "module-neural_compressor.ux.web"], [515, "module-neural_compressor.ux.web.router"], [516, "module-neural_compressor.ux.web.server"], [517, "module-neural_compressor.ux.web.service.benchmark"], [518, "module-neural_compressor.ux.web.service.history_snapshot_parser"], [519, "module-neural_compressor.ux.web.service"], [520, "module-neural_compressor.ux.web.service.model"], [521, "module-neural_compressor.ux.web.service.optimization"], [522, "module-neural_compressor.ux.web.service.profiling"], [523, "module-neural_compressor.ux.web.service.request_data_processor"], [524, "module-neural_compressor.ux.web.service.response_generator"], [525, "module-neural_compressor.ux.web.service.workload"], [526, "module-neural_compressor.version"], [554, "module-neural_compressor.experimental.metric.bleu"]], "6ece06672ed3_v1_14": [[1, "module-6ece06672ed3_v1_14"]], "update_dataloaders() (in module 6ece06672ed3_v1_14)": [[1, "ece06672ed3_v1_14.update_dataloaders"]], "update_transformations() (in module 6ece06672ed3_v1_14)": [[1, "ece06672ed3_v1_14.update_transformations"]], "6f0d0f71d92e_v1_13": [[2, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[3, "module-9e89549a08c8_v1_11"]], "block_mask": [[4, "module-block_mask"]], "env": [[5, "module-env"]], "run_migrations_offline() (in module env)": [[5, "env.run_migrations_offline"]], "run_migrations_online() (in module env)": [[5, "env.run_migrations_online"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[6, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[6, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "convert() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.convert"]], "evaluate() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.evaluate"]], "inspect_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.inspect_tensor"]], "neural_compressor.adaptor.adaptor": [[6, "module-neural_compressor.adaptor.adaptor"]], "quantize() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.quantize_input"]], "query_fused_patterns() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.query_fused_patterns"]], "query_fw_capability() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.save"]], "set_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.set_tensor"]], "neural_compressor.adaptor": [[7, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[8, "neural_compressor.adaptor.keras.KerasQuery"]], "convert() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.convert"]], "evaluate() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.evaluate"]], "get_op_types() (neural_compressor.adaptor.keras.kerasquery method)": [[8, "neural_compressor.adaptor.keras.KerasQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.keras.kerasquery method)": [[8, "neural_compressor.adaptor.keras.KerasQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.get_optype_wise_ability"]], "get_precisions() (neural_compressor.adaptor.keras.kerasquery method)": [[8, "neural_compressor.adaptor.keras.KerasQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.keras.kerasquery method)": [[8, "neural_compressor.adaptor.keras.KerasQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.keras.kerasquery method)": [[8, "neural_compressor.adaptor.keras.KerasQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.inspect_tensor"]], "neural_compressor.adaptor.keras": [[8, "module-neural_compressor.adaptor.keras"]], "quantize() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.set_tensor"]], "neural_compressor.adaptor.keras_utils.conv2d": [[9, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[10, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils": [[11, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[12, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[13, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "evaluate() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[13, "neural_compressor.adaptor.mxnet.MxNetAdaptor.evaluate"]], "inspect_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[13, "neural_compressor.adaptor.mxnet.MxNetAdaptor.inspect_tensor"]], "neural_compressor.adaptor.mxnet": [[13, "module-neural_compressor.adaptor.mxnet"]], "quantize() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[13, "neural_compressor.adaptor.mxnet.MxNetAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[13, "neural_compressor.adaptor.mxnet.MxNetAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[13, "neural_compressor.adaptor.mxnet.MxNetAdaptor.recover_tuned_model"]], "set_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[13, "neural_compressor.adaptor.mxnet.MxNetAdaptor.set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[14, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calc_kl_th_dict() (neural_compressor.adaptor.mxnet_utils.util.calibcollector method)": [[15, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector.calc_kl_th_dict"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.calibcollector method)": [[15, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[15, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.namecollector method)": [[15, "neural_compressor.adaptor.mxnet_utils.util.NameCollector.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.tensorcollector method)": [[15, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector.collect_gluon"]], "collect_module() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[15, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.collect_module"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "min_max_dict (neural_compressor.adaptor.mxnet_utils.util.calibdata property)": [[15, "neural_compressor.adaptor.mxnet_utils.util.CalibData.min_max_dict"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[15, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "post_batch() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[15, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.post_batch"]], "post_collect() (neural_compressor.adaptor.mxnet_utils.util.calibdata method)": [[15, "neural_compressor.adaptor.mxnet_utils.util.CalibData.post_collect"]], "pre_batch() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[15, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.pre_batch"]], "pre_batch() (neural_compressor.adaptor.mxnet_utils.util.tensorcollector method)": [[15, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector.pre_batch"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[16, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[16, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[16, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[16, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "evaluate() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[16, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.evaluate"]], "inspect_tensor() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[16, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.inspect_tensor"]], "neural_compressor.adaptor.onnxrt": [[16, "module-neural_compressor.adaptor.onnxrt"]], "quantize() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[16, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[16, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.query_fw_capability"]], "recover() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[16, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.recover"]], "save() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[16, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.save"]], "smooth_quant() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[16, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.smooth_quant"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[17, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "augment_graph() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[17, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.augment_graph"]], "calculate_quantization_params() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[17, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_quantization_params"]], "calculate_scale_zeropoint() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[17, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_scale_zeropoint"]], "calib_smooth() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[17, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calib_smooth"]], "dump_calibration() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[17, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_calibration"]], "dump_minmax() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[17, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_minmax"]], "dump_tensor() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[17, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_tensor"]], "get_intermediate_outputs() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[17, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.calibration": [[17, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[18, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[19, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[19, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[19, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[19, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.activation.qactivationoperator method)": [[19, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[19, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[19, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[19, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.quantize"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.activation.removableactivationoperator method)": [[19, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[19, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.quantize_check"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.activation.removableactivationoperator method)": [[19, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator.quantize_check"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[20, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[20, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.argmax.argmaxoperator method)": [[20, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.argmax.argmaxoperator method)": [[20, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[20, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[21, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[21, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.attention.qattentionoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[21, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.quantize"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[22, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[22, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[22, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.binary_op.qbinaryoperator method)": [[22, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[22, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[22, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[22, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[22, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.quantize_check"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[23, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[23, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.concat.qconcatoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[23, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.quantize_check"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[24, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[24, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[24, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.conv.qconvoperator method)": [[24, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[24, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[24, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[24, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.quantize"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[25, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[25, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[25, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[25, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[25, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[25, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[25, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[25, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.quantize_check"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[26, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[26, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[26, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.qembedlayernormalizationoperator method)": [[26, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[26, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[26, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[26, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.quantize"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[27, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[27, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[27, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[27, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[27, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[27, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.quantize_check"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[28, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[28, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gavgpool.globalaveragepooloperator method)": [[28, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gavgpool.qglobalaveragepooloperator method)": [[28, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gavgpool.globalaveragepooloperator method)": [[28, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[29, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[29, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[29, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gemm.qgemmoperator method)": [[29, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[29, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[29, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[29, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[29, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.quantize_check"]], "neural_compressor.adaptor.ox_utils.operators": [[30, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[31, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[31, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[31, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[31, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[31, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.quantize"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[32, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[32, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.matmul.qmatmuloperator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[32, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.quantize"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[33, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[33, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[33, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[33, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[33, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[33, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[33, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.quantize_check"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.ops.qoperator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.quantize_check"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.quantize_check"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pooling.qpooloperator method)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.quantize_check"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[37, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[37, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[37, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[37, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[37, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[37, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[37, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.quantize_check"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[38, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[38, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[38, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.split.qsplitoperator method)": [[38, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[38, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[38, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.split": [[38, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[38, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.quantize"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "check_opset_version() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.check_opset_version"]], "convert_qdq_to_operator_oriented() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.convert_qdq_to_operator_oriented"]], "dequantize_tensor() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.dequantize_tensor"]], "dtype_cast() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.dtype_cast"]], "get_bias_add_nodes() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.get_bias_add_nodes"]], "insert_qdq() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.insert_qdq"]], "is_valid_quantize_weight() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.is_valid_quantize_weight"]], "merge_dedicated_qdq_pair() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.merge_dedicated_qdq_pair"]], "neural_compressor.adaptor.ox_utils.quantizer": [[39, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "quantize_bias() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_bias"]], "quantize_bias_tensor() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_bias_tensor"]], "quantize_inputs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_inputs"]], "quantize_model() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_model"]], "quantize_outputs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_outputs"]], "quantize_weight_per_channel() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_weight_per_channel"]], "quantize_weights_per_channel() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_weights_per_channel"]], "remove_redundant_pairs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.remove_redundant_pairs"]], "should_cast() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_cast"]], "should_convert() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_convert"]], "should_quantize() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_quantize"]], "tensor_proto_to_array() (neural_compressor.adaptor.ox_utils.quantizer.quantizer static method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.tensor_proto_to_array"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "adjust_weights_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_input"]], "adjust_weights_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_op"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "get_smooth_scales_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_input"]], "get_smooth_scales_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_op"]], "insert_smooth_mul_op_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_input"]], "insert_smooth_mul_op_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_op"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[40, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[41, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[41, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[41, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "calculate_hessian_trace() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[41, "neural_compressor.adaptor.pytorch.TemplateAdaptor.calculate_hessian_trace"]], "calculate_op_sensitivity() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.calculate_op_sensitivity"]], "convert_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.convert_sub_graph"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.evaluate"]], "fuse_fx_model() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.fuse_fx_model"]], "get_non_quant_modules() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.get_non_quant_modules"]], "get_op_types() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[41, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[41, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types_by_precision"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[41, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "get_quantization_capability() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[41, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_quantization_capability"]], "is_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_child"]], "is_fused_module() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[41, "neural_compressor.adaptor.pytorch.TemplateAdaptor.is_fused_module"]], "is_fused_op() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_op"]], "is_last_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_last_fused_child"]], "neural_compressor.adaptor.pytorch": [[41, "module-neural_compressor.adaptor.pytorch"]], "prepare_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.prepare_sub_graph"]], "quantize() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.save"]], "smooth_quant() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[41, "neural_compressor.adaptor.pytorch.TemplateAdaptor.smooth_quant"]], "train() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.train"]], "train() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.train"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[42, "neural_compressor.adaptor.query.QueryBackendCapability"]], "get_fuse_patterns() (neural_compressor.adaptor.query.querybackendcapability method)": [[42, "neural_compressor.adaptor.query.QueryBackendCapability.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.query.querybackendcapability method)": [[42, "neural_compressor.adaptor.query.QueryBackendCapability.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.query.querybackendcapability method)": [[42, "neural_compressor.adaptor.query.QueryBackendCapability.get_op_types"]], "get_precisions() (neural_compressor.adaptor.query.querybackendcapability method)": [[42, "neural_compressor.adaptor.query.QueryBackendCapability.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.query.querybackendcapability method)": [[42, "neural_compressor.adaptor.query.QueryBackendCapability.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.query.querybackendcapability method)": [[42, "neural_compressor.adaptor.query.QueryBackendCapability.get_version"]], "neural_compressor.adaptor.query": [[42, "module-neural_compressor.adaptor.query"]], "set_quantization_config() (neural_compressor.adaptor.query.querybackendcapability method)": [[42, "neural_compressor.adaptor.query.QueryBackendCapability.set_quantization_config"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[43, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[43, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "calculate_op_sensitivity() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.calculate_op_sensitivity"]], "convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.convert"]], "diagnosis_helper() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.diagnosis_helper"]], "evaluate() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.evaluate"]], "fused_node_mapping() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.fused_node_mapping"]], "generate_internal_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[43, "neural_compressor.adaptor.tensorflow.TensorflowQuery.generate_internal_patterns"]], "get_bf16_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[43, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_bf16_patterns"]], "get_eightbit_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[43, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_eightbit_patterns"]], "get_fuse_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[43, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[43, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[43, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[43, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.get_optype_wise_ability"]], "get_output_op_names() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.get_output_op_names"]], "get_quantization_capability() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[43, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[43, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_version"]], "inspect_activation() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_activation"]], "inspect_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_tensor"]], "inspect_weight_and_bias() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_weight_and_bias"]], "neural_compressor.adaptor.tensorflow": [[43, "module-neural_compressor.adaptor.tensorflow"]], "qat_convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.qat_convert"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflow_itexadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.set_tensor"]], "train() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.train"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[44, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "bf16_convert() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[44, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.bf16_convert"]], "convert() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[44, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.convert"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[44, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "quantize() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[44, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.quantize"]], "quantize_with_qdq_pattern() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[44, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.quantize_with_qdq_pattern"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[45, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "bf16_convert() (neural_compressor.adaptor.tf_utils.graph_converter_without_calib.graphconverterwithoutcalib method)": [[45, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib.bf16_convert"]], "convert_without_calib() (neural_compressor.adaptor.tf_utils.graph_converter_without_calib.graphconverterwithoutcalib method)": [[45, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib.convert_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[45, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "quantize_without_calib() (neural_compressor.adaptor.tf_utils.graph_converter_without_calib.graphconverterwithoutcalib method)": [[45, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib.quantize_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[46, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.bf16convert method)": [[46, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[48, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.convertaddtobiasaddoptimizer method)": [[48, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.convertlayoutoptimizer method)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.convertleakyreluoptimizer method)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.convertnantorandom method)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "strtobool() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.strtobool"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.dequantizecastoptimizer method)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.dilatedcontraction method)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.injectdummybiasaddoptimizer method)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.expanddimsoptimizer method)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.fetchweightfromreshapeoptimizer method)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "scale_after_normalization() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.scale_after_normalization"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "check_all_folded() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_all_folded"]], "check_const_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_const_inputs"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.fusebiasaddandaddoptimizer method)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.fusecolumnwisemuloptimizer method)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.fuseconvwithmathoptimizer method)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.fusedecomposedbnoptimizer method)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer.do_transformation"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.fusedecomposedinoptimizer method)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer.do_transformation"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.fusegeluoptimizer method)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.fuselayernormoptimizer method)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.fusepadwithconv2doptimizer method)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.fusepadwithfp32conv2doptimizer method)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.fusetransposereshapeoptimizer method)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.graphcseoptimizer method)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.grappleroptimizer method)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.insertprintminmaxnode method)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.movesqueezeafterreluoptimizer method)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "get_excluded_node_names() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.get_excluded_node_names"]], "get_matched_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.get_matched_nodes"]], "get_optimized_model() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.get_optimized_model"]], "has_positive_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.removetrainingnodesoptimizer method)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.renamebatchnormoptimizer method)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.splitsharedinputoptimizer method)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.stripequivalentnodesoptimizer method)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.stripunusednodesoptimizer method)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.switchoptimizer method)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.graphrewriterbase method)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.freezefakequantopoptimizer method)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.do_transformation"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "do_transformation_without_calib() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.do_transformation_without_calib"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.fuseconvredundantdequantizetransformer method)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.fuseconvrequantizetransformer method)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.fusematmulredundantdequantizetransformer method)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizenewapitransformer method)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizetransformer method)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizenewapitransformer method)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizetransformer method)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.metainfochangingmemopoptimizer method)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.posthostconstconverter method)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.postcseoptimizer method)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.quantizedrnnconverter method)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.scalepropagationtransformer method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "add_graph_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.add_graph_input"]], "add_graph_output() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.add_graph_output"]], "append_node() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.append_node"]], "convert_qdq_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.convert_qdq_nodes"]], "copy_dtype() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.copy_dtype"]], "copy_shape() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.copy_shape"]], "create_new_graph_with_same_config() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.create_new_graph_with_same_config"]], "delete_qdq_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.delete_qdq_nodes"]], "delete_unused_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.delete_unused_nodes"]], "dump_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.dump_graph"]], "dump_node_statistics() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.dump_node_statistics"]], "extra_opset (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph property)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.extra_opset"]], "extract_sub_graph_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.extract_sub_graph_nodes"]], "find_output_consumers() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.find_output_consumers"]], "get_dtype() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_dtype"]], "get_node_by_name() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_node_by_name"]], "get_node_by_output() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_node_by_output"]], "get_node_by_output_in_current_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_node_by_output_in_current_graph"]], "get_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_nodes"]], "get_rank() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_rank"]], "get_shape() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_shape"]], "get_tensor_value() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_tensor_value"]], "input_names (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph property)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.input_names"]], "insert_new_node_on_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.insert_new_node_on_input"]], "insert_new_node_on_output() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.insert_new_node_on_output"]], "insert_node_on_output() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.insert_node_on_output"]], "is_const() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.is_const"]], "is_empty_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.is_empty_input"]], "is_target() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.is_target"]], "make_const() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.make_const"]], "make_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.make_graph"]], "make_model() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.make_model"]], "make_node() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.make_node"]], "make_onnx_graph_io() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.make_onnx_graph_io"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "opset (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph property)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.opset"]], "remove_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.remove_input"]], "remove_node() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.remove_node"]], "replace_all_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.replace_all_inputs"]], "replace_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.replace_input"]], "replace_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.replace_inputs"]], "reset_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.reset_nodes"]], "safe_remove_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.safe_remove_nodes"]], "safe_to_remove_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.safe_to_remove_nodes"]], "set_config() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.set_config"]], "set_dtype() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.set_dtype"]], "set_node_by_name() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.set_node_by_name"]], "set_shape() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.set_shape"]], "topological_sort() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.topological_sort"]], "update_node_shape_dtype() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.update_node_shape_dtype"]], "update_proto() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.update_proto"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "attr (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.attr"]], "child_name() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.child_name"]], "data_format (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.data_format"]], "domain (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.domain"]], "get_attr() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_attr"]], "get_attr_int() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_attr_int"]], "get_attr_str() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_attr_str"]], "get_attr_value() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_attr_value"]], "get_body_graphs() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_body_graphs"]], "get_implicit_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_implicit_inputs"]], "get_onnx_attrs() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_onnx_attrs"]], "get_tensor_value() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_tensor_value"]], "get_value_attr() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_value_attr"]], "input (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.input"]], "inputs (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.inputs"]], "is_const() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.is_const"]], "is_graph_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.is_graph_input"]], "is_graph_input_default_const() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.is_graph_input_default_const"]], "is_nhwc() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.is_nhwc"]], "is_scalar() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.is_scalar"]], "is_while() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.is_while"]], "name (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.name"]], "need_skip() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.need_skip"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "op (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.op"]], "output (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.output"]], "output_dtypes (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.output_dtypes"]], "output_shapes (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.output_shapes"]], "scalar_to_dim1() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.scalar_to_dim1"]], "set_attr() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.set_attr"]], "set_attr_onnx() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.set_attr_onnx"]], "set_body_graph_as_attr() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.set_body_graph_as_attr"]], "set_tensor_value() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.set_tensor_value"]], "skip_conversion (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.skip_conversion"]], "summary (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.summary"]], "type (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.type"]], "update_proto() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.update_proto"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "attributes (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.onnxopschema property)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema.attributes"]], "domain (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.onnxopschema property)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema.domain"]], "from_onnx_schema() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.onnxopschema static method)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema.from_onnx_schema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "has_attribute() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.onnxopschema method)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema.has_attribute"]], "name (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.onnxopschema property)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema.name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "since_version (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.onnxopschema property)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema.since_version"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.generategraphwithqdqpattern method)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.mergeduplicatedqdqoptimizer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.shareqdqforitexypatternoptimizer method)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "add_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.add_node"]], "analysis_rnn_model() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.analysis_rnn_model"]], "compare_node_attr() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.compare_node_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_node"]], "dump_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.dump_graph"]], "gen_valid_sampling_log() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.gen_valid_sampling_log"]], "generate_int32_bias_for_conv() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.generate_int32_bias_for_conv"]], "generate_int32_bias_for_matmul() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.generate_int32_bias_for_matmul"]], "get_frame_info() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.get_frame_info"]], "get_graph_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.get_graph_input_output"]], "graph (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer property)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.graph"]], "has_positive_input() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_util": [[106, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.node_name_from_input"]], "parse_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.parse_graph"]], "query_fusion_pattern_nodes() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.query_fusion_pattern_nodes"]], "remove_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node"]], "remove_node_with_single_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node_with_single_input_output"]], "replace_const_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_const_node"]], "replace_constant_graph_with_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_constant_graph_with_constant_node"]], "replace_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_node"]], "replace_single_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_single_node"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int"]], "set_attr_int_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int_list"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_type_list"]], "values_from_const() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.values_from_const"]], "neural_compressor.adaptor.tf_utils": [[107, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase class method)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantize method)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize.get_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase method)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "add_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.add_quantize_recipe"]], "clear_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.clear_quantize_recipe"]], "get_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.get_quantize_recipe"]], "is_empty() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.is_empty"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "query_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.query_layer"]], "remove_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layer"]], "remove_layers() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layers"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.build"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.build"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.call"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.call"]], "compute_output_shape() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.compute_output_shape"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase class method)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.get_config"]], "losses (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.losses"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "non_trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.non_trainable_weights"]], "query_input_index() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.query_input_index"]], "trainable (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable"]], "trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable_weights"]], "updates (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.updates"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_newly_bn_leakyrelu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_leakyrelu_fusion"]], "apply_newly_bn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "apply_conv3d_add_addn_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_addn_fusion"]], "apply_conv3d_add_addn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_addn_relu_fusion"]], "apply_conv3d_add_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_fusion"]], "apply_conv3d_add_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_relu_fusion"]], "apply_conv3d_single_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_single_fusion"]], "apply_conv_biasadd_hardswish_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_hardswish_fusion"]], "apply_newly_conv_biasadd_addn_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_addn_fusion"]], "apply_newly_conv_biasadd_addn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_addn_relu_fusion"]], "apply_newly_conv_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_fusion"]], "apply_newly_conv_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_relu_fusion"]], "apply_newly_conv_biasadd_swishf32_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_swishf32_fusion"]], "apply_newly_conv_single_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_single_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "apply_deconv2d_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_deconv2d_biasadd_fusion"]], "apply_deconv3d_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_deconv3d_biasadd_fusion"]], "apply_single_deconv2d_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_single_deconv2d_fusion"]], "apply_single_deconv3d_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_single_deconv3d_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "apply_newly_in_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.apply_newly_in_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "apply_batchmatmulv2_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_fusion"]], "apply_batchmatmulv2_mul_add_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_mul_add_fusion"]], "apply_matmul_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_fusion"]], "apply_matmul_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.optimizeqdqgraph method)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph.do_transform"]], "get_quantized_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.optimizeqdqgraph method)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph.get_quantized_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "add_output_graph_node() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.add_output_graph_node"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.apply_the_transform"]], "create_nodes_map() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.create_nodes_map"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.do_transform"]], "eightbitize_single_input_tensor_node() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.eightbitize_single_input_tensor_node"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "register_transformer() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.register_transformer"]], "remove_dead_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.remove_dead_nodes"]], "remove_redundant_quantization() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.remove_redundant_quantization"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_newly_bn_leakyrelu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_leakyrelu_fusion"]], "apply_newly_bn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "apply_conv_biasadd_addn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_addn_relu_fusion"]], "apply_conv_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_fusion"]], "apply_conv_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_relu_fusion"]], "apply_conv_single_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_single_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.quantizegraphforintel method)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel.do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "apply_matmul_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_fusion"]], "apply_matmul_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "copy_attr() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.copy_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_node"]], "ensure_tensor_name_has_port() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.ensure_tensor_name_has_port"]], "generate_quantized_weight_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.generate_quantized_weight_node"]], "get_sorted_graph() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.get_sorted_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.node_name_from_input"]], "remove_training_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.remove_training_nodes"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_int"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_type_list"]], "split_shared_inputs() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.split_shared_inputs"]], "unique_node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.unique_node_name_from_input"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[136, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "convert() (neural_compressor.adaptor.tf_utils.tf2onnx_converter.tensorflowqdqtoonnxqdqconverter method)": [[136, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter.convert"]], "duplicate_tf_quantizev2_nodes() (neural_compressor.adaptor.tf_utils.tf2onnx_converter.tensorflowqdqtoonnxqdqconverter method)": [[136, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter.duplicate_tf_quantizev2_nodes"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[136, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "tf_graph_optimize() (neural_compressor.adaptor.tf_utils.tf2onnx_converter.tensorflowqdqtoonnxqdqconverter method)": [[136, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter.tf_graph_optimize"]], "transpose_inputs() (neural_compressor.adaptor.tf_utils.tf2onnx_converter.tensorflowqdqtoonnxqdqconverter method)": [[136, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter.transpose_inputs"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[137, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.biascorrection method)": [[137, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[137, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[138, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[138, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.do_transformation"]], "generate_input_map() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[138, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.generate_input_map"]], "get_node_name_from_input() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[138, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.get_node_name_from_input"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[138, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[138, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.node_name_from_input"]], "parse_input_pb() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[138, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.parse_input_pb"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[139, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[140, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.insertlogging method)": [[140, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[140, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[141, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.rerangequantizedconcat method)": [[141, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[141, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[142, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[143, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[143, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[143, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "forward() (neural_compressor.adaptor.torch_utils.bf16_convert.bf16modulewrapper method)": [[143, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper.forward"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[143, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "get_act_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_act_gap"]], "get_act_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_act_traces"]], "get_avg_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_avg_traces"]], "get_device() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_device"]], "get_fused_mapping() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_fused_mapping"]], "get_params() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_params"]], "get_vthv_weight() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_vtHv_weight"]], "get_weight_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_weight_traces"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "hook_fn_act() (neural_compressor.adaptor.torch_utils.hawq_metric.node_collector method)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector.hook_fn_act"]], "is_fused_module() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.is_fused_module"]], "mse_metric_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.mse_metric_gap"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[144, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "register_act_grad_hooks() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.register_act_grad_hooks"]], "remove() (neural_compressor.adaptor.torch_utils.hawq_metric.node_collector method)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector.remove"]], "reset_act_gradient_and_hooks() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.reset_act_gradient_and_hooks"]], "neural_compressor.adaptor.torch_utils": [[145, "module-neural_compressor.adaptor.torch_utils"]], "datareader (class in neural_compressor.adaptor.torch_utils.onnx)": [[146, "neural_compressor.adaptor.torch_utils.onnx.DataReader"]], "get_next() (neural_compressor.adaptor.torch_utils.onnx.datareader method)": [[146, "neural_compressor.adaptor.torch_utils.onnx.DataReader.get_next"]], "neural_compressor.adaptor.torch_utils.onnx": [[146, "module-neural_compressor.adaptor.torch_utils.onnx"]], "graphtrace (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[147, "neural_compressor.adaptor.torch_utils.smooth_quant.GraphTrace"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[147, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[147, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "recover() (neural_compressor.adaptor.torch_utils.smooth_quant.torchsmoothquant method)": [[147, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant.recover"]], "transform() (neural_compressor.adaptor.torch_utils.smooth_quant.torchsmoothquant method)": [[147, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant.transform"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[148, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[148, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[148, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "neural_compressor.adaptor.torch_utils.util": [[149, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[150, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[150, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[150, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "adaptor (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[150, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.adaptor"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[150, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "append_algorithm() (neural_compressor.algorithm.algorithm.algorithmscheduler method)": [[150, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.append_algorithm"]], "calib_iter (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[150, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.calib_iter"]], "dataloader (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[150, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.dataloader"]], "neural_compressor.algorithm.algorithm": [[150, "module-neural_compressor.algorithm.algorithm"]], "origin_model (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[150, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.origin_model"]], "q_model (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[150, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.q_model"]], "reset_exec_algorithms() (neural_compressor.algorithm.algorithm.algorithmscheduler method)": [[150, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.reset_exec_algorithms"]], "support_algorithms() (neural_compressor.algorithm.algorithm.algorithms class method)": [[150, "neural_compressor.algorithm.algorithm.ALGORITHMS.support_algorithms"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[151, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[151, "module-neural_compressor.algorithm.fast_bias_correction"]], "algorithms (class in neural_compressor.algorithm)": [[152, "neural_compressor.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm)": [[152, "neural_compressor.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm)": [[152, "neural_compressor.algorithm.AlgorithmScheduler"]], "adaptor (neural_compressor.algorithm.algorithmscheduler property)": [[152, "neural_compressor.algorithm.AlgorithmScheduler.adaptor"]], "algorithm_registry() (in module neural_compressor.algorithm)": [[152, "neural_compressor.algorithm.algorithm_registry"]], "append_algorithm() (neural_compressor.algorithm.algorithmscheduler method)": [[152, "neural_compressor.algorithm.AlgorithmScheduler.append_algorithm"]], "calib_iter (neural_compressor.algorithm.algorithmscheduler property)": [[152, "neural_compressor.algorithm.AlgorithmScheduler.calib_iter"]], "dataloader (neural_compressor.algorithm.algorithmscheduler property)": [[152, "neural_compressor.algorithm.AlgorithmScheduler.dataloader"]], "neural_compressor.algorithm": [[152, "module-neural_compressor.algorithm"]], "origin_model (neural_compressor.algorithm.algorithmscheduler property)": [[152, "neural_compressor.algorithm.AlgorithmScheduler.origin_model"]], "q_model (neural_compressor.algorithm.algorithmscheduler property)": [[152, "neural_compressor.algorithm.AlgorithmScheduler.q_model"]], "reset_exec_algorithms() (neural_compressor.algorithm.algorithmscheduler method)": [[152, "neural_compressor.algorithm.AlgorithmScheduler.reset_exec_algorithms"]], "support_algorithms() (neural_compressor.algorithm.algorithms class method)": [[152, "neural_compressor.algorithm.ALGORITHMS.support_algorithms"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[153, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[153, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[154, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[154, "module-neural_compressor.algorithm.weight_correction"]], "benchmark (class in neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.Benchmark"]], "b_dataloader (neural_compressor.benchmark.benchmark property)": [[155, "neural_compressor.benchmark.Benchmark.b_dataloader"]], "b_func (neural_compressor.benchmark.benchmark property)": [[155, "neural_compressor.benchmark.Benchmark.b_func"]], "config_instance() (neural_compressor.benchmark.benchmark method)": [[155, "neural_compressor.benchmark.Benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.fit"]], "generate_prefix() (neural_compressor.benchmark.benchmark method)": [[155, "neural_compressor.benchmark.Benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.get_threads_per_core"]], "model (neural_compressor.benchmark.benchmark property)": [[155, "neural_compressor.benchmark.Benchmark.model"]], "neural_compressor.benchmark": [[155, "module-neural_compressor.benchmark"]], "results (neural_compressor.benchmark.benchmark property)": [[155, "neural_compressor.benchmark.Benchmark.results"]], "run_instance() (neural_compressor.benchmark.benchmark method)": [[155, "neural_compressor.benchmark.Benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (neural_compressor.benchmark.benchmark method)": [[155, "neural_compressor.benchmark.Benchmark.summary_benchmark"]], "awaretrainingquantcallbacks (class in neural_compressor.compression.callbacks)": [[156, "neural_compressor.compression.callbacks.AwareTrainingQuantCallbacks"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[156, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[156, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[156, "neural_compressor.compression.callbacks.PruningCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[156, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[156, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[156, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "create_criterion() (neural_compressor.compression.callbacks.distillationcallbacks method)": [[156, "neural_compressor.compression.callbacks.DistillationCallbacks.create_criterion"]], "criterion (neural_compressor.compression.callbacks.distillationcallbacks property)": [[156, "neural_compressor.compression.callbacks.DistillationCallbacks.criterion"]], "eval_dataloader (neural_compressor.compression.callbacks.basecallbacks property)": [[156, "neural_compressor.compression.callbacks.BaseCallbacks.eval_dataloader"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[156, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "eval_func (neural_compressor.compression.callbacks.basecallbacks property)": [[156, "neural_compressor.compression.callbacks.BaseCallbacks.eval_func"]], "execute() (neural_compressor.compression.callbacks.basecallbacks method)": [[156, "neural_compressor.compression.callbacks.BaseCallbacks.execute"]], "generate_hooks() (neural_compressor.compression.callbacks.distillationcallbacks method)": [[156, "neural_compressor.compression.callbacks.DistillationCallbacks.generate_hooks"]], "generate_hooks() (neural_compressor.compression.callbacks.pruningcallbacks method)": [[156, "neural_compressor.compression.callbacks.PruningCallbacks.generate_hooks"]], "init_train_cfg() (neural_compressor.compression.callbacks.distillationcallbacks method)": [[156, "neural_compressor.compression.callbacks.DistillationCallbacks.init_train_cfg"]], "metric (neural_compressor.compression.callbacks.basecallbacks property)": [[156, "neural_compressor.compression.callbacks.BaseCallbacks.metric"]], "model (neural_compressor.compression.callbacks.basecallbacks property)": [[156, "neural_compressor.compression.callbacks.BaseCallbacks.model"]], "neural_compressor.compression.callbacks": [[156, "module-neural_compressor.compression.callbacks"]], "on_after_compute_loss() (neural_compressor.compression.callbacks.basecallbacks method)": [[156, "neural_compressor.compression.callbacks.BaseCallbacks.on_after_compute_loss"]], "on_after_eval() (neural_compressor.compression.callbacks.basecallbacks method)": [[156, "neural_compressor.compression.callbacks.BaseCallbacks.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.compression.callbacks.basecallbacks method)": [[156, "neural_compressor.compression.callbacks.BaseCallbacks.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.compression.callbacks.basecallbacks method)": [[156, "neural_compressor.compression.callbacks.BaseCallbacks.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.compression.callbacks.basecallbacks method)": [[156, "neural_compressor.compression.callbacks.BaseCallbacks.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.compression.callbacks.basecallbacks method)": [[156, "neural_compressor.compression.callbacks.BaseCallbacks.on_epoch_begin"]], "on_epoch_end() (neural_compressor.compression.callbacks.basecallbacks method)": [[156, "neural_compressor.compression.callbacks.BaseCallbacks.on_epoch_end"]], "on_step_begin() (neural_compressor.compression.callbacks.basecallbacks method)": [[156, "neural_compressor.compression.callbacks.BaseCallbacks.on_step_begin"]], "on_step_end() (neural_compressor.compression.callbacks.basecallbacks method)": [[156, "neural_compressor.compression.callbacks.BaseCallbacks.on_step_end"]], "on_train_begin() (neural_compressor.compression.callbacks.basecallbacks method)": [[156, "neural_compressor.compression.callbacks.BaseCallbacks.on_train_begin"]], "on_train_end() (neural_compressor.compression.callbacks.basecallbacks method)": [[156, "neural_compressor.compression.callbacks.BaseCallbacks.on_train_end"]], "on_train_end() (neural_compressor.compression.callbacks.pruningcallbacks method)": [[156, "neural_compressor.compression.callbacks.PruningCallbacks.on_train_end"]], "pre_process() (neural_compressor.compression.callbacks.basecallbacks method)": [[156, "neural_compressor.compression.callbacks.BaseCallbacks.pre_process"]], "register_hook() (neural_compressor.compression.callbacks.basecallbacks method)": [[156, "neural_compressor.compression.callbacks.BaseCallbacks.register_hook"]], "remove_hook() (neural_compressor.compression.callbacks.basecallbacks method)": [[156, "neural_compressor.compression.callbacks.BaseCallbacks.remove_hook"]], "student_model (neural_compressor.compression.callbacks.distillationcallbacks property)": [[156, "neural_compressor.compression.callbacks.DistillationCallbacks.student_model"]], "teacher_model (neural_compressor.compression.callbacks.distillationcallbacks property)": [[156, "neural_compressor.compression.callbacks.DistillationCallbacks.teacher_model"]], "train_cfg (neural_compressor.compression.callbacks.distillationcallbacks property)": [[156, "neural_compressor.compression.callbacks.DistillationCallbacks.train_cfg"]], "train_func (neural_compressor.compression.callbacks.basecallbacks property)": [[156, "neural_compressor.compression.callbacks.BaseCallbacks.train_func"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "kullbackleiblerdivergence() (neural_compressor.compression.distillation.criterions.pytorchknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "kullbackleiblerdivergence() (neural_compressor.compression.distillation.criterions.pytorchselfknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "l2divergence() (neural_compressor.compression.distillation.criterions.pytorchselfknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss.L2Divergence"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "softcrossentropy() (neural_compressor.compression.distillation.criterions.pytorchknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.compression.distillation.criterions.pytorchselfknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.compression.distillation.criterions.tensorflowknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss.SoftCrossEntropy"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "clear_features() (neural_compressor.compression.distillation.criterions.intermediatelayersknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss.clear_features"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "init_feature_matcher() (neural_compressor.compression.distillation.criterions.intermediatelayersknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_feature_matcher() (neural_compressor.compression.distillation.criterions.pytorchintermediatelayersknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_loss_funcs() (neural_compressor.compression.distillation.criterions.intermediatelayersknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.compression.distillation.criterions.pytorchintermediatelayersknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.compression.distillation.criterions.pytorchselfknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.compression.distillation.criterions.selfknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss.init_loss_funcs"]], "loss_cal() (neural_compressor.compression.distillation.criterions.intermediatelayersknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.compression.distillation.criterions.knowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.compression.distillation.criterions.pytorchintermediatelayersknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.compression.distillation.criterions.pytorchselfknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.compression.distillation.criterions.selfknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal_sloss() (neural_compressor.compression.distillation.criterions.intermediatelayersknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.compression.distillation.criterions.knowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.compression.distillation.criterions.pytorchintermediatelayersknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.compression.distillation.criterions.selfknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss.loss_cal_sloss"]], "neural_compressor.compression.distillation.criterions": [[157, "module-neural_compressor.compression.distillation.criterions"]], "register() (neural_compressor.compression.distillation.criterions.criterions method)": [[157, "neural_compressor.compression.distillation.criterions.Criterions.register"]], "register_hooks_for_models() (neural_compressor.compression.distillation.criterions.pytorchintermediatelayersknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss.register_hooks_for_models"]], "remove_all_hooks() (neural_compressor.compression.distillation.criterions.pytorchintermediatelayersknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss.remove_all_hooks"]], "student_model (neural_compressor.compression.distillation.criterions.knowledgedistillationframework property)": [[157, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework.student_model"]], "student_targets_loss_cal() (neural_compressor.compression.distillation.criterions.knowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.compression.distillation.criterions.pytorchknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.compression.distillation.criterions.tensorflowknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.compression.distillation.criterions.tensorflowknowledgedistillationlossexternal method)": [[157, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal.student_targets_loss_cal"]], "teacher_model (neural_compressor.compression.distillation.criterions.knowledgedistillationframework property)": [[157, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework.teacher_model"]], "teacher_model_forward() (neural_compressor.compression.distillation.criterions.intermediatelayersknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.compression.distillation.criterions.knowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.compression.distillation.criterions.pytorchintermediatelayersknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.compression.distillation.criterions.pytorchknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.compression.distillation.criterions.pytorchselfknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.compression.distillation.criterions.selfknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.compression.distillation.criterions.tensorflowknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.compression.distillation.criterions.tensorflowknowledgedistillationlossexternal method)": [[157, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal.teacher_model_forward"]], "teacher_student_loss_cal() (neural_compressor.compression.distillation.criterions.knowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.compression.distillation.criterions.pytorchknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.compression.distillation.criterions.tensorflowknowledgedistillationloss method)": [[157, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.compression.distillation.criterions.tensorflowknowledgedistillationlossexternal method)": [[157, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal.teacher_student_loss_cal"]], "neural_compressor.compression.distillation": [[158, "module-neural_compressor.compression.distillation"]], "awaretrainingquantcallbacks (class in neural_compressor.compression)": [[159, "neural_compressor.compression.AwareTrainingQuantCallbacks"]], "distillationcallbacks (class in neural_compressor.compression)": [[159, "neural_compressor.compression.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression)": [[159, "neural_compressor.compression.PruningCallbacks"]], "_epoch_ran (neural_compressor.compression.distillationcallbacks attribute)": [[159, "neural_compressor.compression.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.distillationcallbacks attribute)": [[159, "neural_compressor.compression.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.distillationcallbacks attribute)": [[159, "neural_compressor.compression.DistillationCallbacks.best_score"]], "create_criterion() (neural_compressor.compression.distillationcallbacks method)": [[159, "neural_compressor.compression.DistillationCallbacks.create_criterion"]], "criterion (neural_compressor.compression.distillationcallbacks property)": [[159, "neural_compressor.compression.DistillationCallbacks.criterion"]], "eval_frequency (neural_compressor.compression.distillationcallbacks attribute)": [[159, "neural_compressor.compression.DistillationCallbacks.eval_frequency"]], "generate_hooks() (neural_compressor.compression.distillationcallbacks method)": [[159, "neural_compressor.compression.DistillationCallbacks.generate_hooks"]], "generate_hooks() (neural_compressor.compression.pruningcallbacks method)": [[159, "neural_compressor.compression.PruningCallbacks.generate_hooks"]], "init_train_cfg() (neural_compressor.compression.distillationcallbacks method)": [[159, "neural_compressor.compression.DistillationCallbacks.init_train_cfg"]], "neural_compressor.compression": [[159, "module-neural_compressor.compression"]], "on_train_end() (neural_compressor.compression.pruningcallbacks method)": [[159, "neural_compressor.compression.PruningCallbacks.on_train_end"]], "student_model (neural_compressor.compression.distillationcallbacks property)": [[159, "neural_compressor.compression.DistillationCallbacks.student_model"]], "teacher_model (neural_compressor.compression.distillationcallbacks property)": [[159, "neural_compressor.compression.DistillationCallbacks.teacher_model"]], "train_cfg (neural_compressor.compression.distillationcallbacks property)": [[159, "neural_compressor.compression.DistillationCallbacks.train_cfg"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[160, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[160, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[160, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[160, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[160, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[160, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[160, "module-neural_compressor.compression.pruner.criteria"]], "on_after_optimizer_step() (neural_compressor.compression.pruner.criteria.pruningcriterion method)": [[160, "neural_compressor.compression.pruner.criteria.PruningCriterion.on_after_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.compression.pruner.criteria.gradientcriterion method)": [[160, "neural_compressor.compression.pruner.criteria.GradientCriterion.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.compression.pruner.criteria.pruningcriterion method)": [[160, "neural_compressor.compression.pruner.criteria.PruningCriterion.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.compression.pruner.criteria.snipcriterion method)": [[160, "neural_compressor.compression.pruner.criteria.SnipCriterion.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.compression.pruner.criteria.snipmomentumcriterion method)": [[160, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.on_before_optimizer_step"]], "on_step_begin() (neural_compressor.compression.pruner.criteria.magnitudecriterion method)": [[160, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.on_step_begin"]], "on_step_begin() (neural_compressor.compression.pruner.criteria.pruningcriterion method)": [[160, "neural_compressor.compression.pruner.criteria.PruningCriterion.on_step_begin"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[160, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[160, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[160, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[160, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[160, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[160, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[161, "module-neural_compressor.compression.pruner"]], "basepattern (class in neural_compressor.compression.pruner.patterns)": [[162, "neural_compressor.compression.pruner.patterns.BasePattern"]], "m (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[162, "neural_compressor.compression.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[162, "neural_compressor.compression.pruner.patterns.PatternNInM.N"]], "patternninm (class in neural_compressor.compression.pruner.patterns)": [[162, "neural_compressor.compression.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.compression.pruner.patterns)": [[162, "neural_compressor.compression.pruner.patterns.PatternNxM"]], "adjust_ratio() (neural_compressor.compression.pruner.patterns.basepattern method)": [[162, "neural_compressor.compression.pruner.patterns.BasePattern.adjust_ratio"]], "block_size (neural_compressor.compression.pruner.patterns.patternnxm attribute)": [[162, "neural_compressor.compression.pruner.patterns.PatternNxM.block_size"]], "check_layer_validity() (neural_compressor.compression.pruner.patterns.basepattern method)": [[162, "neural_compressor.compression.pruner.patterns.BasePattern.check_layer_validity"]], "check_layer_validity() (neural_compressor.compression.pruner.patterns.patternninm method)": [[162, "neural_compressor.compression.pruner.patterns.PatternNInM.check_layer_validity"]], "check_layer_validity() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[162, "neural_compressor.compression.pruner.patterns.PatternNxM.check_layer_validity"]], "config (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[162, "neural_compressor.compression.pruner.patterns.BasePattern.config"]], "count_new_masked_cnts() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[162, "neural_compressor.compression.pruner.patterns.PatternNxM.count_new_masked_cnts"]], "get_block_size_dict() (neural_compressor.compression.pruner.patterns.basepattern method)": [[162, "neural_compressor.compression.pruner.patterns.BasePattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[162, "neural_compressor.compression.pruner.patterns.PatternNxM.get_block_size_dict"]], "get_ele_mask_per_threshold() (neural_compressor.compression.pruner.patterns.patternninm method)": [[162, "neural_compressor.compression.pruner.patterns.PatternNInM.get_ele_mask_per_threshold"]], "get_least_ninm_mask_from_data() (neural_compressor.compression.pruner.patterns.patternninm method)": [[162, "neural_compressor.compression.pruner.patterns.PatternNInM.get_least_ninm_mask_from_data"]], "get_mask_per_threshold() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[162, "neural_compressor.compression.pruner.patterns.PatternNxM.get_mask_per_threshold"]], "get_masks() (neural_compressor.compression.pruner.patterns.basepattern method)": [[162, "neural_compressor.compression.pruner.patterns.BasePattern.get_masks"]], "get_masks_global() (neural_compressor.compression.pruner.patterns.basepattern method)": [[162, "neural_compressor.compression.pruner.patterns.BasePattern.get_masks_global"]], "get_masks_global() (neural_compressor.compression.pruner.patterns.patternninm method)": [[162, "neural_compressor.compression.pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[162, "neural_compressor.compression.pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.compression.pruner.patterns.basepattern method)": [[162, "neural_compressor.compression.pruner.patterns.BasePattern.get_masks_local"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[162, "neural_compressor.compression.pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.compression.pruner.patterns.basepattern method)": [[162, "neural_compressor.compression.pruner.patterns.BasePattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.compression.pruner.patterns.patternninm method)": [[162, "neural_compressor.compression.pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[162, "neural_compressor.compression.pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_reduced_masks_from_data() (neural_compressor.compression.pruner.patterns.basepattern method)": [[162, "neural_compressor.compression.pruner.patterns.BasePattern.get_reduced_masks_from_data"]], "get_reduced_masks_from_data() (neural_compressor.compression.pruner.patterns.patternninm method)": [[162, "neural_compressor.compression.pruner.patterns.PatternNInM.get_reduced_masks_from_data"]], "get_reduced_masks_from_data() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[162, "neural_compressor.compression.pruner.patterns.PatternNxM.get_reduced_masks_from_data"]], "get_single_mask_per_target_ratio() (neural_compressor.compression.pruner.patterns.basepattern method)": [[162, "neural_compressor.compression.pruner.patterns.BasePattern.get_single_mask_per_target_ratio"]], "get_sparsity_ratio() (neural_compressor.compression.pruner.patterns.basepattern method)": [[162, "neural_compressor.compression.pruner.patterns.BasePattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.compression.pruner.patterns.patternninm method)": [[162, "neural_compressor.compression.pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[162, "neural_compressor.compression.pruner.patterns.PatternNxM.get_sparsity_ratio"]], "get_sparsity_ratio_each_layer() (neural_compressor.compression.pruner.patterns.basepattern method)": [[162, "neural_compressor.compression.pruner.patterns.BasePattern.get_sparsity_ratio_each_layer"]], "get_sparsity_ratio_progressive() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[162, "neural_compressor.compression.pruner.patterns.PatternNxM.get_sparsity_ratio_progressive"]], "invalid_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[162, "neural_compressor.compression.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[162, "neural_compressor.compression.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[162, "neural_compressor.compression.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[162, "neural_compressor.compression.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[162, "neural_compressor.compression.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[162, "neural_compressor.compression.pruner.patterns.BasePattern.modules"]], "neural_compressor.compression.pruner.patterns": [[162, "module-neural_compressor.compression.pruner.patterns"]], "pattern (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[162, "neural_compressor.compression.pruner.patterns.BasePattern.pattern"]], "reduce_scores() (neural_compressor.compression.pruner.patterns.patternninm method)": [[162, "neural_compressor.compression.pruner.patterns.PatternNInM.reduce_scores"]], "reduce_scores() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[162, "neural_compressor.compression.pruner.patterns.PatternNxM.reduce_scores"]], "reduce_tensor() (neural_compressor.compression.pruner.patterns.basepattern method)": [[162, "neural_compressor.compression.pruner.patterns.BasePattern.reduce_tensor"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns)": [[162, "neural_compressor.compression.pruner.patterns.register_pattern"]], "reshape_orig_to_pattern() (neural_compressor.compression.pruner.patterns.patternninm method)": [[162, "neural_compressor.compression.pruner.patterns.PatternNInM.reshape_orig_to_pattern"]], "reshape_orig_to_pattern() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[162, "neural_compressor.compression.pruner.patterns.PatternNxM.reshape_orig_to_pattern"]], "reshape_reduced_to_orig() (neural_compressor.compression.pruner.patterns.patternninm method)": [[162, "neural_compressor.compression.pruner.patterns.PatternNInM.reshape_reduced_to_orig"]], "reshape_reduced_to_orig() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[162, "neural_compressor.compression.pruner.patterns.PatternNxM.reshape_reduced_to_orig"]], "target_sparsity (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[162, "neural_compressor.compression.pruner.patterns.BasePattern.target_sparsity"]], "update_new_added_masks() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[162, "neural_compressor.compression.pruner.patterns.PatternNxM.update_new_added_masks"]], "update_progressive_masks() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[162, "neural_compressor.compression.pruner.patterns.PatternNxM.update_progressive_masks"]], "update_progressive_masks_global() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[162, "neural_compressor.compression.pruner.patterns.PatternNxM.update_progressive_masks_global"]], "update_progressive_masks_linear() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[162, "neural_compressor.compression.pruner.patterns.PatternNxM.update_progressive_masks_linear"]], "update_progressive_masks_local() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[162, "neural_compressor.compression.pruner.patterns.PatternNxM.update_progressive_masks_local"]], "update_progressive_masks_scores() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[162, "neural_compressor.compression.pruner.patterns.PatternNxM.update_progressive_masks_scores"]], "update_residual_cnt() (neural_compressor.compression.pruner.patterns.basepattern method)": [[162, "neural_compressor.compression.pruner.patterns.BasePattern.update_residual_cnt"]], "basepruner (class in neural_compressor.compression.pruner.pruners)": [[163, "neural_compressor.compression.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.compression.pruner.pruners)": [[163, "neural_compressor.compression.pruner.pruners.BasicPruner"]], "patternlockpruner (class in neural_compressor.compression.pruner.pruners)": [[163, "neural_compressor.compression.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.compression.pruner.pruners)": [[163, "neural_compressor.compression.pruner.pruners.ProgressivePruner"]], "check_is_pruned_progressive_step() (neural_compressor.compression.pruner.pruners.progressivepruner method)": [[163, "neural_compressor.compression.pruner.pruners.ProgressivePruner.check_is_pruned_progressive_step"]], "check_is_pruned_step() (neural_compressor.compression.pruner.pruners.basepruner method)": [[163, "neural_compressor.compression.pruner.pruners.BasePruner.check_is_pruned_step"]], "check_progressive_validity() (neural_compressor.compression.pruner.pruners.progressivepruner method)": [[163, "neural_compressor.compression.pruner.pruners.ProgressivePruner.check_progressive_validity"]], "config (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[163, "neural_compressor.compression.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[163, "neural_compressor.compression.pruner.pruners.BasicPruner.criterion"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[163, "neural_compressor.compression.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[163, "neural_compressor.compression.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[163, "neural_compressor.compression.pruner.pruners.get_pruner"]], "global_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[163, "neural_compressor.compression.pruner.pruners.BasePruner.global_step"]], "mask_weights() (neural_compressor.compression.pruner.pruners.basepruner method)": [[163, "neural_compressor.compression.pruner.pruners.BasePruner.mask_weights"]], "mask_weights_general() (neural_compressor.compression.pruner.pruners.basepruner method)": [[163, "neural_compressor.compression.pruner.pruners.BasePruner.mask_weights_general"]], "masks (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[163, "neural_compressor.compression.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[163, "neural_compressor.compression.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[163, "neural_compressor.compression.pruner.pruners.BasePruner.modules"]], "neural_compressor.compression.pruner.pruners": [[163, "module-neural_compressor.compression.pruner.pruners"]], "on_after_eval() (neural_compressor.compression.pruner.pruners.basepruner method)": [[163, "neural_compressor.compression.pruner.pruners.BasePruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.compression.pruner.pruners.basepruner method)": [[163, "neural_compressor.compression.pruner.pruners.BasePruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.compression.pruner.pruners.basicpruner method)": [[163, "neural_compressor.compression.pruner.pruners.BasicPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.compression.pruner.pruners.patternlockpruner method)": [[163, "neural_compressor.compression.pruner.pruners.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.compression.pruner.pruners.progressivepruner method)": [[163, "neural_compressor.compression.pruner.pruners.ProgressivePruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.compression.pruner.pruners.basepruner method)": [[163, "neural_compressor.compression.pruner.pruners.BasePruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.compression.pruner.pruners.basepruner method)": [[163, "neural_compressor.compression.pruner.pruners.BasePruner.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.compression.pruner.pruners.basicpruner method)": [[163, "neural_compressor.compression.pruner.pruners.BasicPruner.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.compression.pruner.pruners.progressivepruner method)": [[163, "neural_compressor.compression.pruner.pruners.ProgressivePruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.compression.pruner.pruners.basepruner method)": [[163, "neural_compressor.compression.pruner.pruners.BasePruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.compression.pruner.pruners.basepruner method)": [[163, "neural_compressor.compression.pruner.pruners.BasePruner.on_epoch_end"]], "on_step_begin() (neural_compressor.compression.pruner.pruners.basepruner method)": [[163, "neural_compressor.compression.pruner.pruners.BasePruner.on_step_begin"]], "on_step_begin() (neural_compressor.compression.pruner.pruners.progressivepruner method)": [[163, "neural_compressor.compression.pruner.pruners.ProgressivePruner.on_step_begin"]], "on_step_end() (neural_compressor.compression.pruner.pruners.basepruner method)": [[163, "neural_compressor.compression.pruner.pruners.BasePruner.on_step_end"]], "on_train_begin() (neural_compressor.compression.pruner.pruners.basepruner method)": [[163, "neural_compressor.compression.pruner.pruners.BasePruner.on_train_begin"]], "on_train_end() (neural_compressor.compression.pruner.pruners.basepruner method)": [[163, "neural_compressor.compression.pruner.pruners.BasePruner.on_train_end"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[163, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pattern (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[163, "neural_compressor.compression.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[163, "neural_compressor.compression.pruner.pruners.BasicPruner.pattern"]], "print_progressive_sparsity() (neural_compressor.compression.pruner.pruners.progressivepruner method)": [[163, "neural_compressor.compression.pruner.pruners.ProgressivePruner.print_progressive_sparsity"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[163, "neural_compressor.compression.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[163, "neural_compressor.compression.pruner.pruners.BasicPruner.reg"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners)": [[163, "neural_compressor.compression.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[163, "neural_compressor.compression.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[163, "neural_compressor.compression.pruner.pruners.BasicPruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[163, "neural_compressor.compression.pruner.pruners.BasePruner.scores"]], "set_global_step() (neural_compressor.compression.pruner.pruners.basicpruner method)": [[163, "neural_compressor.compression.pruner.pruners.BasicPruner.set_global_step"]], "start_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[163, "neural_compressor.compression.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[163, "neural_compressor.compression.pruner.pruners.BasePruner.target_sparsity_ratio"]], "update_masks() (neural_compressor.compression.pruner.pruners.basepruner method)": [[163, "neural_compressor.compression.pruner.pruners.BasePruner.update_masks"]], "update_masks() (neural_compressor.compression.pruner.pruners.basicpruner method)": [[163, "neural_compressor.compression.pruner.pruners.BasicPruner.update_masks"]], "update_masks() (neural_compressor.compression.pruner.pruners.patternlockpruner method)": [[163, "neural_compressor.compression.pruner.pruners.PatternLockPruner.update_masks"]], "update_masks_progressive() (neural_compressor.compression.pruner.pruners.progressivepruner method)": [[163, "neural_compressor.compression.pruner.pruners.ProgressivePruner.update_masks_progressive"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[164, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[164, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[164, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[164, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[164, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[164, "module-neural_compressor.compression.pruner.regs"]], "on_after_optimizer_step() (neural_compressor.compression.pruner.regs.basereg method)": [[164, "neural_compressor.compression.pruner.regs.BaseReg.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.compression.pruner.regs.grouplasso method)": [[164, "neural_compressor.compression.pruner.regs.GroupLasso.on_after_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.compression.pruner.regs.basereg method)": [[164, "neural_compressor.compression.pruner.regs.BaseReg.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.compression.pruner.regs.grouplasso method)": [[164, "neural_compressor.compression.pruner.regs.GroupLasso.on_before_optimizer_step"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[164, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[164, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[165, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[165, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[165, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[165, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[165, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[165, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[165, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.compression.pruner.schedulers.iterativescheduler method)": [[165, "neural_compressor.compression.pruner.schedulers.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.compression.pruner.schedulers.oneshotscheduler method)": [[165, "neural_compressor.compression.pruner.schedulers.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.compression.pruner.schedulers.pruningscheduler method)": [[165, "neural_compressor.compression.pruner.schedulers.PruningScheduler.update_sparsity_ratio"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[166, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[166, "neural_compressor.compression.pruner.utils.check_key_validity"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[166, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[166, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "neural_compressor.compression.pruner.utils": [[166, "module-neural_compressor.compression.pruner.utils"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[166, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[166, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[166, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[166, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[166, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[166, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[166, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[167, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[167, "neural_compressor.conf.config.Conf"]], "distillation_conf (class in neural_compressor.conf.config)": [[167, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[167, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[167, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[167, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[167, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[167, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[167, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[167, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[168, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[168, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[168, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[168, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[169, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[170, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[171, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[171, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[171, "neural_compressor.config.DistillationConfig"]], "exportconfig (class in neural_compressor.config)": [[171, "neural_compressor.config.ExportConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[171, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[171, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mixedprecisionconfig (class in neural_compressor.config)": [[171, "neural_compressor.config.MixedPrecisionConfig"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[171, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[171, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[171, "neural_compressor.config.PostTrainingQuantConfig"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[171, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[171, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[171, "neural_compressor.config.TF2ONNXConfig"]], "torch2onnxconfig (class in neural_compressor.config)": [[171, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[171, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[171, "neural_compressor.config.WeightPruningConfig"]], "absolute (neural_compressor.config.accuracycriterion property)": [[171, "neural_compressor.config.AccuracyCriterion.absolute"]], "approach (neural_compressor.config.posttrainingquantconfig property)": [[171, "neural_compressor.config.PostTrainingQuantConfig.approach"]], "approach (neural_compressor.config.quantizationawaretrainingconfig property)": [[171, "neural_compressor.config.QuantizationAwareTrainingConfig.approach"]], "backend (neural_compressor.config.benchmarkconfig property)": [[171, "neural_compressor.config.BenchmarkConfig.backend"]], "check_value() (in module neural_compressor.config)": [[171, "neural_compressor.config.check_value"]], "cores_per_instance (neural_compressor.config.benchmarkconfig property)": [[171, "neural_compressor.config.BenchmarkConfig.cores_per_instance"]], "criterion (neural_compressor.config.accuracycriterion property)": [[171, "neural_compressor.config.AccuracyCriterion.criterion"]], "criterion (neural_compressor.config.distillationconfig property)": [[171, "neural_compressor.config.DistillationConfig.criterion"]], "dtype (neural_compressor.config.exportconfig property)": [[171, "neural_compressor.config.ExportConfig.dtype"]], "dynamic_axes (neural_compressor.config.exportconfig property)": [[171, "neural_compressor.config.ExportConfig.dynamic_axes"]], "example_inputs (neural_compressor.config.exportconfig property)": [[171, "neural_compressor.config.ExportConfig.example_inputs"]], "higher_is_better (neural_compressor.config.accuracycriterion property)": [[171, "neural_compressor.config.AccuracyCriterion.higher_is_better"]], "input_names (neural_compressor.config.exportconfig property)": [[171, "neural_compressor.config.ExportConfig.input_names"]], "inputs (neural_compressor.config.benchmarkconfig property)": [[171, "neural_compressor.config.BenchmarkConfig.inputs"]], "inter_num_of_threads (neural_compressor.config.benchmarkconfig property)": [[171, "neural_compressor.config.BenchmarkConfig.inter_num_of_threads"]], "intra_num_of_threads (neural_compressor.config.benchmarkconfig property)": [[171, "neural_compressor.config.BenchmarkConfig.intra_num_of_threads"]], "iteration (neural_compressor.config.benchmarkconfig property)": [[171, "neural_compressor.config.BenchmarkConfig.iteration"]], "max_trials (neural_compressor.config.tuningcriterion property)": [[171, "neural_compressor.config.TuningCriterion.max_trials"]], "neural_compressor.config": [[171, "module-neural_compressor.config"]], "num_of_instance (neural_compressor.config.benchmarkconfig property)": [[171, "neural_compressor.config.BenchmarkConfig.num_of_instance"]], "objective (neural_compressor.config.tuningcriterion property)": [[171, "neural_compressor.config.TuningCriterion.objective"]], "opset_version (neural_compressor.config.exportconfig property)": [[171, "neural_compressor.config.ExportConfig.opset_version"]], "optimizer (neural_compressor.config.distillationconfig property)": [[171, "neural_compressor.config.DistillationConfig.optimizer"]], "output_names (neural_compressor.config.exportconfig property)": [[171, "neural_compressor.config.ExportConfig.output_names"]], "outputs (neural_compressor.config.benchmarkconfig property)": [[171, "neural_compressor.config.BenchmarkConfig.outputs"]], "quant_format (neural_compressor.config.exportconfig property)": [[171, "neural_compressor.config.ExportConfig.quant_format"]], "random_seed (neural_compressor.config.options property)": [[171, "neural_compressor.config.Options.random_seed"]], "relative (neural_compressor.config.accuracycriterion property)": [[171, "neural_compressor.config.AccuracyCriterion.relative"]], "resume_from (neural_compressor.config.options property)": [[171, "neural_compressor.config.Options.resume_from"]], "strategy (neural_compressor.config.tuningcriterion property)": [[171, "neural_compressor.config.TuningCriterion.strategy"]], "strategy_kwargs (neural_compressor.config.tuningcriterion property)": [[171, "neural_compressor.config.TuningCriterion.strategy_kwargs"]], "teacher_model (neural_compressor.config.distillationconfig property)": [[171, "neural_compressor.config.DistillationConfig.teacher_model"]], "tensorboard (neural_compressor.config.options property)": [[171, "neural_compressor.config.Options.tensorboard"]], "timeout (neural_compressor.config.tuningcriterion property)": [[171, "neural_compressor.config.TuningCriterion.timeout"]], "tolerable_loss (neural_compressor.config.accuracycriterion property)": [[171, "neural_compressor.config.AccuracyCriterion.tolerable_loss"]], "tuning_criterion (neural_compressor.config.posttrainingquantconfig property)": [[171, "neural_compressor.config.PostTrainingQuantConfig.tuning_criterion"]], "warmup (neural_compressor.config.benchmarkconfig property)": [[171, "neural_compressor.config.BenchmarkConfig.warmup"]], "weight_compression (neural_compressor.config.weightpruningconfig property)": [[171, "neural_compressor.config.WeightPruningConfig.weight_compression"]], "workspace (neural_compressor.config.options property)": [[171, "neural_compressor.config.Options.workspace"]], "neural_compressor.contrib": [[172, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[173, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[174, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "create_exp() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[174, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.create_exp"]], "get_acc_target() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[174, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.get_acc_target"]], "neural_compressor.contrib.strategy.sigopt": [[174, "module-neural_compressor.contrib.strategy.sigopt"]], "next_tune_cfg() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[174, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.next_tune_cfg"]], "params_to_tune_configs() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[174, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.params_to_tune_configs"]], "traverse() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[174, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.traverse"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[175, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "add_loss_to_tuned_history_and_find_best() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[175, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.add_loss_to_tuned_history_and_find_best"]], "calculate_loss() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[175, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.calculate_loss"]], "neural_compressor.contrib.strategy.tpe": [[175, "module-neural_compressor.contrib.strategy.tpe"]], "object_evaluation() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[175, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.object_evaluation"]], "stop() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[175, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.stop"]], "traverse() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[175, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.traverse"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[176, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.data.dataloaders.base_dataloader.basedataloader method)": [[176, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.data.dataloaders.base_dataloader.basedataloader property)": [[176, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.data.dataloaders.base_dataloader": [[176, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[177, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[177, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[178, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.data.dataloaders.default_dataloader.defaultdataloader method)": [[178, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.data.dataloaders.default_dataloader.defaultdataloader property)": [[178, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[178, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[178, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[179, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[179, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[179, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[179, "module-neural_compressor.data.dataloaders.fetcher"]], "dataloader (class in neural_compressor.data.dataloaders)": [[180, "neural_compressor.data.dataloaders.DataLoader"]], "neural_compressor.data.dataloaders": [[180, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[181, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[181, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[182, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[182, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[182, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[183, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[183, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[184, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[184, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[184, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[184, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[184, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[185, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[185, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[185, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[185, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[185, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[185, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[186, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[186, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[186, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[186, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[186, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[186, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[186, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[186, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[186, "module-neural_compressor.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.data.datasets.bert_dataset.inputfeatures method)": [[186, "neural_compressor.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[187, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[187, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[187, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[187, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[187, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.data.datasets.dataset.mnist property)": [[188, "neural_compressor.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.data.datasets.dataset.cifar10 method)": [[188, "neural_compressor.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.data.datasets.dataset.mnist method)": [[188, "neural_compressor.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[188, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.data.datasets.dataset.cifar10 method)": [[188, "neural_compressor.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.data.datasets.dataset": [[188, "module-neural_compressor.data.datasets.dataset"]], "read_data() (neural_compressor.data.datasets.dataset.fashionmnist method)": [[188, "neural_compressor.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.data.datasets.dataset.mnist method)": [[188, "neural_compressor.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[189, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[189, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[190, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[190, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[190, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[191, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[191, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[191, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[191, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[191, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[191, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[191, "module-neural_compressor.data.datasets.imagenet_dataset"]], "cocorecorddataset (class in neural_compressor.data.datasets)": [[192, "neural_compressor.data.datasets.COCORecordDataset"]], "dataset (class in neural_compressor.data.datasets)": [[192, "neural_compressor.data.datasets.Dataset"]], "datasets (class in neural_compressor.data.datasets)": [[192, "neural_compressor.data.datasets.Datasets"]], "iterabledataset (class in neural_compressor.data.datasets)": [[192, "neural_compressor.data.datasets.IterableDataset"]], "tensorflowimagerecord (class in neural_compressor.data.datasets)": [[192, "neural_compressor.data.datasets.TensorflowImageRecord"]], "dataset_registry() (in module neural_compressor.data.datasets)": [[192, "neural_compressor.data.datasets.dataset_registry"]], "neural_compressor.data.datasets": [[192, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[193, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[193, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[194, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[194, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[194, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[195, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[195, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[195, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[195, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[195, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[195, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[195, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[195, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[195, "module-neural_compressor.data.filters.filter"]], "filters (class in neural_compressor.data.filters)": [[196, "neural_compressor.data.filters.FILTERS"]], "filter (class in neural_compressor.data.filters)": [[196, "neural_compressor.data.filters.Filter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters)": [[196, "neural_compressor.data.filters.LabelBalanceCOCORecordFilter"]], "filter_registry() (in module neural_compressor.data.filters)": [[196, "neural_compressor.data.filters.filter_registry"]], "neural_compressor.data.filters": [[196, "module-neural_compressor.data.filters"]], "basetransform (class in neural_compressor.data)": [[197, "neural_compressor.data.BaseTransform"]], "bilinearimagenettransform (class in neural_compressor.data)": [[197, "neural_compressor.data.BilinearImagenetTransform"]], "cocorecorddataset (class in neural_compressor.data)": [[197, "neural_compressor.data.COCORecordDataset"]], "composetransform (class in neural_compressor.data)": [[197, "neural_compressor.data.ComposeTransform"]], "dataloader (class in neural_compressor.data)": [[197, "neural_compressor.data.DataLoader"]], "dataset (class in neural_compressor.data)": [[197, "neural_compressor.data.Dataset"]], "datasets (class in neural_compressor.data)": [[197, "neural_compressor.data.Datasets"]], "defaultdataloader (class in neural_compressor.data)": [[197, "neural_compressor.data.DefaultDataLoader"]], "filters (class in neural_compressor.data)": [[197, "neural_compressor.data.FILTERS"]], "filter (class in neural_compressor.data)": [[197, "neural_compressor.data.Filter"]], "iterabledataset (class in neural_compressor.data)": [[197, "neural_compressor.data.IterableDataset"]], "labelbalancecocorecordfilter (class in neural_compressor.data)": [[197, "neural_compressor.data.LabelBalanceCOCORecordFilter"]], "labelshift (class in neural_compressor.data)": [[197, "neural_compressor.data.LabelShift"]], "normalizetftransform (class in neural_compressor.data)": [[197, "neural_compressor.data.NormalizeTFTransform"]], "parsedecodecocotransform (class in neural_compressor.data)": [[197, "neural_compressor.data.ParseDecodeCocoTransform"]], "postprocess (class in neural_compressor.data)": [[197, "neural_compressor.data.Postprocess"]], "rescaletftransform (class in neural_compressor.data)": [[197, "neural_compressor.data.RescaleTFTransform"]], "resizetftransform (class in neural_compressor.data)": [[197, "neural_compressor.data.ResizeTFTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data)": [[197, "neural_compressor.data.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data)": [[197, "neural_compressor.data.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data)": [[197, "neural_compressor.data.TRANSFORMS"]], "tensorflowimagerecord (class in neural_compressor.data)": [[197, "neural_compressor.data.TensorflowImageRecord"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data)": [[197, "neural_compressor.data.TensorflowResizeCropImagenetTransform"]], "tensorflowresizewithratio (class in neural_compressor.data)": [[197, "neural_compressor.data.TensorflowResizeWithRatio"]], "batch() (neural_compressor.data.defaultdataloader method)": [[197, "neural_compressor.data.DefaultDataLoader.batch"]], "dataloader (neural_compressor.data.defaultdataloader property)": [[197, "neural_compressor.data.DefaultDataLoader.dataloader"]], "dataset_registry() (in module neural_compressor.data)": [[197, "neural_compressor.data.dataset_registry"]], "filter_registry() (in module neural_compressor.data)": [[197, "neural_compressor.data.filter_registry"]], "get_postprocess_result() (neural_compressor.data.tfsquadv1posttransform method)": [[197, "neural_compressor.data.TFSquadV1PostTransform.get_postprocess_result"]], "neural_compressor.data": [[197, "module-neural_compressor.data"]], "process_result() (neural_compressor.data.tfsquadv1posttransform method)": [[197, "neural_compressor.data.TFSquadV1PostTransform.process_result"]], "register() (neural_compressor.data.transforms method)": [[197, "neural_compressor.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data)": [[197, "neural_compressor.data.transform_registry"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[198, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[198, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[199, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[199, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[199, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[199, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[199, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[199, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[199, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[199, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[199, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[199, "module-neural_compressor.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.data.transforms)": [[200, "neural_compressor.data.transforms.BaseTransform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms)": [[200, "neural_compressor.data.transforms.BilinearImagenetTransform"]], "composetransform (class in neural_compressor.data.transforms)": [[200, "neural_compressor.data.transforms.ComposeTransform"]], "labelshift (class in neural_compressor.data.transforms)": [[200, "neural_compressor.data.transforms.LabelShift"]], "normalizetftransform (class in neural_compressor.data.transforms)": [[200, "neural_compressor.data.transforms.NormalizeTFTransform"]], "parsedecodecocotransform (class in neural_compressor.data.transforms)": [[200, "neural_compressor.data.transforms.ParseDecodeCocoTransform"]], "postprocess (class in neural_compressor.data.transforms)": [[200, "neural_compressor.data.transforms.Postprocess"]], "rescaletftransform (class in neural_compressor.data.transforms)": [[200, "neural_compressor.data.transforms.RescaleTFTransform"]], "resizetftransform (class in neural_compressor.data.transforms)": [[200, "neural_compressor.data.transforms.ResizeTFTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms)": [[200, "neural_compressor.data.transforms.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms)": [[200, "neural_compressor.data.transforms.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms)": [[200, "neural_compressor.data.transforms.TRANSFORMS"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms)": [[200, "neural_compressor.data.transforms.TensorflowResizeCropImagenetTransform"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms)": [[200, "neural_compressor.data.transforms.TensorflowResizeWithRatio"]], "get_postprocess_result() (neural_compressor.data.transforms.tfsquadv1posttransform method)": [[200, "neural_compressor.data.transforms.TFSquadV1PostTransform.get_postprocess_result"]], "neural_compressor.data.transforms": [[200, "module-neural_compressor.data.transforms"]], "process_result() (neural_compressor.data.transforms.tfsquadv1posttransform method)": [[200, "neural_compressor.data.transforms.TFSquadV1PostTransform.process_result"]], "register() (neural_compressor.data.transforms.transforms method)": [[200, "neural_compressor.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data.transforms)": [[200, "neural_compressor.data.transforms.transform_registry"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[201, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[201, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[202, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[202, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[202, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[202, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[202, "neural_compressor.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[202, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[202, "neural_compressor.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[202, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[202, "module-neural_compressor.data.transforms.tokenization"]], "tokenize() (neural_compressor.data.transforms.tokenization.basictokenizer method)": [[202, "neural_compressor.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[202, "neural_compressor.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.data.transforms.tokenization.wordpiecetokenizer method)": [[202, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[202, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.TRANSFORMS"], [203, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.data.transforms.transform.randomresizedcroptftransform method)": [[203, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.data.transforms.transform.randomresizedcroptransform method)": [[203, "neural_compressor.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.data.transforms.transform.tfsquadv1posttransform method)": [[203, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[203, "module-neural_compressor.data.transforms.transform"]], "process_result() (neural_compressor.data.transforms.transform.tfsquadv1posttransform method)": [[203, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.data.transforms.transform.transforms method)": [[203, "neural_compressor.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[203, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[204, "neural_compressor.experimental.benchmark.Benchmark"]], "b_dataloader (neural_compressor.experimental.benchmark.benchmark property)": [[204, "neural_compressor.experimental.benchmark.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark.benchmark property)": [[204, "neural_compressor.experimental.benchmark.Benchmark.b_func"]], "call_one() (neural_compressor.experimental.benchmark.benchmark method)": [[204, "neural_compressor.experimental.benchmark.Benchmark.call_one"]], "config_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[204, "neural_compressor.experimental.benchmark.Benchmark.config_instance"]], "generate_prefix() (neural_compressor.experimental.benchmark.benchmark method)": [[204, "neural_compressor.experimental.benchmark.Benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[204, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[204, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[204, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[204, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[204, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[204, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "metric (neural_compressor.experimental.benchmark.benchmark property)": [[204, "neural_compressor.experimental.benchmark.Benchmark.metric"]], "model (neural_compressor.experimental.benchmark.benchmark property)": [[204, "neural_compressor.experimental.benchmark.Benchmark.model"]], "neural_compressor.experimental.benchmark": [[204, "module-neural_compressor.experimental.benchmark"]], "postprocess (neural_compressor.experimental.benchmark.benchmark property)": [[204, "neural_compressor.experimental.benchmark.Benchmark.postprocess"]], "results (neural_compressor.experimental.benchmark.benchmark property)": [[204, "neural_compressor.experimental.benchmark.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[204, "neural_compressor.experimental.benchmark.Benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[204, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[204, "neural_compressor.experimental.benchmark.set_env_var"]], "summary_benchmark() (neural_compressor.experimental.benchmark.benchmark method)": [[204, "neural_compressor.experimental.benchmark.Benchmark.summary_benchmark"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[205, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[205, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[205, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[205, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "l2divergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.L2Divergence"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[205, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[205, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[205, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[205, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[205, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[205, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[205, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[205, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[205, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.SoftCrossEntropy"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[205, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[205, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[205, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[205, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[205, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[205, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "clear_features() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.clear_features"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[205, "neural_compressor.experimental.common.criterion.criterion_registry"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.init_loss_funcs"]], "loss_cal() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal_sloss"]], "neural_compressor.experimental.common.criterion": [[205, "module-neural_compressor.experimental.common.criterion"]], "register() (neural_compressor.experimental.common.criterion.criterions method)": [[205, "neural_compressor.experimental.common.criterion.Criterions.register"]], "register_hooks_for_models() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.register_hooks_for_models"]], "remove_all_hooks() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.remove_all_hooks"]], "student_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[205, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.student_model"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[205, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.student_targets_loss_cal"]], "teacher_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[205, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.teacher_model"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[205, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_model_forward"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[205, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[205, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_student_loss_cal"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[206, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[206, "module-neural_compressor.experimental.common.dataloader"]], "dataloader (class in neural_compressor.experimental.common)": [[207, "neural_compressor.experimental.common.DataLoader"]], "metric (class in neural_compressor.experimental.common)": [[207, "neural_compressor.experimental.common.Metric"]], "model (class in neural_compressor.experimental.common)": [[207, "neural_compressor.experimental.common.Model"]], "postprocess (class in neural_compressor.experimental.common)": [[207, "neural_compressor.experimental.common.Postprocess"]], "neural_compressor.experimental.common": [[207, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[208, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[208, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[209, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[209, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[209, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[210, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[210, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[210, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[210, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[210, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[210, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[210, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[210, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[210, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "register() (neural_compressor.experimental.common.optimizer.optimizers method)": [[210, "neural_compressor.experimental.common.optimizer.Optimizers.register"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[211, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[211, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[212, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[212, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[212, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[213, "neural_compressor.experimental.component.Component"]], "eval_dataloader (neural_compressor.experimental.component.component property)": [[213, "neural_compressor.experimental.component.Component.eval_dataloader"]], "eval_func (neural_compressor.experimental.component.component property)": [[213, "neural_compressor.experimental.component.Component.eval_func"]], "execute() (neural_compressor.experimental.component.component method)": [[213, "neural_compressor.experimental.component.Component.execute"]], "model (neural_compressor.experimental.component.component property)": [[213, "neural_compressor.experimental.component.Component.model"]], "neural_compressor.experimental.component": [[213, "module-neural_compressor.experimental.component"]], "on_after_compute_loss() (neural_compressor.experimental.component.component method)": [[213, "neural_compressor.experimental.component.Component.on_after_compute_loss"]], "on_after_eval() (neural_compressor.experimental.component.component method)": [[213, "neural_compressor.experimental.component.Component.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.component.component method)": [[213, "neural_compressor.experimental.component.Component.on_after_optimizer_step"]], "on_batch_begin() (neural_compressor.experimental.component.component method)": [[213, "neural_compressor.experimental.component.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component.component method)": [[213, "neural_compressor.experimental.component.Component.on_batch_end"]], "on_before_eval() (neural_compressor.experimental.component.component method)": [[213, "neural_compressor.experimental.component.Component.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.component.component method)": [[213, "neural_compressor.experimental.component.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component.component method)": [[213, "neural_compressor.experimental.component.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component.component method)": [[213, "neural_compressor.experimental.component.Component.on_epoch_end"]], "on_post_grad() (neural_compressor.experimental.component.component method)": [[213, "neural_compressor.experimental.component.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component.component method)": [[213, "neural_compressor.experimental.component.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component.component method)": [[213, "neural_compressor.experimental.component.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component.component method)": [[213, "neural_compressor.experimental.component.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component.component method)": [[213, "neural_compressor.experimental.component.Component.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.component.component method)": [[213, "neural_compressor.experimental.component.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component.component method)": [[213, "neural_compressor.experimental.component.Component.post_process"]], "pre_epoch_begin() (neural_compressor.experimental.component.component method)": [[213, "neural_compressor.experimental.component.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component.component method)": [[213, "neural_compressor.experimental.component.Component.pre_process"]], "prepare() (neural_compressor.experimental.component.component method)": [[213, "neural_compressor.experimental.component.Component.prepare"]], "prepare_qat() (neural_compressor.experimental.component.component method)": [[213, "neural_compressor.experimental.component.Component.prepare_qat"]], "register_hook() (neural_compressor.experimental.component.component method)": [[213, "neural_compressor.experimental.component.Component.register_hook"]], "train_dataloader (neural_compressor.experimental.component.component property)": [[213, "neural_compressor.experimental.component.Component.train_dataloader"]], "train_func (neural_compressor.experimental.component.component property)": [[213, "neural_compressor.experimental.component.Component.train_func"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[214, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader method)": [[214, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader property)": [[214, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[214, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[215, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[216, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader method)": [[216, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader property)": [[216, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[216, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[216, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[217, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[217, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[217, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[217, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[218, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[219, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[219, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[220, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[220, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[220, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[221, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[221, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[222, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[222, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[222, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[222, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[222, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[223, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[223, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[223, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[223, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[223, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[223, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[224, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[224, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[224, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[224, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[224, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[224, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[224, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[224, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[224, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.experimental.data.datasets.bert_dataset.inputfeatures method)": [[224, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[225, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[225, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[225, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[225, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[225, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.experimental.data.datasets.dataset.mnist property)": [[226, "neural_compressor.experimental.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[226, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[226, "neural_compressor.experimental.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[226, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[226, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.experimental.data.datasets.dataset": [[226, "module-neural_compressor.experimental.data.datasets.dataset"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.fashionmnist method)": [[226, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[226, "neural_compressor.experimental.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[227, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[227, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[228, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[228, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[228, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[229, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[229, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[229, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[229, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[229, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[229, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[229, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "dataset (class in neural_compressor.experimental.data.datasets)": [[230, "neural_compressor.experimental.data.datasets.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets)": [[230, "neural_compressor.experimental.data.datasets.Datasets"]], "iterabledataset (class in neural_compressor.experimental.data.datasets)": [[230, "neural_compressor.experimental.data.datasets.IterableDataset"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets)": [[230, "neural_compressor.experimental.data.datasets.dataset_registry"]], "neural_compressor.experimental.data.datasets": [[230, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[231, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[231, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[232, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[232, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[232, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[233, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[233, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[233, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[233, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[233, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[233, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[233, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[233, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[233, "module-neural_compressor.experimental.data.filters.filter"]], "filters (class in neural_compressor.experimental.data.filters)": [[234, "neural_compressor.experimental.data.filters.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters)": [[234, "neural_compressor.experimental.data.filters.Filter"]], "filter_registry() (in module neural_compressor.experimental.data.filters)": [[234, "neural_compressor.experimental.data.filters.filter_registry"]], "neural_compressor.experimental.data.filters": [[234, "module-neural_compressor.experimental.data.filters"]], "basetransform (class in neural_compressor.experimental.data)": [[235, "neural_compressor.experimental.data.BaseTransform"]], "dataset (class in neural_compressor.experimental.data)": [[235, "neural_compressor.experimental.data.Dataset"]], "datasets (class in neural_compressor.experimental.data)": [[235, "neural_compressor.experimental.data.Datasets"]], "filters (class in neural_compressor.experimental.data)": [[235, "neural_compressor.experimental.data.FILTERS"]], "filter (class in neural_compressor.experimental.data)": [[235, "neural_compressor.experimental.data.Filter"]], "iterabledataset (class in neural_compressor.experimental.data)": [[235, "neural_compressor.experimental.data.IterableDataset"]], "transforms (class in neural_compressor.experimental.data)": [[235, "neural_compressor.experimental.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.experimental.data)": [[235, "neural_compressor.experimental.data.dataset_registry"]], "filter_registry() (in module neural_compressor.experimental.data)": [[235, "neural_compressor.experimental.data.filter_registry"]], "neural_compressor.experimental.data": [[235, "module-neural_compressor.experimental.data"]], "register() (neural_compressor.experimental.data.transforms method)": [[235, "neural_compressor.experimental.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data)": [[235, "neural_compressor.experimental.data.transform_registry"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[236, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[236, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[236, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[236, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[236, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[236, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[236, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[236, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[236, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[236, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.experimental.data.transforms)": [[237, "neural_compressor.experimental.data.transforms.BaseTransform"]], "transforms (class in neural_compressor.experimental.data.transforms)": [[237, "neural_compressor.experimental.data.transforms.TRANSFORMS"]], "neural_compressor.experimental.data.transforms": [[237, "module-neural_compressor.experimental.data.transforms"]], "register() (neural_compressor.experimental.data.transforms.transforms method)": [[237, "neural_compressor.experimental.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms)": [[237, "neural_compressor.experimental.data.transforms.transform_registry"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[238, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[238, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[238, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[238, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[238, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[238, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[238, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[238, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[238, "module-neural_compressor.experimental.data.transforms.tokenization"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.basictokenizer method)": [[238, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[238, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.wordpiecetokenizer method)": [[238, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[238, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [239, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptftransform method)": [[239, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptransform method)": [[239, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[239, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[239, "module-neural_compressor.experimental.data.transforms.transform"]], "process_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[239, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.experimental.data.transforms.transform.transforms method)": [[239, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[239, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[240, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[240, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[240, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[240, "neural_compressor.experimental.distillation.Distillation.best_score"]], "create_criterion() (neural_compressor.experimental.distillation.distillation method)": [[240, "neural_compressor.experimental.distillation.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation.distillation method)": [[240, "neural_compressor.experimental.distillation.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation.distillation property)": [[240, "neural_compressor.experimental.distillation.Distillation.criterion"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[240, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "evaluation_distributed (neural_compressor.experimental.distillation.distillation property)": [[240, "neural_compressor.experimental.distillation.Distillation.evaluation_distributed"]], "execute() (neural_compressor.experimental.distillation.distillation method)": [[240, "neural_compressor.experimental.distillation.Distillation.execute"]], "generate_hooks() (neural_compressor.experimental.distillation.distillation method)": [[240, "neural_compressor.experimental.distillation.Distillation.generate_hooks"]], "init_train_cfg() (neural_compressor.experimental.distillation.distillation method)": [[240, "neural_compressor.experimental.distillation.Distillation.init_train_cfg"]], "neural_compressor.experimental.distillation": [[240, "module-neural_compressor.experimental.distillation"]], "on_post_forward() (neural_compressor.experimental.distillation.distillation method)": [[240, "neural_compressor.experimental.distillation.Distillation.on_post_forward"]], "optimizer (neural_compressor.experimental.distillation.distillation property)": [[240, "neural_compressor.experimental.distillation.Distillation.optimizer"]], "pre_process() (neural_compressor.experimental.distillation.distillation method)": [[240, "neural_compressor.experimental.distillation.Distillation.pre_process"]], "prepare() (neural_compressor.experimental.distillation.distillation method)": [[240, "neural_compressor.experimental.distillation.Distillation.prepare"]], "student_model (neural_compressor.experimental.distillation.distillation property)": [[240, "neural_compressor.experimental.distillation.Distillation.student_model"]], "teacher_model (neural_compressor.experimental.distillation.distillation property)": [[240, "neural_compressor.experimental.distillation.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation.distillation property)": [[240, "neural_compressor.experimental.distillation.Distillation.train_cfg"]], "train_distributed (neural_compressor.experimental.distillation.distillation property)": [[240, "neural_compressor.experimental.distillation.Distillation.train_distributed"]], "neural_compressor.experimental.export": [[241, "module-neural_compressor.experimental.export"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export)": [[241, "neural_compressor.experimental.export.onnx_qlinear_to_qdq"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export)": [[241, "neural_compressor.experimental.export.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export)": [[241, "neural_compressor.experimental.export.tf_to_int8_onnx"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export)": [[241, "neural_compressor.experimental.export.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export)": [[241, "neural_compressor.experimental.export.torch_to_int8_onnx"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[242, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[242, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[242, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[243, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[243, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[243, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "build_scale_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[244, "neural_compressor.experimental.export.torch2onnx.build_scale_mapping"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[244, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[244, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[244, "module-neural_compressor.experimental.export.torch2onnx"]], "qdq_fp32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[244, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias"]], "qdq_fp32_bias_qdq() (in module neural_compressor.experimental.export.torch2onnx)": [[244, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias_qdq"]], "qdq_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[244, "neural_compressor.experimental.export.torch2onnx.qdq_int32_bias"]], "recalculate_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[244, "neural_compressor.experimental.export.torch2onnx.recalculate_bias"]], "remove_nodes_by_name() (in module neural_compressor.experimental.export.torch2onnx)": [[244, "neural_compressor.experimental.export.torch2onnx.remove_nodes_by_name"]], "set_data_type() (in module neural_compressor.experimental.export.torch2onnx)": [[244, "neural_compressor.experimental.export.torch2onnx.set_data_type"]], "set_scale_info() (in module neural_compressor.experimental.export.torch2onnx)": [[244, "neural_compressor.experimental.export.torch2onnx.set_scale_info"]], "sub_graph_with_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[244, "neural_compressor.experimental.export.torch2onnx.sub_graph_with_int32_bias"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[244, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[244, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "update_weight_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[244, "neural_compressor.experimental.export.torch2onnx.update_weight_bias"]], "dummydatareader (class in neural_compressor.experimental.export.utils)": [[245, "neural_compressor.experimental.export.utils.DummyDataReader"]], "onnx2numpy_dtype() (in module neural_compressor.experimental.export.utils)": [[245, "neural_compressor.experimental.export.utils.ONNX2Numpy_dtype"]], "get_next() (neural_compressor.experimental.export.utils.dummydatareader method)": [[245, "neural_compressor.experimental.export.utils.DummyDataReader.get_next"]], "neural_compressor.experimental.export.utils": [[245, "module-neural_compressor.experimental.export.utils"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[246, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "dataset() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[246, "neural_compressor.experimental.graph_optimization.Graph_Optimization.dataset"]], "eval_dataloader (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[246, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_dataloader"]], "eval_func (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[246, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_func"]], "input (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[246, "neural_compressor.experimental.graph_optimization.Graph_Optimization.input"]], "metric (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[246, "neural_compressor.experimental.graph_optimization.Graph_Optimization.metric"]], "model (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[246, "neural_compressor.experimental.graph_optimization.Graph_Optimization.model"]], "neural_compressor.experimental.graph_optimization": [[246, "module-neural_compressor.experimental.graph_optimization"]], "output (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[246, "neural_compressor.experimental.graph_optimization.Graph_Optimization.output"]], "postprocess (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[246, "neural_compressor.experimental.graph_optimization.Graph_Optimization.postprocess"]], "precisions (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[246, "neural_compressor.experimental.graph_optimization.Graph_Optimization.precisions"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[246, "neural_compressor.experimental.graph_optimization.Graph_Optimization.set_config_by_model"]], "benchmark (class in neural_compressor.experimental)": [[247, "neural_compressor.experimental.Benchmark"]], "component (class in neural_compressor.experimental)": [[247, "neural_compressor.experimental.Component"]], "distillation (class in neural_compressor.experimental)": [[247, "neural_compressor.experimental.Distillation"]], "graph_optimization (class in neural_compressor.experimental)": [[247, "neural_compressor.experimental.Graph_Optimization"]], "mixedprecision (class in neural_compressor.experimental)": [[247, "neural_compressor.experimental.MixedPrecision"]], "modelconversion (class in neural_compressor.experimental)": [[247, "neural_compressor.experimental.ModelConversion"]], "nas (class in neural_compressor.experimental)": [[247, "neural_compressor.experimental.NAS"]], "pruning (class in neural_compressor.experimental)": [[247, "neural_compressor.experimental.Pruning"]], "quantization (class in neural_compressor.experimental)": [[247, "neural_compressor.experimental.Quantization"]], "_epoch_ran (neural_compressor.experimental.distillation attribute)": [[247, "neural_compressor.experimental.Distillation._epoch_ran"]], "b_dataloader (neural_compressor.experimental.benchmark property)": [[247, "neural_compressor.experimental.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark property)": [[247, "neural_compressor.experimental.Benchmark.b_func"]], "best_model (neural_compressor.experimental.distillation attribute)": [[247, "neural_compressor.experimental.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation attribute)": [[247, "neural_compressor.experimental.Distillation.best_score"]], "calib_dataloader (neural_compressor.experimental.quantization property)": [[247, "neural_compressor.experimental.Quantization.calib_dataloader"]], "call_one() (neural_compressor.experimental.benchmark method)": [[247, "neural_compressor.experimental.Benchmark.call_one"]], "conf (neural_compressor.experimental.pruning attribute)": [[247, "neural_compressor.experimental.Pruning.conf"]], "config_instance() (neural_compressor.experimental.benchmark method)": [[247, "neural_compressor.experimental.Benchmark.config_instance"]], "create_criterion() (neural_compressor.experimental.distillation method)": [[247, "neural_compressor.experimental.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation method)": [[247, "neural_compressor.experimental.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation property)": [[247, "neural_compressor.experimental.Distillation.criterion"]], "dataset() (neural_compressor.experimental.graph_optimization method)": [[247, "neural_compressor.experimental.Graph_Optimization.dataset"]], "dataset() (neural_compressor.experimental.modelconversion method)": [[247, "neural_compressor.experimental.ModelConversion.dataset"]], "dataset() (neural_compressor.experimental.quantization method)": [[247, "neural_compressor.experimental.Quantization.dataset"]], "destination (neural_compressor.experimental.modelconversion property)": [[247, "neural_compressor.experimental.ModelConversion.destination"]], "distributed_execute() (neural_compressor.experimental.quantization method)": [[247, "neural_compressor.experimental.Quantization.distributed_execute"]], "eval_dataloader (neural_compressor.experimental.component property)": [[247, "neural_compressor.experimental.Component.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.graph_optimization property)": [[247, "neural_compressor.experimental.Graph_Optimization.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.modelconversion property)": [[247, "neural_compressor.experimental.ModelConversion.eval_dataloader"]], "eval_frequency (neural_compressor.experimental.distillation attribute)": [[247, "neural_compressor.experimental.Distillation.eval_frequency"]], "eval_func (neural_compressor.experimental.component property)": [[247, "neural_compressor.experimental.Component.eval_func"]], "eval_func (neural_compressor.experimental.graph_optimization property)": [[247, "neural_compressor.experimental.Graph_Optimization.eval_func"]], "eval_func (neural_compressor.experimental.modelconversion property)": [[247, "neural_compressor.experimental.ModelConversion.eval_func"]], "evaluation_distributed (neural_compressor.experimental.distillation property)": [[247, "neural_compressor.experimental.Distillation.evaluation_distributed"]], "evaluation_distributed (neural_compressor.experimental.pruning property)": [[247, "neural_compressor.experimental.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.component method)": [[247, "neural_compressor.experimental.Component.execute"]], "execute() (neural_compressor.experimental.distillation method)": [[247, "neural_compressor.experimental.Distillation.execute"]], "execute() (neural_compressor.experimental.pruning method)": [[247, "neural_compressor.experimental.Pruning.execute"]], "execute() (neural_compressor.experimental.quantization method)": [[247, "neural_compressor.experimental.Quantization.execute"]], "generate_hooks() (neural_compressor.experimental.distillation method)": [[247, "neural_compressor.experimental.Distillation.generate_hooks"]], "generate_hooks() (neural_compressor.experimental.pruning method)": [[247, "neural_compressor.experimental.Pruning.generate_hooks"]], "generate_prefix() (neural_compressor.experimental.benchmark method)": [[247, "neural_compressor.experimental.Benchmark.generate_prefix"]], "generate_pruners() (neural_compressor.experimental.pruning method)": [[247, "neural_compressor.experimental.Pruning.generate_pruners"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning method)": [[247, "neural_compressor.experimental.Pruning.get_sparsity_ratio"]], "init_train_cfg() (neural_compressor.experimental.distillation method)": [[247, "neural_compressor.experimental.Distillation.init_train_cfg"]], "input (neural_compressor.experimental.graph_optimization property)": [[247, "neural_compressor.experimental.Graph_Optimization.input"]], "metric (neural_compressor.experimental.benchmark property)": [[247, "neural_compressor.experimental.Benchmark.metric"]], "metric (neural_compressor.experimental.graph_optimization property)": [[247, "neural_compressor.experimental.Graph_Optimization.metric"]], "metric (neural_compressor.experimental.modelconversion property)": [[247, "neural_compressor.experimental.ModelConversion.metric"]], "metric (neural_compressor.experimental.quantization property)": [[247, "neural_compressor.experimental.Quantization.metric"]], "model (neural_compressor.experimental.benchmark property)": [[247, "neural_compressor.experimental.Benchmark.model"]], "model (neural_compressor.experimental.component property)": [[247, "neural_compressor.experimental.Component.model"]], "model (neural_compressor.experimental.graph_optimization property)": [[247, "neural_compressor.experimental.Graph_Optimization.model"]], "model (neural_compressor.experimental.modelconversion property)": [[247, "neural_compressor.experimental.ModelConversion.model"]], "model (neural_compressor.experimental.quantization property)": [[247, "neural_compressor.experimental.Quantization.model"]], "neural_compressor.experimental": [[247, "module-neural_compressor.experimental"]], "objective (neural_compressor.experimental.quantization property)": [[247, "neural_compressor.experimental.Quantization.objective"]], "on_after_compute_loss() (neural_compressor.experimental.component method)": [[247, "neural_compressor.experimental.Component.on_after_compute_loss"]], "on_after_eval() (neural_compressor.experimental.component method)": [[247, "neural_compressor.experimental.Component.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.component method)": [[247, "neural_compressor.experimental.Component.on_after_optimizer_step"]], "on_batch_begin() (neural_compressor.experimental.component method)": [[247, "neural_compressor.experimental.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component method)": [[247, "neural_compressor.experimental.Component.on_batch_end"]], "on_before_eval() (neural_compressor.experimental.component method)": [[247, "neural_compressor.experimental.Component.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.component method)": [[247, "neural_compressor.experimental.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component method)": [[247, "neural_compressor.experimental.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component method)": [[247, "neural_compressor.experimental.Component.on_epoch_end"]], "on_post_forward() (neural_compressor.experimental.distillation method)": [[247, "neural_compressor.experimental.Distillation.on_post_forward"]], "on_post_grad() (neural_compressor.experimental.component method)": [[247, "neural_compressor.experimental.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component method)": [[247, "neural_compressor.experimental.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component method)": [[247, "neural_compressor.experimental.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component method)": [[247, "neural_compressor.experimental.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component method)": [[247, "neural_compressor.experimental.Component.on_train_end"]], "optimizer (neural_compressor.experimental.distillation property)": [[247, "neural_compressor.experimental.Distillation.optimizer"]], "output (neural_compressor.experimental.graph_optimization property)": [[247, "neural_compressor.experimental.Graph_Optimization.output"]], "post_epoch_end() (neural_compressor.experimental.component method)": [[247, "neural_compressor.experimental.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component method)": [[247, "neural_compressor.experimental.Component.post_process"]], "postprocess (neural_compressor.experimental.benchmark property)": [[247, "neural_compressor.experimental.Benchmark.postprocess"]], "postprocess (neural_compressor.experimental.graph_optimization property)": [[247, "neural_compressor.experimental.Graph_Optimization.postprocess"]], "postprocess (neural_compressor.experimental.modelconversion property)": [[247, "neural_compressor.experimental.ModelConversion.postprocess"]], "postprocess (neural_compressor.experimental.quantization property)": [[247, "neural_compressor.experimental.Quantization.postprocess"]], "pre_epoch_begin() (neural_compressor.experimental.component method)": [[247, "neural_compressor.experimental.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component method)": [[247, "neural_compressor.experimental.Component.pre_process"]], "pre_process() (neural_compressor.experimental.distillation method)": [[247, "neural_compressor.experimental.Distillation.pre_process"]], "pre_process() (neural_compressor.experimental.pruning method)": [[247, "neural_compressor.experimental.Pruning.pre_process"]], "pre_process() (neural_compressor.experimental.quantization method)": [[247, "neural_compressor.experimental.Quantization.pre_process"]], "precisions (neural_compressor.experimental.graph_optimization property)": [[247, "neural_compressor.experimental.Graph_Optimization.precisions"]], "precisions (neural_compressor.experimental.mixedprecision property)": [[247, "neural_compressor.experimental.MixedPrecision.precisions"]], "prepare() (neural_compressor.experimental.component method)": [[247, "neural_compressor.experimental.Component.prepare"]], "prepare() (neural_compressor.experimental.distillation method)": [[247, "neural_compressor.experimental.Distillation.prepare"]], "prepare() (neural_compressor.experimental.pruning method)": [[247, "neural_compressor.experimental.Pruning.prepare"]], "prepare_qat() (neural_compressor.experimental.component method)": [[247, "neural_compressor.experimental.Component.prepare_qat"]], "pruners (neural_compressor.experimental.pruning attribute)": [[247, "neural_compressor.experimental.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning property)": [[247, "neural_compressor.experimental.Pruning.pruning_func"]], "q_func (neural_compressor.experimental.quantization property)": [[247, "neural_compressor.experimental.Quantization.q_func"]], "register_hook() (neural_compressor.experimental.component method)": [[247, "neural_compressor.experimental.Component.register_hook"]], "results (neural_compressor.experimental.benchmark property)": [[247, "neural_compressor.experimental.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark method)": [[247, "neural_compressor.experimental.Benchmark.run_instance"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization method)": [[247, "neural_compressor.experimental.Graph_Optimization.set_config_by_model"]], "set_config_by_model() (neural_compressor.experimental.mixedprecision method)": [[247, "neural_compressor.experimental.MixedPrecision.set_config_by_model"]], "source (neural_compressor.experimental.modelconversion property)": [[247, "neural_compressor.experimental.ModelConversion.source"]], "student_model (neural_compressor.experimental.distillation property)": [[247, "neural_compressor.experimental.Distillation.student_model"]], "summary_benchmark() (neural_compressor.experimental.benchmark method)": [[247, "neural_compressor.experimental.Benchmark.summary_benchmark"]], "teacher_model (neural_compressor.experimental.distillation property)": [[247, "neural_compressor.experimental.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation property)": [[247, "neural_compressor.experimental.Distillation.train_cfg"]], "train_dataloader (neural_compressor.experimental.component property)": [[247, "neural_compressor.experimental.Component.train_dataloader"]], "train_distributed (neural_compressor.experimental.distillation property)": [[247, "neural_compressor.experimental.Distillation.train_distributed"]], "train_distributed (neural_compressor.experimental.pruning property)": [[247, "neural_compressor.experimental.Pruning.train_distributed"]], "train_func (neural_compressor.experimental.component property)": [[247, "neural_compressor.experimental.Component.train_func"]], "update_items_for_all_pruners() (neural_compressor.experimental.pruning method)": [[247, "neural_compressor.experimental.Pruning.update_items_for_all_pruners"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[248, "neural_compressor.experimental.metric.bleu.BLEU"], [554, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[248, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[248, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[248, "neural_compressor.experimental.metric.bleu.BLEU.labels"], [554, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[248, "module-neural_compressor.experimental.metric.bleu"], [554, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[248, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[248, "neural_compressor.experimental.metric.bleu.BLEU.predictions"], [554, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "property_chars() (neural_compressor.experimental.metric.bleu.unicoderegex method)": [[248, "neural_compressor.experimental.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[248, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "reset() (neural_compressor.experimental.metric.bleu.bleu method)": [[248, "neural_compressor.experimental.metric.bleu.BLEU.reset"], [554, "neural_compressor.experimental.metric.bleu.BLEU.reset"]], "result() (neural_compressor.experimental.metric.bleu.bleu method)": [[248, "neural_compressor.experimental.metric.bleu.BLEU.result"], [554, "neural_compressor.experimental.metric.bleu.BLEU.result"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[248, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "update() (neural_compressor.experimental.metric.bleu.bleu method)": [[248, "neural_compressor.experimental.metric.bleu.BLEU.update"], [554, "neural_compressor.experimental.metric.bleu.BLEU.update"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[249, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[249, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[250, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[251, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[251, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[251, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[251, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[251, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[251, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[251, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[251, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[251, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.experimental.metric.coco_tools.cocowrapper method)": [[251, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[251, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[251, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[251, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[251, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[252, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[252, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[252, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[252, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[252, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[253, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[253, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[253, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[253, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[253, "neural_compressor.experimental.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.experimental.metric)": [[254, "neural_compressor.experimental.metric.BaseMetric"]], "metrics (class in neural_compressor.experimental.metric)": [[254, "neural_compressor.experimental.metric.METRICS"]], "hvd (neural_compressor.experimental.metric.basemetric property)": [[254, "neural_compressor.experimental.metric.BaseMetric.hvd"]], "metric (neural_compressor.experimental.metric.basemetric property)": [[254, "neural_compressor.experimental.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric)": [[254, "neural_compressor.experimental.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metrics attribute)": [[254, "neural_compressor.experimental.metric.METRICS.metrics"]], "neural_compressor.experimental.metric": [[254, "module-neural_compressor.experimental.metric"]], "register() (neural_compressor.experimental.metric.metrics method)": [[254, "neural_compressor.experimental.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.basemetric method)": [[254, "neural_compressor.experimental.metric.BaseMetric.reset"]], "result() (neural_compressor.experimental.metric.basemetric method)": [[254, "neural_compressor.experimental.metric.BaseMetric.result"]], "update() (neural_compressor.experimental.metric.basemetric method)": [[254, "neural_compressor.experimental.metric.BaseMetric.update"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[255, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[255, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[255, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[255, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[255, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[255, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[255, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[255, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[255, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[255, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[255, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[255, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[255, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[255, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[255, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[255, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[255, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[255, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[255, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[255, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[255, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[255, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[255, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[255, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[255, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[255, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[255, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[255, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[255, "neural_compressor.experimental.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.experimental.metric.metric.basemetric property)": [[255, "neural_compressor.experimental.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[255, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[255, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[255, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[255, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[255, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[255, "neural_compressor.experimental.metric.metric.mIOU"]], "metric (neural_compressor.experimental.metric.metric.basemetric property)": [[255, "neural_compressor.experimental.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[255, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[255, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[255, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[255, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[255, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[255, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[255, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[255, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[255, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[255, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[255, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[255, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[255, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[255, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[255, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[255, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "register() (neural_compressor.experimental.metric.metric.metrics method)": [[255, "neural_compressor.experimental.metric.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.metric.accuracy method)": [[255, "neural_compressor.experimental.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.experimental.metric.metric.basemetric method)": [[255, "neural_compressor.experimental.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[255, "neural_compressor.experimental.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.experimental.metric.metric.f1 method)": [[255, "neural_compressor.experimental.metric.metric.F1.reset"]], "reset() (neural_compressor.experimental.metric.metric.generaltopk method)": [[255, "neural_compressor.experimental.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.loss method)": [[255, "neural_compressor.experimental.metric.metric.Loss.reset"]], "reset() (neural_compressor.experimental.metric.metric.mae method)": [[255, "neural_compressor.experimental.metric.metric.MAE.reset"]], "reset() (neural_compressor.experimental.metric.metric.mse method)": [[255, "neural_compressor.experimental.metric.metric.MSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[255, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[255, "neural_compressor.experimental.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.experimental.metric.metric.rmse method)": [[255, "neural_compressor.experimental.metric.metric.RMSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.roc method)": [[255, "neural_compressor.experimental.metric.metric.ROC.reset"]], "reset() (neural_compressor.experimental.metric.metric.squadf1 method)": [[255, "neural_compressor.experimental.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[255, "neural_compressor.experimental.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[255, "neural_compressor.experimental.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[255, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[255, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[255, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.miou method)": [[255, "neural_compressor.experimental.metric.metric.mIOU.reset"]], "result() (neural_compressor.experimental.metric.metric.accuracy method)": [[255, "neural_compressor.experimental.metric.metric.Accuracy.result"]], "result() (neural_compressor.experimental.metric.metric.basemetric method)": [[255, "neural_compressor.experimental.metric.metric.BaseMetric.result"]], "result() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[255, "neural_compressor.experimental.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.experimental.metric.metric.f1 method)": [[255, "neural_compressor.experimental.metric.metric.F1.result"]], "result() (neural_compressor.experimental.metric.metric.generaltopk method)": [[255, "neural_compressor.experimental.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.experimental.metric.metric.loss method)": [[255, "neural_compressor.experimental.metric.metric.Loss.result"]], "result() (neural_compressor.experimental.metric.metric.mae method)": [[255, "neural_compressor.experimental.metric.metric.MAE.result"]], "result() (neural_compressor.experimental.metric.metric.mse method)": [[255, "neural_compressor.experimental.metric.metric.MSE.result"]], "result() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[255, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.experimental.metric.metric.rmse method)": [[255, "neural_compressor.experimental.metric.metric.RMSE.result"]], "result() (neural_compressor.experimental.metric.metric.roc method)": [[255, "neural_compressor.experimental.metric.metric.ROC.result"]], "result() (neural_compressor.experimental.metric.metric.squadf1 method)": [[255, "neural_compressor.experimental.metric.metric.SquadF1.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[255, "neural_compressor.experimental.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[255, "neural_compressor.experimental.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[255, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[255, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[255, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.experimental.metric.metric.miou method)": [[255, "neural_compressor.experimental.metric.metric.mIOU.result"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[255, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[255, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[255, "neural_compressor.experimental.metric.metric.Loss.sum"]], "update() (neural_compressor.experimental.metric.metric.accuracy method)": [[255, "neural_compressor.experimental.metric.metric.Accuracy.update"]], "update() (neural_compressor.experimental.metric.metric.basemetric method)": [[255, "neural_compressor.experimental.metric.metric.BaseMetric.update"]], "update() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[255, "neural_compressor.experimental.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.experimental.metric.metric.f1 method)": [[255, "neural_compressor.experimental.metric.metric.F1.update"]], "update() (neural_compressor.experimental.metric.metric.generaltopk method)": [[255, "neural_compressor.experimental.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.experimental.metric.metric.loss method)": [[255, "neural_compressor.experimental.metric.metric.Loss.update"]], "update() (neural_compressor.experimental.metric.metric.mae method)": [[255, "neural_compressor.experimental.metric.metric.MAE.update"]], "update() (neural_compressor.experimental.metric.metric.mse method)": [[255, "neural_compressor.experimental.metric.metric.MSE.update"]], "update() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[255, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[255, "neural_compressor.experimental.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.experimental.metric.metric.rmse method)": [[255, "neural_compressor.experimental.metric.metric.RMSE.update"]], "update() (neural_compressor.experimental.metric.metric.roc method)": [[255, "neural_compressor.experimental.metric.metric.ROC.update"]], "update() (neural_compressor.experimental.metric.metric.squadf1 method)": [[255, "neural_compressor.experimental.metric.metric.SquadF1.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[255, "neural_compressor.experimental.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[255, "neural_compressor.experimental.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[255, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[255, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[255, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.experimental.metric.metric.miou method)": [[255, "neural_compressor.experimental.metric.metric.mIOU.update"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[256, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[256, "module-neural_compressor.experimental.mixed_precision"]], "precisions (neural_compressor.experimental.mixed_precision.mixedprecision property)": [[256, "neural_compressor.experimental.mixed_precision.MixedPrecision.precisions"]], "set_config_by_model() (neural_compressor.experimental.mixed_precision.mixedprecision method)": [[256, "neural_compressor.experimental.mixed_precision.MixedPrecision.set_config_by_model"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[257, "neural_compressor.experimental.model_conversion.ModelConversion"]], "dataset() (neural_compressor.experimental.model_conversion.modelconversion method)": [[257, "neural_compressor.experimental.model_conversion.ModelConversion.dataset"]], "destination (neural_compressor.experimental.model_conversion.modelconversion property)": [[257, "neural_compressor.experimental.model_conversion.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.model_conversion.modelconversion property)": [[257, "neural_compressor.experimental.model_conversion.ModelConversion.eval_dataloader"]], "eval_func (neural_compressor.experimental.model_conversion.modelconversion property)": [[257, "neural_compressor.experimental.model_conversion.ModelConversion.eval_func"]], "metric (neural_compressor.experimental.model_conversion.modelconversion property)": [[257, "neural_compressor.experimental.model_conversion.ModelConversion.metric"]], "model (neural_compressor.experimental.model_conversion.modelconversion property)": [[257, "neural_compressor.experimental.model_conversion.ModelConversion.model"]], "neural_compressor.experimental.model_conversion": [[257, "module-neural_compressor.experimental.model_conversion"]], "postprocess (neural_compressor.experimental.model_conversion.modelconversion property)": [[257, "neural_compressor.experimental.model_conversion.ModelConversion.postprocess"]], "source (neural_compressor.experimental.model_conversion.modelconversion property)": [[257, "neural_compressor.experimental.model_conversion.ModelConversion.source"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[258, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "estimate() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[258, "neural_compressor.experimental.nas.basic_nas.BasicNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[258, "neural_compressor.experimental.nas.basic_nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[258, "neural_compressor.experimental.nas.basic_nas.BasicNAS.init_by_cfg"]], "neural_compressor.experimental.nas.basic_nas": [[258, "module-neural_compressor.experimental.nas.basic_nas"]], "pre_process() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[258, "neural_compressor.experimental.nas.basic_nas.BasicNAS.pre_process"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[259, "neural_compressor.experimental.nas.dynas.DyNAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[259, "neural_compressor.experimental.nas.dynas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[259, "neural_compressor.experimental.nas.dynas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[259, "neural_compressor.experimental.nas.dynas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.dynas.dynas method)": [[259, "neural_compressor.experimental.nas.dynas.DyNAS.estimate"]], "init_cfg() (neural_compressor.experimental.nas.dynas.dynas method)": [[259, "neural_compressor.experimental.nas.dynas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas.dynas method)": [[259, "neural_compressor.experimental.nas.dynas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas.dynas": [[259, "module-neural_compressor.experimental.nas.dynas"]], "search() (neural_compressor.experimental.nas.dynas.dynas method)": [[259, "neural_compressor.experimental.nas.dynas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas.dynas method)": [[259, "neural_compressor.experimental.nas.dynas.DyNAS.select_model_arch"]], "parametermanager (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[260, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager"]], "transformerltencoding (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[260, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager static method)": [[260, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.create_training_set"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.transformerltencoding method)": [[260, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding.create_training_set"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[260, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.import_csv"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.transformerltencoding method)": [[260, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding.import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[260, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "onehot_generic() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[260, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.onehot_generic"]], "process_param_dict() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[260, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.process_param_dict"]], "random_sample() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[260, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_sample"]], "random_samples() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[260, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_samples"]], "set_seed() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[260, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.set_seed"]], "translate2param() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[260, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2param"]], "translate2pymoo() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[260, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2pymoo"]], "predictor (class in neural_compressor.experimental.nas.dynast.dynas_predictor)": [[261, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor"]], "get_metrics() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[261, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_metrics"]], "get_parameters() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[261, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_parameters"]], "load() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[261, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.load"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[261, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "predict() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[261, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.predict"]], "save() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[261, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.save"]], "train() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[261, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.train"]], "problemmultiobjective (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[262, "neural_compressor.experimental.nas.dynast.dynas_search.ProblemMultiObjective"]], "searchalgomanager (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[262, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager"]], "configure_age() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[262, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_age"]], "configure_nsga2() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[262, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_nsga2"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[262, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "run_search() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[262, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.run_search"]], "evaluationinterface (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[263, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface"]], "evaluationinterfacemobilenetv3 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[263, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3"]], "evaluationinterfaceresnet50 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[263, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50"]], "evaluationinterfacetransformerlt (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[263, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT"]], "ofarunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[263, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner"]], "runner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[263, "neural_compressor.experimental.nas.dynast.dynas_utils.Runner"]], "torchvisionreference (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[263, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference"]], "transformerltrunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[263, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[263, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.clear_csv"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacetransformerlt method)": [[263, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT.clear_csv"]], "estimate_accuracy_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[263, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_accuracy_top1"]], "estimate_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[263, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_latency"]], "estimate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[263, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_macs"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[263, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacemobilenetv3 method)": [[263, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfaceresnet50 method)": [[263, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacetransformerlt method)": [[263, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT.eval_subnet"]], "get_macs() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[263, "neural_compressor.experimental.nas.dynast.dynas_utils.get_macs"]], "get_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[263, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.get_subnet"]], "get_torchvision_model() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[263, "neural_compressor.experimental.nas.dynast.dynas_utils.get_torchvision_model"]], "measure_latency() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[263, "neural_compressor.experimental.nas.dynast.dynas_utils.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[263, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[263, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.transformerltrunner method)": [[263, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner.measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[263, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[263, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[263, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.transformerltrunner method)": [[263, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner.validate_macs"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[263, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_top1"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[263, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_top1"]], "neural_compressor.experimental.nas.dynast": [[264, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[265, "module-neural_compressor.experimental.nas.dynast.supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[266, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"]], "multiheadattentionsuper (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[267, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.multiheadattentionsuper method)": [[267, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper.forward"]], "get_incremental_state() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[267, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.get_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[267, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"]], "reorder_incremental_state() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.multiheadattentionsuper method)": [[267, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper.reorder_incremental_state"]], "set_incremental_state() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[267, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.set_incremental_state"]], "compute_bleu() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[268, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_bleu"]], "compute_latency() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[268, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_latency"]], "compute_macs() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[268, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[268, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"]], "transformerdecoder (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[269, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder"]], "transformerdecoderlayer (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[269, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer"]], "transformerencoder (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[269, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder"]], "transformerencoderlayer (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[269, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer"]], "transformersupernetwork (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[269, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerSuperNetwork"]], "extract_features() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[269, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.extract_features"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[269, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoderlayer method)": [[269, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[269, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoderlayer method)": [[269, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer.forward"]], "max_positions() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[269, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.max_positions"]], "max_positions() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[269, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.max_positions"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[269, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"]], "output_layer() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[269, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.output_layer"]], "reorder_encoder_out() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[269, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.reorder_encoder_out"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[269, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.upgrade_state_dict_named"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[269, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.upgrade_state_dict_named"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoderlayer method)": [[269, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer.upgrade_state_dict_named"]], "basicnas (class in neural_compressor.experimental.nas)": [[270, "neural_compressor.experimental.nas.BasicNAS"]], "dynas (class in neural_compressor.experimental.nas)": [[270, "neural_compressor.experimental.nas.DyNAS"]], "nas (class in neural_compressor.experimental.nas)": [[270, "neural_compressor.experimental.nas.NAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas method)": [[270, "neural_compressor.experimental.nas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas method)": [[270, "neural_compressor.experimental.nas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas method)": [[270, "neural_compressor.experimental.nas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.basicnas method)": [[270, "neural_compressor.experimental.nas.BasicNAS.estimate"]], "estimate() (neural_compressor.experimental.nas.dynas method)": [[270, "neural_compressor.experimental.nas.DyNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basicnas method)": [[270, "neural_compressor.experimental.nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basicnas method)": [[270, "neural_compressor.experimental.nas.BasicNAS.init_by_cfg"]], "init_cfg() (neural_compressor.experimental.nas.dynas method)": [[270, "neural_compressor.experimental.nas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas method)": [[270, "neural_compressor.experimental.nas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas": [[270, "module-neural_compressor.experimental.nas"]], "pre_process() (neural_compressor.experimental.nas.basicnas method)": [[270, "neural_compressor.experimental.nas.BasicNAS.pre_process"]], "search() (neural_compressor.experimental.nas.dynas method)": [[270, "neural_compressor.experimental.nas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas method)": [[270, "neural_compressor.experimental.nas.DyNAS.select_model_arch"]], "nas (class in neural_compressor.experimental.nas.nas)": [[271, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[271, "neural_compressor.experimental.nas.nas.NASBase"]], "count_model_parameters() (neural_compressor.experimental.nas.nas.nasbase method)": [[271, "neural_compressor.experimental.nas.nas.NASBase.count_model_parameters"]], "dump_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[271, "neural_compressor.experimental.nas.nas.NASBase.dump_search_results"]], "estimate() (neural_compressor.experimental.nas.nas.nasbase method)": [[271, "neural_compressor.experimental.nas.nas.NASBase.estimate"]], "find_best_model_archs() (neural_compressor.experimental.nas.nas.nasbase method)": [[271, "neural_compressor.experimental.nas.nas.NASBase.find_best_model_archs"]], "init_search_cfg() (neural_compressor.experimental.nas.nas.nasbase method)": [[271, "neural_compressor.experimental.nas.nas.NASBase.init_search_cfg"]], "load_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[271, "neural_compressor.experimental.nas.nas.NASBase.load_search_results"]], "metrics_conversion() (neural_compressor.experimental.nas.nas.nasbase method)": [[271, "neural_compressor.experimental.nas.nas.NASBase.metrics_conversion"]], "model_builder (neural_compressor.experimental.nas.nas.nasbase property)": [[271, "neural_compressor.experimental.nas.nas.NASBase.model_builder"]], "neural_compressor.experimental.nas.nas": [[271, "module-neural_compressor.experimental.nas.nas"]], "params_vec2params_dict() (neural_compressor.experimental.nas.nas.nasbase method)": [[271, "neural_compressor.experimental.nas.nas.NASBase.params_vec2params_dict"]], "search() (neural_compressor.experimental.nas.nas.nasbase method)": [[271, "neural_compressor.experimental.nas.nas.NASBase.search"]], "search_algorithm (neural_compressor.experimental.nas.nas.nasbase property)": [[271, "neural_compressor.experimental.nas.nas.NASBase.search_algorithm"]], "search_space (neural_compressor.experimental.nas.nas.nasbase property)": [[271, "neural_compressor.experimental.nas.nas.NASBase.search_space"]], "select_model_arch() (neural_compressor.experimental.nas.nas.nasbase method)": [[271, "neural_compressor.experimental.nas.nas.NASBase.select_model_arch"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[272, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[272, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[272, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[272, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[273, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[273, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[273, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[273, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[273, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.get_feedback"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[273, "neural_compressor.experimental.nas.search_algorithms.Searcher.get_feedback"]], "indices2params_vec() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[273, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.indices2params_vec"]], "neural_compressor.experimental.nas.search_algorithms": [[273, "module-neural_compressor.experimental.nas.search_algorithms"]], "params_vec2params_dict() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[273, "neural_compressor.experimental.nas.search_algorithms.Searcher.params_vec2params_dict"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[273, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.gridsearcher method)": [[273, "neural_compressor.experimental.nas.search_algorithms.GridSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.randomsearcher method)": [[273, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[273, "neural_compressor.experimental.nas.search_algorithms.Searcher.suggest"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[274, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "compute_mask() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[274, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.compute_mask"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[274, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "on_epoch_begin() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[274, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[274, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[274, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[274, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_step_end"]], "parse_weight_name() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[274, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.parse_weight_name"]], "prune_by_importance() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[274, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.prune_by_importance"]], "prune_weight() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[274, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.prune_weight"]], "update_importance_abs() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[274, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.update_importance_abs"]], "update_importance_elementwise() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[274, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.update_importance_elementwise"]], "update_importance_weighted() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[274, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.update_importance_weighted"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[275, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[275, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "on_before_optimizer_step() (neural_compressor.experimental.pruner_legacy.group_lasso.grouplassopruner method)": [[275, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner.on_before_optimizer_step"]], "neural_compressor.experimental.pruner_legacy": [[276, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[277, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "compute_mask() (neural_compressor.experimental.pruner_legacy.magnitude.basicmagnitudepruner method)": [[277, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner.compute_mask"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[277, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "on_epoch_begin() (neural_compressor.experimental.pruner_legacy.magnitude.basicmagnitudepruner method)": [[277, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruner_legacy.magnitude.basicmagnitudepruner method)": [[277, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruner_legacy.magnitude.basicmagnitudepruner method)": [[277, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruner_legacy.magnitude.basicmagnitudepruner method)": [[277, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner.on_step_end"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[278, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "compute_mask() (neural_compressor.experimental.pruner_legacy.pattern_lock.patternlockpruner method)": [[278, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner.compute_mask"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[278, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "on_epoch_begin() (neural_compressor.experimental.pruner_legacy.pattern_lock.patternlockpruner method)": [[278, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruner_legacy.pattern_lock.patternlockpruner method)": [[278, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruner_legacy.pattern_lock.patternlockpruner method)": [[278, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruner_legacy.pattern_lock.patternlockpruner method)": [[278, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner.on_step_end"]], "update_weights() (neural_compressor.experimental.pruner_legacy.pattern_lock.patternlockpruner method)": [[278, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner.update_weights"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[279, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[279, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "on_before_optimizer_step() (neural_compressor.experimental.pruner_legacy.pruner.pruner method)": [[279, "neural_compressor.experimental.pruner_legacy.pruner.Pruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pruner_legacy.pruner.pruner method)": [[279, "neural_compressor.experimental.pruner_legacy.pruner.Pruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruner_legacy.pruner.pruner method)": [[279, "neural_compressor.experimental.pruner_legacy.pruner.Pruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruner_legacy.pruner.pruner method)": [[279, "neural_compressor.experimental.pruner_legacy.pruner.Pruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruner_legacy.pruner.pruner method)": [[279, "neural_compressor.experimental.pruner_legacy.pruner.Pruner.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruner_legacy.pruner.pruner method)": [[279, "neural_compressor.experimental.pruner_legacy.pruner.Pruner.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruner_legacy.pruner.pruner method)": [[279, "neural_compressor.experimental.pruner_legacy.pruner.Pruner.on_train_end"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[279, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "update_sparsity() (neural_compressor.experimental.pruner_legacy.pruner.pruner method)": [[279, "neural_compressor.experimental.pruner_legacy.pruner.Pruner.update_sparsity"]], "pruning (class in neural_compressor.experimental.pruning)": [[280, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[280, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[280, "neural_compressor.experimental.pruning.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning.pruning property)": [[280, "neural_compressor.experimental.pruning.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning.pruning method)": [[280, "neural_compressor.experimental.pruning.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning.pruning method)": [[280, "neural_compressor.experimental.pruning.Pruning.generate_hooks"]], "generate_pruners() (neural_compressor.experimental.pruning.pruning method)": [[280, "neural_compressor.experimental.pruning.Pruning.generate_pruners"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning.pruning method)": [[280, "neural_compressor.experimental.pruning.Pruning.get_sparsity_ratio"]], "neural_compressor.experimental.pruning": [[280, "module-neural_compressor.experimental.pruning"]], "on_after_compute_loss() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[280, "neural_compressor.experimental.pruning.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[280, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[280, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[280, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[280, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[280, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[280, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[280, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[280, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[280, "neural_compressor.experimental.pruning.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[280, "neural_compressor.experimental.pruning.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning.pruning method)": [[280, "neural_compressor.experimental.pruning.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning.pruning method)": [[280, "neural_compressor.experimental.pruning.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[280, "neural_compressor.experimental.pruning.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning.pruning property)": [[280, "neural_compressor.experimental.pruning.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning.pruning property)": [[280, "neural_compressor.experimental.pruning.Pruning.train_distributed"]], "update_items_for_all_pruners() (neural_compressor.experimental.pruning.pruning method)": [[280, "neural_compressor.experimental.pruning.Pruning.update_items_for_all_pruners"]], "patterns (class in neural_compressor.experimental.pruning_recipes)": [[281, "neural_compressor.experimental.pruning_recipes.PATTERNS"]], "neural_compressor.experimental.pruning_recipes": [[281, "module-neural_compressor.experimental.pruning_recipes"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns attribute)": [[281, "neural_compressor.experimental.pruning_recipes.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns class method)": [[281, "neural_compressor.experimental.pruning_recipes.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns)": [[282, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS"]], "neural_compressor.experimental.pruning_recipes.patterns": [[282, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.patterns attribute)": [[282, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.patterns class method)": [[282, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[283, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[283, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[283, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[283, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[283, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[283, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "reduce() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[283, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reduce"]], "reshape() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[283, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reshape"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns class method)": [[283, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.support_pattern"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[284, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[284, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[284, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[284, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[284, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[284, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[284, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[284, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "repeat_mask() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[284, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.repeat_mask"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[285, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[285, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[285, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning_v2.pruning property)": [[285, "neural_compressor.experimental.pruning_v2.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning_v2.pruning method)": [[285, "neural_compressor.experimental.pruning_v2.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning_v2.pruning method)": [[285, "neural_compressor.experimental.pruning_v2.Pruning.generate_hooks"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning_v2.pruning method)": [[285, "neural_compressor.experimental.pruning_v2.Pruning.get_sparsity_ratio"]], "neural_compressor.experimental.pruning_v2": [[285, "module-neural_compressor.experimental.pruning_v2"]], "on_after_compute_loss() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[285, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[285, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[285, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[285, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[285, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[285, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[285, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[285, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[285, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[285, "neural_compressor.experimental.pruning_v2.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[285, "neural_compressor.experimental.pruning_v2.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning_v2.pruning method)": [[285, "neural_compressor.experimental.pruning_v2.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning_v2.pruning method)": [[285, "neural_compressor.experimental.pruning_v2.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[285, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning_v2.pruning property)": [[285, "neural_compressor.experimental.pruning_v2.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning_v2.pruning property)": [[285, "neural_compressor.experimental.pruning_v2.Pruning.train_distributed"]], "update_config() (neural_compressor.experimental.pruning_v2.pruning method)": [[285, "neural_compressor.experimental.pruning_v2.Pruning.update_config"]], "neural_compressor.experimental.pytorch_pruner": [[286, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[287, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_block_size_dict"]], "get_mask_single() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_mask_single"]], "get_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_local"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_sparsity_ratio"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[288, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[289, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[289, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[289, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[289, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[289, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[289, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[289, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "check_is_pruned_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.check_is_pruned_step"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "mask_weights() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.mask_weights"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[290, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snipmomentumpruner method)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snippruner method)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_step_begin"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_end"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.magnitudepruner method)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner.update_scores"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_scores"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[291, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[291, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[291, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.get_sparsity_ratio"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[291, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[291, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[291, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[291, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[291, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[291, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[291, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[291, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[291, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[291, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[291, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[291, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_end"]], "prepare() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[291, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.prepare"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[291, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[291, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "update_items_for_all_pruners() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[291, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.update_items_for_all_pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[292, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[292, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[292, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[292, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[292, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[292, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.iterativescheduler method)": [[292, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.oneshotscheduler method)": [[292, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler method)": [[292, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.update_sparsity_ratio"]], "quantization (class in neural_compressor.experimental.quantization)": [[293, "neural_compressor.experimental.quantization.Quantization"]], "calib_dataloader (neural_compressor.experimental.quantization.quantization property)": [[293, "neural_compressor.experimental.quantization.Quantization.calib_dataloader"]], "dataset() (neural_compressor.experimental.quantization.quantization method)": [[293, "neural_compressor.experimental.quantization.Quantization.dataset"]], "distributed_execute() (neural_compressor.experimental.quantization.quantization method)": [[293, "neural_compressor.experimental.quantization.Quantization.distributed_execute"]], "execute() (neural_compressor.experimental.quantization.quantization method)": [[293, "neural_compressor.experimental.quantization.Quantization.execute"]], "metric (neural_compressor.experimental.quantization.quantization property)": [[293, "neural_compressor.experimental.quantization.Quantization.metric"]], "model (neural_compressor.experimental.quantization.quantization property)": [[293, "neural_compressor.experimental.quantization.Quantization.model"]], "neural_compressor.experimental.quantization": [[293, "module-neural_compressor.experimental.quantization"]], "objective (neural_compressor.experimental.quantization.quantization property)": [[293, "neural_compressor.experimental.quantization.Quantization.objective"]], "postprocess (neural_compressor.experimental.quantization.quantization property)": [[293, "neural_compressor.experimental.quantization.Quantization.postprocess"]], "pre_process() (neural_compressor.experimental.quantization.quantization method)": [[293, "neural_compressor.experimental.quantization.Quantization.pre_process"]], "q_func (neural_compressor.experimental.quantization.quantization property)": [[293, "neural_compressor.experimental.quantization.Quantization.q_func"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[294, "neural_compressor.experimental.scheduler.Scheduler"]], "append() (neural_compressor.experimental.scheduler.scheduler method)": [[294, "neural_compressor.experimental.scheduler.Scheduler.append"]], "combine() (neural_compressor.experimental.scheduler.scheduler method)": [[294, "neural_compressor.experimental.scheduler.Scheduler.combine"]], "eval_func (neural_compressor.experimental.scheduler.scheduler property)": [[294, "neural_compressor.experimental.scheduler.Scheduler.eval_func"]], "model (neural_compressor.experimental.scheduler.scheduler property)": [[294, "neural_compressor.experimental.scheduler.Scheduler.model"]], "neural_compressor.experimental.scheduler": [[294, "module-neural_compressor.experimental.scheduler"]], "train_func (neural_compressor.experimental.scheduler.scheduler property)": [[294, "neural_compressor.experimental.scheduler.Scheduler.train_func"]], "benchmark (class in neural_compressor)": [[295, "neural_compressor.Benchmark"]], "distillationconfig (class in neural_compressor)": [[295, "neural_compressor.DistillationConfig"]], "mixedprecisionconfig (class in neural_compressor)": [[295, "neural_compressor.MixedPrecisionConfig"]], "posttrainingquantconfig (class in neural_compressor)": [[295, "neural_compressor.PostTrainingQuantConfig"]], "quantizationawaretrainingconfig (class in neural_compressor)": [[295, "neural_compressor.QuantizationAwareTrainingConfig"]], "weightpruningconfig (class in neural_compressor)": [[295, "neural_compressor.WeightPruningConfig"]], "approach (neural_compressor.posttrainingquantconfig property)": [[295, "neural_compressor.PostTrainingQuantConfig.approach"]], "approach (neural_compressor.quantizationawaretrainingconfig property)": [[295, "neural_compressor.QuantizationAwareTrainingConfig.approach"]], "b_dataloader (neural_compressor.benchmark property)": [[295, "neural_compressor.Benchmark.b_dataloader"]], "b_func (neural_compressor.benchmark property)": [[295, "neural_compressor.Benchmark.b_func"]], "config_instance() (neural_compressor.benchmark method)": [[295, "neural_compressor.Benchmark.config_instance"]], "criterion (neural_compressor.distillationconfig property)": [[295, "neural_compressor.DistillationConfig.criterion"]], "generate_prefix() (neural_compressor.benchmark method)": [[295, "neural_compressor.Benchmark.generate_prefix"]], "model (neural_compressor.benchmark property)": [[295, "neural_compressor.Benchmark.model"]], "neural_compressor": [[295, "module-neural_compressor"]], "optimizer (neural_compressor.distillationconfig property)": [[295, "neural_compressor.DistillationConfig.optimizer"]], "results (neural_compressor.benchmark property)": [[295, "neural_compressor.Benchmark.results"]], "run_instance() (neural_compressor.benchmark method)": [[295, "neural_compressor.Benchmark.run_instance"]], "set_random_seed() (in module neural_compressor)": [[295, "neural_compressor.set_random_seed"]], "set_tensorboard() (in module neural_compressor)": [[295, "neural_compressor.set_tensorboard"]], "set_workspace() (in module neural_compressor)": [[295, "neural_compressor.set_workspace"]], "summary_benchmark() (neural_compressor.benchmark method)": [[295, "neural_compressor.Benchmark.summary_benchmark"]], "teacher_model (neural_compressor.distillationconfig property)": [[295, "neural_compressor.DistillationConfig.teacher_model"]], "tuning_criterion (neural_compressor.posttrainingquantconfig property)": [[295, "neural_compressor.PostTrainingQuantConfig.tuning_criterion"]], "weight_compression (neural_compressor.weightpruningconfig property)": [[295, "neural_compressor.WeightPruningConfig.weight_compression"]], "bleu (class in neural_compressor.metric.bleu)": [[296, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[296, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[296, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[296, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[296, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[296, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[296, "neural_compressor.metric.bleu.BLEU.predictions"]], "property_chars() (neural_compressor.metric.bleu.unicoderegex method)": [[296, "neural_compressor.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[296, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "reset() (neural_compressor.metric.bleu.bleu method)": [[296, "neural_compressor.metric.bleu.BLEU.reset"]], "result() (neural_compressor.metric.bleu.bleu method)": [[296, "neural_compressor.metric.bleu.BLEU.result"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[296, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "update() (neural_compressor.metric.bleu.bleu method)": [[296, "neural_compressor.metric.bleu.BLEU.update"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[297, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[297, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[298, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[299, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[299, "neural_compressor.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[299, "neural_compressor.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[299, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[299, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[299, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[299, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[299, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[299, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.metric.coco_tools.cocowrapper method)": [[299, "neural_compressor.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[299, "neural_compressor.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[299, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[299, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[299, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[300, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[300, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[300, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[300, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[300, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[301, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[301, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[301, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[301, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[301, "neural_compressor.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.metric)": [[302, "neural_compressor.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric)": [[302, "neural_compressor.metric.COCOmAPv2"]], "generaltopk (class in neural_compressor.metric)": [[302, "neural_compressor.metric.GeneralTopK"]], "metrics (class in neural_compressor.metric)": [[302, "neural_compressor.metric.METRICS"]], "metric (class in neural_compressor.metric)": [[302, "neural_compressor.metric.Metric"]], "squadf1 (class in neural_compressor.metric)": [[302, "neural_compressor.metric.SquadF1"]], "tensorflowtopk (class in neural_compressor.metric)": [[302, "neural_compressor.metric.TensorflowTopK"]], "hvd (neural_compressor.metric.basemetric property)": [[302, "neural_compressor.metric.BaseMetric.hvd"]], "k (neural_compressor.metric.generaltopk attribute)": [[302, "neural_compressor.metric.GeneralTopK.k"]], "k (neural_compressor.metric.tensorflowtopk attribute)": [[302, "neural_compressor.metric.TensorflowTopK.k"]], "metric (neural_compressor.metric.basemetric property)": [[302, "neural_compressor.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric)": [[302, "neural_compressor.metric.metric_registry"]], "metrics (neural_compressor.metric.metrics attribute)": [[302, "neural_compressor.metric.METRICS.metrics"]], "neural_compressor.metric": [[302, "module-neural_compressor.metric"]], "num_correct (neural_compressor.metric.generaltopk attribute)": [[302, "neural_compressor.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.tensorflowtopk attribute)": [[302, "neural_compressor.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.generaltopk attribute)": [[302, "neural_compressor.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.tensorflowtopk attribute)": [[302, "neural_compressor.metric.TensorflowTopK.num_sample"]], "register() (neural_compressor.metric.metrics method)": [[302, "neural_compressor.metric.METRICS.register"]], "reset() (neural_compressor.metric.basemetric method)": [[302, "neural_compressor.metric.BaseMetric.reset"]], "reset() (neural_compressor.metric.cocomapv2 method)": [[302, "neural_compressor.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.metric.generaltopk method)": [[302, "neural_compressor.metric.GeneralTopK.reset"]], "reset() (neural_compressor.metric.squadf1 method)": [[302, "neural_compressor.metric.SquadF1.reset"]], "reset() (neural_compressor.metric.tensorflowtopk method)": [[302, "neural_compressor.metric.TensorflowTopK.reset"]], "result() (neural_compressor.metric.basemetric method)": [[302, "neural_compressor.metric.BaseMetric.result"]], "result() (neural_compressor.metric.cocomapv2 method)": [[302, "neural_compressor.metric.COCOmAPv2.result"]], "result() (neural_compressor.metric.generaltopk method)": [[302, "neural_compressor.metric.GeneralTopK.result"]], "result() (neural_compressor.metric.squadf1 method)": [[302, "neural_compressor.metric.SquadF1.result"]], "result() (neural_compressor.metric.tensorflowtopk method)": [[302, "neural_compressor.metric.TensorflowTopK.result"]], "update() (neural_compressor.metric.basemetric method)": [[302, "neural_compressor.metric.BaseMetric.update"]], "update() (neural_compressor.metric.cocomapv2 method)": [[302, "neural_compressor.metric.COCOmAPv2.update"]], "update() (neural_compressor.metric.generaltopk method)": [[302, "neural_compressor.metric.GeneralTopK.update"]], "update() (neural_compressor.metric.squadf1 method)": [[302, "neural_compressor.metric.SquadF1.update"]], "update() (neural_compressor.metric.tensorflowtopk method)": [[302, "neural_compressor.metric.TensorflowTopK.update"]], "accuracy (class in neural_compressor.metric.metric)": [[303, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[303, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[303, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[303, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[303, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[303, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[303, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[303, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[303, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[303, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[303, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[303, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[303, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[303, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[303, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[303, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[303, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[303, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[303, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[303, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[303, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[303, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[303, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[303, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[303, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[303, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[303, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[303, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[303, "neural_compressor.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.metric.metric.pytorchloss method)": [[303, "neural_compressor.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.metric.metric.basemetric property)": [[303, "neural_compressor.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[303, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[303, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[303, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[303, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[303, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[303, "neural_compressor.metric.metric.mIOU"]], "metric (neural_compressor.metric.metric.basemetric property)": [[303, "neural_compressor.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric.metric)": [[303, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[303, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[303, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[303, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[303, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[303, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[303, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[303, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[303, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[303, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[303, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[303, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[303, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[303, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[303, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[303, "neural_compressor.metric.metric.MSE.pred_list"]], "register() (neural_compressor.metric.metric.metrics method)": [[303, "neural_compressor.metric.metric.METRICS.register"]], "reset() (neural_compressor.metric.metric.accuracy method)": [[303, "neural_compressor.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.metric.metric.basemetric method)": [[303, "neural_compressor.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.metric.metric.cocomapv2 method)": [[303, "neural_compressor.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.metric.metric.f1 method)": [[303, "neural_compressor.metric.metric.F1.reset"]], "reset() (neural_compressor.metric.metric.generaltopk method)": [[303, "neural_compressor.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.metric.metric.loss method)": [[303, "neural_compressor.metric.metric.Loss.reset"]], "reset() (neural_compressor.metric.metric.mae method)": [[303, "neural_compressor.metric.metric.MAE.reset"]], "reset() (neural_compressor.metric.metric.mse method)": [[303, "neural_compressor.metric.metric.MSE.reset"]], "reset() (neural_compressor.metric.metric.onnxrtglue method)": [[303, "neural_compressor.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.metric.metric.pytorchloss method)": [[303, "neural_compressor.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.metric.metric.rmse method)": [[303, "neural_compressor.metric.metric.RMSE.reset"]], "reset() (neural_compressor.metric.metric.roc method)": [[303, "neural_compressor.metric.metric.ROC.reset"]], "reset() (neural_compressor.metric.metric.squadf1 method)": [[303, "neural_compressor.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.metric.metric.tensorflowmap method)": [[303, "neural_compressor.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.metric.metric.tensorflowtopk method)": [[303, "neural_compressor.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[303, "neural_compressor.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[303, "neural_compressor.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.metric.metric.wrappytorchmetric method)": [[303, "neural_compressor.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.metric.metric.miou method)": [[303, "neural_compressor.metric.metric.mIOU.reset"]], "result() (neural_compressor.metric.metric.accuracy method)": [[303, "neural_compressor.metric.metric.Accuracy.result"]], "result() (neural_compressor.metric.metric.basemetric method)": [[303, "neural_compressor.metric.metric.BaseMetric.result"]], "result() (neural_compressor.metric.metric.cocomapv2 method)": [[303, "neural_compressor.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.metric.metric.f1 method)": [[303, "neural_compressor.metric.metric.F1.result"]], "result() (neural_compressor.metric.metric.generaltopk method)": [[303, "neural_compressor.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.metric.metric.loss method)": [[303, "neural_compressor.metric.metric.Loss.result"]], "result() (neural_compressor.metric.metric.mae method)": [[303, "neural_compressor.metric.metric.MAE.result"]], "result() (neural_compressor.metric.metric.mse method)": [[303, "neural_compressor.metric.metric.MSE.result"]], "result() (neural_compressor.metric.metric.onnxrtglue method)": [[303, "neural_compressor.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.metric.metric.rmse method)": [[303, "neural_compressor.metric.metric.RMSE.result"]], "result() (neural_compressor.metric.metric.roc method)": [[303, "neural_compressor.metric.metric.ROC.result"]], "result() (neural_compressor.metric.metric.squadf1 method)": [[303, "neural_compressor.metric.metric.SquadF1.result"]], "result() (neural_compressor.metric.metric.tensorflowmap method)": [[303, "neural_compressor.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.metric.metric.tensorflowtopk method)": [[303, "neural_compressor.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[303, "neural_compressor.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[303, "neural_compressor.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.metric.metric.wrappytorchmetric method)": [[303, "neural_compressor.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.metric.metric.miou method)": [[303, "neural_compressor.metric.metric.mIOU.result"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[303, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[303, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[303, "neural_compressor.metric.metric.Loss.sum"]], "update() (neural_compressor.metric.metric.accuracy method)": [[303, "neural_compressor.metric.metric.Accuracy.update"]], "update() (neural_compressor.metric.metric.basemetric method)": [[303, "neural_compressor.metric.metric.BaseMetric.update"]], "update() (neural_compressor.metric.metric.cocomapv2 method)": [[303, "neural_compressor.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.metric.metric.f1 method)": [[303, "neural_compressor.metric.metric.F1.update"]], "update() (neural_compressor.metric.metric.generaltopk method)": [[303, "neural_compressor.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.metric.metric.loss method)": [[303, "neural_compressor.metric.metric.Loss.update"]], "update() (neural_compressor.metric.metric.mae method)": [[303, "neural_compressor.metric.metric.MAE.update"]], "update() (neural_compressor.metric.metric.mse method)": [[303, "neural_compressor.metric.metric.MSE.update"]], "update() (neural_compressor.metric.metric.onnxrtglue method)": [[303, "neural_compressor.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.metric.metric.pytorchloss method)": [[303, "neural_compressor.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.metric.metric.rmse method)": [[303, "neural_compressor.metric.metric.RMSE.update"]], "update() (neural_compressor.metric.metric.roc method)": [[303, "neural_compressor.metric.metric.ROC.update"]], "update() (neural_compressor.metric.metric.squadf1 method)": [[303, "neural_compressor.metric.metric.SquadF1.update"]], "update() (neural_compressor.metric.metric.tensorflowmap method)": [[303, "neural_compressor.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.metric.metric.tensorflowtopk method)": [[303, "neural_compressor.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[303, "neural_compressor.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[303, "neural_compressor.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.metric.metric.wrappytorchmetric method)": [[303, "neural_compressor.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.metric.metric.miou method)": [[303, "neural_compressor.metric.metric.mIOU.update"]], "mixedprecision (class in neural_compressor.mix_precision)": [[304, "neural_compressor.mix_precision.MixedPrecision"]], "eval_dataloader (neural_compressor.mix_precision.mixedprecision property)": [[304, "neural_compressor.mix_precision.MixedPrecision.eval_dataloader"]], "eval_func (neural_compressor.mix_precision.mixedprecision property)": [[304, "neural_compressor.mix_precision.MixedPrecision.eval_func"]], "execute() (neural_compressor.mix_precision.mixedprecision method)": [[304, "neural_compressor.mix_precision.MixedPrecision.execute"]], "fit() (in module neural_compressor.mix_precision)": [[304, "neural_compressor.mix_precision.fit"]], "metric (neural_compressor.mix_precision.mixedprecision property)": [[304, "neural_compressor.mix_precision.MixedPrecision.metric"]], "model (neural_compressor.mix_precision.mixedprecision property)": [[304, "neural_compressor.mix_precision.MixedPrecision.model"]], "neural_compressor.mix_precision": [[304, "module-neural_compressor.mix_precision"]], "pre_process() (neural_compressor.mix_precision.mixedprecision method)": [[304, "neural_compressor.mix_precision.MixedPrecision.pre_process"]], "precisions (neural_compressor.mix_precision.mixedprecision property)": [[304, "neural_compressor.mix_precision.MixedPrecision.precisions"]], "basemodel (class in neural_compressor.model.base_model)": [[305, "neural_compressor.model.base_model.BaseModel"]], "export() (neural_compressor.model.base_model.basemodel method)": [[305, "neural_compressor.model.base_model.BaseModel.export"]], "framework() (neural_compressor.model.base_model.basemodel method)": [[305, "neural_compressor.model.base_model.BaseModel.framework"]], "graph_info (neural_compressor.model.base_model.basemodel property)": [[305, "neural_compressor.model.base_model.BaseModel.graph_info"]], "model (neural_compressor.model.base_model.basemodel property)": [[305, "neural_compressor.model.base_model.BaseModel.model"]], "neural_compressor.model.base_model": [[305, "module-neural_compressor.model.base_model"]], "save() (neural_compressor.model.base_model.basemodel method)": [[305, "neural_compressor.model.base_model.BaseModel.save"]], "basemodel (class in neural_compressor.model)": [[306, "neural_compressor.model.BaseModel"]], "model (class in neural_compressor.model)": [[306, "neural_compressor.model.Model"]], "export() (neural_compressor.model.basemodel method)": [[306, "neural_compressor.model.BaseModel.export"]], "framework() (neural_compressor.model.basemodel method)": [[306, "neural_compressor.model.BaseModel.framework"]], "graph_info (neural_compressor.model.basemodel property)": [[306, "neural_compressor.model.BaseModel.graph_info"]], "model (neural_compressor.model.basemodel property)": [[306, "neural_compressor.model.BaseModel.model"]], "neural_compressor.model": [[306, "module-neural_compressor.model"]], "save() (neural_compressor.model.basemodel method)": [[306, "neural_compressor.model.BaseModel.save"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[307, "neural_compressor.model.keras_model.KerasModel"]], "framework() (neural_compressor.model.keras_model.kerasmodel method)": [[307, "neural_compressor.model.keras_model.KerasModel.framework"]], "get_all_weight_names() (neural_compressor.model.keras_model.kerasmodel method)": [[307, "neural_compressor.model.keras_model.KerasModel.get_all_weight_names"]], "graph_info (neural_compressor.model.keras_model.kerasmodel property)": [[307, "neural_compressor.model.keras_model.KerasModel.graph_info"]], "input_node_names (neural_compressor.model.keras_model.kerasmodel property)": [[307, "neural_compressor.model.keras_model.KerasModel.input_node_names"]], "model (neural_compressor.model.keras_model.kerasmodel property)": [[307, "neural_compressor.model.keras_model.KerasModel.model"]], "neural_compressor.model.keras_model": [[307, "module-neural_compressor.model.keras_model"]], "output_node_names (neural_compressor.model.keras_model.kerasmodel property)": [[307, "neural_compressor.model.keras_model.KerasModel.output_node_names"]], "q_config (neural_compressor.model.keras_model.kerasmodel property)": [[307, "neural_compressor.model.keras_model.KerasModel.q_config"]], "report_sparsity() (neural_compressor.model.keras_model.kerasmodel method)": [[307, "neural_compressor.model.keras_model.KerasModel.report_sparsity"]], "save() (neural_compressor.model.keras_model.kerasmodel method)": [[307, "neural_compressor.model.keras_model.KerasModel.save"]], "model (class in neural_compressor.model.model)": [[308, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[308, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[308, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[309, "neural_compressor.model.mxnet_model.MXNetModel"]], "framework() (neural_compressor.model.mxnet_model.mxnetmodel method)": [[309, "neural_compressor.model.mxnet_model.MXNetModel.framework"]], "model (neural_compressor.model.mxnet_model.mxnetmodel property)": [[309, "neural_compressor.model.mxnet_model.MXNetModel.model"]], "neural_compressor.model.mxnet_model": [[309, "module-neural_compressor.model.mxnet_model"]], "save() (neural_compressor.model.mxnet_model.mxnetmodel method)": [[309, "neural_compressor.model.mxnet_model.MXNetModel.save"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[310, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[310, "module-neural_compressor.model.nets_factory"]], "register() (neural_compressor.model.nets_factory.tfslimnetsfactory method)": [[310, "neural_compressor.model.nets_factory.TFSlimNetsFactory.register"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[311, "neural_compressor.model.onnx_model.ONNXModel"]], "add_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.add_initializer"]], "add_initializers() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.add_initializers"]], "add_node() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.add_node"]], "add_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.add_nodes"]], "add_tensors_to_outputs() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.add_tensors_to_outputs"]], "export() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.export"]], "find_node_by_name() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.find_node_by_name"]], "find_nodes_by_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.find_nodes_by_initializer"]], "framework() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.framework"]], "get_children() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.get_children"]], "get_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.get_initializer"]], "get_nodes_chain() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.get_nodes_chain"]], "get_parent() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.get_parent"]], "get_parents() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.get_parents"]], "get_scale_zero() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.get_scale_zero"]], "get_siblings() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.get_siblings"]], "graph() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.graph"]], "graph_info (neural_compressor.model.onnx_model.onnxmodel property)": [[311, "neural_compressor.model.onnx_model.ONNXModel.graph_info"]], "initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.initializer"]], "input() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.input"]], "input_name_to_nodes (neural_compressor.model.onnx_model.onnxmodel property)": [[311, "neural_compressor.model.onnx_model.ONNXModel.input_name_to_nodes"]], "ir_version() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.ir_version"]], "is_large_model (neural_compressor.model.onnx_model.onnxmodel property)": [[311, "neural_compressor.model.onnx_model.ONNXModel.is_large_model"]], "match_first_parent() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.match_first_parent"]], "match_parent() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.match_parent"]], "match_parent_path() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.match_parent_path"]], "model (neural_compressor.model.onnx_model.onnxmodel property)": [[311, "neural_compressor.model.onnx_model.ONNXModel.model"]], "model_path (neural_compressor.model.onnx_model.onnxmodel property)": [[311, "neural_compressor.model.onnx_model.ONNXModel.model_path"]], "neural_compressor.model.onnx_model": [[311, "module-neural_compressor.model.onnx_model"]], "nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.nodes"]], "opset_import() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.opset_import"]], "output() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.output"]], "output_name_to_node (neural_compressor.model.onnx_model.onnxmodel property)": [[311, "neural_compressor.model.onnx_model.ONNXModel.output_name_to_node"]], "q_config (neural_compressor.model.onnx_model.onnxmodel property)": [[311, "neural_compressor.model.onnx_model.ONNXModel.q_config"]], "remove_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.remove_initializer"]], "remove_initializers() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.remove_initializers"]], "remove_node() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.remove_node"]], "remove_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.remove_nodes"]], "remove_tensors_from_outputs() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.remove_tensors_from_outputs"]], "remove_unused_constant() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.remove_unused_constant"]], "replace_input_of_all_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.replace_input_of_all_nodes"]], "replace_node_input() (neural_compressor.model.onnx_model.onnxmodel static method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.replace_node_input"]], "replace_node_output() (neural_compressor.model.onnx_model.onnxmodel static method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.replace_node_output"]], "replace_output_of_all_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.replace_output_of_all_nodes"]], "save() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.save"]], "save_model_to_file() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.save_model_to_file"]], "set_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.set_initializer"]], "topological_sort() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.topological_sort"]], "update() (neural_compressor.model.onnx_model.onnxmodel method)": [[311, "neural_compressor.model.onnx_model.ONNXModel.update"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[312, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[312, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[312, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[312, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[312, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "build_saved_model() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[312, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.build_saved_model"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[312, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[312, "neural_compressor.model.tensorflow_model.estimator_session"]], "export() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[312, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.export"]], "framework() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[312, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.framework"]], "frozen_graph_def (neural_compressor.model.tensorflow_model.tensorflowqatmodel property)": [[312, "neural_compressor.model.tensorflow_model.TensorflowQATModel.frozen_graph_def"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[312, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_all_weight_names() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[312, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.get_all_weight_names"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[312, "neural_compressor.model.tensorflow_model.get_model_type"]], "get_weight() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[312, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.get_weight"]], "graph (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[312, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph"]], "graph_def (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[312, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph_def"]], "graph_def (neural_compressor.model.tensorflow_model.tensorflowcheckpointmodel property)": [[312, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel.graph_def"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[312, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_info (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[312, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph_info"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[312, "neural_compressor.model.tensorflow_model.graph_session"]], "input_node_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[312, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.input_node_names"]], "input_tensor (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[312, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.input_tensor"]], "input_tensor_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[312, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.input_tensor_names"]], "iter_op (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[312, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.iter_op"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[312, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[312, "neural_compressor.model.tensorflow_model.load_saved_model"]], "model (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[312, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowcheckpointmodel property)": [[312, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowqatmodel property)": [[312, "neural_compressor.model.tensorflow_model.TensorflowQATModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel property)": [[312, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.model"]], "model_type (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[312, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.model_type"]], "name (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[312, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.name"]], "neural_compressor.model.tensorflow_model": [[312, "module-neural_compressor.model.tensorflow_model"]], "output_node_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[312, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.output_node_names"]], "output_tensor (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[312, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.output_tensor"]], "output_tensor_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[312, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.output_tensor_names"]], "q_config (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[312, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.q_config"]], "report_sparsity() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[312, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.report_sparsity"]], "save() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[312, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.save"]], "save() (neural_compressor.model.tensorflow_model.tensorflowqatmodel method)": [[312, "neural_compressor.model.tensorflow_model.TensorflowQATModel.save"]], "save() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[312, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.save"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[312, "neural_compressor.model.tensorflow_model.saved_model_session"]], "sess (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[312, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.sess"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[312, "neural_compressor.model.tensorflow_model.slim_session"]], "update_weights() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[312, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.update_weights"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[312, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[312, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "weights (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[312, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.weights"]], "workspace_path (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[312, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.workspace_path"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[313, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[313, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[313, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[313, "neural_compressor.model.torch_model.PyTorchModel"]], "export() (neural_compressor.model.torch_model.pytorchmodel method)": [[313, "neural_compressor.model.torch_model.PyTorchModel.export"]], "export_to_bf16_onnx() (neural_compressor.model.torch_model.pytorchmodel method)": [[313, "neural_compressor.model.torch_model.PyTorchModel.export_to_bf16_onnx"]], "export_to_fp32_onnx() (neural_compressor.model.torch_model.pytorchmodel method)": [[313, "neural_compressor.model.torch_model.PyTorchModel.export_to_fp32_onnx"]], "export_to_int8_onnx() (neural_compressor.model.torch_model.pytorchmodel method)": [[313, "neural_compressor.model.torch_model.PyTorchModel.export_to_int8_onnx"]], "export_to_jit() (neural_compressor.model.torch_model.pytorchmodel method)": [[313, "neural_compressor.model.torch_model.PyTorchModel.export_to_jit"]], "forward() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[313, "neural_compressor.model.torch_model.PyTorchBaseModel.forward"]], "fp32_model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[313, "neural_compressor.model.torch_model.PyTorchBaseModel.fp32_model"]], "framework() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[313, "neural_compressor.model.torch_model.PyTorchBaseModel.framework"]], "generate_forward_pre_hook() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[313, "neural_compressor.model.torch_model.PyTorchBaseModel.generate_forward_pre_hook"]], "get_all_weight_names() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[313, "neural_compressor.model.torch_model.PyTorchBaseModel.get_all_weight_names"]], "get_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[313, "neural_compressor.model.torch_model.PyTorchBaseModel.get_gradient"]], "get_inputs() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[313, "neural_compressor.model.torch_model.PyTorchBaseModel.get_inputs"]], "get_weight() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[313, "neural_compressor.model.torch_model.PyTorchBaseModel.get_weight"]], "graph_info (neural_compressor.model.torch_model.pytorchmodel property)": [[313, "neural_compressor.model.torch_model.PyTorchModel.graph_info"]], "load_quantized_state_dict() (neural_compressor.model.torch_model.pytorchmodel method)": [[313, "neural_compressor.model.torch_model.PyTorchModel.load_quantized_state_dict"]], "model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[313, "neural_compressor.model.torch_model.PyTorchBaseModel.model"]], "neural_compressor.model.torch_model": [[313, "module-neural_compressor.model.torch_model"]], "prune_weights_() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[313, "neural_compressor.model.torch_model.PyTorchBaseModel.prune_weights_"]], "quantized_state_dict() (neural_compressor.model.torch_model.pytorchmodel method)": [[313, "neural_compressor.model.torch_model.PyTorchModel.quantized_state_dict"]], "register_forward_pre_hook() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[313, "neural_compressor.model.torch_model.PyTorchBaseModel.register_forward_pre_hook"]], "remove_hooks() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[313, "neural_compressor.model.torch_model.PyTorchBaseModel.remove_hooks"]], "report_sparsity() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[313, "neural_compressor.model.torch_model.PyTorchBaseModel.report_sparsity"]], "save() (neural_compressor.model.torch_model.ipexmodel method)": [[313, "neural_compressor.model.torch_model.IPEXModel.save"]], "save() (neural_compressor.model.torch_model.pytorchmodel method)": [[313, "neural_compressor.model.torch_model.PyTorchModel.save"]], "update_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[313, "neural_compressor.model.torch_model.PyTorchBaseModel.update_gradient"]], "update_weights() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[313, "neural_compressor.model.torch_model.PyTorchBaseModel.update_weights"]], "workspace_path (neural_compressor.model.torch_model.ipexmodel property)": [[313, "neural_compressor.model.torch_model.IPEXModel.workspace_path"]], "workspace_path (neural_compressor.model.torch_model.pytorchmodel property)": [[313, "neural_compressor.model.torch_model.PyTorchModel.workspace_path"]], "accuracy (class in neural_compressor.objective)": [[314, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[314, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[314, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[314, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[314, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[314, "neural_compressor.objective.Performance"]], "accuracy_meet_req() (neural_compressor.objective.multiobjective method)": [[314, "neural_compressor.objective.MultiObjective.accuracy_meet_req"]], "accuracy_meets() (neural_compressor.objective.multiobjective method)": [[314, "neural_compressor.objective.MultiObjective.accuracy_meets"]], "accuracy_target (neural_compressor.objective.multiobjective property)": [[314, "neural_compressor.objective.MultiObjective.accuracy_target"]], "baseline (neural_compressor.objective.multiobjective property)": [[314, "neural_compressor.objective.MultiObjective.baseline"]], "best_result() (neural_compressor.objective.multiobjective method)": [[314, "neural_compressor.objective.MultiObjective.best_result"]], "compare() (neural_compressor.objective.multiobjective method)": [[314, "neural_compressor.objective.MultiObjective.compare"]], "end() (neural_compressor.objective.accuracy method)": [[314, "neural_compressor.objective.Accuracy.end"]], "end() (neural_compressor.objective.footprint method)": [[314, "neural_compressor.objective.Footprint.end"]], "end() (neural_compressor.objective.modelsize method)": [[314, "neural_compressor.objective.ModelSize.end"]], "end() (neural_compressor.objective.multiobjective method)": [[314, "neural_compressor.objective.MultiObjective.end"]], "end() (neural_compressor.objective.objective method)": [[314, "neural_compressor.objective.Objective.end"]], "end() (neural_compressor.objective.performance method)": [[314, "neural_compressor.objective.Performance.end"]], "evaluate() (neural_compressor.objective.multiobjective method)": [[314, "neural_compressor.objective.MultiObjective.evaluate"]], "model (neural_compressor.objective.objective property)": [[314, "neural_compressor.objective.Objective.model"]], "neural_compressor.objective": [[314, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[314, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[314, "neural_compressor.objective.objective_registry"]], "reset() (neural_compressor.objective.multiobjective method)": [[314, "neural_compressor.objective.MultiObjective.reset"]], "reset() (neural_compressor.objective.objective method)": [[314, "neural_compressor.objective.Objective.reset"]], "result() (neural_compressor.objective.multiobjective method)": [[314, "neural_compressor.objective.MultiObjective.result"]], "result() (neural_compressor.objective.objective method)": [[314, "neural_compressor.objective.Objective.result"]], "result_list() (neural_compressor.objective.objective method)": [[314, "neural_compressor.objective.Objective.result_list"]], "set_model() (neural_compressor.objective.multiobjective method)": [[314, "neural_compressor.objective.MultiObjective.set_model"]], "start() (neural_compressor.objective.accuracy method)": [[314, "neural_compressor.objective.Accuracy.start"]], "start() (neural_compressor.objective.footprint method)": [[314, "neural_compressor.objective.Footprint.start"]], "start() (neural_compressor.objective.modelsize method)": [[314, "neural_compressor.objective.ModelSize.start"]], "start() (neural_compressor.objective.multiobjective method)": [[314, "neural_compressor.objective.MultiObjective.start"]], "start() (neural_compressor.objective.objective method)": [[314, "neural_compressor.objective.Objective.start"]], "start() (neural_compressor.objective.performance method)": [[314, "neural_compressor.objective.Performance.start"]], "posttrainingquant (class in neural_compressor.quantization)": [[315, "neural_compressor.quantization.PostTrainingQuant"]], "calib_dataloader (neural_compressor.quantization.posttrainingquant property)": [[315, "neural_compressor.quantization.PostTrainingQuant.calib_dataloader"]], "calib_func (neural_compressor.quantization.posttrainingquant property)": [[315, "neural_compressor.quantization.PostTrainingQuant.calib_func"]], "eval_dataloader (neural_compressor.quantization.posttrainingquant property)": [[315, "neural_compressor.quantization.PostTrainingQuant.eval_dataloader"]], "eval_func (neural_compressor.quantization.posttrainingquant property)": [[315, "neural_compressor.quantization.PostTrainingQuant.eval_func"]], "execute() (neural_compressor.quantization.posttrainingquant method)": [[315, "neural_compressor.quantization.PostTrainingQuant.execute"]], "fit() (in module neural_compressor.quantization)": [[315, "neural_compressor.quantization.fit"]], "metric (neural_compressor.quantization.posttrainingquant property)": [[315, "neural_compressor.quantization.PostTrainingQuant.metric"]], "model (neural_compressor.quantization.posttrainingquant property)": [[315, "neural_compressor.quantization.PostTrainingQuant.model"]], "neural_compressor.quantization": [[315, "module-neural_compressor.quantization"]], "pre_proccess() (neural_compressor.quantization.posttrainingquant method)": [[315, "neural_compressor.quantization.PostTrainingQuant.pre_proccess"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[316, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[316, "module-neural_compressor.strategy.auto"]], "next_tune_cfg() (neural_compressor.strategy.auto.autotunestrategy method)": [[316, "neural_compressor.strategy.auto.AutoTuneStrategy.next_tune_cfg"]], "sequential_traverse() (neural_compressor.strategy.auto.autotunestrategy method)": [[316, "neural_compressor.strategy.auto.AutoTuneStrategy.sequential_traverse"]], "traverse() (neural_compressor.strategy.auto.autotunestrategy method)": [[316, "neural_compressor.strategy.auto.AutoTuneStrategy.traverse"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[317, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[317, "module-neural_compressor.strategy.auto_mixed_precision"]], "next_tune_cfg() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[317, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.next_tune_cfg"]], "traverse() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[317, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.traverse"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[318, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "distributed_next_tune_cfg_lst() (neural_compressor.strategy.basic.basictunestrategy method)": [[318, "neural_compressor.strategy.basic.BasicTuneStrategy.distributed_next_tune_cfg_lst"]], "neural_compressor.strategy.basic": [[318, "module-neural_compressor.strategy.basic"]], "next_tune_cfg() (neural_compressor.strategy.basic.basictunestrategy method)": [[318, "neural_compressor.strategy.basic.BasicTuneStrategy.next_tune_cfg"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[319, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[319, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[319, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[319, "neural_compressor.strategy.bayesian.acq_max"]], "array_to_params() (neural_compressor.strategy.bayesian.targetspace method)": [[319, "neural_compressor.strategy.bayesian.TargetSpace.array_to_params"]], "bounds (neural_compressor.strategy.bayesian.targetspace property)": [[319, "neural_compressor.strategy.bayesian.TargetSpace.bounds"]], "dim (neural_compressor.strategy.bayesian.targetspace property)": [[319, "neural_compressor.strategy.bayesian.TargetSpace.dim"]], "empty (neural_compressor.strategy.bayesian.targetspace property)": [[319, "neural_compressor.strategy.bayesian.TargetSpace.empty"]], "gen_next_params() (neural_compressor.strategy.bayesian.bayesianoptimization method)": [[319, "neural_compressor.strategy.bayesian.BayesianOptimization.gen_next_params"]], "get_target() (neural_compressor.strategy.bayesian.targetspace method)": [[319, "neural_compressor.strategy.bayesian.TargetSpace.get_target"]], "keys (neural_compressor.strategy.bayesian.targetspace property)": [[319, "neural_compressor.strategy.bayesian.TargetSpace.keys"]], "max (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[319, "neural_compressor.strategy.bayesian.BayesianOptimization.max"]], "max() (neural_compressor.strategy.bayesian.targetspace method)": [[319, "neural_compressor.strategy.bayesian.TargetSpace.max"]], "neural_compressor.strategy.bayesian": [[319, "module-neural_compressor.strategy.bayesian"]], "next_tune_cfg() (neural_compressor.strategy.bayesian.bayesiantunestrategy method)": [[319, "neural_compressor.strategy.bayesian.BayesianTuneStrategy.next_tune_cfg"]], "params (neural_compressor.strategy.bayesian.targetspace property)": [[319, "neural_compressor.strategy.bayesian.TargetSpace.params"]], "params_to_array() (neural_compressor.strategy.bayesian.targetspace method)": [[319, "neural_compressor.strategy.bayesian.TargetSpace.params_to_array"]], "random_sample() (neural_compressor.strategy.bayesian.targetspace method)": [[319, "neural_compressor.strategy.bayesian.TargetSpace.random_sample"]], "register() (neural_compressor.strategy.bayesian.targetspace method)": [[319, "neural_compressor.strategy.bayesian.TargetSpace.register"]], "res (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[319, "neural_compressor.strategy.bayesian.BayesianOptimization.res"]], "res() (neural_compressor.strategy.bayesian.targetspace method)": [[319, "neural_compressor.strategy.bayesian.TargetSpace.res"]], "space (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[319, "neural_compressor.strategy.bayesian.BayesianOptimization.space"]], "suggest() (neural_compressor.strategy.bayesian.bayesianoptimization method)": [[319, "neural_compressor.strategy.bayesian.BayesianOptimization.suggest"]], "target (neural_compressor.strategy.bayesian.targetspace property)": [[319, "neural_compressor.strategy.bayesian.TargetSpace.target"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[320, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[320, "module-neural_compressor.strategy.conservative"]], "next_tune_cfg() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[320, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.next_tune_cfg"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[321, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[321, "module-neural_compressor.strategy.exhaustive"]], "next_tune_cfg() (neural_compressor.strategy.exhaustive.exhaustivetunestrategy method)": [[321, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy.next_tune_cfg"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[322, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[322, "module-neural_compressor.strategy.hawq_v2"]], "next_tune_cfg() (neural_compressor.strategy.hawq_v2.hawq_v2tunestrategy method)": [[322, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy.next_tune_cfg"]], "neural_compressor.strategy": [[323, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[324, "neural_compressor.strategy.mse.MSETuneStrategy"]], "mse_impact_lst() (neural_compressor.strategy.mse.msetunestrategy method)": [[324, "neural_compressor.strategy.mse.MSETuneStrategy.mse_impact_lst"]], "neural_compressor.strategy.mse": [[324, "module-neural_compressor.strategy.mse"]], "next_tune_cfg() (neural_compressor.strategy.mse.msetunestrategy method)": [[324, "neural_compressor.strategy.mse.MSETuneStrategy.next_tune_cfg"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[325, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[325, "module-neural_compressor.strategy.mse_v2"]], "next_tune_cfg() (neural_compressor.strategy.mse_v2.mse_v2tunestrategy method)": [[325, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy.next_tune_cfg"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[326, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[326, "module-neural_compressor.strategy.random"]], "next_tune_cfg() (neural_compressor.strategy.random.randomtunestrategy method)": [[326, "neural_compressor.strategy.random.RandomTuneStrategy.next_tune_cfg"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[327, "neural_compressor.strategy.strategy.TuneStrategy"]], "apply_all_tuning_recipes() (neural_compressor.strategy.strategy.tunestrategy method)": [[327, "neural_compressor.strategy.strategy.TuneStrategy.apply_all_tuning_recipes"]], "apply_recipe_one_by_one() (neural_compressor.strategy.strategy.tunestrategy method)": [[327, "neural_compressor.strategy.strategy.TuneStrategy.apply_recipe_one_by_one"]], "deploy_config() (neural_compressor.strategy.strategy.tunestrategy method)": [[327, "neural_compressor.strategy.strategy.TuneStrategy.deploy_config"]], "distributed_next_tune_cfg_lst() (neural_compressor.strategy.strategy.tunestrategy method)": [[327, "neural_compressor.strategy.strategy.TuneStrategy.distributed_next_tune_cfg_lst"]], "distributed_traverse() (neural_compressor.strategy.strategy.tunestrategy method)": [[327, "neural_compressor.strategy.strategy.TuneStrategy.distributed_traverse"]], "evaluation_result (neural_compressor.strategy.strategy.tunestrategy property)": [[327, "neural_compressor.strategy.strategy.TuneStrategy.evaluation_result"]], "initial_best_acc() (neural_compressor.strategy.strategy.tunestrategy method)": [[327, "neural_compressor.strategy.strategy.TuneStrategy.initial_best_acc"]], "initial_tuning_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[327, "neural_compressor.strategy.strategy.TuneStrategy.initial_tuning_cfg"]], "master_worker_handle() (neural_compressor.strategy.strategy.tunestrategy method)": [[327, "neural_compressor.strategy.strategy.TuneStrategy.master_worker_handle"]], "meet_acc_req() (neural_compressor.strategy.strategy.tunestrategy method)": [[327, "neural_compressor.strategy.strategy.TuneStrategy.meet_acc_req"]], "neural_compressor.strategy.strategy": [[327, "module-neural_compressor.strategy.strategy"]], "next_tune_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[327, "neural_compressor.strategy.strategy.TuneStrategy.next_tune_cfg"]], "set_param_for_post_quantization_algos() (neural_compressor.strategy.strategy.tunestrategy method)": [[327, "neural_compressor.strategy.strategy.TuneStrategy.set_param_for_post_quantization_algos"]], "set_param_for_pre_quantization_algos() (neural_compressor.strategy.strategy.tunestrategy method)": [[327, "neural_compressor.strategy.strategy.TuneStrategy.set_param_for_pre_quantization_algos"]], "set_q_func() (neural_compressor.strategy.strategy.tunestrategy method)": [[327, "neural_compressor.strategy.strategy.TuneStrategy.set_q_func"]], "set_tuning_space() (neural_compressor.strategy.strategy.tunestrategy method)": [[327, "neural_compressor.strategy.strategy.TuneStrategy.set_tuning_space"]], "setup_resume() (neural_compressor.strategy.strategy.tunestrategy method)": [[327, "neural_compressor.strategy.strategy.TuneStrategy.setup_resume"]], "show_baseline_info() (neural_compressor.strategy.strategy.tunestrategy method)": [[327, "neural_compressor.strategy.strategy.TuneStrategy.show_baseline_info"]], "slave_worker_handle() (neural_compressor.strategy.strategy.tunestrategy method)": [[327, "neural_compressor.strategy.strategy.TuneStrategy.slave_worker_handle"]], "stop() (neural_compressor.strategy.strategy.tunestrategy method)": [[327, "neural_compressor.strategy.strategy.TuneStrategy.stop"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[327, "neural_compressor.strategy.strategy.strategy_registry"]], "traverse() (neural_compressor.strategy.strategy.tunestrategy method)": [[327, "neural_compressor.strategy.strategy.TuneStrategy.traverse"]], "update_best_op_tuning_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[327, "neural_compressor.strategy.strategy.TuneStrategy.update_best_op_tuning_cfg"]], "neural_compressor.strategy.utils.constant": [[328, "module-neural_compressor.strategy.utils.constant"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils)": [[329, "neural_compressor.strategy.utils.FallbackTuningSampler"]], "optuningconfig (class in neural_compressor.strategy.utils)": [[329, "neural_compressor.strategy.utils.OpTuningConfig"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils)": [[329, "neural_compressor.strategy.utils.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils)": [[329, "neural_compressor.strategy.utils.OpWiseTuningSampler"]], "tuningitem (class in neural_compressor.strategy.utils)": [[329, "neural_compressor.strategy.utils.TuningItem"]], "tuningsampler (class in neural_compressor.strategy.utils)": [[329, "neural_compressor.strategy.utils.TuningSampler"]], "tuningspace (class in neural_compressor.strategy.utils)": [[329, "neural_compressor.strategy.utils.TuningSpace"]], "append() (neural_compressor.strategy.utils.tuningitem method)": [[329, "neural_compressor.strategy.utils.TuningItem.append"]], "from_state() (neural_compressor.strategy.utils.optuningconfig class method)": [[329, "neural_compressor.strategy.utils.OpTuningConfig.from_state"]], "get_default_config() (neural_compressor.strategy.utils.tuningspace method)": [[329, "neural_compressor.strategy.utils.TuningSpace.get_default_config"]], "get_default_full_path() (neural_compressor.strategy.utils.tuningspace method)": [[329, "neural_compressor.strategy.utils.TuningSpace.get_default_full_path"]], "get_details() (neural_compressor.strategy.utils.tuningitem method)": [[329, "neural_compressor.strategy.utils.TuningItem.get_details"]], "get_item_by_path() (neural_compressor.strategy.utils.tuningspace method)": [[329, "neural_compressor.strategy.utils.TuningSpace.get_item_by_path"]], "get_op_default_path_by_pattern() (neural_compressor.strategy.utils.tuningspace method)": [[329, "neural_compressor.strategy.utils.TuningSpace.get_op_default_path_by_pattern"]], "get_option_by_name() (neural_compressor.strategy.utils.tuningitem method)": [[329, "neural_compressor.strategy.utils.TuningItem.get_option_by_name"]], "get_options_name() (neural_compressor.strategy.utils.tuningitem method)": [[329, "neural_compressor.strategy.utils.TuningItem.get_options_name"]], "get_opwise_candidate() (neural_compressor.strategy.utils.opwisetuningsampler method)": [[329, "neural_compressor.strategy.utils.OpWiseTuningSampler.get_opwise_candidate"]], "get_state() (neural_compressor.strategy.utils.optuningconfig method)": [[329, "neural_compressor.strategy.utils.OpTuningConfig.get_state"]], "neural_compressor.strategy.utils": [[329, "module-neural_compressor.strategy.utils"]], "options (neural_compressor.strategy.utils.tuningitem property)": [[329, "neural_compressor.strategy.utils.TuningItem.options"]], "query_item_option() (neural_compressor.strategy.utils.tuningspace method)": [[329, "neural_compressor.strategy.utils.TuningSpace.query_item_option"]], "query_items_by_quant_mode() (neural_compressor.strategy.utils.tuningspace method)": [[329, "neural_compressor.strategy.utils.TuningSpace.query_items_by_quant_mode"]], "query_quant_mode_item_by_full_path() (neural_compressor.strategy.utils.tuningspace method)": [[329, "neural_compressor.strategy.utils.TuningSpace.query_quant_mode_item_by_full_path"]], "remove() (neural_compressor.strategy.utils.tuningitem method)": [[329, "neural_compressor.strategy.utils.TuningItem.remove"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[330, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[330, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[330, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[330, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[330, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[330, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[330, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.strategy.utils.tuning_sampler)": [[330, "neural_compressor.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "get_opwise_candidate() (neural_compressor.strategy.utils.tuning_sampler.opwisetuningsampler method)": [[330, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler.get_opwise_candidate"]], "neural_compressor.strategy.utils.tuning_sampler": [[330, "module-neural_compressor.strategy.utils.tuning_sampler"]], "register() (neural_compressor.strategy.utils.tuning_sampler.tuningsamplerregistry class method)": [[330, "neural_compressor.strategy.utils.tuning_sampler.TuningSamplerRegistry.register"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[331, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[331, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "append() (neural_compressor.strategy.utils.tuning_space.tuningitem method)": [[331, "neural_compressor.strategy.utils.tuning_space.TuningItem.append"]], "get_default_config() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[331, "neural_compressor.strategy.utils.tuning_space.TuningSpace.get_default_config"]], "get_default_full_path() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[331, "neural_compressor.strategy.utils.tuning_space.TuningSpace.get_default_full_path"]], "get_details() (neural_compressor.strategy.utils.tuning_space.tuningitem method)": [[331, "neural_compressor.strategy.utils.tuning_space.TuningItem.get_details"]], "get_item_by_path() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[331, "neural_compressor.strategy.utils.tuning_space.TuningSpace.get_item_by_path"]], "get_op_default_path_by_pattern() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[331, "neural_compressor.strategy.utils.tuning_space.TuningSpace.get_op_default_path_by_pattern"]], "get_op_mode_by_query_order() (in module neural_compressor.strategy.utils.tuning_space)": [[331, "neural_compressor.strategy.utils.tuning_space.get_op_mode_by_query_order"]], "get_option_by_name() (neural_compressor.strategy.utils.tuning_space.tuningitem method)": [[331, "neural_compressor.strategy.utils.tuning_space.TuningItem.get_option_by_name"]], "get_options_name() (neural_compressor.strategy.utils.tuning_space.tuningitem method)": [[331, "neural_compressor.strategy.utils.tuning_space.TuningItem.get_options_name"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[331, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[331, "module-neural_compressor.strategy.utils.tuning_space"]], "options (neural_compressor.strategy.utils.tuning_space.tuningitem property)": [[331, "neural_compressor.strategy.utils.tuning_space.TuningItem.options"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[331, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[331, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[331, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "query_item_option() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[331, "neural_compressor.strategy.utils.tuning_space.TuningSpace.query_item_option"]], "query_items_by_quant_mode() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[331, "neural_compressor.strategy.utils.tuning_space.TuningSpace.query_items_by_quant_mode"]], "query_quant_mode_item_by_full_path() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[331, "neural_compressor.strategy.utils.tuning_space.TuningSpace.query_quant_mode_item_by_full_path"]], "remove() (neural_compressor.strategy.utils.tuning_space.tuningitem method)": [[331, "neural_compressor.strategy.utils.tuning_space.TuningItem.remove"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[332, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "from_state() (neural_compressor.strategy.utils.tuning_structs.optuningconfig class method)": [[332, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig.from_state"]], "get_state() (neural_compressor.strategy.utils.tuning_structs.optuningconfig method)": [[332, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig.get_state"]], "neural_compressor.strategy.utils.tuning_structs": [[332, "module-neural_compressor.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[333, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[333, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[333, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[333, "module-neural_compressor.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[333, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "callbacks (class in neural_compressor.training)": [[334, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[334, "neural_compressor.training.CompressionManager"]], "eval_dataloader (neural_compressor.training.compressionmanager property)": [[334, "neural_compressor.training.CompressionManager.eval_dataloader"]], "eval_func (neural_compressor.training.compressionmanager property)": [[334, "neural_compressor.training.CompressionManager.eval_func"]], "export() (neural_compressor.training.compressionmanager method)": [[334, "neural_compressor.training.CompressionManager.export"]], "fit() (in module neural_compressor.training)": [[334, "neural_compressor.training.fit"]], "fit() (neural_compressor.training.compressionmanager method)": [[334, "neural_compressor.training.CompressionManager.fit"]], "metric (neural_compressor.training.compressionmanager property)": [[334, "neural_compressor.training.CompressionManager.metric"]], "neural_compressor.training": [[334, "module-neural_compressor.training"]], "on_after_compute_loss() (neural_compressor.training.callbacks method)": [[334, "neural_compressor.training.CallBacks.on_after_compute_loss"]], "on_after_eval() (neural_compressor.training.callbacks method)": [[334, "neural_compressor.training.CallBacks.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.training.callbacks method)": [[334, "neural_compressor.training.CallBacks.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.training.callbacks method)": [[334, "neural_compressor.training.CallBacks.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.training.callbacks method)": [[334, "neural_compressor.training.CallBacks.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.training.callbacks method)": [[334, "neural_compressor.training.CallBacks.on_epoch_begin"]], "on_epoch_end() (neural_compressor.training.callbacks method)": [[334, "neural_compressor.training.CallBacks.on_epoch_end"]], "on_step_begin() (neural_compressor.training.callbacks method)": [[334, "neural_compressor.training.CallBacks.on_step_begin"]], "on_step_end() (neural_compressor.training.callbacks method)": [[334, "neural_compressor.training.CallBacks.on_step_end"]], "on_train_begin() (neural_compressor.training.callbacks method)": [[334, "neural_compressor.training.CallBacks.on_train_begin"]], "on_train_end() (neural_compressor.training.callbacks method)": [[334, "neural_compressor.training.CallBacks.on_train_end"]], "prepare_compression() (in module neural_compressor.training)": [[334, "neural_compressor.training.prepare_compression"]], "save() (neural_compressor.training.compressionmanager method)": [[334, "neural_compressor.training.CompressionManager.save"]], "train_func (neural_compressor.training.compressionmanager property)": [[334, "neural_compressor.training.CompressionManager.train_func"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[335, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "collect() (neural_compressor.utils.collect_layer_histogram.layerhistogramcollector method)": [[335, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector.collect"]], "neural_compressor.utils.collect_layer_histogram": [[335, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[336, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[337, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[337, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[337, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[337, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[337, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[337, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[337, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[337, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[337, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[337, "module-neural_compressor.utils.create_obj_from_config"]], "layerhistogramcollector (class in neural_compressor.utils)": [[338, "neural_compressor.utils.LayerHistogramCollector"]], "collect() (neural_compressor.utils.layerhistogramcollector method)": [[338, "neural_compressor.utils.LayerHistogramCollector.collect"]], "debug() (in module neural_compressor.utils)": [[338, "neural_compressor.utils.debug"]], "error() (in module neural_compressor.utils)": [[338, "neural_compressor.utils.error"]], "fatal() (in module neural_compressor.utils)": [[338, "neural_compressor.utils.fatal"]], "info() (in module neural_compressor.utils)": [[338, "neural_compressor.utils.info"]], "log() (in module neural_compressor.utils)": [[338, "neural_compressor.utils.log"]], "neural_compressor.utils": [[338, "module-neural_compressor.utils"]], "set_random_seed() (in module neural_compressor.utils)": [[338, "neural_compressor.utils.set_random_seed"]], "warn() (in module neural_compressor.utils)": [[338, "neural_compressor.utils.warn"]], "warning() (in module neural_compressor.utils)": [[338, "neural_compressor.utils.warning"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[339, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "expand_quantized_bins() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[339, "neural_compressor.utils.kl_divergence.KL_Divergence.expand_quantized_bins"]], "get_threshold() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[339, "neural_compressor.utils.kl_divergence.KL_Divergence.get_threshold"]], "neural_compressor.utils.kl_divergence": [[339, "module-neural_compressor.utils.kl_divergence"]], "safe_entropy() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[339, "neural_compressor.utils.kl_divergence.KL_Divergence.safe_entropy"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[340, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "from_pretrained() (neural_compressor.utils.load_huggingface.optimizedmodel class method)": [[340, "neural_compressor.utils.load_huggingface.OptimizedModel.from_pretrained"]], "neural_compressor.utils.load_huggingface": [[340, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[340, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[341, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[341, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[341, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[341, "neural_compressor.utils.logger.fatal"]], "get_logger() (neural_compressor.utils.logger.logger method)": [[341, "neural_compressor.utils.logger.Logger.get_logger"]], "info() (in module neural_compressor.utils.logger)": [[341, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[341, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[341, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[341, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[341, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.options": [[342, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[342, "neural_compressor.utils.options.onnxrt"]], "load() (in module neural_compressor.utils.pytorch)": [[343, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[343, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.Dequantize"]], "dequantizeweight() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.DequantizeWeight"]], "global_state (class in neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.MODE"]], "statistics (class in neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.Statistics"]], "bf16 (neural_compressor.utils.utility.cpuinfo property)": [[344, "neural_compressor.utils.utility.CpuInfo.bf16"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.combine_histogram"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.compute_sparsity"]], "cores_per_socket (neural_compressor.utils.utility.cpuinfo property)": [[344, "neural_compressor.utils.utility.CpuInfo.cores_per_socket"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.dump_elapsed_time"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (neural_compressor.utils.utility.cpuinfo method)": [[344, "neural_compressor.utils.utility.CpuInfo.get_number_of_sockets"]], "get_size() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.get_tuning_history"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.load_data_from_pkl"]], "neural_compressor.utils.utility": [[344, "module-neural_compressor.utils.utility"]], "print_stat() (neural_compressor.utils.utility.statistics method)": [[344, "neural_compressor.utils.utility.Statistics.print_stat"]], "recover() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[344, "neural_compressor.utils.utility.version1_lte_version2"]], "vnni (neural_compressor.utils.utility.cpuinfo property)": [[344, "neural_compressor.utils.utility.CpuInfo.vnni"]], "benchmark (class in neural_compressor.ux.components.benchmark.benchmark)": [[345, "neural_compressor.ux.components.benchmark.benchmark.Benchmark"]], "dataloaderinterface (class in neural_compressor.ux.components.benchmark.benchmark)": [[345, "neural_compressor.ux.components.benchmark.benchmark.DataloaderInterface"]], "config_filename (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[345, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.config_filename"]], "configuration_data (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[345, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.configuration_data"]], "execute() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[345, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.execute"]], "generate_config() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[345, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.generate_config"]], "neural_compressor.ux.components.benchmark.benchmark": [[345, "module-neural_compressor.ux.components.benchmark.benchmark"]], "workdir (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[345, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.workdir"]], "benchmark_model() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[346, "neural_compressor.ux.components.benchmark.benchmark_model.benchmark_model"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[346, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "parse_args() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[346, "neural_compressor.ux.components.benchmark.benchmark_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[346, "neural_compressor.ux.components.benchmark.benchmark_model.set_eager_execution"]], "benchmark_result_update() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[347, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update"]], "benchmark_result_update_pytorch_script() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[347, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update_pytorch_script"]], "execute_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[347, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_benchmark"]], "execute_real_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[347, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_real_benchmark"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[347, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "pytorch_script_bench_optimizations() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[347, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_optimizations"]], "pytorch_script_bench_original_model() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[347, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_original_model"]], "benchmarks (class in neural_compressor.ux.components.benchmark)": [[348, "neural_compressor.ux.components.benchmark.Benchmarks"]], "neural_compressor.ux.components.benchmark": [[348, "module-neural_compressor.ux.components.benchmark"]], "benchmarkconfiggenerator (class in neural_compressor.ux.components.config_generator.benchmark_config_generator)": [[349, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[349, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate"]], "generate_accuracy_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[349, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_accuracy_config"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[349, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_evaluation_config"]], "generate_performance_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[349, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_performance_config"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[349, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "configgenerator (class in neural_compressor.ux.components.config_generator.config_generator)": [[350, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[350, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate"]], "generate_dataloader_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[350, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_dataloader_config"]], "generate_model_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[350, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_model_config"]], "get_predefined_config_path() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[350, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.config_generator": [[350, "module-neural_compressor.ux.components.config_generator.config_generator"]], "graphoptimizationconfiggenerator (class in neural_compressor.ux.components.config_generator.graph_optimization_config_generator)": [[351, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[351, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[351, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_evaluation_config"]], "generate_graph_optimization_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[351, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[351, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[352, "module-neural_compressor.ux.components.config_generator"]], "mixedprecisionconfiggenerator (class in neural_compressor.ux.components.config_generator.mixed_precision_config_generator)": [[353, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[353, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[353, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_evaluation_config"]], "generate_mixed_precision_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[353, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[353, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "profilingconfiggenerator (class in neural_compressor.ux.components.config_generator.profiling_config_generator)": [[354, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.profiling_config_generator.profilingconfiggenerator method)": [[354, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator.generate"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[354, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "pruningconfiggenerator (class in neural_compressor.ux.components.config_generator.pruning_config_generator)": [[355, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[355, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[355, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate_evaluation_config"]], "generate_pruning_config() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[355, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate_pruning_config"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[355, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "quantizationconfiggenerator (class in neural_compressor.ux.components.config_generator.quantization_config_generator)": [[356, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[356, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[356, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_evaluation_config"]], "generate_quantization_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[356, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_quantization_config"]], "generate_tuning_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[356, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_tuning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[356, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "configurationparser (class in neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[357, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser"]], "get_param_type() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[357, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.get_param_type"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[357, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "normalize_string_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[357, "neural_compressor.ux.components.configuration_wizard.configuration_parser.normalize_string_list"]], "parse() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[357, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse"]], "parse_dataloader() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[357, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_dataloader"]], "parse_evaluation_data() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[357, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_evaluation_data"]], "parse_list_value() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[357, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_list_value"]], "parse_metric() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[357, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_metric"]], "parse_multidim_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[357, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_multidim_list"]], "parse_transforms() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[357, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_transforms"]], "parse_value() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser static method)": [[357, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_value"]], "get_boundary_nodes() (in module neural_compressor.ux.components.configuration_wizard.get_boundary_nodes)": [[358, "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[358, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "get_predefined_configuration() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[359, "neural_compressor.ux.components.configuration_wizard.get_configuration.get_predefined_configuration"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[359, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "update_config_to_machine_specification() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[359, "neural_compressor.ux.components.configuration_wizard.get_configuration.update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard": [[360, "module-neural_compressor.ux.components.configuration_wizard"]], "feeder (class in neural_compressor.ux.components.configuration_wizard.params_feeder)": [[361, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder"]], "feed() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[361, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.feed"]], "get_dataloaders() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[361, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_dataloaders"]], "get_domains() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[361, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_domains"]], "get_frameworks() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[361, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_frameworks"]], "get_metrics() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[361, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_metrics"]], "get_models() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[361, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_models"]], "get_objectives() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[361, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_objectives"]], "get_possible_values() (in module neural_compressor.ux.components.configuration_wizard.params_feeder)": [[361, "neural_compressor.ux.components.configuration_wizard.params_feeder.get_possible_values"]], "get_precisions() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[361, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_precisions"]], "get_quantization_approaches() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[361, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_quantization_approaches"]], "get_strategies() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[361, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_strategies"]], "get_transforms() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[361, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_transforms"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[361, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "pruningconfigparser (class in neural_compressor.ux.components.configuration_wizard.pruning_config_parser)": [[362, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser"]], "generate_tree() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[362, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.generate_tree"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[362, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "parse() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[362, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.parse"]], "parse_entry() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[362, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.parse_entry"]], "dbmanager (class in neural_compressor.ux.components.db_manager.db_manager)": [[363, "neural_compressor.ux.components.db_manager.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[363, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[363, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.db_manager.dbmanager property)": [[363, "neural_compressor.ux.components.db_manager.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[363, "neural_compressor.ux.components.db_manager.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[363, "module-neural_compressor.ux.components.db_manager.db_manager"]], "benchmark (class in neural_compressor.ux.components.db_manager.db_models.benchmark)": [[364, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.delete_benchmark"]], "details() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.list"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[364, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_config_path"]], "update_cores_per_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_cores_per_instance"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_log_path"]], "update_mode() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_mode"]], "update_number_of_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_number_of_instance"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_status"]], "benchmarkresult (class in neural_compressor.ux.components.db_manager.db_models.benchmark_result)": [[365, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[365, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[365, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.build_info"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[365, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "update_accuracy() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[365, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_accuracy"]], "update_performance() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[365, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_performance"]], "dataloader (class in neural_compressor.ux.components.db_manager.db_models.dataloader)": [[366, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.dataloader)": [[366, "neural_compressor.ux.components.db_manager.db_models.dataloader.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[366, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.query_to_list"]], "update_params() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.update_params"]], "dataset (class in neural_compressor.ux.components.db_manager.db_models.dataset)": [[367, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset"]], "add() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[367, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[367, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.build_info"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[367, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.delete_dataset"]], "details() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[367, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[367, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.list"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[367, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "update_template_path() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[367, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.update_template_path"]], "domain (class in neural_compressor.ux.components.db_manager.db_models.domain)": [[368, "neural_compressor.ux.components.db_manager.db_models.domain.Domain"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain)": [[368, "neural_compressor.ux.components.db_manager.db_models.domain.fill_dictionary"]], "get_domain_id() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[368, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.get_domain_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[368, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.list"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[368, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "domainflavour (class in neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[369, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[369, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.fill_dictionary"]], "get_domain_flavour_id() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[369, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.get_domain_flavour_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[369, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[369, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "example (class in neural_compressor.ux.components.db_manager.db_models.example)": [[370, "neural_compressor.ux.components.db_manager.db_models.example.Example"]], "neural_compressor.ux.components.db_manager.db_models.example": [[370, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "framework (class in neural_compressor.ux.components.db_manager.db_models.framework)": [[371, "neural_compressor.ux.components.db_manager.db_models.framework.Framework"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.framework)": [[371, "neural_compressor.ux.components.db_manager.db_models.framework.fill_dictionary"]], "get_framework_id() (neural_compressor.ux.components.db_manager.db_models.framework.framework static method)": [[371, "neural_compressor.ux.components.db_manager.db_models.framework.Framework.get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[371, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[372, "module-neural_compressor.ux.components.db_manager.db_models"]], "metric (class in neural_compressor.ux.components.db_manager.db_models.metric)": [[373, "neural_compressor.ux.components.db_manager.db_models.metric.Metric"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.metric)": [[373, "neural_compressor.ux.components.db_manager.db_models.metric.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[373, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.query_to_list"]], "model (class in neural_compressor.ux.components.db_manager.db_models.model)": [[374, "neural_compressor.ux.components.db_manager.db_models.model.Model"]], "add() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.model.Model.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.model.Model.build_info"]], "delete_model() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.model.Model.delete_model"]], "details() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.model.Model.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.model.Model.list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[374, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "optimization (class in neural_compressor.ux.components.db_manager.db_models.optimization)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.delete_optimization"]], "details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.details"]], "get_optimization_by_project_and_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_optimization_by_project_and_model"]], "get_pinned_benchmarks() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_pinned_benchmarks"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[375, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_performance_benchmark"]], "unpin_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.unpin_benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_config_path"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_log_path"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_optimized_model"]], "update_precision() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_precision"]], "update_pruning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_pruning_details"]], "update_sampling_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_sampling_size"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_status"]], "update_tuning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_tuning_details"]], "optimizationtype (class in neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[376, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[376, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[376, "neural_compressor.ux.components.db_manager.db_models.optimization_type.fill_dictionary"]], "get_optimization_type_by_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[376, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_id"]], "get_optimization_type_by_name() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[376, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_name"]], "get_optimization_type_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[376, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_for_precision"]], "get_optimization_type_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[376, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[376, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list"]], "list_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[376, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[376, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "precision (class in neural_compressor.ux.components.db_manager.db_models.precision)": [[377, "neural_compressor.ux.components.db_manager.db_models.precision.Precision"]], "add() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.precision)": [[377, "neural_compressor.ux.components.db_manager.db_models.precision.fill_dictionary"]], "get_precision_by_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_id"]], "get_precision_by_name() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_name"]], "get_precision_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.list"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[377, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "profiling (class in neural_compressor.ux.components.db_manager.db_models.profiling)": [[378, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[378, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[378, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[378, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[378, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.delete_profiling"]], "details() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[378, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[378, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[378, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[378, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[378, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[378, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[378, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_log_path"]], "update_num_threads() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[378, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_num_threads"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[378, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_status"]], "profilingresult (class in neural_compressor.ux.components.db_manager.db_models.profiling_result)": [[379, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[379, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[379, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.build_info"]], "bulk_add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[379, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.bulk_add"]], "delete_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[379, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.delete_results"]], "get_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[379, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.get_results"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[379, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "project (class in neural_compressor.ux.components.db_manager.db_models.project)": [[380, "neural_compressor.ux.components.db_manager.db_models.project.Project"]], "create_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.project.Project.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.project.Project.delete_project"]], "get_model_by_name() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.project.Project.get_model_by_name"]], "list_projects() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.project.Project.list_projects"]], "neural_compressor.ux.components.db_manager.db_models.project": [[380, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "project_details() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.project.Project.project_details"]], "update_notes() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.project.Project.update_notes"]], "pruningdetails (class in neural_compressor.ux.components.db_manager.db_models.pruning_details)": [[381, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.build_info"]], "delete_pruning_details() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.delete_pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[381, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.update"]], "transform (class in neural_compressor.ux.components.db_manager.db_models.transform)": [[382, "neural_compressor.ux.components.db_manager.db_models.transform.Transform"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.transform)": [[382, "neural_compressor.ux.components.db_manager.db_models.transform.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list"]], "list_by_domain() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_domain"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[382, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[382, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.query_to_list"]], "tuningdetails (class in neural_compressor.ux.components.db_manager.db_models.tuning_details)": [[383, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.add"]], "delete_tuning_details() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.delete_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[383, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update"]], "update_tuning_history() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[383, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update_tuning_history"]], "tuninghistory (class in neural_compressor.ux.components.db_manager.db_models.tuning_history)": [[384, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[384, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[384, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.build_info"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[384, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[385, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_benchmark"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_result"]], "before_delete_benchmark_entry() (in module neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[385, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.before_delete_benchmark_entry"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.delete_benchmark"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.edit_benchmark"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.get_benchmark_details"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.list_benchmarks"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[385, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_execution_command"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_paths"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.add_dataset"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.dataloader_path"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.delete_dataset"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_custom_template"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_template"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_dataset_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_predefined_dataset"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_precision_optimization_types_association"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.list_datasets"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[386, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.parse_dataset_data"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_transform"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.set_database_version"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.set_template_path"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[387, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[387, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[387, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[387, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[387, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[387, "neural_compressor.ux.components.db_manager.db_operations.db_operations.set_database_version"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface)": [[388, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.generate_optimization"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_list"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.histogram"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[388, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_optimization_data"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_wise_parameters"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface)": [[389, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics_by_framework"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_precisions"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[389, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.examples_api_interface)": [[390, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.create_project"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[390, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[391, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[391, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_benchmark"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.add_dataset"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.add_model"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_model"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_optimization"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_profiling"]], "add_pruning_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_pruning_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_quantization_optimization"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_result"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_result"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_tuning_history"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.bulk_add_results"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.clean_status"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.create_project"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.create_project"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.dataloader_path"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.delete_benchmark"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.delete_dataset"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.delete_model"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.delete_optimization"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.delete_profiling"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.delete_project"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.edit_benchmark"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_optimization"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.edit_profiling"]], "edit_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_pruning_details"]], "edit_tuning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_tuning_details"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_custom_template"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.generate_optimization"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_template"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.get_benchmark_details"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_dataset_details"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.get_model_details"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_list"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.get_optimization_data"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_optimization_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_predefined_dataset"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.get_profiling_details"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.get_project_details"]], "get_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_pruning_details"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.histogram"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.list_benchmarks"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.list_datasets"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics_by_framework"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.list_models"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.list_optimizations"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_precisions"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.list_profilings"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.list_projects"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_framework"]], "load_pruning_details_config() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.load_pruning_details_config"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations": [[391, "module-neural_compressor.ux.components.db_manager.db_operations"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.parse_dataset_data"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.parse_model_data"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_optimization_data"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_result_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_tuning_history"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_wise_parameters"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_performance_benchmark"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_transform"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.set_template_path"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_log_path"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_paths"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_paths"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_status"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.update_project_notes"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.model_api_interface)": [[392, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[392, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.add_model"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[392, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.delete_model"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[392, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.get_model_details"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[392, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.list_models"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[392, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[392, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.parse_model_data"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface)": [[393, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_optimization"]], "add_pruning_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_pruning_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_quantization_optimization"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_tuning_history"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.delete_optimization"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_optimization"]], "edit_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_pruning_details"]], "edit_tuning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_tuning_details"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_optimization_details"]], "get_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_pruning_details"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.list_optimizations"]], "load_pruning_details_config() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.load_pruning_details_config"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[393, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_tuning_history"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_performance_benchmark"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_execution_command"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[393, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_paths"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface)": [[394, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[394, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_profiling"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[394, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_result"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[394, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.bulk_add_results"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[394, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[394, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.delete_profiling"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[394, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.edit_profiling"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[394, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.get_profiling_details"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[394, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.list_profilings"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[394, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[394, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[394, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[394, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_result_data"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[394, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[394, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_log_path"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[394, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[394, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_status"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.project_api_interface)": [[395, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[395, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[395, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_model"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[395, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[395, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.delete_project"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[395, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.get_project_details"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[395, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.list_projects"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[395, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[395, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.update_project_notes"]], "dbmanager (class in neural_compressor.ux.components.db_manager)": [[396, "neural_compressor.ux.components.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.dbmanager method)": [[396, "neural_compressor.ux.components.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.dbmanager method)": [[396, "neural_compressor.ux.components.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.dbmanager property)": [[396, "neural_compressor.ux.components.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.dbmanager method)": [[396, "neural_compressor.ux.components.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager": [[396, "module-neural_compressor.ux.components.db_manager"]], "benchmarkaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[397, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkAddParamsInterface"]], "benchmarkeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[397, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkEditParamsInterface"]], "datasetaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[397, "neural_compressor.ux.components.db_manager.params_interfaces.DatasetAddParamsInterface"]], "diagnosisoptimizationparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[397, "neural_compressor.ux.components.db_manager.params_interfaces.DiagnosisOptimizationParamsInterface"]], "modeladdparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[397, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface"]], "optimizationaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[397, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationAddParamsInterface"]], "optimizationeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[397, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationEditParamsInterface"]], "profilingaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[397, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingAddParamsInterface"]], "profilingeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[397, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingEditParamsInterface"]], "profilingresultaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[397, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingResultAddParamsInterface"]], "tuninghistoryinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[397, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface"]], "tuninghistoryiteminterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[397, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[397, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "parse_nodes() (neural_compressor.ux.components.db_manager.params_interfaces.modeladdparamsinterface static method)": [[397, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface.parse_nodes"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryinterface method)": [[397, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface.serialize"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryiteminterface method)": [[397, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface.serialize"]], "get_framework_dataloaders_config() (in module neural_compressor.ux.components.db_manager.utils)": [[398, "neural_compressor.ux.components.db_manager.utils.get_framework_dataloaders_config"]], "get_framework_transforms_config() (in module neural_compressor.ux.components.db_manager.utils)": [[398, "neural_compressor.ux.components.db_manager.utils.get_framework_transforms_config"]], "neural_compressor.ux.components.db_manager.utils": [[398, "module-neural_compressor.ux.components.db_manager.utils"]], "update_dataloaders_params() (in module neural_compressor.ux.components.db_manager.utils)": [[398, "neural_compressor.ux.components.db_manager.utils.update_dataloaders_params"]], "diagnosis (class in neural_compressor.ux.components.diagnosis.diagnosis)": [[399, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis"]], "calculate_mse() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[399, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.calculate_mse"]], "get_histogram_data() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[399, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_histogram_data"]], "get_op_details() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[399, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_details"]], "get_op_list() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[399, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_list"]], "get_tensors_info() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[399, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_tensors_info"]], "load_quantization_config() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[399, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.load_quantization_config"]], "mse_metric_gap() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis static method)": [[399, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[399, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "diagnosisfactory (class in neural_compressor.ux.components.diagnosis.factory)": [[400, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory"]], "get_diagnosis() (neural_compressor.ux.components.diagnosis.factory.diagnosisfactory static method)": [[400, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory.get_diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[400, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[401, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[402, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "onnxrtdiagnosis (class in neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis)": [[403, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.onnxrtdiagnosis property)": [[403, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[403, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "opactivation (class in neural_compressor.ux.components.diagnosis.op_details)": [[404, "neural_compressor.ux.components.diagnosis.op_details.OpActivation"]], "opdetails (class in neural_compressor.ux.components.diagnosis.op_details)": [[404, "neural_compressor.ux.components.diagnosis.op_details.OpDetails"]], "oppattern (class in neural_compressor.ux.components.diagnosis.op_details)": [[404, "neural_compressor.ux.components.diagnosis.op_details.OpPattern"]], "opweights (class in neural_compressor.ux.components.diagnosis.op_details)": [[404, "neural_compressor.ux.components.diagnosis.op_details.OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details": [[404, "module-neural_compressor.ux.components.diagnosis.op_details"]], "serialize() (neural_compressor.ux.components.diagnosis.op_details.opdetails method)": [[404, "neural_compressor.ux.components.diagnosis.op_details.OpDetails.serialize"]], "opentry (class in neural_compressor.ux.components.diagnosis.op_entry)": [[405, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry": [[405, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "serialize() (neural_compressor.ux.components.diagnosis.op_entry.opentry method)": [[405, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry.serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[406, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "tensorflowdiagnosis (class in neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis)": [[407, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.tensorflowdiagnosis property)": [[407, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[407, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "create_dir_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[408, "neural_compressor.ux.components.file_browser.file_browser.create_dir_entry"]], "create_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[408, "neural_compressor.ux.components.file_browser.file_browser.create_entry"]], "create_file_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[408, "neural_compressor.ux.components.file_browser.file_browser.create_file_entry"]], "filter_requested_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[408, "neural_compressor.ux.components.file_browser.file_browser.filter_requested_entries"]], "get_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[408, "neural_compressor.ux.components.file_browser.file_browser.get_directory_entries"]], "get_filter_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[408, "neural_compressor.ux.components.file_browser.file_browser.get_filter_value"]], "get_non_hidden_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[408, "neural_compressor.ux.components.file_browser.file_browser.get_non_hidden_directory_entries"]], "get_requested_path() (in module neural_compressor.ux.components.file_browser.file_browser)": [[408, "neural_compressor.ux.components.file_browser.file_browser.get_requested_path"]], "get_setting_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[408, "neural_compressor.ux.components.file_browser.file_browser.get_setting_value"]], "is_dataset_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[408, "neural_compressor.ux.components.file_browser.file_browser.is_dataset_or_directory_entry"]], "is_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[408, "neural_compressor.ux.components.file_browser.file_browser.is_directory_entry"]], "is_model_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[408, "neural_compressor.ux.components.file_browser.file_browser.is_model_or_directory_entry"]], "neural_compressor.ux.components.file_browser.file_browser": [[408, "module-neural_compressor.ux.components.file_browser.file_browser"]], "should_show_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[408, "neural_compressor.ux.components.file_browser.file_browser.should_show_files"]], "should_show_only_model_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[408, "neural_compressor.ux.components.file_browser.file_browser.should_show_only_model_files"]], "sort_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[408, "neural_compressor.ux.components.file_browser.file_browser.sort_entries"]], "neural_compressor.ux.components.file_browser": [[409, "module-neural_compressor.ux.components.file_browser"]], "attribute (class in neural_compressor.ux.components.graph.attribute)": [[410, "neural_compressor.ux.components.graph.attribute.Attribute"]], "neural_compressor.ux.components.graph.attribute": [[410, "module-neural_compressor.ux.components.graph.attribute"]], "collapser (class in neural_compressor.ux.components.graph.collapser)": [[411, "neural_compressor.ux.components.graph.collapser.Collapser"]], "collapse() (neural_compressor.ux.components.graph.collapser.collapser method)": [[411, "neural_compressor.ux.components.graph.collapser.Collapser.collapse"]], "neural_compressor.ux.components.graph.collapser": [[411, "module-neural_compressor.ux.components.graph.collapser"]], "edge (class in neural_compressor.ux.components.graph.edge)": [[412, "neural_compressor.ux.components.graph.edge.Edge"]], "neural_compressor.ux.components.graph.edge": [[412, "module-neural_compressor.ux.components.graph.edge"]], "source (neural_compressor.ux.components.graph.edge.edge property)": [[412, "neural_compressor.ux.components.graph.edge.Edge.source"]], "target (neural_compressor.ux.components.graph.edge.edge property)": [[412, "neural_compressor.ux.components.graph.edge.Edge.target"]], "graph (class in neural_compressor.ux.components.graph.graph)": [[413, "neural_compressor.ux.components.graph.graph.Graph"]], "add_edge() (neural_compressor.ux.components.graph.graph.graph method)": [[413, "neural_compressor.ux.components.graph.graph.Graph.add_edge"]], "add_node() (neural_compressor.ux.components.graph.graph.graph method)": [[413, "neural_compressor.ux.components.graph.graph.Graph.add_node"]], "edges (neural_compressor.ux.components.graph.graph.graph property)": [[413, "neural_compressor.ux.components.graph.graph.Graph.edges"]], "get_node() (neural_compressor.ux.components.graph.graph.graph method)": [[413, "neural_compressor.ux.components.graph.graph.Graph.get_node"]], "get_target_nodes() (neural_compressor.ux.components.graph.graph.graph method)": [[413, "neural_compressor.ux.components.graph.graph.Graph.get_target_nodes"]], "highlight_pattern() (neural_compressor.ux.components.graph.graph.graph method)": [[413, "neural_compressor.ux.components.graph.graph.Graph.highlight_pattern"]], "neural_compressor.ux.components.graph.graph": [[413, "module-neural_compressor.ux.components.graph.graph"]], "nodes (neural_compressor.ux.components.graph.graph.graph property)": [[413, "neural_compressor.ux.components.graph.graph.Graph.nodes"]], "graphreader (class in neural_compressor.ux.components.graph.graph_reader)": [[414, "neural_compressor.ux.components.graph.graph_reader.GraphReader"]], "find_pattern_in_graph() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[414, "neural_compressor.ux.components.graph.graph_reader.GraphReader.find_pattern_in_graph"]], "neural_compressor.ux.components.graph.graph_reader": [[414, "module-neural_compressor.ux.components.graph.graph_reader"]], "read() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[414, "neural_compressor.ux.components.graph.graph_reader.GraphReader.read"]], "neural_compressor.ux.components.graph": [[415, "module-neural_compressor.ux.components.graph"]], "groupnode (class in neural_compressor.ux.components.graph.node)": [[416, "neural_compressor.ux.components.graph.node.GroupNode"]], "node (class in neural_compressor.ux.components.graph.node)": [[416, "neural_compressor.ux.components.graph.node.Node"]], "neural_compressor.ux.components.graph.node": [[416, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[417, "module-neural_compressor.ux.components.graph.reader"]], "onnxrtreader (class in neural_compressor.ux.components.graph.reader.onnxrt_reader)": [[418, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[418, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "read() (neural_compressor.ux.components.graph.reader.onnxrt_reader.onnxrtreader method)": [[418, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader.read"]], "tensorflowreader (class in neural_compressor.ux.components.graph.reader.tensorflow_reader)": [[419, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[419, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "read() (neural_compressor.ux.components.graph.reader.tensorflow_reader.tensorflowreader method)": [[419, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader.read"]], "neural_compressor.ux.components": [[420, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[421, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[422, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[423, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[424, "module-neural_compressor.ux.components.jobs_management.request"]], "get_default_path() (in module neural_compressor.ux.components.manage_workspace)": [[425, "neural_compressor.ux.components.manage_workspace.get_default_path"]], "neural_compressor.ux.components.manage_workspace": [[425, "module-neural_compressor.ux.components.manage_workspace"]], "domain (class in neural_compressor.ux.components.model.domain)": [[426, "neural_compressor.ux.components.model.domain.Domain"]], "neural_compressor.ux.components.model.domain": [[426, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[427, "module-neural_compressor.ux.components.model"]], "model (class in neural_compressor.ux.components.model.model)": [[428, "neural_compressor.ux.components.model.model.Model"]], "domain (neural_compressor.ux.components.model.model.model property)": [[428, "neural_compressor.ux.components.model.model.Model.domain"]], "ensure_supported_path() (neural_compressor.ux.components.model.model.model method)": [[428, "neural_compressor.ux.components.model.model.Model.ensure_supported_path"]], "get_framework_name() (neural_compressor.ux.components.model.model.model static method)": [[428, "neural_compressor.ux.components.model.model.Model.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.model.model method)": [[428, "neural_compressor.ux.components.model.model.Model.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.model.model method)": [[428, "neural_compressor.ux.components.model.model.Model.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.model.model method)": [[428, "neural_compressor.ux.components.model.model.Model.get_output_nodes"]], "get_tensors_info() (neural_compressor.ux.components.model.model.model method)": [[428, "neural_compressor.ux.components.model.model.Model.get_tensors_info"]], "guard_requirements_installed() (neural_compressor.ux.components.model.model.model method)": [[428, "neural_compressor.ux.components.model.model.Model.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.model.model property)": [[428, "neural_compressor.ux.components.model.model.Model.input_shape"]], "neural_compressor.ux.components.model.model": [[428, "module-neural_compressor.ux.components.model.model"]], "shape_elements_order (neural_compressor.ux.components.model.model.model property)": [[428, "neural_compressor.ux.components.model.model.Model.shape_elements_order"]], "supports_graph (neural_compressor.ux.components.model.model.model property)": [[428, "neural_compressor.ux.components.model.model.Model.supports_graph"]], "supports_path() (neural_compressor.ux.components.model.model.model static method)": [[428, "neural_compressor.ux.components.model.model.Model.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.model.model property)": [[428, "neural_compressor.ux.components.model.model.Model.supports_profiling"]], "supports_pruning (neural_compressor.ux.components.model.model.model property)": [[428, "neural_compressor.ux.components.model.model.Model.supports_pruning"]], "get_model_type() (in module neural_compressor.ux.components.model.model_type_getter)": [[429, "neural_compressor.ux.components.model.model_type_getter.get_model_type"]], "neural_compressor.ux.components.model.model_type_getter": [[429, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[430, "module-neural_compressor.ux.components.model.onnxrt"]], "onnxrtmodel (class in neural_compressor.ux.components.model.onnxrt.model)": [[431, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel"]], "domain (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[431, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.domain"]], "filtered_input_nodes (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[431, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.filtered_input_nodes"]], "get_framework_name() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[431, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_framework_name"]], "get_model_graph() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[431, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_model_graph"]], "guard_requirements_installed() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[431, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[431, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[431, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.nc_model_instance"]], "neural_compressor.ux.components.model.onnxrt.model": [[431, "module-neural_compressor.ux.components.model.onnxrt.model"]], "remove_number_of_samples_from_shape() (in module neural_compressor.ux.components.model.onnxrt.model)": [[431, "neural_compressor.ux.components.model.onnxrt.model.remove_number_of_samples_from_shape"]], "shape_elements_order (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[431, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.shape_elements_order"]], "supports_path() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[431, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.supports_path"]], "neural_compressor.ux.components.model.pytorch": [[432, "module-neural_compressor.ux.components.model.pytorch"]], "pytorchscriptmodel (class in neural_compressor.ux.components.model.pytorch.model)": [[433, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel"]], "get_framework_name() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[433, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.get_framework_name"]], "guard_requirements_installed() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel method)": [[433, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.guard_requirements_installed"]], "neural_compressor.ux.components.model.pytorch.model": [[433, "module-neural_compressor.ux.components.model.pytorch.model"]], "supports_path() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[433, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.supports_path"]], "modelrepository (class in neural_compressor.ux.components.model.repository)": [[434, "neural_compressor.ux.components.model.repository.ModelRepository"]], "get_framework_from_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[434, "neural_compressor.ux.components.model.repository.ModelRepository.get_framework_from_path"]], "get_frameworks() (neural_compressor.ux.components.model.repository.modelrepository method)": [[434, "neural_compressor.ux.components.model.repository.ModelRepository.get_frameworks"]], "get_model() (neural_compressor.ux.components.model.repository.modelrepository method)": [[434, "neural_compressor.ux.components.model.repository.ModelRepository.get_model"]], "get_supported_frameworks() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[434, "neural_compressor.ux.components.model.repository.ModelRepository.get_supported_frameworks"]], "is_model_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[434, "neural_compressor.ux.components.model.repository.ModelRepository.is_model_path"]], "neural_compressor.ux.components.model.repository": [[434, "module-neural_compressor.ux.components.model.repository"]], "shape (class in neural_compressor.ux.components.model.shape)": [[435, "neural_compressor.ux.components.model.shape.Shape"]], "neural_compressor.ux.components.model.shape": [[435, "module-neural_compressor.ux.components.model.shape"]], "serialize() (neural_compressor.ux.components.model.shape.shape method)": [[435, "neural_compressor.ux.components.model.shape.Shape.serialize"]], "frozenpbmodel (class in neural_compressor.ux.components.model.tensorflow.frozen_pb)": [[436, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[436, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel static method)": [[436, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel property)": [[436, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_profiling"]], "neural_compressor.ux.components.model.tensorflow": [[437, "module-neural_compressor.ux.components.model.tensorflow"]], "kerasmodel (class in neural_compressor.ux.components.model.tensorflow.keras)": [[438, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[438, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_input_nodes"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[438, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.keras": [[438, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel static method)": [[438, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.supports_path"]], "metagraphmodel (class in neural_compressor.ux.components.model.tensorflow.meta_graph)": [[439, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[439, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[439, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[439, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[439, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel static method)": [[439, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.supports_path"]], "tensorflowmodel (class in neural_compressor.ux.components.model.tensorflow.model)": [[440, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel"]], "get_framework_name() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel static method)": [[440, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[440, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[440, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[440, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_output_nodes"]], "guard_requirements_installed() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[440, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[440, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[440, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.nc_model_instance"]], "neural_compressor.ux.components.model.tensorflow.model": [[440, "module-neural_compressor.ux.components.model.tensorflow.model"]], "shape_elements_order (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[440, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.shape_elements_order"]], "supports_pruning (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[440, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.supports_pruning"]], "savedmodelmodel (class in neural_compressor.ux.components.model.tensorflow.saved_model)": [[441, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[441, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.saved_model.savedmodelmodel static method)": [[441, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel.supports_path"]], "get_input_shape() (in module neural_compressor.ux.components.model.tensorflow.utils)": [[442, "neural_compressor.ux.components.model.tensorflow.utils.get_input_shape"]], "neural_compressor.ux.components.model.tensorflow.utils": [[442, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "download_config() (in module neural_compressor.ux.components.model_zoo.download_config)": [[443, "neural_compressor.ux.components.model_zoo.download_config.download_config"]], "neural_compressor.ux.components.model_zoo.download_config": [[443, "module-neural_compressor.ux.components.model_zoo.download_config"]], "download_model() (in module neural_compressor.ux.components.model_zoo.download_model)": [[444, "neural_compressor.ux.components.model_zoo.download_model.download_model"]], "neural_compressor.ux.components.model_zoo.download_model": [[444, "module-neural_compressor.ux.components.model_zoo.download_model"]], "downloader (class in neural_compressor.ux.components.model_zoo.downloader)": [[445, "neural_compressor.ux.components.model_zoo.downloader.Downloader"]], "download() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[445, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download"]], "download_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[445, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_config"]], "download_file() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[445, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_file"]], "download_model() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[445, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_model"]], "download_yaml_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[445, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_yaml_config"]], "get_yaml_url() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[445, "neural_compressor.ux.components.model_zoo.downloader.Downloader.get_yaml_url"]], "neural_compressor.ux.components.model_zoo.downloader": [[445, "module-neural_compressor.ux.components.model_zoo.downloader"]], "unpack_archive() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[445, "neural_compressor.ux.components.model_zoo.downloader.Downloader.unpack_archive"]], "neural_compressor.ux.components.model_zoo": [[446, "module-neural_compressor.ux.components.model_zoo"]], "check_version() (in module neural_compressor.ux.components.model_zoo.list_models)": [[447, "neural_compressor.ux.components.model_zoo.list_models.check_version"]], "get_available_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[447, "neural_compressor.ux.components.model_zoo.list_models.get_available_models"]], "get_framework_module_name() (in module neural_compressor.ux.components.model_zoo.list_models)": [[447, "neural_compressor.ux.components.model_zoo.list_models.get_framework_module_name"]], "get_installed_frameworks() (in module neural_compressor.ux.components.model_zoo.list_models)": [[447, "neural_compressor.ux.components.model_zoo.list_models.get_installed_frameworks"]], "list_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[447, "neural_compressor.ux.components.model_zoo.list_models.list_models"]], "neural_compressor.ux.components.model_zoo.list_models": [[447, "module-neural_compressor.ux.components.model_zoo.list_models"]], "validate_model_list() (in module neural_compressor.ux.components.model_zoo.list_models)": [[447, "neural_compressor.ux.components.model_zoo.list_models.validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[448, "module-neural_compressor.ux.components.names_mapper"]], "mappingdirection (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[449, "neural_compressor.ux.components.names_mapper.names_mapper.MappingDirection"]], "namesmapper (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[449, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper"]], "domain_flavour_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[449, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_flavour_mappings"]], "domain_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[449, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_mappings"]], "framework_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[449, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.framework_mappings"]], "map_name() (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper method)": [[449, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.map_name"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[449, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "precision_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[449, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.precision_mappings"]], "check_if_collect_tuning_history() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[450, "neural_compressor.ux.components.optimization.execute_optimization.check_if_collect_tuning_history"]], "execute_optimization() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[450, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization"]], "execute_optimization_pytorch_script() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[450, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_pytorch_script"]], "execute_optimization_regular() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[450, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_regular"]], "neural_compressor.ux.components.optimization.execute_optimization": [[450, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "parse_logs() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[450, "neural_compressor.ux.components.optimization.execute_optimization.parse_logs"]], "parse_model_data_to_bench_names() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[450, "neural_compressor.ux.components.optimization.execute_optimization.parse_model_data_to_bench_names"]], "optimizationfactory (class in neural_compressor.ux.components.optimization.factory)": [[451, "neural_compressor.ux.components.optimization.factory.OptimizationFactory"]], "get_optimization() (neural_compressor.ux.components.optimization.factory.optimizationfactory static method)": [[451, "neural_compressor.ux.components.optimization.factory.OptimizationFactory.get_optimization"]], "neural_compressor.ux.components.optimization.factory": [[451, "module-neural_compressor.ux.components.optimization.factory"]], "graphoptimization (class in neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization)": [[452, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization"]], "configuration_data (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[452, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[452, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[452, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.generate_config"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[452, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "optimization_script (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[452, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[452, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[453, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[454, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[454, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[454, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[454, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[454, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.set_eager_execution"]], "optimizations (class in neural_compressor.ux.components.optimization)": [[455, "neural_compressor.ux.components.optimization.Optimizations"]], "neural_compressor.ux.components.optimization": [[455, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[456, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "mixedprecision (class in neural_compressor.ux.components.optimization.mixed_precision.mixed_precision)": [[457, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision"]], "configuration_data (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[457, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[457, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.execute"]], "generate_config() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[457, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.generate_config"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[457, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "optimization_script (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[457, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[457, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[458, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[458, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[458, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[458, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[458, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[459, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[460, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "optimize_pt_script() (in module neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model)": [[460, "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model.optimize_pt_script"]], "dataloaderinterface (class in neural_compressor.ux.components.optimization.optimization)": [[461, "neural_compressor.ux.components.optimization.optimization.DataloaderInterface"]], "optimization (class in neural_compressor.ux.components.optimization.optimization)": [[461, "neural_compressor.ux.components.optimization.optimization.Optimization"]], "optimizationinterface (class in neural_compressor.ux.components.optimization.optimization)": [[461, "neural_compressor.ux.components.optimization.optimization.OptimizationInterface"]], "command (neural_compressor.ux.components.optimization.optimization.optimization property)": [[461, "neural_compressor.ux.components.optimization.optimization.Optimization.command"]], "config_filename (neural_compressor.ux.components.optimization.optimization.optimization property)": [[461, "neural_compressor.ux.components.optimization.optimization.Optimization.config_filename"]], "configuration_data (neural_compressor.ux.components.optimization.optimization.optimization property)": [[461, "neural_compressor.ux.components.optimization.optimization.Optimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[461, "neural_compressor.ux.components.optimization.optimization.Optimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[461, "neural_compressor.ux.components.optimization.optimization.Optimization.generate_config"]], "neural_compressor.ux.components.optimization.optimization": [[461, "module-neural_compressor.ux.components.optimization.optimization"]], "optimization_script (neural_compressor.ux.components.optimization.optimization.optimization property)": [[461, "neural_compressor.ux.components.optimization.optimization.Optimization.optimization_script"]], "output_model_dir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[461, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_dir"]], "output_model_name (neural_compressor.ux.components.optimization.optimization.optimization property)": [[461, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_name"]], "parameters (neural_compressor.ux.components.optimization.optimization.optimization property)": [[461, "neural_compressor.ux.components.optimization.optimization.Optimization.parameters"]], "workdir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[461, "neural_compressor.ux.components.optimization.optimization.Optimization.workdir"]], "neural_compressor.ux.components.optimization.pruning": [[462, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[463, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "optimize_model() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[463, "neural_compressor.ux.components.optimization.pruning.optimize_model.optimize_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[463, "neural_compressor.ux.components.optimization.pruning.optimize_model.parse_args"]], "pruning (class in neural_compressor.ux.components.optimization.pruning.pruning)": [[464, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning"]], "configuration_data (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[464, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.pruning.pruning.pruning method)": [[464, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.pruning.pruning.pruning method)": [[464, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.generate_config"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[464, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "optimization_script (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[464, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[464, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.parameters"]], "neural_compressor.ux.components.optimization.tune": [[465, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[466, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[466, "neural_compressor.ux.components.optimization.tune.tune_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[466, "neural_compressor.ux.components.optimization.tune.tune_model.set_eager_execution"]], "tune_model() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[466, "neural_compressor.ux.components.optimization.tune.tune_model.tune_model"]], "accuracycriterion (class in neural_compressor.ux.components.optimization.tune.tuning)": [[467, "neural_compressor.ux.components.optimization.tune.tuning.AccuracyCriterion"]], "tuning (class in neural_compressor.ux.components.optimization.tune.tuning)": [[467, "neural_compressor.ux.components.optimization.tune.tuning.Tuning"]], "tuningdetails (class in neural_compressor.ux.components.optimization.tune.tuning)": [[467, "neural_compressor.ux.components.optimization.tune.tuning.TuningDetails"]], "configuration_data (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[467, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[467, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[467, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.generate_config"]], "neural_compressor.ux.components.optimization.tune.tuning": [[467, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "optimization_script (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[467, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[467, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.parameters"]], "tuninghistory (class in neural_compressor.ux.components.optimization.tuning_history)": [[468, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory"]], "watcher (class in neural_compressor.ux.components.optimization.tuning_history)": [[468, "neural_compressor.ux.components.optimization.tuning_history.Watcher"]], "history_file_modification_time() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[468, "neural_compressor.ux.components.optimization.tuning_history.Watcher.history_file_modification_time"]], "neural_compressor.ux.components.optimization.tuning_history": [[468, "module-neural_compressor.ux.components.optimization.tuning_history"]], "send_history_snapshot() (neural_compressor.ux.components.optimization.tuning_history.tuninghistory static method)": [[468, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory.send_history_snapshot"]], "stop() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[468, "neural_compressor.ux.components.optimization.tuning_history.Watcher.stop"]], "tuning_history() (in module neural_compressor.ux.components.optimization.tuning_history)": [[468, "neural_compressor.ux.components.optimization.tuning_history.tuning_history"]], "tuning_history_path() (in module neural_compressor.ux.components.optimization.tuning_history)": [[468, "neural_compressor.ux.components.optimization.tuning_history.tuning_history_path"]], "was_history_file_changed() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[468, "neural_compressor.ux.components.optimization.tuning_history.Watcher.was_history_file_changed"]], "execute_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[469, "neural_compressor.ux.components.profiling.execute_profiling.execute_profiling"]], "execute_real_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[469, "neural_compressor.ux.components.profiling.execute_profiling.execute_real_profiling"]], "neural_compressor.ux.components.profiling.execute_profiling": [[469, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.factory)": [[470, "neural_compressor.ux.components.profiling.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.factory.profilerfactory static method)": [[470, "neural_compressor.ux.components.profiling.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.factory": [[470, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[471, "module-neural_compressor.ux.components.profiling"]], "load_profiling_details() (in module neural_compressor.ux.components.profiling.profile_model)": [[472, "neural_compressor.ux.components.profiling.profile_model.load_profiling_details"]], "neural_compressor.ux.components.profiling.profile_model": [[472, "module-neural_compressor.ux.components.profiling.profile_model"]], "parse_args() (in module neural_compressor.ux.components.profiling.profile_model)": [[472, "neural_compressor.ux.components.profiling.profile_model.parse_args"]], "profiler (class in neural_compressor.ux.components.profiling.profiler)": [[473, "neural_compressor.ux.components.profiling.profiler.Profiler"]], "neural_compressor.ux.components.profiling.profiler": [[473, "module-neural_compressor.ux.components.profiling.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.profiler.profiler method)": [[473, "neural_compressor.ux.components.profiling.profiler.Profiler.profile_model"]], "dataloaderinterface (class in neural_compressor.ux.components.profiling.profiling)": [[474, "neural_compressor.ux.components.profiling.profiling.DataloaderInterface"]], "profiling (class in neural_compressor.ux.components.profiling.profiling)": [[474, "neural_compressor.ux.components.profiling.profiling.Profiling"]], "config_filename (neural_compressor.ux.components.profiling.profiling.profiling property)": [[474, "neural_compressor.ux.components.profiling.profiling.Profiling.config_filename"]], "config_path (neural_compressor.ux.components.profiling.profiling.profiling property)": [[474, "neural_compressor.ux.components.profiling.profiling.Profiling.config_path"]], "execute() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[474, "neural_compressor.ux.components.profiling.profiling.Profiling.execute"]], "generate_config() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[474, "neural_compressor.ux.components.profiling.profiling.Profiling.generate_config"]], "neural_compressor.ux.components.profiling.profiling": [[474, "module-neural_compressor.ux.components.profiling.profiling"]], "profiling_data (neural_compressor.ux.components.profiling.profiling.profiling property)": [[474, "neural_compressor.ux.components.profiling.profiling.Profiling.profiling_data"]], "workdir (neural_compressor.ux.components.profiling.profiling.profiling property)": [[474, "neural_compressor.ux.components.profiling.profiling.Profiling.workdir"]], "profilerfactory (class in neural_compressor.ux.components.profiling.tensorflow_profiler.factory)": [[475, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.tensorflow_profiler.factory.profilerfactory static method)": [[475, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[475, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[476, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "profiler (class in neural_compressor.ux.components.profiling.tensorflow_profiler.profiler)": [[477, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler"]], "build_dataloader() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[477, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.build_dataloader"]], "convert_nodes_to_list() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[477, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.convert_nodes_to_list"]], "create_tf_config() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[477, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.create_tf_config"]], "get_node_by_name() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[477, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.get_node_by_name"]], "initialize_graph() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[477, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.initialize_graph"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[477, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[477, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.profile_model"]], "delete_assign() (in module neural_compressor.ux.components.profiling.tensorflow_profiler.utils)": [[478, "neural_compressor.ux.components.profiling.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[478, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "main() (in module neural_compressor.ux.inc_bench)": [[479, "neural_compressor.ux.inc_bench.main"]], "neural_compressor.ux.inc_bench": [[479, "module-neural_compressor.ux.inc_bench"]], "prepare_environment() (in module neural_compressor.ux.inc_bench)": [[479, "neural_compressor.ux.inc_bench.prepare_environment"]], "neural_compressor.ux": [[480, "module-neural_compressor.ux"]], "domainflavours (class in neural_compressor.ux.utils.consts)": [[481, "neural_compressor.ux.utils.consts.DomainFlavours"]], "domains (class in neural_compressor.ux.utils.consts)": [[481, "neural_compressor.ux.utils.consts.Domains"]], "executionstatus (class in neural_compressor.ux.utils.consts)": [[481, "neural_compressor.ux.utils.consts.ExecutionStatus"]], "frameworks (class in neural_compressor.ux.utils.consts)": [[481, "neural_compressor.ux.utils.consts.Frameworks"]], "optimizationtypes (class in neural_compressor.ux.utils.consts)": [[481, "neural_compressor.ux.utils.consts.OptimizationTypes"]], "precisions (class in neural_compressor.ux.utils.consts)": [[481, "neural_compressor.ux.utils.consts.Precisions"]], "strategies (class in neural_compressor.ux.utils.consts)": [[481, "neural_compressor.ux.utils.consts.Strategies"]], "neural_compressor.ux.utils.consts": [[481, "module-neural_compressor.ux.utils.consts"]], "environment (class in neural_compressor.ux.utils.environment)": [[482, "neural_compressor.ux.utils.environment.Environment"]], "clean_workloads_wip_status() (neural_compressor.ux.utils.environment.environment static method)": [[482, "neural_compressor.ux.utils.environment.Environment.clean_workloads_wip_status"]], "ensure_workdir_exists_and_writeable() (neural_compressor.ux.utils.environment.environment static method)": [[482, "neural_compressor.ux.utils.environment.Environment.ensure_workdir_exists_and_writeable"]], "migrate_database() (neural_compressor.ux.utils.environment.environment static method)": [[482, "neural_compressor.ux.utils.environment.Environment.migrate_database"]], "neural_compressor.ux.utils.environment": [[482, "module-neural_compressor.ux.utils.environment"]], "accessdeniedexception": [[483, "neural_compressor.ux.utils.exceptions.AccessDeniedException"]], "clienterrorexception": [[483, "neural_compressor.ux.utils.exceptions.ClientErrorException"]], "internalexception": [[483, "neural_compressor.ux.utils.exceptions.InternalException"]], "notfoundexception": [[483, "neural_compressor.ux.utils.exceptions.NotFoundException"]], "neural_compressor.ux.utils.exceptions": [[483, "module-neural_compressor.ux.utils.exceptions"]], "executor (class in neural_compressor.ux.utils.executor)": [[484, "neural_compressor.ux.utils.executor.Executor"]], "additional_log_names (neural_compressor.ux.utils.executor.executor property)": [[484, "neural_compressor.ux.utils.executor.Executor.additional_log_names"]], "call() (neural_compressor.ux.utils.executor.executor method)": [[484, "neural_compressor.ux.utils.executor.Executor.call"]], "call_one() (neural_compressor.ux.utils.executor.executor method)": [[484, "neural_compressor.ux.utils.executor.Executor.call_one"]], "is_multi_commands() (neural_compressor.ux.utils.executor.executor static method)": [[484, "neural_compressor.ux.utils.executor.Executor.is_multi_commands"]], "log_name (neural_compressor.ux.utils.executor.executor property)": [[484, "neural_compressor.ux.utils.executor.Executor.log_name"]], "neural_compressor.ux.utils.executor": [[484, "module-neural_compressor.ux.utils.executor"]], "process_duration (neural_compressor.ux.utils.executor.executor property)": [[484, "neural_compressor.ux.utils.executor.Executor.process_duration"]], "refresh_workdir() (neural_compressor.ux.utils.executor.executor method)": [[484, "neural_compressor.ux.utils.executor.Executor.refresh_workdir"]], "request_id (neural_compressor.ux.utils.executor.executor property)": [[484, "neural_compressor.ux.utils.executor.Executor.request_id"]], "workdir (neural_compressor.ux.utils.executor.executor property)": [[484, "neural_compressor.ux.utils.executor.Executor.workdir"]], "expiringdict (class in neural_compressor.ux.utils.expiring_dict)": [[485, "neural_compressor.ux.utils.expiring_dict.ExpiringDict"]], "expiringdictitem (class in neural_compressor.ux.utils.expiring_dict)": [[485, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem"]], "is_expired() (neural_compressor.ux.utils.expiring_dict.expiringdictitem method)": [[485, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem.is_expired"]], "neural_compressor.ux.utils.expiring_dict": [[485, "module-neural_compressor.ux.utils.expiring_dict"]], "githubinfo (class in neural_compressor.ux.utils.github_info)": [[486, "neural_compressor.ux.utils.github_info.GithubInfo"]], "neural_compressor.ux.utils.github_info": [[486, "module-neural_compressor.ux.utils.github_info"]], "tag() (neural_compressor.ux.utils.github_info.githubinfo class method)": [[486, "neural_compressor.ux.utils.github_info.GithubInfo.tag"]], "hwinfo (class in neural_compressor.ux.utils.hw_info)": [[487, "neural_compressor.ux.utils.hw_info.HWInfo"]], "get_bios_version() (in module neural_compressor.ux.utils.hw_info)": [[487, "neural_compressor.ux.utils.hw_info.get_bios_version"]], "get_distribution() (in module neural_compressor.ux.utils.hw_info)": [[487, "neural_compressor.ux.utils.hw_info.get_distribution"]], "get_framework_dependency_info() (in module neural_compressor.ux.utils.hw_info)": [[487, "neural_compressor.ux.utils.hw_info.get_framework_dependency_info"]], "get_framework_info() (in module neural_compressor.ux.utils.hw_info)": [[487, "neural_compressor.ux.utils.hw_info.get_framework_info"]], "get_kernel_version() (in module neural_compressor.ux.utils.hw_info)": [[487, "neural_compressor.ux.utils.hw_info.get_kernel_version"]], "get_number_of_sockets() (in module neural_compressor.ux.utils.hw_info)": [[487, "neural_compressor.ux.utils.hw_info.get_number_of_sockets"]], "initialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[487, "neural_compressor.ux.utils.hw_info.HWInfo.initialize"]], "is_turbo_boost_enabled() (in module neural_compressor.ux.utils.hw_info)": [[487, "neural_compressor.ux.utils.hw_info.is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info": [[487, "module-neural_compressor.ux.utils.hw_info"]], "serialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[487, "neural_compressor.ux.utils.hw_info.HWInfo.serialize"]], "neural_compressor.ux.utils": [[488, "module-neural_compressor.ux.utils"]], "jsonserializer (class in neural_compressor.ux.utils.json_serializer)": [[489, "neural_compressor.ux.utils.json_serializer.JsonSerializer"]], "neural_compressor.ux.utils.json_serializer": [[489, "module-neural_compressor.ux.utils.json_serializer"]], "serialize() (neural_compressor.ux.utils.json_serializer.jsonserializer method)": [[489, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize"]], "serialize_item() (neural_compressor.ux.utils.json_serializer.jsonserializer static method)": [[489, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize_item"]], "change_log_level() (in module neural_compressor.ux.utils.logger)": [[490, "neural_compressor.ux.utils.logger.change_log_level"]], "neural_compressor.ux.utils.logger": [[490, "module-neural_compressor.ux.utils.logger"]], "accuracyparser (class in neural_compressor.ux.utils.parser)": [[491, "neural_compressor.ux.utils.parser.AccuracyParser"]], "benchmarkparserfactory (class in neural_compressor.ux.utils.parser)": [[491, "neural_compressor.ux.utils.parser.BenchmarkParserFactory"]], "optimizationparser (class in neural_compressor.ux.utils.parser)": [[491, "neural_compressor.ux.utils.parser.OptimizationParser"]], "parser (class in neural_compressor.ux.utils.parser)": [[491, "neural_compressor.ux.utils.parser.Parser"]], "performanceparser (class in neural_compressor.ux.utils.parser)": [[491, "neural_compressor.ux.utils.parser.PerformanceParser"]], "profilingparser (class in neural_compressor.ux.utils.parser)": [[491, "neural_compressor.ux.utils.parser.ProfilingParser"]], "get_parser() (neural_compressor.ux.utils.parser.benchmarkparserfactory static method)": [[491, "neural_compressor.ux.utils.parser.BenchmarkParserFactory.get_parser"]], "neural_compressor.ux.utils.parser": [[491, "module-neural_compressor.ux.utils.parser"]], "patterns (neural_compressor.ux.utils.parser.accuracyparser property)": [[491, "neural_compressor.ux.utils.parser.AccuracyParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.optimizationparser property)": [[491, "neural_compressor.ux.utils.parser.OptimizationParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.parser property)": [[491, "neural_compressor.ux.utils.parser.Parser.patterns"]], "patterns (neural_compressor.ux.utils.parser.performanceparser property)": [[491, "neural_compressor.ux.utils.parser.PerformanceParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.profilingparser property)": [[491, "neural_compressor.ux.utils.parser.ProfilingParser.patterns"]], "process() (neural_compressor.ux.utils.parser.accuracyparser method)": [[491, "neural_compressor.ux.utils.parser.AccuracyParser.process"]], "process() (neural_compressor.ux.utils.parser.optimizationparser method)": [[491, "neural_compressor.ux.utils.parser.OptimizationParser.process"]], "process() (neural_compressor.ux.utils.parser.parser method)": [[491, "neural_compressor.ux.utils.parser.Parser.process"]], "process() (neural_compressor.ux.utils.parser.performanceparser method)": [[491, "neural_compressor.ux.utils.parser.PerformanceParser.process"]], "process() (neural_compressor.ux.utils.parser.profilingparser method)": [[491, "neural_compressor.ux.utils.parser.ProfilingParser.process"]], "summarize_partial() (neural_compressor.ux.utils.parser.performanceparser method)": [[491, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_partial"]], "summarize_value() (neural_compressor.ux.utils.parser.performanceparser static method)": [[491, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_value"]], "unify_time() (neural_compressor.ux.utils.parser.profilingparser static method)": [[491, "neural_compressor.ux.utils.parser.ProfilingParser.unify_time"]], "update_partial() (neural_compressor.ux.utils.parser.performanceparser static method)": [[491, "neural_compressor.ux.utils.parser.PerformanceParser.update_partial"]], "proc (class in neural_compressor.ux.utils.proc)": [[492, "neural_compressor.ux.utils.proc.Proc"]], "info (neural_compressor.ux.utils.proc.proc property)": [[492, "neural_compressor.ux.utils.proc.Proc.info"]], "info_path (neural_compressor.ux.utils.proc.proc property)": [[492, "neural_compressor.ux.utils.proc.Proc.info_path"]], "is_ok (neural_compressor.ux.utils.proc.proc property)": [[492, "neural_compressor.ux.utils.proc.Proc.is_ok"]], "neural_compressor.ux.utils.proc": [[492, "module-neural_compressor.ux.utils.proc"]], "output (neural_compressor.ux.utils.proc.proc property)": [[492, "neural_compressor.ux.utils.proc.Proc.output"]], "output_path (neural_compressor.ux.utils.proc.proc property)": [[492, "neural_compressor.ux.utils.proc.Proc.output_path"]], "remove_logs() (neural_compressor.ux.utils.proc.proc method)": [[492, "neural_compressor.ux.utils.proc.Proc.remove_logs"]], "run() (neural_compressor.ux.utils.proc.proc method)": [[492, "neural_compressor.ux.utils.proc.Proc.run"]], "tail (neural_compressor.ux.utils.proc.proc property)": [[492, "neural_compressor.ux.utils.proc.Proc.tail"]], "ncprocesses (class in neural_compressor.ux.utils.processes)": [[493, "neural_compressor.ux.utils.processes.NCProcesses"]], "is_ok (neural_compressor.ux.utils.processes.ncprocesses property)": [[493, "neural_compressor.ux.utils.processes.NCProcesses.is_ok"]], "neural_compressor.ux.utils.processes": [[493, "module-neural_compressor.ux.utils.processes"]], "remove_successful_logs() (neural_compressor.ux.utils.processes.ncprocesses method)": [[493, "neural_compressor.ux.utils.processes.NCProcesses.remove_successful_logs"]], "return_code_all() (neural_compressor.ux.utils.processes.ncprocesses method)": [[493, "neural_compressor.ux.utils.processes.NCProcesses.return_code_all"]], "singleton (class in neural_compressor.ux.utils.singleton)": [[494, "neural_compressor.ux.utils.singleton.Singleton"]], "neural_compressor.ux.utils.singleton": [[494, "module-neural_compressor.ux.utils.singleton"]], "get_status_update_function() (in module neural_compressor.ux.utils.status_updates)": [[495, "neural_compressor.ux.utils.status_updates.get_status_update_function"]], "neural_compressor.ux.utils.status_updates": [[495, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[496, "module-neural_compressor.ux.utils.templates"]], "metric (class in neural_compressor.ux.utils.templates.metric)": [[497, "neural_compressor.ux.utils.templates.metric.Metric"]], "acc_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[497, "neural_compressor.ux.utils.templates.metric.Metric.acc_input_model"]], "acc_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[497, "neural_compressor.ux.utils.templates.metric.Metric.acc_optimized_model"]], "accuracy (neural_compressor.ux.utils.templates.metric.metric property)": [[497, "neural_compressor.ux.utils.templates.metric.Metric.accuracy"]], "calculate_throughput() (neural_compressor.ux.utils.templates.metric.metric static method)": [[497, "neural_compressor.ux.utils.templates.metric.Metric.calculate_throughput"]], "insert_data() (neural_compressor.ux.utils.templates.metric.metric method)": [[497, "neural_compressor.ux.utils.templates.metric.Metric.insert_data"]], "latency (neural_compressor.ux.utils.templates.metric.metric property)": [[497, "neural_compressor.ux.utils.templates.metric.Metric.latency"]], "neural_compressor.ux.utils.templates.metric": [[497, "module-neural_compressor.ux.utils.templates.metric"]], "optimization_time (neural_compressor.ux.utils.templates.metric.metric property)": [[497, "neural_compressor.ux.utils.templates.metric.Metric.optimization_time"]], "path_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[497, "neural_compressor.ux.utils.templates.metric.Metric.path_optimized_model"]], "profiling_data (neural_compressor.ux.utils.templates.metric.metric property)": [[497, "neural_compressor.ux.utils.templates.metric.Metric.profiling_data"]], "size_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[497, "neural_compressor.ux.utils.templates.metric.Metric.size_input_model"]], "size_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[497, "neural_compressor.ux.utils.templates.metric.Metric.size_optimized_model"]], "throughput (neural_compressor.ux.utils.templates.metric.metric property)": [[497, "neural_compressor.ux.utils.templates.metric.Metric.throughput"]], "workdir (class in neural_compressor.ux.utils.templates.workdir)": [[498, "neural_compressor.ux.utils.templates.workdir.Workdir"]], "clean_logs() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[498, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_logs"]], "clean_status() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[498, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_status"]], "ensure_working_path_exists() (neural_compressor.ux.utils.templates.workdir.workdir method)": [[498, "neural_compressor.ux.utils.templates.workdir.Workdir.ensure_working_path_exists"]], "neural_compressor.ux.utils.templates.workdir": [[498, "module-neural_compressor.ux.utils.templates.workdir"]], "check_module() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.check_module"]], "deprecated() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.deprecated"]], "determine_ip() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.determine_ip"]], "export_to_csv() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.export_to_csv"]], "filter_transforms() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.filter_transforms"]], "get_dataset_path() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.get_dataset_path"]], "get_default_pruning_config_path() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.get_default_pruning_config_path"]], "get_file_extension() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.get_file_extension"]], "get_framework_from_path() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.get_framework_from_path"]], "get_height_width_from_size() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.get_height_width_from_size"]], "get_metrics_dict() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.get_metrics_dict"]], "get_model_zoo_config_path() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.get_model_zoo_config_path"]], "get_model_zoo_model_path() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.get_model_zoo_model_path"]], "get_module_version() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.get_module_version"]], "get_predefined_config_path() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.get_predefined_config_path"]], "get_shape_from_transforms() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.get_shape_from_transforms"]], "get_size() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.get_size"]], "is_dataset_file() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.is_dataset_file"]], "is_development_env() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.is_development_env"]], "is_hidden() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.is_hidden"]], "load_dataloader_config() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.load_dataloader_config"]], "load_help_nc_params() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.load_help_nc_params"]], "load_metrics_config() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.load_metrics_config"]], "load_model_config() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.load_model_config"]], "load_model_wise_params() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.load_model_wise_params"]], "load_precisions_config() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.load_precisions_config"]], "load_pruning_details_config() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.load_pruning_details_config"]], "load_transforms_config() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.load_transforms_config"]], "load_transforms_filter_config() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.load_transforms_filter_config"]], "neural_compressor.ux.utils.utils": [[499, "module-neural_compressor.ux.utils.utils"]], "normalize_domain() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.normalize_domain"]], "normalize_framework() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.normalize_framework"]], "normalize_string() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.normalize_string"]], "parse_bool_value() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.parse_bool_value"]], "parse_to_float_list() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.parse_to_float_list"]], "parse_to_string_list() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.parse_to_string_list"]], "parse_version() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.parse_version"]], "release_tag() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.release_tag"]], "replace_with_values() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.replace_with_values"]], "verify_file_path() (in module neural_compressor.ux.utils.utils)": [[499, "neural_compressor.ux.utils.utils.verify_file_path"]], "config (class in neural_compressor.ux.utils.workload.config)": [[500, "neural_compressor.ux.utils.workload.config.Config"]], "dump() (neural_compressor.ux.utils.workload.config.config method)": [[500, "neural_compressor.ux.utils.workload.config.Config.dump"]], "get_performance_configs() (neural_compressor.ux.utils.workload.config.config method)": [[500, "neural_compressor.ux.utils.workload.config.Config.get_performance_configs"]], "get_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[500, "neural_compressor.ux.utils.workload.config.Config.get_performance_cores_per_instance"]], "get_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[500, "neural_compressor.ux.utils.workload.config.Config.get_performance_num_of_instance"]], "initialize() (neural_compressor.ux.utils.workload.config.config method)": [[500, "neural_compressor.ux.utils.workload.config.Config.initialize"]], "load() (neural_compressor.ux.utils.workload.config.config method)": [[500, "neural_compressor.ux.utils.workload.config.Config.load"]], "neural_compressor.ux.utils.workload.config": [[500, "module-neural_compressor.ux.utils.workload.config"]], "process_transform() (neural_compressor.ux.utils.workload.config.config static method)": [[500, "neural_compressor.ux.utils.workload.config.Config.process_transform"]], "remove_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[500, "neural_compressor.ux.utils.workload.config.Config.remove_accuracy_metric"]], "remove_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[500, "neural_compressor.ux.utils.workload.config.Config.remove_dataloader"]], "set_accuracy_and_performance_batch_sizes() (neural_compressor.ux.utils.workload.config.config method)": [[500, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_and_performance_batch_sizes"]], "set_accuracy_goal() (neural_compressor.ux.utils.workload.config.config method)": [[500, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_goal"]], "set_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[500, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_metric"]], "set_evaluation_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[500, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataloader"]], "set_evaluation_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[500, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataset_path"]], "set_inputs() (neural_compressor.ux.utils.workload.config.config method)": [[500, "neural_compressor.ux.utils.workload.config.Config.set_inputs"]], "set_optimization_precision() (neural_compressor.ux.utils.workload.config.config method)": [[500, "neural_compressor.ux.utils.workload.config.Config.set_optimization_precision"]], "set_outputs() (neural_compressor.ux.utils.workload.config.config method)": [[500, "neural_compressor.ux.utils.workload.config.Config.set_outputs"]], "set_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[500, "neural_compressor.ux.utils.workload.config.Config.set_performance_cores_per_instance"]], "set_performance_iterations() (neural_compressor.ux.utils.workload.config.config method)": [[500, "neural_compressor.ux.utils.workload.config.Config.set_performance_iterations"]], "set_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[500, "neural_compressor.ux.utils.workload.config.Config.set_performance_num_of_instance"]], "set_performance_warmup() (neural_compressor.ux.utils.workload.config.config method)": [[500, "neural_compressor.ux.utils.workload.config.Config.set_performance_warmup"]], "set_quantization_approach() (neural_compressor.ux.utils.workload.config.config method)": [[500, "neural_compressor.ux.utils.workload.config.Config.set_quantization_approach"]], "set_quantization_batch_size() (neural_compressor.ux.utils.workload.config.config method)": [[500, "neural_compressor.ux.utils.workload.config.Config.set_quantization_batch_size"]], "set_quantization_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[500, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataloader"]], "set_quantization_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[500, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataset_path"]], "set_quantization_sampling_size() (neural_compressor.ux.utils.workload.config.config method)": [[500, "neural_compressor.ux.utils.workload.config.Config.set_quantization_sampling_size"]], "set_transform() (neural_compressor.ux.utils.workload.config.config method)": [[500, "neural_compressor.ux.utils.workload.config.Config.set_transform"]], "set_workspace() (neural_compressor.ux.utils.workload.config.config method)": [[500, "neural_compressor.ux.utils.workload.config.Config.set_workspace"]], "dataloader (class in neural_compressor.ux.utils.workload.dataloader)": [[501, "neural_compressor.ux.utils.workload.dataloader.Dataloader"]], "dataset (class in neural_compressor.ux.utils.workload.dataloader)": [[501, "neural_compressor.ux.utils.workload.dataloader.Dataset"]], "filter (class in neural_compressor.ux.utils.workload.dataloader)": [[501, "neural_compressor.ux.utils.workload.dataloader.Filter"]], "labelbalance (class in neural_compressor.ux.utils.workload.dataloader)": [[501, "neural_compressor.ux.utils.workload.dataloader.LabelBalance"]], "transform (class in neural_compressor.ux.utils.workload.dataloader)": [[501, "neural_compressor.ux.utils.workload.dataloader.Transform"]], "is_dummy() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[501, "neural_compressor.ux.utils.workload.dataloader.Dataset.is_dummy"]], "neural_compressor.ux.utils.workload.dataloader": [[501, "module-neural_compressor.ux.utils.workload.dataloader"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[501, "neural_compressor.ux.utils.workload.dataloader.Dataloader.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[501, "neural_compressor.ux.utils.workload.dataloader.Dataset.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.transform method)": [[501, "neural_compressor.ux.utils.workload.dataloader.Transform.serialize"]], "set_dataset() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[501, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_dataset"]], "set_transforms_from_list() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[501, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_transforms_from_list"]], "accuracy (class in neural_compressor.ux.utils.workload.evaluation)": [[502, "neural_compressor.ux.utils.workload.evaluation.Accuracy"]], "configs (class in neural_compressor.ux.utils.workload.evaluation)": [[502, "neural_compressor.ux.utils.workload.evaluation.Configs"]], "evaluation (class in neural_compressor.ux.utils.workload.evaluation)": [[502, "neural_compressor.ux.utils.workload.evaluation.Evaluation"]], "metric (class in neural_compressor.ux.utils.workload.evaluation)": [[502, "neural_compressor.ux.utils.workload.evaluation.Metric"]], "performance (class in neural_compressor.ux.utils.workload.evaluation)": [[502, "neural_compressor.ux.utils.workload.evaluation.Performance"]], "postprocess (class in neural_compressor.ux.utils.workload.evaluation)": [[502, "neural_compressor.ux.utils.workload.evaluation.Postprocess"]], "postprocessschema (class in neural_compressor.ux.utils.workload.evaluation)": [[502, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema"]], "get_label_shift_value() (neural_compressor.ux.utils.workload.evaluation.postprocessschema static method)": [[502, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema.get_label_shift_value"]], "name (neural_compressor.ux.utils.workload.evaluation.metric property)": [[502, "neural_compressor.ux.utils.workload.evaluation.Metric.name"]], "neural_compressor.ux.utils.workload.evaluation": [[502, "module-neural_compressor.ux.utils.workload.evaluation"]], "param (neural_compressor.ux.utils.workload.evaluation.metric property)": [[502, "neural_compressor.ux.utils.workload.evaluation.Metric.param"]], "serialize() (neural_compressor.ux.utils.workload.evaluation.metric method)": [[502, "neural_compressor.ux.utils.workload.evaluation.Metric.serialize"]], "set_accuracy_postprocess_transforms() (neural_compressor.ux.utils.workload.evaluation.evaluation method)": [[502, "neural_compressor.ux.utils.workload.evaluation.Evaluation.set_accuracy_postprocess_transforms"]], "graphoptimization (class in neural_compressor.ux.utils.workload.graph_optimization)": [[503, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization": [[503, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "set_precisions() (neural_compressor.ux.utils.workload.graph_optimization.graphoptimization method)": [[503, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization.set_precisions"]], "neural_compressor.ux.utils.workload": [[504, "module-neural_compressor.ux.utils.workload"]], "mixedprecision (class in neural_compressor.ux.utils.workload.mixed_precision)": [[505, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision": [[505, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "set_precisions() (neural_compressor.ux.utils.workload.mixed_precision.mixedprecision method)": [[505, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision.set_precisions"]], "model (class in neural_compressor.ux.utils.workload.model)": [[506, "neural_compressor.ux.utils.workload.model.Model"]], "inputs (neural_compressor.ux.utils.workload.model.model property)": [[506, "neural_compressor.ux.utils.workload.model.Model.inputs"]], "neural_compressor.ux.utils.workload.model": [[506, "module-neural_compressor.ux.utils.workload.model"]], "outputs (neural_compressor.ux.utils.workload.model.model property)": [[506, "neural_compressor.ux.utils.workload.model.Model.outputs"]], "serialize() (neural_compressor.ux.utils.workload.model.model method)": [[506, "neural_compressor.ux.utils.workload.model.Model.serialize"]], "adamoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.AdamOptimizer"]], "adamwoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.AdamWOptimizer"]], "approach (class in neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.Approach"]], "criterion (class in neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.Criterion"]], "crossentropylosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.CrossEntropyLossCriterion"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationlosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.KnowledgeDistillationLossCriterion"]], "optimizer (class in neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.Optimizer"]], "pruning (class in neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.Pruning"]], "sgdoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.SGDOptimizer"]], "selfknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.SelfKnowledgeDistillationLoss"]], "sparsecategoricalcrossentropycriterion (class in neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.SparseCategoricalCrossentropyCriterion"]], "train (class in neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.Train"]], "weightcompressionapproach (class in neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach"]], "initialize_pruners() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach static method)": [[507, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.initialize_pruners"]], "neural_compressor.ux.utils.workload.pruning": [[507, "module-neural_compressor.ux.utils.workload.pruning"]], "parse_dict_value_to_float() (in module neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_float"]], "parse_dict_value_to_int() (in module neural_compressor.ux.utils.workload.pruning)": [[507, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_int"]], "serialize() (neural_compressor.ux.utils.workload.pruning.train method)": [[507, "neural_compressor.ux.utils.workload.pruning.Train.serialize"]], "serialize() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach method)": [[507, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.serialize"]], "serialize_pruner() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach static method)": [[507, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.serialize_pruner"]], "set_postprocess_transforms() (neural_compressor.ux.utils.workload.pruning.train method)": [[507, "neural_compressor.ux.utils.workload.pruning.Train.set_postprocess_transforms"]], "advance (class in neural_compressor.ux.utils.workload.quantization)": [[508, "neural_compressor.ux.utils.workload.quantization.Advance"]], "calibration (class in neural_compressor.ux.utils.workload.quantization)": [[508, "neural_compressor.ux.utils.workload.quantization.Calibration"]], "quantization (class in neural_compressor.ux.utils.workload.quantization)": [[508, "neural_compressor.ux.utils.workload.quantization.Quantization"]], "wiseconfig (class in neural_compressor.ux.utils.workload.quantization)": [[508, "neural_compressor.ux.utils.workload.quantization.WiseConfig"]], "wiseconfigdetails (class in neural_compressor.ux.utils.workload.quantization)": [[508, "neural_compressor.ux.utils.workload.quantization.WiseConfigDetails"]], "neural_compressor.ux.utils.workload.quantization": [[508, "module-neural_compressor.ux.utils.workload.quantization"]], "acccriterion (class in neural_compressor.ux.utils.workload.tuning)": [[509, "neural_compressor.ux.utils.workload.tuning.AccCriterion"]], "diagnosis (class in neural_compressor.ux.utils.workload.tuning)": [[509, "neural_compressor.ux.utils.workload.tuning.Diagnosis"]], "exitpolicy (class in neural_compressor.ux.utils.workload.tuning)": [[509, "neural_compressor.ux.utils.workload.tuning.ExitPolicy"]], "multiobjectives (class in neural_compressor.ux.utils.workload.tuning)": [[509, "neural_compressor.ux.utils.workload.tuning.MultiObjectives"]], "strategy (class in neural_compressor.ux.utils.workload.tuning)": [[509, "neural_compressor.ux.utils.workload.tuning.Strategy"]], "tuning (class in neural_compressor.ux.utils.workload.tuning)": [[509, "neural_compressor.ux.utils.workload.tuning.Tuning"]], "workspace (class in neural_compressor.ux.utils.workload.tuning)": [[509, "neural_compressor.ux.utils.workload.tuning.Workspace"]], "neural_compressor.ux.utils.workload.tuning": [[509, "module-neural_compressor.ux.utils.workload.tuning"]], "objective (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[509, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.objective"]], "set_max_trials() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[509, "neural_compressor.ux.utils.workload.tuning.Tuning.set_max_trials"]], "set_performance_only() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[509, "neural_compressor.ux.utils.workload.tuning.Tuning.set_performance_only"]], "set_random_seed() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[509, "neural_compressor.ux.utils.workload.tuning.Tuning.set_random_seed"]], "set_timeout() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[509, "neural_compressor.ux.utils.workload.tuning.Tuning.set_timeout"]], "set_workspace() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[509, "neural_compressor.ux.utils.workload.tuning.Tuning.set_workspace"]], "weight (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[509, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.weight"]], "float_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[510, "neural_compressor.ux.utils.yaml_utils.float_representer"]], "neural_compressor.ux.utils.yaml_utils": [[510, "module-neural_compressor.ux.utils.yaml_utils"]], "pruner_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[510, "neural_compressor.ux.utils.yaml_utils.pruner_representer"]], "message (class in neural_compressor.ux.web.communication)": [[511, "neural_compressor.ux.web.communication.Message"]], "messagequeue (class in neural_compressor.ux.web.communication)": [[511, "neural_compressor.ux.web.communication.MessageQueue"]], "request (class in neural_compressor.ux.web.communication)": [[511, "neural_compressor.ux.web.communication.Request"]], "response (class in neural_compressor.ux.web.communication)": [[511, "neural_compressor.ux.web.communication.Response"]], "create_simple_response() (in module neural_compressor.ux.web.communication)": [[511, "neural_compressor.ux.web.communication.create_simple_response"]], "data (neural_compressor.ux.web.communication.message property)": [[511, "neural_compressor.ux.web.communication.Message.data"]], "get() (neural_compressor.ux.web.communication.messagequeue method)": [[511, "neural_compressor.ux.web.communication.MessageQueue.get"]], "neural_compressor.ux.web.communication": [[511, "module-neural_compressor.ux.web.communication"]], "post_error() (neural_compressor.ux.web.communication.messagequeue method)": [[511, "neural_compressor.ux.web.communication.MessageQueue.post_error"]], "post_failure() (neural_compressor.ux.web.communication.messagequeue method)": [[511, "neural_compressor.ux.web.communication.MessageQueue.post_failure"]], "post_success() (neural_compressor.ux.web.communication.messagequeue method)": [[511, "neural_compressor.ux.web.communication.MessageQueue.post_success"]], "status (neural_compressor.ux.web.communication.message property)": [[511, "neural_compressor.ux.web.communication.Message.status"]], "subject (neural_compressor.ux.web.communication.message property)": [[511, "neural_compressor.ux.web.communication.Message.subject"]], "configuration (class in neural_compressor.ux.web.configuration)": [[512, "neural_compressor.ux.web.configuration.Configuration"]], "determine_gui_port() (neural_compressor.ux.web.configuration.configuration method)": [[512, "neural_compressor.ux.web.configuration.Configuration.determine_gui_port"]], "determine_log_level() (neural_compressor.ux.web.configuration.configuration method)": [[512, "neural_compressor.ux.web.configuration.Configuration.determine_log_level"]], "determine_server_port() (neural_compressor.ux.web.configuration.configuration method)": [[512, "neural_compressor.ux.web.configuration.Configuration.determine_server_port"]], "determine_url_prefix() (neural_compressor.ux.web.configuration.configuration static method)": [[512, "neural_compressor.ux.web.configuration.Configuration.determine_url_prefix"]], "determine_values_from_environment() (neural_compressor.ux.web.configuration.configuration method)": [[512, "neural_compressor.ux.web.configuration.Configuration.determine_values_from_environment"]], "dump_token_to_file() (neural_compressor.ux.web.configuration.configuration method)": [[512, "neural_compressor.ux.web.configuration.Configuration.dump_token_to_file"]], "get_command_line_args() (neural_compressor.ux.web.configuration.configuration method)": [[512, "neural_compressor.ux.web.configuration.Configuration.get_command_line_args"]], "get_url() (neural_compressor.ux.web.configuration.configuration method)": [[512, "neural_compressor.ux.web.configuration.Configuration.get_url"]], "global_config_directory (neural_compressor.ux.web.configuration.configuration property)": [[512, "neural_compressor.ux.web.configuration.Configuration.global_config_directory"]], "is_port_taken() (neural_compressor.ux.web.configuration.configuration method)": [[512, "neural_compressor.ux.web.configuration.Configuration.is_port_taken"]], "neural_compressor.ux.web.configuration": [[512, "module-neural_compressor.ux.web.configuration"]], "set_up() (neural_compressor.ux.web.configuration.configuration method)": [[512, "neural_compressor.ux.web.configuration.Configuration.set_up"]], "servicenotfoundexception (class in neural_compressor.ux.web.exceptions)": [[513, "neural_compressor.ux.web.exceptions.ServiceNotFoundException"]], "neural_compressor.ux.web.exceptions": [[513, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[514, "module-neural_compressor.ux.web"]], "deferredroutingdefinition (class in neural_compressor.ux.web.router)": [[515, "neural_compressor.ux.web.router.DeferredRoutingDefinition"]], "deferredsubprocessroutingdefinition (class in neural_compressor.ux.web.router)": [[515, "neural_compressor.ux.web.router.DeferredSubprocessRoutingDefinition"]], "realtimeroutingdefinition (class in neural_compressor.ux.web.router)": [[515, "neural_compressor.ux.web.router.RealtimeRoutingDefinition"]], "router (class in neural_compressor.ux.web.router)": [[515, "neural_compressor.ux.web.router.Router"]], "routingdefinition (class in neural_compressor.ux.web.router)": [[515, "neural_compressor.ux.web.router.RoutingDefinition"]], "find_pattern_in_graph() (in module neural_compressor.ux.web.router)": [[515, "neural_compressor.ux.web.router.find_pattern_in_graph"]], "get_model_graph() (in module neural_compressor.ux.web.router)": [[515, "neural_compressor.ux.web.router.get_model_graph"]], "get_system_info() (in module neural_compressor.ux.web.router)": [[515, "neural_compressor.ux.web.router.get_system_info"]], "handle() (neural_compressor.ux.web.router.router method)": [[515, "neural_compressor.ux.web.router.Router.handle"]], "neural_compressor.ux.web.router": [[515, "module-neural_compressor.ux.web.router"]], "allow_api_call() (in module neural_compressor.ux.web.server)": [[516, "neural_compressor.ux.web.server.allow_api_call"]], "block_iframe() (in module neural_compressor.ux.web.server)": [[516, "neural_compressor.ux.web.server.block_iframe"]], "block_sniffing() (in module neural_compressor.ux.web.server)": [[516, "neural_compressor.ux.web.server.block_sniffing"]], "build_parameters() (in module neural_compressor.ux.web.server)": [[516, "neural_compressor.ux.web.server.build_parameters"]], "disable_cache() (in module neural_compressor.ux.web.server)": [[516, "neural_compressor.ux.web.server.disable_cache"]], "get_tls_args() (in module neural_compressor.ux.web.server)": [[516, "neural_compressor.ux.web.server.get_tls_args"]], "handle_api_call() (in module neural_compressor.ux.web.server)": [[516, "neural_compressor.ux.web.server.handle_api_call"]], "neural_compressor.ux.web.server": [[516, "module-neural_compressor.ux.web.server"]], "page_not_found() (in module neural_compressor.ux.web.server)": [[516, "neural_compressor.ux.web.server.page_not_found"]], "require_api_token() (in module neural_compressor.ux.web.server)": [[516, "neural_compressor.ux.web.server.require_api_token"]], "root() (in module neural_compressor.ux.web.server)": [[516, "neural_compressor.ux.web.server.root"]], "run_server() (in module neural_compressor.ux.web.server)": [[516, "neural_compressor.ux.web.server.run_server"]], "web_socket_publisher() (in module neural_compressor.ux.web.server)": [[516, "neural_compressor.ux.web.server.web_socket_publisher"]], "benchmarkservice (class in neural_compressor.ux.web.service.benchmark)": [[517, "neural_compressor.ux.web.service.benchmark.BenchmarkService"]], "neural_compressor.ux.web.service.benchmark": [[517, "module-neural_compressor.ux.web.service.benchmark"]], "historysnapshotparser (class in neural_compressor.ux.web.service.history_snapshot_parser)": [[518, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser"]], "extract_accuracy() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[518, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_accuracy"]], "extract_performance() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[518, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_performance"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[518, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "parse_history_item() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[518, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_item"]], "parse_history_snapshot() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[518, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_snapshot"]], "neural_compressor.ux.web.service": [[519, "module-neural_compressor.ux.web.service"]], "modelservice (class in neural_compressor.ux.web.service.model)": [[520, "neural_compressor.ux.web.service.model.ModelService"]], "get_model() (neural_compressor.ux.web.service.model.modelservice class method)": [[520, "neural_compressor.ux.web.service.model.ModelService.get_model"]], "neural_compressor.ux.web.service.model": [[520, "module-neural_compressor.ux.web.service.model"]], "optimizationservice (class in neural_compressor.ux.web.service.optimization)": [[521, "neural_compressor.ux.web.service.optimization.OptimizationService"]], "neural_compressor.ux.web.service.optimization": [[521, "module-neural_compressor.ux.web.service.optimization"]], "profilingservice (class in neural_compressor.ux.web.service.profiling)": [[522, "neural_compressor.ux.web.service.profiling.ProfilingService"]], "generate_csv() (neural_compressor.ux.web.service.profiling.profilingservice class method)": [[522, "neural_compressor.ux.web.service.profiling.ProfilingService.generate_csv"]], "neural_compressor.ux.web.service.profiling": [[522, "module-neural_compressor.ux.web.service.profiling"]], "requestdataprocessor (class in neural_compressor.ux.web.service.request_data_processor)": [[523, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor"]], "get_string_value() (neural_compressor.ux.web.service.request_data_processor.requestdataprocessor static method)": [[523, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor.get_string_value"]], "neural_compressor.ux.web.service.request_data_processor": [[523, "module-neural_compressor.ux.web.service.request_data_processor"]], "responsegenerator (class in neural_compressor.ux.web.service.response_generator)": [[524, "neural_compressor.ux.web.service.response_generator.ResponseGenerator"]], "add_refresh() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[524, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.add_refresh"]], "from_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[524, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.from_exception"]], "get_status_code_for_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[524, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.get_status_code_for_exception"]], "neural_compressor.ux.web.service.response_generator": [[524, "module-neural_compressor.ux.web.service.response_generator"]], "serve_from_filesystem() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[524, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.serve_from_filesystem"]], "workloadservice (class in neural_compressor.ux.web.service.workload)": [[525, "neural_compressor.ux.web.service.workload.WorkloadService"]], "get_code_template() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[525, "neural_compressor.ux.web.service.workload.WorkloadService.get_code_template"]], "get_config() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[525, "neural_compressor.ux.web.service.workload.WorkloadService.get_config"]], "get_output() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[525, "neural_compressor.ux.web.service.workload.WorkloadService.get_output"]], "neural_compressor.ux.web.service.workload": [[525, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[526, "module-neural_compressor.version"]]}})