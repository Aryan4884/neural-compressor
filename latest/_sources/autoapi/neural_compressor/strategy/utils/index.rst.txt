:py:mod:`neural_compressor.strategy.utils`
==========================================

.. py:module:: neural_compressor.strategy.utils

.. autoapi-nested-parse::

   Intel Neural Compressor Strategy Utils.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   constant/index.rst
   tuning_sampler/index.rst
   tuning_space/index.rst
   tuning_structs/index.rst
   utility/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   neural_compressor.strategy.utils.TuningSampler
   neural_compressor.strategy.utils.OpWiseTuningSampler
   neural_compressor.strategy.utils.OpTypeWiseTuningSampler
   neural_compressor.strategy.utils.FallbackTuningSampler
   neural_compressor.strategy.utils.OpTuningConfig
   neural_compressor.strategy.utils.TuningItem
   neural_compressor.strategy.utils.TuningSpace




.. py:class:: TuningSampler(tuning_space: neural_compressor.strategy.utils.tuning_space.TuningSpace, tuning_order_lst: List[TuningOrder], initial_op_tuning_cfg: Dict, kwargs: Dict = {})

   Not displayed in API Docs.

   Basic class of tuning sampler.


.. py:class:: OpWiseTuningSampler(tuning_space: neural_compressor.strategy.utils.tuning_space.TuningSpace, tuning_items_priority: List[str], tuning_order_lst: List[TuningOrder], op_dtype_dict: Dict[tuple, str], initial_op_tuning_cfg: Dict)

   Bases: :py:obj:`TuningSampler`

   Not displayed in API Docs.

   .. py:method:: get_opwise_candidate()

      Collect all op-wise setting.

      :returns: all op-wise setting.
      :rtype: op_wise_configs



.. py:class:: OpTypeWiseTuningSampler(tuning_space: neural_compressor.strategy.utils.tuning_space.TuningSpace, tuning_items_priority: List[str], tuning_order_lst: List[TuningOrder], op_dtype_dict: Dict[tuple, str], initial_op_tuning_cfg: Dict[tuple, neural_compressor.strategy.utils.tuning_structs.OpTuningConfig])

   Bases: :py:obj:`TuningSampler`

   Not displayed in API Docs.


.. py:class:: FallbackTuningSampler(tuning_space: neural_compressor.strategy.utils.tuning_space.TuningSpace, tuning_order_lst: List[TuningOrder], initial_op_tuning_cfg: Dict[tuple, Any], op_dtypes: Dict[str, str], accumulate: bool, skip_first: bool = True)

   Bases: :py:obj:`TuningSampler`

   Not displayed in API Docs.


.. py:class:: OpTuningConfig(op_name, op_type, op_quant_mode, tuning_space, kwargs={})

   Op tuning config.

   .. py:method:: get_state()

      Return the op tuning configuration.

      :returns: The op tuning state.
      :rtype: Dict


   .. py:method:: from_state(config: Dict)
      :classmethod:

      Create the tuning config from dict.

      :param config: A dict includes the tuning config.



.. py:class:: TuningItem(name, options=[], item_type=None)

   Not displayed in API Docs.

   .. py:property:: options

      Return all options.

      :returns: All options.

   .. py:method:: get_options_name()

      Return the name list of the options.


   .. py:method:: append(option)

      Append option.

      :param option: The option to add.


   .. py:method:: remove(option)

      Remove option.

      :param option: The option to remove.


   .. py:method:: get_option_by_name(option_name)

      Get the option item by name.

      :param option_name: option name.

      :returns: the queried option.
      :rtype: option


   .. py:method:: get_details(depth=0)

      Get the tuning item and its options recursively.

      :param depth: recursion depth. Defaults to 0.

      :returns: The tuning item and its options as a string.



.. py:class:: TuningSpace(capability, conf, framework=None)

   Not displayed in API Docs.

   1) capability -> internal format -> merge -> tuning space (tree)


   .. py:method:: query_item_option(op_name_type, path, method_name, method_val)

      Query the method value, such as scheme, algorithm.

      :param op_name_type: (op_name, op_type)
      :param path: full path
      :param method_name: method name
      :param method_val: method value

      :returns: Return the query result if exist.


   .. py:method:: get_default_config(op_name_type, quant_mode)

      Get the default tuning config.

      :param op_name_type: (op_name, op_type)
      :param quant_mode: quantization mode.

      :returns: the default config according to the specified quantization mode.
      :rtype: op_tuning_config


   .. py:method:: get_item_by_path(path, default=None)

      Get the item according to the path.


   .. py:method:: get_default_full_path(op_name_type, path)

      Complete the path.

      :param op_name_type: (op_name, op_path)
      :param path: incomplete path.

      :returns: the complete path.
      :rtype: new_path


   .. py:method:: query_quant_mode_item_by_full_path(op_name_type, path) -> Tuple[TuningItem, Tuple]

      Query the mode item by full path.


   .. py:method:: query_items_by_quant_mode(quant_mode)

      Collect all op items that support the specified mode.

      :param quant_mode: dynamic/static/bf16/fp32/fp16

      :returns: The op item set that support quant model.


   .. py:method:: get_op_default_path_by_pattern(op_name_type, pattern)

      Get the default path by quant mode.

      :param op_name_type: (op_name, op_type)
      :param pattern: 'static', 'dynamic', ('static', 'int8'), ('precision', 'fp32')

      :returns: The default full path of activation and weight if have.
      :rtype: result(Dict)



