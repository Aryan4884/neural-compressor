:py:mod:`neural_compressor.strategy.utils.tuning_space`
=======================================================

.. py:module:: neural_compressor.strategy.utils.tuning_space

.. autoapi-nested-parse::

   Tuning space.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   neural_compressor.strategy.utils.tuning_space.TuningItem
   neural_compressor.strategy.utils.tuning_space.TuningSpace



Functions
~~~~~~~~~

.. autoapisummary::

   neural_compressor.strategy.utils.tuning_space.get_op_mode_by_query_order
   neural_compressor.strategy.utils.tuning_space.pattern_to_internal
   neural_compressor.strategy.utils.tuning_space.pattern_to_path
   neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern
   neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode



.. py:class:: TuningItem(name, options=[], item_type=None)

   Not displayed in API Docs.

   ..    .. .. py:property:: options

      Return all options.

      :returns: All options.

   ..    .. py:method:: get_options_name()

      Return the name list of the options.


   .. py:method:: append(option)

      Append option.

      :param option: The option to add.


   .. py:method:: remove(option)

      Remove option.

      :param option: The option to remove.


   .. py:method:: get_option_by_name(option_name)

      Get the option item by name.

      :param option_name: option name.

      :returns: the queried option.
      :rtype: option


   .. py:method:: get_details(depth=0)

      Get the tuning item and its options recursively.

      :param depth: recursion depth. Defaults to 0.

      :returns: The tuning item and its options as a string.



.. py:class:: TuningSpace(capability, conf, framework=None)

   Not displayed in API Docs.

   1) capability -> internal format -> merge -> tuning space (tree)


   ..    .. py:method:: query_item_option(op_name_type, path, method_name, method_val)

      Query the method value, such as scheme, algorithm.

      :param op_name_type: (op_name, op_type)
      :param path: full path
      :param method_name: method name
      :param method_val: method value

      :returns: Return the query result if exist.


   .. py:method:: get_default_config(op_name_type, quant_mode)

      Get the default tuning config.

      :param op_name_type: (op_name, op_type)
      :param quant_mode: quantization mode.

      :returns: the default config according to the specified quantization mode.
      :rtype: op_tuning_config


   .. py:method:: get_item_by_path(path, default=None)

      Get the item according to the path.


   .. py:method:: get_default_full_path(op_name_type, path)

      Complete the path.

      :param op_name_type: (op_name, op_path)
      :param path: incomplete path.

      :returns: the complete path.
      :rtype: new_path


   .. py:method:: query_quant_mode_item_by_full_path(op_name_type, path) -> Tuple[TuningItem, Tuple]

      Query the mode item by full path.


   .. py:method:: query_items_by_quant_mode(quant_mode)

      Collect all op items that support the specified mode.

      :param quant_mode: dynamic/static/bf16/fp32/fp16

      :returns: The op item set that support quant model.


   .. py:method:: get_op_default_path_by_pattern(op_name_type, pattern)

      Get the default path by quant mode.

      :param op_name_type: (op_name, op_type)
      :param pattern: 'static', 'dynamic', ('static', 'int8'), ('precision', 'fp32')

      :returns: The default full path of activation and weight if have.
      :rtype: result(Dict)



.. py:function:: get_op_mode_by_query_order(tuning_space: TuningSpace, query_order)

   Get the op mode according to the query order.


.. py:function:: pattern_to_internal(pattern, default_dtype='int8')

   Convert pattern to internal format.

   'static' -> ('static', (('int8'),('int8')))
   'dynamic' -> ('dynamic', (('int8'),('int8')))
   'fp32' -> ('precision', (('fp32'), ('fp32')))
   'bf16' -> ('precision', (('bf16'), ('bf16')))
   ('static', 'int8') -> ('static', (('int8'),('int8')))
   ('dynamic', 'int8') -> ('dynamic', (('int8'),('int8')))
   ('precision', 'fp32') -> ('precision', (('fp32'), ('fp32')))) # (('fp32'), ('fp32')) or ('fp32', 'fp32')
   #TODO to add the support for mixed data type of weight and activation


.. py:function:: pattern_to_path(pattern)

   Convert pattern to path.


.. py:function:: quant_mode_from_pattern(internal_pattern)

   Get quant mode from internal pattern.


.. py:function:: initial_tuning_cfg_with_quant_mode(op_name_type, quant_mode, tuning_space: TuningSpace) -> neural_compressor.strategy.utils.tuning_structs.OpTuningConfig

   Initialize the tuning cfg.

   :param op_name_type: (op name, op type)
   :param quant_mode: dynamic/static/fp32/bf16/fp16
   :param tuning_space: tuning space.

   step1, convert the quant_mode into internal format.
   step2, complete the path based.
   step3, get the mode item.
   step4, use the first option as value for method.
   step5, create the op tuning config.

   :returns: The initial tuning config.


